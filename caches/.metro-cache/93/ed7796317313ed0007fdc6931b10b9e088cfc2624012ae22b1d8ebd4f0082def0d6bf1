{"dependencies":[{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"yg7e6laZwmpbIvId5jovq9ugXp8=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30=","exportNames":["*"]}},{"name":"tslib","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":16,"index":93},"end":{"line":3,"column":32,"index":109}}],"key":"vm88vOsSPZItrLOmMEyUuGkd1y4=","exportNames":["*"]}},{"name":"./PostgrestFilterBuilder","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":57,"index":168},"end":{"line":4,"column":92,"index":203}}],"key":"NGvdEkdD+wH/sBHVGxr/LfyZvLA=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _classCallCheck = require(_dependencyMap[0], \"@babel/runtime/helpers/classCallCheck\");\n  var _createClass = require(_dependencyMap[1], \"@babel/runtime/helpers/createClass\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  var tslib_1 = require(_dependencyMap[2], \"tslib\");\n  var PostgrestFilterBuilder_1 = tslib_1.__importDefault(require(_dependencyMap[3], \"./PostgrestFilterBuilder\"));\n  var PostgrestQueryBuilder = /*#__PURE__*/function () {\n    function PostgrestQueryBuilder(url, _ref) {\n      var _ref$headers = _ref.headers,\n        headers = _ref$headers === void 0 ? {} : _ref$headers,\n        schema = _ref.schema,\n        fetch = _ref.fetch;\n      _classCallCheck(this, PostgrestQueryBuilder);\n      this.url = url;\n      this.headers = new Headers(headers);\n      this.schema = schema;\n      this.fetch = fetch;\n    }\n    /**\n     * Perform a SELECT query on the table or view.\n     *\n     * @param columns - The columns to retrieve, separated by commas. Columns can be renamed when returned with `customName:columnName`\n     *\n     * @param options - Named parameters\n     *\n     * @param options.head - When set to `true`, `data` will not be returned.\n     * Useful if you only need the count.\n     *\n     * @param options.count - Count algorithm to use to count rows in the table or view.\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     */\n    return _createClass(PostgrestQueryBuilder, [{\n      key: \"select\",\n      value: function select(columns, options) {\n        var _ref2 = options !== null && options !== void 0 ? options : {},\n          _ref2$head = _ref2.head,\n          head = _ref2$head === void 0 ? false : _ref2$head,\n          count = _ref2.count;\n        var method = head ? 'HEAD' : 'GET';\n        // Remove whitespaces except when quoted\n        var quoted = false;\n        var cleanedColumns = (columns !== null && columns !== void 0 ? columns : '*').split('').map(c => {\n          if (/\\s/.test(c) && !quoted) {\n            return '';\n          }\n          if (c === '\"') {\n            quoted = !quoted;\n          }\n          return c;\n        }).join('');\n        this.url.searchParams.set('select', cleanedColumns);\n        if (count) {\n          this.headers.append('Prefer', `count=${count}`);\n        }\n        return new PostgrestFilterBuilder_1.default({\n          method,\n          url: this.url,\n          headers: this.headers,\n          schema: this.schema,\n          fetch: this.fetch\n        });\n      }\n      /**\n       * Perform an INSERT into the table or view.\n       *\n       * By default, inserted rows are not returned. To return it, chain the call\n       * with `.select()`.\n       *\n       * @param values - The values to insert. Pass an object to insert a single row\n       * or an array to insert multiple rows.\n       *\n       * @param options - Named parameters\n       *\n       * @param options.count - Count algorithm to use to count inserted rows.\n       *\n       * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n       * hood.\n       *\n       * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n       * statistics under the hood.\n       *\n       * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n       * numbers.\n       *\n       * @param options.defaultToNull - Make missing fields default to `null`.\n       * Otherwise, use the default value for the column. Only applies for bulk\n       * inserts.\n       */\n    }, {\n      key: \"insert\",\n      value: function insert(values) {\n        var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          count = _ref3.count,\n          _ref3$defaultToNull = _ref3.defaultToNull,\n          defaultToNull = _ref3$defaultToNull === void 0 ? true : _ref3$defaultToNull;\n        var _a;\n        var method = 'POST';\n        if (count) {\n          this.headers.append('Prefer', `count=${count}`);\n        }\n        if (!defaultToNull) {\n          this.headers.append('Prefer', `missing=default`);\n        }\n        if (Array.isArray(values)) {\n          var columns = values.reduce((acc, x) => acc.concat(Object.keys(x)), []);\n          if (columns.length > 0) {\n            var uniqueColumns = [...new Set(columns)].map(column => `\"${column}\"`);\n            this.url.searchParams.set('columns', uniqueColumns.join(','));\n          }\n        }\n        return new PostgrestFilterBuilder_1.default({\n          method,\n          url: this.url,\n          headers: this.headers,\n          schema: this.schema,\n          body: values,\n          fetch: (_a = this.fetch) !== null && _a !== void 0 ? _a : fetch\n        });\n      }\n      /**\n       * Perform an UPSERT on the table or view. Depending on the column(s) passed\n       * to `onConflict`, `.upsert()` allows you to perform the equivalent of\n       * `.insert()` if a row with the corresponding `onConflict` columns doesn't\n       * exist, or if it does exist, perform an alternative action depending on\n       * `ignoreDuplicates`.\n       *\n       * By default, upserted rows are not returned. To return it, chain the call\n       * with `.select()`.\n       *\n       * @param values - The values to upsert with. Pass an object to upsert a\n       * single row or an array to upsert multiple rows.\n       *\n       * @param options - Named parameters\n       *\n       * @param options.onConflict - Comma-separated UNIQUE column(s) to specify how\n       * duplicate rows are determined. Two rows are duplicates if all the\n       * `onConflict` columns are equal.\n       *\n       * @param options.ignoreDuplicates - If `true`, duplicate rows are ignored. If\n       * `false`, duplicate rows are merged with existing rows.\n       *\n       * @param options.count - Count algorithm to use to count upserted rows.\n       *\n       * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n       * hood.\n       *\n       * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n       * statistics under the hood.\n       *\n       * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n       * numbers.\n       *\n       * @param options.defaultToNull - Make missing fields default to `null`.\n       * Otherwise, use the default value for the column. This only applies when\n       * inserting new rows, not when merging with existing rows under\n       * `ignoreDuplicates: false`. This also only applies when doing bulk upserts.\n       */\n    }, {\n      key: \"upsert\",\n      value: function upsert(values) {\n        var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          onConflict = _ref4.onConflict,\n          _ref4$ignoreDuplicate = _ref4.ignoreDuplicates,\n          ignoreDuplicates = _ref4$ignoreDuplicate === void 0 ? false : _ref4$ignoreDuplicate,\n          count = _ref4.count,\n          _ref4$defaultToNull = _ref4.defaultToNull,\n          defaultToNull = _ref4$defaultToNull === void 0 ? true : _ref4$defaultToNull;\n        var _a;\n        var method = 'POST';\n        this.headers.append('Prefer', `resolution=${ignoreDuplicates ? 'ignore' : 'merge'}-duplicates`);\n        if (onConflict !== undefined) this.url.searchParams.set('on_conflict', onConflict);\n        if (count) {\n          this.headers.append('Prefer', `count=${count}`);\n        }\n        if (!defaultToNull) {\n          this.headers.append('Prefer', 'missing=default');\n        }\n        if (Array.isArray(values)) {\n          var columns = values.reduce((acc, x) => acc.concat(Object.keys(x)), []);\n          if (columns.length > 0) {\n            var uniqueColumns = [...new Set(columns)].map(column => `\"${column}\"`);\n            this.url.searchParams.set('columns', uniqueColumns.join(','));\n          }\n        }\n        return new PostgrestFilterBuilder_1.default({\n          method,\n          url: this.url,\n          headers: this.headers,\n          schema: this.schema,\n          body: values,\n          fetch: (_a = this.fetch) !== null && _a !== void 0 ? _a : fetch\n        });\n      }\n      /**\n       * Perform an UPDATE on the table or view.\n       *\n       * By default, updated rows are not returned. To return it, chain the call\n       * with `.select()` after filters.\n       *\n       * @param values - The values to update with\n       *\n       * @param options - Named parameters\n       *\n       * @param options.count - Count algorithm to use to count updated rows.\n       *\n       * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n       * hood.\n       *\n       * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n       * statistics under the hood.\n       *\n       * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n       * numbers.\n       */\n    }, {\n      key: \"update\",\n      value: function update(values) {\n        var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          count = _ref5.count;\n        var _a;\n        var method = 'PATCH';\n        if (count) {\n          this.headers.append('Prefer', `count=${count}`);\n        }\n        return new PostgrestFilterBuilder_1.default({\n          method,\n          url: this.url,\n          headers: this.headers,\n          schema: this.schema,\n          body: values,\n          fetch: (_a = this.fetch) !== null && _a !== void 0 ? _a : fetch\n        });\n      }\n      /**\n       * Perform a DELETE on the table or view.\n       *\n       * By default, deleted rows are not returned. To return it, chain the call\n       * with `.select()` after filters.\n       *\n       * @param options - Named parameters\n       *\n       * @param options.count - Count algorithm to use to count deleted rows.\n       *\n       * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n       * hood.\n       *\n       * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n       * statistics under the hood.\n       *\n       * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n       * numbers.\n       */\n    }, {\n      key: \"delete\",\n      value: function _delete() {\n        var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          count = _ref6.count;\n        var _a;\n        var method = 'DELETE';\n        if (count) {\n          this.headers.append('Prefer', `count=${count}`);\n        }\n        return new PostgrestFilterBuilder_1.default({\n          method,\n          url: this.url,\n          headers: this.headers,\n          schema: this.schema,\n          fetch: (_a = this.fetch) !== null && _a !== void 0 ? _a : fetch\n        });\n      }\n    }]);\n  }();\n  exports.default = PostgrestQueryBuilder;\n});","lineCount":286,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_classCallCheck"],[4,21,1,13],[4,24,1,13,"require"],[4,31,1,13],[4,32,1,13,"_dependencyMap"],[4,46,1,13],[5,2,1,13],[5,6,1,13,"_createClass"],[5,18,1,13],[5,21,1,13,"require"],[5,28,1,13],[5,29,1,13,"_dependencyMap"],[5,43,1,13],[6,2,2,0,"Object"],[6,8,2,6],[6,9,2,7,"defineProperty"],[6,23,2,21],[6,24,2,22,"exports"],[6,31,2,29],[6,33,2,31],[6,45,2,43],[6,47,2,45],[7,4,2,47,"value"],[7,9,2,52],[7,11,2,54],[8,2,2,59],[8,3,2,60],[8,4,2,61],[9,2,3,0],[9,6,3,6,"tslib_1"],[9,13,3,13],[9,16,3,16,"require"],[9,23,3,23],[9,24,3,23,"_dependencyMap"],[9,38,3,23],[9,50,3,31],[9,51,3,32],[10,2,4,0],[10,6,4,6,"PostgrestFilterBuilder_1"],[10,30,4,30],[10,33,4,33,"tslib_1"],[10,40,4,40],[10,41,4,41,"__importDefault"],[10,56,4,56],[10,57,4,57,"require"],[10,64,4,64],[10,65,4,64,"_dependencyMap"],[10,79,4,64],[10,110,4,91],[10,111,4,92],[10,112,4,93],[11,2,4,94],[11,6,5,6,"PostgrestQueryBuilder"],[11,27,5,27],[12,4,6,4],[12,13,6,4,"PostgrestQueryBuilder"],[12,35,6,16,"url"],[12,38,6,19],[12,40,6,19,"_ref"],[12,44,6,19],[12,46,6,55],[13,6,6,55],[13,10,6,55,"_ref$headers"],[13,22,6,55],[13,25,6,55,"_ref"],[13,29,6,55],[13,30,6,23,"headers"],[13,37,6,30],[14,8,6,23,"headers"],[14,15,6,30],[14,18,6,30,"_ref$headers"],[14,30,6,30],[14,44,6,33],[14,45,6,34],[14,46,6,35],[14,49,6,35,"_ref$headers"],[14,61,6,35],[15,8,6,37,"schema"],[15,14,6,43],[15,17,6,43,"_ref"],[15,21,6,43],[15,22,6,37,"schema"],[15,28,6,43],[16,8,6,45,"fetch"],[16,13,6,50],[16,16,6,50,"_ref"],[16,20,6,50],[16,21,6,45,"fetch"],[16,26,6,50],[17,6,6,50,"_classCallCheck"],[17,21,6,50],[17,28,6,50,"PostgrestQueryBuilder"],[17,49,6,50],[18,6,7,8],[18,10,7,12],[18,11,7,13,"url"],[18,14,7,16],[18,17,7,19,"url"],[18,20,7,22],[19,6,8,8],[19,10,8,12],[19,11,8,13,"headers"],[19,18,8,20],[19,21,8,23],[19,25,8,27,"Headers"],[19,32,8,34],[19,33,8,35,"headers"],[19,40,8,42],[19,41,8,43],[20,6,9,8],[20,10,9,12],[20,11,9,13,"schema"],[20,17,9,19],[20,20,9,22,"schema"],[20,26,9,28],[21,6,10,8],[21,10,10,12],[21,11,10,13,"fetch"],[21,16,10,18],[21,19,10,21,"fetch"],[21,24,10,26],[22,4,11,4],[23,4,12,4],[24,0,13,0],[25,0,14,0],[26,0,15,0],[27,0,16,0],[28,0,17,0],[29,0,18,0],[30,0,19,0],[31,0,20,0],[32,0,21,0],[33,0,22,0],[34,0,23,0],[35,0,24,0],[36,0,25,0],[37,0,26,0],[38,0,27,0],[39,0,28,0],[40,0,29,0],[41,0,30,0],[42,0,31,0],[43,0,32,0],[44,4,12,4],[44,11,12,4,"_createClass"],[44,23,12,4],[44,24,12,4,"PostgrestQueryBuilder"],[44,45,12,4],[45,6,12,4,"key"],[45,9,12,4],[46,6,12,4,"value"],[46,11,12,4],[46,13,33,4],[46,22,33,4,"select"],[46,28,33,10,"select"],[46,29,33,11,"columns"],[46,36,33,18],[46,38,33,20,"options"],[46,45,33,27],[46,47,33,29],[47,8,34,8],[47,12,34,8,"_ref2"],[47,17,34,8],[47,20,34,40,"options"],[47,27,34,47],[47,32,34,52],[47,36,34,56],[47,40,34,60,"options"],[47,47,34,67],[47,52,34,72],[47,57,34,77],[47,58,34,78],[47,61,34,81,"options"],[47,68,34,88],[47,71,34,91],[47,72,34,92],[47,73,34,93],[48,10,34,93,"_ref2$head"],[48,20,34,93],[48,23,34,93,"_ref2"],[48,28,34,93],[48,29,34,16,"head"],[48,33,34,20],[49,10,34,16,"head"],[49,14,34,20],[49,17,34,20,"_ref2$head"],[49,27,34,20],[49,41,34,23],[49,46,34,28],[49,49,34,28,"_ref2$head"],[49,59,34,28],[50,10,34,30,"count"],[50,15,34,35],[50,18,34,35,"_ref2"],[50,23,34,35],[50,24,34,30,"count"],[50,29,34,35],[51,8,35,8],[51,12,35,14,"method"],[51,18,35,20],[51,21,35,23,"head"],[51,25,35,27],[51,28,35,30],[51,34,35,36],[51,37,35,39],[51,42,35,44],[52,8,36,8],[53,8,37,8],[53,12,37,12,"quoted"],[53,18,37,18],[53,21,37,21],[53,26,37,26],[54,8,38,8],[54,12,38,14,"cleanedColumns"],[54,26,38,28],[54,29,38,31],[54,30,38,32,"columns"],[54,37,38,39],[54,42,38,44],[54,46,38,48],[54,50,38,52,"columns"],[54,57,38,59],[54,62,38,64],[54,67,38,69],[54,68,38,70],[54,71,38,73,"columns"],[54,78,38,80],[54,81,38,83],[54,84,38,86],[54,86,39,13,"split"],[54,91,39,18],[54,92,39,19],[54,94,39,21],[54,95,39,22],[54,96,40,13,"map"],[54,99,40,16],[54,100,40,18,"c"],[54,101,40,19],[54,105,40,24],[55,10,41,12],[55,14,41,16],[55,18,41,20],[55,19,41,21,"test"],[55,23,41,25],[55,24,41,26,"c"],[55,25,41,27],[55,26,41,28],[55,30,41,32],[55,31,41,33,"quoted"],[55,37,41,39],[55,39,41,41],[56,12,42,16],[56,19,42,23],[56,21,42,25],[57,10,43,12],[58,10,44,12],[58,14,44,16,"c"],[58,15,44,17],[58,20,44,22],[58,23,44,25],[58,25,44,27],[59,12,45,16,"quoted"],[59,18,45,22],[59,21,45,25],[59,22,45,26,"quoted"],[59,28,45,32],[60,10,46,12],[61,10,47,12],[61,17,47,19,"c"],[61,18,47,20],[62,8,48,8],[62,9,48,9],[62,10,48,10],[62,11,49,13,"join"],[62,15,49,17],[62,16,49,18],[62,18,49,20],[62,19,49,21],[63,8,50,8],[63,12,50,12],[63,13,50,13,"url"],[63,16,50,16],[63,17,50,17,"searchParams"],[63,29,50,29],[63,30,50,30,"set"],[63,33,50,33],[63,34,50,34],[63,42,50,42],[63,44,50,44,"cleanedColumns"],[63,58,50,58],[63,59,50,59],[64,8,51,8],[64,12,51,12,"count"],[64,17,51,17],[64,19,51,19],[65,10,52,12],[65,14,52,16],[65,15,52,17,"headers"],[65,22,52,24],[65,23,52,25,"append"],[65,29,52,31],[65,30,52,32],[65,38,52,40],[65,40,52,42],[65,49,52,51,"count"],[65,54,52,56],[65,56,52,58],[65,57,52,59],[66,8,53,8],[67,8,54,8],[67,15,54,15],[67,19,54,19,"PostgrestFilterBuilder_1"],[67,43,54,43],[67,44,54,44,"default"],[67,51,54,51],[67,52,54,52],[68,10,55,12,"method"],[68,16,55,18],[69,10,56,12,"url"],[69,13,56,15],[69,15,56,17],[69,19,56,21],[69,20,56,22,"url"],[69,23,56,25],[70,10,57,12,"headers"],[70,17,57,19],[70,19,57,21],[70,23,57,25],[70,24,57,26,"headers"],[70,31,57,33],[71,10,58,12,"schema"],[71,16,58,18],[71,18,58,20],[71,22,58,24],[71,23,58,25,"schema"],[71,29,58,31],[72,10,59,12,"fetch"],[72,15,59,17],[72,17,59,19],[72,21,59,23],[72,22,59,24,"fetch"],[73,8,60,8],[73,9,60,9],[73,10,60,10],[74,6,61,4],[75,6,62,4],[76,0,63,0],[77,0,64,0],[78,0,65,0],[79,0,66,0],[80,0,67,0],[81,0,68,0],[82,0,69,0],[83,0,70,0],[84,0,71,0],[85,0,72,0],[86,0,73,0],[87,0,74,0],[88,0,75,0],[89,0,76,0],[90,0,77,0],[91,0,78,0],[92,0,79,0],[93,0,80,0],[94,0,81,0],[95,0,82,0],[96,0,83,0],[97,0,84,0],[98,0,85,0],[99,0,86,0],[100,0,87,0],[101,4,62,4],[102,6,62,4,"key"],[102,9,62,4],[103,6,62,4,"value"],[103,11,62,4],[103,13,88,4],[103,22,88,4,"insert"],[103,28,88,10,"insert"],[103,29,88,11,"values"],[103,35,88,17],[103,37,88,58],[104,8,88,58],[104,12,88,58,"_ref3"],[104,17,88,58],[104,20,88,58,"arguments"],[104,29,88,58],[104,30,88,58,"length"],[104,36,88,58],[104,44,88,58,"arguments"],[104,53,88,58],[104,61,88,58,"undefined"],[104,70,88,58],[104,73,88,58,"arguments"],[104,82,88,58],[104,88,88,54],[104,89,88,55],[104,90,88,56],[105,10,88,21,"count"],[105,15,88,26],[105,18,88,26,"_ref3"],[105,23,88,26],[105,24,88,21,"count"],[105,29,88,26],[106,10,88,26,"_ref3$defaultToNull"],[106,29,88,26],[106,32,88,26,"_ref3"],[106,37,88,26],[106,38,88,28,"defaultToNull"],[106,51,88,41],[107,10,88,28,"defaultToNull"],[107,23,88,41],[107,26,88,41,"_ref3$defaultToNull"],[107,45,88,41],[107,59,88,44],[107,63,88,48],[107,66,88,48,"_ref3$defaultToNull"],[107,85,88,48],[108,8,89,8],[108,12,89,12,"_a"],[108,14,89,14],[109,8,90,8],[109,12,90,14,"method"],[109,18,90,20],[109,21,90,23],[109,27,90,29],[110,8,91,8],[110,12,91,12,"count"],[110,17,91,17],[110,19,91,19],[111,10,92,12],[111,14,92,16],[111,15,92,17,"headers"],[111,22,92,24],[111,23,92,25,"append"],[111,29,92,31],[111,30,92,32],[111,38,92,40],[111,40,92,42],[111,49,92,51,"count"],[111,54,92,56],[111,56,92,58],[111,57,92,59],[112,8,93,8],[113,8,94,8],[113,12,94,12],[113,13,94,13,"defaultToNull"],[113,26,94,26],[113,28,94,28],[114,10,95,12],[114,14,95,16],[114,15,95,17,"headers"],[114,22,95,24],[114,23,95,25,"append"],[114,29,95,31],[114,30,95,32],[114,38,95,40],[114,40,95,42],[114,57,95,59],[114,58,95,60],[115,8,96,8],[116,8,97,8],[116,12,97,12,"Array"],[116,17,97,17],[116,18,97,18,"isArray"],[116,25,97,25],[116,26,97,26,"values"],[116,32,97,32],[116,33,97,33],[116,35,97,35],[117,10,98,12],[117,14,98,18,"columns"],[117,21,98,25],[117,24,98,28,"values"],[117,30,98,34],[117,31,98,35,"reduce"],[117,37,98,41],[117,38,98,42],[117,39,98,43,"acc"],[117,42,98,46],[117,44,98,48,"x"],[117,45,98,49],[117,50,98,54,"acc"],[117,53,98,57],[117,54,98,58,"concat"],[117,60,98,64],[117,61,98,65,"Object"],[117,67,98,71],[117,68,98,72,"keys"],[117,72,98,76],[117,73,98,77,"x"],[117,74,98,78],[117,75,98,79],[117,76,98,80],[117,78,98,82],[117,80,98,84],[117,81,98,85],[118,10,99,12],[118,14,99,16,"columns"],[118,21,99,23],[118,22,99,24,"length"],[118,28,99,30],[118,31,99,33],[118,32,99,34],[118,34,99,36],[119,12,100,16],[119,16,100,22,"uniqueColumns"],[119,29,100,35],[119,32,100,38],[119,33,100,39],[119,36,100,42],[119,40,100,46,"Set"],[119,43,100,49],[119,44,100,50,"columns"],[119,51,100,57],[119,52,100,58],[119,53,100,59],[119,54,100,60,"map"],[119,57,100,63],[119,58,100,65,"column"],[119,64,100,71],[119,68,100,76],[119,72,100,80,"column"],[119,78,100,86],[119,81,100,89],[119,82,100,90],[120,12,101,16],[120,16,101,20],[120,17,101,21,"url"],[120,20,101,24],[120,21,101,25,"searchParams"],[120,33,101,37],[120,34,101,38,"set"],[120,37,101,41],[120,38,101,42],[120,47,101,51],[120,49,101,53,"uniqueColumns"],[120,62,101,66],[120,63,101,67,"join"],[120,67,101,71],[120,68,101,72],[120,71,101,75],[120,72,101,76],[120,73,101,77],[121,10,102,12],[122,8,103,8],[123,8,104,8],[123,15,104,15],[123,19,104,19,"PostgrestFilterBuilder_1"],[123,43,104,43],[123,44,104,44,"default"],[123,51,104,51],[123,52,104,52],[124,10,105,12,"method"],[124,16,105,18],[125,10,106,12,"url"],[125,13,106,15],[125,15,106,17],[125,19,106,21],[125,20,106,22,"url"],[125,23,106,25],[126,10,107,12,"headers"],[126,17,107,19],[126,19,107,21],[126,23,107,25],[126,24,107,26,"headers"],[126,31,107,33],[127,10,108,12,"schema"],[127,16,108,18],[127,18,108,20],[127,22,108,24],[127,23,108,25,"schema"],[127,29,108,31],[128,10,109,12,"body"],[128,14,109,16],[128,16,109,18,"values"],[128,22,109,24],[129,10,110,12,"fetch"],[129,15,110,17],[129,17,110,19],[129,18,110,20,"_a"],[129,20,110,22],[129,23,110,25],[129,27,110,29],[129,28,110,30,"fetch"],[129,33,110,35],[129,39,110,41],[129,43,110,45],[129,47,110,49,"_a"],[129,49,110,51],[129,54,110,56],[129,59,110,61],[129,60,110,62],[129,63,110,65,"_a"],[129,65,110,67],[129,68,110,70,"fetch"],[130,8,111,8],[130,9,111,9],[130,10,111,10],[131,6,112,4],[132,6,113,4],[133,0,114,0],[134,0,115,0],[135,0,116,0],[136,0,117,0],[137,0,118,0],[138,0,119,0],[139,0,120,0],[140,0,121,0],[141,0,122,0],[142,0,123,0],[143,0,124,0],[144,0,125,0],[145,0,126,0],[146,0,127,0],[147,0,128,0],[148,0,129,0],[149,0,130,0],[150,0,131,0],[151,0,132,0],[152,0,133,0],[153,0,134,0],[154,0,135,0],[155,0,136,0],[156,0,137,0],[157,0,138,0],[158,0,139,0],[159,0,140,0],[160,0,141,0],[161,0,142,0],[162,0,143,0],[163,0,144,0],[164,0,145,0],[165,0,146,0],[166,0,147,0],[167,0,148,0],[168,0,149,0],[169,0,150,0],[170,4,113,4],[171,6,113,4,"key"],[171,9,113,4],[172,6,113,4,"value"],[172,11,113,4],[172,13,151,4],[172,22,151,4,"upsert"],[172,28,151,10,"upsert"],[172,29,151,11,"values"],[172,35,151,17],[172,37,151,96],[173,8,151,96],[173,12,151,96,"_ref4"],[173,17,151,96],[173,20,151,96,"arguments"],[173,29,151,96],[173,30,151,96,"length"],[173,36,151,96],[173,44,151,96,"arguments"],[173,53,151,96],[173,61,151,96,"undefined"],[173,70,151,96],[173,73,151,96,"arguments"],[173,82,151,96],[173,88,151,92],[173,89,151,93],[173,90,151,94],[174,10,151,21,"onConflict"],[174,20,151,31],[174,23,151,31,"_ref4"],[174,28,151,31],[174,29,151,21,"onConflict"],[174,39,151,31],[175,10,151,31,"_ref4$ignoreDuplicate"],[175,31,151,31],[175,34,151,31,"_ref4"],[175,39,151,31],[175,40,151,33,"ignoreDuplicates"],[175,56,151,49],[176,10,151,33,"ignoreDuplicates"],[176,26,151,49],[176,29,151,49,"_ref4$ignoreDuplicate"],[176,50,151,49],[176,64,151,52],[176,69,151,57],[176,72,151,57,"_ref4$ignoreDuplicate"],[176,93,151,57],[177,10,151,59,"count"],[177,15,151,64],[177,18,151,64,"_ref4"],[177,23,151,64],[177,24,151,59,"count"],[177,29,151,64],[178,10,151,64,"_ref4$defaultToNull"],[178,29,151,64],[178,32,151,64,"_ref4"],[178,37,151,64],[178,38,151,66,"defaultToNull"],[178,51,151,79],[179,10,151,66,"defaultToNull"],[179,23,151,79],[179,26,151,79,"_ref4$defaultToNull"],[179,45,151,79],[179,59,151,82],[179,63,151,86],[179,66,151,86,"_ref4$defaultToNull"],[179,85,151,86],[180,8,152,8],[180,12,152,12,"_a"],[180,14,152,14],[181,8,153,8],[181,12,153,14,"method"],[181,18,153,20],[181,21,153,23],[181,27,153,29],[182,8,154,8],[182,12,154,12],[182,13,154,13,"headers"],[182,20,154,20],[182,21,154,21,"append"],[182,27,154,27],[182,28,154,28],[182,36,154,36],[182,38,154,38],[182,52,154,52,"ignoreDuplicates"],[182,68,154,68],[182,71,154,71],[182,79,154,79],[182,82,154,82],[182,89,154,89],[182,102,154,102],[182,103,154,103],[183,8,155,8],[183,12,155,12,"onConflict"],[183,22,155,22],[183,27,155,27,"undefined"],[183,36,155,36],[183,38,156,12],[183,42,156,16],[183,43,156,17,"url"],[183,46,156,20],[183,47,156,21,"searchParams"],[183,59,156,33],[183,60,156,34,"set"],[183,63,156,37],[183,64,156,38],[183,77,156,51],[183,79,156,53,"onConflict"],[183,89,156,63],[183,90,156,64],[184,8,157,8],[184,12,157,12,"count"],[184,17,157,17],[184,19,157,19],[185,10,158,12],[185,14,158,16],[185,15,158,17,"headers"],[185,22,158,24],[185,23,158,25,"append"],[185,29,158,31],[185,30,158,32],[185,38,158,40],[185,40,158,42],[185,49,158,51,"count"],[185,54,158,56],[185,56,158,58],[185,57,158,59],[186,8,159,8],[187,8,160,8],[187,12,160,12],[187,13,160,13,"defaultToNull"],[187,26,160,26],[187,28,160,28],[188,10,161,12],[188,14,161,16],[188,15,161,17,"headers"],[188,22,161,24],[188,23,161,25,"append"],[188,29,161,31],[188,30,161,32],[188,38,161,40],[188,40,161,42],[188,57,161,59],[188,58,161,60],[189,8,162,8],[190,8,163,8],[190,12,163,12,"Array"],[190,17,163,17],[190,18,163,18,"isArray"],[190,25,163,25],[190,26,163,26,"values"],[190,32,163,32],[190,33,163,33],[190,35,163,35],[191,10,164,12],[191,14,164,18,"columns"],[191,21,164,25],[191,24,164,28,"values"],[191,30,164,34],[191,31,164,35,"reduce"],[191,37,164,41],[191,38,164,42],[191,39,164,43,"acc"],[191,42,164,46],[191,44,164,48,"x"],[191,45,164,49],[191,50,164,54,"acc"],[191,53,164,57],[191,54,164,58,"concat"],[191,60,164,64],[191,61,164,65,"Object"],[191,67,164,71],[191,68,164,72,"keys"],[191,72,164,76],[191,73,164,77,"x"],[191,74,164,78],[191,75,164,79],[191,76,164,80],[191,78,164,82],[191,80,164,84],[191,81,164,85],[192,10,165,12],[192,14,165,16,"columns"],[192,21,165,23],[192,22,165,24,"length"],[192,28,165,30],[192,31,165,33],[192,32,165,34],[192,34,165,36],[193,12,166,16],[193,16,166,22,"uniqueColumns"],[193,29,166,35],[193,32,166,38],[193,33,166,39],[193,36,166,42],[193,40,166,46,"Set"],[193,43,166,49],[193,44,166,50,"columns"],[193,51,166,57],[193,52,166,58],[193,53,166,59],[193,54,166,60,"map"],[193,57,166,63],[193,58,166,65,"column"],[193,64,166,71],[193,68,166,76],[193,72,166,80,"column"],[193,78,166,86],[193,81,166,89],[193,82,166,90],[194,12,167,16],[194,16,167,20],[194,17,167,21,"url"],[194,20,167,24],[194,21,167,25,"searchParams"],[194,33,167,37],[194,34,167,38,"set"],[194,37,167,41],[194,38,167,42],[194,47,167,51],[194,49,167,53,"uniqueColumns"],[194,62,167,66],[194,63,167,67,"join"],[194,67,167,71],[194,68,167,72],[194,71,167,75],[194,72,167,76],[194,73,167,77],[195,10,168,12],[196,8,169,8],[197,8,170,8],[197,15,170,15],[197,19,170,19,"PostgrestFilterBuilder_1"],[197,43,170,43],[197,44,170,44,"default"],[197,51,170,51],[197,52,170,52],[198,10,171,12,"method"],[198,16,171,18],[199,10,172,12,"url"],[199,13,172,15],[199,15,172,17],[199,19,172,21],[199,20,172,22,"url"],[199,23,172,25],[200,10,173,12,"headers"],[200,17,173,19],[200,19,173,21],[200,23,173,25],[200,24,173,26,"headers"],[200,31,173,33],[201,10,174,12,"schema"],[201,16,174,18],[201,18,174,20],[201,22,174,24],[201,23,174,25,"schema"],[201,29,174,31],[202,10,175,12,"body"],[202,14,175,16],[202,16,175,18,"values"],[202,22,175,24],[203,10,176,12,"fetch"],[203,15,176,17],[203,17,176,19],[203,18,176,20,"_a"],[203,20,176,22],[203,23,176,25],[203,27,176,29],[203,28,176,30,"fetch"],[203,33,176,35],[203,39,176,41],[203,43,176,45],[203,47,176,49,"_a"],[203,49,176,51],[203,54,176,56],[203,59,176,61],[203,60,176,62],[203,63,176,65,"_a"],[203,65,176,67],[203,68,176,70,"fetch"],[204,8,177,8],[204,9,177,9],[204,10,177,10],[205,6,178,4],[206,6,179,4],[207,0,180,0],[208,0,181,0],[209,0,182,0],[210,0,183,0],[211,0,184,0],[212,0,185,0],[213,0,186,0],[214,0,187,0],[215,0,188,0],[216,0,189,0],[217,0,190,0],[218,0,191,0],[219,0,192,0],[220,0,193,0],[221,0,194,0],[222,0,195,0],[223,0,196,0],[224,0,197,0],[225,0,198,0],[226,0,199,0],[227,4,179,4],[228,6,179,4,"key"],[228,9,179,4],[229,6,179,4,"value"],[229,11,179,4],[229,13,200,4],[229,22,200,4,"update"],[229,28,200,10,"update"],[229,29,200,11,"values"],[229,35,200,17],[229,37,200,36],[230,8,200,36],[230,12,200,36,"_ref5"],[230,17,200,36],[230,20,200,36,"arguments"],[230,29,200,36],[230,30,200,36,"length"],[230,36,200,36],[230,44,200,36,"arguments"],[230,53,200,36],[230,61,200,36,"undefined"],[230,70,200,36],[230,73,200,36,"arguments"],[230,82,200,36],[230,88,200,32],[230,89,200,33],[230,90,200,34],[231,10,200,21,"count"],[231,15,200,26],[231,18,200,26,"_ref5"],[231,23,200,26],[231,24,200,21,"count"],[231,29,200,26],[232,8,201,8],[232,12,201,12,"_a"],[232,14,201,14],[233,8,202,8],[233,12,202,14,"method"],[233,18,202,20],[233,21,202,23],[233,28,202,30],[234,8,203,8],[234,12,203,12,"count"],[234,17,203,17],[234,19,203,19],[235,10,204,12],[235,14,204,16],[235,15,204,17,"headers"],[235,22,204,24],[235,23,204,25,"append"],[235,29,204,31],[235,30,204,32],[235,38,204,40],[235,40,204,42],[235,49,204,51,"count"],[235,54,204,56],[235,56,204,58],[235,57,204,59],[236,8,205,8],[237,8,206,8],[237,15,206,15],[237,19,206,19,"PostgrestFilterBuilder_1"],[237,43,206,43],[237,44,206,44,"default"],[237,51,206,51],[237,52,206,52],[238,10,207,12,"method"],[238,16,207,18],[239,10,208,12,"url"],[239,13,208,15],[239,15,208,17],[239,19,208,21],[239,20,208,22,"url"],[239,23,208,25],[240,10,209,12,"headers"],[240,17,209,19],[240,19,209,21],[240,23,209,25],[240,24,209,26,"headers"],[240,31,209,33],[241,10,210,12,"schema"],[241,16,210,18],[241,18,210,20],[241,22,210,24],[241,23,210,25,"schema"],[241,29,210,31],[242,10,211,12,"body"],[242,14,211,16],[242,16,211,18,"values"],[242,22,211,24],[243,10,212,12,"fetch"],[243,15,212,17],[243,17,212,19],[243,18,212,20,"_a"],[243,20,212,22],[243,23,212,25],[243,27,212,29],[243,28,212,30,"fetch"],[243,33,212,35],[243,39,212,41],[243,43,212,45],[243,47,212,49,"_a"],[243,49,212,51],[243,54,212,56],[243,59,212,61],[243,60,212,62],[243,63,212,65,"_a"],[243,65,212,67],[243,68,212,70,"fetch"],[244,8,213,8],[244,9,213,9],[244,10,213,10],[245,6,214,4],[246,6,215,4],[247,0,216,0],[248,0,217,0],[249,0,218,0],[250,0,219,0],[251,0,220,0],[252,0,221,0],[253,0,222,0],[254,0,223,0],[255,0,224,0],[256,0,225,0],[257,0,226,0],[258,0,227,0],[259,0,228,0],[260,0,229,0],[261,0,230,0],[262,0,231,0],[263,0,232,0],[264,0,233,0],[265,4,215,4],[266,6,215,4,"key"],[266,9,215,4],[267,6,215,4,"value"],[267,11,215,4],[267,13,234,4],[267,22,234,4,"delete"],[267,29,234,10,"delete"],[267,30,234,10],[267,32,234,28],[268,8,234,28],[268,12,234,28,"_ref6"],[268,17,234,28],[268,20,234,28,"arguments"],[268,29,234,28],[268,30,234,28,"length"],[268,36,234,28],[268,44,234,28,"arguments"],[268,53,234,28],[268,61,234,28,"undefined"],[268,70,234,28],[268,73,234,28,"arguments"],[268,82,234,28],[268,88,234,24],[268,89,234,25],[268,90,234,26],[269,10,234,13,"count"],[269,15,234,18],[269,18,234,18,"_ref6"],[269,23,234,18],[269,24,234,13,"count"],[269,29,234,18],[270,8,235,8],[270,12,235,12,"_a"],[270,14,235,14],[271,8,236,8],[271,12,236,14,"method"],[271,18,236,20],[271,21,236,23],[271,29,236,31],[272,8,237,8],[272,12,237,12,"count"],[272,17,237,17],[272,19,237,19],[273,10,238,12],[273,14,238,16],[273,15,238,17,"headers"],[273,22,238,24],[273,23,238,25,"append"],[273,29,238,31],[273,30,238,32],[273,38,238,40],[273,40,238,42],[273,49,238,51,"count"],[273,54,238,56],[273,56,238,58],[273,57,238,59],[274,8,239,8],[275,8,240,8],[275,15,240,15],[275,19,240,19,"PostgrestFilterBuilder_1"],[275,43,240,43],[275,44,240,44,"default"],[275,51,240,51],[275,52,240,52],[276,10,241,12,"method"],[276,16,241,18],[277,10,242,12,"url"],[277,13,242,15],[277,15,242,17],[277,19,242,21],[277,20,242,22,"url"],[277,23,242,25],[278,10,243,12,"headers"],[278,17,243,19],[278,19,243,21],[278,23,243,25],[278,24,243,26,"headers"],[278,31,243,33],[279,10,244,12,"schema"],[279,16,244,18],[279,18,244,20],[279,22,244,24],[279,23,244,25,"schema"],[279,29,244,31],[280,10,245,12,"fetch"],[280,15,245,17],[280,17,245,19],[280,18,245,20,"_a"],[280,20,245,22],[280,23,245,25],[280,27,245,29],[280,28,245,30,"fetch"],[280,33,245,35],[280,39,245,41],[280,43,245,45],[280,47,245,49,"_a"],[280,49,245,51],[280,54,245,56],[280,59,245,61],[280,60,245,62],[280,63,245,65,"_a"],[280,65,245,67],[280,68,245,70,"fetch"],[281,8,246,8],[281,9,246,9],[281,10,246,10],[282,6,247,4],[283,4,247,5],[284,2,247,5],[285,2,249,0,"exports"],[285,9,249,7],[285,10,249,8,"default"],[285,17,249,15],[285,20,249,18,"PostgrestQueryBuilder"],[285,41,249,39],[286,0,249,40],[286,3]],"functionMap":{"names":["<global>","PostgrestQueryBuilder","constructor","select","split.map$argument_0","insert","values.reduce$argument_0","map$argument_0","upsert","update","_delete"],"mappings":"AAA;ACI;ICC;KDK;IEsB;iBCO;SDQ;KFa;II2B;0CCU,sCD;gEEE,yBF;KJY;IOuC;0CFa,sCE;gEDE,yBC;KPY;IQsB;KRc;ISoB;KTa;CDC"}},"type":"js/module"}]}