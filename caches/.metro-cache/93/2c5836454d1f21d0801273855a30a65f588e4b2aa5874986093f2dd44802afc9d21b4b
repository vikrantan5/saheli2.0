{"dependencies":[{"name":"tslib","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":34,"index":34}}],"key":"8R25577gwLd3n1hFG9VYnRLV9eE=","exportNames":["*"]}},{"name":"./constants","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":35},"end":{"line":2,"column":46,"index":81}}],"key":"waDaw5D7vDr2hRFu0z1BqRCTzP4=","exportNames":["*"]}},{"name":"./errors","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":82},"end":{"line":3,"column":49,"index":131}}],"key":"rEld05quROH+iA6QLT6kkvqJ/qc=","exportNames":["*"]}},{"name":"./fetch","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":132},"end":{"line":4,"column":31,"index":163}}],"key":"530RtYCmKsE3te4bFHMv0Zip4Vc=","exportNames":["*"]}},{"name":"./helpers","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":164},"end":{"line":5,"column":41,"index":205}}],"key":"kg0rJsyHf+Iyf4Z1AFOYGhKLkW4=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  var _tslib = require(_dependencyMap[0], \"tslib\");\n  var _constants = require(_dependencyMap[1], \"./constants\");\n  var _errors = require(_dependencyMap[2], \"./errors\");\n  var _fetch = require(_dependencyMap[3], \"./fetch\");\n  var _helpers = require(_dependencyMap[4], \"./helpers\");\n  /**\n   * API class for managing Vector Data within Vector Indexes\n   * Provides methods for inserting, querying, listing, and deleting vector embeddings\n   */\n  class VectorDataApi {\n    constructor(url, headers = {}, fetch) {\n      this.shouldThrowOnError = false;\n      this.url = url.replace(/\\/$/, '');\n      this.headers = Object.assign(Object.assign({}, _constants.DEFAULT_HEADERS), headers);\n      this.fetch = (0, _helpers.resolveFetch)(fetch);\n    }\n    /**\n     * Enable throwing errors instead of returning them in the response\n     * When enabled, failed operations will throw instead of returning { data: null, error }\n     *\n     * @returns This instance for method chaining\n     * @example\n     * ```typescript\n     * const client = new VectorDataApi(url, headers)\n     * client.throwOnError()\n     * const { data } = await client.putVectors(options) // throws on error\n     * ```\n     */\n    throwOnError() {\n      this.shouldThrowOnError = true;\n      return this;\n    }\n    /**\n     * Inserts or updates vectors in batch (upsert operation)\n     * Accepts 1-500 vectors per request. Larger batches should be split\n     *\n     * @param options - Vector insertion options\n     * @param options.vectorBucketName - Name of the parent vector bucket\n     * @param options.indexName - Name of the target index\n     * @param options.vectors - Array of vectors to insert/update (1-500 items)\n     * @returns Promise with empty response on success or error\n     *\n     * @throws {StorageVectorsApiError} With code:\n     * - `S3VectorConflictException` if duplicate key conflict occurs (HTTP 409)\n     * - `S3VectorNotFoundException` if bucket or index doesn't exist (HTTP 404)\n     * - `InternalError` for server errors (HTTP 500)\n     *\n     * @example\n     * ```typescript\n     * const { data, error } = await client.putVectors({\n     *   vectorBucketName: 'embeddings-prod',\n     *   indexName: 'documents-openai-small',\n     *   vectors: [\n     *     {\n     *       key: 'doc-1',\n     *       data: { float32: [0.1, 0.2, 0.3, ...] }, // 1536 dimensions\n     *       metadata: { title: 'Introduction', page: 1 }\n     *     },\n     *     {\n     *       key: 'doc-2',\n     *       data: { float32: [0.4, 0.5, 0.6, ...] },\n     *       metadata: { title: 'Conclusion', page: 42 }\n     *     }\n     *   ]\n     * })\n     * ```\n     */\n    putVectors(options) {\n      return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {\n        try {\n          // Validate batch size\n          if (options.vectors.length < 1 || options.vectors.length > 500) {\n            throw new Error('Vector batch size must be between 1 and 500 items');\n          }\n          const data = yield (0, _fetch.post)(this.fetch, `${this.url}/PutVectors`, options, {\n            headers: this.headers\n          });\n          return {\n            data: data || {},\n            error: null\n          };\n        } catch (error) {\n          if (this.shouldThrowOnError) {\n            throw error;\n          }\n          if ((0, _errors.isStorageVectorsError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * Retrieves vectors by their keys in batch\n     * Optionally includes vector data and/or metadata in response\n     * Additional permissions required when returning data or metadata\n     *\n     * @param options - Vector retrieval options\n     * @param options.vectorBucketName - Name of the parent vector bucket\n     * @param options.indexName - Name of the index\n     * @param options.keys - Array of vector keys to retrieve\n     * @param options.returnData - Whether to include vector embeddings (requires permission)\n     * @param options.returnMetadata - Whether to include metadata (requires permission)\n     * @returns Promise with array of vectors or error\n     *\n     * @throws {StorageVectorsApiError} With code:\n     * - `S3VectorNotFoundException` if bucket or index doesn't exist (HTTP 404)\n     * - `InternalError` for server errors (HTTP 500)\n     *\n     * @example\n     * ```typescript\n     * const { data, error } = await client.getVectors({\n     *   vectorBucketName: 'embeddings-prod',\n     *   indexName: 'documents-openai-small',\n     *   keys: ['doc-1', 'doc-2', 'doc-3'],\n     *   returnData: false,     // Don't return embeddings\n     *   returnMetadata: true   // Return metadata only\n     * })\n     * if (data) {\n     *   data.vectors.forEach(v => console.log(v.key, v.metadata))\n     * }\n     * ```\n     */\n    getVectors(options) {\n      return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {\n        try {\n          const data = yield (0, _fetch.post)(this.fetch, `${this.url}/GetVectors`, options, {\n            headers: this.headers\n          });\n          return {\n            data,\n            error: null\n          };\n        } catch (error) {\n          if (this.shouldThrowOnError) {\n            throw error;\n          }\n          if ((0, _errors.isStorageVectorsError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * Lists/scans vectors in an index with pagination\n     * Supports parallel scanning via segment configuration for high-throughput scenarios\n     * Additional permissions required when returning data or metadata\n     *\n     * @param options - Vector listing options\n     * @param options.vectorBucketName - Name of the parent vector bucket\n     * @param options.indexName - Name of the index\n     * @param options.maxResults - Maximum results per page (default: 500, max: 1000)\n     * @param options.nextToken - Pagination token from previous response\n     * @param options.returnData - Whether to include vector embeddings (requires permission)\n     * @param options.returnMetadata - Whether to include metadata (requires permission)\n     * @param options.segmentCount - Total parallel segments (1-16) for distributed scanning\n     * @param options.segmentIndex - Zero-based segment index (0 to segmentCount-1)\n     * @returns Promise with array of vectors, pagination token, or error\n     *\n     * @throws {StorageVectorsApiError} With code:\n     * - `S3VectorNotFoundException` if bucket or index doesn't exist (HTTP 404)\n     * - `InternalError` for server errors (HTTP 500)\n     *\n     * @example\n     * ```typescript\n     * // Simple pagination\n     * let nextToken: string | undefined\n     * do {\n     *   const { data, error } = await client.listVectors({\n     *     vectorBucketName: 'embeddings-prod',\n     *     indexName: 'documents-openai-small',\n     *     maxResults: 500,\n     *     nextToken,\n     *     returnMetadata: true\n     *   })\n     *   if (error) break\n     *   console.log('Batch:', data.vectors.length)\n     *   nextToken = data.nextToken\n     * } while (nextToken)\n     *\n     * // Parallel scanning (4 concurrent workers)\n     * const workers = [0, 1, 2, 3].map(async (segmentIndex) => {\n     *   const { data } = await client.listVectors({\n     *     vectorBucketName: 'embeddings-prod',\n     *     indexName: 'documents-openai-small',\n     *     segmentCount: 4,\n     *     segmentIndex,\n     *     returnMetadata: true\n     *   })\n     *   return data?.vectors || []\n     * })\n     * const results = await Promise.all(workers)\n     * ```\n     */\n    listVectors(options) {\n      return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {\n        try {\n          // Validate segment configuration\n          if (options.segmentCount !== undefined) {\n            if (options.segmentCount < 1 || options.segmentCount > 16) {\n              throw new Error('segmentCount must be between 1 and 16');\n            }\n            if (options.segmentIndex !== undefined) {\n              if (options.segmentIndex < 0 || options.segmentIndex >= options.segmentCount) {\n                throw new Error(`segmentIndex must be between 0 and ${options.segmentCount - 1}`);\n              }\n            }\n          }\n          const data = yield (0, _fetch.post)(this.fetch, `${this.url}/ListVectors`, options, {\n            headers: this.headers\n          });\n          return {\n            data,\n            error: null\n          };\n        } catch (error) {\n          if (this.shouldThrowOnError) {\n            throw error;\n          }\n          if ((0, _errors.isStorageVectorsError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * Queries for similar vectors using approximate nearest neighbor (ANN) search\n     * Returns top-K most similar vectors based on the configured distance metric\n     * Supports optional metadata filtering (requires GetVectors permission)\n     *\n     * @param options - Query options\n     * @param options.vectorBucketName - Name of the parent vector bucket\n     * @param options.indexName - Name of the index\n     * @param options.queryVector - Query embedding to find similar vectors\n     * @param options.topK - Number of nearest neighbors to return (default: 10)\n     * @param options.filter - Optional JSON filter for metadata (requires GetVectors permission)\n     * @param options.returnDistance - Whether to include similarity distances\n     * @param options.returnMetadata - Whether to include metadata (requires GetVectors permission)\n     * @returns Promise with array of similar vectors ordered by distance\n     *\n     * @throws {StorageVectorsApiError} With code:\n     * - `S3VectorNotFoundException` if bucket or index doesn't exist (HTTP 404)\n     * - `InternalError` for server errors (HTTP 500)\n     *\n     * @example\n     * ```typescript\n     * // Semantic search with filtering\n     * const { data, error } = await client.queryVectors({\n     *   vectorBucketName: 'embeddings-prod',\n     *   indexName: 'documents-openai-small',\n     *   queryVector: { float32: [0.1, 0.2, 0.3, ...] }, // 1536 dimensions\n     *   topK: 5,\n     *   filter: {\n     *     category: 'technical',\n     *     published: true\n     *   },\n     *   returnDistance: true,\n     *   returnMetadata: true\n     * })\n     * if (data) {\n     *   data.matches.forEach(match => {\n     *     console.log(`${match.key}: distance=${match.distance}`)\n     *     console.log('Metadata:', match.metadata)\n     *   })\n     * }\n     * ```\n     */\n    queryVectors(options) {\n      return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {\n        try {\n          const data = yield (0, _fetch.post)(this.fetch, `${this.url}/QueryVectors`, options, {\n            headers: this.headers\n          });\n          return {\n            data,\n            error: null\n          };\n        } catch (error) {\n          if (this.shouldThrowOnError) {\n            throw error;\n          }\n          if ((0, _errors.isStorageVectorsError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * Deletes vectors by their keys in batch\n     * Accepts 1-500 keys per request\n     *\n     * @param options - Vector deletion options\n     * @param options.vectorBucketName - Name of the parent vector bucket\n     * @param options.indexName - Name of the index\n     * @param options.keys - Array of vector keys to delete (1-500 items)\n     * @returns Promise with empty response on success or error\n     *\n     * @throws {StorageVectorsApiError} With code:\n     * - `S3VectorNotFoundException` if bucket or index doesn't exist (HTTP 404)\n     * - `InternalError` for server errors (HTTP 500)\n     *\n     * @example\n     * ```typescript\n     * const { error } = await client.deleteVectors({\n     *   vectorBucketName: 'embeddings-prod',\n     *   indexName: 'documents-openai-small',\n     *   keys: ['doc-1', 'doc-2', 'doc-3']\n     * })\n     * if (!error) {\n     *   console.log('Vectors deleted successfully')\n     * }\n     * ```\n     */\n    deleteVectors(options) {\n      return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {\n        try {\n          // Validate batch size\n          if (options.keys.length < 1 || options.keys.length > 500) {\n            throw new Error('Keys batch size must be between 1 and 500 items');\n          }\n          const data = yield (0, _fetch.post)(this.fetch, `${this.url}/DeleteVectors`, options, {\n            headers: this.headers\n          });\n          return {\n            data: data || {},\n            error: null\n          };\n        } catch (error) {\n          if (this.shouldThrowOnError) {\n            throw error;\n          }\n          if ((0, _errors.isStorageVectorsError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n  }\n  exports.default = VectorDataApi;\n});","lineCount":364,"map":[[6,2,1,0],[6,6,1,0,"_tslib"],[6,12,1,0],[6,15,1,0,"require"],[6,22,1,0],[6,23,1,0,"_dependencyMap"],[6,37,1,0],[7,2,2,0],[7,6,2,0,"_constants"],[7,16,2,0],[7,19,2,0,"require"],[7,26,2,0],[7,27,2,0,"_dependencyMap"],[7,41,2,0],[8,2,3,0],[8,6,3,0,"_errors"],[8,13,3,0],[8,16,3,0,"require"],[8,23,3,0],[8,24,3,0,"_dependencyMap"],[8,38,3,0],[9,2,4,0],[9,6,4,0,"_fetch"],[9,12,4,0],[9,15,4,0,"require"],[9,22,4,0],[9,23,4,0,"_dependencyMap"],[9,37,4,0],[10,2,5,0],[10,6,5,0,"_helpers"],[10,14,5,0],[10,17,5,0,"require"],[10,24,5,0],[10,25,5,0,"_dependencyMap"],[10,39,5,0],[11,2,6,0],[12,0,7,0],[13,0,8,0],[14,0,9,0],[15,2,10,15],[15,8,10,21,"VectorDataApi"],[15,21,10,34],[15,22,10,35],[16,4,11,4,"constructor"],[16,15,11,15,"constructor"],[16,16,11,16,"url"],[16,19,11,19],[16,21,11,21,"headers"],[16,28,11,28],[16,31,11,31],[16,32,11,32],[16,33,11,33],[16,35,11,35,"fetch"],[16,40,11,40],[16,42,11,42],[17,6,12,8],[17,10,12,12],[17,11,12,13,"shouldThrowOnError"],[17,29,12,31],[17,32,12,34],[17,37,12,39],[18,6,13,8],[18,10,13,12],[18,11,13,13,"url"],[18,14,13,16],[18,17,13,19,"url"],[18,20,13,22],[18,21,13,23,"replace"],[18,28,13,30],[18,29,13,31],[18,34,13,36],[18,36,13,38],[18,38,13,40],[18,39,13,41],[19,6,14,8],[19,10,14,12],[19,11,14,13,"headers"],[19,18,14,20],[19,21,14,23,"Object"],[19,27,14,29],[19,28,14,30,"assign"],[19,34,14,36],[19,35,14,37,"Object"],[19,41,14,43],[19,42,14,44,"assign"],[19,48,14,50],[19,49,14,51],[19,50,14,52],[19,51,14,53],[19,53,14,55,"DEFAULT_HEADERS"],[19,79,14,70],[19,80,14,71],[19,82,14,73,"headers"],[19,89,14,80],[19,90,14,81],[20,6,15,8],[20,10,15,12],[20,11,15,13,"fetch"],[20,16,15,18],[20,19,15,21],[20,23,15,21,"resolveFetch"],[20,44,15,33],[20,46,15,34,"fetch"],[20,51,15,39],[20,52,15,40],[21,4,16,4],[22,4,17,4],[23,0,18,0],[24,0,19,0],[25,0,20,0],[26,0,21,0],[27,0,22,0],[28,0,23,0],[29,0,24,0],[30,0,25,0],[31,0,26,0],[32,0,27,0],[33,0,28,0],[34,4,29,4,"throwOnError"],[34,16,29,16,"throwOnError"],[34,17,29,16],[34,19,29,19],[35,6,30,8],[35,10,30,12],[35,11,30,13,"shouldThrowOnError"],[35,29,30,31],[35,32,30,34],[35,36,30,38],[36,6,31,8],[36,13,31,15],[36,17,31,19],[37,4,32,4],[38,4,33,4],[39,0,34,0],[40,0,35,0],[41,0,36,0],[42,0,37,0],[43,0,38,0],[44,0,39,0],[45,0,40,0],[46,0,41,0],[47,0,42,0],[48,0,43,0],[49,0,44,0],[50,0,45,0],[51,0,46,0],[52,0,47,0],[53,0,48,0],[54,0,49,0],[55,0,50,0],[56,0,51,0],[57,0,52,0],[58,0,53,0],[59,0,54,0],[60,0,55,0],[61,0,56,0],[62,0,57,0],[63,0,58,0],[64,0,59,0],[65,0,60,0],[66,0,61,0],[67,0,62,0],[68,0,63,0],[69,0,64,0],[70,0,65,0],[71,0,66,0],[72,0,67,0],[73,4,68,4,"putVectors"],[73,14,68,14,"putVectors"],[73,15,68,15,"options"],[73,22,68,22],[73,24,68,24],[74,6,69,8],[74,13,69,15],[74,17,69,15,"__awaiter"],[74,33,69,24],[74,35,69,25],[74,39,69,29],[74,41,69,31],[74,46,69,36],[74,47,69,37],[74,49,69,39],[74,54,69,44],[74,55,69,45],[74,57,69,47],[74,70,69,60],[75,8,70,12],[75,12,70,16],[76,10,71,16],[77,10,72,16],[77,14,72,20,"options"],[77,21,72,27],[77,22,72,28,"vectors"],[77,29,72,35],[77,30,72,36,"length"],[77,36,72,42],[77,39,72,45],[77,40,72,46],[77,44,72,50,"options"],[77,51,72,57],[77,52,72,58,"vectors"],[77,59,72,65],[77,60,72,66,"length"],[77,66,72,72],[77,69,72,75],[77,72,72,78],[77,74,72,80],[78,12,73,20],[78,18,73,26],[78,22,73,30,"Error"],[78,27,73,35],[78,28,73,36],[78,79,73,87],[78,80,73,88],[79,10,74,16],[80,10,75,16],[80,16,75,22,"data"],[80,20,75,26],[80,23,75,29],[80,29,75,35],[80,33,75,35,"post"],[80,44,75,39],[80,46,75,40],[80,50,75,44],[80,51,75,45,"fetch"],[80,56,75,50],[80,58,75,52],[80,61,75,55],[80,65,75,59],[80,66,75,60,"url"],[80,69,75,63],[80,82,75,76],[80,84,75,78,"options"],[80,91,75,85],[80,93,75,87],[81,12,76,20,"headers"],[81,19,76,27],[81,21,76,29],[81,25,76,33],[81,26,76,34,"headers"],[82,10,77,16],[82,11,77,17],[82,12,77,18],[83,10,78,16],[83,17,78,23],[84,12,78,25,"data"],[84,16,78,29],[84,18,78,31,"data"],[84,22,78,35],[84,26,78,39],[84,27,78,40],[84,28,78,41],[85,12,78,43,"error"],[85,17,78,48],[85,19,78,50],[86,10,78,55],[86,11,78,56],[87,8,79,12],[87,9,79,13],[87,10,80,12],[87,17,80,19,"error"],[87,22,80,24],[87,24,80,26],[88,10,81,16],[88,14,81,20],[88,18,81,24],[88,19,81,25,"shouldThrowOnError"],[88,37,81,43],[88,39,81,45],[89,12,82,20],[89,18,82,26,"error"],[89,23,82,31],[90,10,83,16],[91,10,84,16],[91,14,84,20],[91,18,84,20,"isStorageVectorsError"],[91,47,84,41],[91,49,84,42,"error"],[91,54,84,47],[91,55,84,48],[91,57,84,50],[92,12,85,20],[92,19,85,27],[93,14,85,29,"data"],[93,18,85,33],[93,20,85,35],[93,24,85,39],[94,14,85,41,"error"],[95,12,85,47],[95,13,85,48],[96,10,86,16],[97,10,87,16],[97,16,87,22,"error"],[97,21,87,27],[98,8,88,12],[99,6,89,8],[99,7,89,9],[99,8,89,10],[100,4,90,4],[101,4,91,4],[102,0,92,0],[103,0,93,0],[104,0,94,0],[105,0,95,0],[106,0,96,0],[107,0,97,0],[108,0,98,0],[109,0,99,0],[110,0,100,0],[111,0,101,0],[112,0,102,0],[113,0,103,0],[114,0,104,0],[115,0,105,0],[116,0,106,0],[117,0,107,0],[118,0,108,0],[119,0,109,0],[120,0,110,0],[121,0,111,0],[122,0,112,0],[123,0,113,0],[124,0,114,0],[125,0,115,0],[126,0,116,0],[127,0,117,0],[128,0,118,0],[129,0,119,0],[130,0,120,0],[131,0,121,0],[132,4,122,4,"getVectors"],[132,14,122,14,"getVectors"],[132,15,122,15,"options"],[132,22,122,22],[132,24,122,24],[133,6,123,8],[133,13,123,15],[133,17,123,15,"__awaiter"],[133,33,123,24],[133,35,123,25],[133,39,123,29],[133,41,123,31],[133,46,123,36],[133,47,123,37],[133,49,123,39],[133,54,123,44],[133,55,123,45],[133,57,123,47],[133,70,123,60],[134,8,124,12],[134,12,124,16],[135,10,125,16],[135,16,125,22,"data"],[135,20,125,26],[135,23,125,29],[135,29,125,35],[135,33,125,35,"post"],[135,44,125,39],[135,46,125,40],[135,50,125,44],[135,51,125,45,"fetch"],[135,56,125,50],[135,58,125,52],[135,61,125,55],[135,65,125,59],[135,66,125,60,"url"],[135,69,125,63],[135,82,125,76],[135,84,125,78,"options"],[135,91,125,85],[135,93,125,87],[136,12,126,20,"headers"],[136,19,126,27],[136,21,126,29],[136,25,126,33],[136,26,126,34,"headers"],[137,10,127,16],[137,11,127,17],[137,12,127,18],[138,10,128,16],[138,17,128,23],[139,12,128,25,"data"],[139,16,128,29],[140,12,128,31,"error"],[140,17,128,36],[140,19,128,38],[141,10,128,43],[141,11,128,44],[142,8,129,12],[142,9,129,13],[142,10,130,12],[142,17,130,19,"error"],[142,22,130,24],[142,24,130,26],[143,10,131,16],[143,14,131,20],[143,18,131,24],[143,19,131,25,"shouldThrowOnError"],[143,37,131,43],[143,39,131,45],[144,12,132,20],[144,18,132,26,"error"],[144,23,132,31],[145,10,133,16],[146,10,134,16],[146,14,134,20],[146,18,134,20,"isStorageVectorsError"],[146,47,134,41],[146,49,134,42,"error"],[146,54,134,47],[146,55,134,48],[146,57,134,50],[147,12,135,20],[147,19,135,27],[148,14,135,29,"data"],[148,18,135,33],[148,20,135,35],[148,24,135,39],[149,14,135,41,"error"],[150,12,135,47],[150,13,135,48],[151,10,136,16],[152,10,137,16],[152,16,137,22,"error"],[152,21,137,27],[153,8,138,12],[154,6,139,8],[154,7,139,9],[154,8,139,10],[155,4,140,4],[156,4,141,4],[157,0,142,0],[158,0,143,0],[159,0,144,0],[160,0,145,0],[161,0,146,0],[162,0,147,0],[163,0,148,0],[164,0,149,0],[165,0,150,0],[166,0,151,0],[167,0,152,0],[168,0,153,0],[169,0,154,0],[170,0,155,0],[171,0,156,0],[172,0,157,0],[173,0,158,0],[174,0,159,0],[175,0,160,0],[176,0,161,0],[177,0,162,0],[178,0,163,0],[179,0,164,0],[180,0,165,0],[181,0,166,0],[182,0,167,0],[183,0,168,0],[184,0,169,0],[185,0,170,0],[186,0,171,0],[187,0,172,0],[188,0,173,0],[189,0,174,0],[190,0,175,0],[191,0,176,0],[192,0,177,0],[193,0,178,0],[194,0,179,0],[195,0,180,0],[196,0,181,0],[197,0,182,0],[198,0,183,0],[199,0,184,0],[200,0,185,0],[201,0,186,0],[202,0,187,0],[203,0,188,0],[204,0,189,0],[205,0,190,0],[206,0,191,0],[207,4,192,4,"listVectors"],[207,15,192,15,"listVectors"],[207,16,192,16,"options"],[207,23,192,23],[207,25,192,25],[208,6,193,8],[208,13,193,15],[208,17,193,15,"__awaiter"],[208,33,193,24],[208,35,193,25],[208,39,193,29],[208,41,193,31],[208,46,193,36],[208,47,193,37],[208,49,193,39],[208,54,193,44],[208,55,193,45],[208,57,193,47],[208,70,193,60],[209,8,194,12],[209,12,194,16],[210,10,195,16],[211,10,196,16],[211,14,196,20,"options"],[211,21,196,27],[211,22,196,28,"segmentCount"],[211,34,196,40],[211,39,196,45,"undefined"],[211,48,196,54],[211,50,196,56],[212,12,197,20],[212,16,197,24,"options"],[212,23,197,31],[212,24,197,32,"segmentCount"],[212,36,197,44],[212,39,197,47],[212,40,197,48],[212,44,197,52,"options"],[212,51,197,59],[212,52,197,60,"segmentCount"],[212,64,197,72],[212,67,197,75],[212,69,197,77],[212,71,197,79],[213,14,198,24],[213,20,198,30],[213,24,198,34,"Error"],[213,29,198,39],[213,30,198,40],[213,69,198,79],[213,70,198,80],[214,12,199,20],[215,12,200,20],[215,16,200,24,"options"],[215,23,200,31],[215,24,200,32,"segmentIndex"],[215,36,200,44],[215,41,200,49,"undefined"],[215,50,200,58],[215,52,200,60],[216,14,201,24],[216,18,201,28,"options"],[216,25,201,35],[216,26,201,36,"segmentIndex"],[216,38,201,48],[216,41,201,51],[216,42,201,52],[216,46,201,56,"options"],[216,53,201,63],[216,54,201,64,"segmentIndex"],[216,66,201,76],[216,70,201,80,"options"],[216,77,201,87],[216,78,201,88,"segmentCount"],[216,90,201,100],[216,92,201,102],[217,16,202,28],[217,22,202,34],[217,26,202,38,"Error"],[217,31,202,43],[217,32,202,44],[217,70,202,82,"options"],[217,77,202,89],[217,78,202,90,"segmentCount"],[217,90,202,102],[217,93,202,105],[217,94,202,106],[217,96,202,108],[217,97,202,109],[218,14,203,24],[219,12,204,20],[220,10,205,16],[221,10,206,16],[221,16,206,22,"data"],[221,20,206,26],[221,23,206,29],[221,29,206,35],[221,33,206,35,"post"],[221,44,206,39],[221,46,206,40],[221,50,206,44],[221,51,206,45,"fetch"],[221,56,206,50],[221,58,206,52],[221,61,206,55],[221,65,206,59],[221,66,206,60,"url"],[221,69,206,63],[221,83,206,77],[221,85,206,79,"options"],[221,92,206,86],[221,94,206,88],[222,12,207,20,"headers"],[222,19,207,27],[222,21,207,29],[222,25,207,33],[222,26,207,34,"headers"],[223,10,208,16],[223,11,208,17],[223,12,208,18],[224,10,209,16],[224,17,209,23],[225,12,209,25,"data"],[225,16,209,29],[226,12,209,31,"error"],[226,17,209,36],[226,19,209,38],[227,10,209,43],[227,11,209,44],[228,8,210,12],[228,9,210,13],[228,10,211,12],[228,17,211,19,"error"],[228,22,211,24],[228,24,211,26],[229,10,212,16],[229,14,212,20],[229,18,212,24],[229,19,212,25,"shouldThrowOnError"],[229,37,212,43],[229,39,212,45],[230,12,213,20],[230,18,213,26,"error"],[230,23,213,31],[231,10,214,16],[232,10,215,16],[232,14,215,20],[232,18,215,20,"isStorageVectorsError"],[232,47,215,41],[232,49,215,42,"error"],[232,54,215,47],[232,55,215,48],[232,57,215,50],[233,12,216,20],[233,19,216,27],[234,14,216,29,"data"],[234,18,216,33],[234,20,216,35],[234,24,216,39],[235,14,216,41,"error"],[236,12,216,47],[236,13,216,48],[237,10,217,16],[238,10,218,16],[238,16,218,22,"error"],[238,21,218,27],[239,8,219,12],[240,6,220,8],[240,7,220,9],[240,8,220,10],[241,4,221,4],[242,4,222,4],[243,0,223,0],[244,0,224,0],[245,0,225,0],[246,0,226,0],[247,0,227,0],[248,0,228,0],[249,0,229,0],[250,0,230,0],[251,0,231,0],[252,0,232,0],[253,0,233,0],[254,0,234,0],[255,0,235,0],[256,0,236,0],[257,0,237,0],[258,0,238,0],[259,0,239,0],[260,0,240,0],[261,0,241,0],[262,0,242,0],[263,0,243,0],[264,0,244,0],[265,0,245,0],[266,0,246,0],[267,0,247,0],[268,0,248,0],[269,0,249,0],[270,0,250,0],[271,0,251,0],[272,0,252,0],[273,0,253,0],[274,0,254,0],[275,0,255,0],[276,0,256,0],[277,0,257,0],[278,0,258,0],[279,0,259,0],[280,0,260,0],[281,0,261,0],[282,0,262,0],[283,0,263,0],[284,4,264,4,"queryVectors"],[284,16,264,16,"queryVectors"],[284,17,264,17,"options"],[284,24,264,24],[284,26,264,26],[285,6,265,8],[285,13,265,15],[285,17,265,15,"__awaiter"],[285,33,265,24],[285,35,265,25],[285,39,265,29],[285,41,265,31],[285,46,265,36],[285,47,265,37],[285,49,265,39],[285,54,265,44],[285,55,265,45],[285,57,265,47],[285,70,265,60],[286,8,266,12],[286,12,266,16],[287,10,267,16],[287,16,267,22,"data"],[287,20,267,26],[287,23,267,29],[287,29,267,35],[287,33,267,35,"post"],[287,44,267,39],[287,46,267,40],[287,50,267,44],[287,51,267,45,"fetch"],[287,56,267,50],[287,58,267,52],[287,61,267,55],[287,65,267,59],[287,66,267,60,"url"],[287,69,267,63],[287,84,267,78],[287,86,267,80,"options"],[287,93,267,87],[287,95,267,89],[288,12,268,20,"headers"],[288,19,268,27],[288,21,268,29],[288,25,268,33],[288,26,268,34,"headers"],[289,10,269,16],[289,11,269,17],[289,12,269,18],[290,10,270,16],[290,17,270,23],[291,12,270,25,"data"],[291,16,270,29],[292,12,270,31,"error"],[292,17,270,36],[292,19,270,38],[293,10,270,43],[293,11,270,44],[294,8,271,12],[294,9,271,13],[294,10,272,12],[294,17,272,19,"error"],[294,22,272,24],[294,24,272,26],[295,10,273,16],[295,14,273,20],[295,18,273,24],[295,19,273,25,"shouldThrowOnError"],[295,37,273,43],[295,39,273,45],[296,12,274,20],[296,18,274,26,"error"],[296,23,274,31],[297,10,275,16],[298,10,276,16],[298,14,276,20],[298,18,276,20,"isStorageVectorsError"],[298,47,276,41],[298,49,276,42,"error"],[298,54,276,47],[298,55,276,48],[298,57,276,50],[299,12,277,20],[299,19,277,27],[300,14,277,29,"data"],[300,18,277,33],[300,20,277,35],[300,24,277,39],[301,14,277,41,"error"],[302,12,277,47],[302,13,277,48],[303,10,278,16],[304,10,279,16],[304,16,279,22,"error"],[304,21,279,27],[305,8,280,12],[306,6,281,8],[306,7,281,9],[306,8,281,10],[307,4,282,4],[308,4,283,4],[309,0,284,0],[310,0,285,0],[311,0,286,0],[312,0,287,0],[313,0,288,0],[314,0,289,0],[315,0,290,0],[316,0,291,0],[317,0,292,0],[318,0,293,0],[319,0,294,0],[320,0,295,0],[321,0,296,0],[322,0,297,0],[323,0,298,0],[324,0,299,0],[325,0,300,0],[326,0,301,0],[327,0,302,0],[328,0,303,0],[329,0,304,0],[330,0,305,0],[331,0,306,0],[332,0,307,0],[333,0,308,0],[334,4,309,4,"deleteVectors"],[334,17,309,17,"deleteVectors"],[334,18,309,18,"options"],[334,25,309,25],[334,27,309,27],[335,6,310,8],[335,13,310,15],[335,17,310,15,"__awaiter"],[335,33,310,24],[335,35,310,25],[335,39,310,29],[335,41,310,31],[335,46,310,36],[335,47,310,37],[335,49,310,39],[335,54,310,44],[335,55,310,45],[335,57,310,47],[335,70,310,60],[336,8,311,12],[336,12,311,16],[337,10,312,16],[338,10,313,16],[338,14,313,20,"options"],[338,21,313,27],[338,22,313,28,"keys"],[338,26,313,32],[338,27,313,33,"length"],[338,33,313,39],[338,36,313,42],[338,37,313,43],[338,41,313,47,"options"],[338,48,313,54],[338,49,313,55,"keys"],[338,53,313,59],[338,54,313,60,"length"],[338,60,313,66],[338,63,313,69],[338,66,313,72],[338,68,313,74],[339,12,314,20],[339,18,314,26],[339,22,314,30,"Error"],[339,27,314,35],[339,28,314,36],[339,77,314,85],[339,78,314,86],[340,10,315,16],[341,10,316,16],[341,16,316,22,"data"],[341,20,316,26],[341,23,316,29],[341,29,316,35],[341,33,316,35,"post"],[341,44,316,39],[341,46,316,40],[341,50,316,44],[341,51,316,45,"fetch"],[341,56,316,50],[341,58,316,52],[341,61,316,55],[341,65,316,59],[341,66,316,60,"url"],[341,69,316,63],[341,85,316,79],[341,87,316,81,"options"],[341,94,316,88],[341,96,316,90],[342,12,317,20,"headers"],[342,19,317,27],[342,21,317,29],[342,25,317,33],[342,26,317,34,"headers"],[343,10,318,16],[343,11,318,17],[343,12,318,18],[344,10,319,16],[344,17,319,23],[345,12,319,25,"data"],[345,16,319,29],[345,18,319,31,"data"],[345,22,319,35],[345,26,319,39],[345,27,319,40],[345,28,319,41],[346,12,319,43,"error"],[346,17,319,48],[346,19,319,50],[347,10,319,55],[347,11,319,56],[348,8,320,12],[348,9,320,13],[348,10,321,12],[348,17,321,19,"error"],[348,22,321,24],[348,24,321,26],[349,10,322,16],[349,14,322,20],[349,18,322,24],[349,19,322,25,"shouldThrowOnError"],[349,37,322,43],[349,39,322,45],[350,12,323,20],[350,18,323,26,"error"],[350,23,323,31],[351,10,324,16],[352,10,325,16],[352,14,325,20],[352,18,325,20,"isStorageVectorsError"],[352,47,325,41],[352,49,325,42,"error"],[352,54,325,47],[352,55,325,48],[352,57,325,50],[353,12,326,20],[353,19,326,27],[354,14,326,29,"data"],[354,18,326,33],[354,20,326,35],[354,24,326,39],[355,14,326,41,"error"],[356,12,326,47],[356,13,326,48],[357,10,327,16],[358,10,328,16],[358,16,328,22,"error"],[358,21,328,27],[359,8,329,12],[360,6,330,8],[360,7,330,9],[360,8,330,10],[361,4,331,4],[362,2,332,0],[363,2,332,1,"exports"],[363,9,332,1],[363,10,332,1,"default"],[363,17,332,1],[363,20,332,1,"VectorDataApi"],[363,33,332,1],[364,0,332,1],[364,3]],"functionMap":{"names":["<global>","VectorDataApi","constructor","throwOnError","putVectors","__awaiter$argument_3","getVectors","listVectors","queryVectors","deleteVectors"],"mappings":"AAA;eCS;ICC;KDK;IEa;KFG;IGoC;+CCC;SDoB;KHC;IKgC;+CDC;SCgB;KLC;IMoD;+CFC;SE2B;KNC;IO2C;+CHC;SGgB;KPC;IQ2B;+CJC;SIoB;KRC;CDC"}},"type":"js/module"}]}