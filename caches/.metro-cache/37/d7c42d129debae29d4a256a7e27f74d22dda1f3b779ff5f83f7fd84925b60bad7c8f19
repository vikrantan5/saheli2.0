{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"yg7e6laZwmpbIvId5jovq9ugXp8=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo=","exportNames":["*"]}},{"name":"expo-modules-core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":106,"index":106}}],"key":"fU8WLIPqoAGygnPbZ/QJiQQfXEY=","exportNames":["*"]}},{"name":"./AudioAvailability","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":107},"end":{"line":2,"column":77,"index":184}}],"key":"bSBjZOQMb5YC9PXMSfyUskC29qA=","exportNames":["*"]}},{"name":"./RecordingConstants","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":185},"end":{"line":3,"column":63,"index":248}}],"key":"I+7uSAstO8eEOs35HbXycwhHsmk=","exportNames":["*"]}},{"name":"./Sound","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":249},"end":{"line":4,"column":32,"index":281}}],"key":"/AmsCczpb+cEWj52kLwrv57uCLQ=","exportNames":["*"]}},{"name":"../AV","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":282},"end":{"line":5,"column":66,"index":348}}],"key":"CKKx7GRKZ+dPvq8Nb7FmQZUl2kI=","exportNames":["*"]}},{"name":"../ExponentAV","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":349},"end":{"line":6,"column":39,"index":388}}],"key":"EFxOD5hqmWNncIOpuO+BTl9k+bk=","exportNames":["*"]}},{"name":"./Recording.types","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":405,"column":0,"index":18427},"end":{"line":405,"column":34,"index":18461}}],"key":"naz3Z70IbfNhaPL9MpXy4n4698o=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  var _exportNames = {\n    getPermissionsAsync: true,\n    requestPermissionsAsync: true,\n    usePermissions: true,\n    Recording: true,\n    PermissionStatus: true\n  };\n  Object.defineProperty(exports, \"PermissionStatus\", {\n    enumerable: true,\n    get: function () {\n      return _expoModulesCore.PermissionStatus;\n    }\n  });\n  exports.Recording = void 0;\n  exports.getPermissionsAsync = getPermissionsAsync;\n  exports.requestPermissionsAsync = requestPermissionsAsync;\n  exports.usePermissions = void 0;\n  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/classCallCheck\"));\n  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2], \"@babel/runtime/helpers/createClass\"));\n  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[3], \"@babel/runtime/helpers/asyncToGenerator\"));\n  var _expoModulesCore = require(_dependencyMap[4], \"expo-modules-core\");\n  var _AudioAvailability = require(_dependencyMap[5], \"./AudioAvailability\");\n  var _RecordingConstants = require(_dependencyMap[6], \"./RecordingConstants\");\n  Object.keys(_RecordingConstants).forEach(function (key) {\n    if (key === \"default\" || key === \"__esModule\") return;\n    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n    if (key in exports && exports[key] === _RecordingConstants[key]) return;\n    Object.defineProperty(exports, key, {\n      enumerable: true,\n      get: function () {\n        return _RecordingConstants[key];\n      }\n    });\n  });\n  var _Sound = require(_dependencyMap[7], \"./Sound\");\n  var _AV = require(_dependencyMap[8], \"../AV\");\n  var _ExponentAV = _interopRequireDefault(require(_dependencyMap[9], \"../ExponentAV\"));\n  var _Recording2 = require(_dependencyMap[10], \"./Recording.types\");\n  Object.keys(_Recording2).forEach(function (key) {\n    if (key === \"default\" || key === \"__esModule\") return;\n    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n    if (key in exports && exports[key] === _Recording2[key]) return;\n    Object.defineProperty(exports, key, {\n      enumerable: true,\n      get: function () {\n        return _Recording2[key];\n      }\n    });\n  });\n  var _Recording;\n  var _recorderExists = false;\n  var eventEmitter = _expoModulesCore.Platform.OS === 'android' ? new _expoModulesCore.LegacyEventEmitter(_ExponentAV.default) : null;\n  /**\n   * Checks user's permissions for audio recording.\n   * @return A promise that resolves to an object of type `PermissionResponse`.\n   * @platform android\n   * @platform ios\n   */\n  function getPermissionsAsync() {\n    return _getPermissionsAsync.apply(this, arguments);\n  }\n  /**\n   * Asks the user to grant permissions for audio recording.\n   * @return A promise that resolves to an object of type `PermissionResponse`.\n   * @platform android\n   * @platform ios\n   */\n  function _getPermissionsAsync() {\n    _getPermissionsAsync = (0, _asyncToGenerator2.default)(function* () {\n      return _ExponentAV.default.getPermissionsAsync();\n    });\n    return _getPermissionsAsync.apply(this, arguments);\n  }\n  function requestPermissionsAsync() {\n    return _requestPermissionsAsync.apply(this, arguments);\n  }\n  /**\n   * Check or request permissions to record audio.\n   * This uses both `requestPermissionAsync` and `getPermissionsAsync` to interact with the permissions.\n   *\n   * @example\n   * ```ts\n   * const [permissionResponse, requestPermission] = Audio.usePermissions();\n   * ```\n   */\n  function _requestPermissionsAsync() {\n    _requestPermissionsAsync = (0, _asyncToGenerator2.default)(function* () {\n      return _ExponentAV.default.requestPermissionsAsync();\n    });\n    return _requestPermissionsAsync.apply(this, arguments);\n  }\n  var usePermissions = exports.usePermissions = (0, _expoModulesCore.createPermissionHook)({\n    getMethod: getPermissionsAsync,\n    requestMethod: requestPermissionsAsync\n  });\n  // @needsAudit\n  /**\n   * > **warning** **Warning**: Experimental for web.\n   *\n   * This class represents an audio recording. After creating an instance of this class, `prepareToRecordAsync`\n   * must be called in order to record audio. Once recording is finished, call `stopAndUnloadAsync`. Note that\n   * only one recorder is allowed to exist in the state between `prepareToRecordAsync` and `stopAndUnloadAsync`\n   * at any given time.\n   *\n   * Note that your experience must request audio recording permissions in order for recording to function.\n   * See the [`Permissions` module](/guides/permissions) for more details.\n   *\n   * Additionally, audio recording is [not supported in the iOS Simulator](/workflow/ios-simulator/#limitations).\n   *\n   * @example\n   * ```ts\n   * const recording = new Audio.Recording();\n   * try {\n   *   await recording.prepareToRecordAsync(Audio.RecordingOptionsPresets.HIGH_QUALITY);\n   *   await recording.startAsync();\n   *   // You are now recording!\n   * } catch (error) {\n   *   // An error occurred!\n   * }\n   * ```\n   *\n   * @return A newly constructed instance of `Audio.Recording`.\n   * @platform android\n   * @platform ios\n   */\n  var Recording = exports.Recording = /*#__PURE__*/function () {\n    function Recording() {\n      var _this = this;\n      (0, _classCallCheck2.default)(this, Recording);\n      this._subscription = null;\n      this._canRecord = false;\n      this._isDoneRecording = false;\n      this._finalDurationMillis = 0;\n      this._uri = null;\n      this._onRecordingStatusUpdate = null;\n      this._progressUpdateTimeoutVariable = null;\n      this._progressUpdateIntervalMillis = _AV._DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS;\n      this._options = null;\n      // Internal methods\n      this._cleanupForUnloadedRecorder = /*#__PURE__*/function () {\n        var _ref = (0, _asyncToGenerator2.default)(function* (finalStatus) {\n          _this._canRecord = false;\n          _this._isDoneRecording = true;\n          _this._finalDurationMillis = finalStatus?.durationMillis ?? 0;\n          _recorderExists = false;\n          if (_this._subscription) {\n            _this._subscription.remove();\n            _this._subscription = null;\n          }\n          _this._disablePolling();\n          return yield _this.getStatusAsync(); // Automatically calls onRecordingStatusUpdate for the final state.\n        });\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }();\n      this._pollingLoop = /*#__PURE__*/(0, _asyncToGenerator2.default)(function* () {\n        if ((0, _AudioAvailability.isAudioEnabled)() && _this._canRecord && _this._onRecordingStatusUpdate != null) {\n          _this._progressUpdateTimeoutVariable = setTimeout(_this._pollingLoop, _this._progressUpdateIntervalMillis);\n          try {\n            yield _this.getStatusAsync();\n          } catch {\n            _this._disablePolling();\n          }\n        }\n      });\n      // Get status API\n      /**\n       * Gets the `status` of the `Recording`.\n       * @return A `Promise` that is resolved with the `RecordingStatus` object.\n       */\n      this.getStatusAsync = /*#__PURE__*/(0, _asyncToGenerator2.default)(function* () {\n        // Automatically calls onRecordingStatusUpdate.\n        if (_this._canRecord) {\n          return _this._performOperationAndHandleStatusAsync(() => _ExponentAV.default.getAudioRecordingStatus());\n        }\n        var status = {\n          canRecord: false,\n          isRecording: false,\n          isDoneRecording: _this._isDoneRecording,\n          durationMillis: _this._finalDurationMillis\n        };\n        _this._callOnRecordingStatusUpdateForNewStatus(status);\n        return status;\n      });\n    }\n    return (0, _createClass2.default)(Recording, [{\n      key: \"_disablePolling\",\n      value: function _disablePolling() {\n        if (this._progressUpdateTimeoutVariable != null) {\n          clearTimeout(this._progressUpdateTimeoutVariable);\n          this._progressUpdateTimeoutVariable = null;\n        }\n      }\n    }, {\n      key: \"_enablePollingIfNecessaryAndPossible\",\n      value: function _enablePollingIfNecessaryAndPossible() {\n        if ((0, _AudioAvailability.isAudioEnabled)() && this._canRecord && this._onRecordingStatusUpdate != null) {\n          this._disablePolling();\n          this._pollingLoop();\n        }\n      }\n    }, {\n      key: \"_callOnRecordingStatusUpdateForNewStatus\",\n      value: function _callOnRecordingStatusUpdateForNewStatus(status) {\n        if (this._onRecordingStatusUpdate != null) {\n          this._onRecordingStatusUpdate(status);\n        }\n      }\n    }, {\n      key: \"_performOperationAndHandleStatusAsync\",\n      value: function () {\n        var _performOperationAndHandleStatusAsync2 = (0, _asyncToGenerator2.default)(function* (operation) {\n          (0, _AudioAvailability.throwIfAudioIsDisabled)();\n          if (this._canRecord) {\n            var status = yield operation();\n            this._callOnRecordingStatusUpdateForNewStatus(status);\n            return status;\n          } else {\n            throw new Error('Cannot complete operation because this recorder is not ready to record.');\n          }\n        });\n        function _performOperationAndHandleStatusAsync(_x2) {\n          return _performOperationAndHandleStatusAsync2.apply(this, arguments);\n        }\n        return _performOperationAndHandleStatusAsync;\n      }()\n      /**\n       * Creates and starts a recording using the given options, with optional `onRecordingStatusUpdate` and `progressUpdateIntervalMillis`.\n       *\n       * ```ts\n       * const { recording, status } = await Audio.Recording.createAsync(\n       *   options,\n       *   onRecordingStatusUpdate,\n       *   progressUpdateIntervalMillis\n       * );\n       *\n       * // Which is equivalent to the following:\n       * const recording = new Audio.Recording();\n       * await recording.prepareToRecordAsync(options);\n       * recording.setOnRecordingStatusUpdate(onRecordingStatusUpdate);\n       * await recording.startAsync();\n       * ```\n       *\n       * @param options Options for the recording, including sample rate, bitrate, channels, format, encoder, and extension. If no options are passed to,\n       * the recorder will be created with options `Audio.RecordingOptionsPresets.LOW_QUALITY`. See below for details on `RecordingOptions`.\n       * @param onRecordingStatusUpdate A function taking a single parameter `status` (a dictionary, described in `getStatusAsync`).\n       * @param progressUpdateIntervalMillis The interval between calls of `onRecordingStatusUpdate`. This value defaults to 500 milliseconds.\n       *\n       * @example\n       * ```ts\n       * try {\n       *   const { recording: recordingObject, status } = await Audio.Recording.createAsync(\n       *     Audio.RecordingOptionsPresets.HIGH_QUALITY\n       *   );\n       *   // You are now recording!\n       * } catch (error) {\n       *   // An error occurred!\n       * }\n       * ```\n       *\n       * @return A `Promise` that is rejected if creation failed, or fulfilled with the following dictionary if creation succeeded.\n       */\n    }, {\n      key: \"setOnRecordingStatusUpdate\",\n      value:\n      /**\n       * Sets a function to be called regularly with the `RecordingStatus` of the `Recording`.\n       *\n       * `onRecordingStatusUpdate` will be called when another call to the API for this recording completes (such as `prepareToRecordAsync()`,\n       * `startAsync()`, `getStatusAsync()`, or `stopAndUnloadAsync()`), and will also be called at regular intervals while the recording can record.\n       * Call `setProgressUpdateInterval()` to modify the interval with which `onRecordingStatusUpdate` is called while the recording can record.\n       *\n       * @param onRecordingStatusUpdate A function taking a single parameter `RecordingStatus`.\n       */\n      function setOnRecordingStatusUpdate(onRecordingStatusUpdate) {\n        this._onRecordingStatusUpdate = onRecordingStatusUpdate;\n        if (onRecordingStatusUpdate == null) {\n          this._disablePolling();\n        } else {\n          this._enablePollingIfNecessaryAndPossible();\n        }\n        this.getStatusAsync();\n      }\n      /**\n       * Sets the interval with which `onRecordingStatusUpdate` is called while the recording can record.\n       * See `setOnRecordingStatusUpdate` for details. This value defaults to 500 milliseconds.\n       * @param progressUpdateIntervalMillis The new interval between calls of `onRecordingStatusUpdate`.\n       */\n    }, {\n      key: \"setProgressUpdateInterval\",\n      value: function setProgressUpdateInterval(progressUpdateIntervalMillis) {\n        this._progressUpdateIntervalMillis = progressUpdateIntervalMillis;\n        this.getStatusAsync();\n      }\n      // Record API\n      /**\n       * Loads the recorder into memory and prepares it for recording. This must be called before calling `startAsync()`.\n       * This method can only be called if the `Recording` instance has never yet been prepared.\n       *\n       * @param options `RecordingOptions` for the recording, including sample rate, bitrate, channels, format, encoder, and extension.\n       * If no options are passed to `prepareToRecordAsync()`, the recorder will be created with options `Audio.RecordingOptionsPresets.LOW_QUALITY`.\n       *\n       * @return A `Promise` that is fulfilled when the recorder is loaded and prepared, or rejects if this failed. If another `Recording` exists\n       * in your experience that is currently prepared to record, the `Promise` will reject. If the `RecordingOptions` provided are invalid,\n       * the `Promise` will also reject. The promise is resolved with the `RecordingStatus` of the recording.\n       */\n    }, {\n      key: \"prepareToRecordAsync\",\n      value: function () {\n        var _prepareToRecordAsync = (0, _asyncToGenerator2.default)(function* () {\n          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _RecordingConstants.RecordingOptionsPresets.LOW_QUALITY;\n          (0, _AudioAvailability.throwIfAudioIsDisabled)();\n          if (_recorderExists) {\n            throw new Error('Only one Recording object can be prepared at a given time.');\n          }\n          if (this._isDoneRecording) {\n            throw new Error('This Recording object is done recording; you must make a new one.');\n          }\n          if (!options || !options.android || !options.ios) {\n            throw new Error('You must provide recording options for android and ios in order to prepare to record.');\n          }\n          var extensionRegex = /^\\.\\w+$/;\n          if (!options.android.extension || !options.ios.extension || !extensionRegex.test(options.android.extension) || !extensionRegex.test(options.ios.extension)) {\n            throw new Error(`Your file extensions must match ${extensionRegex.toString()}.`);\n          }\n          if (!this._canRecord) {\n            if (eventEmitter) {\n              this._subscription = eventEmitter.addListener('Expo.Recording.recorderUnloaded', this._cleanupForUnloadedRecorder);\n            }\n            var _yield$ExponentAV$pre = yield _ExponentAV.default.prepareAudioRecorder(options),\n              uri = _yield$ExponentAV$pre.uri,\n              status = _yield$ExponentAV$pre.status;\n            _recorderExists = true;\n            this._uri = uri;\n            this._options = options;\n            this._canRecord = true;\n            var currentStatus = {\n              ...status,\n              canRecord: true\n            };\n            this._callOnRecordingStatusUpdateForNewStatus(currentStatus);\n            this._enablePollingIfNecessaryAndPossible();\n            return currentStatus;\n          } else {\n            throw new Error('This Recording object is already prepared to record.');\n          }\n        });\n        function prepareToRecordAsync() {\n          return _prepareToRecordAsync.apply(this, arguments);\n        }\n        return prepareToRecordAsync;\n      }()\n      /**\n       * Returns a list of available recording inputs. This method can only be called if the `Recording` has been prepared.\n       * @return A `Promise` that is fulfilled with an array of `RecordingInput` objects.\n       */\n    }, {\n      key: \"getAvailableInputs\",\n      value: (function () {\n        var _getAvailableInputs = (0, _asyncToGenerator2.default)(function* () {\n          return _ExponentAV.default.getAvailableInputs();\n        });\n        function getAvailableInputs() {\n          return _getAvailableInputs.apply(this, arguments);\n        }\n        return getAvailableInputs;\n      }()\n      /**\n       * Returns the currently-selected recording input. This method can only be called if the `Recording` has been prepared.\n       * @return A `Promise` that is fulfilled with a `RecordingInput` object.\n       */\n      )\n    }, {\n      key: \"getCurrentInput\",\n      value: (function () {\n        var _getCurrentInput = (0, _asyncToGenerator2.default)(function* () {\n          return _ExponentAV.default.getCurrentInput();\n        });\n        function getCurrentInput() {\n          return _getCurrentInput.apply(this, arguments);\n        }\n        return getCurrentInput;\n      }()\n      /**\n       * Sets the current recording input.\n       * @param inputUid The uid of a `RecordingInput`.\n       * @return A `Promise` that is resolved if successful or rejected if not.\n       */\n      )\n    }, {\n      key: \"setInput\",\n      value: (function () {\n        var _setInput = (0, _asyncToGenerator2.default)(function* (inputUid) {\n          return _ExponentAV.default.setInput(inputUid);\n        });\n        function setInput(_x3) {\n          return _setInput.apply(this, arguments);\n        }\n        return setInput;\n      }()\n      /**\n       * Begins recording. This method can only be called if the `Recording` has been prepared.\n       * @return A `Promise` that is fulfilled when recording has begun, or rejects if recording could not be started.\n       * The promise is resolved with the `RecordingStatus` of the recording.\n       */\n      )\n    }, {\n      key: \"startAsync\",\n      value: (function () {\n        var _startAsync = (0, _asyncToGenerator2.default)(function* () {\n          return this._performOperationAndHandleStatusAsync(() => _ExponentAV.default.startAudioRecording());\n        });\n        function startAsync() {\n          return _startAsync.apply(this, arguments);\n        }\n        return startAsync;\n      }()\n      /**\n       * Pauses recording. This method can only be called if the `Recording` has been prepared.\n       *\n       * > This is only available on Android API version 24 and later.\n       *\n       * @return A `Promise` that is fulfilled when recording has paused, or rejects if recording could not be paused.\n       * If the Android API version is less than 24, the `Promise` will reject. The promise is resolved with the\n       * `RecordingStatus` of the recording.\n       */\n      )\n    }, {\n      key: \"pauseAsync\",\n      value: (function () {\n        var _pauseAsync = (0, _asyncToGenerator2.default)(function* () {\n          return this._performOperationAndHandleStatusAsync(() => _ExponentAV.default.pauseAudioRecording());\n        });\n        function pauseAsync() {\n          return _pauseAsync.apply(this, arguments);\n        }\n        return pauseAsync;\n      }()\n      /**\n       * Stops the recording and deallocates the recorder from memory. This reverts the `Recording` instance\n       * to an unprepared state, and another `Recording` instance must be created in order to record again.\n       * This method can only be called if the `Recording` has been prepared.\n       *\n       * > On Android this method may fail with `E_AUDIO_NODATA` when called too soon after `startAsync` and\n       * > no audio data has been recorded yet. In that case the recorded file will be invalid and should be discarded.\n       *\n       * @return A `Promise` that is fulfilled when recording has stopped, or rejects if recording could not be stopped.\n       * The promise is resolved with the `RecordingStatus` of the recording.\n       */\n      )\n    }, {\n      key: \"stopAndUnloadAsync\",\n      value: (function () {\n        var _stopAndUnloadAsync = (0, _asyncToGenerator2.default)(function* () {\n          if (!this._canRecord) {\n            if (this._isDoneRecording) {\n              throw new Error('Cannot unload a Recording that has already been unloaded.');\n            } else {\n              throw new Error('Cannot unload a Recording that has not been prepared.');\n            }\n          }\n          // We perform a separate native API call so that the state of the Recording can be updated with\n          // the final duration of the recording. (We cast stopStatus as Object to appease Flow)\n          var stopResult;\n          var stopError;\n          try {\n            stopResult = yield _ExponentAV.default.stopAudioRecording();\n          } catch (err) {\n            stopError = err;\n          }\n          // Web has to return the URI at the end of recording, so needs a little destructuring\n          if (_expoModulesCore.Platform.OS === 'web' && stopResult?.uri !== undefined) {\n            this._uri = stopResult.uri;\n          }\n          // Clean-up and return status\n          yield _ExponentAV.default.unloadAudioRecorder();\n          var status = yield this._cleanupForUnloadedRecorder(stopResult);\n          return stopError ? Promise.reject(stopError) : status;\n        });\n        function stopAndUnloadAsync() {\n          return _stopAndUnloadAsync.apply(this, arguments);\n        }\n        return stopAndUnloadAsync;\n      }() // Read API\n      /**\n       * Gets the local URI of the `Recording`. Note that this will only succeed once the `Recording` is prepared\n       * to record. On web, this will not return the URI until the recording is finished.\n       * @return A `string` with the local URI of the `Recording`, or `null` if the `Recording` is not prepared\n       * to record (or, on Web, if the recording has not finished).\n       */\n      )\n    }, {\n      key: \"getURI\",\n      value: function getURI() {\n        return this._uri;\n      }\n      /**\n       * @deprecated Use `createNewLoadedSoundAsync()` instead.\n       */\n    }, {\n      key: \"createNewLoadedSound\",\n      value: (function () {\n        var _createNewLoadedSound = (0, _asyncToGenerator2.default)(function* () {\n          var initialStatus = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          var onPlaybackStatusUpdate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n          console.warn(`createNewLoadedSound is deprecated in favor of createNewLoadedSoundAsync, which has the same API aside from the method name`);\n          return this.createNewLoadedSoundAsync(initialStatus, onPlaybackStatusUpdate);\n        });\n        function createNewLoadedSound() {\n          return _createNewLoadedSound.apply(this, arguments);\n        }\n        return createNewLoadedSound;\n      }()\n      /**\n       * Creates and loads a new `Sound` object to play back the `Recording`. Note that this will only succeed once the `Recording`\n       * is done recording and `stopAndUnloadAsync()` has been called.\n       *\n       * @param initialStatus The initial intended `PlaybackStatusToSet` of the sound, whose values will override the default initial playback status.\n       * This value defaults to `{}` if no parameter is passed. See the [AV documentation](/versions/latest/sdk/av) for details on `PlaybackStatusToSet`\n       * and the default initial playback status.\n       * @param onPlaybackStatusUpdate A function taking a single parameter `PlaybackStatus`. This value defaults to `null` if no parameter is passed.\n       * See the [AV documentation](/versions/latest/sdk/av) for details on the functionality provided by `onPlaybackStatusUpdate`\n       *\n       * @return A `Promise` that is rejected if creation failed, or fulfilled with the `SoundObject`.\n       */\n      )\n    }, {\n      key: \"createNewLoadedSoundAsync\",\n      value: (function () {\n        var _createNewLoadedSoundAsync = (0, _asyncToGenerator2.default)(function* () {\n          var initialStatus = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          var onPlaybackStatusUpdate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n          if (this._uri == null || !this._isDoneRecording) {\n            throw new Error('Cannot create sound when the Recording has not finished!');\n          }\n          return _Sound.Sound.createAsync({\n            uri: this._uri\n          }, initialStatus, onPlaybackStatusUpdate, false);\n        });\n        function createNewLoadedSoundAsync() {\n          return _createNewLoadedSoundAsync.apply(this, arguments);\n        }\n        return createNewLoadedSoundAsync;\n      }())\n    }]);\n  }();\n  _Recording = Recording;\n  Recording.createAsync = /*#__PURE__*/(0, _asyncToGenerator2.default)(function* () {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _RecordingConstants.RecordingOptionsPresets.LOW_QUALITY;\n    var onRecordingStatusUpdate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var progressUpdateIntervalMillis = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    var recording = new _Recording();\n    if (progressUpdateIntervalMillis) {\n      recording._progressUpdateIntervalMillis = progressUpdateIntervalMillis;\n    }\n    recording.setOnRecordingStatusUpdate(onRecordingStatusUpdate);\n    yield recording.prepareToRecordAsync({\n      ...options,\n      keepAudioActiveHint: true\n    });\n    try {\n      var status = yield recording.startAsync();\n      return {\n        recording,\n        status\n      };\n    } catch (err) {\n      recording.stopAndUnloadAsync().catch(_e => {\n        // Since there was an issue with starting, when trying calling stopAndUnloadAsync\n        // the promise is rejected which is unhandled\n        // lets catch it since its expected\n      });\n      throw err;\n    }\n  });\n});","lineCount":582,"map":[[26,2,1,0],[26,6,1,0,"_expoModulesCore"],[26,22,1,0],[26,25,1,0,"require"],[26,32,1,0],[26,33,1,0,"_dependencyMap"],[26,47,1,0],[27,2,2,0],[27,6,2,0,"_AudioAvailability"],[27,24,2,0],[27,27,2,0,"require"],[27,34,2,0],[27,35,2,0,"_dependencyMap"],[27,49,2,0],[28,2,3,0],[28,6,3,0,"_RecordingConstants"],[28,25,3,0],[28,28,3,0,"require"],[28,35,3,0],[28,36,3,0,"_dependencyMap"],[28,50,3,0],[29,2,404,0,"Object"],[29,8,404,0],[29,9,404,0,"keys"],[29,13,404,0],[29,14,404,0,"_RecordingConstants"],[29,33,404,0],[29,35,404,0,"forEach"],[29,42,404,0],[29,53,404,0,"key"],[29,56,404,0],[30,4,404,0],[30,8,404,0,"key"],[30,11,404,0],[30,29,404,0,"key"],[30,32,404,0],[31,4,404,0],[31,8,404,0,"Object"],[31,14,404,0],[31,15,404,0,"prototype"],[31,24,404,0],[31,25,404,0,"hasOwnProperty"],[31,39,404,0],[31,40,404,0,"call"],[31,44,404,0],[31,45,404,0,"_exportNames"],[31,57,404,0],[31,59,404,0,"key"],[31,62,404,0],[32,4,404,0],[32,8,404,0,"key"],[32,11,404,0],[32,15,404,0,"exports"],[32,22,404,0],[32,26,404,0,"exports"],[32,33,404,0],[32,34,404,0,"key"],[32,37,404,0],[32,43,404,0,"_RecordingConstants"],[32,62,404,0],[32,63,404,0,"key"],[32,66,404,0],[33,4,404,0,"Object"],[33,10,404,0],[33,11,404,0,"defineProperty"],[33,25,404,0],[33,26,404,0,"exports"],[33,33,404,0],[33,35,404,0,"key"],[33,38,404,0],[34,6,404,0,"enumerable"],[34,16,404,0],[35,6,404,0,"get"],[35,9,404,0],[35,20,404,0,"get"],[35,21,404,0],[36,8,404,0],[36,15,404,0,"_RecordingConstants"],[36,34,404,0],[36,35,404,0,"key"],[36,38,404,0],[37,6,404,0],[38,4,404,0],[39,2,404,0],[40,2,4,0],[40,6,4,0,"_Sound"],[40,12,4,0],[40,15,4,0,"require"],[40,22,4,0],[40,23,4,0,"_dependencyMap"],[40,37,4,0],[41,2,5,0],[41,6,5,0,"_AV"],[41,9,5,0],[41,12,5,0,"require"],[41,19,5,0],[41,20,5,0,"_dependencyMap"],[41,34,5,0],[42,2,6,0],[42,6,6,0,"_ExponentAV"],[42,17,6,0],[42,20,6,0,"_interopRequireDefault"],[42,42,6,0],[42,43,6,0,"require"],[42,50,6,0],[42,51,6,0,"_dependencyMap"],[42,65,6,0],[43,2,405,0],[43,6,405,0,"_Recording2"],[43,17,405,0],[43,20,405,0,"require"],[43,27,405,0],[43,28,405,0,"_dependencyMap"],[43,42,405,0],[44,2,405,0,"Object"],[44,8,405,0],[44,9,405,0,"keys"],[44,13,405,0],[44,14,405,0,"_Recording2"],[44,25,405,0],[44,27,405,0,"forEach"],[44,34,405,0],[44,45,405,0,"key"],[44,48,405,0],[45,4,405,0],[45,8,405,0,"key"],[45,11,405,0],[45,29,405,0,"key"],[45,32,405,0],[46,4,405,0],[46,8,405,0,"Object"],[46,14,405,0],[46,15,405,0,"prototype"],[46,24,405,0],[46,25,405,0,"hasOwnProperty"],[46,39,405,0],[46,40,405,0,"call"],[46,44,405,0],[46,45,405,0,"_exportNames"],[46,57,405,0],[46,59,405,0,"key"],[46,62,405,0],[47,4,405,0],[47,8,405,0,"key"],[47,11,405,0],[47,15,405,0,"exports"],[47,22,405,0],[47,26,405,0,"exports"],[47,33,405,0],[47,34,405,0,"key"],[47,37,405,0],[47,43,405,0,"_Recording2"],[47,54,405,0],[47,55,405,0,"key"],[47,58,405,0],[48,4,405,0,"Object"],[48,10,405,0],[48,11,405,0,"defineProperty"],[48,25,405,0],[48,26,405,0,"exports"],[48,33,405,0],[48,35,405,0,"key"],[48,38,405,0],[49,6,405,0,"enumerable"],[49,16,405,0],[50,6,405,0,"get"],[50,9,405,0],[50,20,405,0,"get"],[50,21,405,0],[51,8,405,0],[51,15,405,0,"_Recording2"],[51,26,405,0],[51,27,405,0,"key"],[51,30,405,0],[52,6,405,0],[53,4,405,0],[54,2,405,0],[55,2,405,34],[55,6,405,34,"_Recording"],[55,16,405,34],[56,2,7,0],[56,6,7,4,"_recorderExists"],[56,21,7,19],[56,24,7,22],[56,29,7,27],[57,2,8,0],[57,6,8,6,"eventEmitter"],[57,18,8,18],[57,21,8,21,"Platform"],[57,46,8,29],[57,47,8,30,"OS"],[57,49,8,32],[57,54,8,37],[57,63,8,46],[57,66,8,49],[57,70,8,53,"LegacyEventEmitter"],[57,105,8,71],[57,106,8,72,"ExponentAV"],[57,125,8,82],[57,126,8,83],[57,129,8,86],[57,133,8,90],[58,2,9,0],[59,0,10,0],[60,0,11,0],[61,0,12,0],[62,0,13,0],[63,0,14,0],[64,2,9,0],[64,11,15,22,"getPermissionsAsync"],[64,30,15,41,"getPermissionsAsync"],[64,31,15,41],[65,4,15,41],[65,11,15,41,"_getPermissionsAsync"],[65,31,15,41],[65,32,15,41,"apply"],[65,37,15,41],[65,44,15,41,"arguments"],[65,53,15,41],[66,2,15,41],[67,2,18,0],[68,0,19,0],[69,0,20,0],[70,0,21,0],[71,0,22,0],[72,0,23,0],[73,2,18,0],[73,11,18,0,"_getPermissionsAsync"],[73,32,18,0],[74,4,18,0,"_getPermissionsAsync"],[74,24,18,0],[74,31,18,0,"_asyncToGenerator2"],[74,49,18,0],[74,50,18,0,"default"],[74,57,18,0],[74,59,15,7],[74,72,15,44],[75,6,16,4],[75,13,16,11,"ExponentAV"],[75,32,16,21],[75,33,16,22,"getPermissionsAsync"],[75,52,16,41],[75,53,16,42],[75,54,16,43],[76,4,17,0],[76,5,17,1],[77,4,17,1],[77,11,17,1,"_getPermissionsAsync"],[77,31,17,1],[77,32,17,1,"apply"],[77,37,17,1],[77,44,17,1,"arguments"],[77,53,17,1],[78,2,17,1],[79,2,17,1],[79,11,24,22,"requestPermissionsAsync"],[79,34,24,45,"requestPermissionsAsync"],[79,35,24,45],[80,4,24,45],[80,11,24,45,"_requestPermissionsAsync"],[80,35,24,45],[80,36,24,45,"apply"],[80,41,24,45],[80,48,24,45,"arguments"],[80,57,24,45],[81,2,24,45],[82,2,27,0],[83,0,28,0],[84,0,29,0],[85,0,30,0],[86,0,31,0],[87,0,32,0],[88,0,33,0],[89,0,34,0],[90,0,35,0],[91,2,27,0],[91,11,27,0,"_requestPermissionsAsync"],[91,36,27,0],[92,4,27,0,"_requestPermissionsAsync"],[92,28,27,0],[92,35,27,0,"_asyncToGenerator2"],[92,53,27,0],[92,54,27,0,"default"],[92,61,27,0],[92,63,24,7],[92,76,24,48],[93,6,25,4],[93,13,25,11,"ExponentAV"],[93,32,25,21],[93,33,25,22,"requestPermissionsAsync"],[93,56,25,45],[93,57,25,46],[93,58,25,47],[94,4,26,0],[94,5,26,1],[95,4,26,1],[95,11,26,1,"_requestPermissionsAsync"],[95,35,26,1],[95,36,26,1,"apply"],[95,41,26,1],[95,48,26,1,"arguments"],[95,57,26,1],[96,2,26,1],[97,2,36,7],[97,6,36,13,"usePermissions"],[97,20,36,27],[97,23,36,27,"exports"],[97,30,36,27],[97,31,36,27,"usePermissions"],[97,45,36,27],[97,48,36,30],[97,52,36,30,"createPermissionHook"],[97,89,36,50],[97,91,36,51],[98,4,37,4,"getMethod"],[98,13,37,13],[98,15,37,15,"getPermissionsAsync"],[98,34,37,34],[99,4,38,4,"requestMethod"],[99,17,38,17],[99,19,38,19,"requestPermissionsAsync"],[100,2,39,0],[100,3,39,1],[100,4,39,2],[101,2,40,0],[102,2,41,0],[103,0,42,0],[104,0,43,0],[105,0,44,0],[106,0,45,0],[107,0,46,0],[108,0,47,0],[109,0,48,0],[110,0,49,0],[111,0,50,0],[112,0,51,0],[113,0,52,0],[114,0,53,0],[115,0,54,0],[116,0,55,0],[117,0,56,0],[118,0,57,0],[119,0,58,0],[120,0,59,0],[121,0,60,0],[122,0,61,0],[123,0,62,0],[124,0,63,0],[125,0,64,0],[126,0,65,0],[127,0,66,0],[128,0,67,0],[129,0,68,0],[130,0,69,0],[131,2,41,0],[131,6,70,13,"Recording"],[131,15,70,22],[131,18,70,22,"exports"],[131,25,70,22],[131,26,70,22,"Recording"],[131,35,70,22],[132,4,70,22],[132,13,70,22,"Recording"],[132,23,70,22],[133,6,70,22],[133,10,70,22,"_this"],[133,15,70,22],[134,6,70,22],[134,10,70,22,"_classCallCheck2"],[134,26,70,22],[134,27,70,22,"default"],[134,34,70,22],[134,42,70,22,"Recording"],[134,51,70,22],[135,6,70,22],[135,11,71,4,"_subscription"],[135,24,71,17],[135,27,71,20],[135,31,71,24],[136,6,71,24],[136,11,72,4,"_canRecord"],[136,21,72,14],[136,24,72,17],[136,29,72,22],[137,6,72,22],[137,11,73,4,"_isDoneRecording"],[137,27,73,20],[137,30,73,23],[137,35,73,28],[138,6,73,28],[138,11,74,4,"_finalDurationMillis"],[138,31,74,24],[138,34,74,27],[138,35,74,28],[139,6,74,28],[139,11,75,4,"_uri"],[139,15,75,8],[139,18,75,11],[139,22,75,15],[140,6,75,15],[140,11,76,4,"_onRecordingStatusUpdate"],[140,35,76,28],[140,38,76,31],[140,42,76,35],[141,6,76,35],[141,11,77,4,"_progressUpdateTimeoutVariable"],[141,41,77,34],[141,44,77,37],[141,48,77,41],[142,6,77,41],[142,11,78,4,"_progressUpdateIntervalMillis"],[142,40,78,33],[142,43,78,36,"_DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS"],[142,87,78,76],[143,6,78,76],[143,11,79,4,"_options"],[143,19,79,12],[143,22,79,15],[143,26,79,19],[144,6,80,4],[145,6,80,4],[145,11,81,4,"_cleanupForUnloadedRecorder"],[145,38,81,31],[146,8,81,31],[146,12,81,31,"_ref"],[146,16,81,31],[146,23,81,31,"_asyncToGenerator2"],[146,41,81,31],[146,42,81,31,"default"],[146,49,81,31],[146,51,81,34],[146,62,81,41,"finalStatus"],[146,73,81,52],[146,75,81,57],[147,10,82,8,"_this"],[147,15,82,12],[147,16,82,13,"_canRecord"],[147,26,82,23],[147,29,82,26],[147,34,82,31],[148,10,83,8,"_this"],[148,15,83,12],[148,16,83,13,"_isDoneRecording"],[148,32,83,29],[148,35,83,32],[148,39,83,36],[149,10,84,8,"_this"],[149,15,84,12],[149,16,84,13,"_finalDurationMillis"],[149,36,84,33],[149,39,84,36,"finalStatus"],[149,50,84,47],[149,52,84,49,"durationMillis"],[149,66,84,63],[149,70,84,67],[149,71,84,68],[150,10,85,8,"_recorderExists"],[150,25,85,23],[150,28,85,26],[150,33,85,31],[151,10,86,8],[151,14,86,12,"_this"],[151,19,86,16],[151,20,86,17,"_subscription"],[151,33,86,30],[151,35,86,32],[152,12,87,12,"_this"],[152,17,87,16],[152,18,87,17,"_subscription"],[152,31,87,30],[152,32,87,31,"remove"],[152,38,87,37],[152,39,87,38],[152,40,87,39],[153,12,88,12,"_this"],[153,17,88,16],[153,18,88,17,"_subscription"],[153,31,88,30],[153,34,88,33],[153,38,88,37],[154,10,89,8],[155,10,90,8,"_this"],[155,15,90,12],[155,16,90,13,"_disablePolling"],[155,31,90,28],[155,32,90,29],[155,33,90,30],[156,10,91,8],[156,23,91,21,"_this"],[156,28,91,25],[156,29,91,26,"getStatusAsync"],[156,43,91,40],[156,44,91,41],[156,45,91,42],[156,46,91,43],[156,47,91,44],[157,8,92,4],[157,9,92,5],[158,8,92,5],[158,25,92,5,"_x"],[158,27,92,5],[159,10,92,5],[159,17,92,5,"_ref"],[159,21,92,5],[159,22,92,5,"apply"],[159,27,92,5],[159,34,92,5,"arguments"],[159,43,92,5],[160,8,92,5],[161,6,92,5],[162,6,92,5],[162,11,93,4,"_pollingLoop"],[162,23,93,16],[162,43,93,16,"_asyncToGenerator2"],[162,61,93,16],[162,62,93,16,"default"],[162,69,93,16],[162,71,93,19],[162,84,93,31],[163,8,94,8],[163,12,94,12],[163,16,94,12,"isAudioEnabled"],[163,49,94,26],[163,51,94,27],[163,52,94,28],[163,56,94,32,"_this"],[163,61,94,36],[163,62,94,37,"_canRecord"],[163,72,94,47],[163,76,94,51,"_this"],[163,81,94,55],[163,82,94,56,"_onRecordingStatusUpdate"],[163,106,94,80],[163,110,94,84],[163,114,94,88],[163,116,94,90],[164,10,95,12,"_this"],[164,15,95,16],[164,16,95,17,"_progressUpdateTimeoutVariable"],[164,46,95,47],[164,49,95,50,"setTimeout"],[164,59,95,60],[164,60,95,61,"_this"],[164,65,95,65],[164,66,95,66,"_pollingLoop"],[164,78,95,78],[164,80,95,80,"_this"],[164,85,95,84],[164,86,95,85,"_progressUpdateIntervalMillis"],[164,115,95,114],[164,116,95,115],[165,10,96,12],[165,14,96,16],[166,12,97,16],[166,18,97,22,"_this"],[166,23,97,26],[166,24,97,27,"getStatusAsync"],[166,38,97,41],[166,39,97,42],[166,40,97,43],[167,10,98,12],[167,11,98,13],[167,12,99,12],[167,18,99,18],[168,12,100,16,"_this"],[168,17,100,20],[168,18,100,21,"_disablePolling"],[168,33,100,36],[168,34,100,37],[168,35,100,38],[169,10,101,12],[170,8,102,8],[171,6,103,4],[171,7,103,5],[172,6,191,4],[173,6,192,4],[174,0,193,0],[175,0,194,0],[176,0,195,0],[177,6,192,4],[177,11,196,4,"getStatusAsync"],[177,25,196,18],[177,45,196,18,"_asyncToGenerator2"],[177,63,196,18],[177,64,196,18,"default"],[177,71,196,18],[177,73,196,21],[177,86,196,33],[178,8,197,8],[179,8,198,8],[179,12,198,12,"_this"],[179,17,198,16],[179,18,198,17,"_canRecord"],[179,28,198,27],[179,30,198,29],[180,10,199,12],[180,17,199,19,"_this"],[180,22,199,23],[180,23,199,24,"_performOperationAndHandleStatusAsync"],[180,60,199,61],[180,61,199,62],[180,67,199,68,"ExponentAV"],[180,86,199,78],[180,87,199,79,"getAudioRecordingStatus"],[180,110,199,102],[180,111,199,103],[180,112,199,104],[180,113,199,105],[181,8,200,8],[182,8,201,8],[182,12,201,14,"status"],[182,18,201,20],[182,21,201,23],[183,10,202,12,"canRecord"],[183,19,202,21],[183,21,202,23],[183,26,202,28],[184,10,203,12,"isRecording"],[184,21,203,23],[184,23,203,25],[184,28,203,30],[185,10,204,12,"isDoneRecording"],[185,25,204,27],[185,27,204,29,"_this"],[185,32,204,33],[185,33,204,34,"_isDoneRecording"],[185,49,204,50],[186,10,205,12,"durationMillis"],[186,24,205,26],[186,26,205,28,"_this"],[186,31,205,32],[186,32,205,33,"_finalDurationMillis"],[187,8,206,8],[187,9,206,9],[188,8,207,8,"_this"],[188,13,207,12],[188,14,207,13,"_callOnRecordingStatusUpdateForNewStatus"],[188,54,207,53],[188,55,207,54,"status"],[188,61,207,60],[188,62,207,61],[189,8,208,8],[189,15,208,15,"status"],[189,21,208,21],[190,6,209,4],[190,7,209,5],[191,4,209,5],[192,4,209,5],[192,15,209,5,"_createClass2"],[192,28,209,5],[192,29,209,5,"default"],[192,36,209,5],[192,38,209,5,"Recording"],[192,47,209,5],[193,6,209,5,"key"],[193,9,209,5],[194,6,209,5,"value"],[194,11,209,5],[194,13,104,4],[194,22,104,4,"_disablePolling"],[194,37,104,19,"_disablePolling"],[194,38,104,19],[194,40,104,22],[195,8,105,8],[195,12,105,12],[195,16,105,16],[195,17,105,17,"_progressUpdateTimeoutVariable"],[195,47,105,47],[195,51,105,51],[195,55,105,55],[195,57,105,57],[196,10,106,12,"clearTimeout"],[196,22,106,24],[196,23,106,25],[196,27,106,29],[196,28,106,30,"_progressUpdateTimeoutVariable"],[196,58,106,60],[196,59,106,61],[197,10,107,12],[197,14,107,16],[197,15,107,17,"_progressUpdateTimeoutVariable"],[197,45,107,47],[197,48,107,50],[197,52,107,54],[198,8,108,8],[199,6,109,4],[200,4,109,5],[201,6,109,5,"key"],[201,9,109,5],[202,6,109,5,"value"],[202,11,109,5],[202,13,110,4],[202,22,110,4,"_enablePollingIfNecessaryAndPossible"],[202,58,110,40,"_enablePollingIfNecessaryAndPossible"],[202,59,110,40],[202,61,110,43],[203,8,111,8],[203,12,111,12],[203,16,111,12,"isAudioEnabled"],[203,49,111,26],[203,51,111,27],[203,52,111,28],[203,56,111,32],[203,60,111,36],[203,61,111,37,"_canRecord"],[203,71,111,47],[203,75,111,51],[203,79,111,55],[203,80,111,56,"_onRecordingStatusUpdate"],[203,104,111,80],[203,108,111,84],[203,112,111,88],[203,114,111,90],[204,10,112,12],[204,14,112,16],[204,15,112,17,"_disablePolling"],[204,30,112,32],[204,31,112,33],[204,32,112,34],[205,10,113,12],[205,14,113,16],[205,15,113,17,"_pollingLoop"],[205,27,113,29],[205,28,113,30],[205,29,113,31],[206,8,114,8],[207,6,115,4],[208,4,115,5],[209,6,115,5,"key"],[209,9,115,5],[210,6,115,5,"value"],[210,11,115,5],[210,13,116,4],[210,22,116,4,"_callOnRecordingStatusUpdateForNewStatus"],[210,62,116,44,"_callOnRecordingStatusUpdateForNewStatus"],[210,63,116,45,"status"],[210,69,116,51],[210,71,116,53],[211,8,117,8],[211,12,117,12],[211,16,117,16],[211,17,117,17,"_onRecordingStatusUpdate"],[211,41,117,41],[211,45,117,45],[211,49,117,49],[211,51,117,51],[212,10,118,12],[212,14,118,16],[212,15,118,17,"_onRecordingStatusUpdate"],[212,39,118,41],[212,40,118,42,"status"],[212,46,118,48],[212,47,118,49],[213,8,119,8],[214,6,120,4],[215,4,120,5],[216,6,120,5,"key"],[216,9,120,5],[217,6,120,5,"value"],[217,11,120,5],[218,8,120,5],[218,12,120,5,"_performOperationAndHandleStatusAsync2"],[218,50,120,5],[218,57,120,5,"_asyncToGenerator2"],[218,75,120,5],[218,76,120,5,"default"],[218,83,120,5],[218,85,121,4],[218,96,121,48,"operation"],[218,105,121,57],[218,107,121,59],[219,10,122,8],[219,14,122,8,"throwIfAudioIsDisabled"],[219,55,122,30],[219,57,122,31],[219,58,122,32],[220,10,123,8],[220,14,123,12],[220,18,123,16],[220,19,123,17,"_canRecord"],[220,29,123,27],[220,31,123,29],[221,12,124,12],[221,16,124,18,"status"],[221,22,124,24],[221,31,124,33,"operation"],[221,40,124,42],[221,41,124,43],[221,42,124,44],[222,12,125,12],[222,16,125,16],[222,17,125,17,"_callOnRecordingStatusUpdateForNewStatus"],[222,57,125,57],[222,58,125,58,"status"],[222,64,125,64],[222,65,125,65],[223,12,126,12],[223,19,126,19,"status"],[223,25,126,25],[224,10,127,8],[224,11,127,9],[224,17,128,13],[225,12,129,12],[225,18,129,18],[225,22,129,22,"Error"],[225,27,129,27],[225,28,129,28],[225,101,129,101],[225,102,129,102],[226,10,130,8],[227,8,131,4],[227,9,131,5],[228,8,131,5],[228,17,121,10,"_performOperationAndHandleStatusAsync"],[228,54,121,47,"_performOperationAndHandleStatusAsync"],[228,55,121,47,"_x2"],[228,58,121,47],[229,10,121,47],[229,17,121,47,"_performOperationAndHandleStatusAsync2"],[229,55,121,47],[229,56,121,47,"apply"],[229,61,121,47],[229,68,121,47,"arguments"],[229,77,121,47],[230,8,121,47],[231,8,121,47],[231,15,121,10,"_performOperationAndHandleStatusAsync"],[231,52,121,47],[232,6,121,47],[233,6,132,4],[234,0,133,0],[235,0,134,0],[236,0,135,0],[237,0,136,0],[238,0,137,0],[239,0,138,0],[240,0,139,0],[241,0,140,0],[242,0,141,0],[243,0,142,0],[244,0,143,0],[245,0,144,0],[246,0,145,0],[247,0,146,0],[248,0,147,0],[249,0,148,0],[250,0,149,0],[251,0,150,0],[252,0,151,0],[253,0,152,0],[254,0,153,0],[255,0,154,0],[256,0,155,0],[257,0,156,0],[258,0,157,0],[259,0,158,0],[260,0,159,0],[261,0,160,0],[262,0,161,0],[263,0,162,0],[264,0,163,0],[265,0,164,0],[266,0,165,0],[267,0,166,0],[268,0,167,0],[269,4,132,4],[270,6,132,4,"key"],[270,9,132,4],[271,6,132,4,"value"],[271,11,132,4],[272,6,210,4],[273,0,211,0],[274,0,212,0],[275,0,213,0],[276,0,214,0],[277,0,215,0],[278,0,216,0],[279,0,217,0],[280,0,218,0],[281,6,219,4],[281,15,219,4,"setOnRecordingStatusUpdate"],[281,41,219,30,"setOnRecordingStatusUpdate"],[281,42,219,31,"onRecordingStatusUpdate"],[281,65,219,54],[281,67,219,56],[282,8,220,8],[282,12,220,12],[282,13,220,13,"_onRecordingStatusUpdate"],[282,37,220,37],[282,40,220,40,"onRecordingStatusUpdate"],[282,63,220,63],[283,8,221,8],[283,12,221,12,"onRecordingStatusUpdate"],[283,35,221,35],[283,39,221,39],[283,43,221,43],[283,45,221,45],[284,10,222,12],[284,14,222,16],[284,15,222,17,"_disablePolling"],[284,30,222,32],[284,31,222,33],[284,32,222,34],[285,8,223,8],[285,9,223,9],[285,15,224,13],[286,10,225,12],[286,14,225,16],[286,15,225,17,"_enablePollingIfNecessaryAndPossible"],[286,51,225,53],[286,52,225,54],[286,53,225,55],[287,8,226,8],[288,8,227,8],[288,12,227,12],[288,13,227,13,"getStatusAsync"],[288,27,227,27],[288,28,227,28],[288,29,227,29],[289,6,228,4],[290,6,229,4],[291,0,230,0],[292,0,231,0],[293,0,232,0],[294,0,233,0],[295,4,229,4],[296,6,229,4,"key"],[296,9,229,4],[297,6,229,4,"value"],[297,11,229,4],[297,13,234,4],[297,22,234,4,"setProgressUpdateInterval"],[297,47,234,29,"setProgressUpdateInterval"],[297,48,234,30,"progressUpdateIntervalMillis"],[297,76,234,58],[297,78,234,60],[298,8,235,8],[298,12,235,12],[298,13,235,13,"_progressUpdateIntervalMillis"],[298,42,235,42],[298,45,235,45,"progressUpdateIntervalMillis"],[298,73,235,73],[299,8,236,8],[299,12,236,12],[299,13,236,13,"getStatusAsync"],[299,27,236,27],[299,28,236,28],[299,29,236,29],[300,6,237,4],[301,6,238,4],[302,6,239,4],[303,0,240,0],[304,0,241,0],[305,0,242,0],[306,0,243,0],[307,0,244,0],[308,0,245,0],[309,0,246,0],[310,0,247,0],[311,0,248,0],[312,0,249,0],[313,4,239,4],[314,6,239,4,"key"],[314,9,239,4],[315,6,239,4,"value"],[315,11,239,4],[316,8,239,4],[316,12,239,4,"_prepareToRecordAsync"],[316,33,239,4],[316,40,239,4,"_asyncToGenerator2"],[316,58,239,4],[316,59,239,4,"default"],[316,66,239,4],[316,68,250,4],[316,81,250,78],[317,10,250,78],[317,14,250,31,"options"],[317,21,250,38],[317,24,250,38,"arguments"],[317,33,250,38],[317,34,250,38,"length"],[317,40,250,38],[317,48,250,38,"arguments"],[317,57,250,38],[317,65,250,38,"undefined"],[317,74,250,38],[317,77,250,38,"arguments"],[317,86,250,38],[317,92,250,41,"RecordingOptionsPresets"],[317,135,250,64],[317,136,250,65,"LOW_QUALITY"],[317,147,250,76],[318,10,251,8],[318,14,251,8,"throwIfAudioIsDisabled"],[318,55,251,30],[318,57,251,31],[318,58,251,32],[319,10,252,8],[319,14,252,12,"_recorderExists"],[319,29,252,27],[319,31,252,29],[320,12,253,12],[320,18,253,18],[320,22,253,22,"Error"],[320,27,253,27],[320,28,253,28],[320,88,253,88],[320,89,253,89],[321,10,254,8],[322,10,255,8],[322,14,255,12],[322,18,255,16],[322,19,255,17,"_isDoneRecording"],[322,35,255,33],[322,37,255,35],[323,12,256,12],[323,18,256,18],[323,22,256,22,"Error"],[323,27,256,27],[323,28,256,28],[323,95,256,95],[323,96,256,96],[324,10,257,8],[325,10,258,8],[325,14,258,12],[325,15,258,13,"options"],[325,22,258,20],[325,26,258,24],[325,27,258,25,"options"],[325,34,258,32],[325,35,258,33,"android"],[325,42,258,40],[325,46,258,44],[325,47,258,45,"options"],[325,54,258,52],[325,55,258,53,"ios"],[325,58,258,56],[325,60,258,58],[326,12,259,12],[326,18,259,18],[326,22,259,22,"Error"],[326,27,259,27],[326,28,259,28],[326,115,259,115],[326,116,259,116],[327,10,260,8],[328,10,261,8],[328,14,261,14,"extensionRegex"],[328,28,261,28],[328,31,261,31],[328,40,261,40],[329,10,262,8],[329,14,262,12],[329,15,262,13,"options"],[329,22,262,20],[329,23,262,21,"android"],[329,30,262,28],[329,31,262,29,"extension"],[329,40,262,38],[329,44,263,12],[329,45,263,13,"options"],[329,52,263,20],[329,53,263,21,"ios"],[329,56,263,24],[329,57,263,25,"extension"],[329,66,263,34],[329,70,264,12],[329,71,264,13,"extensionRegex"],[329,85,264,27],[329,86,264,28,"test"],[329,90,264,32],[329,91,264,33,"options"],[329,98,264,40],[329,99,264,41,"android"],[329,106,264,48],[329,107,264,49,"extension"],[329,116,264,58],[329,117,264,59],[329,121,265,12],[329,122,265,13,"extensionRegex"],[329,136,265,27],[329,137,265,28,"test"],[329,141,265,32],[329,142,265,33,"options"],[329,149,265,40],[329,150,265,41,"ios"],[329,153,265,44],[329,154,265,45,"extension"],[329,163,265,54],[329,164,265,55],[329,166,265,57],[330,12,266,12],[330,18,266,18],[330,22,266,22,"Error"],[330,27,266,27],[330,28,266,28],[330,63,266,63,"extensionRegex"],[330,77,266,77],[330,78,266,78,"toString"],[330,86,266,86],[330,87,266,87],[330,88,266,88],[330,91,266,91],[330,92,266,92],[331,10,267,8],[332,10,268,8],[332,14,268,12],[332,15,268,13],[332,19,268,17],[332,20,268,18,"_canRecord"],[332,30,268,28],[332,32,268,30],[333,12,269,12],[333,16,269,16,"eventEmitter"],[333,28,269,28],[333,30,269,30],[334,14,270,16],[334,18,270,20],[334,19,270,21,"_subscription"],[334,32,270,34],[334,35,270,37,"eventEmitter"],[334,47,270,49],[334,48,270,50,"addListener"],[334,59,270,61],[334,60,270,62],[334,93,270,95],[334,95,270,97],[334,99,270,101],[334,100,270,102,"_cleanupForUnloadedRecorder"],[334,127,270,129],[334,128,270,130],[335,12,271,12],[336,12,272,12],[336,16,272,12,"_yield$ExponentAV$pre"],[336,37,272,12],[336,46,272,43,"ExponentAV"],[336,65,272,53],[336,66,272,54,"prepareAudioRecorder"],[336,86,272,74],[336,87,272,75,"options"],[336,94,272,82],[336,95,272,83],[337,14,272,20,"uri"],[337,17,272,23],[337,20,272,23,"_yield$ExponentAV$pre"],[337,41,272,23],[337,42,272,20,"uri"],[337,45,272,23],[338,14,272,25,"status"],[338,20,272,31],[338,23,272,31,"_yield$ExponentAV$pre"],[338,44,272,31],[338,45,272,25,"status"],[338,51,272,31],[339,12,273,12,"_recorderExists"],[339,27,273,27],[339,30,273,30],[339,34,273,34],[340,12,274,12],[340,16,274,16],[340,17,274,17,"_uri"],[340,21,274,21],[340,24,274,24,"uri"],[340,27,274,27],[341,12,275,12],[341,16,275,16],[341,17,275,17,"_options"],[341,25,275,25],[341,28,275,28,"options"],[341,35,275,35],[342,12,276,12],[342,16,276,16],[342,17,276,17,"_canRecord"],[342,27,276,27],[342,30,276,30],[342,34,276,34],[343,12,277,12],[343,16,277,18,"currentStatus"],[343,29,277,31],[343,32,277,34],[344,14,277,36],[344,17,277,39,"status"],[344,23,277,45],[345,14,277,47,"canRecord"],[345,23,277,56],[345,25,277,58],[346,12,277,63],[346,13,277,64],[347,12,278,12],[347,16,278,16],[347,17,278,17,"_callOnRecordingStatusUpdateForNewStatus"],[347,57,278,57],[347,58,278,58,"currentStatus"],[347,71,278,71],[347,72,278,72],[348,12,279,12],[348,16,279,16],[348,17,279,17,"_enablePollingIfNecessaryAndPossible"],[348,53,279,53],[348,54,279,54],[348,55,279,55],[349,12,280,12],[349,19,280,19,"currentStatus"],[349,32,280,32],[350,10,281,8],[350,11,281,9],[350,17,282,13],[351,12,283,12],[351,18,283,18],[351,22,283,22,"Error"],[351,27,283,27],[351,28,283,28],[351,82,283,82],[351,83,283,83],[352,10,284,8],[353,8,285,4],[353,9,285,5],[354,8,285,5],[354,17,250,10,"prepareToRecordAsync"],[354,37,250,30,"prepareToRecordAsync"],[354,38,250,30],[355,10,250,30],[355,17,250,30,"_prepareToRecordAsync"],[355,38,250,30],[355,39,250,30,"apply"],[355,44,250,30],[355,51,250,30,"arguments"],[355,60,250,30],[356,8,250,30],[357,8,250,30],[357,15,250,10,"prepareToRecordAsync"],[357,35,250,30],[358,6,250,30],[359,6,286,4],[360,0,287,0],[361,0,288,0],[362,0,289,0],[363,4,286,4],[364,6,286,4,"key"],[364,9,286,4],[365,6,286,4,"value"],[365,11,286,4],[366,8,286,4],[366,12,286,4,"_getAvailableInputs"],[366,31,286,4],[366,38,286,4,"_asyncToGenerator2"],[366,56,286,4],[366,57,286,4,"default"],[366,64,286,4],[366,66,290,4],[366,79,290,31],[367,10,291,8],[367,17,291,15,"ExponentAV"],[367,36,291,25],[367,37,291,26,"getAvailableInputs"],[367,55,291,44],[367,56,291,45],[367,57,291,46],[368,8,292,4],[368,9,292,5],[369,8,292,5],[369,17,290,10,"getAvailableInputs"],[369,35,290,28,"getAvailableInputs"],[369,36,290,28],[370,10,290,28],[370,17,290,28,"_getAvailableInputs"],[370,36,290,28],[370,37,290,28,"apply"],[370,42,290,28],[370,49,290,28,"arguments"],[370,58,290,28],[371,8,290,28],[372,8,290,28],[372,15,290,10,"getAvailableInputs"],[372,33,290,28],[373,6,290,28],[374,6,293,4],[375,0,294,0],[376,0,295,0],[377,0,296,0],[378,6,293,4],[379,4,293,4],[380,6,293,4,"key"],[380,9,293,4],[381,6,293,4,"value"],[381,11,293,4],[382,8,293,4],[382,12,293,4,"_getCurrentInput"],[382,28,293,4],[382,35,293,4,"_asyncToGenerator2"],[382,53,293,4],[382,54,293,4,"default"],[382,61,293,4],[382,63,297,4],[382,76,297,28],[383,10,298,8],[383,17,298,15,"ExponentAV"],[383,36,298,25],[383,37,298,26,"getCurrentInput"],[383,52,298,41],[383,53,298,42],[383,54,298,43],[384,8,299,4],[384,9,299,5],[385,8,299,5],[385,17,297,10,"getCurrentInput"],[385,32,297,25,"getCurrentInput"],[385,33,297,25],[386,10,297,25],[386,17,297,25,"_getCurrentInput"],[386,33,297,25],[386,34,297,25,"apply"],[386,39,297,25],[386,46,297,25,"arguments"],[386,55,297,25],[387,8,297,25],[388,8,297,25],[388,15,297,10,"getCurrentInput"],[388,30,297,25],[389,6,297,25],[390,6,300,4],[391,0,301,0],[392,0,302,0],[393,0,303,0],[394,0,304,0],[395,6,300,4],[396,4,300,4],[397,6,300,4,"key"],[397,9,300,4],[398,6,300,4,"value"],[398,11,300,4],[399,8,300,4],[399,12,300,4,"_setInput"],[399,21,300,4],[399,28,300,4,"_asyncToGenerator2"],[399,46,300,4],[399,47,300,4,"default"],[399,54,300,4],[399,56,305,4],[399,67,305,19,"inputUid"],[399,75,305,27],[399,77,305,29],[400,10,306,8],[400,17,306,15,"ExponentAV"],[400,36,306,25],[400,37,306,26,"setInput"],[400,45,306,34],[400,46,306,35,"inputUid"],[400,54,306,43],[400,55,306,44],[401,8,307,4],[401,9,307,5],[402,8,307,5],[402,17,305,10,"setInput"],[402,25,305,18,"setInput"],[402,26,305,18,"_x3"],[402,29,305,18],[403,10,305,18],[403,17,305,18,"_setInput"],[403,26,305,18],[403,27,305,18,"apply"],[403,32,305,18],[403,39,305,18,"arguments"],[403,48,305,18],[404,8,305,18],[405,8,305,18],[405,15,305,10,"setInput"],[405,23,305,18],[406,6,305,18],[407,6,308,4],[408,0,309,0],[409,0,310,0],[410,0,311,0],[411,0,312,0],[412,6,308,4],[413,4,308,4],[414,6,308,4,"key"],[414,9,308,4],[415,6,308,4,"value"],[415,11,308,4],[416,8,308,4],[416,12,308,4,"_startAsync"],[416,23,308,4],[416,30,308,4,"_asyncToGenerator2"],[416,48,308,4],[416,49,308,4,"default"],[416,56,308,4],[416,58,313,4],[416,71,313,23],[417,10,314,8],[417,17,314,15],[417,21,314,19],[417,22,314,20,"_performOperationAndHandleStatusAsync"],[417,59,314,57],[417,60,314,58],[417,66,314,64,"ExponentAV"],[417,85,314,74],[417,86,314,75,"startAudioRecording"],[417,105,314,94],[417,106,314,95],[417,107,314,96],[417,108,314,97],[418,8,315,4],[418,9,315,5],[419,8,315,5],[419,17,313,10,"startAsync"],[419,27,313,20,"startAsync"],[419,28,313,20],[420,10,313,20],[420,17,313,20,"_startAsync"],[420,28,313,20],[420,29,313,20,"apply"],[420,34,313,20],[420,41,313,20,"arguments"],[420,50,313,20],[421,8,313,20],[422,8,313,20],[422,15,313,10,"startAsync"],[422,25,313,20],[423,6,313,20],[424,6,316,4],[425,0,317,0],[426,0,318,0],[427,0,319,0],[428,0,320,0],[429,0,321,0],[430,0,322,0],[431,0,323,0],[432,0,324,0],[433,6,316,4],[434,4,316,4],[435,6,316,4,"key"],[435,9,316,4],[436,6,316,4,"value"],[436,11,316,4],[437,8,316,4],[437,12,316,4,"_pauseAsync"],[437,23,316,4],[437,30,316,4,"_asyncToGenerator2"],[437,48,316,4],[437,49,316,4,"default"],[437,56,316,4],[437,58,325,4],[437,71,325,23],[438,10,326,8],[438,17,326,15],[438,21,326,19],[438,22,326,20,"_performOperationAndHandleStatusAsync"],[438,59,326,57],[438,60,326,58],[438,66,326,64,"ExponentAV"],[438,85,326,74],[438,86,326,75,"pauseAudioRecording"],[438,105,326,94],[438,106,326,95],[438,107,326,96],[438,108,326,97],[439,8,327,4],[439,9,327,5],[440,8,327,5],[440,17,325,10,"pauseAsync"],[440,27,325,20,"pauseAsync"],[440,28,325,20],[441,10,325,20],[441,17,325,20,"_pauseAsync"],[441,28,325,20],[441,29,325,20,"apply"],[441,34,325,20],[441,41,325,20,"arguments"],[441,50,325,20],[442,8,325,20],[443,8,325,20],[443,15,325,10,"pauseAsync"],[443,25,325,20],[444,6,325,20],[445,6,328,4],[446,0,329,0],[447,0,330,0],[448,0,331,0],[449,0,332,0],[450,0,333,0],[451,0,334,0],[452,0,335,0],[453,0,336,0],[454,0,337,0],[455,0,338,0],[456,6,328,4],[457,4,328,4],[458,6,328,4,"key"],[458,9,328,4],[459,6,328,4,"value"],[459,11,328,4],[460,8,328,4],[460,12,328,4,"_stopAndUnloadAsync"],[460,31,328,4],[460,38,328,4,"_asyncToGenerator2"],[460,56,328,4],[460,57,328,4,"default"],[460,64,328,4],[460,66,339,4],[460,79,339,31],[461,10,340,8],[461,14,340,12],[461,15,340,13],[461,19,340,17],[461,20,340,18,"_canRecord"],[461,30,340,28],[461,32,340,30],[462,12,341,12],[462,16,341,16],[462,20,341,20],[462,21,341,21,"_isDoneRecording"],[462,37,341,37],[462,39,341,39],[463,14,342,16],[463,20,342,22],[463,24,342,26,"Error"],[463,29,342,31],[463,30,342,32],[463,89,342,91],[463,90,342,92],[464,12,343,12],[464,13,343,13],[464,19,344,17],[465,14,345,16],[465,20,345,22],[465,24,345,26,"Error"],[465,29,345,31],[465,30,345,32],[465,85,345,87],[465,86,345,88],[466,12,346,12],[467,10,347,8],[468,10,348,8],[469,10,349,8],[470,10,350,8],[470,14,350,12,"stopResult"],[470,24,350,22],[471,10,351,8],[471,14,351,12,"stopError"],[471,23,351,21],[472,10,352,8],[472,14,352,12],[473,12,353,12,"stopResult"],[473,22,353,22],[473,31,353,31,"ExponentAV"],[473,50,353,41],[473,51,353,42,"stopAudioRecording"],[473,69,353,60],[473,70,353,61],[473,71,353,62],[474,10,354,8],[474,11,354,9],[474,12,355,8],[474,19,355,15,"err"],[474,22,355,18],[474,24,355,20],[475,12,356,12,"stopError"],[475,21,356,21],[475,24,356,24,"err"],[475,27,356,27],[476,10,357,8],[477,10,358,8],[478,10,359,8],[478,14,359,12,"Platform"],[478,39,359,20],[478,40,359,21,"OS"],[478,42,359,23],[478,47,359,28],[478,52,359,33],[478,56,359,37,"stopResult"],[478,66,359,47],[478,68,359,49,"uri"],[478,71,359,52],[478,76,359,57,"undefined"],[478,85,359,66],[478,87,359,68],[479,12,360,12],[479,16,360,16],[479,17,360,17,"_uri"],[479,21,360,21],[479,24,360,24,"stopResult"],[479,34,360,34],[479,35,360,35,"uri"],[479,38,360,38],[480,10,361,8],[481,10,362,8],[482,10,363,8],[482,16,363,14,"ExponentAV"],[482,35,363,24],[482,36,363,25,"unloadAudioRecorder"],[482,55,363,44],[482,56,363,45],[482,57,363,46],[483,10,364,8],[483,14,364,14,"status"],[483,20,364,20],[483,29,364,29],[483,33,364,33],[483,34,364,34,"_cleanupForUnloadedRecorder"],[483,61,364,61],[483,62,364,62,"stopResult"],[483,72,364,72],[483,73,364,73],[484,10,365,8],[484,17,365,15,"stopError"],[484,26,365,24],[484,29,365,27,"Promise"],[484,36,365,34],[484,37,365,35,"reject"],[484,43,365,41],[484,44,365,42,"stopError"],[484,53,365,51],[484,54,365,52],[484,57,365,55,"status"],[484,63,365,61],[485,8,366,4],[485,9,366,5],[486,8,366,5],[486,17,339,10,"stopAndUnloadAsync"],[486,35,339,28,"stopAndUnloadAsync"],[486,36,339,28],[487,10,339,28],[487,17,339,28,"_stopAndUnloadAsync"],[487,36,339,28],[487,37,339,28,"apply"],[487,42,339,28],[487,49,339,28,"arguments"],[487,58,339,28],[488,8,339,28],[489,8,339,28],[489,15,339,10,"stopAndUnloadAsync"],[489,33,339,28],[490,6,339,28],[490,10,367,4],[491,6,368,4],[492,0,369,0],[493,0,370,0],[494,0,371,0],[495,0,372,0],[496,0,373,0],[497,6,368,4],[498,4,368,4],[499,6,368,4,"key"],[499,9,368,4],[500,6,368,4,"value"],[500,11,368,4],[500,13,374,4],[500,22,374,4,"getURI"],[500,28,374,10,"getURI"],[500,29,374,10],[500,31,374,13],[501,8,375,8],[501,15,375,15],[501,19,375,19],[501,20,375,20,"_uri"],[501,24,375,24],[502,6,376,4],[503,6,377,4],[504,0,378,0],[505,0,379,0],[506,4,377,4],[507,6,377,4,"key"],[507,9,377,4],[508,6,377,4,"value"],[508,11,377,4],[509,8,377,4],[509,12,377,4,"_createNewLoadedSound"],[509,33,377,4],[509,40,377,4,"_asyncToGenerator2"],[509,58,377,4],[509,59,377,4,"default"],[509,66,377,4],[509,68,380,4],[509,81,380,82],[510,10,380,82],[510,14,380,31,"initialStatus"],[510,27,380,44],[510,30,380,44,"arguments"],[510,39,380,44],[510,40,380,44,"length"],[510,46,380,44],[510,54,380,44,"arguments"],[510,63,380,44],[510,71,380,44,"undefined"],[510,80,380,44],[510,83,380,44,"arguments"],[510,92,380,44],[510,98,380,47],[510,99,380,48],[510,100,380,49],[511,10,380,49],[511,14,380,51,"onPlaybackStatusUpdate"],[511,36,380,73],[511,39,380,73,"arguments"],[511,48,380,73],[511,49,380,73,"length"],[511,55,380,73],[511,63,380,73,"arguments"],[511,72,380,73],[511,80,380,73,"undefined"],[511,89,380,73],[511,92,380,73,"arguments"],[511,101,380,73],[511,107,380,76],[511,111,380,80],[512,10,381,8,"console"],[512,17,381,15],[512,18,381,16,"warn"],[512,22,381,20],[512,23,381,21],[512,148,381,146],[512,149,381,147],[513,10,382,8],[513,17,382,15],[513,21,382,19],[513,22,382,20,"createNewLoadedSoundAsync"],[513,47,382,45],[513,48,382,46,"initialStatus"],[513,61,382,59],[513,63,382,61,"onPlaybackStatusUpdate"],[513,85,382,83],[513,86,382,84],[514,8,383,4],[514,9,383,5],[515,8,383,5],[515,17,380,10,"createNewLoadedSound"],[515,37,380,30,"createNewLoadedSound"],[515,38,380,30],[516,10,380,30],[516,17,380,30,"_createNewLoadedSound"],[516,38,380,30],[516,39,380,30,"apply"],[516,44,380,30],[516,51,380,30,"arguments"],[516,60,380,30],[517,8,380,30],[518,8,380,30],[518,15,380,10,"createNewLoadedSound"],[518,35,380,30],[519,6,380,30],[520,6,384,4],[521,0,385,0],[522,0,386,0],[523,0,387,0],[524,0,388,0],[525,0,389,0],[526,0,390,0],[527,0,391,0],[528,0,392,0],[529,0,393,0],[530,0,394,0],[531,0,395,0],[532,6,384,4],[533,4,384,4],[534,6,384,4,"key"],[534,9,384,4],[535,6,384,4,"value"],[535,11,384,4],[536,8,384,4],[536,12,384,4,"_createNewLoadedSoundAsync"],[536,38,384,4],[536,45,384,4,"_asyncToGenerator2"],[536,63,384,4],[536,64,384,4,"default"],[536,71,384,4],[536,73,396,4],[536,86,396,87],[537,10,396,87],[537,14,396,36,"initialStatus"],[537,27,396,49],[537,30,396,49,"arguments"],[537,39,396,49],[537,40,396,49,"length"],[537,46,396,49],[537,54,396,49,"arguments"],[537,63,396,49],[537,71,396,49,"undefined"],[537,80,396,49],[537,83,396,49,"arguments"],[537,92,396,49],[537,98,396,52],[537,99,396,53],[537,100,396,54],[538,10,396,54],[538,14,396,56,"onPlaybackStatusUpdate"],[538,36,396,78],[538,39,396,78,"arguments"],[538,48,396,78],[538,49,396,78,"length"],[538,55,396,78],[538,63,396,78,"arguments"],[538,72,396,78],[538,80,396,78,"undefined"],[538,89,396,78],[538,92,396,78,"arguments"],[538,101,396,78],[538,107,396,81],[538,111,396,85],[539,10,397,8],[539,14,397,12],[539,18,397,16],[539,19,397,17,"_uri"],[539,23,397,21],[539,27,397,25],[539,31,397,29],[539,35,397,33],[539,36,397,34],[539,40,397,38],[539,41,397,39,"_isDoneRecording"],[539,57,397,55],[539,59,397,57],[540,12,398,12],[540,18,398,18],[540,22,398,22,"Error"],[540,27,398,27],[540,28,398,28],[540,86,398,86],[540,87,398,87],[541,10,399,8],[542,10,400,8],[542,17,400,15,"Sound"],[542,29,400,20],[542,30,400,21,"createAsync"],[542,41,400,32],[542,42,400,33],[543,12,400,35,"uri"],[543,15,400,38],[543,17,400,40],[543,21,400,44],[543,22,400,45,"_uri"],[544,10,400,50],[544,11,400,51],[544,13,400,53,"initialStatus"],[544,26,400,66],[544,28,400,68,"onPlaybackStatusUpdate"],[544,50,400,90],[544,52,400,92],[544,57,400,97],[544,58,400,98],[545,8,401,4],[545,9,401,5],[546,8,401,5],[546,17,396,10,"createNewLoadedSoundAsync"],[546,42,396,35,"createNewLoadedSoundAsync"],[546,43,396,35],[547,10,396,35],[547,17,396,35,"_createNewLoadedSoundAsync"],[547,43,396,35],[547,44,396,35,"apply"],[547,49,396,35],[547,56,396,35,"arguments"],[547,65,396,35],[548,8,396,35],[549,8,396,35],[549,15,396,10,"createNewLoadedSoundAsync"],[549,40,396,35],[550,6,396,35],[551,4,396,35],[552,2,396,35],[553,2,396,35,"_Recording"],[553,12,396,35],[553,15,70,13,"Recording"],[553,24,70,22],[554,2,70,13,"Recording"],[554,11,70,22],[554,12,168,11,"createAsync"],[554,23,168,22],[554,43,168,22,"_asyncToGenerator2"],[554,61,168,22],[554,62,168,22,"default"],[554,69,168,22],[554,71,168,25],[554,84,168,151],[555,4,168,151],[555,8,168,32,"options"],[555,15,168,39],[555,18,168,39,"arguments"],[555,27,168,39],[555,28,168,39,"length"],[555,34,168,39],[555,42,168,39,"arguments"],[555,51,168,39],[555,59,168,39,"undefined"],[555,68,168,39],[555,71,168,39,"arguments"],[555,80,168,39],[555,86,168,42,"RecordingOptionsPresets"],[555,129,168,65],[555,130,168,66,"LOW_QUALITY"],[555,141,168,77],[556,4,168,77],[556,8,168,79,"onRecordingStatusUpdate"],[556,31,168,102],[556,34,168,102,"arguments"],[556,43,168,102],[556,44,168,102,"length"],[556,50,168,102],[556,58,168,102,"arguments"],[556,67,168,102],[556,75,168,102,"undefined"],[556,84,168,102],[556,87,168,102,"arguments"],[556,96,168,102],[556,102,168,105],[556,106,168,109],[557,4,168,109],[557,8,168,111,"progressUpdateIntervalMillis"],[557,36,168,139],[557,39,168,139,"arguments"],[557,48,168,139],[557,49,168,139,"length"],[557,55,168,139],[557,63,168,139,"arguments"],[557,72,168,139],[557,80,168,139,"undefined"],[557,89,168,139],[557,92,168,139,"arguments"],[557,101,168,139],[557,107,168,142],[557,111,168,146],[558,4,169,8],[558,8,169,14,"recording"],[558,17,169,23],[558,20,169,26],[558,24,169,30,"Recording"],[558,34,169,39],[558,35,169,40],[558,36,169,41],[559,4,170,8],[559,8,170,12,"progressUpdateIntervalMillis"],[559,36,170,40],[559,38,170,42],[560,6,171,12,"recording"],[560,15,171,21],[560,16,171,22,"_progressUpdateIntervalMillis"],[560,45,171,51],[560,48,171,54,"progressUpdateIntervalMillis"],[560,76,171,82],[561,4,172,8],[562,4,173,8,"recording"],[562,13,173,17],[562,14,173,18,"setOnRecordingStatusUpdate"],[562,40,173,44],[562,41,173,45,"onRecordingStatusUpdate"],[562,64,173,68],[562,65,173,69],[563,4,174,8],[563,10,174,14,"recording"],[563,19,174,23],[563,20,174,24,"prepareToRecordAsync"],[563,40,174,44],[563,41,174,45],[564,6,175,12],[564,9,175,15,"options"],[564,16,175,22],[565,6,176,12,"keepAudioActiveHint"],[565,25,176,31],[565,27,176,33],[566,4,177,8],[566,5,177,9],[566,6,177,10],[567,4,178,8],[567,8,178,12],[568,6,179,12],[568,10,179,18,"status"],[568,16,179,24],[568,25,179,33,"recording"],[568,34,179,42],[568,35,179,43,"startAsync"],[568,45,179,53],[568,46,179,54],[568,47,179,55],[569,6,180,12],[569,13,180,19],[570,8,180,21,"recording"],[570,17,180,30],[571,8,180,32,"status"],[572,6,180,39],[572,7,180,40],[573,4,181,8],[573,5,181,9],[573,6,182,8],[573,13,182,15,"err"],[573,16,182,18],[573,18,182,20],[574,6,183,12,"recording"],[574,15,183,21],[574,16,183,22,"stopAndUnloadAsync"],[574,34,183,40],[574,35,183,41],[574,36,183,42],[574,37,183,43,"catch"],[574,42,183,48],[574,43,183,50,"_e"],[574,45,183,52],[574,49,183,57],[575,8,184,16],[576,8,185,16],[577,8,186,16],[578,6,186,16],[578,7,187,13],[578,8,187,14],[579,6,188,12],[579,12,188,18,"err"],[579,15,188,21],[580,4,189,8],[581,2,190,4],[581,3,190,5],[582,0,190,5],[582,3]],"functionMap":{"names":["<global>","getPermissionsAsync","requestPermissionsAsync","Recording","_cleanupForUnloadedRecorder","_pollingLoop","_disablePolling","_enablePollingIfNecessaryAndPossible","_callOnRecordingStatusUpdateForNewStatus","_performOperationAndHandleStatusAsync","createAsync","recording.stopAndUnloadAsync._catch$argument_0","getStatusAsync","_performOperationAndHandleStatusAsync$argument_0","setOnRecordingStatusUpdate","setProgressUpdateInterval","prepareToRecordAsync","getAvailableInputs","getCurrentInput","setInput","startAsync","pauseAsync","stopAndUnloadAsync","getURI","createNewLoadedSound","createNewLoadedSoundAsync"],"mappings":"AAA;OCc;CDE;OEO;CFE;OG4C;kCCW;KDW;mBEC;KFU;IGC;KHK;IIC;KJK;IKC;KLI;IMC;KNU;yBOqC;iDCe;aDI;KPG;qBSM;8DCG,0CD;KTU;IWU;KXS;IYM;KZG;Iaa;KbmC;IcK;KdE;IeK;KfE;IgBM;KhBE;IiBM;0DPC,sCO;KjBC;IkBU;0DRC,sCQ;KlBC;ImBY;KnB2B;IoBQ;KpBE;IqBI;KrBG;IsBa;KtBK;CHC"}},"type":"js/module"}]}