{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"5y7e5+zC7teYEEC6niD9f5zII1M=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo=","exportNames":["*"]}},{"name":"../../utils/blobUtils","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":63,"index":63}}],"key":"QDDF0FI6I4qL3Q9Vi7FH6zncBhU=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.convertFormDataAsync = convertFormDataAsync;\n  exports.createBoundary = createBoundary;\n  exports.joinUint8Arrays = joinUint8Arrays;\n  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/slicedToArray\"));\n  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[2], \"@babel/runtime/helpers/asyncToGenerator\"));\n  var _blobUtils = require(_dependencyMap[3], \"../../utils/blobUtils\");\n  /**\n   * Convert FormData to Uint8Array with a boundary\n   *\n   * `uri` is not supported for React Native's FormData.\n   * `blob` is not supported for standard FormData.\n   */\n  function convertFormDataAsync(_x) {\n    return _convertFormDataAsync.apply(this, arguments);\n  }\n  /**\n   * Create mutipart boundary\n   */\n  function _convertFormDataAsync() {\n    _convertFormDataAsync = (0, _asyncToGenerator2.default)(function* (formData) {\n      var boundary = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : createBoundary();\n      // @ts-expect-error: React Native's FormData is not compatible with the web's FormData\n      if (typeof formData.getParts !== 'function') {\n        throw new Error('Unsupported FormData implementation');\n      }\n      // @ts-expect-error: React Native's FormData is not 100% compatible with ours\n      var parts = formData.getParts();\n      var results = [];\n      var _loop = function* (entry) {\n        results.push(`--${boundary}\\r\\n`);\n        for (var _ref of Object.entries(entry.headers)) {\n          var _ref2 = (0, _slicedToArray2.default)(_ref, 2);\n          var headerKey = _ref2[0];\n          var headerValue = _ref2[1];\n          results.push(`${headerKey}: ${headerValue}\\r\\n`);\n        }\n        results.push(`\\r\\n`);\n        if ('string' in entry) {\n          results.push(entry.string);\n        } else if ('file' in entry) {\n          results.push(entry.file.bytes());\n        } else if ('blob' in entry) {\n          results.push(new Uint8Array(yield (0, _blobUtils.blobToArrayBufferAsync)(entry.blob)));\n        } else if (entry._data?.blobId != null) {\n          // When `FormData.getParts()` is called, React Native will use the spread syntax to copy the object and lose the Blob type info.\n          // We should find the original Blob instance from the `FormData._parts` internal properties.\n          // @ts-expect-error: react-native's proprietary Blob type\n          var formDatum = formData._parts?.find(_ref3 => {\n            var _ref4 = (0, _slicedToArray2.default)(_ref3, 2),\n              _name = _ref4[0],\n              value = _ref4[1];\n            return value.data?.blobId === entry._data.blobId;\n          });\n          if (formDatum == null) {\n            throw new Error('Cannot find the original Blob instance from FormData');\n          }\n          if (!(formDatum[1] instanceof Blob)) {\n            throw new Error('Unexpected value type for Blob entry in FormData');\n          }\n          results.push(new Uint8Array(yield (0, _blobUtils.blobToArrayBufferAsync)(formDatum[1])));\n        } else {\n          throw new Error('Unsupported FormDataPart implementation');\n        }\n        results.push(`\\r\\n`);\n      };\n      for (var entry of parts) {\n        yield* _loop(entry);\n      }\n      results.push(`--${boundary}--\\r\\n`);\n      var arrays = results.map(result => {\n        if (typeof result === 'string') {\n          // @ts-ignore: TextEncoder is not available in all environments\n          return new TextEncoder().encode(result);\n        } else {\n          return result;\n        }\n      });\n      return {\n        body: joinUint8Arrays(arrays),\n        boundary\n      };\n    });\n    return _convertFormDataAsync.apply(this, arguments);\n  }\n  function createBoundary() {\n    var boundaryChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var boundary = '----ExpoFetchFormBoundary';\n    for (var i = 0; i < 16; i++) {\n      boundary += boundaryChars.charAt(Math.floor(Math.random() * boundaryChars.length));\n    }\n    return boundary;\n  }\n\n  /**\n   * Merge Uint8Arrays into a single Uint8Array\n   */\n  function joinUint8Arrays(arrays) {\n    var totalLength = arrays.reduce((acc, arr) => acc + arr.length, 0);\n    var result = new Uint8Array(totalLength);\n    var offset = 0;\n    arrays.forEach(array => {\n      result.set(array, offset);\n      offset += array.length;\n    });\n    return result;\n  }\n});","lineCount":112,"map":[[11,2,1,0],[11,6,1,0,"_blobUtils"],[11,16,1,0],[11,19,1,0,"require"],[11,26,1,0],[11,27,1,0,"_dependencyMap"],[11,41,1,0],[12,2,3,0],[13,0,4,0],[14,0,5,0],[15,0,6,0],[16,0,7,0],[17,0,8,0],[18,2,3,0],[18,11,9,22,"convertFormDataAsync"],[18,31,9,42,"convertFormDataAsync"],[18,32,9,42,"_x"],[18,34,9,42],[19,4,9,42],[19,11,9,42,"_convertFormDataAsync"],[19,32,9,42],[19,33,9,42,"apply"],[19,38,9,42],[19,45,9,42,"arguments"],[19,54,9,42],[20,2,9,42],[21,2,66,0],[22,0,67,0],[23,0,68,0],[24,2,66,0],[24,11,66,0,"_convertFormDataAsync"],[24,33,66,0],[25,4,66,0,"_convertFormDataAsync"],[25,25,66,0],[25,32,66,0,"_asyncToGenerator2"],[25,50,66,0],[25,51,66,0,"default"],[25,58,66,0],[25,60,9,7],[25,71,10,2,"formData"],[25,79,10,20],[25,81,12,51],[26,6,12,51],[26,10,11,2,"boundary"],[26,18,11,18],[26,21,11,18,"arguments"],[26,30,11,18],[26,31,11,18,"length"],[26,37,11,18],[26,45,11,18,"arguments"],[26,54,11,18],[26,62,11,18,"undefined"],[26,71,11,18],[26,74,11,18,"arguments"],[26,83,11,18],[26,89,11,21,"createBoundary"],[26,103,11,35],[26,104,11,36],[26,105,11,37],[27,6,13,2],[28,6,14,2],[28,10,14,6],[28,17,14,13,"formData"],[28,25,14,21],[28,26,14,22,"getParts"],[28,34,14,30],[28,39,14,35],[28,49,14,45],[28,51,14,47],[29,8,15,4],[29,14,15,10],[29,18,15,14,"Error"],[29,23,15,19],[29,24,15,20],[29,61,15,57],[29,62,15,58],[30,6,16,2],[31,6,17,2],[32,6,18,2],[32,10,18,8,"parts"],[32,15,18,33],[32,18,18,36,"formData"],[32,26,18,44],[32,27,18,45,"getParts"],[32,35,18,53],[32,36,18,54],[32,37,18,55],[33,6,20,2],[33,10,20,8,"results"],[33,17,20,40],[33,20,20,43],[33,22,20,45],[34,6,20,46],[34,10,20,46,"_loop"],[34,15,20,46],[34,28,20,46,"_loop"],[34,29,20,46,"entry"],[34,34,20,46],[34,36,21,29],[35,8,22,4,"results"],[35,15,22,11],[35,16,22,12,"push"],[35,20,22,16],[35,21,22,17],[35,26,22,22,"boundary"],[35,34,22,30],[35,40,22,36],[35,41,22,37],[36,8,23,4],[36,17,23,4,"_ref"],[36,21,23,4],[36,25,23,43,"Object"],[36,31,23,49],[36,32,23,50,"entries"],[36,39,23,57],[36,40,23,58,"entry"],[36,45,23,63],[36,46,23,64,"headers"],[36,53,23,71],[36,54,23,72],[36,56,23,74],[37,10,23,74],[37,14,23,74,"_ref2"],[37,19,23,74],[37,26,23,74,"_slicedToArray2"],[37,41,23,74],[37,42,23,74,"default"],[37,49,23,74],[37,51,23,74,"_ref"],[37,55,23,74],[38,10,23,74],[38,14,23,16,"headerKey"],[38,23,23,25],[38,26,23,25,"_ref2"],[38,31,23,25],[39,10,23,25],[39,14,23,27,"headerValue"],[39,25,23,38],[39,28,23,38,"_ref2"],[39,33,23,38],[40,10,24,6,"results"],[40,17,24,13],[40,18,24,14,"push"],[40,22,24,18],[40,23,24,19],[40,26,24,22,"headerKey"],[40,35,24,31],[40,40,24,36,"headerValue"],[40,51,24,47],[40,57,24,53],[40,58,24,54],[41,8,25,4],[42,8,26,4,"results"],[42,15,26,11],[42,16,26,12,"push"],[42,20,26,16],[42,21,26,17],[42,27,26,23],[42,28,26,24],[43,8,27,4],[43,12,27,8],[43,20,27,16],[43,24,27,20,"entry"],[43,29,27,25],[43,31,27,27],[44,10,28,6,"results"],[44,17,28,13],[44,18,28,14,"push"],[44,22,28,18],[44,23,28,19,"entry"],[44,28,28,24],[44,29,28,25,"string"],[44,35,28,31],[44,36,28,32],[45,8,29,4],[45,9,29,5],[45,15,29,11],[45,19,29,15],[45,25,29,21],[45,29,29,25,"entry"],[45,34,29,30],[45,36,29,32],[46,10,30,6,"results"],[46,17,30,13],[46,18,30,14,"push"],[46,22,30,18],[46,23,30,19,"entry"],[46,28,30,24],[46,29,30,25,"file"],[46,33,30,29],[46,34,30,30,"bytes"],[46,39,30,35],[46,40,30,36],[46,41,30,37],[46,42,30,38],[47,8,31,4],[47,9,31,5],[47,15,31,11],[47,19,31,15],[47,25,31,21],[47,29,31,25,"entry"],[47,34,31,30],[47,36,31,32],[48,10,32,6,"results"],[48,17,32,13],[48,18,32,14,"push"],[48,22,32,18],[48,23,32,19],[48,27,32,23,"Uint8Array"],[48,37,32,33],[48,44,32,40],[48,48,32,40,"blobToArrayBufferAsync"],[48,81,32,62],[48,83,32,63,"entry"],[48,88,32,68],[48,89,32,69,"blob"],[48,93,32,73],[48,94,32,74],[48,95,32,75],[48,96,32,76],[49,8,33,4],[49,9,33,5],[49,15,33,11],[49,19,33,15,"entry"],[49,24,33,20],[49,25,33,21,"_data"],[49,30,33,26],[49,32,33,28,"blobId"],[49,38,33,34],[49,42,33,38],[49,46,33,42],[49,48,33,44],[50,10,34,6],[51,10,35,6],[52,10,36,6],[53,10,37,6],[53,14,37,12,"formDatum"],[53,23,37,21],[53,26,37,24,"formData"],[53,34,37,32],[53,35,37,33,"_parts"],[53,41,37,39],[53,43,37,41,"find"],[53,47,37,45],[53,48,38,8,"_ref3"],[53,53,38,8],[54,12,38,8],[54,16,38,8,"_ref4"],[54,21,38,8],[54,28,38,8,"_slicedToArray2"],[54,43,38,8],[54,44,38,8,"default"],[54,51,38,8],[54,53,38,8,"_ref3"],[54,58,38,8],[55,14,38,10,"_name"],[55,19,38,15],[55,22,38,15,"_ref4"],[55,27,38,15],[56,14,38,17,"value"],[56,19,38,22],[56,22,38,22,"_ref4"],[56,27,38,22],[57,12,38,22],[57,19,38,56,"value"],[57,24,38,61],[57,25,38,62,"data"],[57,29,38,66],[57,31,38,68,"blobId"],[57,37,38,74],[57,42,38,79,"entry"],[57,47,38,84],[57,48,38,85,"_data"],[57,53,38,90],[57,54,38,91,"blobId"],[57,60,38,97],[58,10,38,97],[58,11,39,6],[58,12,39,7],[59,10,40,6],[59,14,40,10,"formDatum"],[59,23,40,19],[59,27,40,23],[59,31,40,27],[59,33,40,29],[60,12,41,8],[60,18,41,14],[60,22,41,18,"Error"],[60,27,41,23],[60,28,41,24],[60,82,41,78],[60,83,41,79],[61,10,42,6],[62,10,43,6],[62,14,43,10],[62,16,43,12,"formDatum"],[62,25,43,21],[62,26,43,22],[62,27,43,23],[62,28,43,24],[62,40,43,36,"Blob"],[62,44,43,40],[62,45,43,41],[62,47,43,43],[63,12,44,8],[63,18,44,14],[63,22,44,18,"Error"],[63,27,44,23],[63,28,44,24],[63,78,44,74],[63,79,44,75],[64,10,45,6],[65,10,46,6,"results"],[65,17,46,13],[65,18,46,14,"push"],[65,22,46,18],[65,23,46,19],[65,27,46,23,"Uint8Array"],[65,37,46,33],[65,44,46,40],[65,48,46,40,"blobToArrayBufferAsync"],[65,81,46,62],[65,83,46,63,"formDatum"],[65,92,46,72],[65,93,46,73],[65,94,46,74],[65,95,46,75],[65,96,46,76],[65,97,46,77],[65,98,46,78],[66,8,47,4],[66,9,47,5],[66,15,47,11],[67,10,48,6],[67,16,48,12],[67,20,48,16,"Error"],[67,25,48,21],[67,26,48,22],[67,67,48,63],[67,68,48,64],[68,8,49,4],[69,8,50,4,"results"],[69,15,50,11],[69,16,50,12,"push"],[69,20,50,16],[69,21,50,17],[69,27,50,23],[69,28,50,24],[70,6,51,2],[70,7,51,3],[71,6,21,2],[71,11,21,7],[71,15,21,13,"entry"],[71,20,21,18],[71,24,21,22,"parts"],[71,29,21,27],[72,8,21,27],[72,15,21,27,"_loop"],[72,20,21,27],[72,21,21,27,"entry"],[72,26,21,27],[73,6,21,27],[74,6,53,2,"results"],[74,13,53,9],[74,14,53,10,"push"],[74,18,53,14],[74,19,53,15],[74,24,53,20,"boundary"],[74,32,53,28],[74,40,53,36],[74,41,53,37],[75,6,54,2],[75,10,54,8,"arrays"],[75,16,54,14],[75,19,54,17,"results"],[75,26,54,24],[75,27,54,25,"map"],[75,30,54,28],[75,31,54,30,"result"],[75,37,54,36],[75,41,54,41],[76,8,55,4],[76,12,55,8],[76,19,55,15,"result"],[76,25,55,21],[76,30,55,26],[76,38,55,34],[76,40,55,36],[77,10,56,6],[78,10,57,6],[78,17,57,13],[78,21,57,17,"TextEncoder"],[78,32,57,28],[78,33,57,29],[78,34,57,30],[78,35,57,31,"encode"],[78,41,57,37],[78,42,57,38,"result"],[78,48,57,44],[78,49,57,45],[79,8,58,4],[79,9,58,5],[79,15,58,11],[80,10,59,6],[80,17,59,13,"result"],[80,23,59,19],[81,8,60,4],[82,6,61,2],[82,7,61,3],[82,8,61,20],[83,6,63,2],[83,13,63,9],[84,8,63,11,"body"],[84,12,63,15],[84,14,63,17,"joinUint8Arrays"],[84,29,63,32],[84,30,63,33,"arrays"],[84,36,63,39],[84,37,63,40],[85,8,63,42,"boundary"],[86,6,63,51],[86,7,63,52],[87,4,64,0],[87,5,64,1],[88,4,64,1],[88,11,64,1,"_convertFormDataAsync"],[88,32,64,1],[88,33,64,1,"apply"],[88,38,64,1],[88,45,64,1,"arguments"],[88,54,64,1],[89,2,64,1],[90,2,69,7],[90,11,69,16,"createBoundary"],[90,25,69,30,"createBoundary"],[90,26,69,30],[90,28,69,41],[91,4,70,2],[91,8,70,8,"boundaryChars"],[91,21,70,21],[91,24,70,24],[91,88,70,88],[92,4,71,2],[92,8,71,6,"boundary"],[92,16,71,14],[92,19,71,17],[92,46,71,44],[93,4,72,2],[93,9,72,7],[93,13,72,11,"i"],[93,14,72,12],[93,17,72,15],[93,18,72,16],[93,20,72,18,"i"],[93,21,72,19],[93,24,72,22],[93,26,72,24],[93,28,72,26,"i"],[93,29,72,27],[93,31,72,29],[93,33,72,31],[94,6,73,4,"boundary"],[94,14,73,12],[94,18,73,16,"boundaryChars"],[94,31,73,29],[94,32,73,30,"charAt"],[94,38,73,36],[94,39,73,37,"Math"],[94,43,73,41],[94,44,73,42,"floor"],[94,49,73,47],[94,50,73,48,"Math"],[94,54,73,52],[94,55,73,53,"random"],[94,61,73,59],[94,62,73,60],[94,63,73,61],[94,66,73,64,"boundaryChars"],[94,79,73,77],[94,80,73,78,"length"],[94,86,73,84],[94,87,73,85],[94,88,73,86],[95,4,74,2],[96,4,75,2],[96,11,75,9,"boundary"],[96,19,75,17],[97,2,76,0],[99,2,78,0],[100,0,79,0],[101,0,80,0],[102,2,81,7],[102,11,81,16,"joinUint8Arrays"],[102,26,81,31,"joinUint8Arrays"],[102,27,81,32,"arrays"],[102,33,81,52],[102,35,81,66],[103,4,82,2],[103,8,82,8,"totalLength"],[103,19,82,27],[103,22,82,30,"arrays"],[103,28,82,36],[103,29,82,37,"reduce"],[103,35,82,43],[103,36,82,44],[103,37,82,45,"acc"],[103,40,82,56],[103,42,82,58,"arr"],[103,45,82,73],[103,50,82,78,"acc"],[103,53,82,81],[103,56,82,84,"arr"],[103,59,82,87],[103,60,82,88,"length"],[103,66,82,94],[103,68,82,96],[103,69,82,97],[103,70,82,98],[104,4,83,2],[104,8,83,8,"result"],[104,14,83,26],[104,17,83,29],[104,21,83,33,"Uint8Array"],[104,31,83,43],[104,32,83,44,"totalLength"],[104,43,83,55],[104,44,83,56],[105,4,85,2],[105,8,85,6,"offset"],[105,14,85,20],[105,17,85,23],[105,18,85,24],[106,4,86,2,"arrays"],[106,10,86,8],[106,11,86,9,"forEach"],[106,18,86,16],[106,19,86,18,"array"],[106,24,86,35],[106,28,86,40],[107,6,87,4,"result"],[107,12,87,10],[107,13,87,11,"set"],[107,16,87,14],[107,17,87,15,"array"],[107,22,87,20],[107,24,87,22,"offset"],[107,30,87,28],[107,31,87,29],[108,6,88,4,"offset"],[108,12,88,10],[108,16,88,14,"array"],[108,21,88,19],[108,22,88,20,"length"],[108,28,88,26],[109,4,89,2],[109,5,89,3],[109,6,89,4],[110,4,91,2],[110,11,91,9,"result"],[110,17,91,15],[111,2,92,0],[112,0,92,1],[112,3]],"functionMap":{"names":["<global>","convertFormDataAsync","formData._parts.find$argument_0","results.map$argument_0","createBoundary","joinUint8Arrays","arrays.reduce$argument_0","arrays.forEach$argument_0"],"mappings":"AAA;OCQ;QC6B,yFD;6BEgB;GFO;CDG;OIK;CJO;OKK;4CCC,kDD;iBEI;GFG;CLG"}},"type":"js/module"}]}