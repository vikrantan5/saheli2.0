{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"tslib","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":34,"index":34}}],"key":"8R25577gwLd3n1hFG9VYnRLV9eE=","exportNames":["*"]}},{"name":"./VectorIndexApi","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":35},"end":{"line":2,"column":46,"index":81}}],"key":"kAEs1iLVMNXlTKXHF6yt5rfPht8=","exportNames":["*"]}},{"name":"./VectorDataApi","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":82},"end":{"line":3,"column":44,"index":126}}],"key":"GyXwnHZ1Vq1XhwE4j7lPpaNiqq4=","exportNames":["*"]}},{"name":"./VectorBucketApi","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":127},"end":{"line":4,"column":48,"index":175}}],"key":"iUZWryD038j35scBIkqpXVUKo7U=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.VectorIndexScope = exports.VectorBucketScope = exports.StorageVectorsClient = void 0;\n  var _tslib = require(_dependencyMap[1], \"tslib\");\n  var _VectorIndexApi = _interopRequireDefault(require(_dependencyMap[2], \"./VectorIndexApi\"));\n  var _VectorDataApi = _interopRequireDefault(require(_dependencyMap[3], \"./VectorDataApi\"));\n  var _VectorBucketApi = _interopRequireDefault(require(_dependencyMap[4], \"./VectorBucketApi\"));\n  /**\n   * Main client for interacting with S3 Vectors API\n   * Provides access to bucket, index, and vector data operations\n   *\n   * **Usage Patterns:**\n   *\n   * 1. **Via StorageClient (recommended for most use cases):**\n   * ```typescript\n   * import { StorageClient } from '@supabase/storage-js'\n   *\n   * const storageClient = new StorageClient(url, headers)\n   * const vectors = storageClient.vectors\n   *\n   * // Use vector operations\n   * await vectors.createBucket('embeddings-prod')\n   * const bucket = vectors.from('embeddings-prod')\n   * await bucket.createIndex({ ... })\n   * ```\n   *\n   * 2. **Standalone (for vector-only applications):**\n   * ```typescript\n   * import { StorageVectorsClient } from '@supabase/storage-js'\n   *\n   * const vectorsClient = new StorageVectorsClient('https://api.example.com', {\n   *   headers: { 'Authorization': 'Bearer token' }\n   * })\n   *\n   * // Access bucket operations\n   * await vectorsClient.createBucket('embeddings-prod')\n   *\n   * // Access index operations via buckets\n   * const bucket = vectorsClient.from('embeddings-prod')\n   * await bucket.createIndex({\n   *   indexName: 'documents',\n   *   dataType: 'float32',\n   *   dimension: 1536,\n   *   distanceMetric: 'cosine'\n   * })\n   *\n   * // Access vector operations via index\n   * const index = bucket.index('documents')\n   * await index.putVectors({\n   *   vectors: [\n   *     { key: 'doc-1', data: { float32: [...] }, metadata: { title: 'Intro' } }\n   *   ]\n   * })\n   *\n   * // Query similar vectors\n   * const { data } = await index.queryVectors({\n   *   queryVector: { float32: [...] },\n   *   topK: 5,\n   *   returnDistance: true\n   * })\n   * ```\n   */\n  class StorageVectorsClient extends _VectorBucketApi.default {\n    constructor(url, options = {}) {\n      super(url, options.headers || {}, options.fetch);\n    }\n    /**\n     * Access operations for a specific vector bucket\n     * Returns a scoped client for index and vector operations within the bucket\n     *\n     * @param vectorBucketName - Name of the vector bucket\n     * @returns Bucket-scoped client with index and vector operations\n     *\n     * @example\n     * ```typescript\n     * const bucket = client.bucket('embeddings-prod')\n     *\n     * // Create an index in this bucket\n     * await bucket.createIndex({\n     *   indexName: 'documents-openai',\n     *   dataType: 'float32',\n     *   dimension: 1536,\n     *   distanceMetric: 'cosine'\n     * })\n     *\n     * // List indexes in this bucket\n     * const { data } = await bucket.listIndexes()\n     * ```\n     */\n    from(vectorBucketName) {\n      return new VectorBucketScope(this.url, this.headers, vectorBucketName, this.fetch);\n    }\n  }\n  /**\n   * Scoped client for operations within a specific vector bucket\n   * Provides index management and access to vector operations\n   */\n  exports.StorageVectorsClient = StorageVectorsClient;\n  class VectorBucketScope extends _VectorIndexApi.default {\n    constructor(url, headers, vectorBucketName, fetch) {\n      super(url, headers, fetch);\n      this.vectorBucketName = vectorBucketName;\n    }\n    /**\n     * Creates a new vector index in this bucket\n     * Convenience method that automatically includes the bucket name\n     *\n     * @param options - Index configuration (vectorBucketName is automatically set)\n     * @returns Promise with empty response on success or error\n     *\n     * @example\n     * ```typescript\n     * const bucket = client.bucket('embeddings-prod')\n     * await bucket.createIndex({\n     *   indexName: 'documents-openai',\n     *   dataType: 'float32',\n     *   dimension: 1536,\n     *   distanceMetric: 'cosine',\n     *   metadataConfiguration: {\n     *     nonFilterableMetadataKeys: ['raw_text']\n     *   }\n     * })\n     * ```\n     */\n    createIndex(options) {\n      const _super = Object.create(null, {\n        createIndex: {\n          get: () => super.createIndex\n        }\n      });\n      return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {\n        return _super.createIndex.call(this, Object.assign(Object.assign({}, options), {\n          vectorBucketName: this.vectorBucketName\n        }));\n      });\n    }\n    /**\n     * Lists indexes in this bucket\n     * Convenience method that automatically includes the bucket name\n     *\n     * @param options - Listing options (vectorBucketName is automatically set)\n     * @returns Promise with list of indexes or error\n     *\n     * @example\n     * ```typescript\n     * const bucket = client.bucket('embeddings-prod')\n     * const { data } = await bucket.listIndexes({ prefix: 'documents-' })\n     * ```\n     */\n    listIndexes() {\n      const _super = Object.create(null, {\n        listIndexes: {\n          get: () => super.listIndexes\n        }\n      });\n      return (0, _tslib.__awaiter)(this, arguments, void 0, function* (options = {}) {\n        return _super.listIndexes.call(this, Object.assign(Object.assign({}, options), {\n          vectorBucketName: this.vectorBucketName\n        }));\n      });\n    }\n    /**\n     * Retrieves metadata for a specific index in this bucket\n     * Convenience method that automatically includes the bucket name\n     *\n     * @param indexName - Name of the index to retrieve\n     * @returns Promise with index metadata or error\n     *\n     * @example\n     * ```typescript\n     * const bucket = client.bucket('embeddings-prod')\n     * const { data } = await bucket.getIndex('documents-openai')\n     * console.log('Dimension:', data?.index.dimension)\n     * ```\n     */\n    getIndex(indexName) {\n      const _super = Object.create(null, {\n        getIndex: {\n          get: () => super.getIndex\n        }\n      });\n      return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {\n        return _super.getIndex.call(this, this.vectorBucketName, indexName);\n      });\n    }\n    /**\n     * Deletes an index from this bucket\n     * Convenience method that automatically includes the bucket name\n     *\n     * @param indexName - Name of the index to delete\n     * @returns Promise with empty response on success or error\n     *\n     * @example\n     * ```typescript\n     * const bucket = client.bucket('embeddings-prod')\n     * await bucket.deleteIndex('old-index')\n     * ```\n     */\n    deleteIndex(indexName) {\n      const _super = Object.create(null, {\n        deleteIndex: {\n          get: () => super.deleteIndex\n        }\n      });\n      return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {\n        return _super.deleteIndex.call(this, this.vectorBucketName, indexName);\n      });\n    }\n    /**\n     * Access operations for a specific index within this bucket\n     * Returns a scoped client for vector data operations\n     *\n     * @param indexName - Name of the index\n     * @returns Index-scoped client with vector data operations\n     *\n     * @example\n     * ```typescript\n     * const index = client.bucket('embeddings-prod').index('documents-openai')\n     *\n     * // Insert vectors\n     * await index.putVectors({\n     *   vectors: [\n     *     { key: 'doc-1', data: { float32: [...] }, metadata: { title: 'Intro' } }\n     *   ]\n     * })\n     *\n     * // Query similar vectors\n     * const { data } = await index.queryVectors({\n     *   queryVector: { float32: [...] },\n     *   topK: 5\n     * })\n     * ```\n     */\n    index(indexName) {\n      return new VectorIndexScope(this.url, this.headers, this.vectorBucketName, indexName, this.fetch);\n    }\n  }\n  /**\n   * Scoped client for operations within a specific vector index\n   * Provides vector data operations (put, get, list, query, delete)\n   */\n  exports.VectorBucketScope = VectorBucketScope;\n  class VectorIndexScope extends _VectorDataApi.default {\n    constructor(url, headers, vectorBucketName, indexName, fetch) {\n      super(url, headers, fetch);\n      this.vectorBucketName = vectorBucketName;\n      this.indexName = indexName;\n    }\n    /**\n     * Inserts or updates vectors in this index\n     * Convenience method that automatically includes bucket and index names\n     *\n     * @param options - Vector insertion options (bucket and index names automatically set)\n     * @returns Promise with empty response on success or error\n     *\n     * @example\n     * ```typescript\n     * const index = client.bucket('embeddings-prod').index('documents-openai')\n     * await index.putVectors({\n     *   vectors: [\n     *     {\n     *       key: 'doc-1',\n     *       data: { float32: [0.1, 0.2, ...] },\n     *       metadata: { title: 'Introduction', page: 1 }\n     *     }\n     *   ]\n     * })\n     * ```\n     */\n    putVectors(options) {\n      const _super = Object.create(null, {\n        putVectors: {\n          get: () => super.putVectors\n        }\n      });\n      return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {\n        return _super.putVectors.call(this, Object.assign(Object.assign({}, options), {\n          vectorBucketName: this.vectorBucketName,\n          indexName: this.indexName\n        }));\n      });\n    }\n    /**\n     * Retrieves vectors by keys from this index\n     * Convenience method that automatically includes bucket and index names\n     *\n     * @param options - Vector retrieval options (bucket and index names automatically set)\n     * @returns Promise with array of vectors or error\n     *\n     * @example\n     * ```typescript\n     * const index = client.bucket('embeddings-prod').index('documents-openai')\n     * const { data } = await index.getVectors({\n     *   keys: ['doc-1', 'doc-2'],\n     *   returnMetadata: true\n     * })\n     * ```\n     */\n    getVectors(options) {\n      const _super = Object.create(null, {\n        getVectors: {\n          get: () => super.getVectors\n        }\n      });\n      return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {\n        return _super.getVectors.call(this, Object.assign(Object.assign({}, options), {\n          vectorBucketName: this.vectorBucketName,\n          indexName: this.indexName\n        }));\n      });\n    }\n    /**\n     * Lists vectors in this index with pagination\n     * Convenience method that automatically includes bucket and index names\n     *\n     * @param options - Listing options (bucket and index names automatically set)\n     * @returns Promise with array of vectors and pagination token\n     *\n     * @example\n     * ```typescript\n     * const index = client.bucket('embeddings-prod').index('documents-openai')\n     * const { data } = await index.listVectors({\n     *   maxResults: 500,\n     *   returnMetadata: true\n     * })\n     * ```\n     */\n    listVectors() {\n      const _super = Object.create(null, {\n        listVectors: {\n          get: () => super.listVectors\n        }\n      });\n      return (0, _tslib.__awaiter)(this, arguments, void 0, function* (options = {}) {\n        return _super.listVectors.call(this, Object.assign(Object.assign({}, options), {\n          vectorBucketName: this.vectorBucketName,\n          indexName: this.indexName\n        }));\n      });\n    }\n    /**\n     * Queries for similar vectors in this index\n     * Convenience method that automatically includes bucket and index names\n     *\n     * @param options - Query options (bucket and index names automatically set)\n     * @returns Promise with array of similar vectors ordered by distance\n     *\n     * @example\n     * ```typescript\n     * const index = client.bucket('embeddings-prod').index('documents-openai')\n     * const { data } = await index.queryVectors({\n     *   queryVector: { float32: [0.1, 0.2, ...] },\n     *   topK: 5,\n     *   filter: { category: 'technical' },\n     *   returnDistance: true,\n     *   returnMetadata: true\n     * })\n     * ```\n     */\n    queryVectors(options) {\n      const _super = Object.create(null, {\n        queryVectors: {\n          get: () => super.queryVectors\n        }\n      });\n      return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {\n        return _super.queryVectors.call(this, Object.assign(Object.assign({}, options), {\n          vectorBucketName: this.vectorBucketName,\n          indexName: this.indexName\n        }));\n      });\n    }\n    /**\n     * Deletes vectors by keys from this index\n     * Convenience method that automatically includes bucket and index names\n     *\n     * @param options - Deletion options (bucket and index names automatically set)\n     * @returns Promise with empty response on success or error\n     *\n     * @example\n     * ```typescript\n     * const index = client.bucket('embeddings-prod').index('documents-openai')\n     * await index.deleteVectors({\n     *   keys: ['doc-1', 'doc-2', 'doc-3']\n     * })\n     * ```\n     */\n    deleteVectors(options) {\n      const _super = Object.create(null, {\n        deleteVectors: {\n          get: () => super.deleteVectors\n        }\n      });\n      return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {\n        return _super.deleteVectors.call(this, Object.assign(Object.assign({}, options), {\n          vectorBucketName: this.vectorBucketName,\n          indexName: this.indexName\n        }));\n      });\n    }\n  }\n  exports.VectorIndexScope = VectorIndexScope;\n});","lineCount":406,"map":[[7,2,1,0],[7,6,1,0,"_tslib"],[7,12,1,0],[7,15,1,0,"require"],[7,22,1,0],[7,23,1,0,"_dependencyMap"],[7,37,1,0],[8,2,2,0],[8,6,2,0,"_VectorIndexApi"],[8,21,2,0],[8,24,2,0,"_interopRequireDefault"],[8,46,2,0],[8,47,2,0,"require"],[8,54,2,0],[8,55,2,0,"_dependencyMap"],[8,69,2,0],[9,2,3,0],[9,6,3,0,"_VectorDataApi"],[9,20,3,0],[9,23,3,0,"_interopRequireDefault"],[9,45,3,0],[9,46,3,0,"require"],[9,53,3,0],[9,54,3,0,"_dependencyMap"],[9,68,3,0],[10,2,4,0],[10,6,4,0,"_VectorBucketApi"],[10,22,4,0],[10,25,4,0,"_interopRequireDefault"],[10,47,4,0],[10,48,4,0,"require"],[10,55,4,0],[10,56,4,0,"_dependencyMap"],[10,70,4,0],[11,2,5,0],[12,0,6,0],[13,0,7,0],[14,0,8,0],[15,0,9,0],[16,0,10,0],[17,0,11,0],[18,0,12,0],[19,0,13,0],[20,0,14,0],[21,0,15,0],[22,0,16,0],[23,0,17,0],[24,0,18,0],[25,0,19,0],[26,0,20,0],[27,0,21,0],[28,0,22,0],[29,0,23,0],[30,0,24,0],[31,0,25,0],[32,0,26,0],[33,0,27,0],[34,0,28,0],[35,0,29,0],[36,0,30,0],[37,0,31,0],[38,0,32,0],[39,0,33,0],[40,0,34,0],[41,0,35,0],[42,0,36,0],[43,0,37,0],[44,0,38,0],[45,0,39,0],[46,0,40,0],[47,0,41,0],[48,0,42,0],[49,0,43,0],[50,0,44,0],[51,0,45,0],[52,0,46,0],[53,0,47,0],[54,0,48,0],[55,0,49,0],[56,0,50,0],[57,0,51,0],[58,0,52,0],[59,0,53,0],[60,0,54,0],[61,0,55,0],[62,0,56,0],[63,0,57,0],[64,0,58,0],[65,0,59,0],[66,2,60,7],[66,8,60,13,"StorageVectorsClient"],[66,28,60,33],[66,37,60,42,"VectorBucketApi"],[66,61,60,57],[66,62,60,58],[67,4,61,4,"constructor"],[67,15,61,15,"constructor"],[67,16,61,16,"url"],[67,19,61,19],[67,21,61,21,"options"],[67,28,61,28],[67,31,61,31],[67,32,61,32],[67,33,61,33],[67,35,61,35],[68,6,62,8],[68,11,62,13],[68,12,62,14,"url"],[68,15,62,17],[68,17,62,19,"options"],[68,24,62,26],[68,25,62,27,"headers"],[68,32,62,34],[68,36,62,38],[68,37,62,39],[68,38,62,40],[68,40,62,42,"options"],[68,47,62,49],[68,48,62,50,"fetch"],[68,53,62,55],[68,54,62,56],[69,4,63,4],[70,4,64,4],[71,0,65,0],[72,0,66,0],[73,0,67,0],[74,0,68,0],[75,0,69,0],[76,0,70,0],[77,0,71,0],[78,0,72,0],[79,0,73,0],[80,0,74,0],[81,0,75,0],[82,0,76,0],[83,0,77,0],[84,0,78,0],[85,0,79,0],[86,0,80,0],[87,0,81,0],[88,0,82,0],[89,0,83,0],[90,0,84,0],[91,0,85,0],[92,0,86,0],[93,4,87,4,"from"],[93,8,87,8,"from"],[93,9,87,9,"vectorBucketName"],[93,25,87,25],[93,27,87,27],[94,6,88,8],[94,13,88,15],[94,17,88,19,"VectorBucketScope"],[94,34,88,36],[94,35,88,37],[94,39,88,41],[94,40,88,42,"url"],[94,43,88,45],[94,45,88,47],[94,49,88,51],[94,50,88,52,"headers"],[94,57,88,59],[94,59,88,61,"vectorBucketName"],[94,75,88,77],[94,77,88,79],[94,81,88,83],[94,82,88,84,"fetch"],[94,87,88,89],[94,88,88,90],[95,4,89,4],[96,2,90,0],[97,2,91,0],[98,0,92,0],[99,0,93,0],[100,0,94,0],[101,2,91,0,"exports"],[101,9,91,0],[101,10,91,0,"StorageVectorsClient"],[101,30,91,0],[101,33,91,0,"StorageVectorsClient"],[101,53,91,0],[102,2,95,7],[102,8,95,13,"VectorBucketScope"],[102,25,95,30],[102,34,95,39,"VectorIndexApi"],[102,57,95,53],[102,58,95,54],[103,4,96,4,"constructor"],[103,15,96,15,"constructor"],[103,16,96,16,"url"],[103,19,96,19],[103,21,96,21,"headers"],[103,28,96,28],[103,30,96,30,"vectorBucketName"],[103,46,96,46],[103,48,96,48,"fetch"],[103,53,96,53],[103,55,96,55],[104,6,97,8],[104,11,97,13],[104,12,97,14,"url"],[104,15,97,17],[104,17,97,19,"headers"],[104,24,97,26],[104,26,97,28,"fetch"],[104,31,97,33],[104,32,97,34],[105,6,98,8],[105,10,98,12],[105,11,98,13,"vectorBucketName"],[105,27,98,29],[105,30,98,32,"vectorBucketName"],[105,46,98,48],[106,4,99,4],[107,4,100,4],[108,0,101,0],[109,0,102,0],[110,0,103,0],[111,0,104,0],[112,0,105,0],[113,0,106,0],[114,0,107,0],[115,0,108,0],[116,0,109,0],[117,0,110,0],[118,0,111,0],[119,0,112,0],[120,0,113,0],[121,0,114,0],[122,0,115,0],[123,0,116,0],[124,0,117,0],[125,0,118,0],[126,0,119,0],[127,0,120,0],[128,4,121,4,"createIndex"],[128,15,121,15,"createIndex"],[128,16,121,16,"options"],[128,23,121,23],[128,25,121,25],[129,6,122,8],[129,12,122,14,"_super"],[129,18,122,20],[129,21,122,23,"Object"],[129,27,122,29],[129,28,122,30,"create"],[129,34,122,36],[129,35,122,37],[129,39,122,41],[129,41,122,43],[130,8,123,12,"createIndex"],[130,19,123,23],[130,21,123,25],[131,10,123,27,"get"],[131,13,123,30],[131,15,123,32,"get"],[131,16,123,32],[131,21,123,38],[131,26,123,43],[131,27,123,44,"createIndex"],[132,8,123,56],[133,6,124,8],[133,7,124,9],[133,8,124,10],[134,6,125,8],[134,13,125,15],[134,17,125,15,"__awaiter"],[134,33,125,24],[134,35,125,25],[134,39,125,29],[134,41,125,31],[134,46,125,36],[134,47,125,37],[134,49,125,39],[134,54,125,44],[134,55,125,45],[134,57,125,47],[134,70,125,60],[135,8,126,12],[135,15,126,19,"_super"],[135,21,126,25],[135,22,126,26,"createIndex"],[135,33,126,37],[135,34,126,38,"call"],[135,38,126,42],[135,39,126,43],[135,43,126,47],[135,45,126,49,"Object"],[135,51,126,55],[135,52,126,56,"assign"],[135,58,126,62],[135,59,126,63,"Object"],[135,65,126,69],[135,66,126,70,"assign"],[135,72,126,76],[135,73,126,77],[135,74,126,78],[135,75,126,79],[135,77,126,81,"options"],[135,84,126,88],[135,85,126,89],[135,87,126,91],[136,10,126,93,"vectorBucketName"],[136,26,126,109],[136,28,126,111],[136,32,126,115],[136,33,126,116,"vectorBucketName"],[137,8,126,133],[137,9,126,134],[137,10,126,135],[137,11,126,136],[138,6,127,8],[138,7,127,9],[138,8,127,10],[139,4,128,4],[140,4,129,4],[141,0,130,0],[142,0,131,0],[143,0,132,0],[144,0,133,0],[145,0,134,0],[146,0,135,0],[147,0,136,0],[148,0,137,0],[149,0,138,0],[150,0,139,0],[151,0,140,0],[152,0,141,0],[153,4,142,4,"listIndexes"],[153,15,142,15,"listIndexes"],[153,16,142,15],[153,18,142,18],[154,6,143,8],[154,12,143,14,"_super"],[154,18,143,20],[154,21,143,23,"Object"],[154,27,143,29],[154,28,143,30,"create"],[154,34,143,36],[154,35,143,37],[154,39,143,41],[154,41,143,43],[155,8,144,12,"listIndexes"],[155,19,144,23],[155,21,144,25],[156,10,144,27,"get"],[156,13,144,30],[156,15,144,32,"get"],[156,16,144,32],[156,21,144,38],[156,26,144,43],[156,27,144,44,"listIndexes"],[157,8,144,56],[158,6,145,8],[158,7,145,9],[158,8,145,10],[159,6,146,8],[159,13,146,15],[159,17,146,15,"__awaiter"],[159,33,146,24],[159,35,146,25],[159,39,146,29],[159,41,146,31,"arguments"],[159,50,146,40],[159,52,146,42],[159,57,146,47],[159,58,146,48],[159,60,146,50],[159,71,146,61,"options"],[159,78,146,68],[159,81,146,71],[159,82,146,72],[159,83,146,73],[159,85,146,75],[160,8,147,12],[160,15,147,19,"_super"],[160,21,147,25],[160,22,147,26,"listIndexes"],[160,33,147,37],[160,34,147,38,"call"],[160,38,147,42],[160,39,147,43],[160,43,147,47],[160,45,147,49,"Object"],[160,51,147,55],[160,52,147,56,"assign"],[160,58,147,62],[160,59,147,63,"Object"],[160,65,147,69],[160,66,147,70,"assign"],[160,72,147,76],[160,73,147,77],[160,74,147,78],[160,75,147,79],[160,77,147,81,"options"],[160,84,147,88],[160,85,147,89],[160,87,147,91],[161,10,147,93,"vectorBucketName"],[161,26,147,109],[161,28,147,111],[161,32,147,115],[161,33,147,116,"vectorBucketName"],[162,8,147,133],[162,9,147,134],[162,10,147,135],[162,11,147,136],[163,6,148,8],[163,7,148,9],[163,8,148,10],[164,4,149,4],[165,4,150,4],[166,0,151,0],[167,0,152,0],[168,0,153,0],[169,0,154,0],[170,0,155,0],[171,0,156,0],[172,0,157,0],[173,0,158,0],[174,0,159,0],[175,0,160,0],[176,0,161,0],[177,0,162,0],[178,0,163,0],[179,4,164,4,"getIndex"],[179,12,164,12,"getIndex"],[179,13,164,13,"indexName"],[179,22,164,22],[179,24,164,24],[180,6,165,8],[180,12,165,14,"_super"],[180,18,165,20],[180,21,165,23,"Object"],[180,27,165,29],[180,28,165,30,"create"],[180,34,165,36],[180,35,165,37],[180,39,165,41],[180,41,165,43],[181,8,166,12,"getIndex"],[181,16,166,20],[181,18,166,22],[182,10,166,24,"get"],[182,13,166,27],[182,15,166,29,"get"],[182,16,166,29],[182,21,166,35],[182,26,166,40],[182,27,166,41,"getIndex"],[183,8,166,50],[184,6,167,8],[184,7,167,9],[184,8,167,10],[185,6,168,8],[185,13,168,15],[185,17,168,15,"__awaiter"],[185,33,168,24],[185,35,168,25],[185,39,168,29],[185,41,168,31],[185,46,168,36],[185,47,168,37],[185,49,168,39],[185,54,168,44],[185,55,168,45],[185,57,168,47],[185,70,168,60],[186,8,169,12],[186,15,169,19,"_super"],[186,21,169,25],[186,22,169,26,"getIndex"],[186,30,169,34],[186,31,169,35,"call"],[186,35,169,39],[186,36,169,40],[186,40,169,44],[186,42,169,46],[186,46,169,50],[186,47,169,51,"vectorBucketName"],[186,63,169,67],[186,65,169,69,"indexName"],[186,74,169,78],[186,75,169,79],[187,6,170,8],[187,7,170,9],[187,8,170,10],[188,4,171,4],[189,4,172,4],[190,0,173,0],[191,0,174,0],[192,0,175,0],[193,0,176,0],[194,0,177,0],[195,0,178,0],[196,0,179,0],[197,0,180,0],[198,0,181,0],[199,0,182,0],[200,0,183,0],[201,0,184,0],[202,4,185,4,"deleteIndex"],[202,15,185,15,"deleteIndex"],[202,16,185,16,"indexName"],[202,25,185,25],[202,27,185,27],[203,6,186,8],[203,12,186,14,"_super"],[203,18,186,20],[203,21,186,23,"Object"],[203,27,186,29],[203,28,186,30,"create"],[203,34,186,36],[203,35,186,37],[203,39,186,41],[203,41,186,43],[204,8,187,12,"deleteIndex"],[204,19,187,23],[204,21,187,25],[205,10,187,27,"get"],[205,13,187,30],[205,15,187,32,"get"],[205,16,187,32],[205,21,187,38],[205,26,187,43],[205,27,187,44,"deleteIndex"],[206,8,187,56],[207,6,188,8],[207,7,188,9],[207,8,188,10],[208,6,189,8],[208,13,189,15],[208,17,189,15,"__awaiter"],[208,33,189,24],[208,35,189,25],[208,39,189,29],[208,41,189,31],[208,46,189,36],[208,47,189,37],[208,49,189,39],[208,54,189,44],[208,55,189,45],[208,57,189,47],[208,70,189,60],[209,8,190,12],[209,15,190,19,"_super"],[209,21,190,25],[209,22,190,26,"deleteIndex"],[209,33,190,37],[209,34,190,38,"call"],[209,38,190,42],[209,39,190,43],[209,43,190,47],[209,45,190,49],[209,49,190,53],[209,50,190,54,"vectorBucketName"],[209,66,190,70],[209,68,190,72,"indexName"],[209,77,190,81],[209,78,190,82],[210,6,191,8],[210,7,191,9],[210,8,191,10],[211,4,192,4],[212,4,193,4],[213,0,194,0],[214,0,195,0],[215,0,196,0],[216,0,197,0],[217,0,198,0],[218,0,199,0],[219,0,200,0],[220,0,201,0],[221,0,202,0],[222,0,203,0],[223,0,204,0],[224,0,205,0],[225,0,206,0],[226,0,207,0],[227,0,208,0],[228,0,209,0],[229,0,210,0],[230,0,211,0],[231,0,212,0],[232,0,213,0],[233,0,214,0],[234,0,215,0],[235,0,216,0],[236,0,217,0],[237,4,218,4,"index"],[237,9,218,9,"index"],[237,10,218,10,"indexName"],[237,19,218,19],[237,21,218,21],[238,6,219,8],[238,13,219,15],[238,17,219,19,"VectorIndexScope"],[238,33,219,35],[238,34,219,36],[238,38,219,40],[238,39,219,41,"url"],[238,42,219,44],[238,44,219,46],[238,48,219,50],[238,49,219,51,"headers"],[238,56,219,58],[238,58,219,60],[238,62,219,64],[238,63,219,65,"vectorBucketName"],[238,79,219,81],[238,81,219,83,"indexName"],[238,90,219,92],[238,92,219,94],[238,96,219,98],[238,97,219,99,"fetch"],[238,102,219,104],[238,103,219,105],[239,4,220,4],[240,2,221,0],[241,2,222,0],[242,0,223,0],[243,0,224,0],[244,0,225,0],[245,2,222,0,"exports"],[245,9,222,0],[245,10,222,0,"VectorBucketScope"],[245,27,222,0],[245,30,222,0,"VectorBucketScope"],[245,47,222,0],[246,2,226,7],[246,8,226,13,"VectorIndexScope"],[246,24,226,29],[246,33,226,38,"VectorDataApi"],[246,55,226,51],[246,56,226,52],[247,4,227,4,"constructor"],[247,15,227,15,"constructor"],[247,16,227,16,"url"],[247,19,227,19],[247,21,227,21,"headers"],[247,28,227,28],[247,30,227,30,"vectorBucketName"],[247,46,227,46],[247,48,227,48,"indexName"],[247,57,227,57],[247,59,227,59,"fetch"],[247,64,227,64],[247,66,227,66],[248,6,228,8],[248,11,228,13],[248,12,228,14,"url"],[248,15,228,17],[248,17,228,19,"headers"],[248,24,228,26],[248,26,228,28,"fetch"],[248,31,228,33],[248,32,228,34],[249,6,229,8],[249,10,229,12],[249,11,229,13,"vectorBucketName"],[249,27,229,29],[249,30,229,32,"vectorBucketName"],[249,46,229,48],[250,6,230,8],[250,10,230,12],[250,11,230,13,"indexName"],[250,20,230,22],[250,23,230,25,"indexName"],[250,32,230,34],[251,4,231,4],[252,4,232,4],[253,0,233,0],[254,0,234,0],[255,0,235,0],[256,0,236,0],[257,0,237,0],[258,0,238,0],[259,0,239,0],[260,0,240,0],[261,0,241,0],[262,0,242,0],[263,0,243,0],[264,0,244,0],[265,0,245,0],[266,0,246,0],[267,0,247,0],[268,0,248,0],[269,0,249,0],[270,0,250,0],[271,0,251,0],[272,0,252,0],[273,4,253,4,"putVectors"],[273,14,253,14,"putVectors"],[273,15,253,15,"options"],[273,22,253,22],[273,24,253,24],[274,6,254,8],[274,12,254,14,"_super"],[274,18,254,20],[274,21,254,23,"Object"],[274,27,254,29],[274,28,254,30,"create"],[274,34,254,36],[274,35,254,37],[274,39,254,41],[274,41,254,43],[275,8,255,12,"putVectors"],[275,18,255,22],[275,20,255,24],[276,10,255,26,"get"],[276,13,255,29],[276,15,255,31,"get"],[276,16,255,31],[276,21,255,37],[276,26,255,42],[276,27,255,43,"putVectors"],[277,8,255,54],[278,6,256,8],[278,7,256,9],[278,8,256,10],[279,6,257,8],[279,13,257,15],[279,17,257,15,"__awaiter"],[279,33,257,24],[279,35,257,25],[279,39,257,29],[279,41,257,31],[279,46,257,36],[279,47,257,37],[279,49,257,39],[279,54,257,44],[279,55,257,45],[279,57,257,47],[279,70,257,60],[280,8,258,12],[280,15,258,19,"_super"],[280,21,258,25],[280,22,258,26,"putVectors"],[280,32,258,36],[280,33,258,37,"call"],[280,37,258,41],[280,38,258,42],[280,42,258,46],[280,44,258,48,"Object"],[280,50,258,54],[280,51,258,55,"assign"],[280,57,258,61],[280,58,258,62,"Object"],[280,64,258,68],[280,65,258,69,"assign"],[280,71,258,75],[280,72,258,76],[280,73,258,77],[280,74,258,78],[280,76,258,80,"options"],[280,83,258,87],[280,84,258,88],[280,86,258,90],[281,10,258,92,"vectorBucketName"],[281,26,258,108],[281,28,258,110],[281,32,258,114],[281,33,258,115,"vectorBucketName"],[281,49,258,131],[282,10,258,133,"indexName"],[282,19,258,142],[282,21,258,144],[282,25,258,148],[282,26,258,149,"indexName"],[283,8,258,159],[283,9,258,160],[283,10,258,161],[283,11,258,162],[284,6,259,8],[284,7,259,9],[284,8,259,10],[285,4,260,4],[286,4,261,4],[287,0,262,0],[288,0,263,0],[289,0,264,0],[290,0,265,0],[291,0,266,0],[292,0,267,0],[293,0,268,0],[294,0,269,0],[295,0,270,0],[296,0,271,0],[297,0,272,0],[298,0,273,0],[299,0,274,0],[300,0,275,0],[301,0,276,0],[302,4,277,4,"getVectors"],[302,14,277,14,"getVectors"],[302,15,277,15,"options"],[302,22,277,22],[302,24,277,24],[303,6,278,8],[303,12,278,14,"_super"],[303,18,278,20],[303,21,278,23,"Object"],[303,27,278,29],[303,28,278,30,"create"],[303,34,278,36],[303,35,278,37],[303,39,278,41],[303,41,278,43],[304,8,279,12,"getVectors"],[304,18,279,22],[304,20,279,24],[305,10,279,26,"get"],[305,13,279,29],[305,15,279,31,"get"],[305,16,279,31],[305,21,279,37],[305,26,279,42],[305,27,279,43,"getVectors"],[306,8,279,54],[307,6,280,8],[307,7,280,9],[307,8,280,10],[308,6,281,8],[308,13,281,15],[308,17,281,15,"__awaiter"],[308,33,281,24],[308,35,281,25],[308,39,281,29],[308,41,281,31],[308,46,281,36],[308,47,281,37],[308,49,281,39],[308,54,281,44],[308,55,281,45],[308,57,281,47],[308,70,281,60],[309,8,282,12],[309,15,282,19,"_super"],[309,21,282,25],[309,22,282,26,"getVectors"],[309,32,282,36],[309,33,282,37,"call"],[309,37,282,41],[309,38,282,42],[309,42,282,46],[309,44,282,48,"Object"],[309,50,282,54],[309,51,282,55,"assign"],[309,57,282,61],[309,58,282,62,"Object"],[309,64,282,68],[309,65,282,69,"assign"],[309,71,282,75],[309,72,282,76],[309,73,282,77],[309,74,282,78],[309,76,282,80,"options"],[309,83,282,87],[309,84,282,88],[309,86,282,90],[310,10,282,92,"vectorBucketName"],[310,26,282,108],[310,28,282,110],[310,32,282,114],[310,33,282,115,"vectorBucketName"],[310,49,282,131],[311,10,282,133,"indexName"],[311,19,282,142],[311,21,282,144],[311,25,282,148],[311,26,282,149,"indexName"],[312,8,282,159],[312,9,282,160],[312,10,282,161],[312,11,282,162],[313,6,283,8],[313,7,283,9],[313,8,283,10],[314,4,284,4],[315,4,285,4],[316,0,286,0],[317,0,287,0],[318,0,288,0],[319,0,289,0],[320,0,290,0],[321,0,291,0],[322,0,292,0],[323,0,293,0],[324,0,294,0],[325,0,295,0],[326,0,296,0],[327,0,297,0],[328,0,298,0],[329,0,299,0],[330,0,300,0],[331,4,301,4,"listVectors"],[331,15,301,15,"listVectors"],[331,16,301,15],[331,18,301,18],[332,6,302,8],[332,12,302,14,"_super"],[332,18,302,20],[332,21,302,23,"Object"],[332,27,302,29],[332,28,302,30,"create"],[332,34,302,36],[332,35,302,37],[332,39,302,41],[332,41,302,43],[333,8,303,12,"listVectors"],[333,19,303,23],[333,21,303,25],[334,10,303,27,"get"],[334,13,303,30],[334,15,303,32,"get"],[334,16,303,32],[334,21,303,38],[334,26,303,43],[334,27,303,44,"listVectors"],[335,8,303,56],[336,6,304,8],[336,7,304,9],[336,8,304,10],[337,6,305,8],[337,13,305,15],[337,17,305,15,"__awaiter"],[337,33,305,24],[337,35,305,25],[337,39,305,29],[337,41,305,31,"arguments"],[337,50,305,40],[337,52,305,42],[337,57,305,47],[337,58,305,48],[337,60,305,50],[337,71,305,61,"options"],[337,78,305,68],[337,81,305,71],[337,82,305,72],[337,83,305,73],[337,85,305,75],[338,8,306,12],[338,15,306,19,"_super"],[338,21,306,25],[338,22,306,26,"listVectors"],[338,33,306,37],[338,34,306,38,"call"],[338,38,306,42],[338,39,306,43],[338,43,306,47],[338,45,306,49,"Object"],[338,51,306,55],[338,52,306,56,"assign"],[338,58,306,62],[338,59,306,63,"Object"],[338,65,306,69],[338,66,306,70,"assign"],[338,72,306,76],[338,73,306,77],[338,74,306,78],[338,75,306,79],[338,77,306,81,"options"],[338,84,306,88],[338,85,306,89],[338,87,306,91],[339,10,306,93,"vectorBucketName"],[339,26,306,109],[339,28,306,111],[339,32,306,115],[339,33,306,116,"vectorBucketName"],[339,49,306,132],[340,10,306,134,"indexName"],[340,19,306,143],[340,21,306,145],[340,25,306,149],[340,26,306,150,"indexName"],[341,8,306,160],[341,9,306,161],[341,10,306,162],[341,11,306,163],[342,6,307,8],[342,7,307,9],[342,8,307,10],[343,4,308,4],[344,4,309,4],[345,0,310,0],[346,0,311,0],[347,0,312,0],[348,0,313,0],[349,0,314,0],[350,0,315,0],[351,0,316,0],[352,0,317,0],[353,0,318,0],[354,0,319,0],[355,0,320,0],[356,0,321,0],[357,0,322,0],[358,0,323,0],[359,0,324,0],[360,0,325,0],[361,0,326,0],[362,0,327,0],[363,4,328,4,"queryVectors"],[363,16,328,16,"queryVectors"],[363,17,328,17,"options"],[363,24,328,24],[363,26,328,26],[364,6,329,8],[364,12,329,14,"_super"],[364,18,329,20],[364,21,329,23,"Object"],[364,27,329,29],[364,28,329,30,"create"],[364,34,329,36],[364,35,329,37],[364,39,329,41],[364,41,329,43],[365,8,330,12,"queryVectors"],[365,20,330,24],[365,22,330,26],[366,10,330,28,"get"],[366,13,330,31],[366,15,330,33,"get"],[366,16,330,33],[366,21,330,39],[366,26,330,44],[366,27,330,45,"queryVectors"],[367,8,330,58],[368,6,331,8],[368,7,331,9],[368,8,331,10],[369,6,332,8],[369,13,332,15],[369,17,332,15,"__awaiter"],[369,33,332,24],[369,35,332,25],[369,39,332,29],[369,41,332,31],[369,46,332,36],[369,47,332,37],[369,49,332,39],[369,54,332,44],[369,55,332,45],[369,57,332,47],[369,70,332,60],[370,8,333,12],[370,15,333,19,"_super"],[370,21,333,25],[370,22,333,26,"queryVectors"],[370,34,333,38],[370,35,333,39,"call"],[370,39,333,43],[370,40,333,44],[370,44,333,48],[370,46,333,50,"Object"],[370,52,333,56],[370,53,333,57,"assign"],[370,59,333,63],[370,60,333,64,"Object"],[370,66,333,70],[370,67,333,71,"assign"],[370,73,333,77],[370,74,333,78],[370,75,333,79],[370,76,333,80],[370,78,333,82,"options"],[370,85,333,89],[370,86,333,90],[370,88,333,92],[371,10,333,94,"vectorBucketName"],[371,26,333,110],[371,28,333,112],[371,32,333,116],[371,33,333,117,"vectorBucketName"],[371,49,333,133],[372,10,333,135,"indexName"],[372,19,333,144],[372,21,333,146],[372,25,333,150],[372,26,333,151,"indexName"],[373,8,333,161],[373,9,333,162],[373,10,333,163],[373,11,333,164],[374,6,334,8],[374,7,334,9],[374,8,334,10],[375,4,335,4],[376,4,336,4],[377,0,337,0],[378,0,338,0],[379,0,339,0],[380,0,340,0],[381,0,341,0],[382,0,342,0],[383,0,343,0],[384,0,344,0],[385,0,345,0],[386,0,346,0],[387,0,347,0],[388,0,348,0],[389,0,349,0],[390,0,350,0],[391,4,351,4,"deleteVectors"],[391,17,351,17,"deleteVectors"],[391,18,351,18,"options"],[391,25,351,25],[391,27,351,27],[392,6,352,8],[392,12,352,14,"_super"],[392,18,352,20],[392,21,352,23,"Object"],[392,27,352,29],[392,28,352,30,"create"],[392,34,352,36],[392,35,352,37],[392,39,352,41],[392,41,352,43],[393,8,353,12,"deleteVectors"],[393,21,353,25],[393,23,353,27],[394,10,353,29,"get"],[394,13,353,32],[394,15,353,34,"get"],[394,16,353,34],[394,21,353,40],[394,26,353,45],[394,27,353,46,"deleteVectors"],[395,8,353,60],[396,6,354,8],[396,7,354,9],[396,8,354,10],[397,6,355,8],[397,13,355,15],[397,17,355,15,"__awaiter"],[397,33,355,24],[397,35,355,25],[397,39,355,29],[397,41,355,31],[397,46,355,36],[397,47,355,37],[397,49,355,39],[397,54,355,44],[397,55,355,45],[397,57,355,47],[397,70,355,60],[398,8,356,12],[398,15,356,19,"_super"],[398,21,356,25],[398,22,356,26,"deleteVectors"],[398,35,356,39],[398,36,356,40,"call"],[398,40,356,44],[398,41,356,45],[398,45,356,49],[398,47,356,51,"Object"],[398,53,356,57],[398,54,356,58,"assign"],[398,60,356,64],[398,61,356,65,"Object"],[398,67,356,71],[398,68,356,72,"assign"],[398,74,356,78],[398,75,356,79],[398,76,356,80],[398,77,356,81],[398,79,356,83,"options"],[398,86,356,90],[398,87,356,91],[398,89,356,93],[399,10,356,95,"vectorBucketName"],[399,26,356,111],[399,28,356,113],[399,32,356,117],[399,33,356,118,"vectorBucketName"],[399,49,356,134],[400,10,356,136,"indexName"],[400,19,356,145],[400,21,356,147],[400,25,356,151],[400,26,356,152,"indexName"],[401,8,356,162],[401,9,356,163],[401,10,356,164],[401,11,356,165],[402,6,357,8],[402,7,357,9],[402,8,357,10],[403,4,358,4],[404,2,359,0],[405,2,359,1,"exports"],[405,9,359,1],[405,10,359,1,"VectorIndexScope"],[405,26,359,1],[405,29,359,1,"VectorIndexScope"],[405,45,359,1],[406,0,359,1],[406,3]],"functionMap":{"names":["<global>","StorageVectorsClient","constructor","from","VectorBucketScope","VectorBucketScope#constructor","VectorBucketScope#createIndex","Object.create$argument_1.createIndex.get","__awaiter$argument_3","VectorBucketScope#listIndexes","Object.create$argument_1.listIndexes.get","VectorBucketScope#getIndex","Object.create$argument_1.getIndex.get","VectorBucketScope#deleteIndex","Object.create$argument_1.deleteIndex.get","VectorBucketScope#index","VectorIndexScope","VectorIndexScope#constructor","VectorIndexScope#putVectors","Object.create$argument_1.putVectors.get","VectorIndexScope#getVectors","Object.create$argument_1.getVectors.get","VectorIndexScope#listVectors","Object.create$argument_1.listVectors.get","VectorIndexScope#queryVectors","Object.create$argument_1.queryVectors.get","VectorIndexScope#deleteVectors","Object.create$argument_1.deleteVectors.get"],"mappings":"AAA;OC2D;ICC;KDE;IEwB;KFE;CDC;OIK;ICC;KDG;IEsB;gCCE,uBD;+CEE;SFE;KFC;IKc;gCCE,uBD;kDDE;SCE;KLC;IOe;6BCE,oBD;+CHE;SGE;KPC;ISc;gCCE,uBD;+CLE;SKE;KTC;IW0B;KXE;CJC;OgBK;ICC;KDI;IEsB;+BCE,sBD;+CVE;SUE;KFC;IIiB;+BCE,sBD;+CZE;SYE;KJC;IMiB;gCCE,uBD;kDdE;ScE;KNC;IQoB;iCCE,wBD;+ChBE;SgBE;KRC;IUgB;kCCE,yBD;+ClBE;SkBE;KVC;ChBC"}},"type":"js/module"}]}