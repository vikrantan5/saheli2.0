{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"./lib/websocket-factory","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":55,"index":55}}],"key":"hLh8BE6O0y4t1j6IitD7s/VHa1Y=","exportNames":["*"]}},{"name":"./lib/constants","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":56},"end":{"line":2,"column":151,"index":207}}],"key":"heoF0ph3MRKcRke4Rxium863E4Y=","exportNames":["*"]}},{"name":"./lib/serializer","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":208},"end":{"line":3,"column":42,"index":250}}],"key":"hxcMt5ZBdMARPzV4VHW/VneJ+L8=","exportNames":["*"]}},{"name":"./lib/timer","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":251},"end":{"line":4,"column":32,"index":283}}],"key":"435u4om/oqs8CqOGWsJ0fqMEdn0=","exportNames":["*"]}},{"name":"./lib/transformers","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":284},"end":{"line":5,"column":53,"index":337}}],"key":"TR0X6tpqyHHq48C0oqR9cUPe83w=","exportNames":["*"]}},{"name":"./RealtimeChannel","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":338},"end":{"line":6,"column":48,"index":386}}],"key":"oYwJNm/lQ0jE2IWCp+KmycNymLs=","exportNames":["*"]}},{"name":"@supabase/node-fetch","data":{"asyncType":"async","isESMImport":true,"locs":[{"start":{"line":86,"column":38,"index":4218},"end":{"line":86,"column":68,"index":4248}}],"key":"7Fx+cnrTZuhuI1XE65tJyFLDBO8=","exportNames":["*"]}},{"name":"D:\\saheli\\node_modules\\@expo\\metro-config\\build\\async-require.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":86,"column":38,"index":4218},"end":{"line":87,"column":25,"index":4274}}],"key":"ceUA4bex0gIPOoI+n74Lh3S2Bb8=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  var _websocketFactory = _interopRequireDefault(require(_dependencyMap[1], \"./lib/websocket-factory\"));\n  var _constants = require(_dependencyMap[2], \"./lib/constants\");\n  var _serializer = _interopRequireDefault(require(_dependencyMap[3], \"./lib/serializer\"));\n  var _timer = _interopRequireDefault(require(_dependencyMap[4], \"./lib/timer\"));\n  var _transformers = require(_dependencyMap[5], \"./lib/transformers\");\n  var _RealtimeChannel = _interopRequireDefault(require(_dependencyMap[6], \"./RealtimeChannel\"));\n  const noop = () => {};\n  // Connection-related constants\n  const CONNECTION_TIMEOUTS = {\n    HEARTBEAT_INTERVAL: 25000,\n    RECONNECT_DELAY: 10,\n    HEARTBEAT_TIMEOUT_FALLBACK: 100\n  };\n  const RECONNECT_INTERVALS = [1000, 2000, 5000, 10000];\n  const DEFAULT_RECONNECT_FALLBACK = 10000;\n  const WORKER_SCRIPT = `\n  addEventListener(\"message\", (e) => {\n    if (e.data.event === \"start\") {\n      setInterval(() => postMessage({ event: \"keepAlive\" }), e.data.interval);\n    }\n  });`;\n  class RealtimeClient {\n    /**\n     * Initializes the Socket.\n     *\n     * @param endPoint The string WebSocket endpoint, ie, \"ws://example.com/socket\", \"wss://example.com\", \"/socket\" (inherited host & protocol)\n     * @param httpEndpoint The string HTTP endpoint, ie, \"https://example.com\", \"/\" (inherited host & protocol)\n     * @param options.transport The Websocket Transport, for example WebSocket. This can be a custom implementation\n     * @param options.timeout The default timeout in milliseconds to trigger push timeouts.\n     * @param options.params The optional params to pass when connecting.\n     * @param options.headers Deprecated: headers cannot be set on websocket connections and this option will be removed in the future.\n     * @param options.heartbeatIntervalMs The millisec interval to send a heartbeat message.\n     * @param options.heartbeatCallback The optional function to handle heartbeat status.\n     * @param options.logger The optional function for specialized logging, ie: logger: (kind, msg, data) => { console.log(`${kind}: ${msg}`, data) }\n     * @param options.logLevel Sets the log level for Realtime\n     * @param options.encode The function to encode outgoing messages. Defaults to JSON: (payload, callback) => callback(JSON.stringify(payload))\n     * @param options.decode The function to decode incoming messages. Defaults to Serializer's decode.\n     * @param options.reconnectAfterMs he optional function that returns the millsec reconnect interval. Defaults to stepped backoff off.\n     * @param options.worker Use Web Worker to set a side flow. Defaults to false.\n     * @param options.workerUrl The URL of the worker script. Defaults to https://realtime.supabase.com/worker.js that includes a heartbeat event call to keep the connection alive.\n     */\n    constructor(endPoint, options) {\n      var _a;\n      this.accessTokenValue = null;\n      this.apiKey = null;\n      this.channels = new Array();\n      this.endPoint = '';\n      this.httpEndpoint = '';\n      /** @deprecated headers cannot be set on websocket connections */\n      this.headers = {};\n      this.params = {};\n      this.timeout = _constants.DEFAULT_TIMEOUT;\n      this.transport = null;\n      this.heartbeatIntervalMs = CONNECTION_TIMEOUTS.HEARTBEAT_INTERVAL;\n      this.heartbeatTimer = undefined;\n      this.pendingHeartbeatRef = null;\n      this.heartbeatCallback = noop;\n      this.ref = 0;\n      this.reconnectTimer = null;\n      this.logger = noop;\n      this.conn = null;\n      this.sendBuffer = [];\n      this.serializer = new _serializer.default();\n      this.stateChangeCallbacks = {\n        open: [],\n        close: [],\n        error: [],\n        message: []\n      };\n      this.accessToken = null;\n      this._connectionState = 'disconnected';\n      this._wasManualDisconnect = false;\n      this._authPromise = null;\n      /**\n       * Use either custom fetch, if provided, or default fetch to make HTTP requests\n       *\n       * @internal\n       */\n      this._resolveFetch = customFetch => {\n        let _fetch;\n        if (customFetch) {\n          _fetch = customFetch;\n        } else if (typeof fetch === 'undefined') {\n          // Node.js environment without native fetch\n          _fetch = (...args) => require(_dependencyMap[8], \"D:\\\\saheli\\\\node_modules\\\\@expo\\\\metro-config\\\\build\\\\async-require.js\")(_dependencyMap[7], _dependencyMap.paths, \"@supabase/node-fetch\").then(({\n            default: fetch\n          }) => fetch(...args)).catch(error => {\n            throw new Error(`Failed to load @supabase/node-fetch: ${error.message}. ` + `This is required for HTTP requests in Node.js environments without native fetch.`);\n          });\n        } else {\n          _fetch = fetch;\n        }\n        return (...args) => _fetch(...args);\n      };\n      // Validate required parameters\n      if (!((_a = options === null || options === void 0 ? void 0 : options.params) === null || _a === void 0 ? void 0 : _a.apikey)) {\n        throw new Error('API key is required to connect to Realtime');\n      }\n      this.apiKey = options.params.apikey;\n      // Initialize endpoint URLs\n      this.endPoint = `${endPoint}/${_constants.TRANSPORTS.websocket}`;\n      this.httpEndpoint = (0, _transformers.httpEndpointURL)(endPoint);\n      this._initializeOptions(options);\n      this._setupReconnectionTimer();\n      this.fetch = this._resolveFetch(options === null || options === void 0 ? void 0 : options.fetch);\n    }\n    /**\n     * Connects the socket, unless already connected.\n     */\n    connect() {\n      // Skip if already connecting, disconnecting, or connected\n      if (this.isConnecting() || this.isDisconnecting() || this.conn !== null && this.isConnected()) {\n        return;\n      }\n      this._setConnectionState('connecting');\n      this._setAuthSafely('connect');\n      // Establish WebSocket connection\n      if (this.transport) {\n        // Use custom transport if provided\n        this.conn = new this.transport(this.endpointURL());\n      } else {\n        // Try to use native WebSocket\n        try {\n          this.conn = _websocketFactory.default.createWebSocket(this.endpointURL());\n        } catch (error) {\n          this._setConnectionState('disconnected');\n          const errorMessage = error.message;\n          // Provide helpful error message based on environment\n          if (errorMessage.includes('Node.js')) {\n            throw new Error(`${errorMessage}\\n\\n` + 'To use Realtime in Node.js, you need to provide a WebSocket implementation:\\n\\n' + 'Option 1: Use Node.js 22+ which has native WebSocket support\\n' + 'Option 2: Install and provide the \"ws\" package:\\n\\n' + '  npm install ws\\n\\n' + '  import ws from \"ws\"\\n' + '  const client = new RealtimeClient(url, {\\n' + '    ...options,\\n' + '    transport: ws\\n' + '  })');\n          }\n          throw new Error(`WebSocket not available: ${errorMessage}`);\n        }\n      }\n      this._setupConnectionHandlers();\n    }\n    /**\n     * Returns the URL of the websocket.\n     * @returns string The URL of the websocket.\n     */\n    endpointURL() {\n      return this._appendParams(this.endPoint, Object.assign({}, this.params, {\n        vsn: _constants.VSN\n      }));\n    }\n    /**\n     * Disconnects the socket.\n     *\n     * @param code A numeric status code to send on disconnect.\n     * @param reason A custom reason for the disconnect.\n     */\n    disconnect(code, reason) {\n      if (this.isDisconnecting()) {\n        return;\n      }\n      this._setConnectionState('disconnecting', true);\n      if (this.conn) {\n        // Setup fallback timer to prevent hanging in disconnecting state\n        const fallbackTimer = setTimeout(() => {\n          this._setConnectionState('disconnected');\n        }, 100);\n        this.conn.onclose = () => {\n          clearTimeout(fallbackTimer);\n          this._setConnectionState('disconnected');\n        };\n        // Close the WebSocket connection\n        if (code) {\n          this.conn.close(code, reason !== null && reason !== void 0 ? reason : '');\n        } else {\n          this.conn.close();\n        }\n        this._teardownConnection();\n      } else {\n        this._setConnectionState('disconnected');\n      }\n    }\n    /**\n     * Returns all created channels\n     */\n    getChannels() {\n      return this.channels;\n    }\n    /**\n     * Unsubscribes and removes a single channel\n     * @param channel A RealtimeChannel instance\n     */\n    async removeChannel(channel) {\n      const status = await channel.unsubscribe();\n      if (this.channels.length === 0) {\n        this.disconnect();\n      }\n      return status;\n    }\n    /**\n     * Unsubscribes and removes all channels\n     */\n    async removeAllChannels() {\n      const values_1 = await Promise.all(this.channels.map(channel => channel.unsubscribe()));\n      this.channels = [];\n      this.disconnect();\n      return values_1;\n    }\n    /**\n     * Logs the message.\n     *\n     * For customized logging, `this.logger` can be overridden.\n     */\n    log(kind, msg, data) {\n      this.logger(kind, msg, data);\n    }\n    /**\n     * Returns the current state of the socket.\n     */\n    connectionState() {\n      switch (this.conn && this.conn.readyState) {\n        case _constants.SOCKET_STATES.connecting:\n          return _constants.CONNECTION_STATE.Connecting;\n        case _constants.SOCKET_STATES.open:\n          return _constants.CONNECTION_STATE.Open;\n        case _constants.SOCKET_STATES.closing:\n          return _constants.CONNECTION_STATE.Closing;\n        default:\n          return _constants.CONNECTION_STATE.Closed;\n      }\n    }\n    /**\n     * Returns `true` is the connection is open.\n     */\n    isConnected() {\n      return this.connectionState() === _constants.CONNECTION_STATE.Open;\n    }\n    /**\n     * Returns `true` if the connection is currently connecting.\n     */\n    isConnecting() {\n      return this._connectionState === 'connecting';\n    }\n    /**\n     * Returns `true` if the connection is currently disconnecting.\n     */\n    isDisconnecting() {\n      return this._connectionState === 'disconnecting';\n    }\n    channel(topic, params = {\n      config: {}\n    }) {\n      const realtimeTopic = `realtime:${topic}`;\n      const exists = this.getChannels().find(c => c.topic === realtimeTopic);\n      if (!exists) {\n        const chan = new _RealtimeChannel.default(`realtime:${topic}`, params, this);\n        this.channels.push(chan);\n        return chan;\n      } else {\n        return exists;\n      }\n    }\n    /**\n     * Push out a message if the socket is connected.\n     *\n     * If the socket is not connected, the message gets enqueued within a local buffer, and sent out when a connection is next established.\n     */\n    push(data) {\n      const {\n        topic,\n        event,\n        payload,\n        ref\n      } = data;\n      const callback = () => {\n        this.encode(data, result => {\n          var _a;\n          (_a = this.conn) === null || _a === void 0 ? void 0 : _a.send(result);\n        });\n      };\n      this.log('push', `${topic} ${event} (${ref})`, payload);\n      if (this.isConnected()) {\n        callback();\n      } else {\n        this.sendBuffer.push(callback);\n      }\n    }\n    /**\n     * Sets the JWT access token used for channel subscription authorization and Realtime RLS.\n     *\n     * If param is null it will use the `accessToken` callback function or the token set on the client.\n     *\n     * On callback used, it will set the value of the token internal to the client.\n     *\n     * @param token A JWT string to override the token set on the client.\n     */\n    async setAuth(token = null) {\n      this._authPromise = this._performAuth(token);\n      try {\n        await this._authPromise;\n      } finally {\n        this._authPromise = null;\n      }\n    }\n    /**\n     * Sends a heartbeat message if the socket is connected.\n     */\n    async sendHeartbeat() {\n      var _a;\n      if (!this.isConnected()) {\n        try {\n          this.heartbeatCallback('disconnected');\n        } catch (e) {\n          this.log('error', 'error in heartbeat callback', e);\n        }\n        return;\n      }\n      // Handle heartbeat timeout and force reconnection if needed\n      if (this.pendingHeartbeatRef) {\n        this.pendingHeartbeatRef = null;\n        this.log('transport', 'heartbeat timeout. Attempting to re-establish connection');\n        try {\n          this.heartbeatCallback('timeout');\n        } catch (e) {\n          this.log('error', 'error in heartbeat callback', e);\n        }\n        // Force reconnection after heartbeat timeout\n        this._wasManualDisconnect = false;\n        (_a = this.conn) === null || _a === void 0 ? void 0 : _a.close(_constants.WS_CLOSE_NORMAL, 'heartbeat timeout');\n        setTimeout(() => {\n          var _a;\n          if (!this.isConnected()) {\n            (_a = this.reconnectTimer) === null || _a === void 0 ? void 0 : _a.scheduleTimeout();\n          }\n        }, CONNECTION_TIMEOUTS.HEARTBEAT_TIMEOUT_FALLBACK);\n        return;\n      }\n      // Send heartbeat message to server\n      this.pendingHeartbeatRef = this._makeRef();\n      this.push({\n        topic: 'phoenix',\n        event: 'heartbeat',\n        payload: {},\n        ref: this.pendingHeartbeatRef\n      });\n      try {\n        this.heartbeatCallback('sent');\n      } catch (e) {\n        this.log('error', 'error in heartbeat callback', e);\n      }\n      this._setAuthSafely('heartbeat');\n    }\n    onHeartbeat(callback) {\n      this.heartbeatCallback = callback;\n    }\n    /**\n     * Flushes send buffer\n     */\n    flushSendBuffer() {\n      if (this.isConnected() && this.sendBuffer.length > 0) {\n        this.sendBuffer.forEach(callback => callback());\n        this.sendBuffer = [];\n      }\n    }\n    /**\n     * Return the next message ref, accounting for overflows\n     *\n     * @internal\n     */\n    _makeRef() {\n      let newRef = this.ref + 1;\n      if (newRef === this.ref) {\n        this.ref = 0;\n      } else {\n        this.ref = newRef;\n      }\n      return this.ref.toString();\n    }\n    /**\n     * Unsubscribe from channels with the specified topic.\n     *\n     * @internal\n     */\n    _leaveOpenTopic(topic) {\n      let dupChannel = this.channels.find(c => c.topic === topic && (c._isJoined() || c._isJoining()));\n      if (dupChannel) {\n        this.log('transport', `leaving duplicate topic \"${topic}\"`);\n        dupChannel.unsubscribe();\n      }\n    }\n    /**\n     * Removes a subscription from the socket.\n     *\n     * @param channel An open subscription.\n     *\n     * @internal\n     */\n    _remove(channel) {\n      this.channels = this.channels.filter(c => c.topic !== channel.topic);\n    }\n    /** @internal */\n    _onConnMessage(rawMessage) {\n      this.decode(rawMessage.data, msg => {\n        // Handle heartbeat responses\n        if (msg.topic === 'phoenix' && msg.event === 'phx_reply') {\n          try {\n            this.heartbeatCallback(msg.payload.status === 'ok' ? 'ok' : 'error');\n          } catch (e) {\n            this.log('error', 'error in heartbeat callback', e);\n          }\n        }\n        // Handle pending heartbeat reference cleanup\n        if (msg.ref && msg.ref === this.pendingHeartbeatRef) {\n          this.pendingHeartbeatRef = null;\n        }\n        // Log incoming message\n        const {\n          topic,\n          event,\n          payload,\n          ref\n        } = msg;\n        const refString = ref ? `(${ref})` : '';\n        const status = payload.status || '';\n        this.log('receive', `${status} ${topic} ${event} ${refString}`.trim(), payload);\n        // Route message to appropriate channels\n        this.channels.filter(channel => channel._isMember(topic)).forEach(channel => channel._trigger(event, payload, ref));\n        this._triggerStateCallbacks('message', msg);\n      });\n    }\n    /**\n     * Clear specific timer\n     * @internal\n     */\n    _clearTimer(timer) {\n      var _a;\n      if (timer === 'heartbeat' && this.heartbeatTimer) {\n        clearInterval(this.heartbeatTimer);\n        this.heartbeatTimer = undefined;\n      } else if (timer === 'reconnect') {\n        (_a = this.reconnectTimer) === null || _a === void 0 ? void 0 : _a.reset();\n      }\n    }\n    /**\n     * Clear all timers\n     * @internal\n     */\n    _clearAllTimers() {\n      this._clearTimer('heartbeat');\n      this._clearTimer('reconnect');\n    }\n    /**\n     * Setup connection handlers for WebSocket events\n     * @internal\n     */\n    _setupConnectionHandlers() {\n      if (!this.conn) return;\n      // Set binary type if supported (browsers and most WebSocket implementations)\n      if ('binaryType' in this.conn) {\n        ;\n        this.conn.binaryType = 'arraybuffer';\n      }\n      this.conn.onopen = () => this._onConnOpen();\n      this.conn.onerror = error => this._onConnError(error);\n      this.conn.onmessage = event => this._onConnMessage(event);\n      this.conn.onclose = event => this._onConnClose(event);\n    }\n    /**\n     * Teardown connection and cleanup resources\n     * @internal\n     */\n    _teardownConnection() {\n      if (this.conn) {\n        this.conn.onopen = null;\n        this.conn.onerror = null;\n        this.conn.onmessage = null;\n        this.conn.onclose = null;\n        this.conn = null;\n      }\n      this._clearAllTimers();\n      this.channels.forEach(channel => channel.teardown());\n    }\n    /** @internal */\n    _onConnOpen() {\n      this._setConnectionState('connected');\n      this.log('transport', `connected to ${this.endpointURL()}`);\n      this.flushSendBuffer();\n      this._clearTimer('reconnect');\n      if (!this.worker) {\n        this._startHeartbeat();\n      } else {\n        if (!this.workerRef) {\n          this._startWorkerHeartbeat();\n        }\n      }\n      this._triggerStateCallbacks('open');\n    }\n    /** @internal */\n    _startHeartbeat() {\n      this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n      this.heartbeatTimer = setInterval(() => this.sendHeartbeat(), this.heartbeatIntervalMs);\n    }\n    /** @internal */\n    _startWorkerHeartbeat() {\n      if (this.workerUrl) {\n        this.log('worker', `starting worker for from ${this.workerUrl}`);\n      } else {\n        this.log('worker', `starting default worker`);\n      }\n      const objectUrl = this._workerObjectUrl(this.workerUrl);\n      this.workerRef = new Worker(objectUrl);\n      this.workerRef.onerror = error => {\n        this.log('worker', 'worker error', error.message);\n        this.workerRef.terminate();\n      };\n      this.workerRef.onmessage = event => {\n        if (event.data.event === 'keepAlive') {\n          this.sendHeartbeat();\n        }\n      };\n      this.workerRef.postMessage({\n        event: 'start',\n        interval: this.heartbeatIntervalMs\n      });\n    }\n    /** @internal */\n    _onConnClose(event) {\n      var _a;\n      this._setConnectionState('disconnected');\n      this.log('transport', 'close', event);\n      this._triggerChanError();\n      this._clearTimer('heartbeat');\n      // Only schedule reconnection if it wasn't a manual disconnect\n      if (!this._wasManualDisconnect) {\n        (_a = this.reconnectTimer) === null || _a === void 0 ? void 0 : _a.scheduleTimeout();\n      }\n      this._triggerStateCallbacks('close', event);\n    }\n    /** @internal */\n    _onConnError(error) {\n      this._setConnectionState('disconnected');\n      this.log('transport', `${error}`);\n      this._triggerChanError();\n      this._triggerStateCallbacks('error', error);\n    }\n    /** @internal */\n    _triggerChanError() {\n      this.channels.forEach(channel => channel._trigger(_constants.CHANNEL_EVENTS.error));\n    }\n    /** @internal */\n    _appendParams(url, params) {\n      if (Object.keys(params).length === 0) {\n        return url;\n      }\n      const prefix = url.match(/\\?/) ? '&' : '?';\n      const query = new URLSearchParams(params);\n      return `${url}${prefix}${query}`;\n    }\n    _workerObjectUrl(url) {\n      let result_url;\n      if (url) {\n        result_url = url;\n      } else {\n        const blob = new Blob([WORKER_SCRIPT], {\n          type: 'application/javascript'\n        });\n        result_url = URL.createObjectURL(blob);\n      }\n      return result_url;\n    }\n    /**\n     * Set connection state with proper state management\n     * @internal\n     */\n    _setConnectionState(state, manual = false) {\n      this._connectionState = state;\n      if (state === 'connecting') {\n        this._wasManualDisconnect = false;\n      } else if (state === 'disconnecting') {\n        this._wasManualDisconnect = manual;\n      }\n    }\n    /**\n     * Perform the actual auth operation\n     * @internal\n     */\n    async _performAuth(token = null) {\n      let tokenToSend;\n      if (token) {\n        tokenToSend = token;\n      } else if (this.accessToken) {\n        // Always call the accessToken callback to get fresh token\n        tokenToSend = await this.accessToken();\n      } else {\n        tokenToSend = this.accessTokenValue;\n      }\n      if (this.accessTokenValue != tokenToSend) {\n        this.accessTokenValue = tokenToSend;\n        this.channels.forEach(channel => {\n          const payload = {\n            access_token: tokenToSend,\n            version: _constants.DEFAULT_VERSION\n          };\n          tokenToSend && channel.updateJoinPayload(payload);\n          if (channel.joinedOnce && channel._isJoined()) {\n            channel._push(_constants.CHANNEL_EVENTS.access_token, {\n              access_token: tokenToSend\n            });\n          }\n        });\n      }\n    }\n    /**\n     * Wait for any in-flight auth operations to complete\n     * @internal\n     */\n    async _waitForAuthIfNeeded() {\n      if (this._authPromise) {\n        await this._authPromise;\n      }\n    }\n    /**\n     * Safely call setAuth with standardized error handling\n     * @internal\n     */\n    _setAuthSafely(context = 'general') {\n      this.setAuth().catch(e => {\n        this.log('error', `error setting auth in ${context}`, e);\n      });\n    }\n    /**\n     * Trigger state change callbacks with proper error handling\n     * @internal\n     */\n    _triggerStateCallbacks(event, data) {\n      try {\n        this.stateChangeCallbacks[event].forEach(callback => {\n          try {\n            callback(data);\n          } catch (e) {\n            this.log('error', `error in ${event} callback`, e);\n          }\n        });\n      } catch (e) {\n        this.log('error', `error triggering ${event} callbacks`, e);\n      }\n    }\n    /**\n     * Setup reconnection timer with proper configuration\n     * @internal\n     */\n    _setupReconnectionTimer() {\n      this.reconnectTimer = new _timer.default(async () => {\n        setTimeout(async () => {\n          await this._waitForAuthIfNeeded();\n          if (!this.isConnected()) {\n            this.connect();\n          }\n        }, CONNECTION_TIMEOUTS.RECONNECT_DELAY);\n      }, this.reconnectAfterMs);\n    }\n    /**\n     * Initialize client options with defaults\n     * @internal\n     */\n    _initializeOptions(options) {\n      var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n      // Set defaults\n      this.transport = (_a = options === null || options === void 0 ? void 0 : options.transport) !== null && _a !== void 0 ? _a : null;\n      this.timeout = (_b = options === null || options === void 0 ? void 0 : options.timeout) !== null && _b !== void 0 ? _b : _constants.DEFAULT_TIMEOUT;\n      this.heartbeatIntervalMs = (_c = options === null || options === void 0 ? void 0 : options.heartbeatIntervalMs) !== null && _c !== void 0 ? _c : CONNECTION_TIMEOUTS.HEARTBEAT_INTERVAL;\n      this.worker = (_d = options === null || options === void 0 ? void 0 : options.worker) !== null && _d !== void 0 ? _d : false;\n      this.accessToken = (_e = options === null || options === void 0 ? void 0 : options.accessToken) !== null && _e !== void 0 ? _e : null;\n      this.heartbeatCallback = (_f = options === null || options === void 0 ? void 0 : options.heartbeatCallback) !== null && _f !== void 0 ? _f : noop;\n      // Handle special cases\n      if (options === null || options === void 0 ? void 0 : options.params) this.params = options.params;\n      if (options === null || options === void 0 ? void 0 : options.logger) this.logger = options.logger;\n      if ((options === null || options === void 0 ? void 0 : options.logLevel) || (options === null || options === void 0 ? void 0 : options.log_level)) {\n        this.logLevel = options.logLevel || options.log_level;\n        this.params = Object.assign(Object.assign({}, this.params), {\n          log_level: this.logLevel\n        });\n      }\n      // Set up functions with defaults\n      this.reconnectAfterMs = (_g = options === null || options === void 0 ? void 0 : options.reconnectAfterMs) !== null && _g !== void 0 ? _g : tries => {\n        return RECONNECT_INTERVALS[tries - 1] || DEFAULT_RECONNECT_FALLBACK;\n      };\n      this.encode = (_h = options === null || options === void 0 ? void 0 : options.encode) !== null && _h !== void 0 ? _h : (payload, callback) => {\n        return callback(JSON.stringify(payload));\n      };\n      this.decode = (_j = options === null || options === void 0 ? void 0 : options.decode) !== null && _j !== void 0 ? _j : this.serializer.decode.bind(this.serializer);\n      // Handle worker setup\n      if (this.worker) {\n        if (typeof window !== 'undefined' && !window.Worker) {\n          throw new Error('Web Worker is not supported');\n        }\n        this.workerUrl = options === null || options === void 0 ? void 0 : options.workerUrl;\n      }\n    }\n  }\n  exports.default = RealtimeClient;\n});","lineCount":702,"map":[[7,2,1,0],[7,6,1,0,"_websocketFactory"],[7,23,1,0],[7,26,1,0,"_interopRequireDefault"],[7,48,1,0],[7,49,1,0,"require"],[7,56,1,0],[7,57,1,0,"_dependencyMap"],[7,71,1,0],[8,2,2,0],[8,6,2,0,"_constants"],[8,16,2,0],[8,19,2,0,"require"],[8,26,2,0],[8,27,2,0,"_dependencyMap"],[8,41,2,0],[9,2,3,0],[9,6,3,0,"_serializer"],[9,17,3,0],[9,20,3,0,"_interopRequireDefault"],[9,42,3,0],[9,43,3,0,"require"],[9,50,3,0],[9,51,3,0,"_dependencyMap"],[9,65,3,0],[10,2,4,0],[10,6,4,0,"_timer"],[10,12,4,0],[10,15,4,0,"_interopRequireDefault"],[10,37,4,0],[10,38,4,0,"require"],[10,45,4,0],[10,46,4,0,"_dependencyMap"],[10,60,4,0],[11,2,5,0],[11,6,5,0,"_transformers"],[11,19,5,0],[11,22,5,0,"require"],[11,29,5,0],[11,30,5,0,"_dependencyMap"],[11,44,5,0],[12,2,6,0],[12,6,6,0,"_RealtimeChannel"],[12,22,6,0],[12,25,6,0,"_interopRequireDefault"],[12,47,6,0],[12,48,6,0,"require"],[12,55,6,0],[12,56,6,0,"_dependencyMap"],[12,70,6,0],[13,2,7,0],[13,8,7,6,"noop"],[13,12,7,10],[13,15,7,13,"noop"],[13,16,7,13],[13,21,7,19],[13,22,7,21],[13,23,7,22],[14,2,8,0],[15,2,9,0],[15,8,9,6,"CONNECTION_TIMEOUTS"],[15,27,9,25],[15,30,9,28],[16,4,10,4,"HEARTBEAT_INTERVAL"],[16,22,10,22],[16,24,10,24],[16,29,10,29],[17,4,11,4,"RECONNECT_DELAY"],[17,19,11,19],[17,21,11,21],[17,23,11,23],[18,4,12,4,"HEARTBEAT_TIMEOUT_FALLBACK"],[18,30,12,30],[18,32,12,32],[19,2,13,0],[19,3,13,1],[20,2,14,0],[20,8,14,6,"RECONNECT_INTERVALS"],[20,27,14,25],[20,30,14,28],[20,31,14,29],[20,35,14,33],[20,37,14,35],[20,41,14,39],[20,43,14,41],[20,47,14,45],[20,49,14,47],[20,54,14,52],[20,55,14,53],[21,2,15,0],[21,8,15,6,"DEFAULT_RECONNECT_FALLBACK"],[21,34,15,32],[21,37,15,35],[21,42,15,40],[22,2,16,0],[22,8,16,6,"WORKER_SCRIPT"],[22,21,16,19],[22,24,16,22],[23,0,17,0],[24,0,18,0],[25,0,19,0],[26,0,20,0],[27,0,21,0],[27,6,21,6],[28,2,22,15],[28,8,22,21,"RealtimeClient"],[28,22,22,35],[28,23,22,36],[29,4,23,4],[30,0,24,0],[31,0,25,0],[32,0,26,0],[33,0,27,0],[34,0,28,0],[35,0,29,0],[36,0,30,0],[37,0,31,0],[38,0,32,0],[39,0,33,0],[40,0,34,0],[41,0,35,0],[42,0,36,0],[43,0,37,0],[44,0,38,0],[45,0,39,0],[46,0,40,0],[47,0,41,0],[48,4,42,4,"constructor"],[48,15,42,15,"constructor"],[48,16,42,16,"endPoint"],[48,24,42,24],[48,26,42,26,"options"],[48,33,42,33],[48,35,42,35],[49,6,43,8],[49,10,43,12,"_a"],[49,12,43,14],[50,6,44,8],[50,10,44,12],[50,11,44,13,"accessTokenValue"],[50,27,44,29],[50,30,44,32],[50,34,44,36],[51,6,45,8],[51,10,45,12],[51,11,45,13,"apiKey"],[51,17,45,19],[51,20,45,22],[51,24,45,26],[52,6,46,8],[52,10,46,12],[52,11,46,13,"channels"],[52,19,46,21],[52,22,46,24],[52,26,46,28,"Array"],[52,31,46,33],[52,32,46,34],[52,33,46,35],[53,6,47,8],[53,10,47,12],[53,11,47,13,"endPoint"],[53,19,47,21],[53,22,47,24],[53,24,47,26],[54,6,48,8],[54,10,48,12],[54,11,48,13,"httpEndpoint"],[54,23,48,25],[54,26,48,28],[54,28,48,30],[55,6,49,8],[56,6,50,8],[56,10,50,12],[56,11,50,13,"headers"],[56,18,50,20],[56,21,50,23],[56,22,50,24],[56,23,50,25],[57,6,51,8],[57,10,51,12],[57,11,51,13,"params"],[57,17,51,19],[57,20,51,22],[57,21,51,23],[57,22,51,24],[58,6,52,8],[58,10,52,12],[58,11,52,13,"timeout"],[58,18,52,20],[58,21,52,23,"DEFAULT_TIMEOUT"],[58,47,52,38],[59,6,53,8],[59,10,53,12],[59,11,53,13,"transport"],[59,20,53,22],[59,23,53,25],[59,27,53,29],[60,6,54,8],[60,10,54,12],[60,11,54,13,"heartbeatIntervalMs"],[60,30,54,32],[60,33,54,35,"CONNECTION_TIMEOUTS"],[60,52,54,54],[60,53,54,55,"HEARTBEAT_INTERVAL"],[60,71,54,73],[61,6,55,8],[61,10,55,12],[61,11,55,13,"heartbeatTimer"],[61,25,55,27],[61,28,55,30,"undefined"],[61,37,55,39],[62,6,56,8],[62,10,56,12],[62,11,56,13,"pendingHeartbeatRef"],[62,30,56,32],[62,33,56,35],[62,37,56,39],[63,6,57,8],[63,10,57,12],[63,11,57,13,"heartbeatCallback"],[63,28,57,30],[63,31,57,33,"noop"],[63,35,57,37],[64,6,58,8],[64,10,58,12],[64,11,58,13,"ref"],[64,14,58,16],[64,17,58,19],[64,18,58,20],[65,6,59,8],[65,10,59,12],[65,11,59,13,"reconnectTimer"],[65,25,59,27],[65,28,59,30],[65,32,59,34],[66,6,60,8],[66,10,60,12],[66,11,60,13,"logger"],[66,17,60,19],[66,20,60,22,"noop"],[66,24,60,26],[67,6,61,8],[67,10,61,12],[67,11,61,13,"conn"],[67,15,61,17],[67,18,61,20],[67,22,61,24],[68,6,62,8],[68,10,62,12],[68,11,62,13,"sendBuffer"],[68,21,62,23],[68,24,62,26],[68,26,62,28],[69,6,63,8],[69,10,63,12],[69,11,63,13,"serializer"],[69,21,63,23],[69,24,63,26],[69,28,63,30,"Serializer"],[69,47,63,40],[69,48,63,41],[69,49,63,42],[70,6,64,8],[70,10,64,12],[70,11,64,13,"stateChangeCallbacks"],[70,31,64,33],[70,34,64,36],[71,8,65,12,"open"],[71,12,65,16],[71,14,65,18],[71,16,65,20],[72,8,66,12,"close"],[72,13,66,17],[72,15,66,19],[72,17,66,21],[73,8,67,12,"error"],[73,13,67,17],[73,15,67,19],[73,17,67,21],[74,8,68,12,"message"],[74,15,68,19],[74,17,68,21],[75,6,69,8],[75,7,69,9],[76,6,70,8],[76,10,70,12],[76,11,70,13,"accessToken"],[76,22,70,24],[76,25,70,27],[76,29,70,31],[77,6,71,8],[77,10,71,12],[77,11,71,13,"_connectionState"],[77,27,71,29],[77,30,71,32],[77,44,71,46],[78,6,72,8],[78,10,72,12],[78,11,72,13,"_wasManualDisconnect"],[78,31,72,33],[78,34,72,36],[78,39,72,41],[79,6,73,8],[79,10,73,12],[79,11,73,13,"_authPromise"],[79,23,73,25],[79,26,73,28],[79,30,73,32],[80,6,74,8],[81,0,75,0],[82,0,76,0],[83,0,77,0],[84,0,78,0],[85,6,79,8],[85,10,79,12],[85,11,79,13,"_resolveFetch"],[85,24,79,26],[85,27,79,30,"customFetch"],[85,38,79,41],[85,42,79,46],[86,8,80,12],[86,12,80,16,"_fetch"],[86,18,80,22],[87,8,81,12],[87,12,81,16,"customFetch"],[87,23,81,27],[87,25,81,29],[88,10,82,16,"_fetch"],[88,16,82,22],[88,19,82,25,"customFetch"],[88,30,82,36],[89,8,83,12],[89,9,83,13],[89,15,84,17],[89,19,84,21],[89,26,84,28,"fetch"],[89,31,84,33],[89,36,84,38],[89,47,84,49],[89,49,84,51],[90,10,85,16],[91,10,86,16,"_fetch"],[91,16,86,22],[91,19,86,25,"_fetch"],[91,20,86,26],[91,23,86,29,"args"],[91,27,86,33],[91,32,86,38,"require"],[91,39,86,38],[91,40,86,38,"_dependencyMap"],[91,54,86,38],[91,133,86,38,"_dependencyMap"],[91,147,86,38],[91,152,86,38,"_dependencyMap"],[91,166,86,38],[91,167,86,38,"paths"],[91,172,86,38],[91,198,87,21,"then"],[91,202,87,25],[91,203,87,26],[91,204,87,27],[92,12,87,29,"default"],[92,19,87,36],[92,21,87,38,"fetch"],[93,10,87,44],[93,11,87,45],[93,16,87,50,"fetch"],[93,21,87,55],[93,22,87,56],[93,25,87,59,"args"],[93,29,87,63],[93,30,87,64],[93,31,87,65],[93,32,88,21,"catch"],[93,37,88,26],[93,38,88,28,"error"],[93,43,88,33],[93,47,88,38],[94,12,89,20],[94,18,89,26],[94,22,89,30,"Error"],[94,27,89,35],[94,28,89,36],[94,68,89,76,"error"],[94,73,89,81],[94,74,89,82,"message"],[94,81,89,89],[94,85,89,93],[94,88,90,24],[94,170,90,106],[94,171,90,107],[95,10,91,16],[95,11,91,17],[95,12,91,18],[96,8,92,12],[96,9,92,13],[96,15,93,17],[97,10,94,16,"_fetch"],[97,16,94,22],[97,19,94,25,"fetch"],[97,24,94,30],[98,8,95,12],[99,8,96,12],[99,15,96,19],[99,16,96,20],[99,19,96,23,"args"],[99,23,96,27],[99,28,96,32,"_fetch"],[99,34,96,38],[99,35,96,39],[99,38,96,42,"args"],[99,42,96,46],[99,43,96,47],[100,6,97,8],[100,7,97,9],[101,6,98,8],[102,6,99,8],[102,10,99,12],[102,12,99,14],[102,13,99,15,"_a"],[102,15,99,17],[102,18,99,20,"options"],[102,25,99,27],[102,30,99,32],[102,34,99,36],[102,38,99,40,"options"],[102,45,99,47],[102,50,99,52],[102,55,99,57],[102,56,99,58],[102,59,99,61],[102,64,99,66],[102,65,99,67],[102,68,99,70,"options"],[102,75,99,77],[102,76,99,78,"params"],[102,82,99,84],[102,88,99,90],[102,92,99,94],[102,96,99,98,"_a"],[102,98,99,100],[102,103,99,105],[102,108,99,110],[102,109,99,111],[102,112,99,114],[102,117,99,119],[102,118,99,120],[102,121,99,123,"_a"],[102,123,99,125],[102,124,99,126,"apikey"],[102,130,99,132],[102,131,99,133],[102,133,99,135],[103,8,100,12],[103,14,100,18],[103,18,100,22,"Error"],[103,23,100,27],[103,24,100,28],[103,68,100,72],[103,69,100,73],[104,6,101,8],[105,6,102,8],[105,10,102,12],[105,11,102,13,"apiKey"],[105,17,102,19],[105,20,102,22,"options"],[105,27,102,29],[105,28,102,30,"params"],[105,34,102,36],[105,35,102,37,"apikey"],[105,41,102,43],[106,6,103,8],[107,6,104,8],[107,10,104,12],[107,11,104,13,"endPoint"],[107,19,104,21],[107,22,104,24],[107,25,104,27,"endPoint"],[107,33,104,35],[107,37,104,39,"TRANSPORTS"],[107,58,104,49],[107,59,104,50,"websocket"],[107,68,104,59],[107,70,104,61],[108,6,105,8],[108,10,105,12],[108,11,105,13,"httpEndpoint"],[108,23,105,25],[108,26,105,28],[108,30,105,28,"httpEndpointURL"],[108,59,105,43],[108,61,105,44,"endPoint"],[108,69,105,52],[108,70,105,53],[109,6,106,8],[109,10,106,12],[109,11,106,13,"_initializeOptions"],[109,29,106,31],[109,30,106,32,"options"],[109,37,106,39],[109,38,106,40],[110,6,107,8],[110,10,107,12],[110,11,107,13,"_setupReconnectionTimer"],[110,34,107,36],[110,35,107,37],[110,36,107,38],[111,6,108,8],[111,10,108,12],[111,11,108,13,"fetch"],[111,16,108,18],[111,19,108,21],[111,23,108,25],[111,24,108,26,"_resolveFetch"],[111,37,108,39],[111,38,108,40,"options"],[111,45,108,47],[111,50,108,52],[111,54,108,56],[111,58,108,60,"options"],[111,65,108,67],[111,70,108,72],[111,75,108,77],[111,76,108,78],[111,79,108,81],[111,84,108,86],[111,85,108,87],[111,88,108,90,"options"],[111,95,108,97],[111,96,108,98,"fetch"],[111,101,108,103],[111,102,108,104],[112,4,109,4],[113,4,110,4],[114,0,111,0],[115,0,112,0],[116,4,113,4,"connect"],[116,11,113,11,"connect"],[116,12,113,11],[116,14,113,14],[117,6,114,8],[118,6,115,8],[118,10,115,12],[118,14,115,16],[118,15,115,17,"isConnecting"],[118,27,115,29],[118,28,115,30],[118,29,115,31],[118,33,116,12],[118,37,116,16],[118,38,116,17,"isDisconnecting"],[118,53,116,32],[118,54,116,33],[118,55,116,34],[118,59,117,13],[118,63,117,17],[118,64,117,18,"conn"],[118,68,117,22],[118,73,117,27],[118,77,117,31],[118,81,117,35],[118,85,117,39],[118,86,117,40,"isConnected"],[118,97,117,51],[118,98,117,52],[118,99,117,54],[118,101,117,56],[119,8,118,12],[120,6,119,8],[121,6,120,8],[121,10,120,12],[121,11,120,13,"_setConnectionState"],[121,30,120,32],[121,31,120,33],[121,43,120,45],[121,44,120,46],[122,6,121,8],[122,10,121,12],[122,11,121,13,"_setAuthSafely"],[122,25,121,27],[122,26,121,28],[122,35,121,37],[122,36,121,38],[123,6,122,8],[124,6,123,8],[124,10,123,12],[124,14,123,16],[124,15,123,17,"transport"],[124,24,123,26],[124,26,123,28],[125,8,124,12],[126,8,125,12],[126,12,125,16],[126,13,125,17,"conn"],[126,17,125,21],[126,20,125,24],[126,24,125,28],[126,28,125,32],[126,29,125,33,"transport"],[126,38,125,42],[126,39,125,43],[126,43,125,47],[126,44,125,48,"endpointURL"],[126,55,125,59],[126,56,125,60],[126,57,125,61],[126,58,125,62],[127,6,126,8],[127,7,126,9],[127,13,127,13],[128,8,128,12],[129,8,129,12],[129,12,129,16],[130,10,130,16],[130,14,130,20],[130,15,130,21,"conn"],[130,19,130,25],[130,22,130,28,"WebSocketFactory"],[130,47,130,44],[130,48,130,45,"createWebSocket"],[130,63,130,60],[130,64,130,61],[130,68,130,65],[130,69,130,66,"endpointURL"],[130,80,130,77],[130,81,130,78],[130,82,130,79],[130,83,130,80],[131,8,131,12],[131,9,131,13],[131,10,132,12],[131,17,132,19,"error"],[131,22,132,24],[131,24,132,26],[132,10,133,16],[132,14,133,20],[132,15,133,21,"_setConnectionState"],[132,34,133,40],[132,35,133,41],[132,49,133,55],[132,50,133,56],[133,10,134,16],[133,16,134,22,"errorMessage"],[133,28,134,34],[133,31,134,37,"error"],[133,36,134,42],[133,37,134,43,"message"],[133,44,134,50],[134,10,135,16],[135,10,136,16],[135,14,136,20,"errorMessage"],[135,26,136,32],[135,27,136,33,"includes"],[135,35,136,41],[135,36,136,42],[135,45,136,51],[135,46,136,52],[135,48,136,54],[136,12,137,20],[136,18,137,26],[136,22,137,30,"Error"],[136,27,137,35],[136,28,137,36],[136,31,137,39,"errorMessage"],[136,43,137,51],[136,49,137,57],[136,52,138,24],[136,133,138,105],[136,136,139,24],[136,200,139,88],[136,203,140,24],[136,256,140,77],[136,259,141,24],[136,281,141,46],[136,284,142,24],[136,309,142,49],[136,312,143,24],[136,358,143,70],[136,361,144,24],[136,380,144,43],[136,383,145,24],[136,404,145,45],[136,407,146,24],[136,413,146,30],[136,414,146,31],[137,10,147,16],[138,10,148,16],[138,16,148,22],[138,20,148,26,"Error"],[138,25,148,31],[138,26,148,32],[138,54,148,60,"errorMessage"],[138,66,148,72],[138,68,148,74],[138,69,148,75],[139,8,149,12],[140,6,150,8],[141,6,151,8],[141,10,151,12],[141,11,151,13,"_setupConnectionHandlers"],[141,35,151,37],[141,36,151,38],[141,37,151,39],[142,4,152,4],[143,4,153,4],[144,0,154,0],[145,0,155,0],[146,0,156,0],[147,4,157,4,"endpointURL"],[147,15,157,15,"endpointURL"],[147,16,157,15],[147,18,157,18],[148,6,158,8],[148,13,158,15],[148,17,158,19],[148,18,158,20,"_appendParams"],[148,31,158,33],[148,32,158,34],[148,36,158,38],[148,37,158,39,"endPoint"],[148,45,158,47],[148,47,158,49,"Object"],[148,53,158,55],[148,54,158,56,"assign"],[148,60,158,62],[148,61,158,63],[148,62,158,64],[148,63,158,65],[148,65,158,67],[148,69,158,71],[148,70,158,72,"params"],[148,76,158,78],[148,78,158,80],[149,8,158,82,"vsn"],[149,11,158,85],[149,13,158,87,"VSN"],[150,6,158,91],[150,7,158,92],[150,8,158,93],[150,9,158,94],[151,4,159,4],[152,4,160,4],[153,0,161,0],[154,0,162,0],[155,0,163,0],[156,0,164,0],[157,0,165,0],[158,4,166,4,"disconnect"],[158,14,166,14,"disconnect"],[158,15,166,15,"code"],[158,19,166,19],[158,21,166,21,"reason"],[158,27,166,27],[158,29,166,29],[159,6,167,8],[159,10,167,12],[159,14,167,16],[159,15,167,17,"isDisconnecting"],[159,30,167,32],[159,31,167,33],[159,32,167,34],[159,34,167,36],[160,8,168,12],[161,6,169,8],[162,6,170,8],[162,10,170,12],[162,11,170,13,"_setConnectionState"],[162,30,170,32],[162,31,170,33],[162,46,170,48],[162,48,170,50],[162,52,170,54],[162,53,170,55],[163,6,171,8],[163,10,171,12],[163,14,171,16],[163,15,171,17,"conn"],[163,19,171,21],[163,21,171,23],[164,8,172,12],[165,8,173,12],[165,14,173,18,"fallbackTimer"],[165,27,173,31],[165,30,173,34,"setTimeout"],[165,40,173,44],[165,41,173,45],[165,47,173,51],[166,10,174,16],[166,14,174,20],[166,15,174,21,"_setConnectionState"],[166,34,174,40],[166,35,174,41],[166,49,174,55],[166,50,174,56],[167,8,175,12],[167,9,175,13],[167,11,175,15],[167,14,175,18],[167,15,175,19],[168,8,176,12],[168,12,176,16],[168,13,176,17,"conn"],[168,17,176,21],[168,18,176,22,"onclose"],[168,25,176,29],[168,28,176,32],[168,34,176,38],[169,10,177,16,"clearTimeout"],[169,22,177,28],[169,23,177,29,"fallbackTimer"],[169,36,177,42],[169,37,177,43],[170,10,178,16],[170,14,178,20],[170,15,178,21,"_setConnectionState"],[170,34,178,40],[170,35,178,41],[170,49,178,55],[170,50,178,56],[171,8,179,12],[171,9,179,13],[172,8,180,12],[173,8,181,12],[173,12,181,16,"code"],[173,16,181,20],[173,18,181,22],[174,10,182,16],[174,14,182,20],[174,15,182,21,"conn"],[174,19,182,25],[174,20,182,26,"close"],[174,25,182,31],[174,26,182,32,"code"],[174,30,182,36],[174,32,182,38,"reason"],[174,38,182,44],[174,43,182,49],[174,47,182,53],[174,51,182,57,"reason"],[174,57,182,63],[174,62,182,68],[174,67,182,73],[174,68,182,74],[174,71,182,77,"reason"],[174,77,182,83],[174,80,182,86],[174,82,182,88],[174,83,182,89],[175,8,183,12],[175,9,183,13],[175,15,184,17],[176,10,185,16],[176,14,185,20],[176,15,185,21,"conn"],[176,19,185,25],[176,20,185,26,"close"],[176,25,185,31],[176,26,185,32],[176,27,185,33],[177,8,186,12],[178,8,187,12],[178,12,187,16],[178,13,187,17,"_teardownConnection"],[178,32,187,36],[178,33,187,37],[178,34,187,38],[179,6,188,8],[179,7,188,9],[179,13,189,13],[180,8,190,12],[180,12,190,16],[180,13,190,17,"_setConnectionState"],[180,32,190,36],[180,33,190,37],[180,47,190,51],[180,48,190,52],[181,6,191,8],[182,4,192,4],[183,4,193,4],[184,0,194,0],[185,0,195,0],[186,4,196,4,"getChannels"],[186,15,196,15,"getChannels"],[186,16,196,15],[186,18,196,18],[187,6,197,8],[187,13,197,15],[187,17,197,19],[187,18,197,20,"channels"],[187,26,197,28],[188,4,198,4],[189,4,199,4],[190,0,200,0],[191,0,201,0],[192,0,202,0],[193,4,203,4],[193,10,203,10,"removeChannel"],[193,23,203,23,"removeChannel"],[193,24,203,24,"channel"],[193,31,203,31],[193,33,203,33],[194,6,204,8],[194,12,204,14,"status"],[194,18,204,20],[194,21,204,23],[194,27,204,29,"channel"],[194,34,204,36],[194,35,204,37,"unsubscribe"],[194,46,204,48],[194,47,204,49],[194,48,204,50],[195,6,205,8],[195,10,205,12],[195,14,205,16],[195,15,205,17,"channels"],[195,23,205,25],[195,24,205,26,"length"],[195,30,205,32],[195,35,205,37],[195,36,205,38],[195,38,205,40],[196,8,206,12],[196,12,206,16],[196,13,206,17,"disconnect"],[196,23,206,27],[196,24,206,28],[196,25,206,29],[197,6,207,8],[198,6,208,8],[198,13,208,15,"status"],[198,19,208,21],[199,4,209,4],[200,4,210,4],[201,0,211,0],[202,0,212,0],[203,4,213,4],[203,10,213,10,"removeAllChannels"],[203,27,213,27,"removeAllChannels"],[203,28,213,27],[203,30,213,30],[204,6,214,8],[204,12,214,14,"values_1"],[204,20,214,22],[204,23,214,25],[204,29,214,31,"Promise"],[204,36,214,38],[204,37,214,39,"all"],[204,40,214,42],[204,41,214,43],[204,45,214,47],[204,46,214,48,"channels"],[204,54,214,56],[204,55,214,57,"map"],[204,58,214,60],[204,59,214,62,"channel"],[204,66,214,69],[204,70,214,74,"channel"],[204,77,214,81],[204,78,214,82,"unsubscribe"],[204,89,214,93],[204,90,214,94],[204,91,214,95],[204,92,214,96],[204,93,214,97],[205,6,215,8],[205,10,215,12],[205,11,215,13,"channels"],[205,19,215,21],[205,22,215,24],[205,24,215,26],[206,6,216,8],[206,10,216,12],[206,11,216,13,"disconnect"],[206,21,216,23],[206,22,216,24],[206,23,216,25],[207,6,217,8],[207,13,217,15,"values_1"],[207,21,217,23],[208,4,218,4],[209,4,219,4],[210,0,220,0],[211,0,221,0],[212,0,222,0],[213,0,223,0],[214,4,224,4,"log"],[214,7,224,7,"log"],[214,8,224,8,"kind"],[214,12,224,12],[214,14,224,14,"msg"],[214,17,224,17],[214,19,224,19,"data"],[214,23,224,23],[214,25,224,25],[215,6,225,8],[215,10,225,12],[215,11,225,13,"logger"],[215,17,225,19],[215,18,225,20,"kind"],[215,22,225,24],[215,24,225,26,"msg"],[215,27,225,29],[215,29,225,31,"data"],[215,33,225,35],[215,34,225,36],[216,4,226,4],[217,4,227,4],[218,0,228,0],[219,0,229,0],[220,4,230,4,"connectionState"],[220,19,230,19,"connectionState"],[220,20,230,19],[220,22,230,22],[221,6,231,8],[221,14,231,16],[221,18,231,20],[221,19,231,21,"conn"],[221,23,231,25],[221,27,231,29],[221,31,231,33],[221,32,231,34,"conn"],[221,36,231,38],[221,37,231,39,"readyState"],[221,47,231,49],[222,8,232,12],[222,13,232,17,"SOCKET_STATES"],[222,37,232,30],[222,38,232,31,"connecting"],[222,48,232,41],[223,10,233,16],[223,17,233,23,"CONNECTION_STATE"],[223,44,233,39],[223,45,233,40,"Connecting"],[223,55,233,50],[224,8,234,12],[224,13,234,17,"SOCKET_STATES"],[224,37,234,30],[224,38,234,31,"open"],[224,42,234,35],[225,10,235,16],[225,17,235,23,"CONNECTION_STATE"],[225,44,235,39],[225,45,235,40,"Open"],[225,49,235,44],[226,8,236,12],[226,13,236,17,"SOCKET_STATES"],[226,37,236,30],[226,38,236,31,"closing"],[226,45,236,38],[227,10,237,16],[227,17,237,23,"CONNECTION_STATE"],[227,44,237,39],[227,45,237,40,"Closing"],[227,52,237,47],[228,8,238,12],[229,10,239,16],[229,17,239,23,"CONNECTION_STATE"],[229,44,239,39],[229,45,239,40,"Closed"],[229,51,239,46],[230,6,240,8],[231,4,241,4],[232,4,242,4],[233,0,243,0],[234,0,244,0],[235,4,245,4,"isConnected"],[235,15,245,15,"isConnected"],[235,16,245,15],[235,18,245,18],[236,6,246,8],[236,13,246,15],[236,17,246,19],[236,18,246,20,"connectionState"],[236,33,246,35],[236,34,246,36],[236,35,246,37],[236,40,246,42,"CONNECTION_STATE"],[236,67,246,58],[236,68,246,59,"Open"],[236,72,246,63],[237,4,247,4],[238,4,248,4],[239,0,249,0],[240,0,250,0],[241,4,251,4,"isConnecting"],[241,16,251,16,"isConnecting"],[241,17,251,16],[241,19,251,19],[242,6,252,8],[242,13,252,15],[242,17,252,19],[242,18,252,20,"_connectionState"],[242,34,252,36],[242,39,252,41],[242,51,252,53],[243,4,253,4],[244,4,254,4],[245,0,255,0],[246,0,256,0],[247,4,257,4,"isDisconnecting"],[247,19,257,19,"isDisconnecting"],[247,20,257,19],[247,22,257,22],[248,6,258,8],[248,13,258,15],[248,17,258,19],[248,18,258,20,"_connectionState"],[248,34,258,36],[248,39,258,41],[248,54,258,56],[249,4,259,4],[250,4,260,4,"channel"],[250,11,260,11,"channel"],[250,12,260,12,"topic"],[250,17,260,17],[250,19,260,19,"params"],[250,25,260,25],[250,28,260,28],[251,6,260,30,"config"],[251,12,260,36],[251,14,260,38],[251,15,260,39],[252,4,260,41],[252,5,260,42],[252,7,260,44],[253,6,261,8],[253,12,261,14,"realtimeTopic"],[253,25,261,27],[253,28,261,30],[253,40,261,42,"topic"],[253,45,261,47],[253,47,261,49],[254,6,262,8],[254,12,262,14,"exists"],[254,18,262,20],[254,21,262,23],[254,25,262,27],[254,26,262,28,"getChannels"],[254,37,262,39],[254,38,262,40],[254,39,262,41],[254,40,262,42,"find"],[254,44,262,46],[254,45,262,48,"c"],[254,46,262,49],[254,50,262,54,"c"],[254,51,262,55],[254,52,262,56,"topic"],[254,57,262,61],[254,62,262,66,"realtimeTopic"],[254,75,262,79],[254,76,262,80],[255,6,263,8],[255,10,263,12],[255,11,263,13,"exists"],[255,17,263,19],[255,19,263,21],[256,8,264,12],[256,14,264,18,"chan"],[256,18,264,22],[256,21,264,25],[256,25,264,29,"RealtimeChannel"],[256,49,264,44],[256,50,264,45],[256,62,264,57,"topic"],[256,67,264,62],[256,69,264,64],[256,71,264,66,"params"],[256,77,264,72],[256,79,264,74],[256,83,264,78],[256,84,264,79],[257,8,265,12],[257,12,265,16],[257,13,265,17,"channels"],[257,21,265,25],[257,22,265,26,"push"],[257,26,265,30],[257,27,265,31,"chan"],[257,31,265,35],[257,32,265,36],[258,8,266,12],[258,15,266,19,"chan"],[258,19,266,23],[259,6,267,8],[259,7,267,9],[259,13,268,13],[260,8,269,12],[260,15,269,19,"exists"],[260,21,269,25],[261,6,270,8],[262,4,271,4],[263,4,272,4],[264,0,273,0],[265,0,274,0],[266,0,275,0],[267,0,276,0],[268,4,277,4,"push"],[268,8,277,8,"push"],[268,9,277,9,"data"],[268,13,277,13],[268,15,277,15],[269,6,278,8],[269,12,278,14],[270,8,278,16,"topic"],[270,13,278,21],[271,8,278,23,"event"],[271,13,278,28],[272,8,278,30,"payload"],[272,15,278,37],[273,8,278,39,"ref"],[274,6,278,43],[274,7,278,44],[274,10,278,47,"data"],[274,14,278,51],[275,6,279,8],[275,12,279,14,"callback"],[275,20,279,22],[275,23,279,25,"callback"],[275,24,279,25],[275,29,279,31],[276,8,280,12],[276,12,280,16],[276,13,280,17,"encode"],[276,19,280,23],[276,20,280,24,"data"],[276,24,280,28],[276,26,280,31,"result"],[276,32,280,37],[276,36,280,42],[277,10,281,16],[277,14,281,20,"_a"],[277,16,281,22],[278,10,282,16],[278,11,282,17,"_a"],[278,13,282,19],[278,16,282,22],[278,20,282,26],[278,21,282,27,"conn"],[278,25,282,31],[278,31,282,37],[278,35,282,41],[278,39,282,45,"_a"],[278,41,282,47],[278,46,282,52],[278,51,282,57],[278,52,282,58],[278,55,282,61],[278,60,282,66],[278,61,282,67],[278,64,282,70,"_a"],[278,66,282,72],[278,67,282,73,"send"],[278,71,282,77],[278,72,282,78,"result"],[278,78,282,84],[278,79,282,85],[279,8,283,12],[279,9,283,13],[279,10,283,14],[280,6,284,8],[280,7,284,9],[281,6,285,8],[281,10,285,12],[281,11,285,13,"log"],[281,14,285,16],[281,15,285,17],[281,21,285,23],[281,23,285,25],[281,26,285,28,"topic"],[281,31,285,33],[281,35,285,37,"event"],[281,40,285,42],[281,45,285,47,"ref"],[281,48,285,50],[281,51,285,53],[281,53,285,55,"payload"],[281,60,285,62],[281,61,285,63],[282,6,286,8],[282,10,286,12],[282,14,286,16],[282,15,286,17,"isConnected"],[282,26,286,28],[282,27,286,29],[282,28,286,30],[282,30,286,32],[283,8,287,12,"callback"],[283,16,287,20],[283,17,287,21],[283,18,287,22],[284,6,288,8],[284,7,288,9],[284,13,289,13],[285,8,290,12],[285,12,290,16],[285,13,290,17,"sendBuffer"],[285,23,290,27],[285,24,290,28,"push"],[285,28,290,32],[285,29,290,33,"callback"],[285,37,290,41],[285,38,290,42],[286,6,291,8],[287,4,292,4],[288,4,293,4],[289,0,294,0],[290,0,295,0],[291,0,296,0],[292,0,297,0],[293,0,298,0],[294,0,299,0],[295,0,300,0],[296,0,301,0],[297,4,302,4],[297,10,302,10,"setAuth"],[297,17,302,17,"setAuth"],[297,18,302,18,"token"],[297,23,302,23],[297,26,302,26],[297,30,302,30],[297,32,302,32],[298,6,303,8],[298,10,303,12],[298,11,303,13,"_authPromise"],[298,23,303,25],[298,26,303,28],[298,30,303,32],[298,31,303,33,"_performAuth"],[298,43,303,45],[298,44,303,46,"token"],[298,49,303,51],[298,50,303,52],[299,6,304,8],[299,10,304,12],[300,8,305,12],[300,14,305,18],[300,18,305,22],[300,19,305,23,"_authPromise"],[300,31,305,35],[301,6,306,8],[301,7,306,9],[301,16,307,16],[302,8,308,12],[302,12,308,16],[302,13,308,17,"_authPromise"],[302,25,308,29],[302,28,308,32],[302,32,308,36],[303,6,309,8],[304,4,310,4],[305,4,311,4],[306,0,312,0],[307,0,313,0],[308,4,314,4],[308,10,314,10,"sendHeartbeat"],[308,23,314,23,"sendHeartbeat"],[308,24,314,23],[308,26,314,26],[309,6,315,8],[309,10,315,12,"_a"],[309,12,315,14],[310,6,316,8],[310,10,316,12],[310,11,316,13],[310,15,316,17],[310,16,316,18,"isConnected"],[310,27,316,29],[310,28,316,30],[310,29,316,31],[310,31,316,33],[311,8,317,12],[311,12,317,16],[312,10,318,16],[312,14,318,20],[312,15,318,21,"heartbeatCallback"],[312,32,318,38],[312,33,318,39],[312,47,318,53],[312,48,318,54],[313,8,319,12],[313,9,319,13],[313,10,320,12],[313,17,320,19,"e"],[313,18,320,20],[313,20,320,22],[314,10,321,16],[314,14,321,20],[314,15,321,21,"log"],[314,18,321,24],[314,19,321,25],[314,26,321,32],[314,28,321,34],[314,57,321,63],[314,59,321,65,"e"],[314,60,321,66],[314,61,321,67],[315,8,322,12],[316,8,323,12],[317,6,324,8],[318,6,325,8],[319,6,326,8],[319,10,326,12],[319,14,326,16],[319,15,326,17,"pendingHeartbeatRef"],[319,34,326,36],[319,36,326,38],[320,8,327,12],[320,12,327,16],[320,13,327,17,"pendingHeartbeatRef"],[320,32,327,36],[320,35,327,39],[320,39,327,43],[321,8,328,12],[321,12,328,16],[321,13,328,17,"log"],[321,16,328,20],[321,17,328,21],[321,28,328,32],[321,30,328,34],[321,88,328,92],[321,89,328,93],[322,8,329,12],[322,12,329,16],[323,10,330,16],[323,14,330,20],[323,15,330,21,"heartbeatCallback"],[323,32,330,38],[323,33,330,39],[323,42,330,48],[323,43,330,49],[324,8,331,12],[324,9,331,13],[324,10,332,12],[324,17,332,19,"e"],[324,18,332,20],[324,20,332,22],[325,10,333,16],[325,14,333,20],[325,15,333,21,"log"],[325,18,333,24],[325,19,333,25],[325,26,333,32],[325,28,333,34],[325,57,333,63],[325,59,333,65,"e"],[325,60,333,66],[325,61,333,67],[326,8,334,12],[327,8,335,12],[328,8,336,12],[328,12,336,16],[328,13,336,17,"_wasManualDisconnect"],[328,33,336,37],[328,36,336,40],[328,41,336,45],[329,8,337,12],[329,9,337,13,"_a"],[329,11,337,15],[329,14,337,18],[329,18,337,22],[329,19,337,23,"conn"],[329,23,337,27],[329,29,337,33],[329,33,337,37],[329,37,337,41,"_a"],[329,39,337,43],[329,44,337,48],[329,49,337,53],[329,50,337,54],[329,53,337,57],[329,58,337,62],[329,59,337,63],[329,62,337,66,"_a"],[329,64,337,68],[329,65,337,69,"close"],[329,70,337,74],[329,71,337,75,"WS_CLOSE_NORMAL"],[329,97,337,90],[329,99,337,92],[329,118,337,111],[329,119,337,112],[330,8,338,12,"setTimeout"],[330,18,338,22],[330,19,338,23],[330,25,338,29],[331,10,339,16],[331,14,339,20,"_a"],[331,16,339,22],[332,10,340,16],[332,14,340,20],[332,15,340,21],[332,19,340,25],[332,20,340,26,"isConnected"],[332,31,340,37],[332,32,340,38],[332,33,340,39],[332,35,340,41],[333,12,341,20],[333,13,341,21,"_a"],[333,15,341,23],[333,18,341,26],[333,22,341,30],[333,23,341,31,"reconnectTimer"],[333,37,341,45],[333,43,341,51],[333,47,341,55],[333,51,341,59,"_a"],[333,53,341,61],[333,58,341,66],[333,63,341,71],[333,64,341,72],[333,67,341,75],[333,72,341,80],[333,73,341,81],[333,76,341,84,"_a"],[333,78,341,86],[333,79,341,87,"scheduleTimeout"],[333,94,341,102],[333,95,341,103],[333,96,341,104],[334,10,342,16],[335,8,343,12],[335,9,343,13],[335,11,343,15,"CONNECTION_TIMEOUTS"],[335,30,343,34],[335,31,343,35,"HEARTBEAT_TIMEOUT_FALLBACK"],[335,57,343,61],[335,58,343,62],[336,8,344,12],[337,6,345,8],[338,6,346,8],[339,6,347,8],[339,10,347,12],[339,11,347,13,"pendingHeartbeatRef"],[339,30,347,32],[339,33,347,35],[339,37,347,39],[339,38,347,40,"_makeRef"],[339,46,347,48],[339,47,347,49],[339,48,347,50],[340,6,348,8],[340,10,348,12],[340,11,348,13,"push"],[340,15,348,17],[340,16,348,18],[341,8,349,12,"topic"],[341,13,349,17],[341,15,349,19],[341,24,349,28],[342,8,350,12,"event"],[342,13,350,17],[342,15,350,19],[342,26,350,30],[343,8,351,12,"payload"],[343,15,351,19],[343,17,351,21],[343,18,351,22],[343,19,351,23],[344,8,352,12,"ref"],[344,11,352,15],[344,13,352,17],[344,17,352,21],[344,18,352,22,"pendingHeartbeatRef"],[345,6,353,8],[345,7,353,9],[345,8,353,10],[346,6,354,8],[346,10,354,12],[347,8,355,12],[347,12,355,16],[347,13,355,17,"heartbeatCallback"],[347,30,355,34],[347,31,355,35],[347,37,355,41],[347,38,355,42],[348,6,356,8],[348,7,356,9],[348,8,357,8],[348,15,357,15,"e"],[348,16,357,16],[348,18,357,18],[349,8,358,12],[349,12,358,16],[349,13,358,17,"log"],[349,16,358,20],[349,17,358,21],[349,24,358,28],[349,26,358,30],[349,55,358,59],[349,57,358,61,"e"],[349,58,358,62],[349,59,358,63],[350,6,359,8],[351,6,360,8],[351,10,360,12],[351,11,360,13,"_setAuthSafely"],[351,25,360,27],[351,26,360,28],[351,37,360,39],[351,38,360,40],[352,4,361,4],[353,4,362,4,"onHeartbeat"],[353,15,362,15,"onHeartbeat"],[353,16,362,16,"callback"],[353,24,362,24],[353,26,362,26],[354,6,363,8],[354,10,363,12],[354,11,363,13,"heartbeatCallback"],[354,28,363,30],[354,31,363,33,"callback"],[354,39,363,41],[355,4,364,4],[356,4,365,4],[357,0,366,0],[358,0,367,0],[359,4,368,4,"flushSendBuffer"],[359,19,368,19,"flushSendBuffer"],[359,20,368,19],[359,22,368,22],[360,6,369,8],[360,10,369,12],[360,14,369,16],[360,15,369,17,"isConnected"],[360,26,369,28],[360,27,369,29],[360,28,369,30],[360,32,369,34],[360,36,369,38],[360,37,369,39,"sendBuffer"],[360,47,369,49],[360,48,369,50,"length"],[360,54,369,56],[360,57,369,59],[360,58,369,60],[360,60,369,62],[361,8,370,12],[361,12,370,16],[361,13,370,17,"sendBuffer"],[361,23,370,27],[361,24,370,28,"forEach"],[361,31,370,35],[361,32,370,37,"callback"],[361,40,370,45],[361,44,370,50,"callback"],[361,52,370,58],[361,53,370,59],[361,54,370,60],[361,55,370,61],[362,8,371,12],[362,12,371,16],[362,13,371,17,"sendBuffer"],[362,23,371,27],[362,26,371,30],[362,28,371,32],[363,6,372,8],[364,4,373,4],[365,4,374,4],[366,0,375,0],[367,0,376,0],[368,0,377,0],[369,0,378,0],[370,4,379,4,"_makeRef"],[370,12,379,12,"_makeRef"],[370,13,379,12],[370,15,379,15],[371,6,380,8],[371,10,380,12,"newRef"],[371,16,380,18],[371,19,380,21],[371,23,380,25],[371,24,380,26,"ref"],[371,27,380,29],[371,30,380,32],[371,31,380,33],[372,6,381,8],[372,10,381,12,"newRef"],[372,16,381,18],[372,21,381,23],[372,25,381,27],[372,26,381,28,"ref"],[372,29,381,31],[372,31,381,33],[373,8,382,12],[373,12,382,16],[373,13,382,17,"ref"],[373,16,382,20],[373,19,382,23],[373,20,382,24],[374,6,383,8],[374,7,383,9],[374,13,384,13],[375,8,385,12],[375,12,385,16],[375,13,385,17,"ref"],[375,16,385,20],[375,19,385,23,"newRef"],[375,25,385,29],[376,6,386,8],[377,6,387,8],[377,13,387,15],[377,17,387,19],[377,18,387,20,"ref"],[377,21,387,23],[377,22,387,24,"toString"],[377,30,387,32],[377,31,387,33],[377,32,387,34],[378,4,388,4],[379,4,389,4],[380,0,390,0],[381,0,391,0],[382,0,392,0],[383,0,393,0],[384,4,394,4,"_leaveOpenTopic"],[384,19,394,19,"_leaveOpenTopic"],[384,20,394,20,"topic"],[384,25,394,25],[384,27,394,27],[385,6,395,8],[385,10,395,12,"dupChannel"],[385,20,395,22],[385,23,395,25],[385,27,395,29],[385,28,395,30,"channels"],[385,36,395,38],[385,37,395,39,"find"],[385,41,395,43],[385,42,395,45,"c"],[385,43,395,46],[385,47,395,51,"c"],[385,48,395,52],[385,49,395,53,"topic"],[385,54,395,58],[385,59,395,63,"topic"],[385,64,395,68],[385,69,395,73,"c"],[385,70,395,74],[385,71,395,75,"_isJoined"],[385,80,395,84],[385,81,395,85],[385,82,395,86],[385,86,395,90,"c"],[385,87,395,91],[385,88,395,92,"_isJoining"],[385,98,395,102],[385,99,395,103],[385,100,395,104],[385,101,395,105],[385,102,395,106],[386,6,396,8],[386,10,396,12,"dupChannel"],[386,20,396,22],[386,22,396,24],[387,8,397,12],[387,12,397,16],[387,13,397,17,"log"],[387,16,397,20],[387,17,397,21],[387,28,397,32],[387,30,397,34],[387,58,397,62,"topic"],[387,63,397,67],[387,66,397,70],[387,67,397,71],[388,8,398,12,"dupChannel"],[388,18,398,22],[388,19,398,23,"unsubscribe"],[388,30,398,34],[388,31,398,35],[388,32,398,36],[389,6,399,8],[390,4,400,4],[391,4,401,4],[392,0,402,0],[393,0,403,0],[394,0,404,0],[395,0,405,0],[396,0,406,0],[397,0,407,0],[398,4,408,4,"_remove"],[398,11,408,11,"_remove"],[398,12,408,12,"channel"],[398,19,408,19],[398,21,408,21],[399,6,409,8],[399,10,409,12],[399,11,409,13,"channels"],[399,19,409,21],[399,22,409,24],[399,26,409,28],[399,27,409,29,"channels"],[399,35,409,37],[399,36,409,38,"filter"],[399,42,409,44],[399,43,409,46,"c"],[399,44,409,47],[399,48,409,52,"c"],[399,49,409,53],[399,50,409,54,"topic"],[399,55,409,59],[399,60,409,64,"channel"],[399,67,409,71],[399,68,409,72,"topic"],[399,73,409,77],[399,74,409,78],[400,4,410,4],[401,4,411,4],[402,4,412,4,"_onConnMessage"],[402,18,412,18,"_onConnMessage"],[402,19,412,19,"rawMessage"],[402,29,412,29],[402,31,412,31],[403,6,413,8],[403,10,413,12],[403,11,413,13,"decode"],[403,17,413,19],[403,18,413,20,"rawMessage"],[403,28,413,30],[403,29,413,31,"data"],[403,33,413,35],[403,35,413,38,"msg"],[403,38,413,41],[403,42,413,46],[404,8,414,12],[405,8,415,12],[405,12,415,16,"msg"],[405,15,415,19],[405,16,415,20,"topic"],[405,21,415,25],[405,26,415,30],[405,35,415,39],[405,39,415,43,"msg"],[405,42,415,46],[405,43,415,47,"event"],[405,48,415,52],[405,53,415,57],[405,64,415,68],[405,66,415,70],[406,10,416,16],[406,14,416,20],[407,12,417,20],[407,16,417,24],[407,17,417,25,"heartbeatCallback"],[407,34,417,42],[407,35,417,43,"msg"],[407,38,417,46],[407,39,417,47,"payload"],[407,46,417,54],[407,47,417,55,"status"],[407,53,417,61],[407,58,417,66],[407,62,417,70],[407,65,417,73],[407,69,417,77],[407,72,417,80],[407,79,417,87],[407,80,417,88],[408,10,418,16],[408,11,418,17],[408,12,419,16],[408,19,419,23,"e"],[408,20,419,24],[408,22,419,26],[409,12,420,20],[409,16,420,24],[409,17,420,25,"log"],[409,20,420,28],[409,21,420,29],[409,28,420,36],[409,30,420,38],[409,59,420,67],[409,61,420,69,"e"],[409,62,420,70],[409,63,420,71],[410,10,421,16],[411,8,422,12],[412,8,423,12],[413,8,424,12],[413,12,424,16,"msg"],[413,15,424,19],[413,16,424,20,"ref"],[413,19,424,23],[413,23,424,27,"msg"],[413,26,424,30],[413,27,424,31,"ref"],[413,30,424,34],[413,35,424,39],[413,39,424,43],[413,40,424,44,"pendingHeartbeatRef"],[413,59,424,63],[413,61,424,65],[414,10,425,16],[414,14,425,20],[414,15,425,21,"pendingHeartbeatRef"],[414,34,425,40],[414,37,425,43],[414,41,425,47],[415,8,426,12],[416,8,427,12],[417,8,428,12],[417,14,428,18],[418,10,428,20,"topic"],[418,15,428,25],[419,10,428,27,"event"],[419,15,428,32],[420,10,428,34,"payload"],[420,17,428,41],[421,10,428,43,"ref"],[422,8,428,47],[422,9,428,48],[422,12,428,51,"msg"],[422,15,428,54],[423,8,429,12],[423,14,429,18,"refString"],[423,23,429,27],[423,26,429,30,"ref"],[423,29,429,33],[423,32,429,36],[423,36,429,40,"ref"],[423,39,429,43],[423,42,429,46],[423,45,429,49],[423,47,429,51],[424,8,430,12],[424,14,430,18,"status"],[424,20,430,24],[424,23,430,27,"payload"],[424,30,430,34],[424,31,430,35,"status"],[424,37,430,41],[424,41,430,45],[424,43,430,47],[425,8,431,12],[425,12,431,16],[425,13,431,17,"log"],[425,16,431,20],[425,17,431,21],[425,26,431,30],[425,28,431,32],[425,31,431,35,"status"],[425,37,431,41],[425,41,431,45,"topic"],[425,46,431,50],[425,50,431,54,"event"],[425,55,431,59],[425,59,431,63,"refString"],[425,68,431,72],[425,70,431,74],[425,71,431,75,"trim"],[425,75,431,79],[425,76,431,80],[425,77,431,81],[425,79,431,83,"payload"],[425,86,431,90],[425,87,431,91],[426,8,432,12],[427,8,433,12],[427,12,433,16],[427,13,433,17,"channels"],[427,21,433,25],[427,22,434,17,"filter"],[427,28,434,23],[427,29,434,25,"channel"],[427,36,434,32],[427,40,434,37,"channel"],[427,47,434,44],[427,48,434,45,"_isMember"],[427,57,434,54],[427,58,434,55,"topic"],[427,63,434,60],[427,64,434,61],[427,65,434,62],[427,66,435,17,"forEach"],[427,73,435,24],[427,74,435,26,"channel"],[427,81,435,33],[427,85,435,38,"channel"],[427,92,435,45],[427,93,435,46,"_trigger"],[427,101,435,54],[427,102,435,55,"event"],[427,107,435,60],[427,109,435,62,"payload"],[427,116,435,69],[427,118,435,71,"ref"],[427,121,435,74],[427,122,435,75],[427,123,435,76],[428,8,436,12],[428,12,436,16],[428,13,436,17,"_triggerStateCallbacks"],[428,35,436,39],[428,36,436,40],[428,45,436,49],[428,47,436,51,"msg"],[428,50,436,54],[428,51,436,55],[429,6,437,8],[429,7,437,9],[429,8,437,10],[430,4,438,4],[431,4,439,4],[432,0,440,0],[433,0,441,0],[434,0,442,0],[435,4,443,4,"_clearTimer"],[435,15,443,15,"_clearTimer"],[435,16,443,16,"timer"],[435,21,443,21],[435,23,443,23],[436,6,444,8],[436,10,444,12,"_a"],[436,12,444,14],[437,6,445,8],[437,10,445,12,"timer"],[437,15,445,17],[437,20,445,22],[437,31,445,33],[437,35,445,37],[437,39,445,41],[437,40,445,42,"heartbeatTimer"],[437,54,445,56],[437,56,445,58],[438,8,446,12,"clearInterval"],[438,21,446,25],[438,22,446,26],[438,26,446,30],[438,27,446,31,"heartbeatTimer"],[438,41,446,45],[438,42,446,46],[439,8,447,12],[439,12,447,16],[439,13,447,17,"heartbeatTimer"],[439,27,447,31],[439,30,447,34,"undefined"],[439,39,447,43],[440,6,448,8],[440,7,448,9],[440,13,449,13],[440,17,449,17,"timer"],[440,22,449,22],[440,27,449,27],[440,38,449,38],[440,40,449,40],[441,8,450,12],[441,9,450,13,"_a"],[441,11,450,15],[441,14,450,18],[441,18,450,22],[441,19,450,23,"reconnectTimer"],[441,33,450,37],[441,39,450,43],[441,43,450,47],[441,47,450,51,"_a"],[441,49,450,53],[441,54,450,58],[441,59,450,63],[441,60,450,64],[441,63,450,67],[441,68,450,72],[441,69,450,73],[441,72,450,76,"_a"],[441,74,450,78],[441,75,450,79,"reset"],[441,80,450,84],[441,81,450,85],[441,82,450,86],[442,6,451,8],[443,4,452,4],[444,4,453,4],[445,0,454,0],[446,0,455,0],[447,0,456,0],[448,4,457,4,"_clearAllTimers"],[448,19,457,19,"_clearAllTimers"],[448,20,457,19],[448,22,457,22],[449,6,458,8],[449,10,458,12],[449,11,458,13,"_clearTimer"],[449,22,458,24],[449,23,458,25],[449,34,458,36],[449,35,458,37],[450,6,459,8],[450,10,459,12],[450,11,459,13,"_clearTimer"],[450,22,459,24],[450,23,459,25],[450,34,459,36],[450,35,459,37],[451,4,460,4],[452,4,461,4],[453,0,462,0],[454,0,463,0],[455,0,464,0],[456,4,465,4,"_setupConnectionHandlers"],[456,28,465,28,"_setupConnectionHandlers"],[456,29,465,28],[456,31,465,31],[457,6,466,8],[457,10,466,12],[457,11,466,13],[457,15,466,17],[457,16,466,18,"conn"],[457,20,466,22],[457,22,467,12],[458,6,468,8],[459,6,469,8],[459,10,469,12],[459,22,469,24],[459,26,469,28],[459,30,469,32],[459,31,469,33,"conn"],[459,35,469,37],[459,37,469,39],[460,8,470,12],[461,8,471,12],[461,12,471,16],[461,13,471,17,"conn"],[461,17,471,21],[461,18,471,22,"binaryType"],[461,28,471,32],[461,31,471,35],[461,44,471,48],[462,6,472,8],[463,6,473,8],[463,10,473,12],[463,11,473,13,"conn"],[463,15,473,17],[463,16,473,18,"onopen"],[463,22,473,24],[463,25,473,27],[463,31,473,33],[463,35,473,37],[463,36,473,38,"_onConnOpen"],[463,47,473,49],[463,48,473,50],[463,49,473,51],[464,6,474,8],[464,10,474,12],[464,11,474,13,"conn"],[464,15,474,17],[464,16,474,18,"onerror"],[464,23,474,25],[464,26,474,29,"error"],[464,31,474,34],[464,35,474,39],[464,39,474,43],[464,40,474,44,"_onConnError"],[464,52,474,56],[464,53,474,57,"error"],[464,58,474,62],[464,59,474,63],[465,6,475,8],[465,10,475,12],[465,11,475,13,"conn"],[465,15,475,17],[465,16,475,18,"onmessage"],[465,25,475,27],[465,28,475,31,"event"],[465,33,475,36],[465,37,475,41],[465,41,475,45],[465,42,475,46,"_onConnMessage"],[465,56,475,60],[465,57,475,61,"event"],[465,62,475,66],[465,63,475,67],[466,6,476,8],[466,10,476,12],[466,11,476,13,"conn"],[466,15,476,17],[466,16,476,18,"onclose"],[466,23,476,25],[466,26,476,29,"event"],[466,31,476,34],[466,35,476,39],[466,39,476,43],[466,40,476,44,"_onConnClose"],[466,52,476,56],[466,53,476,57,"event"],[466,58,476,62],[466,59,476,63],[467,4,477,4],[468,4,478,4],[469,0,479,0],[470,0,480,0],[471,0,481,0],[472,4,482,4,"_teardownConnection"],[472,23,482,23,"_teardownConnection"],[472,24,482,23],[472,26,482,26],[473,6,483,8],[473,10,483,12],[473,14,483,16],[473,15,483,17,"conn"],[473,19,483,21],[473,21,483,23],[474,8,484,12],[474,12,484,16],[474,13,484,17,"conn"],[474,17,484,21],[474,18,484,22,"onopen"],[474,24,484,28],[474,27,484,31],[474,31,484,35],[475,8,485,12],[475,12,485,16],[475,13,485,17,"conn"],[475,17,485,21],[475,18,485,22,"onerror"],[475,25,485,29],[475,28,485,32],[475,32,485,36],[476,8,486,12],[476,12,486,16],[476,13,486,17,"conn"],[476,17,486,21],[476,18,486,22,"onmessage"],[476,27,486,31],[476,30,486,34],[476,34,486,38],[477,8,487,12],[477,12,487,16],[477,13,487,17,"conn"],[477,17,487,21],[477,18,487,22,"onclose"],[477,25,487,29],[477,28,487,32],[477,32,487,36],[478,8,488,12],[478,12,488,16],[478,13,488,17,"conn"],[478,17,488,21],[478,20,488,24],[478,24,488,28],[479,6,489,8],[480,6,490,8],[480,10,490,12],[480,11,490,13,"_clearAllTimers"],[480,26,490,28],[480,27,490,29],[480,28,490,30],[481,6,491,8],[481,10,491,12],[481,11,491,13,"channels"],[481,19,491,21],[481,20,491,22,"forEach"],[481,27,491,29],[481,28,491,31,"channel"],[481,35,491,38],[481,39,491,43,"channel"],[481,46,491,50],[481,47,491,51,"teardown"],[481,55,491,59],[481,56,491,60],[481,57,491,61],[481,58,491,62],[482,4,492,4],[483,4,493,4],[484,4,494,4,"_onConnOpen"],[484,15,494,15,"_onConnOpen"],[484,16,494,15],[484,18,494,18],[485,6,495,8],[485,10,495,12],[485,11,495,13,"_setConnectionState"],[485,30,495,32],[485,31,495,33],[485,42,495,44],[485,43,495,45],[486,6,496,8],[486,10,496,12],[486,11,496,13,"log"],[486,14,496,16],[486,15,496,17],[486,26,496,28],[486,28,496,30],[486,44,496,46],[486,48,496,50],[486,49,496,51,"endpointURL"],[486,60,496,62],[486,61,496,63],[486,62,496,64],[486,64,496,66],[486,65,496,67],[487,6,497,8],[487,10,497,12],[487,11,497,13,"flushSendBuffer"],[487,26,497,28],[487,27,497,29],[487,28,497,30],[488,6,498,8],[488,10,498,12],[488,11,498,13,"_clearTimer"],[488,22,498,24],[488,23,498,25],[488,34,498,36],[488,35,498,37],[489,6,499,8],[489,10,499,12],[489,11,499,13],[489,15,499,17],[489,16,499,18,"worker"],[489,22,499,24],[489,24,499,26],[490,8,500,12],[490,12,500,16],[490,13,500,17,"_startHeartbeat"],[490,28,500,32],[490,29,500,33],[490,30,500,34],[491,6,501,8],[491,7,501,9],[491,13,502,13],[492,8,503,12],[492,12,503,16],[492,13,503,17],[492,17,503,21],[492,18,503,22,"workerRef"],[492,27,503,31],[492,29,503,33],[493,10,504,16],[493,14,504,20],[493,15,504,21,"_startWorkerHeartbeat"],[493,36,504,42],[493,37,504,43],[493,38,504,44],[494,8,505,12],[495,6,506,8],[496,6,507,8],[496,10,507,12],[496,11,507,13,"_triggerStateCallbacks"],[496,33,507,35],[496,34,507,36],[496,40,507,42],[496,41,507,43],[497,4,508,4],[498,4,509,4],[499,4,510,4,"_startHeartbeat"],[499,19,510,19,"_startHeartbeat"],[499,20,510,19],[499,22,510,22],[500,6,511,8],[500,10,511,12],[500,11,511,13,"heartbeatTimer"],[500,25,511,27],[500,29,511,31,"clearInterval"],[500,42,511,44],[500,43,511,45],[500,47,511,49],[500,48,511,50,"heartbeatTimer"],[500,62,511,64],[500,63,511,65],[501,6,512,8],[501,10,512,12],[501,11,512,13,"heartbeatTimer"],[501,25,512,27],[501,28,512,30,"setInterval"],[501,39,512,41],[501,40,512,42],[501,46,512,48],[501,50,512,52],[501,51,512,53,"sendHeartbeat"],[501,64,512,66],[501,65,512,67],[501,66,512,68],[501,68,512,70],[501,72,512,74],[501,73,512,75,"heartbeatIntervalMs"],[501,92,512,94],[501,93,512,95],[502,4,513,4],[503,4,514,4],[504,4,515,4,"_startWorkerHeartbeat"],[504,25,515,25,"_startWorkerHeartbeat"],[504,26,515,25],[504,28,515,28],[505,6,516,8],[505,10,516,12],[505,14,516,16],[505,15,516,17,"workerUrl"],[505,24,516,26],[505,26,516,28],[506,8,517,12],[506,12,517,16],[506,13,517,17,"log"],[506,16,517,20],[506,17,517,21],[506,25,517,29],[506,27,517,31],[506,55,517,59],[506,59,517,63],[506,60,517,64,"workerUrl"],[506,69,517,73],[506,71,517,75],[506,72,517,76],[507,6,518,8],[507,7,518,9],[507,13,519,13],[508,8,520,12],[508,12,520,16],[508,13,520,17,"log"],[508,16,520,20],[508,17,520,21],[508,25,520,29],[508,27,520,31],[508,52,520,56],[508,53,520,57],[509,6,521,8],[510,6,522,8],[510,12,522,14,"objectUrl"],[510,21,522,23],[510,24,522,26],[510,28,522,30],[510,29,522,31,"_workerObjectUrl"],[510,45,522,47],[510,46,522,48],[510,50,522,52],[510,51,522,53,"workerUrl"],[510,60,522,62],[510,61,522,63],[511,6,523,8],[511,10,523,12],[511,11,523,13,"workerRef"],[511,20,523,22],[511,23,523,25],[511,27,523,29,"Worker"],[511,33,523,35],[511,34,523,36,"objectUrl"],[511,43,523,45],[511,44,523,46],[512,6,524,8],[512,10,524,12],[512,11,524,13,"workerRef"],[512,20,524,22],[512,21,524,23,"onerror"],[512,28,524,30],[512,31,524,34,"error"],[512,36,524,39],[512,40,524,44],[513,8,525,12],[513,12,525,16],[513,13,525,17,"log"],[513,16,525,20],[513,17,525,21],[513,25,525,29],[513,27,525,31],[513,41,525,45],[513,43,525,47,"error"],[513,48,525,52],[513,49,525,53,"message"],[513,56,525,60],[513,57,525,61],[514,8,526,12],[514,12,526,16],[514,13,526,17,"workerRef"],[514,22,526,26],[514,23,526,27,"terminate"],[514,32,526,36],[514,33,526,37],[514,34,526,38],[515,6,527,8],[515,7,527,9],[516,6,528,8],[516,10,528,12],[516,11,528,13,"workerRef"],[516,20,528,22],[516,21,528,23,"onmessage"],[516,30,528,32],[516,33,528,36,"event"],[516,38,528,41],[516,42,528,46],[517,8,529,12],[517,12,529,16,"event"],[517,17,529,21],[517,18,529,22,"data"],[517,22,529,26],[517,23,529,27,"event"],[517,28,529,32],[517,33,529,37],[517,44,529,48],[517,46,529,50],[518,10,530,16],[518,14,530,20],[518,15,530,21,"sendHeartbeat"],[518,28,530,34],[518,29,530,35],[518,30,530,36],[519,8,531,12],[520,6,532,8],[520,7,532,9],[521,6,533,8],[521,10,533,12],[521,11,533,13,"workerRef"],[521,20,533,22],[521,21,533,23,"postMessage"],[521,32,533,34],[521,33,533,35],[522,8,534,12,"event"],[522,13,534,17],[522,15,534,19],[522,22,534,26],[523,8,535,12,"interval"],[523,16,535,20],[523,18,535,22],[523,22,535,26],[523,23,535,27,"heartbeatIntervalMs"],[524,6,536,8],[524,7,536,9],[524,8,536,10],[525,4,537,4],[526,4,538,4],[527,4,539,4,"_onConnClose"],[527,16,539,16,"_onConnClose"],[527,17,539,17,"event"],[527,22,539,22],[527,24,539,24],[528,6,540,8],[528,10,540,12,"_a"],[528,12,540,14],[529,6,541,8],[529,10,541,12],[529,11,541,13,"_setConnectionState"],[529,30,541,32],[529,31,541,33],[529,45,541,47],[529,46,541,48],[530,6,542,8],[530,10,542,12],[530,11,542,13,"log"],[530,14,542,16],[530,15,542,17],[530,26,542,28],[530,28,542,30],[530,35,542,37],[530,37,542,39,"event"],[530,42,542,44],[530,43,542,45],[531,6,543,8],[531,10,543,12],[531,11,543,13,"_triggerChanError"],[531,28,543,30],[531,29,543,31],[531,30,543,32],[532,6,544,8],[532,10,544,12],[532,11,544,13,"_clearTimer"],[532,22,544,24],[532,23,544,25],[532,34,544,36],[532,35,544,37],[533,6,545,8],[534,6,546,8],[534,10,546,12],[534,11,546,13],[534,15,546,17],[534,16,546,18,"_wasManualDisconnect"],[534,36,546,38],[534,38,546,40],[535,8,547,12],[535,9,547,13,"_a"],[535,11,547,15],[535,14,547,18],[535,18,547,22],[535,19,547,23,"reconnectTimer"],[535,33,547,37],[535,39,547,43],[535,43,547,47],[535,47,547,51,"_a"],[535,49,547,53],[535,54,547,58],[535,59,547,63],[535,60,547,64],[535,63,547,67],[535,68,547,72],[535,69,547,73],[535,72,547,76,"_a"],[535,74,547,78],[535,75,547,79,"scheduleTimeout"],[535,90,547,94],[535,91,547,95],[535,92,547,96],[536,6,548,8],[537,6,549,8],[537,10,549,12],[537,11,549,13,"_triggerStateCallbacks"],[537,33,549,35],[537,34,549,36],[537,41,549,43],[537,43,549,45,"event"],[537,48,549,50],[537,49,549,51],[538,4,550,4],[539,4,551,4],[540,4,552,4,"_onConnError"],[540,16,552,16,"_onConnError"],[540,17,552,17,"error"],[540,22,552,22],[540,24,552,24],[541,6,553,8],[541,10,553,12],[541,11,553,13,"_setConnectionState"],[541,30,553,32],[541,31,553,33],[541,45,553,47],[541,46,553,48],[542,6,554,8],[542,10,554,12],[542,11,554,13,"log"],[542,14,554,16],[542,15,554,17],[542,26,554,28],[542,28,554,30],[542,31,554,33,"error"],[542,36,554,38],[542,38,554,40],[542,39,554,41],[543,6,555,8],[543,10,555,12],[543,11,555,13,"_triggerChanError"],[543,28,555,30],[543,29,555,31],[543,30,555,32],[544,6,556,8],[544,10,556,12],[544,11,556,13,"_triggerStateCallbacks"],[544,33,556,35],[544,34,556,36],[544,41,556,43],[544,43,556,45,"error"],[544,48,556,50],[544,49,556,51],[545,4,557,4],[546,4,558,4],[547,4,559,4,"_triggerChanError"],[547,21,559,21,"_triggerChanError"],[547,22,559,21],[547,24,559,24],[548,6,560,8],[548,10,560,12],[548,11,560,13,"channels"],[548,19,560,21],[548,20,560,22,"forEach"],[548,27,560,29],[548,28,560,31,"channel"],[548,35,560,38],[548,39,560,43,"channel"],[548,46,560,50],[548,47,560,51,"_trigger"],[548,55,560,59],[548,56,560,60,"CHANNEL_EVENTS"],[548,81,560,74],[548,82,560,75,"error"],[548,87,560,80],[548,88,560,81],[548,89,560,82],[549,4,561,4],[550,4,562,4],[551,4,563,4,"_appendParams"],[551,17,563,17,"_appendParams"],[551,18,563,18,"url"],[551,21,563,21],[551,23,563,23,"params"],[551,29,563,29],[551,31,563,31],[552,6,564,8],[552,10,564,12,"Object"],[552,16,564,18],[552,17,564,19,"keys"],[552,21,564,23],[552,22,564,24,"params"],[552,28,564,30],[552,29,564,31],[552,30,564,32,"length"],[552,36,564,38],[552,41,564,43],[552,42,564,44],[552,44,564,46],[553,8,565,12],[553,15,565,19,"url"],[553,18,565,22],[554,6,566,8],[555,6,567,8],[555,12,567,14,"prefix"],[555,18,567,20],[555,21,567,23,"url"],[555,24,567,26],[555,25,567,27,"match"],[555,30,567,32],[555,31,567,33],[555,35,567,37],[555,36,567,38],[555,39,567,41],[555,42,567,44],[555,45,567,47],[555,48,567,50],[556,6,568,8],[556,12,568,14,"query"],[556,17,568,19],[556,20,568,22],[556,24,568,26,"URLSearchParams"],[556,39,568,41],[556,40,568,42,"params"],[556,46,568,48],[556,47,568,49],[557,6,569,8],[557,13,569,15],[557,16,569,18,"url"],[557,19,569,21],[557,22,569,24,"prefix"],[557,28,569,30],[557,31,569,33,"query"],[557,36,569,38],[557,38,569,40],[558,4,570,4],[559,4,571,4,"_workerObjectUrl"],[559,20,571,20,"_workerObjectUrl"],[559,21,571,21,"url"],[559,24,571,24],[559,26,571,26],[560,6,572,8],[560,10,572,12,"result_url"],[560,20,572,22],[561,6,573,8],[561,10,573,12,"url"],[561,13,573,15],[561,15,573,17],[562,8,574,12,"result_url"],[562,18,574,22],[562,21,574,25,"url"],[562,24,574,28],[563,6,575,8],[563,7,575,9],[563,13,576,13],[564,8,577,12],[564,14,577,18,"blob"],[564,18,577,22],[564,21,577,25],[564,25,577,29,"Blob"],[564,29,577,33],[564,30,577,34],[564,31,577,35,"WORKER_SCRIPT"],[564,44,577,48],[564,45,577,49],[564,47,577,51],[565,10,577,53,"type"],[565,14,577,57],[565,16,577,59],[566,8,577,84],[566,9,577,85],[566,10,577,86],[567,8,578,12,"result_url"],[567,18,578,22],[567,21,578,25,"URL"],[567,24,578,28],[567,25,578,29,"createObjectURL"],[567,40,578,44],[567,41,578,45,"blob"],[567,45,578,49],[567,46,578,50],[568,6,579,8],[569,6,580,8],[569,13,580,15,"result_url"],[569,23,580,25],[570,4,581,4],[571,4,582,4],[572,0,583,0],[573,0,584,0],[574,0,585,0],[575,4,586,4,"_setConnectionState"],[575,23,586,23,"_setConnectionState"],[575,24,586,24,"state"],[575,29,586,29],[575,31,586,31,"manual"],[575,37,586,37],[575,40,586,40],[575,45,586,45],[575,47,586,47],[576,6,587,8],[576,10,587,12],[576,11,587,13,"_connectionState"],[576,27,587,29],[576,30,587,32,"state"],[576,35,587,37],[577,6,588,8],[577,10,588,12,"state"],[577,15,588,17],[577,20,588,22],[577,32,588,34],[577,34,588,36],[578,8,589,12],[578,12,589,16],[578,13,589,17,"_wasManualDisconnect"],[578,33,589,37],[578,36,589,40],[578,41,589,45],[579,6,590,8],[579,7,590,9],[579,13,591,13],[579,17,591,17,"state"],[579,22,591,22],[579,27,591,27],[579,42,591,42],[579,44,591,44],[580,8,592,12],[580,12,592,16],[580,13,592,17,"_wasManualDisconnect"],[580,33,592,37],[580,36,592,40,"manual"],[580,42,592,46],[581,6,593,8],[582,4,594,4],[583,4,595,4],[584,0,596,0],[585,0,597,0],[586,0,598,0],[587,4,599,4],[587,10,599,10,"_performAuth"],[587,22,599,22,"_performAuth"],[587,23,599,23,"token"],[587,28,599,28],[587,31,599,31],[587,35,599,35],[587,37,599,37],[588,6,600,8],[588,10,600,12,"tokenToSend"],[588,21,600,23],[589,6,601,8],[589,10,601,12,"token"],[589,15,601,17],[589,17,601,19],[590,8,602,12,"tokenToSend"],[590,19,602,23],[590,22,602,26,"token"],[590,27,602,31],[591,6,603,8],[591,7,603,9],[591,13,604,13],[591,17,604,17],[591,21,604,21],[591,22,604,22,"accessToken"],[591,33,604,33],[591,35,604,35],[592,8,605,12],[593,8,606,12,"tokenToSend"],[593,19,606,23],[593,22,606,26],[593,28,606,32],[593,32,606,36],[593,33,606,37,"accessToken"],[593,44,606,48],[593,45,606,49],[593,46,606,50],[594,6,607,8],[594,7,607,9],[594,13,608,13],[595,8,609,12,"tokenToSend"],[595,19,609,23],[595,22,609,26],[595,26,609,30],[595,27,609,31,"accessTokenValue"],[595,43,609,47],[596,6,610,8],[597,6,611,8],[597,10,611,12],[597,14,611,16],[597,15,611,17,"accessTokenValue"],[597,31,611,33],[597,35,611,37,"tokenToSend"],[597,46,611,48],[597,48,611,50],[598,8,612,12],[598,12,612,16],[598,13,612,17,"accessTokenValue"],[598,29,612,33],[598,32,612,36,"tokenToSend"],[598,43,612,47],[599,8,613,12],[599,12,613,16],[599,13,613,17,"channels"],[599,21,613,25],[599,22,613,26,"forEach"],[599,29,613,33],[599,30,613,35,"channel"],[599,37,613,42],[599,41,613,47],[600,10,614,16],[600,16,614,22,"payload"],[600,23,614,29],[600,26,614,32],[601,12,615,20,"access_token"],[601,24,615,32],[601,26,615,34,"tokenToSend"],[601,37,615,45],[602,12,616,20,"version"],[602,19,616,27],[602,21,616,29,"DEFAULT_VERSION"],[603,10,617,16],[603,11,617,17],[604,10,618,16,"tokenToSend"],[604,21,618,27],[604,25,618,31,"channel"],[604,32,618,38],[604,33,618,39,"updateJoinPayload"],[604,50,618,56],[604,51,618,57,"payload"],[604,58,618,64],[604,59,618,65],[605,10,619,16],[605,14,619,20,"channel"],[605,21,619,27],[605,22,619,28,"joinedOnce"],[605,32,619,38],[605,36,619,42,"channel"],[605,43,619,49],[605,44,619,50,"_isJoined"],[605,53,619,59],[605,54,619,60],[605,55,619,61],[605,57,619,63],[606,12,620,20,"channel"],[606,19,620,27],[606,20,620,28,"_push"],[606,25,620,33],[606,26,620,34,"CHANNEL_EVENTS"],[606,51,620,48],[606,52,620,49,"access_token"],[606,64,620,61],[606,66,620,63],[607,14,621,24,"access_token"],[607,26,621,36],[607,28,621,38,"tokenToSend"],[608,12,622,20],[608,13,622,21],[608,14,622,22],[609,10,623,16],[610,8,624,12],[610,9,624,13],[610,10,624,14],[611,6,625,8],[612,4,626,4],[613,4,627,4],[614,0,628,0],[615,0,629,0],[616,0,630,0],[617,4,631,4],[617,10,631,10,"_waitForAuthIfNeeded"],[617,30,631,30,"_waitForAuthIfNeeded"],[617,31,631,30],[617,33,631,33],[618,6,632,8],[618,10,632,12],[618,14,632,16],[618,15,632,17,"_authPromise"],[618,27,632,29],[618,29,632,31],[619,8,633,12],[619,14,633,18],[619,18,633,22],[619,19,633,23,"_authPromise"],[619,31,633,35],[620,6,634,8],[621,4,635,4],[622,4,636,4],[623,0,637,0],[624,0,638,0],[625,0,639,0],[626,4,640,4,"_setAuthSafely"],[626,18,640,18,"_setAuthSafely"],[626,19,640,19,"context"],[626,26,640,26],[626,29,640,29],[626,38,640,38],[626,40,640,40],[627,6,641,8],[627,10,641,12],[627,11,641,13,"setAuth"],[627,18,641,20],[627,19,641,21],[627,20,641,22],[627,21,641,23,"catch"],[627,26,641,28],[627,27,641,30,"e"],[627,28,641,31],[627,32,641,36],[628,8,642,12],[628,12,642,16],[628,13,642,17,"log"],[628,16,642,20],[628,17,642,21],[628,24,642,28],[628,26,642,30],[628,51,642,55,"context"],[628,58,642,62],[628,60,642,64],[628,62,642,66,"e"],[628,63,642,67],[628,64,642,68],[629,6,643,8],[629,7,643,9],[629,8,643,10],[630,4,644,4],[631,4,645,4],[632,0,646,0],[633,0,647,0],[634,0,648,0],[635,4,649,4,"_triggerStateCallbacks"],[635,26,649,26,"_triggerStateCallbacks"],[635,27,649,27,"event"],[635,32,649,32],[635,34,649,34,"data"],[635,38,649,38],[635,40,649,40],[636,6,650,8],[636,10,650,12],[637,8,651,12],[637,12,651,16],[637,13,651,17,"stateChangeCallbacks"],[637,33,651,37],[637,34,651,38,"event"],[637,39,651,43],[637,40,651,44],[637,41,651,45,"forEach"],[637,48,651,52],[637,49,651,54,"callback"],[637,57,651,62],[637,61,651,67],[638,10,652,16],[638,14,652,20],[639,12,653,20,"callback"],[639,20,653,28],[639,21,653,29,"data"],[639,25,653,33],[639,26,653,34],[640,10,654,16],[640,11,654,17],[640,12,655,16],[640,19,655,23,"e"],[640,20,655,24],[640,22,655,26],[641,12,656,20],[641,16,656,24],[641,17,656,25,"log"],[641,20,656,28],[641,21,656,29],[641,28,656,36],[641,30,656,38],[641,42,656,50,"event"],[641,47,656,55],[641,58,656,66],[641,60,656,68,"e"],[641,61,656,69],[641,62,656,70],[642,10,657,16],[643,8,658,12],[643,9,658,13],[643,10,658,14],[644,6,659,8],[644,7,659,9],[644,8,660,8],[644,15,660,15,"e"],[644,16,660,16],[644,18,660,18],[645,8,661,12],[645,12,661,16],[645,13,661,17,"log"],[645,16,661,20],[645,17,661,21],[645,24,661,28],[645,26,661,30],[645,46,661,50,"event"],[645,51,661,55],[645,63,661,67],[645,65,661,69,"e"],[645,66,661,70],[645,67,661,71],[646,6,662,8],[647,4,663,4],[648,4,664,4],[649,0,665,0],[650,0,666,0],[651,0,667,0],[652,4,668,4,"_setupReconnectionTimer"],[652,27,668,27,"_setupReconnectionTimer"],[652,28,668,27],[652,30,668,30],[653,6,669,8],[653,10,669,12],[653,11,669,13,"reconnectTimer"],[653,25,669,27],[653,28,669,30],[653,32,669,34,"Timer"],[653,46,669,39],[653,47,669,40],[653,59,669,52],[654,8,670,12,"setTimeout"],[654,18,670,22],[654,19,670,23],[654,31,670,35],[655,10,671,16],[655,16,671,22],[655,20,671,26],[655,21,671,27,"_waitForAuthIfNeeded"],[655,41,671,47],[655,42,671,48],[655,43,671,49],[656,10,672,16],[656,14,672,20],[656,15,672,21],[656,19,672,25],[656,20,672,26,"isConnected"],[656,31,672,37],[656,32,672,38],[656,33,672,39],[656,35,672,41],[657,12,673,20],[657,16,673,24],[657,17,673,25,"connect"],[657,24,673,32],[657,25,673,33],[657,26,673,34],[658,10,674,16],[659,8,675,12],[659,9,675,13],[659,11,675,15,"CONNECTION_TIMEOUTS"],[659,30,675,34],[659,31,675,35,"RECONNECT_DELAY"],[659,46,675,50],[659,47,675,51],[660,6,676,8],[660,7,676,9],[660,9,676,11],[660,13,676,15],[660,14,676,16,"reconnectAfterMs"],[660,30,676,32],[660,31,676,33],[661,4,677,4],[662,4,678,4],[663,0,679,0],[664,0,680,0],[665,0,681,0],[666,4,682,4,"_initializeOptions"],[666,22,682,22,"_initializeOptions"],[666,23,682,23,"options"],[666,30,682,30],[666,32,682,32],[667,6,683,8],[667,10,683,12,"_a"],[667,12,683,14],[667,14,683,16,"_b"],[667,16,683,18],[667,18,683,20,"_c"],[667,20,683,22],[667,22,683,24,"_d"],[667,24,683,26],[667,26,683,28,"_e"],[667,28,683,30],[667,30,683,32,"_f"],[667,32,683,34],[667,34,683,36,"_g"],[667,36,683,38],[667,38,683,40,"_h"],[667,40,683,42],[667,42,683,44,"_j"],[667,44,683,46],[668,6,684,8],[669,6,685,8],[669,10,685,12],[669,11,685,13,"transport"],[669,20,685,22],[669,23,685,25],[669,24,685,26,"_a"],[669,26,685,28],[669,29,685,31,"options"],[669,36,685,38],[669,41,685,43],[669,45,685,47],[669,49,685,51,"options"],[669,56,685,58],[669,61,685,63],[669,66,685,68],[669,67,685,69],[669,70,685,72],[669,75,685,77],[669,76,685,78],[669,79,685,81,"options"],[669,86,685,88],[669,87,685,89,"transport"],[669,96,685,98],[669,102,685,104],[669,106,685,108],[669,110,685,112,"_a"],[669,112,685,114],[669,117,685,119],[669,122,685,124],[669,123,685,125],[669,126,685,128,"_a"],[669,128,685,130],[669,131,685,133],[669,135,685,137],[670,6,686,8],[670,10,686,12],[670,11,686,13,"timeout"],[670,18,686,20],[670,21,686,23],[670,22,686,24,"_b"],[670,24,686,26],[670,27,686,29,"options"],[670,34,686,36],[670,39,686,41],[670,43,686,45],[670,47,686,49,"options"],[670,54,686,56],[670,59,686,61],[670,64,686,66],[670,65,686,67],[670,68,686,70],[670,73,686,75],[670,74,686,76],[670,77,686,79,"options"],[670,84,686,86],[670,85,686,87,"timeout"],[670,92,686,94],[670,98,686,100],[670,102,686,104],[670,106,686,108,"_b"],[670,108,686,110],[670,113,686,115],[670,118,686,120],[670,119,686,121],[670,122,686,124,"_b"],[670,124,686,126],[670,127,686,129,"DEFAULT_TIMEOUT"],[670,153,686,144],[671,6,687,8],[671,10,687,12],[671,11,687,13,"heartbeatIntervalMs"],[671,30,687,32],[671,33,688,12],[671,34,688,13,"_c"],[671,36,688,15],[671,39,688,18,"options"],[671,46,688,25],[671,51,688,30],[671,55,688,34],[671,59,688,38,"options"],[671,66,688,45],[671,71,688,50],[671,76,688,55],[671,77,688,56],[671,80,688,59],[671,85,688,64],[671,86,688,65],[671,89,688,68,"options"],[671,96,688,75],[671,97,688,76,"heartbeatIntervalMs"],[671,116,688,95],[671,122,688,101],[671,126,688,105],[671,130,688,109,"_c"],[671,132,688,111],[671,137,688,116],[671,142,688,121],[671,143,688,122],[671,146,688,125,"_c"],[671,148,688,127],[671,151,688,130,"CONNECTION_TIMEOUTS"],[671,170,688,149],[671,171,688,150,"HEARTBEAT_INTERVAL"],[671,189,688,168],[672,6,689,8],[672,10,689,12],[672,11,689,13,"worker"],[672,17,689,19],[672,20,689,22],[672,21,689,23,"_d"],[672,23,689,25],[672,26,689,28,"options"],[672,33,689,35],[672,38,689,40],[672,42,689,44],[672,46,689,48,"options"],[672,53,689,55],[672,58,689,60],[672,63,689,65],[672,64,689,66],[672,67,689,69],[672,72,689,74],[672,73,689,75],[672,76,689,78,"options"],[672,83,689,85],[672,84,689,86,"worker"],[672,90,689,92],[672,96,689,98],[672,100,689,102],[672,104,689,106,"_d"],[672,106,689,108],[672,111,689,113],[672,116,689,118],[672,117,689,119],[672,120,689,122,"_d"],[672,122,689,124],[672,125,689,127],[672,130,689,132],[673,6,690,8],[673,10,690,12],[673,11,690,13,"accessToken"],[673,22,690,24],[673,25,690,27],[673,26,690,28,"_e"],[673,28,690,30],[673,31,690,33,"options"],[673,38,690,40],[673,43,690,45],[673,47,690,49],[673,51,690,53,"options"],[673,58,690,60],[673,63,690,65],[673,68,690,70],[673,69,690,71],[673,72,690,74],[673,77,690,79],[673,78,690,80],[673,81,690,83,"options"],[673,88,690,90],[673,89,690,91,"accessToken"],[673,100,690,102],[673,106,690,108],[673,110,690,112],[673,114,690,116,"_e"],[673,116,690,118],[673,121,690,123],[673,126,690,128],[673,127,690,129],[673,130,690,132,"_e"],[673,132,690,134],[673,135,690,137],[673,139,690,141],[674,6,691,8],[674,10,691,12],[674,11,691,13,"heartbeatCallback"],[674,28,691,30],[674,31,691,33],[674,32,691,34,"_f"],[674,34,691,36],[674,37,691,39,"options"],[674,44,691,46],[674,49,691,51],[674,53,691,55],[674,57,691,59,"options"],[674,64,691,66],[674,69,691,71],[674,74,691,76],[674,75,691,77],[674,78,691,80],[674,83,691,85],[674,84,691,86],[674,87,691,89,"options"],[674,94,691,96],[674,95,691,97,"heartbeatCallback"],[674,112,691,114],[674,118,691,120],[674,122,691,124],[674,126,691,128,"_f"],[674,128,691,130],[674,133,691,135],[674,138,691,140],[674,139,691,141],[674,142,691,144,"_f"],[674,144,691,146],[674,147,691,149,"noop"],[674,151,691,153],[675,6,692,8],[676,6,693,8],[676,10,693,12,"options"],[676,17,693,19],[676,22,693,24],[676,26,693,28],[676,30,693,32,"options"],[676,37,693,39],[676,42,693,44],[676,47,693,49],[676,48,693,50],[676,51,693,53],[676,56,693,58],[676,57,693,59],[676,60,693,62,"options"],[676,67,693,69],[676,68,693,70,"params"],[676,74,693,76],[676,76,694,12],[676,80,694,16],[676,81,694,17,"params"],[676,87,694,23],[676,90,694,26,"options"],[676,97,694,33],[676,98,694,34,"params"],[676,104,694,40],[677,6,695,8],[677,10,695,12,"options"],[677,17,695,19],[677,22,695,24],[677,26,695,28],[677,30,695,32,"options"],[677,37,695,39],[677,42,695,44],[677,47,695,49],[677,48,695,50],[677,51,695,53],[677,56,695,58],[677,57,695,59],[677,60,695,62,"options"],[677,67,695,69],[677,68,695,70,"logger"],[677,74,695,76],[677,76,696,12],[677,80,696,16],[677,81,696,17,"logger"],[677,87,696,23],[677,90,696,26,"options"],[677,97,696,33],[677,98,696,34,"logger"],[677,104,696,40],[678,6,697,8],[678,10,697,12],[678,11,697,13,"options"],[678,18,697,20],[678,23,697,25],[678,27,697,29],[678,31,697,33,"options"],[678,38,697,40],[678,43,697,45],[678,48,697,50],[678,49,697,51],[678,52,697,54],[678,57,697,59],[678,58,697,60],[678,61,697,63,"options"],[678,68,697,70],[678,69,697,71,"logLevel"],[678,77,697,79],[678,83,697,85,"options"],[678,90,697,92],[678,95,697,97],[678,99,697,101],[678,103,697,105,"options"],[678,110,697,112],[678,115,697,117],[678,120,697,122],[678,121,697,123],[678,124,697,126],[678,129,697,131],[678,130,697,132],[678,133,697,135,"options"],[678,140,697,142],[678,141,697,143,"log_level"],[678,150,697,152],[678,151,697,153],[678,153,697,155],[679,8,698,12],[679,12,698,16],[679,13,698,17,"logLevel"],[679,21,698,25],[679,24,698,28,"options"],[679,31,698,35],[679,32,698,36,"logLevel"],[679,40,698,44],[679,44,698,48,"options"],[679,51,698,55],[679,52,698,56,"log_level"],[679,61,698,65],[680,8,699,12],[680,12,699,16],[680,13,699,17,"params"],[680,19,699,23],[680,22,699,26,"Object"],[680,28,699,32],[680,29,699,33,"assign"],[680,35,699,39],[680,36,699,40,"Object"],[680,42,699,46],[680,43,699,47,"assign"],[680,49,699,53],[680,50,699,54],[680,51,699,55],[680,52,699,56],[680,54,699,58],[680,58,699,62],[680,59,699,63,"params"],[680,65,699,69],[680,66,699,70],[680,68,699,72],[681,10,699,74,"log_level"],[681,19,699,83],[681,21,699,85],[681,25,699,89],[681,26,699,90,"logLevel"],[682,8,699,99],[682,9,699,100],[682,10,699,101],[683,6,700,8],[684,6,701,8],[685,6,702,8],[685,10,702,12],[685,11,702,13,"reconnectAfterMs"],[685,27,702,29],[685,30,703,12],[685,31,703,13,"_g"],[685,33,703,15],[685,36,703,18,"options"],[685,43,703,25],[685,48,703,30],[685,52,703,34],[685,56,703,38,"options"],[685,63,703,45],[685,68,703,50],[685,73,703,55],[685,74,703,56],[685,77,703,59],[685,82,703,64],[685,83,703,65],[685,86,703,68,"options"],[685,93,703,75],[685,94,703,76,"reconnectAfterMs"],[685,110,703,92],[685,116,703,98],[685,120,703,102],[685,124,703,106,"_g"],[685,126,703,108],[685,131,703,113],[685,136,703,118],[685,137,703,119],[685,140,703,122,"_g"],[685,142,703,124],[685,145,703,129,"tries"],[685,150,703,134],[685,154,703,139],[686,8,704,16],[686,15,704,23,"RECONNECT_INTERVALS"],[686,34,704,42],[686,35,704,43,"tries"],[686,40,704,48],[686,43,704,51],[686,44,704,52],[686,45,704,53],[686,49,704,57,"DEFAULT_RECONNECT_FALLBACK"],[686,75,704,83],[687,6,705,12],[687,7,705,14],[688,6,706,8],[688,10,706,12],[688,11,706,13,"encode"],[688,17,706,19],[688,20,707,12],[688,21,707,13,"_h"],[688,23,707,15],[688,26,707,18,"options"],[688,33,707,25],[688,38,707,30],[688,42,707,34],[688,46,707,38,"options"],[688,53,707,45],[688,58,707,50],[688,63,707,55],[688,64,707,56],[688,67,707,59],[688,72,707,64],[688,73,707,65],[688,76,707,68,"options"],[688,83,707,75],[688,84,707,76,"encode"],[688,90,707,82],[688,96,707,88],[688,100,707,92],[688,104,707,96,"_h"],[688,106,707,98],[688,111,707,103],[688,116,707,108],[688,117,707,109],[688,120,707,112,"_h"],[688,122,707,114],[688,125,707,118],[688,126,707,119,"payload"],[688,133,707,126],[688,135,707,128,"callback"],[688,143,707,136],[688,148,707,141],[689,8,708,16],[689,15,708,23,"callback"],[689,23,708,31],[689,24,708,32,"JSON"],[689,28,708,36],[689,29,708,37,"stringify"],[689,38,708,46],[689,39,708,47,"payload"],[689,46,708,54],[689,47,708,55],[689,48,708,56],[690,6,709,12],[690,7,709,14],[691,6,710,8],[691,10,710,12],[691,11,710,13,"decode"],[691,17,710,19],[691,20,710,22],[691,21,710,23,"_j"],[691,23,710,25],[691,26,710,28,"options"],[691,33,710,35],[691,38,710,40],[691,42,710,44],[691,46,710,48,"options"],[691,53,710,55],[691,58,710,60],[691,63,710,65],[691,64,710,66],[691,67,710,69],[691,72,710,74],[691,73,710,75],[691,76,710,78,"options"],[691,83,710,85],[691,84,710,86,"decode"],[691,90,710,92],[691,96,710,98],[691,100,710,102],[691,104,710,106,"_j"],[691,106,710,108],[691,111,710,113],[691,116,710,118],[691,117,710,119],[691,120,710,122,"_j"],[691,122,710,124],[691,125,710,127],[691,129,710,131],[691,130,710,132,"serializer"],[691,140,710,142],[691,141,710,143,"decode"],[691,147,710,149],[691,148,710,150,"bind"],[691,152,710,154],[691,153,710,155],[691,157,710,159],[691,158,710,160,"serializer"],[691,168,710,170],[691,169,710,171],[692,6,711,8],[693,6,712,8],[693,10,712,12],[693,14,712,16],[693,15,712,17,"worker"],[693,21,712,23],[693,23,712,25],[694,8,713,12],[694,12,713,16],[694,19,713,23,"window"],[694,25,713,29],[694,30,713,34],[694,41,713,45],[694,45,713,49],[694,46,713,50,"window"],[694,52,713,56],[694,53,713,57,"Worker"],[694,59,713,63],[694,61,713,65],[695,10,714,16],[695,16,714,22],[695,20,714,26,"Error"],[695,25,714,31],[695,26,714,32],[695,55,714,61],[695,56,714,62],[696,8,715,12],[697,8,716,12],[697,12,716,16],[697,13,716,17,"workerUrl"],[697,22,716,26],[697,25,716,29,"options"],[697,32,716,36],[697,37,716,41],[697,41,716,45],[697,45,716,49,"options"],[697,52,716,56],[697,57,716,61],[697,62,716,66],[697,63,716,67],[697,66,716,70],[697,71,716,75],[697,72,716,76],[697,75,716,79,"options"],[697,82,716,86],[697,83,716,87,"workerUrl"],[697,92,716,96],[698,6,717,8],[699,4,718,4],[700,2,719,0],[701,2,719,1,"exports"],[701,9,719,1],[701,10,719,1,"default"],[701,17,719,1],[701,20,719,1,"RealtimeClient"],[701,34,719,1],[702,0,719,1],[702,3]],"functionMap":{"names":["<global>","noop","RealtimeClient","constructor","_resolveFetch","_fetch","import.then$argument_0","import.then._catch$argument_0","<anonymous>","connect","endpointURL","disconnect","setTimeout$argument_0","conn.onclose","getChannels","removeChannel","removeAllChannels","channels.map$argument_0","log","connectionState","isConnected","isConnecting","isDisconnecting","channel","getChannels.find$argument_0","push","callback","encode$argument_1","setAuth","sendHeartbeat","onHeartbeat","flushSendBuffer","sendBuffer.forEach$argument_0","_makeRef","_leaveOpenTopic","channels.find$argument_0","_remove","channels.filter$argument_0","_onConnMessage","decode$argument_1","channels.filter.forEach$argument_0","_clearTimer","_clearAllTimers","_setupConnectionHandlers","conn.onopen","conn.onerror","conn.onmessage","_teardownConnection","channels.forEach$argument_0","_onConnOpen","_startHeartbeat","setInterval$argument_0","_startWorkerHeartbeat","workerRef.onerror","workerRef.onmessage","_onConnClose","_onConnError","_triggerChanError","_appendParams","_workerObjectUrl","_setConnectionState","_performAuth","_waitForAuthIfNeeded","_setAuthSafely","setAuth._catch$argument_0","_triggerStateCallbacks","stateChangeCallbacks.event.forEach$argument_0","_setupReconnectionTimer","Timer$argument_0","_initializeOptions"],"mappings":"AAA;aCM,SD;eEe;ICoB;6BCqC;yBCO;0BCC,sCD;2BEC;iBFG,CD;mBIK,4BJ;SDC;KDY;IOI;KPuC;IQK;KRE;ISO;6CCO;aDE;gCEC;aFG;KTa;IYI;KZE;IaK;KbM;IcI;6DCC,kCD;KdI;IgBM;KhBE;IiBI;KjBW;IkBI;KlBE;ImBI;KnBE;IoBI;KpBE;IqBC;+CCE,gCD;KrBS;IuBM;yBCE;8BCC;aDG;SDC;KvBQ;I0BU;K1BQ;I2BI;uBjBwB;aiBK;K3BkB;I4BC;K5BE;I6BI;oCCE,wBD;K7BG;I+BM;K/BS;IgCM;4CCC,6DD;KhCK;IkCQ;6CCC,gCD;KlCC;IoCE;qCCC;wBFqB,qCE;yBCC,kDD;SDE;KpCC;IuCK;KvCS;IwCK;KxCG;IyCK;2BCQ,wBD;4BEC,mCF;8BGC,qCH;4B9BC,mC8B;KzCC;I6CK;8BCS,+BD;K7CC;I+CE;K/Cc;IgDE;0CCE,0BD;KhDC;IkDE;iCCS;SDG;mCEC;SFI;KlDK;IqDE;KrDW;IsDE;KtDK;IuDE;8BTC,mDS;KvDC;IwDE;KxDO;IyDC;KzDU;I0DK;K1DQ;I2DK;kCbc;aaW;K3DE;I4DK;K5DI;I6DK;6BCC;SDE;K7DC;I+DK;qDCE;aDO;K/DK;IiEK;wCCC;uBxDC;awDK;SDC;KjEC;ImEK;gI7DqB;a6DE;sH7DE;a6DE;KnES;CFC"}},"type":"js/module"}]}