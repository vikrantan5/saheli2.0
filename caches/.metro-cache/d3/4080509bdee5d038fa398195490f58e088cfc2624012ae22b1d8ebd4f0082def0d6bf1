{"dependencies":[{"name":"tslib","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":16,"index":93},"end":{"line":3,"column":32,"index":109}}],"key":"vm88vOsSPZItrLOmMEyUuGkd1y4=","exportNames":["*"]}},{"name":"./PostgrestFilterBuilder","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":57,"index":168},"end":{"line":4,"column":92,"index":203}}],"key":"NGvdEkdD+wH/sBHVGxr/LfyZvLA=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  const tslib_1 = require(_dependencyMap[0], \"tslib\");\n  const PostgrestFilterBuilder_1 = tslib_1.__importDefault(require(_dependencyMap[1], \"./PostgrestFilterBuilder\"));\n  class PostgrestQueryBuilder {\n    constructor(url, {\n      headers = {},\n      schema,\n      fetch\n    }) {\n      this.url = url;\n      this.headers = new Headers(headers);\n      this.schema = schema;\n      this.fetch = fetch;\n    }\n    /**\n     * Perform a SELECT query on the table or view.\n     *\n     * @param columns - The columns to retrieve, separated by commas. Columns can be renamed when returned with `customName:columnName`\n     *\n     * @param options - Named parameters\n     *\n     * @param options.head - When set to `true`, `data` will not be returned.\n     * Useful if you only need the count.\n     *\n     * @param options.count - Count algorithm to use to count rows in the table or view.\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     */\n    select(columns, options) {\n      const {\n        head = false,\n        count\n      } = options !== null && options !== void 0 ? options : {};\n      const method = head ? 'HEAD' : 'GET';\n      // Remove whitespaces except when quoted\n      let quoted = false;\n      const cleanedColumns = (columns !== null && columns !== void 0 ? columns : '*').split('').map(c => {\n        if (/\\s/.test(c) && !quoted) {\n          return '';\n        }\n        if (c === '\"') {\n          quoted = !quoted;\n        }\n        return c;\n      }).join('');\n      this.url.searchParams.set('select', cleanedColumns);\n      if (count) {\n        this.headers.append('Prefer', `count=${count}`);\n      }\n      return new PostgrestFilterBuilder_1.default({\n        method,\n        url: this.url,\n        headers: this.headers,\n        schema: this.schema,\n        fetch: this.fetch\n      });\n    }\n    /**\n     * Perform an INSERT into the table or view.\n     *\n     * By default, inserted rows are not returned. To return it, chain the call\n     * with `.select()`.\n     *\n     * @param values - The values to insert. Pass an object to insert a single row\n     * or an array to insert multiple rows.\n     *\n     * @param options - Named parameters\n     *\n     * @param options.count - Count algorithm to use to count inserted rows.\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     *\n     * @param options.defaultToNull - Make missing fields default to `null`.\n     * Otherwise, use the default value for the column. Only applies for bulk\n     * inserts.\n     */\n    insert(values, {\n      count,\n      defaultToNull = true\n    } = {}) {\n      var _a;\n      const method = 'POST';\n      if (count) {\n        this.headers.append('Prefer', `count=${count}`);\n      }\n      if (!defaultToNull) {\n        this.headers.append('Prefer', `missing=default`);\n      }\n      if (Array.isArray(values)) {\n        const columns = values.reduce((acc, x) => acc.concat(Object.keys(x)), []);\n        if (columns.length > 0) {\n          const uniqueColumns = [...new Set(columns)].map(column => `\"${column}\"`);\n          this.url.searchParams.set('columns', uniqueColumns.join(','));\n        }\n      }\n      return new PostgrestFilterBuilder_1.default({\n        method,\n        url: this.url,\n        headers: this.headers,\n        schema: this.schema,\n        body: values,\n        fetch: (_a = this.fetch) !== null && _a !== void 0 ? _a : fetch\n      });\n    }\n    /**\n     * Perform an UPSERT on the table or view. Depending on the column(s) passed\n     * to `onConflict`, `.upsert()` allows you to perform the equivalent of\n     * `.insert()` if a row with the corresponding `onConflict` columns doesn't\n     * exist, or if it does exist, perform an alternative action depending on\n     * `ignoreDuplicates`.\n     *\n     * By default, upserted rows are not returned. To return it, chain the call\n     * with `.select()`.\n     *\n     * @param values - The values to upsert with. Pass an object to upsert a\n     * single row or an array to upsert multiple rows.\n     *\n     * @param options - Named parameters\n     *\n     * @param options.onConflict - Comma-separated UNIQUE column(s) to specify how\n     * duplicate rows are determined. Two rows are duplicates if all the\n     * `onConflict` columns are equal.\n     *\n     * @param options.ignoreDuplicates - If `true`, duplicate rows are ignored. If\n     * `false`, duplicate rows are merged with existing rows.\n     *\n     * @param options.count - Count algorithm to use to count upserted rows.\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     *\n     * @param options.defaultToNull - Make missing fields default to `null`.\n     * Otherwise, use the default value for the column. This only applies when\n     * inserting new rows, not when merging with existing rows under\n     * `ignoreDuplicates: false`. This also only applies when doing bulk upserts.\n     */\n    upsert(values, {\n      onConflict,\n      ignoreDuplicates = false,\n      count,\n      defaultToNull = true\n    } = {}) {\n      var _a;\n      const method = 'POST';\n      this.headers.append('Prefer', `resolution=${ignoreDuplicates ? 'ignore' : 'merge'}-duplicates`);\n      if (onConflict !== undefined) this.url.searchParams.set('on_conflict', onConflict);\n      if (count) {\n        this.headers.append('Prefer', `count=${count}`);\n      }\n      if (!defaultToNull) {\n        this.headers.append('Prefer', 'missing=default');\n      }\n      if (Array.isArray(values)) {\n        const columns = values.reduce((acc, x) => acc.concat(Object.keys(x)), []);\n        if (columns.length > 0) {\n          const uniqueColumns = [...new Set(columns)].map(column => `\"${column}\"`);\n          this.url.searchParams.set('columns', uniqueColumns.join(','));\n        }\n      }\n      return new PostgrestFilterBuilder_1.default({\n        method,\n        url: this.url,\n        headers: this.headers,\n        schema: this.schema,\n        body: values,\n        fetch: (_a = this.fetch) !== null && _a !== void 0 ? _a : fetch\n      });\n    }\n    /**\n     * Perform an UPDATE on the table or view.\n     *\n     * By default, updated rows are not returned. To return it, chain the call\n     * with `.select()` after filters.\n     *\n     * @param values - The values to update with\n     *\n     * @param options - Named parameters\n     *\n     * @param options.count - Count algorithm to use to count updated rows.\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     */\n    update(values, {\n      count\n    } = {}) {\n      var _a;\n      const method = 'PATCH';\n      if (count) {\n        this.headers.append('Prefer', `count=${count}`);\n      }\n      return new PostgrestFilterBuilder_1.default({\n        method,\n        url: this.url,\n        headers: this.headers,\n        schema: this.schema,\n        body: values,\n        fetch: (_a = this.fetch) !== null && _a !== void 0 ? _a : fetch\n      });\n    }\n    /**\n     * Perform a DELETE on the table or view.\n     *\n     * By default, deleted rows are not returned. To return it, chain the call\n     * with `.select()` after filters.\n     *\n     * @param options - Named parameters\n     *\n     * @param options.count - Count algorithm to use to count deleted rows.\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     */\n    delete({\n      count\n    } = {}) {\n      var _a;\n      const method = 'DELETE';\n      if (count) {\n        this.headers.append('Prefer', `count=${count}`);\n      }\n      return new PostgrestFilterBuilder_1.default({\n        method,\n        url: this.url,\n        headers: this.headers,\n        schema: this.schema,\n        fetch: (_a = this.fetch) !== null && _a !== void 0 ? _a : fetch\n      });\n    }\n  }\n  exports.default = PostgrestQueryBuilder;\n});","lineCount":269,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0],[7,8,3,6,"tslib_1"],[7,15,3,13],[7,18,3,16,"require"],[7,25,3,23],[7,26,3,23,"_dependencyMap"],[7,40,3,23],[7,52,3,31],[7,53,3,32],[8,2,4,0],[8,8,4,6,"PostgrestFilterBuilder_1"],[8,32,4,30],[8,35,4,33,"tslib_1"],[8,42,4,40],[8,43,4,41,"__importDefault"],[8,58,4,56],[8,59,4,57,"require"],[8,66,4,64],[8,67,4,64,"_dependencyMap"],[8,81,4,64],[8,112,4,91],[8,113,4,92],[8,114,4,93],[9,2,5,0],[9,8,5,6,"PostgrestQueryBuilder"],[9,29,5,27],[9,30,5,28],[10,4,6,4,"constructor"],[10,15,6,15,"constructor"],[10,16,6,16,"url"],[10,19,6,19],[10,21,6,21],[11,6,6,23,"headers"],[11,13,6,30],[11,16,6,33],[11,17,6,34],[11,18,6,35],[12,6,6,37,"schema"],[12,12,6,43],[13,6,6,45,"fetch"],[14,4,6,52],[14,5,6,53],[14,7,6,55],[15,6,7,8],[15,10,7,12],[15,11,7,13,"url"],[15,14,7,16],[15,17,7,19,"url"],[15,20,7,22],[16,6,8,8],[16,10,8,12],[16,11,8,13,"headers"],[16,18,8,20],[16,21,8,23],[16,25,8,27,"Headers"],[16,32,8,34],[16,33,8,35,"headers"],[16,40,8,42],[16,41,8,43],[17,6,9,8],[17,10,9,12],[17,11,9,13,"schema"],[17,17,9,19],[17,20,9,22,"schema"],[17,26,9,28],[18,6,10,8],[18,10,10,12],[18,11,10,13,"fetch"],[18,16,10,18],[18,19,10,21,"fetch"],[18,24,10,26],[19,4,11,4],[20,4,12,4],[21,0,13,0],[22,0,14,0],[23,0,15,0],[24,0,16,0],[25,0,17,0],[26,0,18,0],[27,0,19,0],[28,0,20,0],[29,0,21,0],[30,0,22,0],[31,0,23,0],[32,0,24,0],[33,0,25,0],[34,0,26,0],[35,0,27,0],[36,0,28,0],[37,0,29,0],[38,0,30,0],[39,0,31,0],[40,0,32,0],[41,4,33,4,"select"],[41,10,33,10,"select"],[41,11,33,11,"columns"],[41,18,33,18],[41,20,33,20,"options"],[41,27,33,27],[41,29,33,29],[42,6,34,8],[42,12,34,14],[43,8,34,16,"head"],[43,12,34,20],[43,15,34,23],[43,20,34,28],[44,8,34,30,"count"],[45,6,34,36],[45,7,34,37],[45,10,34,40,"options"],[45,17,34,47],[45,22,34,52],[45,26,34,56],[45,30,34,60,"options"],[45,37,34,67],[45,42,34,72],[45,47,34,77],[45,48,34,78],[45,51,34,81,"options"],[45,58,34,88],[45,61,34,91],[45,62,34,92],[45,63,34,93],[46,6,35,8],[46,12,35,14,"method"],[46,18,35,20],[46,21,35,23,"head"],[46,25,35,27],[46,28,35,30],[46,34,35,36],[46,37,35,39],[46,42,35,44],[47,6,36,8],[48,6,37,8],[48,10,37,12,"quoted"],[48,16,37,18],[48,19,37,21],[48,24,37,26],[49,6,38,8],[49,12,38,14,"cleanedColumns"],[49,26,38,28],[49,29,38,31],[49,30,38,32,"columns"],[49,37,38,39],[49,42,38,44],[49,46,38,48],[49,50,38,52,"columns"],[49,57,38,59],[49,62,38,64],[49,67,38,69],[49,68,38,70],[49,71,38,73,"columns"],[49,78,38,80],[49,81,38,83],[49,84,38,86],[49,86,39,13,"split"],[49,91,39,18],[49,92,39,19],[49,94,39,21],[49,95,39,22],[49,96,40,13,"map"],[49,99,40,16],[49,100,40,18,"c"],[49,101,40,19],[49,105,40,24],[50,8,41,12],[50,12,41,16],[50,16,41,20],[50,17,41,21,"test"],[50,21,41,25],[50,22,41,26,"c"],[50,23,41,27],[50,24,41,28],[50,28,41,32],[50,29,41,33,"quoted"],[50,35,41,39],[50,37,41,41],[51,10,42,16],[51,17,42,23],[51,19,42,25],[52,8,43,12],[53,8,44,12],[53,12,44,16,"c"],[53,13,44,17],[53,18,44,22],[53,21,44,25],[53,23,44,27],[54,10,45,16,"quoted"],[54,16,45,22],[54,19,45,25],[54,20,45,26,"quoted"],[54,26,45,32],[55,8,46,12],[56,8,47,12],[56,15,47,19,"c"],[56,16,47,20],[57,6,48,8],[57,7,48,9],[57,8,48,10],[57,9,49,13,"join"],[57,13,49,17],[57,14,49,18],[57,16,49,20],[57,17,49,21],[58,6,50,8],[58,10,50,12],[58,11,50,13,"url"],[58,14,50,16],[58,15,50,17,"searchParams"],[58,27,50,29],[58,28,50,30,"set"],[58,31,50,33],[58,32,50,34],[58,40,50,42],[58,42,50,44,"cleanedColumns"],[58,56,50,58],[58,57,50,59],[59,6,51,8],[59,10,51,12,"count"],[59,15,51,17],[59,17,51,19],[60,8,52,12],[60,12,52,16],[60,13,52,17,"headers"],[60,20,52,24],[60,21,52,25,"append"],[60,27,52,31],[60,28,52,32],[60,36,52,40],[60,38,52,42],[60,47,52,51,"count"],[60,52,52,56],[60,54,52,58],[60,55,52,59],[61,6,53,8],[62,6,54,8],[62,13,54,15],[62,17,54,19,"PostgrestFilterBuilder_1"],[62,41,54,43],[62,42,54,44,"default"],[62,49,54,51],[62,50,54,52],[63,8,55,12,"method"],[63,14,55,18],[64,8,56,12,"url"],[64,11,56,15],[64,13,56,17],[64,17,56,21],[64,18,56,22,"url"],[64,21,56,25],[65,8,57,12,"headers"],[65,15,57,19],[65,17,57,21],[65,21,57,25],[65,22,57,26,"headers"],[65,29,57,33],[66,8,58,12,"schema"],[66,14,58,18],[66,16,58,20],[66,20,58,24],[66,21,58,25,"schema"],[66,27,58,31],[67,8,59,12,"fetch"],[67,13,59,17],[67,15,59,19],[67,19,59,23],[67,20,59,24,"fetch"],[68,6,60,8],[68,7,60,9],[68,8,60,10],[69,4,61,4],[70,4,62,4],[71,0,63,0],[72,0,64,0],[73,0,65,0],[74,0,66,0],[75,0,67,0],[76,0,68,0],[77,0,69,0],[78,0,70,0],[79,0,71,0],[80,0,72,0],[81,0,73,0],[82,0,74,0],[83,0,75,0],[84,0,76,0],[85,0,77,0],[86,0,78,0],[87,0,79,0],[88,0,80,0],[89,0,81,0],[90,0,82,0],[91,0,83,0],[92,0,84,0],[93,0,85,0],[94,0,86,0],[95,0,87,0],[96,4,88,4,"insert"],[96,10,88,10,"insert"],[96,11,88,11,"values"],[96,17,88,17],[96,19,88,19],[97,6,88,21,"count"],[97,11,88,26],[98,6,88,28,"defaultToNull"],[98,19,88,41],[98,22,88,44],[99,4,88,50],[99,5,88,51],[99,8,88,54],[99,9,88,55],[99,10,88,56],[99,12,88,58],[100,6,89,8],[100,10,89,12,"_a"],[100,12,89,14],[101,6,90,8],[101,12,90,14,"method"],[101,18,90,20],[101,21,90,23],[101,27,90,29],[102,6,91,8],[102,10,91,12,"count"],[102,15,91,17],[102,17,91,19],[103,8,92,12],[103,12,92,16],[103,13,92,17,"headers"],[103,20,92,24],[103,21,92,25,"append"],[103,27,92,31],[103,28,92,32],[103,36,92,40],[103,38,92,42],[103,47,92,51,"count"],[103,52,92,56],[103,54,92,58],[103,55,92,59],[104,6,93,8],[105,6,94,8],[105,10,94,12],[105,11,94,13,"defaultToNull"],[105,24,94,26],[105,26,94,28],[106,8,95,12],[106,12,95,16],[106,13,95,17,"headers"],[106,20,95,24],[106,21,95,25,"append"],[106,27,95,31],[106,28,95,32],[106,36,95,40],[106,38,95,42],[106,55,95,59],[106,56,95,60],[107,6,96,8],[108,6,97,8],[108,10,97,12,"Array"],[108,15,97,17],[108,16,97,18,"isArray"],[108,23,97,25],[108,24,97,26,"values"],[108,30,97,32],[108,31,97,33],[108,33,97,35],[109,8,98,12],[109,14,98,18,"columns"],[109,21,98,25],[109,24,98,28,"values"],[109,30,98,34],[109,31,98,35,"reduce"],[109,37,98,41],[109,38,98,42],[109,39,98,43,"acc"],[109,42,98,46],[109,44,98,48,"x"],[109,45,98,49],[109,50,98,54,"acc"],[109,53,98,57],[109,54,98,58,"concat"],[109,60,98,64],[109,61,98,65,"Object"],[109,67,98,71],[109,68,98,72,"keys"],[109,72,98,76],[109,73,98,77,"x"],[109,74,98,78],[109,75,98,79],[109,76,98,80],[109,78,98,82],[109,80,98,84],[109,81,98,85],[110,8,99,12],[110,12,99,16,"columns"],[110,19,99,23],[110,20,99,24,"length"],[110,26,99,30],[110,29,99,33],[110,30,99,34],[110,32,99,36],[111,10,100,16],[111,16,100,22,"uniqueColumns"],[111,29,100,35],[111,32,100,38],[111,33,100,39],[111,36,100,42],[111,40,100,46,"Set"],[111,43,100,49],[111,44,100,50,"columns"],[111,51,100,57],[111,52,100,58],[111,53,100,59],[111,54,100,60,"map"],[111,57,100,63],[111,58,100,65,"column"],[111,64,100,71],[111,68,100,76],[111,72,100,80,"column"],[111,78,100,86],[111,81,100,89],[111,82,100,90],[112,10,101,16],[112,14,101,20],[112,15,101,21,"url"],[112,18,101,24],[112,19,101,25,"searchParams"],[112,31,101,37],[112,32,101,38,"set"],[112,35,101,41],[112,36,101,42],[112,45,101,51],[112,47,101,53,"uniqueColumns"],[112,60,101,66],[112,61,101,67,"join"],[112,65,101,71],[112,66,101,72],[112,69,101,75],[112,70,101,76],[112,71,101,77],[113,8,102,12],[114,6,103,8],[115,6,104,8],[115,13,104,15],[115,17,104,19,"PostgrestFilterBuilder_1"],[115,41,104,43],[115,42,104,44,"default"],[115,49,104,51],[115,50,104,52],[116,8,105,12,"method"],[116,14,105,18],[117,8,106,12,"url"],[117,11,106,15],[117,13,106,17],[117,17,106,21],[117,18,106,22,"url"],[117,21,106,25],[118,8,107,12,"headers"],[118,15,107,19],[118,17,107,21],[118,21,107,25],[118,22,107,26,"headers"],[118,29,107,33],[119,8,108,12,"schema"],[119,14,108,18],[119,16,108,20],[119,20,108,24],[119,21,108,25,"schema"],[119,27,108,31],[120,8,109,12,"body"],[120,12,109,16],[120,14,109,18,"values"],[120,20,109,24],[121,8,110,12,"fetch"],[121,13,110,17],[121,15,110,19],[121,16,110,20,"_a"],[121,18,110,22],[121,21,110,25],[121,25,110,29],[121,26,110,30,"fetch"],[121,31,110,35],[121,37,110,41],[121,41,110,45],[121,45,110,49,"_a"],[121,47,110,51],[121,52,110,56],[121,57,110,61],[121,58,110,62],[121,61,110,65,"_a"],[121,63,110,67],[121,66,110,70,"fetch"],[122,6,111,8],[122,7,111,9],[122,8,111,10],[123,4,112,4],[124,4,113,4],[125,0,114,0],[126,0,115,0],[127,0,116,0],[128,0,117,0],[129,0,118,0],[130,0,119,0],[131,0,120,0],[132,0,121,0],[133,0,122,0],[134,0,123,0],[135,0,124,0],[136,0,125,0],[137,0,126,0],[138,0,127,0],[139,0,128,0],[140,0,129,0],[141,0,130,0],[142,0,131,0],[143,0,132,0],[144,0,133,0],[145,0,134,0],[146,0,135,0],[147,0,136,0],[148,0,137,0],[149,0,138,0],[150,0,139,0],[151,0,140,0],[152,0,141,0],[153,0,142,0],[154,0,143,0],[155,0,144,0],[156,0,145,0],[157,0,146,0],[158,0,147,0],[159,0,148,0],[160,0,149,0],[161,0,150,0],[162,4,151,4,"upsert"],[162,10,151,10,"upsert"],[162,11,151,11,"values"],[162,17,151,17],[162,19,151,19],[163,6,151,21,"onConflict"],[163,16,151,31],[164,6,151,33,"ignoreDuplicates"],[164,22,151,49],[164,25,151,52],[164,30,151,57],[165,6,151,59,"count"],[165,11,151,64],[166,6,151,66,"defaultToNull"],[166,19,151,79],[166,22,151,82],[167,4,151,88],[167,5,151,89],[167,8,151,92],[167,9,151,93],[167,10,151,94],[167,12,151,96],[168,6,152,8],[168,10,152,12,"_a"],[168,12,152,14],[169,6,153,8],[169,12,153,14,"method"],[169,18,153,20],[169,21,153,23],[169,27,153,29],[170,6,154,8],[170,10,154,12],[170,11,154,13,"headers"],[170,18,154,20],[170,19,154,21,"append"],[170,25,154,27],[170,26,154,28],[170,34,154,36],[170,36,154,38],[170,50,154,52,"ignoreDuplicates"],[170,66,154,68],[170,69,154,71],[170,77,154,79],[170,80,154,82],[170,87,154,89],[170,100,154,102],[170,101,154,103],[171,6,155,8],[171,10,155,12,"onConflict"],[171,20,155,22],[171,25,155,27,"undefined"],[171,34,155,36],[171,36,156,12],[171,40,156,16],[171,41,156,17,"url"],[171,44,156,20],[171,45,156,21,"searchParams"],[171,57,156,33],[171,58,156,34,"set"],[171,61,156,37],[171,62,156,38],[171,75,156,51],[171,77,156,53,"onConflict"],[171,87,156,63],[171,88,156,64],[172,6,157,8],[172,10,157,12,"count"],[172,15,157,17],[172,17,157,19],[173,8,158,12],[173,12,158,16],[173,13,158,17,"headers"],[173,20,158,24],[173,21,158,25,"append"],[173,27,158,31],[173,28,158,32],[173,36,158,40],[173,38,158,42],[173,47,158,51,"count"],[173,52,158,56],[173,54,158,58],[173,55,158,59],[174,6,159,8],[175,6,160,8],[175,10,160,12],[175,11,160,13,"defaultToNull"],[175,24,160,26],[175,26,160,28],[176,8,161,12],[176,12,161,16],[176,13,161,17,"headers"],[176,20,161,24],[176,21,161,25,"append"],[176,27,161,31],[176,28,161,32],[176,36,161,40],[176,38,161,42],[176,55,161,59],[176,56,161,60],[177,6,162,8],[178,6,163,8],[178,10,163,12,"Array"],[178,15,163,17],[178,16,163,18,"isArray"],[178,23,163,25],[178,24,163,26,"values"],[178,30,163,32],[178,31,163,33],[178,33,163,35],[179,8,164,12],[179,14,164,18,"columns"],[179,21,164,25],[179,24,164,28,"values"],[179,30,164,34],[179,31,164,35,"reduce"],[179,37,164,41],[179,38,164,42],[179,39,164,43,"acc"],[179,42,164,46],[179,44,164,48,"x"],[179,45,164,49],[179,50,164,54,"acc"],[179,53,164,57],[179,54,164,58,"concat"],[179,60,164,64],[179,61,164,65,"Object"],[179,67,164,71],[179,68,164,72,"keys"],[179,72,164,76],[179,73,164,77,"x"],[179,74,164,78],[179,75,164,79],[179,76,164,80],[179,78,164,82],[179,80,164,84],[179,81,164,85],[180,8,165,12],[180,12,165,16,"columns"],[180,19,165,23],[180,20,165,24,"length"],[180,26,165,30],[180,29,165,33],[180,30,165,34],[180,32,165,36],[181,10,166,16],[181,16,166,22,"uniqueColumns"],[181,29,166,35],[181,32,166,38],[181,33,166,39],[181,36,166,42],[181,40,166,46,"Set"],[181,43,166,49],[181,44,166,50,"columns"],[181,51,166,57],[181,52,166,58],[181,53,166,59],[181,54,166,60,"map"],[181,57,166,63],[181,58,166,65,"column"],[181,64,166,71],[181,68,166,76],[181,72,166,80,"column"],[181,78,166,86],[181,81,166,89],[181,82,166,90],[182,10,167,16],[182,14,167,20],[182,15,167,21,"url"],[182,18,167,24],[182,19,167,25,"searchParams"],[182,31,167,37],[182,32,167,38,"set"],[182,35,167,41],[182,36,167,42],[182,45,167,51],[182,47,167,53,"uniqueColumns"],[182,60,167,66],[182,61,167,67,"join"],[182,65,167,71],[182,66,167,72],[182,69,167,75],[182,70,167,76],[182,71,167,77],[183,8,168,12],[184,6,169,8],[185,6,170,8],[185,13,170,15],[185,17,170,19,"PostgrestFilterBuilder_1"],[185,41,170,43],[185,42,170,44,"default"],[185,49,170,51],[185,50,170,52],[186,8,171,12,"method"],[186,14,171,18],[187,8,172,12,"url"],[187,11,172,15],[187,13,172,17],[187,17,172,21],[187,18,172,22,"url"],[187,21,172,25],[188,8,173,12,"headers"],[188,15,173,19],[188,17,173,21],[188,21,173,25],[188,22,173,26,"headers"],[188,29,173,33],[189,8,174,12,"schema"],[189,14,174,18],[189,16,174,20],[189,20,174,24],[189,21,174,25,"schema"],[189,27,174,31],[190,8,175,12,"body"],[190,12,175,16],[190,14,175,18,"values"],[190,20,175,24],[191,8,176,12,"fetch"],[191,13,176,17],[191,15,176,19],[191,16,176,20,"_a"],[191,18,176,22],[191,21,176,25],[191,25,176,29],[191,26,176,30,"fetch"],[191,31,176,35],[191,37,176,41],[191,41,176,45],[191,45,176,49,"_a"],[191,47,176,51],[191,52,176,56],[191,57,176,61],[191,58,176,62],[191,61,176,65,"_a"],[191,63,176,67],[191,66,176,70,"fetch"],[192,6,177,8],[192,7,177,9],[192,8,177,10],[193,4,178,4],[194,4,179,4],[195,0,180,0],[196,0,181,0],[197,0,182,0],[198,0,183,0],[199,0,184,0],[200,0,185,0],[201,0,186,0],[202,0,187,0],[203,0,188,0],[204,0,189,0],[205,0,190,0],[206,0,191,0],[207,0,192,0],[208,0,193,0],[209,0,194,0],[210,0,195,0],[211,0,196,0],[212,0,197,0],[213,0,198,0],[214,0,199,0],[215,4,200,4,"update"],[215,10,200,10,"update"],[215,11,200,11,"values"],[215,17,200,17],[215,19,200,19],[216,6,200,21,"count"],[217,4,200,28],[217,5,200,29],[217,8,200,32],[217,9,200,33],[217,10,200,34],[217,12,200,36],[218,6,201,8],[218,10,201,12,"_a"],[218,12,201,14],[219,6,202,8],[219,12,202,14,"method"],[219,18,202,20],[219,21,202,23],[219,28,202,30],[220,6,203,8],[220,10,203,12,"count"],[220,15,203,17],[220,17,203,19],[221,8,204,12],[221,12,204,16],[221,13,204,17,"headers"],[221,20,204,24],[221,21,204,25,"append"],[221,27,204,31],[221,28,204,32],[221,36,204,40],[221,38,204,42],[221,47,204,51,"count"],[221,52,204,56],[221,54,204,58],[221,55,204,59],[222,6,205,8],[223,6,206,8],[223,13,206,15],[223,17,206,19,"PostgrestFilterBuilder_1"],[223,41,206,43],[223,42,206,44,"default"],[223,49,206,51],[223,50,206,52],[224,8,207,12,"method"],[224,14,207,18],[225,8,208,12,"url"],[225,11,208,15],[225,13,208,17],[225,17,208,21],[225,18,208,22,"url"],[225,21,208,25],[226,8,209,12,"headers"],[226,15,209,19],[226,17,209,21],[226,21,209,25],[226,22,209,26,"headers"],[226,29,209,33],[227,8,210,12,"schema"],[227,14,210,18],[227,16,210,20],[227,20,210,24],[227,21,210,25,"schema"],[227,27,210,31],[228,8,211,12,"body"],[228,12,211,16],[228,14,211,18,"values"],[228,20,211,24],[229,8,212,12,"fetch"],[229,13,212,17],[229,15,212,19],[229,16,212,20,"_a"],[229,18,212,22],[229,21,212,25],[229,25,212,29],[229,26,212,30,"fetch"],[229,31,212,35],[229,37,212,41],[229,41,212,45],[229,45,212,49,"_a"],[229,47,212,51],[229,52,212,56],[229,57,212,61],[229,58,212,62],[229,61,212,65,"_a"],[229,63,212,67],[229,66,212,70,"fetch"],[230,6,213,8],[230,7,213,9],[230,8,213,10],[231,4,214,4],[232,4,215,4],[233,0,216,0],[234,0,217,0],[235,0,218,0],[236,0,219,0],[237,0,220,0],[238,0,221,0],[239,0,222,0],[240,0,223,0],[241,0,224,0],[242,0,225,0],[243,0,226,0],[244,0,227,0],[245,0,228,0],[246,0,229,0],[247,0,230,0],[248,0,231,0],[249,0,232,0],[250,0,233,0],[251,4,234,4,"delete"],[251,10,234,10,"delete"],[251,11,234,11],[252,6,234,13,"count"],[253,4,234,20],[253,5,234,21],[253,8,234,24],[253,9,234,25],[253,10,234,26],[253,12,234,28],[254,6,235,8],[254,10,235,12,"_a"],[254,12,235,14],[255,6,236,8],[255,12,236,14,"method"],[255,18,236,20],[255,21,236,23],[255,29,236,31],[256,6,237,8],[256,10,237,12,"count"],[256,15,237,17],[256,17,237,19],[257,8,238,12],[257,12,238,16],[257,13,238,17,"headers"],[257,20,238,24],[257,21,238,25,"append"],[257,27,238,31],[257,28,238,32],[257,36,238,40],[257,38,238,42],[257,47,238,51,"count"],[257,52,238,56],[257,54,238,58],[257,55,238,59],[258,6,239,8],[259,6,240,8],[259,13,240,15],[259,17,240,19,"PostgrestFilterBuilder_1"],[259,41,240,43],[259,42,240,44,"default"],[259,49,240,51],[259,50,240,52],[260,8,241,12,"method"],[260,14,241,18],[261,8,242,12,"url"],[261,11,242,15],[261,13,242,17],[261,17,242,21],[261,18,242,22,"url"],[261,21,242,25],[262,8,243,12,"headers"],[262,15,243,19],[262,17,243,21],[262,21,243,25],[262,22,243,26,"headers"],[262,29,243,33],[263,8,244,12,"schema"],[263,14,244,18],[263,16,244,20],[263,20,244,24],[263,21,244,25,"schema"],[263,27,244,31],[264,8,245,12,"fetch"],[264,13,245,17],[264,15,245,19],[264,16,245,20,"_a"],[264,18,245,22],[264,21,245,25],[264,25,245,29],[264,26,245,30,"fetch"],[264,31,245,35],[264,37,245,41],[264,41,245,45],[264,45,245,49,"_a"],[264,47,245,51],[264,52,245,56],[264,57,245,61],[264,58,245,62],[264,61,245,65,"_a"],[264,63,245,67],[264,66,245,70,"fetch"],[265,6,246,8],[265,7,246,9],[265,8,246,10],[266,4,247,4],[267,2,248,0],[268,2,249,0,"exports"],[268,9,249,7],[268,10,249,8,"default"],[268,17,249,15],[268,20,249,18,"PostgrestQueryBuilder"],[268,41,249,39],[269,0,249,40],[269,3]],"functionMap":{"names":["<global>","PostgrestQueryBuilder","constructor","select","split.map$argument_0","insert","values.reduce$argument_0","map$argument_0","upsert","update","_delete"],"mappings":"AAA;ACI;ICC;KDK;IEsB;iBCO;SDQ;KFa;II2B;0CCU,sCD;gEEE,yBF;KJY;IOuC;0CFa,sCE;gEDE,yBC;KPY;IQsB;KRc;ISoB;KTa;CDC"}},"type":"js/module"}]}