{"dependencies":[{"name":"tslib","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":34,"index":34}}],"key":"8R25577gwLd3n1hFG9VYnRLV9eE=","exportNames":["*"]}},{"name":"./constants","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":35},"end":{"line":2,"column":46,"index":81}}],"key":"waDaw5D7vDr2hRFu0z1BqRCTzP4=","exportNames":["*"]}},{"name":"./errors","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":82},"end":{"line":3,"column":49,"index":131}}],"key":"rEld05quROH+iA6QLT6kkvqJ/qc=","exportNames":["*"]}},{"name":"./fetch","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":132},"end":{"line":4,"column":31,"index":163}}],"key":"530RtYCmKsE3te4bFHMv0Zip4Vc=","exportNames":["*"]}},{"name":"./helpers","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":164},"end":{"line":5,"column":41,"index":205}}],"key":"kg0rJsyHf+Iyf4Z1AFOYGhKLkW4=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  var _tslib = require(_dependencyMap[0], \"tslib\");\n  var _constants = require(_dependencyMap[1], \"./constants\");\n  var _errors = require(_dependencyMap[2], \"./errors\");\n  var _fetch = require(_dependencyMap[3], \"./fetch\");\n  var _helpers = require(_dependencyMap[4], \"./helpers\");\n  /**\n   * API class for managing Vector Indexes within Vector Buckets\n   * Provides methods for creating, reading, listing, and deleting vector indexes\n   */\n  class VectorIndexApi {\n    constructor(url, headers = {}, fetch) {\n      this.shouldThrowOnError = false;\n      this.url = url.replace(/\\/$/, '');\n      this.headers = Object.assign(Object.assign({}, _constants.DEFAULT_HEADERS), headers);\n      this.fetch = (0, _helpers.resolveFetch)(fetch);\n    }\n    /**\n     * Enable throwing errors instead of returning them in the response\n     * When enabled, failed operations will throw instead of returning { data: null, error }\n     *\n     * @returns This instance for method chaining\n     * @example\n     * ```typescript\n     * const client = new VectorIndexApi(url, headers)\n     * client.throwOnError()\n     * const { data } = await client.createIndex(options) // throws on error\n     * ```\n     */\n    throwOnError() {\n      this.shouldThrowOnError = true;\n      return this;\n    }\n    /**\n     * Creates a new vector index within a bucket\n     * Defines the schema for vectors including dimensionality, distance metric, and metadata config\n     *\n     * @param options - Index configuration\n     * @param options.vectorBucketName - Name of the parent vector bucket\n     * @param options.indexName - Unique name for the index within the bucket\n     * @param options.dataType - Data type for vector components (currently only 'float32')\n     * @param options.dimension - Dimensionality of vectors (e.g., 384, 768, 1536)\n     * @param options.distanceMetric - Similarity metric ('cosine', 'euclidean', 'dotproduct')\n     * @param options.metadataConfiguration - Optional config for non-filterable metadata keys\n     * @returns Promise with empty response on success or error\n     *\n     * @throws {StorageVectorsApiError} With code:\n     * - `S3VectorConflictException` if index already exists (HTTP 409)\n     * - `S3VectorMaxIndexesExceeded` if quota exceeded (HTTP 400)\n     * - `S3VectorNotFoundException` if bucket doesn't exist (HTTP 404)\n     * - `InternalError` for server errors (HTTP 500)\n     *\n     * @example\n     * ```typescript\n     * const { data, error } = await client.createIndex({\n     *   vectorBucketName: 'embeddings-prod',\n     *   indexName: 'documents-openai-small',\n     *   dataType: 'float32',\n     *   dimension: 1536,\n     *   distanceMetric: 'cosine',\n     *   metadataConfiguration: {\n     *     nonFilterableMetadataKeys: ['raw_text', 'internal_id']\n     *   }\n     * })\n     * ```\n     */\n    createIndex(options) {\n      return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {\n        try {\n          const data = yield (0, _fetch.post)(this.fetch, `${this.url}/CreateIndex`, options, {\n            headers: this.headers\n          });\n          return {\n            data: data || {},\n            error: null\n          };\n        } catch (error) {\n          if (this.shouldThrowOnError) {\n            throw error;\n          }\n          if ((0, _errors.isStorageVectorsError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * Retrieves metadata for a specific vector index\n     * Returns index configuration including dimension, distance metric, and metadata settings\n     *\n     * @param vectorBucketName - Name of the parent vector bucket\n     * @param indexName - Name of the index to retrieve\n     * @returns Promise with index metadata or error\n     *\n     * @throws {StorageVectorsApiError} With code:\n     * - `S3VectorNotFoundException` if index or bucket doesn't exist (HTTP 404)\n     * - `InternalError` for server errors (HTTP 500)\n     *\n     * @example\n     * ```typescript\n     * const { data, error } = await client.getIndex('embeddings-prod', 'documents-openai-small')\n     * if (data) {\n     *   console.log('Index dimension:', data.index.dimension)\n     *   console.log('Distance metric:', data.index.distanceMetric)\n     * }\n     * ```\n     */\n    getIndex(vectorBucketName, indexName) {\n      return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {\n        try {\n          const data = yield (0, _fetch.post)(this.fetch, `${this.url}/GetIndex`, {\n            vectorBucketName,\n            indexName\n          }, {\n            headers: this.headers\n          });\n          return {\n            data,\n            error: null\n          };\n        } catch (error) {\n          if (this.shouldThrowOnError) {\n            throw error;\n          }\n          if ((0, _errors.isStorageVectorsError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * Lists vector indexes within a bucket with optional filtering and pagination\n     * Supports prefix-based filtering and paginated results\n     *\n     * @param options - Listing options\n     * @param options.vectorBucketName - Name of the parent vector bucket\n     * @param options.prefix - Filter indexes by name prefix\n     * @param options.maxResults - Maximum results per page (default: 100)\n     * @param options.nextToken - Pagination token from previous response\n     * @returns Promise with list of indexes and pagination token\n     *\n     * @throws {StorageVectorsApiError} With code:\n     * - `S3VectorNotFoundException` if bucket doesn't exist (HTTP 404)\n     * - `InternalError` for server errors (HTTP 500)\n     *\n     * @example\n     * ```typescript\n     * // List all indexes in a bucket\n     * const { data, error } = await client.listIndexes({\n     *   vectorBucketName: 'embeddings-prod',\n     *   prefix: 'documents-'\n     * })\n     * if (data) {\n     *   console.log('Found indexes:', data.indexes.map(i => i.indexName))\n     *   // Fetch next page if available\n     *   if (data.nextToken) {\n     *     const next = await client.listIndexes({\n     *       vectorBucketName: 'embeddings-prod',\n     *       nextToken: data.nextToken\n     *     })\n     *   }\n     * }\n     * ```\n     */\n    listIndexes(options) {\n      return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {\n        try {\n          const data = yield (0, _fetch.post)(this.fetch, `${this.url}/ListIndexes`, options, {\n            headers: this.headers\n          });\n          return {\n            data,\n            error: null\n          };\n        } catch (error) {\n          if (this.shouldThrowOnError) {\n            throw error;\n          }\n          if ((0, _errors.isStorageVectorsError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * Deletes a vector index and all its data\n     * This operation removes the index schema and all vectors stored in the index\n     *\n     * @param vectorBucketName - Name of the parent vector bucket\n     * @param indexName - Name of the index to delete\n     * @returns Promise with empty response on success or error\n     *\n     * @throws {StorageVectorsApiError} With code:\n     * - `S3VectorNotFoundException` if index or bucket doesn't exist (HTTP 404)\n     * - `InternalError` for server errors (HTTP 500)\n     *\n     * @example\n     * ```typescript\n     * // Delete an index and all its vectors\n     * const { error } = await client.deleteIndex('embeddings-prod', 'old-index')\n     * if (!error) {\n     *   console.log('Index deleted successfully')\n     * }\n     * ```\n     */\n    deleteIndex(vectorBucketName, indexName) {\n      return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {\n        try {\n          const data = yield (0, _fetch.post)(this.fetch, `${this.url}/DeleteIndex`, {\n            vectorBucketName,\n            indexName\n          }, {\n            headers: this.headers\n          });\n          return {\n            data: data || {},\n            error: null\n          };\n        } catch (error) {\n          if (this.shouldThrowOnError) {\n            throw error;\n          }\n          if ((0, _errors.isStorageVectorsError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n  }\n  exports.default = VectorIndexApi;\n});","lineCount":251,"map":[[6,2,1,0],[6,6,1,0,"_tslib"],[6,12,1,0],[6,15,1,0,"require"],[6,22,1,0],[6,23,1,0,"_dependencyMap"],[6,37,1,0],[7,2,2,0],[7,6,2,0,"_constants"],[7,16,2,0],[7,19,2,0,"require"],[7,26,2,0],[7,27,2,0,"_dependencyMap"],[7,41,2,0],[8,2,3,0],[8,6,3,0,"_errors"],[8,13,3,0],[8,16,3,0,"require"],[8,23,3,0],[8,24,3,0,"_dependencyMap"],[8,38,3,0],[9,2,4,0],[9,6,4,0,"_fetch"],[9,12,4,0],[9,15,4,0,"require"],[9,22,4,0],[9,23,4,0,"_dependencyMap"],[9,37,4,0],[10,2,5,0],[10,6,5,0,"_helpers"],[10,14,5,0],[10,17,5,0,"require"],[10,24,5,0],[10,25,5,0,"_dependencyMap"],[10,39,5,0],[11,2,6,0],[12,0,7,0],[13,0,8,0],[14,0,9,0],[15,2,10,15],[15,8,10,21,"VectorIndexApi"],[15,22,10,35],[15,23,10,36],[16,4,11,4,"constructor"],[16,15,11,15,"constructor"],[16,16,11,16,"url"],[16,19,11,19],[16,21,11,21,"headers"],[16,28,11,28],[16,31,11,31],[16,32,11,32],[16,33,11,33],[16,35,11,35,"fetch"],[16,40,11,40],[16,42,11,42],[17,6,12,8],[17,10,12,12],[17,11,12,13,"shouldThrowOnError"],[17,29,12,31],[17,32,12,34],[17,37,12,39],[18,6,13,8],[18,10,13,12],[18,11,13,13,"url"],[18,14,13,16],[18,17,13,19,"url"],[18,20,13,22],[18,21,13,23,"replace"],[18,28,13,30],[18,29,13,31],[18,34,13,36],[18,36,13,38],[18,38,13,40],[18,39,13,41],[19,6,14,8],[19,10,14,12],[19,11,14,13,"headers"],[19,18,14,20],[19,21,14,23,"Object"],[19,27,14,29],[19,28,14,30,"assign"],[19,34,14,36],[19,35,14,37,"Object"],[19,41,14,43],[19,42,14,44,"assign"],[19,48,14,50],[19,49,14,51],[19,50,14,52],[19,51,14,53],[19,53,14,55,"DEFAULT_HEADERS"],[19,79,14,70],[19,80,14,71],[19,82,14,73,"headers"],[19,89,14,80],[19,90,14,81],[20,6,15,8],[20,10,15,12],[20,11,15,13,"fetch"],[20,16,15,18],[20,19,15,21],[20,23,15,21,"resolveFetch"],[20,44,15,33],[20,46,15,34,"fetch"],[20,51,15,39],[20,52,15,40],[21,4,16,4],[22,4,17,4],[23,0,18,0],[24,0,19,0],[25,0,20,0],[26,0,21,0],[27,0,22,0],[28,0,23,0],[29,0,24,0],[30,0,25,0],[31,0,26,0],[32,0,27,0],[33,0,28,0],[34,4,29,4,"throwOnError"],[34,16,29,16,"throwOnError"],[34,17,29,16],[34,19,29,19],[35,6,30,8],[35,10,30,12],[35,11,30,13,"shouldThrowOnError"],[35,29,30,31],[35,32,30,34],[35,36,30,38],[36,6,31,8],[36,13,31,15],[36,17,31,19],[37,4,32,4],[38,4,33,4],[39,0,34,0],[40,0,35,0],[41,0,36,0],[42,0,37,0],[43,0,38,0],[44,0,39,0],[45,0,40,0],[46,0,41,0],[47,0,42,0],[48,0,43,0],[49,0,44,0],[50,0,45,0],[51,0,46,0],[52,0,47,0],[53,0,48,0],[54,0,49,0],[55,0,50,0],[56,0,51,0],[57,0,52,0],[58,0,53,0],[59,0,54,0],[60,0,55,0],[61,0,56,0],[62,0,57,0],[63,0,58,0],[64,0,59,0],[65,0,60,0],[66,0,61,0],[67,0,62,0],[68,0,63,0],[69,0,64,0],[70,0,65,0],[71,4,66,4,"createIndex"],[71,15,66,15,"createIndex"],[71,16,66,16,"options"],[71,23,66,23],[71,25,66,25],[72,6,67,8],[72,13,67,15],[72,17,67,15,"__awaiter"],[72,33,67,24],[72,35,67,25],[72,39,67,29],[72,41,67,31],[72,46,67,36],[72,47,67,37],[72,49,67,39],[72,54,67,44],[72,55,67,45],[72,57,67,47],[72,70,67,60],[73,8,68,12],[73,12,68,16],[74,10,69,16],[74,16,69,22,"data"],[74,20,69,26],[74,23,69,29],[74,29,69,35],[74,33,69,35,"post"],[74,44,69,39],[74,46,69,40],[74,50,69,44],[74,51,69,45,"fetch"],[74,56,69,50],[74,58,69,52],[74,61,69,55],[74,65,69,59],[74,66,69,60,"url"],[74,69,69,63],[74,83,69,77],[74,85,69,79,"options"],[74,92,69,86],[74,94,69,88],[75,12,70,20,"headers"],[75,19,70,27],[75,21,70,29],[75,25,70,33],[75,26,70,34,"headers"],[76,10,71,16],[76,11,71,17],[76,12,71,18],[77,10,72,16],[77,17,72,23],[78,12,72,25,"data"],[78,16,72,29],[78,18,72,31,"data"],[78,22,72,35],[78,26,72,39],[78,27,72,40],[78,28,72,41],[79,12,72,43,"error"],[79,17,72,48],[79,19,72,50],[80,10,72,55],[80,11,72,56],[81,8,73,12],[81,9,73,13],[81,10,74,12],[81,17,74,19,"error"],[81,22,74,24],[81,24,74,26],[82,10,75,16],[82,14,75,20],[82,18,75,24],[82,19,75,25,"shouldThrowOnError"],[82,37,75,43],[82,39,75,45],[83,12,76,20],[83,18,76,26,"error"],[83,23,76,31],[84,10,77,16],[85,10,78,16],[85,14,78,20],[85,18,78,20,"isStorageVectorsError"],[85,47,78,41],[85,49,78,42,"error"],[85,54,78,47],[85,55,78,48],[85,57,78,50],[86,12,79,20],[86,19,79,27],[87,14,79,29,"data"],[87,18,79,33],[87,20,79,35],[87,24,79,39],[88,14,79,41,"error"],[89,12,79,47],[89,13,79,48],[90,10,80,16],[91,10,81,16],[91,16,81,22,"error"],[91,21,81,27],[92,8,82,12],[93,6,83,8],[93,7,83,9],[93,8,83,10],[94,4,84,4],[95,4,85,4],[96,0,86,0],[97,0,87,0],[98,0,88,0],[99,0,89,0],[100,0,90,0],[101,0,91,0],[102,0,92,0],[103,0,93,0],[104,0,94,0],[105,0,95,0],[106,0,96,0],[107,0,97,0],[108,0,98,0],[109,0,99,0],[110,0,100,0],[111,0,101,0],[112,0,102,0],[113,0,103,0],[114,0,104,0],[115,0,105,0],[116,4,106,4,"getIndex"],[116,12,106,12,"getIndex"],[116,13,106,13,"vectorBucketName"],[116,29,106,29],[116,31,106,31,"indexName"],[116,40,106,40],[116,42,106,42],[117,6,107,8],[117,13,107,15],[117,17,107,15,"__awaiter"],[117,33,107,24],[117,35,107,25],[117,39,107,29],[117,41,107,31],[117,46,107,36],[117,47,107,37],[117,49,107,39],[117,54,107,44],[117,55,107,45],[117,57,107,47],[117,70,107,60],[118,8,108,12],[118,12,108,16],[119,10,109,16],[119,16,109,22,"data"],[119,20,109,26],[119,23,109,29],[119,29,109,35],[119,33,109,35,"post"],[119,44,109,39],[119,46,109,40],[119,50,109,44],[119,51,109,45,"fetch"],[119,56,109,50],[119,58,109,52],[119,61,109,55],[119,65,109,59],[119,66,109,60,"url"],[119,69,109,63],[119,80,109,74],[119,82,109,76],[120,12,109,78,"vectorBucketName"],[120,28,109,94],[121,12,109,96,"indexName"],[122,10,109,106],[122,11,109,107],[122,13,109,109],[123,12,109,111,"headers"],[123,19,109,118],[123,21,109,120],[123,25,109,124],[123,26,109,125,"headers"],[124,10,109,133],[124,11,109,134],[124,12,109,135],[125,10,110,16],[125,17,110,23],[126,12,110,25,"data"],[126,16,110,29],[127,12,110,31,"error"],[127,17,110,36],[127,19,110,38],[128,10,110,43],[128,11,110,44],[129,8,111,12],[129,9,111,13],[129,10,112,12],[129,17,112,19,"error"],[129,22,112,24],[129,24,112,26],[130,10,113,16],[130,14,113,20],[130,18,113,24],[130,19,113,25,"shouldThrowOnError"],[130,37,113,43],[130,39,113,45],[131,12,114,20],[131,18,114,26,"error"],[131,23,114,31],[132,10,115,16],[133,10,116,16],[133,14,116,20],[133,18,116,20,"isStorageVectorsError"],[133,47,116,41],[133,49,116,42,"error"],[133,54,116,47],[133,55,116,48],[133,57,116,50],[134,12,117,20],[134,19,117,27],[135,14,117,29,"data"],[135,18,117,33],[135,20,117,35],[135,24,117,39],[136,14,117,41,"error"],[137,12,117,47],[137,13,117,48],[138,10,118,16],[139,10,119,16],[139,16,119,22,"error"],[139,21,119,27],[140,8,120,12],[141,6,121,8],[141,7,121,9],[141,8,121,10],[142,4,122,4],[143,4,123,4],[144,0,124,0],[145,0,125,0],[146,0,126,0],[147,0,127,0],[148,0,128,0],[149,0,129,0],[150,0,130,0],[151,0,131,0],[152,0,132,0],[153,0,133,0],[154,0,134,0],[155,0,135,0],[156,0,136,0],[157,0,137,0],[158,0,138,0],[159,0,139,0],[160,0,140,0],[161,0,141,0],[162,0,142,0],[163,0,143,0],[164,0,144,0],[165,0,145,0],[166,0,146,0],[167,0,147,0],[168,0,148,0],[169,0,149,0],[170,0,150,0],[171,0,151,0],[172,0,152,0],[173,0,153,0],[174,0,154,0],[175,0,155,0],[176,0,156,0],[177,4,157,4,"listIndexes"],[177,15,157,15,"listIndexes"],[177,16,157,16,"options"],[177,23,157,23],[177,25,157,25],[178,6,158,8],[178,13,158,15],[178,17,158,15,"__awaiter"],[178,33,158,24],[178,35,158,25],[178,39,158,29],[178,41,158,31],[178,46,158,36],[178,47,158,37],[178,49,158,39],[178,54,158,44],[178,55,158,45],[178,57,158,47],[178,70,158,60],[179,8,159,12],[179,12,159,16],[180,10,160,16],[180,16,160,22,"data"],[180,20,160,26],[180,23,160,29],[180,29,160,35],[180,33,160,35,"post"],[180,44,160,39],[180,46,160,40],[180,50,160,44],[180,51,160,45,"fetch"],[180,56,160,50],[180,58,160,52],[180,61,160,55],[180,65,160,59],[180,66,160,60,"url"],[180,69,160,63],[180,83,160,77],[180,85,160,79,"options"],[180,92,160,86],[180,94,160,88],[181,12,161,20,"headers"],[181,19,161,27],[181,21,161,29],[181,25,161,33],[181,26,161,34,"headers"],[182,10,162,16],[182,11,162,17],[182,12,162,18],[183,10,163,16],[183,17,163,23],[184,12,163,25,"data"],[184,16,163,29],[185,12,163,31,"error"],[185,17,163,36],[185,19,163,38],[186,10,163,43],[186,11,163,44],[187,8,164,12],[187,9,164,13],[187,10,165,12],[187,17,165,19,"error"],[187,22,165,24],[187,24,165,26],[188,10,166,16],[188,14,166,20],[188,18,166,24],[188,19,166,25,"shouldThrowOnError"],[188,37,166,43],[188,39,166,45],[189,12,167,20],[189,18,167,26,"error"],[189,23,167,31],[190,10,168,16],[191,10,169,16],[191,14,169,20],[191,18,169,20,"isStorageVectorsError"],[191,47,169,41],[191,49,169,42,"error"],[191,54,169,47],[191,55,169,48],[191,57,169,50],[192,12,170,20],[192,19,170,27],[193,14,170,29,"data"],[193,18,170,33],[193,20,170,35],[193,24,170,39],[194,14,170,41,"error"],[195,12,170,47],[195,13,170,48],[196,10,171,16],[197,10,172,16],[197,16,172,22,"error"],[197,21,172,27],[198,8,173,12],[199,6,174,8],[199,7,174,9],[199,8,174,10],[200,4,175,4],[201,4,176,4],[202,0,177,0],[203,0,178,0],[204,0,179,0],[205,0,180,0],[206,0,181,0],[207,0,182,0],[208,0,183,0],[209,0,184,0],[210,0,185,0],[211,0,186,0],[212,0,187,0],[213,0,188,0],[214,0,189,0],[215,0,190,0],[216,0,191,0],[217,0,192,0],[218,0,193,0],[219,0,194,0],[220,0,195,0],[221,0,196,0],[222,4,197,4,"deleteIndex"],[222,15,197,15,"deleteIndex"],[222,16,197,16,"vectorBucketName"],[222,32,197,32],[222,34,197,34,"indexName"],[222,43,197,43],[222,45,197,45],[223,6,198,8],[223,13,198,15],[223,17,198,15,"__awaiter"],[223,33,198,24],[223,35,198,25],[223,39,198,29],[223,41,198,31],[223,46,198,36],[223,47,198,37],[223,49,198,39],[223,54,198,44],[223,55,198,45],[223,57,198,47],[223,70,198,60],[224,8,199,12],[224,12,199,16],[225,10,200,16],[225,16,200,22,"data"],[225,20,200,26],[225,23,200,29],[225,29,200,35],[225,33,200,35,"post"],[225,44,200,39],[225,46,200,40],[225,50,200,44],[225,51,200,45,"fetch"],[225,56,200,50],[225,58,200,52],[225,61,200,55],[225,65,200,59],[225,66,200,60,"url"],[225,69,200,63],[225,83,200,77],[225,85,200,79],[226,12,200,81,"vectorBucketName"],[226,28,200,97],[227,12,200,99,"indexName"],[228,10,200,109],[228,11,200,110],[228,13,200,112],[229,12,200,114,"headers"],[229,19,200,121],[229,21,200,123],[229,25,200,127],[229,26,200,128,"headers"],[230,10,200,136],[230,11,200,137],[230,12,200,138],[231,10,201,16],[231,17,201,23],[232,12,201,25,"data"],[232,16,201,29],[232,18,201,31,"data"],[232,22,201,35],[232,26,201,39],[232,27,201,40],[232,28,201,41],[233,12,201,43,"error"],[233,17,201,48],[233,19,201,50],[234,10,201,55],[234,11,201,56],[235,8,202,12],[235,9,202,13],[235,10,203,12],[235,17,203,19,"error"],[235,22,203,24],[235,24,203,26],[236,10,204,16],[236,14,204,20],[236,18,204,24],[236,19,204,25,"shouldThrowOnError"],[236,37,204,43],[236,39,204,45],[237,12,205,20],[237,18,205,26,"error"],[237,23,205,31],[238,10,206,16],[239,10,207,16],[239,14,207,20],[239,18,207,20,"isStorageVectorsError"],[239,47,207,41],[239,49,207,42,"error"],[239,54,207,47],[239,55,207,48],[239,57,207,50],[240,12,208,20],[240,19,208,27],[241,14,208,29,"data"],[241,18,208,33],[241,20,208,35],[241,24,208,39],[242,14,208,41,"error"],[243,12,208,47],[243,13,208,48],[244,10,209,16],[245,10,210,16],[245,16,210,22,"error"],[245,21,210,27],[246,8,211,12],[247,6,212,8],[247,7,212,9],[247,8,212,10],[248,4,213,4],[249,2,214,0],[250,2,214,1,"exports"],[250,9,214,1],[250,10,214,1,"default"],[250,17,214,1],[250,20,214,1,"VectorIndexApi"],[250,34,214,1],[251,0,214,1],[251,3]],"functionMap":{"names":["<global>","VectorIndexApi","constructor","throwOnError","createIndex","__awaiter$argument_3","getIndex","listIndexes","deleteIndex"],"mappings":"AAA;eCS;ICC;KDK;IEa;KFG;IGkC;+CCC;SDgB;KHC;IKsB;+CDC;SCc;KLC;IMmC;+CFC;SEgB;KNC;IOsB;+CHC;SGc;KPC;CDC"}},"type":"js/module"}]}