{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"../../handlersRegistry","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":60},"end":{"line":2,"column":57,"index":117}}],"key":"Q8MtNj8/mrt1iN8Kay94o881ERE=","exportNames":["*"]}},{"name":"../../../RNGestureHandlerModule","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":118},"end":{"line":3,"column":69,"index":187}}],"key":"2BYIjnTRSFId8SRJ7sJFxLD1BD4=","exportNames":["*"]}},{"name":"../../utils","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":188},"end":{"line":4,"column":68,"index":256}}],"key":"ByXat9lt9duIJLDmSeH0V+tRq1s=","exportNames":["*"]}},{"name":"../../../ghQueueMicrotask","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":314},"end":{"line":6,"column":61,"index":375}}],"key":"6QYiO8x9sAoDBctSRJ19A8sqUNk=","exportNames":["*"]}},{"name":"./utils","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":8,"column":0,"index":424},"end":{"line":12,"column":17,"index":530}}],"key":"fIqjJ6Rx8c7Khc/wm9kX7hQXC5I=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.updateHandlers = updateHandlers;\n  var _handlersRegistry = require(_dependencyMap[1], \"../../handlersRegistry\");\n  var _RNGestureHandlerModule = _interopRequireDefault(require(_dependencyMap[2], \"../../../RNGestureHandlerModule\"));\n  var _utils = require(_dependencyMap[3], \"../../utils\");\n  var _ghQueueMicrotask = require(_dependencyMap[4], \"../../../ghQueueMicrotask\");\n  var _utils2 = require(_dependencyMap[5], \"./utils\");\n  function updateHandlers(preparedGesture, gestureConfig, newGestures) {\n    gestureConfig.prepare();\n    for (var i = 0; i < newGestures.length; i++) {\n      var handler = preparedGesture.attachedGestures[i];\n      (0, _utils2.checkGestureCallbacksForWorklets)(handler);\n\n      // Only update handlerTag when it's actually different, it may be the same\n      // if gesture config object is wrapped with useMemo\n      if (newGestures[i].handlerTag !== handler.handlerTag) {\n        newGestures[i].handlerTag = handler.handlerTag;\n        newGestures[i].handlers.handlerTag = handler.handlerTag;\n      }\n    }\n\n    // Use queueMicrotask to extract handlerTags, because when it's ran, all refs should be updated\n    // and handlerTags in BaseGesture references should be updated in the loop above (we need to wait\n    // in case of external relations)\n    (0, _ghQueueMicrotask.ghQueueMicrotask)(() => {\n      if (!preparedGesture.isMounted) {\n        return;\n      }\n\n      // If amount of gesture configs changes, we need to update the callbacks in shared value\n      var shouldUpdateSharedValueIfUsed = preparedGesture.attachedGestures.length !== newGestures.length;\n      for (var _i = 0; _i < newGestures.length; _i++) {\n        var _handler = preparedGesture.attachedGestures[_i];\n\n        // If the gestureId is different (gesture isn't wrapped with useMemo or its dependencies changed),\n        // we need to update the shared value, assuming the gesture runs on UI thread or the thread changed\n        if (_handler.handlers.gestureId !== newGestures[_i].handlers.gestureId && (newGestures[_i].shouldUseReanimated || _handler.shouldUseReanimated)) {\n          shouldUpdateSharedValueIfUsed = true;\n        }\n        _handler.config = newGestures[_i].config;\n        _handler.handlers = newGestures[_i].handlers;\n        _RNGestureHandlerModule.default.updateGestureHandler(_handler.handlerTag, (0, _utils.filterConfig)(_handler.config, _utils2.ALLOWED_PROPS, (0, _utils2.extractGestureRelations)(_handler)));\n        (0, _handlersRegistry.registerHandler)(_handler.handlerTag, _handler, _handler.config.testId);\n      }\n      if (preparedGesture.animatedHandlers && shouldUpdateSharedValueIfUsed) {\n        var newHandlersValue = preparedGesture.attachedGestures.filter(g => g.shouldUseReanimated) // Ignore gestures that shouldn't run on UI\n        .map(g => g.handlers);\n        preparedGesture.animatedHandlers.value = newHandlersValue;\n      }\n      (0, _utils.scheduleFlushOperations)();\n    });\n  }\n});","lineCount":57,"map":[[7,2,2,0],[7,6,2,0,"_handlersRegistry"],[7,23,2,0],[7,26,2,0,"require"],[7,33,2,0],[7,34,2,0,"_dependencyMap"],[7,48,2,0],[8,2,3,0],[8,6,3,0,"_RNGestureHandlerModule"],[8,29,3,0],[8,32,3,0,"_interopRequireDefault"],[8,54,3,0],[8,55,3,0,"require"],[8,62,3,0],[8,63,3,0,"_dependencyMap"],[8,77,3,0],[9,2,4,0],[9,6,4,0,"_utils"],[9,12,4,0],[9,15,4,0,"require"],[9,22,4,0],[9,23,4,0,"_dependencyMap"],[9,37,4,0],[10,2,6,0],[10,6,6,0,"_ghQueueMicrotask"],[10,23,6,0],[10,26,6,0,"require"],[10,33,6,0],[10,34,6,0,"_dependencyMap"],[10,48,6,0],[11,2,8,0],[11,6,8,0,"_utils2"],[11,13,8,0],[11,16,8,0,"require"],[11,23,8,0],[11,24,8,0,"_dependencyMap"],[11,38,8,0],[12,2,14,7],[12,11,14,16,"updateHandlers"],[12,25,14,30,"updateHandlers"],[12,26,15,2,"preparedGesture"],[12,41,15,39],[12,43,16,2,"gestureConfig"],[12,56,16,46],[12,58,17,2,"newGestures"],[12,69,17,28],[12,71,18,2],[13,4,19,2,"gestureConfig"],[13,17,19,15],[13,18,19,16,"prepare"],[13,25,19,23],[13,26,19,24],[13,27,19,25],[14,4,21,2],[14,9,21,7],[14,13,21,11,"i"],[14,14,21,12],[14,17,21,15],[14,18,21,16],[14,20,21,18,"i"],[14,21,21,19],[14,24,21,22,"newGestures"],[14,35,21,33],[14,36,21,34,"length"],[14,42,21,40],[14,44,21,42,"i"],[14,45,21,43],[14,47,21,45],[14,49,21,47],[15,6,22,4],[15,10,22,10,"handler"],[15,17,22,17],[15,20,22,20,"preparedGesture"],[15,35,22,35],[15,36,22,36,"attachedGestures"],[15,52,22,52],[15,53,22,53,"i"],[15,54,22,54],[15,55,22,55],[16,6,23,4],[16,10,23,4,"checkGestureCallbacksForWorklets"],[16,50,23,36],[16,52,23,37,"handler"],[16,59,23,44],[16,60,23,45],[18,6,25,4],[19,6,26,4],[20,6,27,4],[20,10,27,8,"newGestures"],[20,21,27,19],[20,22,27,20,"i"],[20,23,27,21],[20,24,27,22],[20,25,27,23,"handlerTag"],[20,35,27,33],[20,40,27,38,"handler"],[20,47,27,45],[20,48,27,46,"handlerTag"],[20,58,27,56],[20,60,27,58],[21,8,28,6,"newGestures"],[21,19,28,17],[21,20,28,18,"i"],[21,21,28,19],[21,22,28,20],[21,23,28,21,"handlerTag"],[21,33,28,31],[21,36,28,34,"handler"],[21,43,28,41],[21,44,28,42,"handlerTag"],[21,54,28,52],[22,8,29,6,"newGestures"],[22,19,29,17],[22,20,29,18,"i"],[22,21,29,19],[22,22,29,20],[22,23,29,21,"handlers"],[22,31,29,29],[22,32,29,30,"handlerTag"],[22,42,29,40],[22,45,29,43,"handler"],[22,52,29,50],[22,53,29,51,"handlerTag"],[22,63,29,61],[23,6,30,4],[24,4,31,2],[26,4,33,2],[27,4,34,2],[28,4,35,2],[29,4,36,2],[29,8,36,2,"ghQueueMicrotask"],[29,42,36,18],[29,44,36,19],[29,50,36,25],[30,6,37,4],[30,10,37,8],[30,11,37,9,"preparedGesture"],[30,26,37,24],[30,27,37,25,"isMounted"],[30,36,37,34],[30,38,37,36],[31,8,38,6],[32,6,39,4],[34,6,41,4],[35,6,42,4],[35,10,42,8,"shouldUpdateSharedValueIfUsed"],[35,39,42,37],[35,42,43,6,"preparedGesture"],[35,57,43,21],[35,58,43,22,"attachedGestures"],[35,74,43,38],[35,75,43,39,"length"],[35,81,43,45],[35,86,43,50,"newGestures"],[35,97,43,61],[35,98,43,62,"length"],[35,104,43,68],[36,6,45,4],[36,11,45,9],[36,15,45,13,"i"],[36,17,45,14],[36,20,45,17],[36,21,45,18],[36,23,45,20,"i"],[36,25,45,21],[36,28,45,24,"newGestures"],[36,39,45,35],[36,40,45,36,"length"],[36,46,45,42],[36,48,45,44,"i"],[36,50,45,45],[36,52,45,47],[36,54,45,49],[37,8,46,6],[37,12,46,12,"handler"],[37,20,46,19],[37,23,46,22,"preparedGesture"],[37,38,46,37],[37,39,46,38,"attachedGestures"],[37,55,46,54],[37,56,46,55,"i"],[37,58,46,56],[37,59,46,57],[39,8,48,6],[40,8,49,6],[41,8,50,6],[41,12,51,8,"handler"],[41,20,51,15],[41,21,51,16,"handlers"],[41,29,51,24],[41,30,51,25,"gestureId"],[41,39,51,34],[41,44,51,39,"newGestures"],[41,55,51,50],[41,56,51,51,"i"],[41,58,51,52],[41,59,51,53],[41,60,51,54,"handlers"],[41,68,51,62],[41,69,51,63,"gestureId"],[41,78,51,72],[41,83,52,9,"newGestures"],[41,94,52,20],[41,95,52,21,"i"],[41,97,52,22],[41,98,52,23],[41,99,52,24,"shouldUseReanimated"],[41,118,52,43],[41,122,52,47,"handler"],[41,130,52,54],[41,131,52,55,"shouldUseReanimated"],[41,150,52,74],[41,151,52,75],[41,153,53,8],[42,10,54,8,"shouldUpdateSharedValueIfUsed"],[42,39,54,37],[42,42,54,40],[42,46,54,44],[43,8,55,6],[44,8,57,6,"handler"],[44,16,57,13],[44,17,57,14,"config"],[44,23,57,20],[44,26,57,23,"newGestures"],[44,37,57,34],[44,38,57,35,"i"],[44,40,57,36],[44,41,57,37],[44,42,57,38,"config"],[44,48,57,44],[45,8,58,6,"handler"],[45,16,58,13],[45,17,58,14,"handlers"],[45,25,58,22],[45,28,58,25,"newGestures"],[45,39,58,36],[45,40,58,37,"i"],[45,42,58,38],[45,43,58,39],[45,44,58,40,"handlers"],[45,52,58,48],[46,8,60,6,"RNGestureHandlerModule"],[46,39,60,28],[46,40,60,29,"updateGestureHandler"],[46,60,60,49],[46,61,61,8,"handler"],[46,69,61,15],[46,70,61,16,"handlerTag"],[46,80,61,26],[46,82,62,8],[46,86,62,8,"filterConfig"],[46,105,62,20],[46,107,63,10,"handler"],[46,115,63,17],[46,116,63,18,"config"],[46,122,63,24],[46,124,64,10,"ALLOWED_PROPS"],[46,145,64,23],[46,147,65,10],[46,151,65,10,"extractGestureRelations"],[46,182,65,33],[46,184,65,34,"handler"],[46,192,65,41],[46,193,66,8],[46,194,67,6],[46,195,67,7],[47,8,69,6],[47,12,69,6,"registerHandler"],[47,45,69,21],[47,47,69,22,"handler"],[47,55,69,29],[47,56,69,30,"handlerTag"],[47,66,69,40],[47,68,69,42,"handler"],[47,76,69,49],[47,78,69,51,"handler"],[47,86,69,58],[47,87,69,59,"config"],[47,93,69,65],[47,94,69,66,"testId"],[47,100,69,72],[47,101,69,73],[48,6,70,4],[49,6,72,4],[49,10,72,8,"preparedGesture"],[49,25,72,23],[49,26,72,24,"animatedHandlers"],[49,42,72,40],[49,46,72,44,"shouldUpdateSharedValueIfUsed"],[49,75,72,73],[49,77,72,75],[50,8,73,6],[50,12,73,12,"newHandlersValue"],[50,28,73,28],[50,31,73,31,"preparedGesture"],[50,46,73,46],[50,47,73,47,"attachedGestures"],[50,63,73,63],[50,64,74,9,"filter"],[50,70,74,15],[50,71,74,17,"g"],[50,72,74,18],[50,76,74,23,"g"],[50,77,74,24],[50,78,74,25,"shouldUseReanimated"],[50,97,74,44],[50,98,74,45],[50,99,74,46],[51,8,74,46],[51,9,75,9,"map"],[51,12,75,12],[51,13,75,14,"g"],[51,14,75,15],[51,18,75,20,"g"],[51,19,75,21],[51,20,75,22,"handlers"],[51,28,75,30],[51,29,77,9],[52,8,79,6,"preparedGesture"],[52,23,79,21],[52,24,79,22,"animatedHandlers"],[52,40,79,38],[52,41,79,39,"value"],[52,46,79,44],[52,49,79,47,"newHandlersValue"],[52,65,79,63],[53,6,80,4],[54,6,82,4],[54,10,82,4,"scheduleFlushOperations"],[54,40,82,27],[54,42,82,28],[54,43,82,29],[55,4,83,2],[55,5,83,3],[55,6,83,4],[56,2,84,0],[57,0,84,1],[57,3]],"functionMap":{"names":["<global>","updateHandlers","ghQueueMicrotask$argument_0","preparedGesture.attachedGestures.filter$argument_0","preparedGesture.attachedGestures.filter.map$argument_0"],"mappings":"AAA;OCa;mBCsB;gBCsC,4BD;aEC,iBF;GDQ;CDC"}},"type":"js/module"}]}