{"dependencies":[{"name":"tslib","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":34,"index":34}}],"key":"8R25577gwLd3n1hFG9VYnRLV9eE=","exportNames":["*"]}},{"name":"../lib/constants","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":35},"end":{"line":2,"column":51,"index":86}}],"key":"waQwSI03ELOcvO96++KD0MVyAp4=","exportNames":["*"]}},{"name":"../lib/errors","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":87},"end":{"line":3,"column":47,"index":134}}],"key":"tudpaQjH3OjVUtpmjZhVLT9U2eg=","exportNames":["*"]}},{"name":"../lib/fetch","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":135},"end":{"line":4,"column":54,"index":189}}],"key":"/wMuRavEihVn+ROyUD1wSDV6K9s=","exportNames":["*"]}},{"name":"../lib/helpers","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":190},"end":{"line":5,"column":46,"index":236}}],"key":"MBha6f1BCecZ/poT97RGOQKH7kw=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  var _tslib = require(_dependencyMap[0], \"tslib\");\n  var _constants = require(_dependencyMap[1], \"../lib/constants\");\n  var _errors = require(_dependencyMap[2], \"../lib/errors\");\n  var _fetch = require(_dependencyMap[3], \"../lib/fetch\");\n  var _helpers = require(_dependencyMap[4], \"../lib/helpers\");\n  class StorageBucketApi {\n    constructor(url, headers = {}, fetch, opts) {\n      this.shouldThrowOnError = false;\n      const baseUrl = new URL(url);\n      // if legacy uri is used, replace with new storage host (disables request buffering to allow > 50GB uploads)\n      // \"project-ref.supabase.co\" becomes \"project-ref.storage.supabase.co\"\n      if (opts === null || opts === void 0 ? void 0 : opts.useNewHostname) {\n        const isSupabaseHost = /supabase\\.(co|in|red)$/.test(baseUrl.hostname);\n        if (isSupabaseHost && !baseUrl.hostname.includes('storage.supabase.')) {\n          baseUrl.hostname = baseUrl.hostname.replace('supabase.', 'storage.supabase.');\n        }\n      }\n      this.url = baseUrl.href.replace(/\\/$/, '');\n      this.headers = Object.assign(Object.assign({}, _constants.DEFAULT_HEADERS), headers);\n      this.fetch = (0, _helpers.resolveFetch)(fetch);\n    }\n    /**\n     * Enable throwing errors instead of returning them.\n     */\n    throwOnError() {\n      this.shouldThrowOnError = true;\n      return this;\n    }\n    /**\n     * Retrieves the details of all Storage buckets within an existing project.\n     */\n    listBuckets() {\n      return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {\n        try {\n          const data = yield (0, _fetch.get)(this.fetch, `${this.url}/bucket`, {\n            headers: this.headers\n          });\n          return {\n            data,\n            error: null\n          };\n        } catch (error) {\n          if (this.shouldThrowOnError) {\n            throw error;\n          }\n          if ((0, _errors.isStorageError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * Retrieves the details of an existing Storage bucket.\n     *\n     * @param id The unique identifier of the bucket you would like to retrieve.\n     */\n    getBucket(id) {\n      return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {\n        try {\n          const data = yield (0, _fetch.get)(this.fetch, `${this.url}/bucket/${id}`, {\n            headers: this.headers\n          });\n          return {\n            data,\n            error: null\n          };\n        } catch (error) {\n          if (this.shouldThrowOnError) {\n            throw error;\n          }\n          if ((0, _errors.isStorageError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * Creates a new Storage bucket\n     *\n     * @param id A unique identifier for the bucket you are creating.\n     * @param options.public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations. By default, buckets are private.\n     * @param options.fileSizeLimit specifies the max file size in bytes that can be uploaded to this bucket.\n     * The global file size limit takes precedence over this value.\n     * The default value is null, which doesn't set a per bucket file size limit.\n     * @param options.allowedMimeTypes specifies the allowed mime types that this bucket can accept during upload.\n     * The default value is null, which allows files with all mime types to be uploaded.\n     * Each mime type specified can be a wildcard, e.g. image/*, or a specific mime type, e.g. image/png.\n     * @returns newly created bucket id\n     * @param options.type (private-beta) specifies the bucket type. see `BucketType` for more details.\n     *   - default bucket type is `STANDARD`\n     */\n    createBucket(id_1) {\n      return (0, _tslib.__awaiter)(this, arguments, void 0, function* (id, options = {\n        public: false\n      }) {\n        try {\n          const data = yield (0, _fetch.post)(this.fetch, `${this.url}/bucket`, {\n            id,\n            name: id,\n            type: options.type,\n            public: options.public,\n            file_size_limit: options.fileSizeLimit,\n            allowed_mime_types: options.allowedMimeTypes\n          }, {\n            headers: this.headers\n          });\n          return {\n            data,\n            error: null\n          };\n        } catch (error) {\n          if (this.shouldThrowOnError) {\n            throw error;\n          }\n          if ((0, _errors.isStorageError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * Updates a Storage bucket\n     *\n     * @param id A unique identifier for the bucket you are updating.\n     * @param options.public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations.\n     * @param options.fileSizeLimit specifies the max file size in bytes that can be uploaded to this bucket.\n     * The global file size limit takes precedence over this value.\n     * The default value is null, which doesn't set a per bucket file size limit.\n     * @param options.allowedMimeTypes specifies the allowed mime types that this bucket can accept during upload.\n     * The default value is null, which allows files with all mime types to be uploaded.\n     * Each mime type specified can be a wildcard, e.g. image/*, or a specific mime type, e.g. image/png.\n     */\n    updateBucket(id, options) {\n      return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {\n        try {\n          const data = yield (0, _fetch.put)(this.fetch, `${this.url}/bucket/${id}`, {\n            id,\n            name: id,\n            public: options.public,\n            file_size_limit: options.fileSizeLimit,\n            allowed_mime_types: options.allowedMimeTypes\n          }, {\n            headers: this.headers\n          });\n          return {\n            data,\n            error: null\n          };\n        } catch (error) {\n          if (this.shouldThrowOnError) {\n            throw error;\n          }\n          if ((0, _errors.isStorageError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * Removes all objects inside a single bucket.\n     *\n     * @param id The unique identifier of the bucket you would like to empty.\n     */\n    emptyBucket(id) {\n      return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {\n        try {\n          const data = yield (0, _fetch.post)(this.fetch, `${this.url}/bucket/${id}/empty`, {}, {\n            headers: this.headers\n          });\n          return {\n            data,\n            error: null\n          };\n        } catch (error) {\n          if (this.shouldThrowOnError) {\n            throw error;\n          }\n          if ((0, _errors.isStorageError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * Deletes an existing bucket. A bucket can't be deleted with existing objects inside it.\n     * You must first `empty()` the bucket.\n     *\n     * @param id The unique identifier of the bucket you would like to delete.\n     */\n    deleteBucket(id) {\n      return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {\n        try {\n          const data = yield (0, _fetch.remove)(this.fetch, `${this.url}/bucket/${id}`, {}, {\n            headers: this.headers\n          });\n          return {\n            data,\n            error: null\n          };\n        } catch (error) {\n          if (this.shouldThrowOnError) {\n            throw error;\n          }\n          if ((0, _errors.isStorageError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n  }\n  exports.default = StorageBucketApi;\n});","lineCount":241,"map":[[6,2,1,0],[6,6,1,0,"_tslib"],[6,12,1,0],[6,15,1,0,"require"],[6,22,1,0],[6,23,1,0,"_dependencyMap"],[6,37,1,0],[7,2,2,0],[7,6,2,0,"_constants"],[7,16,2,0],[7,19,2,0,"require"],[7,26,2,0],[7,27,2,0,"_dependencyMap"],[7,41,2,0],[8,2,3,0],[8,6,3,0,"_errors"],[8,13,3,0],[8,16,3,0,"require"],[8,23,3,0],[8,24,3,0,"_dependencyMap"],[8,38,3,0],[9,2,4,0],[9,6,4,0,"_fetch"],[9,12,4,0],[9,15,4,0,"require"],[9,22,4,0],[9,23,4,0,"_dependencyMap"],[9,37,4,0],[10,2,5,0],[10,6,5,0,"_helpers"],[10,14,5,0],[10,17,5,0,"require"],[10,24,5,0],[10,25,5,0,"_dependencyMap"],[10,39,5,0],[11,2,6,15],[11,8,6,21,"StorageBucketApi"],[11,24,6,37],[11,25,6,38],[12,4,7,4,"constructor"],[12,15,7,15,"constructor"],[12,16,7,16,"url"],[12,19,7,19],[12,21,7,21,"headers"],[12,28,7,28],[12,31,7,31],[12,32,7,32],[12,33,7,33],[12,35,7,35,"fetch"],[12,40,7,40],[12,42,7,42,"opts"],[12,46,7,46],[12,48,7,48],[13,6,8,8],[13,10,8,12],[13,11,8,13,"shouldThrowOnError"],[13,29,8,31],[13,32,8,34],[13,37,8,39],[14,6,9,8],[14,12,9,14,"baseUrl"],[14,19,9,21],[14,22,9,24],[14,26,9,28,"URL"],[14,29,9,31],[14,30,9,32,"url"],[14,33,9,35],[14,34,9,36],[15,6,10,8],[16,6,11,8],[17,6,12,8],[17,10,12,12,"opts"],[17,14,12,16],[17,19,12,21],[17,23,12,25],[17,27,12,29,"opts"],[17,31,12,33],[17,36,12,38],[17,41,12,43],[17,42,12,44],[17,45,12,47],[17,50,12,52],[17,51,12,53],[17,54,12,56,"opts"],[17,58,12,60],[17,59,12,61,"useNewHostname"],[17,73,12,75],[17,75,12,77],[18,8,13,12],[18,14,13,18,"isSupabaseHost"],[18,28,13,32],[18,31,13,35],[18,55,13,59],[18,56,13,60,"test"],[18,60,13,64],[18,61,13,65,"baseUrl"],[18,68,13,72],[18,69,13,73,"hostname"],[18,77,13,81],[18,78,13,82],[19,8,14,12],[19,12,14,16,"isSupabaseHost"],[19,26,14,30],[19,30,14,34],[19,31,14,35,"baseUrl"],[19,38,14,42],[19,39,14,43,"hostname"],[19,47,14,51],[19,48,14,52,"includes"],[19,56,14,60],[19,57,14,61],[19,76,14,80],[19,77,14,81],[19,79,14,83],[20,10,15,16,"baseUrl"],[20,17,15,23],[20,18,15,24,"hostname"],[20,26,15,32],[20,29,15,35,"baseUrl"],[20,36,15,42],[20,37,15,43,"hostname"],[20,45,15,51],[20,46,15,52,"replace"],[20,53,15,59],[20,54,15,60],[20,65,15,71],[20,67,15,73],[20,86,15,92],[20,87,15,93],[21,8,16,12],[22,6,17,8],[23,6,18,8],[23,10,18,12],[23,11,18,13,"url"],[23,14,18,16],[23,17,18,19,"baseUrl"],[23,24,18,26],[23,25,18,27,"href"],[23,29,18,31],[23,30,18,32,"replace"],[23,37,18,39],[23,38,18,40],[23,43,18,45],[23,45,18,47],[23,47,18,49],[23,48,18,50],[24,6,19,8],[24,10,19,12],[24,11,19,13,"headers"],[24,18,19,20],[24,21,19,23,"Object"],[24,27,19,29],[24,28,19,30,"assign"],[24,34,19,36],[24,35,19,37,"Object"],[24,41,19,43],[24,42,19,44,"assign"],[24,48,19,50],[24,49,19,51],[24,50,19,52],[24,51,19,53],[24,53,19,55,"DEFAULT_HEADERS"],[24,79,19,70],[24,80,19,71],[24,82,19,73,"headers"],[24,89,19,80],[24,90,19,81],[25,6,20,8],[25,10,20,12],[25,11,20,13,"fetch"],[25,16,20,18],[25,19,20,21],[25,23,20,21,"resolveFetch"],[25,44,20,33],[25,46,20,34,"fetch"],[25,51,20,39],[25,52,20,40],[26,4,21,4],[27,4,22,4],[28,0,23,0],[29,0,24,0],[30,4,25,4,"throwOnError"],[30,16,25,16,"throwOnError"],[30,17,25,16],[30,19,25,19],[31,6,26,8],[31,10,26,12],[31,11,26,13,"shouldThrowOnError"],[31,29,26,31],[31,32,26,34],[31,36,26,38],[32,6,27,8],[32,13,27,15],[32,17,27,19],[33,4,28,4],[34,4,29,4],[35,0,30,0],[36,0,31,0],[37,4,32,4,"listBuckets"],[37,15,32,15,"listBuckets"],[37,16,32,15],[37,18,32,18],[38,6,33,8],[38,13,33,15],[38,17,33,15,"__awaiter"],[38,33,33,24],[38,35,33,25],[38,39,33,29],[38,41,33,31],[38,46,33,36],[38,47,33,37],[38,49,33,39],[38,54,33,44],[38,55,33,45],[38,57,33,47],[38,70,33,60],[39,8,34,12],[39,12,34,16],[40,10,35,16],[40,16,35,22,"data"],[40,20,35,26],[40,23,35,29],[40,29,35,35],[40,33,35,35,"get"],[40,43,35,38],[40,45,35,39],[40,49,35,43],[40,50,35,44,"fetch"],[40,55,35,49],[40,57,35,51],[40,60,35,54],[40,64,35,58],[40,65,35,59,"url"],[40,68,35,62],[40,77,35,71],[40,79,35,73],[41,12,35,75,"headers"],[41,19,35,82],[41,21,35,84],[41,25,35,88],[41,26,35,89,"headers"],[42,10,35,97],[42,11,35,98],[42,12,35,99],[43,10,36,16],[43,17,36,23],[44,12,36,25,"data"],[44,16,36,29],[45,12,36,31,"error"],[45,17,36,36],[45,19,36,38],[46,10,36,43],[46,11,36,44],[47,8,37,12],[47,9,37,13],[47,10,38,12],[47,17,38,19,"error"],[47,22,38,24],[47,24,38,26],[48,10,39,16],[48,14,39,20],[48,18,39,24],[48,19,39,25,"shouldThrowOnError"],[48,37,39,43],[48,39,39,45],[49,12,40,20],[49,18,40,26,"error"],[49,23,40,31],[50,10,41,16],[51,10,42,16],[51,14,42,20],[51,18,42,20,"isStorageError"],[51,40,42,34],[51,42,42,35,"error"],[51,47,42,40],[51,48,42,41],[51,50,42,43],[52,12,43,20],[52,19,43,27],[53,14,43,29,"data"],[53,18,43,33],[53,20,43,35],[53,24,43,39],[54,14,43,41,"error"],[55,12,43,47],[55,13,43,48],[56,10,44,16],[57,10,45,16],[57,16,45,22,"error"],[57,21,45,27],[58,8,46,12],[59,6,47,8],[59,7,47,9],[59,8,47,10],[60,4,48,4],[61,4,49,4],[62,0,50,0],[63,0,51,0],[64,0,52,0],[65,0,53,0],[66,4,54,4,"getBucket"],[66,13,54,13,"getBucket"],[66,14,54,14,"id"],[66,16,54,16],[66,18,54,18],[67,6,55,8],[67,13,55,15],[67,17,55,15,"__awaiter"],[67,33,55,24],[67,35,55,25],[67,39,55,29],[67,41,55,31],[67,46,55,36],[67,47,55,37],[67,49,55,39],[67,54,55,44],[67,55,55,45],[67,57,55,47],[67,70,55,60],[68,8,56,12],[68,12,56,16],[69,10,57,16],[69,16,57,22,"data"],[69,20,57,26],[69,23,57,29],[69,29,57,35],[69,33,57,35,"get"],[69,43,57,38],[69,45,57,39],[69,49,57,43],[69,50,57,44,"fetch"],[69,55,57,49],[69,57,57,51],[69,60,57,54],[69,64,57,58],[69,65,57,59,"url"],[69,68,57,62],[69,79,57,73,"id"],[69,81,57,75],[69,83,57,77],[69,85,57,79],[70,12,57,81,"headers"],[70,19,57,88],[70,21,57,90],[70,25,57,94],[70,26,57,95,"headers"],[71,10,57,103],[71,11,57,104],[71,12,57,105],[72,10,58,16],[72,17,58,23],[73,12,58,25,"data"],[73,16,58,29],[74,12,58,31,"error"],[74,17,58,36],[74,19,58,38],[75,10,58,43],[75,11,58,44],[76,8,59,12],[76,9,59,13],[76,10,60,12],[76,17,60,19,"error"],[76,22,60,24],[76,24,60,26],[77,10,61,16],[77,14,61,20],[77,18,61,24],[77,19,61,25,"shouldThrowOnError"],[77,37,61,43],[77,39,61,45],[78,12,62,20],[78,18,62,26,"error"],[78,23,62,31],[79,10,63,16],[80,10,64,16],[80,14,64,20],[80,18,64,20,"isStorageError"],[80,40,64,34],[80,42,64,35,"error"],[80,47,64,40],[80,48,64,41],[80,50,64,43],[81,12,65,20],[81,19,65,27],[82,14,65,29,"data"],[82,18,65,33],[82,20,65,35],[82,24,65,39],[83,14,65,41,"error"],[84,12,65,47],[84,13,65,48],[85,10,66,16],[86,10,67,16],[86,16,67,22,"error"],[86,21,67,27],[87,8,68,12],[88,6,69,8],[88,7,69,9],[88,8,69,10],[89,4,70,4],[90,4,71,4],[91,0,72,0],[92,0,73,0],[93,0,74,0],[94,0,75,0],[95,0,76,0],[96,0,77,0],[97,0,78,0],[98,0,79,0],[99,0,80,0],[100,0,81,0],[101,0,82,0],[102,0,83,0],[103,0,84,0],[104,0,85,0],[105,4,86,4,"createBucket"],[105,16,86,16,"createBucket"],[105,17,86,17,"id_1"],[105,21,86,21],[105,23,86,23],[106,6,87,8],[106,13,87,15],[106,17,87,15,"__awaiter"],[106,33,87,24],[106,35,87,25],[106,39,87,29],[106,41,87,31,"arguments"],[106,50,87,40],[106,52,87,42],[106,57,87,47],[106,58,87,48],[106,60,87,50],[106,71,87,61,"id"],[106,73,87,63],[106,75,87,65,"options"],[106,82,87,72],[106,85,87,75],[107,8,88,12,"public"],[107,14,88,18],[107,16,88,20],[108,6,89,8],[108,7,89,9],[108,9,89,11],[109,8,90,12],[109,12,90,16],[110,10,91,16],[110,16,91,22,"data"],[110,20,91,26],[110,23,91,29],[110,29,91,35],[110,33,91,35,"post"],[110,44,91,39],[110,46,91,40],[110,50,91,44],[110,51,91,45,"fetch"],[110,56,91,50],[110,58,91,52],[110,61,91,55],[110,65,91,59],[110,66,91,60,"url"],[110,69,91,63],[110,78,91,72],[110,80,91,74],[111,12,92,20,"id"],[111,14,92,22],[112,12,93,20,"name"],[112,16,93,24],[112,18,93,26,"id"],[112,20,93,28],[113,12,94,20,"type"],[113,16,94,24],[113,18,94,26,"options"],[113,25,94,33],[113,26,94,34,"type"],[113,30,94,38],[114,12,95,20,"public"],[114,18,95,26],[114,20,95,28,"options"],[114,27,95,35],[114,28,95,36,"public"],[114,34,95,42],[115,12,96,20,"file_size_limit"],[115,27,96,35],[115,29,96,37,"options"],[115,36,96,44],[115,37,96,45,"fileSizeLimit"],[115,50,96,58],[116,12,97,20,"allowed_mime_types"],[116,30,97,38],[116,32,97,40,"options"],[116,39,97,47],[116,40,97,48,"allowedMimeTypes"],[117,10,98,16],[117,11,98,17],[117,13,98,19],[118,12,98,21,"headers"],[118,19,98,28],[118,21,98,30],[118,25,98,34],[118,26,98,35,"headers"],[119,10,98,43],[119,11,98,44],[119,12,98,45],[120,10,99,16],[120,17,99,23],[121,12,99,25,"data"],[121,16,99,29],[122,12,99,31,"error"],[122,17,99,36],[122,19,99,38],[123,10,99,43],[123,11,99,44],[124,8,100,12],[124,9,100,13],[124,10,101,12],[124,17,101,19,"error"],[124,22,101,24],[124,24,101,26],[125,10,102,16],[125,14,102,20],[125,18,102,24],[125,19,102,25,"shouldThrowOnError"],[125,37,102,43],[125,39,102,45],[126,12,103,20],[126,18,103,26,"error"],[126,23,103,31],[127,10,104,16],[128,10,105,16],[128,14,105,20],[128,18,105,20,"isStorageError"],[128,40,105,34],[128,42,105,35,"error"],[128,47,105,40],[128,48,105,41],[128,50,105,43],[129,12,106,20],[129,19,106,27],[130,14,106,29,"data"],[130,18,106,33],[130,20,106,35],[130,24,106,39],[131,14,106,41,"error"],[132,12,106,47],[132,13,106,48],[133,10,107,16],[134,10,108,16],[134,16,108,22,"error"],[134,21,108,27],[135,8,109,12],[136,6,110,8],[136,7,110,9],[136,8,110,10],[137,4,111,4],[138,4,112,4],[139,0,113,0],[140,0,114,0],[141,0,115,0],[142,0,116,0],[143,0,117,0],[144,0,118,0],[145,0,119,0],[146,0,120,0],[147,0,121,0],[148,0,122,0],[149,0,123,0],[150,4,124,4,"updateBucket"],[150,16,124,16,"updateBucket"],[150,17,124,17,"id"],[150,19,124,19],[150,21,124,21,"options"],[150,28,124,28],[150,30,124,30],[151,6,125,8],[151,13,125,15],[151,17,125,15,"__awaiter"],[151,33,125,24],[151,35,125,25],[151,39,125,29],[151,41,125,31],[151,46,125,36],[151,47,125,37],[151,49,125,39],[151,54,125,44],[151,55,125,45],[151,57,125,47],[151,70,125,60],[152,8,126,12],[152,12,126,16],[153,10,127,16],[153,16,127,22,"data"],[153,20,127,26],[153,23,127,29],[153,29,127,35],[153,33,127,35,"put"],[153,43,127,38],[153,45,127,39],[153,49,127,43],[153,50,127,44,"fetch"],[153,55,127,49],[153,57,127,51],[153,60,127,54],[153,64,127,58],[153,65,127,59,"url"],[153,68,127,62],[153,79,127,73,"id"],[153,81,127,75],[153,83,127,77],[153,85,127,79],[154,12,128,20,"id"],[154,14,128,22],[155,12,129,20,"name"],[155,16,129,24],[155,18,129,26,"id"],[155,20,129,28],[156,12,130,20,"public"],[156,18,130,26],[156,20,130,28,"options"],[156,27,130,35],[156,28,130,36,"public"],[156,34,130,42],[157,12,131,20,"file_size_limit"],[157,27,131,35],[157,29,131,37,"options"],[157,36,131,44],[157,37,131,45,"fileSizeLimit"],[157,50,131,58],[158,12,132,20,"allowed_mime_types"],[158,30,132,38],[158,32,132,40,"options"],[158,39,132,47],[158,40,132,48,"allowedMimeTypes"],[159,10,133,16],[159,11,133,17],[159,13,133,19],[160,12,133,21,"headers"],[160,19,133,28],[160,21,133,30],[160,25,133,34],[160,26,133,35,"headers"],[161,10,133,43],[161,11,133,44],[161,12,133,45],[162,10,134,16],[162,17,134,23],[163,12,134,25,"data"],[163,16,134,29],[164,12,134,31,"error"],[164,17,134,36],[164,19,134,38],[165,10,134,43],[165,11,134,44],[166,8,135,12],[166,9,135,13],[166,10,136,12],[166,17,136,19,"error"],[166,22,136,24],[166,24,136,26],[167,10,137,16],[167,14,137,20],[167,18,137,24],[167,19,137,25,"shouldThrowOnError"],[167,37,137,43],[167,39,137,45],[168,12,138,20],[168,18,138,26,"error"],[168,23,138,31],[169,10,139,16],[170,10,140,16],[170,14,140,20],[170,18,140,20,"isStorageError"],[170,40,140,34],[170,42,140,35,"error"],[170,47,140,40],[170,48,140,41],[170,50,140,43],[171,12,141,20],[171,19,141,27],[172,14,141,29,"data"],[172,18,141,33],[172,20,141,35],[172,24,141,39],[173,14,141,41,"error"],[174,12,141,47],[174,13,141,48],[175,10,142,16],[176,10,143,16],[176,16,143,22,"error"],[176,21,143,27],[177,8,144,12],[178,6,145,8],[178,7,145,9],[178,8,145,10],[179,4,146,4],[180,4,147,4],[181,0,148,0],[182,0,149,0],[183,0,150,0],[184,0,151,0],[185,4,152,4,"emptyBucket"],[185,15,152,15,"emptyBucket"],[185,16,152,16,"id"],[185,18,152,18],[185,20,152,20],[186,6,153,8],[186,13,153,15],[186,17,153,15,"__awaiter"],[186,33,153,24],[186,35,153,25],[186,39,153,29],[186,41,153,31],[186,46,153,36],[186,47,153,37],[186,49,153,39],[186,54,153,44],[186,55,153,45],[186,57,153,47],[186,70,153,60],[187,8,154,12],[187,12,154,16],[188,10,155,16],[188,16,155,22,"data"],[188,20,155,26],[188,23,155,29],[188,29,155,35],[188,33,155,35,"post"],[188,44,155,39],[188,46,155,40],[188,50,155,44],[188,51,155,45,"fetch"],[188,56,155,50],[188,58,155,52],[188,61,155,55],[188,65,155,59],[188,66,155,60,"url"],[188,69,155,63],[188,80,155,74,"id"],[188,82,155,76],[188,90,155,84],[188,92,155,86],[188,93,155,87],[188,94,155,88],[188,96,155,90],[189,12,155,92,"headers"],[189,19,155,99],[189,21,155,101],[189,25,155,105],[189,26,155,106,"headers"],[190,10,155,114],[190,11,155,115],[190,12,155,116],[191,10,156,16],[191,17,156,23],[192,12,156,25,"data"],[192,16,156,29],[193,12,156,31,"error"],[193,17,156,36],[193,19,156,38],[194,10,156,43],[194,11,156,44],[195,8,157,12],[195,9,157,13],[195,10,158,12],[195,17,158,19,"error"],[195,22,158,24],[195,24,158,26],[196,10,159,16],[196,14,159,20],[196,18,159,24],[196,19,159,25,"shouldThrowOnError"],[196,37,159,43],[196,39,159,45],[197,12,160,20],[197,18,160,26,"error"],[197,23,160,31],[198,10,161,16],[199,10,162,16],[199,14,162,20],[199,18,162,20,"isStorageError"],[199,40,162,34],[199,42,162,35,"error"],[199,47,162,40],[199,48,162,41],[199,50,162,43],[200,12,163,20],[200,19,163,27],[201,14,163,29,"data"],[201,18,163,33],[201,20,163,35],[201,24,163,39],[202,14,163,41,"error"],[203,12,163,47],[203,13,163,48],[204,10,164,16],[205,10,165,16],[205,16,165,22,"error"],[205,21,165,27],[206,8,166,12],[207,6,167,8],[207,7,167,9],[207,8,167,10],[208,4,168,4],[209,4,169,4],[210,0,170,0],[211,0,171,0],[212,0,172,0],[213,0,173,0],[214,0,174,0],[215,4,175,4,"deleteBucket"],[215,16,175,16,"deleteBucket"],[215,17,175,17,"id"],[215,19,175,19],[215,21,175,21],[216,6,176,8],[216,13,176,15],[216,17,176,15,"__awaiter"],[216,33,176,24],[216,35,176,25],[216,39,176,29],[216,41,176,31],[216,46,176,36],[216,47,176,37],[216,49,176,39],[216,54,176,44],[216,55,176,45],[216,57,176,47],[216,70,176,60],[217,8,177,12],[217,12,177,16],[218,10,178,16],[218,16,178,22,"data"],[218,20,178,26],[218,23,178,29],[218,29,178,35],[218,33,178,35,"remove"],[218,46,178,41],[218,48,178,42],[218,52,178,46],[218,53,178,47,"fetch"],[218,58,178,52],[218,60,178,54],[218,63,178,57],[218,67,178,61],[218,68,178,62,"url"],[218,71,178,65],[218,82,178,76,"id"],[218,84,178,78],[218,86,178,80],[218,88,178,82],[218,89,178,83],[218,90,178,84],[218,92,178,86],[219,12,178,88,"headers"],[219,19,178,95],[219,21,178,97],[219,25,178,101],[219,26,178,102,"headers"],[220,10,178,110],[220,11,178,111],[220,12,178,112],[221,10,179,16],[221,17,179,23],[222,12,179,25,"data"],[222,16,179,29],[223,12,179,31,"error"],[223,17,179,36],[223,19,179,38],[224,10,179,43],[224,11,179,44],[225,8,180,12],[225,9,180,13],[225,10,181,12],[225,17,181,19,"error"],[225,22,181,24],[225,24,181,26],[226,10,182,16],[226,14,182,20],[226,18,182,24],[226,19,182,25,"shouldThrowOnError"],[226,37,182,43],[226,39,182,45],[227,12,183,20],[227,18,183,26,"error"],[227,23,183,31],[228,10,184,16],[229,10,185,16],[229,14,185,20],[229,18,185,20,"isStorageError"],[229,40,185,34],[229,42,185,35,"error"],[229,47,185,40],[229,48,185,41],[229,50,185,43],[230,12,186,20],[230,19,186,27],[231,14,186,29,"data"],[231,18,186,33],[231,20,186,35],[231,24,186,39],[232,14,186,41,"error"],[233,12,186,47],[233,13,186,48],[234,10,187,16],[235,10,188,16],[235,16,188,22,"error"],[235,21,188,27],[236,8,189,12],[237,6,190,8],[237,7,190,9],[237,8,190,10],[238,4,191,4],[239,2,192,0],[240,2,192,1,"exports"],[240,9,192,1],[240,10,192,1,"default"],[240,17,192,1],[240,20,192,1,"StorageBucketApi"],[240,36,192,1],[241,0,192,1],[241,3]],"functionMap":{"names":["<global>","StorageBucketApi","constructor","throwOnError","listBuckets","__awaiter$argument_3","getBucket","createBucket","updateBucket","emptyBucket","deleteBucket"],"mappings":"AAA;eCK;ICC;KDc;IEI;KFG;IGI;+CCC;SDc;KHC;IKM;+CDC;SCc;KLC;IMgB;kDFC;SEuB;KNC;IOa;+CHC;SGoB;KPC;IQM;+CJC;SIc;KRC;ISO;+CLC;SKc;KTC;CDC"}},"type":"js/module"}]}