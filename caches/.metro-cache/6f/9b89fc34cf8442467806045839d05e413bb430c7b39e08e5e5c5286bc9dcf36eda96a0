{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.NotificationFeedbackType = exports.ImpactFeedbackStyle = exports.AndroidHaptics = void 0;\n  // @needsAudit\n  /**\n   * The type of notification feedback generated by a `UINotificationFeedbackGenerator` object.\n   * [`UINotificationFeedbackType`](https://developer.apple.com/documentation/uikit/uinotificationfeedbackgenerator/feedbacktype).\n   */\n  var NotificationFeedbackType = exports.NotificationFeedbackType = /*#__PURE__*/function (NotificationFeedbackType) {\n    /**\n     * A notification feedback type indicating that a task has completed successfully.\n     */\n    NotificationFeedbackType[\"Success\"] = \"success\";\n    /**\n     * A notification feedback type indicating that a task has produced a warning.\n     */\n    NotificationFeedbackType[\"Warning\"] = \"warning\";\n    /**\n     * A notification feedback type indicating that a task has failed.\n     */\n    NotificationFeedbackType[\"Error\"] = \"error\";\n    return NotificationFeedbackType;\n  }({}); // @needsAudit\n  /**\n   * The mass of the objects in the collision simulated by a `UIImpactFeedbackGenerator` object\n   * [`UINotificationFeedbackStyle`](https://developer.apple.com/documentation/uikit/uiimpactfeedbackgenerator/feedbackstyle).\n   */\n  var ImpactFeedbackStyle = exports.ImpactFeedbackStyle = /*#__PURE__*/function (ImpactFeedbackStyle) {\n    /**\n     * A collision between small, light user interface elements.\n     */\n    ImpactFeedbackStyle[\"Light\"] = \"light\";\n    /**\n     * A collision between moderately sized user interface elements.\n     */\n    ImpactFeedbackStyle[\"Medium\"] = \"medium\";\n    /**\n     * A collision between large, heavy user interface elements.\n     */\n    ImpactFeedbackStyle[\"Heavy\"] = \"heavy\";\n    /**\n     * A collision between user interface elements that are soft, exhibiting a large amount of compression or elasticity.\n     */\n    ImpactFeedbackStyle[\"Soft\"] = \"soft\";\n    /**\n     * A collision between user interface elements that are rigid, exhibiting a small amount of compression or elasticity.\n     */\n    ImpactFeedbackStyle[\"Rigid\"] = \"rigid\";\n    return ImpactFeedbackStyle;\n  }({});\n  /**\n   * @platform android\n   */\n  var AndroidHaptics = exports.AndroidHaptics = /*#__PURE__*/function (AndroidHaptics) {\n    /**\n     * A haptic effect to signal the confirmation or successful completion of a user interaction.\n     */\n    AndroidHaptics[\"Confirm\"] = \"confirm\";\n    /**\n     * A haptic effect to signal the rejection or failure of a user interaction.\n     */\n    AndroidHaptics[\"Reject\"] = \"reject\";\n    /**\n     * The user has started a gesture (for example, on the soft keyboard).\n     */\n    AndroidHaptics[\"Gesture_Start\"] = \"gesture-start\";\n    /**\n     * The user has finished a gesture (for example, on the soft keyboard).\n     */\n    AndroidHaptics[\"Gesture_End\"] = \"gesture-end\";\n    /**\n     * The user has toggled a switch or button into the on position.\n     */\n    AndroidHaptics[\"Toggle_On\"] = \"toggle-on\";\n    /**\n     * The user has toggled a switch or button into the off position.\n     */\n    AndroidHaptics[\"Toggle_Off\"] = \"toggle-off\";\n    /**\n     * The user has pressed either an hour or minute tick of a Clock.\n     */\n    AndroidHaptics[\"Clock_Tick\"] = \"clock-tick\";\n    /**\n     * The user has performed a context click on an object.\n     */\n    AndroidHaptics[\"Context_Click\"] = \"context-click\";\n    /**\n     * The user has started a drag-and-drop gesture. The drag target has just been \"picked up\".\n     */\n    AndroidHaptics[\"Drag_Start\"] = \"drag-start\";\n    /**\n     * The user has pressed a soft keyboard key.\n     */\n    AndroidHaptics[\"Keyboard_Tap\"] = \"keyboard-tap\";\n    /**\n     * The user has pressed a virtual or software keyboard key.\n     */\n    AndroidHaptics[\"Keyboard_Press\"] = \"keyboard-press\";\n    /**\n     * The user has released a virtual keyboard key.\n     */\n    AndroidHaptics[\"Keyboard_Release\"] = \"keyboard-release\";\n    /**\n     * The user has performed a long press on an object that results in an action being performed.\n     */\n    AndroidHaptics[\"Long_Press\"] = \"long-press\";\n    /**\n     * The user has pressed on a virtual on-screen key.\n     */\n    AndroidHaptics[\"Virtual_Key\"] = \"virtual-key\";\n    /**\n     * The user has released a virtual key.\n     */\n    AndroidHaptics[\"Virtual_Key_Release\"] = \"virtual-key-release\";\n    /**\n     * No haptic feedback should be performed.\n     */\n    AndroidHaptics[\"No_Haptics\"] = \"no-haptics\";\n    /**\n     * The user is switching between a series of potential choices. For example, items in a list or discrete points on a slider.\n     */\n    AndroidHaptics[\"Segment_Tick\"] = \"segment-tick\";\n    /**\n     * The user is switching between a series of many potential choices. For example, minutes on a clock face or individual percentages.\n     * This constant is expected to be very soft, so as not to be uncomfortable when performed a lot in quick succession.\n     * If the device can't make a suitably soft vibration, then it may not make any vibration.\n     */\n    AndroidHaptics[\"Segment_Frequent_Tick\"] = \"segment-frequent-tick\";\n    /**\n     * The user has performed a selection/insertion handle move on text field.\n     */\n    AndroidHaptics[\"Text_Handle_Move\"] = \"text-handle-move\";\n    return AndroidHaptics;\n  }({});\n});","lineCount":137,"map":[[6,2,1,0],[7,2,2,0],[8,0,3,0],[9,0,4,0],[10,0,5,0],[11,2,2,0],[11,6,6,12,"NotificationFeedbackType"],[11,30,6,36],[11,33,6,36,"exports"],[11,40,6,36],[11,41,6,36,"NotificationFeedbackType"],[11,65,6,36],[11,91,6,12,"NotificationFeedbackType"],[11,115,6,36],[12,4,7,2],[13,0,8,0],[14,0,9,0],[15,4,6,12,"NotificationFeedbackType"],[15,28,6,36],[16,4,11,2],[17,0,12,0],[18,0,13,0],[19,4,6,12,"NotificationFeedbackType"],[19,28,6,36],[20,4,15,2],[21,0,16,0],[22,0,17,0],[23,4,6,12,"NotificationFeedbackType"],[23,28,6,36],[24,4,6,36],[24,11,6,12,"NotificationFeedbackType"],[24,35,6,36],[25,2,6,36],[25,9,21,0],[26,2,22,0],[27,0,23,0],[28,0,24,0],[29,0,25,0],[30,2,22,0],[30,6,26,12,"ImpactFeedbackStyle"],[30,25,26,31],[30,28,26,31,"exports"],[30,35,26,31],[30,36,26,31,"ImpactFeedbackStyle"],[30,55,26,31],[30,81,26,12,"ImpactFeedbackStyle"],[30,100,26,31],[31,4,27,2],[32,0,28,0],[33,0,29,0],[34,4,26,12,"ImpactFeedbackStyle"],[34,23,26,31],[35,4,31,2],[36,0,32,0],[37,0,33,0],[38,4,26,12,"ImpactFeedbackStyle"],[38,23,26,31],[39,4,35,2],[40,0,36,0],[41,0,37,0],[42,4,26,12,"ImpactFeedbackStyle"],[42,23,26,31],[43,4,39,2],[44,0,40,0],[45,0,41,0],[46,4,26,12,"ImpactFeedbackStyle"],[46,23,26,31],[47,4,43,2],[48,0,44,0],[49,0,45,0],[50,4,26,12,"ImpactFeedbackStyle"],[50,23,26,31],[51,4,26,31],[51,11,26,12,"ImpactFeedbackStyle"],[51,30,26,31],[52,2,26,31],[53,2,49,0],[54,0,50,0],[55,0,51,0],[56,2,49,0],[56,6,52,12,"AndroidHaptics"],[56,20,52,26],[56,23,52,26,"exports"],[56,30,52,26],[56,31,52,26,"AndroidHaptics"],[56,45,52,26],[56,71,52,12,"AndroidHaptics"],[56,85,52,26],[57,4,53,2],[58,0,54,0],[59,0,55,0],[60,4,52,12,"AndroidHaptics"],[60,18,52,26],[61,4,57,2],[62,0,58,0],[63,0,59,0],[64,4,52,12,"AndroidHaptics"],[64,18,52,26],[65,4,61,2],[66,0,62,0],[67,0,63,0],[68,4,52,12,"AndroidHaptics"],[68,18,52,26],[69,4,65,2],[70,0,66,0],[71,0,67,0],[72,4,52,12,"AndroidHaptics"],[72,18,52,26],[73,4,69,2],[74,0,70,0],[75,0,71,0],[76,4,52,12,"AndroidHaptics"],[76,18,52,26],[77,4,73,2],[78,0,74,0],[79,0,75,0],[80,4,52,12,"AndroidHaptics"],[80,18,52,26],[81,4,77,2],[82,0,78,0],[83,0,79,0],[84,4,52,12,"AndroidHaptics"],[84,18,52,26],[85,4,81,2],[86,0,82,0],[87,0,83,0],[88,4,52,12,"AndroidHaptics"],[88,18,52,26],[89,4,85,2],[90,0,86,0],[91,0,87,0],[92,4,52,12,"AndroidHaptics"],[92,18,52,26],[93,4,89,2],[94,0,90,0],[95,0,91,0],[96,4,52,12,"AndroidHaptics"],[96,18,52,26],[97,4,93,2],[98,0,94,0],[99,0,95,0],[100,4,52,12,"AndroidHaptics"],[100,18,52,26],[101,4,97,2],[102,0,98,0],[103,0,99,0],[104,4,52,12,"AndroidHaptics"],[104,18,52,26],[105,4,101,2],[106,0,102,0],[107,0,103,0],[108,4,52,12,"AndroidHaptics"],[108,18,52,26],[109,4,105,2],[110,0,106,0],[111,0,107,0],[112,4,52,12,"AndroidHaptics"],[112,18,52,26],[113,4,109,2],[114,0,110,0],[115,0,111,0],[116,4,52,12,"AndroidHaptics"],[116,18,52,26],[117,4,113,2],[118,0,114,0],[119,0,115,0],[120,4,52,12,"AndroidHaptics"],[120,18,52,26],[121,4,117,2],[122,0,118,0],[123,0,119,0],[124,4,52,12,"AndroidHaptics"],[124,18,52,26],[125,4,121,2],[126,0,122,0],[127,0,123,0],[128,0,124,0],[129,0,125,0],[130,4,52,12,"AndroidHaptics"],[130,18,52,26],[131,4,127,2],[132,0,128,0],[133,0,129,0],[134,4,52,12,"AndroidHaptics"],[134,18,52,26],[135,4,52,26],[135,11,52,12,"AndroidHaptics"],[135,25,52,26],[136,2,52,26],[137,0,52,26],[137,3]],"functionMap":{"names":["<global>"],"mappings":"AAA"}},"type":"js/module"}]}