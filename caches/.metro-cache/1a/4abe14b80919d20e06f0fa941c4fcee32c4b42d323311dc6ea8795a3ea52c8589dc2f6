{"dependencies":[{"name":"tslib","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":16,"index":93},"end":{"line":3,"column":32,"index":109}}],"key":"vm88vOsSPZItrLOmMEyUuGkd1y4=","exportNames":["*"]}},{"name":"./PostgrestQueryBuilder","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":56,"index":167},"end":{"line":4,"column":90,"index":201}}],"key":"6yLSRkTCaGyTSQvLUJvo14aYbi8=","exportNames":["*"]}},{"name":"./PostgrestFilterBuilder","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":57,"index":261},"end":{"line":5,"column":92,"index":296}}],"key":"NGvdEkdD+wH/sBHVGxr/LfyZvLA=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  const tslib_1 = require(_dependencyMap[0], \"tslib\");\n  const PostgrestQueryBuilder_1 = tslib_1.__importDefault(require(_dependencyMap[1], \"./PostgrestQueryBuilder\"));\n  const PostgrestFilterBuilder_1 = tslib_1.__importDefault(require(_dependencyMap[2], \"./PostgrestFilterBuilder\"));\n  /**\n   * PostgREST client.\n   *\n   * @typeParam Database - Types for the schema from the [type\n   * generator](https://supabase.com/docs/reference/javascript/next/typescript-support)\n   *\n   * @typeParam SchemaName - Postgres schema to switch to. Must be a string\n   * literal, the same one passed to the constructor. If the schema is not\n   * `\"public\"`, this must be supplied manually.\n   */\n  class PostgrestClient {\n    // TODO: Add back shouldThrowOnError once we figure out the typings\n    /**\n     * Creates a PostgREST client.\n     *\n     * @param url - URL of the PostgREST endpoint\n     * @param options - Named parameters\n     * @param options.headers - Custom headers\n     * @param options.schema - Postgres schema to switch to\n     * @param options.fetch - Custom fetch\n     */\n    constructor(url, {\n      headers = {},\n      schema,\n      fetch\n    } = {}) {\n      this.url = url;\n      this.headers = new Headers(headers);\n      this.schemaName = schema;\n      this.fetch = fetch;\n    }\n    /**\n     * Perform a query on a table or a view.\n     *\n     * @param relation - The table or view name to query\n     */\n    from(relation) {\n      const url = new URL(`${this.url}/${relation}`);\n      return new PostgrestQueryBuilder_1.default(url, {\n        headers: new Headers(this.headers),\n        schema: this.schemaName,\n        fetch: this.fetch\n      });\n    }\n    /**\n     * Select a schema to query or perform an function (rpc) call.\n     *\n     * The schema needs to be on the list of exposed schemas inside Supabase.\n     *\n     * @param schema - The schema to query\n     */\n    schema(schema) {\n      return new PostgrestClient(this.url, {\n        headers: this.headers,\n        schema,\n        fetch: this.fetch\n      });\n    }\n    /**\n     * Perform a function call.\n     *\n     * @param fn - The function name to call\n     * @param args - The arguments to pass to the function call\n     * @param options - Named parameters\n     * @param options.head - When set to `true`, `data` will not be returned.\n     * Useful if you only need the count.\n     * @param options.get - When set to `true`, the function will be called with\n     * read-only access mode.\n     * @param options.count - Count algorithm to use to count rows returned by the\n     * function. Only applicable for [set-returning\n     * functions](https://www.postgresql.org/docs/current/functions-srf.html).\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     */\n    rpc(fn, args = {}, {\n      head = false,\n      get = false,\n      count\n    } = {}) {\n      var _a;\n      let method;\n      const url = new URL(`${this.url}/rpc/${fn}`);\n      let body;\n      if (head || get) {\n        method = head ? 'HEAD' : 'GET';\n        Object.entries(args)\n        // params with undefined value needs to be filtered out, otherwise it'll\n        // show up as `?param=undefined`\n        .filter(([_, value]) => value !== undefined)\n        // array values need special syntax\n        .map(([name, value]) => [name, Array.isArray(value) ? `{${value.join(',')}}` : `${value}`]).forEach(([name, value]) => {\n          url.searchParams.append(name, value);\n        });\n      } else {\n        method = 'POST';\n        body = args;\n      }\n      const headers = new Headers(this.headers);\n      if (count) {\n        headers.set('Prefer', `count=${count}`);\n      }\n      return new PostgrestFilterBuilder_1.default({\n        method,\n        url,\n        headers,\n        schema: this.schemaName,\n        body,\n        fetch: (_a = this.fetch) !== null && _a !== void 0 ? _a : fetch\n      });\n    }\n  }\n  exports.default = PostgrestClient;\n});","lineCount":129,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0],[7,8,3,6,"tslib_1"],[7,15,3,13],[7,18,3,16,"require"],[7,25,3,23],[7,26,3,23,"_dependencyMap"],[7,40,3,23],[7,52,3,31],[7,53,3,32],[8,2,4,0],[8,8,4,6,"PostgrestQueryBuilder_1"],[8,31,4,29],[8,34,4,32,"tslib_1"],[8,41,4,39],[8,42,4,40,"__importDefault"],[8,57,4,55],[8,58,4,56,"require"],[8,65,4,63],[8,66,4,63,"_dependencyMap"],[8,80,4,63],[8,110,4,89],[8,111,4,90],[8,112,4,91],[9,2,5,0],[9,8,5,6,"PostgrestFilterBuilder_1"],[9,32,5,30],[9,35,5,33,"tslib_1"],[9,42,5,40],[9,43,5,41,"__importDefault"],[9,58,5,56],[9,59,5,57,"require"],[9,66,5,64],[9,67,5,64,"_dependencyMap"],[9,81,5,64],[9,112,5,91],[9,113,5,92],[9,114,5,93],[10,2,6,0],[11,0,7,0],[12,0,8,0],[13,0,9,0],[14,0,10,0],[15,0,11,0],[16,0,12,0],[17,0,13,0],[18,0,14,0],[19,0,15,0],[20,2,16,0],[20,8,16,6,"PostgrestClient"],[20,23,16,21],[20,24,16,22],[21,4,17,4],[22,4,18,4],[23,0,19,0],[24,0,20,0],[25,0,21,0],[26,0,22,0],[27,0,23,0],[28,0,24,0],[29,0,25,0],[30,0,26,0],[31,4,27,4,"constructor"],[31,15,27,15,"constructor"],[31,16,27,16,"url"],[31,19,27,19],[31,21,27,21],[32,6,27,23,"headers"],[32,13,27,30],[32,16,27,33],[32,17,27,34],[32,18,27,35],[33,6,27,37,"schema"],[33,12,27,43],[34,6,27,45,"fetch"],[35,4,27,52],[35,5,27,53],[35,8,27,56],[35,9,27,57],[35,10,27,58],[35,12,27,60],[36,6,28,8],[36,10,28,12],[36,11,28,13,"url"],[36,14,28,16],[36,17,28,19,"url"],[36,20,28,22],[37,6,29,8],[37,10,29,12],[37,11,29,13,"headers"],[37,18,29,20],[37,21,29,23],[37,25,29,27,"Headers"],[37,32,29,34],[37,33,29,35,"headers"],[37,40,29,42],[37,41,29,43],[38,6,30,8],[38,10,30,12],[38,11,30,13,"schemaName"],[38,21,30,23],[38,24,30,26,"schema"],[38,30,30,32],[39,6,31,8],[39,10,31,12],[39,11,31,13,"fetch"],[39,16,31,18],[39,19,31,21,"fetch"],[39,24,31,26],[40,4,32,4],[41,4,33,4],[42,0,34,0],[43,0,35,0],[44,0,36,0],[45,0,37,0],[46,4,38,4,"from"],[46,8,38,8,"from"],[46,9,38,9,"relation"],[46,17,38,17],[46,19,38,19],[47,6,39,8],[47,12,39,14,"url"],[47,15,39,17],[47,18,39,20],[47,22,39,24,"URL"],[47,25,39,27],[47,26,39,28],[47,29,39,31],[47,33,39,35],[47,34,39,36,"url"],[47,37,39,39],[47,41,39,43,"relation"],[47,49,39,51],[47,51,39,53],[47,52,39,54],[48,6,40,8],[48,13,40,15],[48,17,40,19,"PostgrestQueryBuilder_1"],[48,40,40,42],[48,41,40,43,"default"],[48,48,40,50],[48,49,40,51,"url"],[48,52,40,54],[48,54,40,56],[49,8,41,12,"headers"],[49,15,41,19],[49,17,41,21],[49,21,41,25,"Headers"],[49,28,41,32],[49,29,41,33],[49,33,41,37],[49,34,41,38,"headers"],[49,41,41,45],[49,42,41,46],[50,8,42,12,"schema"],[50,14,42,18],[50,16,42,20],[50,20,42,24],[50,21,42,25,"schemaName"],[50,31,42,35],[51,8,43,12,"fetch"],[51,13,43,17],[51,15,43,19],[51,19,43,23],[51,20,43,24,"fetch"],[52,6,44,8],[52,7,44,9],[52,8,44,10],[53,4,45,4],[54,4,46,4],[55,0,47,0],[56,0,48,0],[57,0,49,0],[58,0,50,0],[59,0,51,0],[60,0,52,0],[61,4,53,4,"schema"],[61,10,53,10,"schema"],[61,11,53,11,"schema"],[61,17,53,17],[61,19,53,19],[62,6,54,8],[62,13,54,15],[62,17,54,19,"PostgrestClient"],[62,32,54,34],[62,33,54,35],[62,37,54,39],[62,38,54,40,"url"],[62,41,54,43],[62,43,54,45],[63,8,55,12,"headers"],[63,15,55,19],[63,17,55,21],[63,21,55,25],[63,22,55,26,"headers"],[63,29,55,33],[64,8,56,12,"schema"],[64,14,56,18],[65,8,57,12,"fetch"],[65,13,57,17],[65,15,57,19],[65,19,57,23],[65,20,57,24,"fetch"],[66,6,58,8],[66,7,58,9],[66,8,58,10],[67,4,59,4],[68,4,60,4],[69,0,61,0],[70,0,62,0],[71,0,63,0],[72,0,64,0],[73,0,65,0],[74,0,66,0],[75,0,67,0],[76,0,68,0],[77,0,69,0],[78,0,70,0],[79,0,71,0],[80,0,72,0],[81,0,73,0],[82,0,74,0],[83,0,75,0],[84,0,76,0],[85,0,77,0],[86,0,78,0],[87,0,79,0],[88,0,80,0],[89,0,81,0],[90,0,82,0],[91,4,83,4,"rpc"],[91,7,83,7,"rpc"],[91,8,83,8,"fn"],[91,10,83,10],[91,12,83,12,"args"],[91,16,83,16],[91,19,83,19],[91,20,83,20],[91,21,83,21],[91,23,83,23],[92,6,83,25,"head"],[92,10,83,29],[92,13,83,32],[92,18,83,37],[93,6,83,39,"get"],[93,9,83,42],[93,12,83,45],[93,17,83,50],[94,6,83,52,"count"],[95,4,83,59],[95,5,83,60],[95,8,83,63],[95,9,83,64],[95,10,83,65],[95,12,83,67],[96,6,84,8],[96,10,84,12,"_a"],[96,12,84,14],[97,6,85,8],[97,10,85,12,"method"],[97,16,85,18],[98,6,86,8],[98,12,86,14,"url"],[98,15,86,17],[98,18,86,20],[98,22,86,24,"URL"],[98,25,86,27],[98,26,86,28],[98,29,86,31],[98,33,86,35],[98,34,86,36,"url"],[98,37,86,39],[98,45,86,47,"fn"],[98,47,86,49],[98,49,86,51],[98,50,86,52],[99,6,87,8],[99,10,87,12,"body"],[99,14,87,16],[100,6,88,8],[100,10,88,12,"head"],[100,14,88,16],[100,18,88,20,"get"],[100,21,88,23],[100,23,88,25],[101,8,89,12,"method"],[101,14,89,18],[101,17,89,21,"head"],[101,21,89,25],[101,24,89,28],[101,30,89,34],[101,33,89,37],[101,38,89,42],[102,8,90,12,"Object"],[102,14,90,18],[102,15,90,19,"entries"],[102,22,90,26],[102,23,90,27,"args"],[102,27,90,31],[103,8,91,16],[104,8,92,16],[105,8,92,16],[105,9,93,17,"filter"],[105,15,93,23],[105,16,93,24],[105,17,93,25],[105,18,93,26,"_"],[105,19,93,27],[105,21,93,29,"value"],[105,26,93,34],[105,27,93,35],[105,32,93,40,"value"],[105,37,93,45],[105,42,93,50,"undefined"],[105,51,93,59],[106,8,94,16],[107,8,94,16],[107,9,95,17,"map"],[107,12,95,20],[107,13,95,21],[107,14,95,22],[107,15,95,23,"name"],[107,19,95,27],[107,21,95,29,"value"],[107,26,95,34],[107,27,95,35],[107,32,95,40],[107,33,95,41,"name"],[107,37,95,45],[107,39,95,47,"Array"],[107,44,95,52],[107,45,95,53,"isArray"],[107,52,95,60],[107,53,95,61,"value"],[107,58,95,66],[107,59,95,67],[107,62,95,70],[107,66,95,74,"value"],[107,71,95,79],[107,72,95,80,"join"],[107,76,95,84],[107,77,95,85],[107,80,95,88],[107,81,95,89],[107,84,95,92],[107,87,95,95],[107,90,95,98,"value"],[107,95,95,103],[107,97,95,105],[107,98,95,106],[107,99,95,107],[107,100,96,17,"forEach"],[107,107,96,24],[107,108,96,25],[107,109,96,26],[107,110,96,27,"name"],[107,114,96,31],[107,116,96,33,"value"],[107,121,96,38],[107,122,96,39],[107,127,96,44],[108,10,97,16,"url"],[108,13,97,19],[108,14,97,20,"searchParams"],[108,26,97,32],[108,27,97,33,"append"],[108,33,97,39],[108,34,97,40,"name"],[108,38,97,44],[108,40,97,46,"value"],[108,45,97,51],[108,46,97,52],[109,8,98,12],[109,9,98,13],[109,10,98,14],[110,6,99,8],[110,7,99,9],[110,13,100,13],[111,8,101,12,"method"],[111,14,101,18],[111,17,101,21],[111,23,101,27],[112,8,102,12,"body"],[112,12,102,16],[112,15,102,19,"args"],[112,19,102,23],[113,6,103,8],[114,6,104,8],[114,12,104,14,"headers"],[114,19,104,21],[114,22,104,24],[114,26,104,28,"Headers"],[114,33,104,35],[114,34,104,36],[114,38,104,40],[114,39,104,41,"headers"],[114,46,104,48],[114,47,104,49],[115,6,105,8],[115,10,105,12,"count"],[115,15,105,17],[115,17,105,19],[116,8,106,12,"headers"],[116,15,106,19],[116,16,106,20,"set"],[116,19,106,23],[116,20,106,24],[116,28,106,32],[116,30,106,34],[116,39,106,43,"count"],[116,44,106,48],[116,46,106,50],[116,47,106,51],[117,6,107,8],[118,6,108,8],[118,13,108,15],[118,17,108,19,"PostgrestFilterBuilder_1"],[118,41,108,43],[118,42,108,44,"default"],[118,49,108,51],[118,50,108,52],[119,8,109,12,"method"],[119,14,109,18],[120,8,110,12,"url"],[120,11,110,15],[121,8,111,12,"headers"],[121,15,111,19],[122,8,112,12,"schema"],[122,14,112,18],[122,16,112,20],[122,20,112,24],[122,21,112,25,"schemaName"],[122,31,112,35],[123,8,113,12,"body"],[123,12,113,16],[124,8,114,12,"fetch"],[124,13,114,17],[124,15,114,19],[124,16,114,20,"_a"],[124,18,114,22],[124,21,114,25],[124,25,114,29],[124,26,114,30,"fetch"],[124,31,114,35],[124,37,114,41],[124,41,114,45],[124,45,114,49,"_a"],[124,47,114,51],[124,52,114,56],[124,57,114,61],[124,58,114,62],[124,61,114,65,"_a"],[124,63,114,67],[124,66,114,70,"fetch"],[125,6,115,8],[125,7,115,9],[125,8,115,10],[126,4,116,4],[127,2,117,0],[128,2,118,0,"exports"],[128,9,118,7],[128,10,118,8,"default"],[128,17,118,15],[128,20,118,18,"PostgrestClient"],[128,35,118,33],[129,0,118,34],[129,3]],"functionMap":{"names":["<global>","PostgrestClient","constructor","from","schema","rpc","Object.entries.filter$argument_0","Object.entries.filter.map$argument_0","Object.entries.filter.map.forEach$argument_0"],"mappings":"AAA;ACe;ICW;KDK;IEM;KFO;IGQ;KHM;IIwB;wBCU,mCD;qBEE,qFF;yBGC;aHE;KJkB;CDC"}},"type":"js/module"}]}