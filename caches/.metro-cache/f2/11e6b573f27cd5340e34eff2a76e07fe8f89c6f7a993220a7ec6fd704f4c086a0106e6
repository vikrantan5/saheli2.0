{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.toTimestampString = exports.toNumber = exports.toJson = exports.toBoolean = exports.toArray = exports.httpEndpointURL = exports.convertColumn = exports.convertChangeData = exports.convertCell = exports.PostgresTypes = void 0;\n  /**\n   * Helpers to convert the change Payload into native JS types.\n   */\n  // Adapted from epgsql (src/epgsql_binary.erl), this module licensed under\n  // 3-clause BSD found here: https://raw.githubusercontent.com/epgsql/epgsql/devel/LICENSE\n  var PostgresTypes;\n  (function (PostgresTypes) {\n    PostgresTypes[\"abstime\"] = \"abstime\";\n    PostgresTypes[\"bool\"] = \"bool\";\n    PostgresTypes[\"date\"] = \"date\";\n    PostgresTypes[\"daterange\"] = \"daterange\";\n    PostgresTypes[\"float4\"] = \"float4\";\n    PostgresTypes[\"float8\"] = \"float8\";\n    PostgresTypes[\"int2\"] = \"int2\";\n    PostgresTypes[\"int4\"] = \"int4\";\n    PostgresTypes[\"int4range\"] = \"int4range\";\n    PostgresTypes[\"int8\"] = \"int8\";\n    PostgresTypes[\"int8range\"] = \"int8range\";\n    PostgresTypes[\"json\"] = \"json\";\n    PostgresTypes[\"jsonb\"] = \"jsonb\";\n    PostgresTypes[\"money\"] = \"money\";\n    PostgresTypes[\"numeric\"] = \"numeric\";\n    PostgresTypes[\"oid\"] = \"oid\";\n    PostgresTypes[\"reltime\"] = \"reltime\";\n    PostgresTypes[\"text\"] = \"text\";\n    PostgresTypes[\"time\"] = \"time\";\n    PostgresTypes[\"timestamp\"] = \"timestamp\";\n    PostgresTypes[\"timestamptz\"] = \"timestamptz\";\n    PostgresTypes[\"timetz\"] = \"timetz\";\n    PostgresTypes[\"tsrange\"] = \"tsrange\";\n    PostgresTypes[\"tstzrange\"] = \"tstzrange\";\n  })(PostgresTypes || (exports.PostgresTypes = PostgresTypes = {}));\n  /**\n   * Takes an array of columns and an object of string values then converts each string value\n   * to its mapped type.\n   *\n   * @param {{name: String, type: String}[]} columns\n   * @param {Object} record\n   * @param {Object} options The map of various options that can be applied to the mapper\n   * @param {Array} options.skipTypes The array of types that should not be converted\n   *\n   * @example convertChangeData([{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age:'33'}, {})\n   * //=>{ first_name: 'Paul', age: 33 }\n   */\n  const convertChangeData = (columns, record, options = {}) => {\n    var _a;\n    const skipTypes = (_a = options.skipTypes) !== null && _a !== void 0 ? _a : [];\n    if (!record) {\n      return {};\n    }\n    return Object.keys(record).reduce((acc, rec_key) => {\n      acc[rec_key] = convertColumn(rec_key, columns, record, skipTypes);\n      return acc;\n    }, {});\n  };\n  /**\n   * Converts the value of an individual column.\n   *\n   * @param {String} columnName The column that you want to convert\n   * @param {{name: String, type: String}[]} columns All of the columns\n   * @param {Object} record The map of string values\n   * @param {Array} skipTypes An array of types that should not be converted\n   * @return {object} Useless information\n   *\n   * @example convertColumn('age', [{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age: '33'}, [])\n   * //=> 33\n   * @example convertColumn('age', [{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age: '33'}, ['int4'])\n   * //=> \"33\"\n   */\n  exports.convertChangeData = convertChangeData;\n  const convertColumn = (columnName, columns, record, skipTypes) => {\n    const column = columns.find(x => x.name === columnName);\n    const colType = column === null || column === void 0 ? void 0 : column.type;\n    const value = record[columnName];\n    if (colType && !skipTypes.includes(colType)) {\n      return convertCell(colType, value);\n    }\n    return noop(value);\n  };\n  /**\n   * If the value of the cell is `null`, returns null.\n   * Otherwise converts the string value to the correct type.\n   * @param {String} type A postgres column type\n   * @param {String} value The cell value\n   *\n   * @example convertCell('bool', 't')\n   * //=> true\n   * @example convertCell('int8', '10')\n   * //=> 10\n   * @example convertCell('_int4', '{1,2,3,4}')\n   * //=> [1,2,3,4]\n   */\n  exports.convertColumn = convertColumn;\n  const convertCell = (type, value) => {\n    // if data type is an array\n    if (type.charAt(0) === '_') {\n      const dataType = type.slice(1, type.length);\n      return toArray(value, dataType);\n    }\n    // If not null, convert to correct type.\n    switch (type) {\n      case PostgresTypes.bool:\n        return toBoolean(value);\n      case PostgresTypes.float4:\n      case PostgresTypes.float8:\n      case PostgresTypes.int2:\n      case PostgresTypes.int4:\n      case PostgresTypes.int8:\n      case PostgresTypes.numeric:\n      case PostgresTypes.oid:\n        return toNumber(value);\n      case PostgresTypes.json:\n      case PostgresTypes.jsonb:\n        return toJson(value);\n      case PostgresTypes.timestamp:\n        return toTimestampString(value);\n      // Format to be consistent with PostgREST\n      case PostgresTypes.abstime: // To allow users to cast it based on Timezone\n      case PostgresTypes.date: // To allow users to cast it based on Timezone\n      case PostgresTypes.daterange:\n      case PostgresTypes.int4range:\n      case PostgresTypes.int8range:\n      case PostgresTypes.money:\n      case PostgresTypes.reltime: // To allow users to cast it based on Timezone\n      case PostgresTypes.text:\n      case PostgresTypes.time: // To allow users to cast it based on Timezone\n      case PostgresTypes.timestamptz: // To allow users to cast it based on Timezone\n      case PostgresTypes.timetz: // To allow users to cast it based on Timezone\n      case PostgresTypes.tsrange:\n      case PostgresTypes.tstzrange:\n        return noop(value);\n      default:\n        // Return the value for remaining types\n        return noop(value);\n    }\n  };\n  exports.convertCell = convertCell;\n  const noop = value => {\n    return value;\n  };\n  const toBoolean = value => {\n    switch (value) {\n      case 't':\n        return true;\n      case 'f':\n        return false;\n      default:\n        return value;\n    }\n  };\n  exports.toBoolean = toBoolean;\n  const toNumber = value => {\n    if (typeof value === 'string') {\n      const parsedValue = parseFloat(value);\n      if (!Number.isNaN(parsedValue)) {\n        return parsedValue;\n      }\n    }\n    return value;\n  };\n  exports.toNumber = toNumber;\n  const toJson = value => {\n    if (typeof value === 'string') {\n      try {\n        return JSON.parse(value);\n      } catch (error) {\n        console.log(`JSON parse error: ${error}`);\n        return value;\n      }\n    }\n    return value;\n  };\n  /**\n   * Converts a Postgres Array into a native JS array\n   *\n   * @example toArray('{}', 'int4')\n   * //=> []\n   * @example toArray('{\"[2021-01-01,2021-12-31)\",\"(2021-01-01,2021-12-32]\"}', 'daterange')\n   * //=> ['[2021-01-01,2021-12-31)', '(2021-01-01,2021-12-32]']\n   * @example toArray([1,2,3,4], 'int4')\n   * //=> [1,2,3,4]\n   */\n  exports.toJson = toJson;\n  const toArray = (value, type) => {\n    if (typeof value !== 'string') {\n      return value;\n    }\n    const lastIdx = value.length - 1;\n    const closeBrace = value[lastIdx];\n    const openBrace = value[0];\n    // Confirm value is a Postgres array by checking curly brackets\n    if (openBrace === '{' && closeBrace === '}') {\n      let arr;\n      const valTrim = value.slice(1, lastIdx);\n      // TODO: find a better solution to separate Postgres array data\n      try {\n        arr = JSON.parse('[' + valTrim + ']');\n      } catch (_) {\n        // WARNING: splitting on comma does not cover all edge cases\n        arr = valTrim ? valTrim.split(',') : [];\n      }\n      return arr.map(val => convertCell(type, val));\n    }\n    return value;\n  };\n  /**\n   * Fixes timestamp to be ISO-8601. Swaps the space between the date and time for a 'T'\n   * See https://github.com/supabase/supabase/issues/18\n   *\n   * @example toTimestampString('2019-09-10 00:00:00')\n   * //=> '2019-09-10T00:00:00'\n   */\n  exports.toArray = toArray;\n  const toTimestampString = value => {\n    if (typeof value === 'string') {\n      return value.replace(' ', 'T');\n    }\n    return value;\n  };\n  exports.toTimestampString = toTimestampString;\n  const httpEndpointURL = socketUrl => {\n    const wsUrl = new URL(socketUrl);\n    wsUrl.protocol = wsUrl.protocol.replace(/^ws/i, 'http');\n    wsUrl.pathname = wsUrl.pathname.replace(/\\/+$/, '') // remove all trailing slashes\n    .replace(/\\/socket\\/websocket$/i, '') // remove the socket/websocket path\n    .replace(/\\/socket$/i, '') // remove the socket path\n    .replace(/\\/websocket$/i, ''); // remove the websocket path\n    if (wsUrl.pathname === '' || wsUrl.pathname === '/') {\n      wsUrl.pathname = '/api/broadcast';\n    } else {\n      wsUrl.pathname = wsUrl.pathname + '/api/broadcast';\n    }\n    return wsUrl.href;\n  };\n  exports.httpEndpointURL = httpEndpointURL;\n});","lineCount":241,"map":[[6,2,1,0],[7,0,2,0],[8,0,3,0],[9,2,4,0],[10,2,5,0],[11,2,6,7],[11,6,6,11,"PostgresTypes"],[11,19,6,24],[12,2,7,0],[12,3,7,1],[12,13,7,11,"PostgresTypes"],[12,26,7,24],[12,28,7,26],[13,4,8,4,"PostgresTypes"],[13,17,8,17],[13,18,8,18],[13,27,8,27],[13,28,8,28],[13,31,8,31],[13,40,8,40],[14,4,9,4,"PostgresTypes"],[14,17,9,17],[14,18,9,18],[14,24,9,24],[14,25,9,25],[14,28,9,28],[14,34,9,34],[15,4,10,4,"PostgresTypes"],[15,17,10,17],[15,18,10,18],[15,24,10,24],[15,25,10,25],[15,28,10,28],[15,34,10,34],[16,4,11,4,"PostgresTypes"],[16,17,11,17],[16,18,11,18],[16,29,11,29],[16,30,11,30],[16,33,11,33],[16,44,11,44],[17,4,12,4,"PostgresTypes"],[17,17,12,17],[17,18,12,18],[17,26,12,26],[17,27,12,27],[17,30,12,30],[17,38,12,38],[18,4,13,4,"PostgresTypes"],[18,17,13,17],[18,18,13,18],[18,26,13,26],[18,27,13,27],[18,30,13,30],[18,38,13,38],[19,4,14,4,"PostgresTypes"],[19,17,14,17],[19,18,14,18],[19,24,14,24],[19,25,14,25],[19,28,14,28],[19,34,14,34],[20,4,15,4,"PostgresTypes"],[20,17,15,17],[20,18,15,18],[20,24,15,24],[20,25,15,25],[20,28,15,28],[20,34,15,34],[21,4,16,4,"PostgresTypes"],[21,17,16,17],[21,18,16,18],[21,29,16,29],[21,30,16,30],[21,33,16,33],[21,44,16,44],[22,4,17,4,"PostgresTypes"],[22,17,17,17],[22,18,17,18],[22,24,17,24],[22,25,17,25],[22,28,17,28],[22,34,17,34],[23,4,18,4,"PostgresTypes"],[23,17,18,17],[23,18,18,18],[23,29,18,29],[23,30,18,30],[23,33,18,33],[23,44,18,44],[24,4,19,4,"PostgresTypes"],[24,17,19,17],[24,18,19,18],[24,24,19,24],[24,25,19,25],[24,28,19,28],[24,34,19,34],[25,4,20,4,"PostgresTypes"],[25,17,20,17],[25,18,20,18],[25,25,20,25],[25,26,20,26],[25,29,20,29],[25,36,20,36],[26,4,21,4,"PostgresTypes"],[26,17,21,17],[26,18,21,18],[26,25,21,25],[26,26,21,26],[26,29,21,29],[26,36,21,36],[27,4,22,4,"PostgresTypes"],[27,17,22,17],[27,18,22,18],[27,27,22,27],[27,28,22,28],[27,31,22,31],[27,40,22,40],[28,4,23,4,"PostgresTypes"],[28,17,23,17],[28,18,23,18],[28,23,23,23],[28,24,23,24],[28,27,23,27],[28,32,23,32],[29,4,24,4,"PostgresTypes"],[29,17,24,17],[29,18,24,18],[29,27,24,27],[29,28,24,28],[29,31,24,31],[29,40,24,40],[30,4,25,4,"PostgresTypes"],[30,17,25,17],[30,18,25,18],[30,24,25,24],[30,25,25,25],[30,28,25,28],[30,34,25,34],[31,4,26,4,"PostgresTypes"],[31,17,26,17],[31,18,26,18],[31,24,26,24],[31,25,26,25],[31,28,26,28],[31,34,26,34],[32,4,27,4,"PostgresTypes"],[32,17,27,17],[32,18,27,18],[32,29,27,29],[32,30,27,30],[32,33,27,33],[32,44,27,44],[33,4,28,4,"PostgresTypes"],[33,17,28,17],[33,18,28,18],[33,31,28,31],[33,32,28,32],[33,35,28,35],[33,48,28,48],[34,4,29,4,"PostgresTypes"],[34,17,29,17],[34,18,29,18],[34,26,29,26],[34,27,29,27],[34,30,29,30],[34,38,29,38],[35,4,30,4,"PostgresTypes"],[35,17,30,17],[35,18,30,18],[35,27,30,27],[35,28,30,28],[35,31,30,31],[35,40,30,40],[36,4,31,4,"PostgresTypes"],[36,17,31,17],[36,18,31,18],[36,29,31,29],[36,30,31,30],[36,33,31,33],[36,44,31,44],[37,2,32,0],[37,3,32,1],[37,5,32,3,"PostgresTypes"],[37,18,32,16],[37,23,32,16,"exports"],[37,30,32,16],[37,31,32,16,"PostgresTypes"],[37,44,32,16],[37,47,32,21,"PostgresTypes"],[37,60,32,34],[37,63,32,37],[37,64,32,38],[37,65,32,39],[37,66,32,40],[37,67,32,41],[38,2,33,0],[39,0,34,0],[40,0,35,0],[41,0,36,0],[42,0,37,0],[43,0,38,0],[44,0,39,0],[45,0,40,0],[46,0,41,0],[47,0,42,0],[48,0,43,0],[49,0,44,0],[50,2,45,7],[50,8,45,13,"convertChangeData"],[50,25,45,30],[50,28,45,33,"convertChangeData"],[50,29,45,34,"columns"],[50,36,45,41],[50,38,45,43,"record"],[50,44,45,49],[50,46,45,51,"options"],[50,53,45,58],[50,56,45,61],[50,57,45,62],[50,58,45,63],[50,63,45,68],[51,4,46,4],[51,8,46,8,"_a"],[51,10,46,10],[52,4,47,4],[52,10,47,10,"skipTypes"],[52,19,47,19],[52,22,47,22],[52,23,47,23,"_a"],[52,25,47,25],[52,28,47,28,"options"],[52,35,47,35],[52,36,47,36,"skipTypes"],[52,45,47,45],[52,51,47,51],[52,55,47,55],[52,59,47,59,"_a"],[52,61,47,61],[52,66,47,66],[52,71,47,71],[52,72,47,72],[52,75,47,75,"_a"],[52,77,47,77],[52,80,47,80],[52,82,47,82],[53,4,48,4],[53,8,48,8],[53,9,48,9,"record"],[53,15,48,15],[53,17,48,17],[54,6,49,8],[54,13,49,15],[54,14,49,16],[54,15,49,17],[55,4,50,4],[56,4,51,4],[56,11,51,11,"Object"],[56,17,51,17],[56,18,51,18,"keys"],[56,22,51,22],[56,23,51,23,"record"],[56,29,51,29],[56,30,51,30],[56,31,51,31,"reduce"],[56,37,51,37],[56,38,51,38],[56,39,51,39,"acc"],[56,42,51,42],[56,44,51,44,"rec_key"],[56,51,51,51],[56,56,51,56],[57,6,52,8,"acc"],[57,9,52,11],[57,10,52,12,"rec_key"],[57,17,52,19],[57,18,52,20],[57,21,52,23,"convertColumn"],[57,34,52,36],[57,35,52,37,"rec_key"],[57,42,52,44],[57,44,52,46,"columns"],[57,51,52,53],[57,53,52,55,"record"],[57,59,52,61],[57,61,52,63,"skipTypes"],[57,70,52,72],[57,71,52,73],[58,6,53,8],[58,13,53,15,"acc"],[58,16,53,18],[59,4,54,4],[59,5,54,5],[59,7,54,7],[59,8,54,8],[59,9,54,9],[59,10,54,10],[60,2,55,0],[60,3,55,1],[61,2,56,0],[62,0,57,0],[63,0,58,0],[64,0,59,0],[65,0,60,0],[66,0,61,0],[67,0,62,0],[68,0,63,0],[69,0,64,0],[70,0,65,0],[71,0,66,0],[72,0,67,0],[73,0,68,0],[74,0,69,0],[75,2,56,0,"exports"],[75,9,56,0],[75,10,56,0,"convertChangeData"],[75,27,56,0],[75,30,56,0,"convertChangeData"],[75,47,56,0],[76,2,70,7],[76,8,70,13,"convertColumn"],[76,21,70,26],[76,24,70,29,"convertColumn"],[76,25,70,30,"columnName"],[76,35,70,40],[76,37,70,42,"columns"],[76,44,70,49],[76,46,70,51,"record"],[76,52,70,57],[76,54,70,59,"skipTypes"],[76,63,70,68],[76,68,70,73],[77,4,71,4],[77,10,71,10,"column"],[77,16,71,16],[77,19,71,19,"columns"],[77,26,71,26],[77,27,71,27,"find"],[77,31,71,31],[77,32,71,33,"x"],[77,33,71,34],[77,37,71,39,"x"],[77,38,71,40],[77,39,71,41,"name"],[77,43,71,45],[77,48,71,50,"columnName"],[77,58,71,60],[77,59,71,61],[78,4,72,4],[78,10,72,10,"colType"],[78,17,72,17],[78,20,72,20,"column"],[78,26,72,26],[78,31,72,31],[78,35,72,35],[78,39,72,39,"column"],[78,45,72,45],[78,50,72,50],[78,55,72,55],[78,56,72,56],[78,59,72,59],[78,64,72,64],[78,65,72,65],[78,68,72,68,"column"],[78,74,72,74],[78,75,72,75,"type"],[78,79,72,79],[79,4,73,4],[79,10,73,10,"value"],[79,15,73,15],[79,18,73,18,"record"],[79,24,73,24],[79,25,73,25,"columnName"],[79,35,73,35],[79,36,73,36],[80,4,74,4],[80,8,74,8,"colType"],[80,15,74,15],[80,19,74,19],[80,20,74,20,"skipTypes"],[80,29,74,29],[80,30,74,30,"includes"],[80,38,74,38],[80,39,74,39,"colType"],[80,46,74,46],[80,47,74,47],[80,49,74,49],[81,6,75,8],[81,13,75,15,"convertCell"],[81,24,75,26],[81,25,75,27,"colType"],[81,32,75,34],[81,34,75,36,"value"],[81,39,75,41],[81,40,75,42],[82,4,76,4],[83,4,77,4],[83,11,77,11,"noop"],[83,15,77,15],[83,16,77,16,"value"],[83,21,77,21],[83,22,77,22],[84,2,78,0],[84,3,78,1],[85,2,79,0],[86,0,80,0],[87,0,81,0],[88,0,82,0],[89,0,83,0],[90,0,84,0],[91,0,85,0],[92,0,86,0],[93,0,87,0],[94,0,88,0],[95,0,89,0],[96,0,90,0],[97,0,91,0],[98,2,79,0,"exports"],[98,9,79,0],[98,10,79,0,"convertColumn"],[98,23,79,0],[98,26,79,0,"convertColumn"],[98,39,79,0],[99,2,92,7],[99,8,92,13,"convertCell"],[99,19,92,24],[99,22,92,27,"convertCell"],[99,23,92,28,"type"],[99,27,92,32],[99,29,92,34,"value"],[99,34,92,39],[99,39,92,44],[100,4,93,4],[101,4,94,4],[101,8,94,8,"type"],[101,12,94,12],[101,13,94,13,"charAt"],[101,19,94,19],[101,20,94,20],[101,21,94,21],[101,22,94,22],[101,27,94,27],[101,30,94,30],[101,32,94,32],[102,6,95,8],[102,12,95,14,"dataType"],[102,20,95,22],[102,23,95,25,"type"],[102,27,95,29],[102,28,95,30,"slice"],[102,33,95,35],[102,34,95,36],[102,35,95,37],[102,37,95,39,"type"],[102,41,95,43],[102,42,95,44,"length"],[102,48,95,50],[102,49,95,51],[103,6,96,8],[103,13,96,15,"toArray"],[103,20,96,22],[103,21,96,23,"value"],[103,26,96,28],[103,28,96,30,"dataType"],[103,36,96,38],[103,37,96,39],[104,4,97,4],[105,4,98,4],[106,4,99,4],[106,12,99,12,"type"],[106,16,99,16],[107,6,100,8],[107,11,100,13,"PostgresTypes"],[107,24,100,26],[107,25,100,27,"bool"],[107,29,100,31],[108,8,101,12],[108,15,101,19,"toBoolean"],[108,24,101,28],[108,25,101,29,"value"],[108,30,101,34],[108,31,101,35],[109,6,102,8],[109,11,102,13,"PostgresTypes"],[109,24,102,26],[109,25,102,27,"float4"],[109,31,102,33],[110,6,103,8],[110,11,103,13,"PostgresTypes"],[110,24,103,26],[110,25,103,27,"float8"],[110,31,103,33],[111,6,104,8],[111,11,104,13,"PostgresTypes"],[111,24,104,26],[111,25,104,27,"int2"],[111,29,104,31],[112,6,105,8],[112,11,105,13,"PostgresTypes"],[112,24,105,26],[112,25,105,27,"int4"],[112,29,105,31],[113,6,106,8],[113,11,106,13,"PostgresTypes"],[113,24,106,26],[113,25,106,27,"int8"],[113,29,106,31],[114,6,107,8],[114,11,107,13,"PostgresTypes"],[114,24,107,26],[114,25,107,27,"numeric"],[114,32,107,34],[115,6,108,8],[115,11,108,13,"PostgresTypes"],[115,24,108,26],[115,25,108,27,"oid"],[115,28,108,30],[116,8,109,12],[116,15,109,19,"toNumber"],[116,23,109,27],[116,24,109,28,"value"],[116,29,109,33],[116,30,109,34],[117,6,110,8],[117,11,110,13,"PostgresTypes"],[117,24,110,26],[117,25,110,27,"json"],[117,29,110,31],[118,6,111,8],[118,11,111,13,"PostgresTypes"],[118,24,111,26],[118,25,111,27,"jsonb"],[118,30,111,32],[119,8,112,12],[119,15,112,19,"toJson"],[119,21,112,25],[119,22,112,26,"value"],[119,27,112,31],[119,28,112,32],[120,6,113,8],[120,11,113,13,"PostgresTypes"],[120,24,113,26],[120,25,113,27,"timestamp"],[120,34,113,36],[121,8,114,12],[121,15,114,19,"toTimestampString"],[121,32,114,36],[121,33,114,37,"value"],[121,38,114,42],[121,39,114,43],[122,6,114,45],[123,6,115,8],[123,11,115,13,"PostgresTypes"],[123,24,115,26],[123,25,115,27,"abstime"],[123,32,115,34],[123,33,115,35],[123,34,115,36],[124,6,116,8],[124,11,116,13,"PostgresTypes"],[124,24,116,26],[124,25,116,27,"date"],[124,29,116,31],[124,30,116,32],[124,31,116,33],[125,6,117,8],[125,11,117,13,"PostgresTypes"],[125,24,117,26],[125,25,117,27,"daterange"],[125,34,117,36],[126,6,118,8],[126,11,118,13,"PostgresTypes"],[126,24,118,26],[126,25,118,27,"int4range"],[126,34,118,36],[127,6,119,8],[127,11,119,13,"PostgresTypes"],[127,24,119,26],[127,25,119,27,"int8range"],[127,34,119,36],[128,6,120,8],[128,11,120,13,"PostgresTypes"],[128,24,120,26],[128,25,120,27,"money"],[128,30,120,32],[129,6,121,8],[129,11,121,13,"PostgresTypes"],[129,24,121,26],[129,25,121,27,"reltime"],[129,32,121,34],[129,33,121,35],[129,34,121,36],[130,6,122,8],[130,11,122,13,"PostgresTypes"],[130,24,122,26],[130,25,122,27,"text"],[130,29,122,31],[131,6,123,8],[131,11,123,13,"PostgresTypes"],[131,24,123,26],[131,25,123,27,"time"],[131,29,123,31],[131,30,123,32],[131,31,123,33],[132,6,124,8],[132,11,124,13,"PostgresTypes"],[132,24,124,26],[132,25,124,27,"timestamptz"],[132,36,124,38],[132,37,124,39],[132,38,124,40],[133,6,125,8],[133,11,125,13,"PostgresTypes"],[133,24,125,26],[133,25,125,27,"timetz"],[133,31,125,33],[133,32,125,34],[133,33,125,35],[134,6,126,8],[134,11,126,13,"PostgresTypes"],[134,24,126,26],[134,25,126,27,"tsrange"],[134,32,126,34],[135,6,127,8],[135,11,127,13,"PostgresTypes"],[135,24,127,26],[135,25,127,27,"tstzrange"],[135,34,127,36],[136,8,128,12],[136,15,128,19,"noop"],[136,19,128,23],[136,20,128,24,"value"],[136,25,128,29],[136,26,128,30],[137,6,129,8],[138,8,130,12],[139,8,131,12],[139,15,131,19,"noop"],[139,19,131,23],[139,20,131,24,"value"],[139,25,131,29],[139,26,131,30],[140,4,132,4],[141,2,133,0],[141,3,133,1],[142,2,133,2,"exports"],[142,9,133,2],[142,10,133,2,"convertCell"],[142,21,133,2],[142,24,133,2,"convertCell"],[142,35,133,2],[143,2,134,0],[143,8,134,6,"noop"],[143,12,134,10],[143,15,134,14,"value"],[143,20,134,19],[143,24,134,24],[144,4,135,4],[144,11,135,11,"value"],[144,16,135,16],[145,2,136,0],[145,3,136,1],[146,2,137,7],[146,8,137,13,"toBoolean"],[146,17,137,22],[146,20,137,26,"value"],[146,25,137,31],[146,29,137,36],[147,4,138,4],[147,12,138,12,"value"],[147,17,138,17],[148,6,139,8],[148,11,139,13],[148,14,139,16],[149,8,140,12],[149,15,140,19],[149,19,140,23],[150,6,141,8],[150,11,141,13],[150,14,141,16],[151,8,142,12],[151,15,142,19],[151,20,142,24],[152,6,143,8],[153,8,144,12],[153,15,144,19,"value"],[153,20,144,24],[154,4,145,4],[155,2,146,0],[155,3,146,1],[156,2,146,2,"exports"],[156,9,146,2],[156,10,146,2,"toBoolean"],[156,19,146,2],[156,22,146,2,"toBoolean"],[156,31,146,2],[157,2,147,7],[157,8,147,13,"toNumber"],[157,16,147,21],[157,19,147,25,"value"],[157,24,147,30],[157,28,147,35],[158,4,148,4],[158,8,148,8],[158,15,148,15,"value"],[158,20,148,20],[158,25,148,25],[158,33,148,33],[158,35,148,35],[159,6,149,8],[159,12,149,14,"parsedValue"],[159,23,149,25],[159,26,149,28,"parseFloat"],[159,36,149,38],[159,37,149,39,"value"],[159,42,149,44],[159,43,149,45],[160,6,150,8],[160,10,150,12],[160,11,150,13,"Number"],[160,17,150,19],[160,18,150,20,"isNaN"],[160,23,150,25],[160,24,150,26,"parsedValue"],[160,35,150,37],[160,36,150,38],[160,38,150,40],[161,8,151,12],[161,15,151,19,"parsedValue"],[161,26,151,30],[162,6,152,8],[163,4,153,4],[164,4,154,4],[164,11,154,11,"value"],[164,16,154,16],[165,2,155,0],[165,3,155,1],[166,2,155,2,"exports"],[166,9,155,2],[166,10,155,2,"toNumber"],[166,18,155,2],[166,21,155,2,"toNumber"],[166,29,155,2],[167,2,156,7],[167,8,156,13,"toJson"],[167,14,156,19],[167,17,156,23,"value"],[167,22,156,28],[167,26,156,33],[168,4,157,4],[168,8,157,8],[168,15,157,15,"value"],[168,20,157,20],[168,25,157,25],[168,33,157,33],[168,35,157,35],[169,6,158,8],[169,10,158,12],[170,8,159,12],[170,15,159,19,"JSON"],[170,19,159,23],[170,20,159,24,"parse"],[170,25,159,29],[170,26,159,30,"value"],[170,31,159,35],[170,32,159,36],[171,6,160,8],[171,7,160,9],[171,8,161,8],[171,15,161,15,"error"],[171,20,161,20],[171,22,161,22],[172,8,162,12,"console"],[172,15,162,19],[172,16,162,20,"log"],[172,19,162,23],[172,20,162,24],[172,41,162,45,"error"],[172,46,162,50],[172,48,162,52],[172,49,162,53],[173,8,163,12],[173,15,163,19,"value"],[173,20,163,24],[174,6,164,8],[175,4,165,4],[176,4,166,4],[176,11,166,11,"value"],[176,16,166,16],[177,2,167,0],[177,3,167,1],[178,2,168,0],[179,0,169,0],[180,0,170,0],[181,0,171,0],[182,0,172,0],[183,0,173,0],[184,0,174,0],[185,0,175,0],[186,0,176,0],[187,0,177,0],[188,2,168,0,"exports"],[188,9,168,0],[188,10,168,0,"toJson"],[188,16,168,0],[188,19,168,0,"toJson"],[188,25,168,0],[189,2,178,7],[189,8,178,13,"toArray"],[189,15,178,20],[189,18,178,23,"toArray"],[189,19,178,24,"value"],[189,24,178,29],[189,26,178,31,"type"],[189,30,178,35],[189,35,178,40],[190,4,179,4],[190,8,179,8],[190,15,179,15,"value"],[190,20,179,20],[190,25,179,25],[190,33,179,33],[190,35,179,35],[191,6,180,8],[191,13,180,15,"value"],[191,18,180,20],[192,4,181,4],[193,4,182,4],[193,10,182,10,"lastIdx"],[193,17,182,17],[193,20,182,20,"value"],[193,25,182,25],[193,26,182,26,"length"],[193,32,182,32],[193,35,182,35],[193,36,182,36],[194,4,183,4],[194,10,183,10,"closeBrace"],[194,20,183,20],[194,23,183,23,"value"],[194,28,183,28],[194,29,183,29,"lastIdx"],[194,36,183,36],[194,37,183,37],[195,4,184,4],[195,10,184,10,"openBrace"],[195,19,184,19],[195,22,184,22,"value"],[195,27,184,27],[195,28,184,28],[195,29,184,29],[195,30,184,30],[196,4,185,4],[197,4,186,4],[197,8,186,8,"openBrace"],[197,17,186,17],[197,22,186,22],[197,25,186,25],[197,29,186,29,"closeBrace"],[197,39,186,39],[197,44,186,44],[197,47,186,47],[197,49,186,49],[198,6,187,8],[198,10,187,12,"arr"],[198,13,187,15],[199,6,188,8],[199,12,188,14,"valTrim"],[199,19,188,21],[199,22,188,24,"value"],[199,27,188,29],[199,28,188,30,"slice"],[199,33,188,35],[199,34,188,36],[199,35,188,37],[199,37,188,39,"lastIdx"],[199,44,188,46],[199,45,188,47],[200,6,189,8],[201,6,190,8],[201,10,190,12],[202,8,191,12,"arr"],[202,11,191,15],[202,14,191,18,"JSON"],[202,18,191,22],[202,19,191,23,"parse"],[202,24,191,28],[202,25,191,29],[202,28,191,32],[202,31,191,35,"valTrim"],[202,38,191,42],[202,41,191,45],[202,44,191,48],[202,45,191,49],[203,6,192,8],[203,7,192,9],[203,8,193,8],[203,15,193,15,"_"],[203,16,193,16],[203,18,193,18],[204,8,194,12],[205,8,195,12,"arr"],[205,11,195,15],[205,14,195,18,"valTrim"],[205,21,195,25],[205,24,195,28,"valTrim"],[205,31,195,35],[205,32,195,36,"split"],[205,37,195,41],[205,38,195,42],[205,41,195,45],[205,42,195,46],[205,45,195,49],[205,47,195,51],[206,6,196,8],[207,6,197,8],[207,13,197,15,"arr"],[207,16,197,18],[207,17,197,19,"map"],[207,20,197,22],[207,21,197,24,"val"],[207,24,197,27],[207,28,197,32,"convertCell"],[207,39,197,43],[207,40,197,44,"type"],[207,44,197,48],[207,46,197,50,"val"],[207,49,197,53],[207,50,197,54],[207,51,197,55],[208,4,198,4],[209,4,199,4],[209,11,199,11,"value"],[209,16,199,16],[210,2,200,0],[210,3,200,1],[211,2,201,0],[212,0,202,0],[213,0,203,0],[214,0,204,0],[215,0,205,0],[216,0,206,0],[217,0,207,0],[218,2,201,0,"exports"],[218,9,201,0],[218,10,201,0,"toArray"],[218,17,201,0],[218,20,201,0,"toArray"],[218,27,201,0],[219,2,208,7],[219,8,208,13,"toTimestampString"],[219,25,208,30],[219,28,208,34,"value"],[219,33,208,39],[219,37,208,44],[220,4,209,4],[220,8,209,8],[220,15,209,15,"value"],[220,20,209,20],[220,25,209,25],[220,33,209,33],[220,35,209,35],[221,6,210,8],[221,13,210,15,"value"],[221,18,210,20],[221,19,210,21,"replace"],[221,26,210,28],[221,27,210,29],[221,30,210,32],[221,32,210,34],[221,35,210,37],[221,36,210,38],[222,4,211,4],[223,4,212,4],[223,11,212,11,"value"],[223,16,212,16],[224,2,213,0],[224,3,213,1],[225,2,213,2,"exports"],[225,9,213,2],[225,10,213,2,"toTimestampString"],[225,27,213,2],[225,30,213,2,"toTimestampString"],[225,47,213,2],[226,2,214,7],[226,8,214,13,"httpEndpointURL"],[226,23,214,28],[226,26,214,32,"socketUrl"],[226,35,214,41],[226,39,214,46],[227,4,215,4],[227,10,215,10,"wsUrl"],[227,15,215,15],[227,18,215,18],[227,22,215,22,"URL"],[227,25,215,25],[227,26,215,26,"socketUrl"],[227,35,215,35],[227,36,215,36],[228,4,216,4,"wsUrl"],[228,9,216,9],[228,10,216,10,"protocol"],[228,18,216,18],[228,21,216,21,"wsUrl"],[228,26,216,26],[228,27,216,27,"protocol"],[228,35,216,35],[228,36,216,36,"replace"],[228,43,216,43],[228,44,216,44],[228,50,216,50],[228,52,216,52],[228,58,216,58],[228,59,216,59],[229,4,217,4,"wsUrl"],[229,9,217,9],[229,10,217,10,"pathname"],[229,18,217,18],[229,21,217,21,"wsUrl"],[229,26,217,26],[229,27,217,27,"pathname"],[229,35,217,35],[229,36,218,9,"replace"],[229,43,218,16],[229,44,218,17],[229,50,218,23],[229,52,218,25],[229,54,218,27],[229,55,218,28],[229,56,218,29],[230,4,218,29],[230,5,219,9,"replace"],[230,12,219,16],[230,13,219,17],[230,36,219,40],[230,38,219,42],[230,40,219,44],[230,41,219,45],[230,42,219,46],[231,4,219,46],[231,5,220,9,"replace"],[231,12,220,16],[231,13,220,17],[231,25,220,29],[231,27,220,31],[231,29,220,33],[231,30,220,34],[231,31,220,35],[232,4,220,35],[232,5,221,9,"replace"],[232,12,221,16],[232,13,221,17],[232,28,221,32],[232,30,221,34],[232,32,221,36],[232,33,221,37],[232,34,221,38],[232,35,221,39],[233,4,222,4],[233,8,222,8,"wsUrl"],[233,13,222,13],[233,14,222,14,"pathname"],[233,22,222,22],[233,27,222,27],[233,29,222,29],[233,33,222,33,"wsUrl"],[233,38,222,38],[233,39,222,39,"pathname"],[233,47,222,47],[233,52,222,52],[233,55,222,55],[233,57,222,57],[234,6,223,8,"wsUrl"],[234,11,223,13],[234,12,223,14,"pathname"],[234,20,223,22],[234,23,223,25],[234,39,223,41],[235,4,224,4],[235,5,224,5],[235,11,225,9],[236,6,226,8,"wsUrl"],[236,11,226,13],[236,12,226,14,"pathname"],[236,20,226,22],[236,23,226,25,"wsUrl"],[236,28,226,30],[236,29,226,31,"pathname"],[236,37,226,39],[236,40,226,42],[236,56,226,58],[237,4,227,4],[238,4,228,4],[238,11,228,11,"wsUrl"],[238,16,228,16],[238,17,228,17,"href"],[238,21,228,21],[239,2,229,0],[239,3,229,1],[240,2,229,2,"exports"],[240,9,229,2],[240,10,229,2,"httpEndpointURL"],[240,25,229,2],[240,28,229,2,"httpEndpointURL"],[240,43,229,2],[241,0,229,2],[241,3]],"functionMap":{"names":["<global>","<anonymous>","convertChangeData","Object.keys.reduce$argument_0","convertColumn","columns.find$argument_0","convertCell","noop","toBoolean","toNumber","toJson","toArray","arr.map$argument_0","toTimestampString","httpEndpointURL"],"mappings":"AAA;CCM;CDyB;iCEa;sCCM;KDG;CFC;6BIe;gCCC,4BD;CJO;2BMc;CNyC;aOC;CPE;yBQC;CRS;wBSC;CTQ;sBUC;CVW;uBWW;uBCmB,+BD;CXG;iCaQ;CbK;+BcC;Cde"}},"type":"js/module"}]}