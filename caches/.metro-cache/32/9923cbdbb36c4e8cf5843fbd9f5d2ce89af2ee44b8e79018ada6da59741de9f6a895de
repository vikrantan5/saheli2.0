{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"expo","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":41,"index":41}}],"key":"PWvtvXU7MaET6Yd1Gn8oQOXJQ8A=","exportNames":["*"]}},{"name":"expo-modules-core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":42},"end":{"line":2,"column":67,"index":109}}],"key":"fU8WLIPqoAGygnPbZ/QJiQQfXEY=","exportNames":["*"]}},{"name":"./ExpoLocation","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":110},"end":{"line":3,"column":42,"index":152}}],"key":"n9eQB3huKj/lRnIsgaXRKPJKjaY=","exportNames":["*"]}},{"name":"./Location.types","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":153},"end":{"line":4,"column":53,"index":206}}],"key":"QoIrjHWCWA2K0AZhEI/d0eITBhA=","exportNames":["*"]}},{"name":"./LocationSubscribers","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":207},"end":{"line":5,"column":104,"index":311}}],"key":"ECD2ecHoQ4d6PxMbJzhCjCmKfZg=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.enableNetworkProviderAsync = enableNetworkProviderAsync;\n  exports.geocodeAsync = geocodeAsync;\n  exports.getBackgroundPermissionsAsync = getBackgroundPermissionsAsync;\n  exports.getCurrentPositionAsync = getCurrentPositionAsync;\n  exports.getForegroundPermissionsAsync = getForegroundPermissionsAsync;\n  exports.getHeadingAsync = getHeadingAsync;\n  exports.getLastKnownPositionAsync = getLastKnownPositionAsync;\n  exports.getProviderStatusAsync = getProviderStatusAsync;\n  exports.hasServicesEnabledAsync = hasServicesEnabledAsync;\n  exports.hasStartedGeofencingAsync = hasStartedGeofencingAsync;\n  exports.hasStartedLocationUpdatesAsync = hasStartedLocationUpdatesAsync;\n  exports.isBackgroundLocationAvailableAsync = isBackgroundLocationAvailableAsync;\n  exports.requestBackgroundPermissionsAsync = requestBackgroundPermissionsAsync;\n  exports.requestForegroundPermissionsAsync = requestForegroundPermissionsAsync;\n  exports.reverseGeocodeAsync = reverseGeocodeAsync;\n  exports.startGeofencingAsync = startGeofencingAsync;\n  exports.startLocationUpdatesAsync = startLocationUpdatesAsync;\n  exports.stopGeofencingAsync = stopGeofencingAsync;\n  exports.stopLocationUpdatesAsync = stopLocationUpdatesAsync;\n  exports.useForegroundPermissions = exports.useBackgroundPermissions = void 0;\n  exports.watchHeadingAsync = watchHeadingAsync;\n  exports.watchPositionAsync = watchPositionAsync;\n  var _expo = require(_dependencyMap[1], \"expo\");\n  var _expoModulesCore = require(_dependencyMap[2], \"expo-modules-core\");\n  var _ExpoLocation = _interopRequireDefault(require(_dependencyMap[3], \"./ExpoLocation\"));\n  var _Location = require(_dependencyMap[4], \"./Location.types\");\n  var _LocationSubscribers = require(_dependencyMap[5], \"./LocationSubscribers\");\n  // Flag for warning about background services not being available in Expo Go\n  let warnAboutExpoGoDisplayed = false;\n  // @needsAudit\n  /**\n   * Check status of location providers.\n   * @return A promise which fulfills with an object of type [`LocationProviderStatus`](#locationproviderstatus).\n   */\n  async function getProviderStatusAsync() {\n    return _ExpoLocation.default.getProviderStatusAsync();\n  }\n  // @needsAudit\n  /**\n   * Asks the user to turn on high accuracy location mode which enables network provider that uses\n   * Google Play services to improve location accuracy and location-based services.\n   * @return A promise resolving as soon as the user accepts the dialog. Rejects if denied.\n   *\n   * @platform android\n   */\n  async function enableNetworkProviderAsync() {\n    // If network provider is disabled (user's location mode is set to \"Device only\"),\n    // Android's location provider may not give you any results. Use this method in order to ask the user\n    // to change the location mode to \"High accuracy\" which uses Google Play services and enables network provider.\n    // `getCurrentPositionAsync` and `watchPositionAsync` are doing it automatically anyway.\n    if (_expoModulesCore.Platform.OS === 'android') {\n      return _ExpoLocation.default.enableNetworkProviderAsync();\n    }\n  }\n  // @needsAudit\n  /**\n   * Requests for one-time delivery of the user's current location.\n   * Depending on given `accuracy` option it may take some time to resolve,\n   * especially when you're inside a building.\n   * > __Note:__ Calling it causes the location manager to obtain a location fix which may take several\n   * > seconds. Consider using [`getLastKnownPositionAsync`](#locationgetlastknownpositionasyncoptions)\n   * > if you expect to get a quick response and high accuracy is not required.\n   * @param options\n   * @return A promise which fulfills with an object of type [`LocationObject`](#locationobject).\n   */\n  async function getCurrentPositionAsync(options = {}) {\n    return _ExpoLocation.default.getCurrentPositionAsync(options);\n  }\n  // @needsAudit\n  /**\n   * Gets the last known position of the device or `null` if it's not available or doesn't match given\n   * requirements such as maximum age or required accuracy.\n   * It's considered to be faster than `getCurrentPositionAsync` as it doesn't request for the current\n   * location, but keep in mind the returned location may not be up-to-date.\n   * @param options\n   * @return A promise which fulfills with an object of type [`LocationObject`](#locationobject) or\n   * `null` if it's not available or doesn't match given requirements such as maximum age or required\n   * accuracy.\n   */\n  async function getLastKnownPositionAsync(options = {}) {\n    return _ExpoLocation.default.getLastKnownPositionAsync(options);\n  }\n  // @needsAudit\n  /**\n   * Subscribe to location updates from the device. Updates will only occur while the application is in\n   * the foreground. To get location updates while in background you'll need to use\n   * [`startLocationUpdatesAsync`](#locationstartlocationupdatesasynctaskname-options).\n   * @param options\n   * @param callback This function is called on each location update. It receives an object of type\n   * [`LocationObject`](#locationobject) as the first argument.\n   * @param errorHandler This function is called when an error occurs. It receives a string with the\n   * error message as the first argument.\n   * @return A promise which fulfills with a [`LocationSubscription`](#locationsubscription) object.\n   */\n  async function watchPositionAsync(options, callback, errorHandler) {\n    const watchId = _LocationSubscribers.LocationSubscriber.registerCallback(callback);\n    errorHandler && _LocationSubscribers.LocationErrorSubscriber.registerCallbackForId(watchId, errorHandler);\n    await _ExpoLocation.default.watchPositionImplAsync(watchId, options);\n    return {\n      remove() {\n        _LocationSubscribers.LocationSubscriber.unregisterCallback(watchId);\n        errorHandler && _LocationSubscribers.LocationErrorSubscriber.unregisterCallback(watchId);\n      }\n    };\n  }\n  // @needsAudit\n  /**\n   * Gets the current heading information from the device. To simplify, it calls `watchHeadingAsync`\n   * and waits for a couple of updates, and then returns the one that is accurate enough.\n   * @return A promise which fulfills with an object of type [`LocationHeadingObject`](#locationheadingobject).\n   */\n  async function getHeadingAsync() {\n    return new Promise(async (resolve, reject) => {\n      let tries = 0;\n      let subscriber = undefined;\n      try {\n        subscriber = await watchHeadingAsync(heading => {\n          if (heading.accuracy > 1 || tries > 5) {\n            subscriber?.remove();\n            resolve(heading);\n          } else {\n            tries += 1;\n          }\n        }, reason => {\n          subscriber?.remove();\n          reject(reason);\n        });\n      } catch (e) {\n        reject(e);\n      }\n    });\n  }\n  // @needsAudit\n  /**\n   * Subscribe to compass updates from the device.\n   *\n   * @param callback This function is called on each compass update. It receives an object of type\n   * [LocationHeadingObject](#locationheadingobject) as the first argument.\n   * @param errorHandler This function is called when an error occurs. It receives a string with the\n   * error message as the first argument.\n   * @return A promise which fulfills with a [`LocationSubscription`](#locationsubscription) object.\n   *\n   * @platform android\n   * @platform ios\n   */\n  async function watchHeadingAsync(callback, errorHandler) {\n    const watchId = _LocationSubscribers.HeadingSubscriber.registerCallback(callback);\n    errorHandler && _LocationSubscribers.LocationErrorSubscriber.registerCallbackForId(watchId, errorHandler);\n    await _ExpoLocation.default.watchDeviceHeading(watchId);\n    return {\n      remove() {\n        _LocationSubscribers.HeadingSubscriber.unregisterCallback(watchId);\n        errorHandler && _LocationSubscribers.LocationErrorSubscriber.unregisterCallback(watchId);\n      }\n    };\n  }\n  // @needsAudit\n  /**\n   * Geocode an address string to latitude-longitude location.\n   *\n   * On Android, you must request location permissions with [`requestForegroundPermissionsAsync`](#locationrequestforegroundpermissionsasync)\n   * before geocoding can be used.\n   *\n   * > **Note**: Geocoding is resource consuming and has to be used reasonably. Creating too many\n   * > requests at a time can result in an error, so they have to be managed properly.\n   * > It's also discouraged to use geocoding while the app is in the background and its results won't\n   * > be shown to the user immediately.\n   *\n   * @param address A string representing address, eg. `\"Baker Street London\"`.\n   * @return A promise which fulfills with an array (in most cases its size is 1) of [`LocationGeocodedLocation`](#locationgeocodedlocation)\n   * objects.\n   *\n   * @platform android\n   * @platform ios\n   */\n  async function geocodeAsync(address) {\n    if (typeof address !== 'string') {\n      throw new TypeError(`Address to geocode must be a string. Got ${address} instead.`);\n    }\n    if (_expoModulesCore.Platform.OS === 'web') {\n      if (__DEV__) {\n        console.warn('The Geocoding API has been removed in SDK 49, use Place Autocomplete service instead' + '(https://developers.google.com/maps/documentation/places/web-service/autocomplete)');\n      }\n      return [];\n    }\n    return await _ExpoLocation.default.geocodeAsync(address);\n  }\n  // @needsAudit\n  /**\n   * Reverse geocode a location to postal address.\n   *\n   * On Android, you must request location permissions with [`requestForegroundPermissionsAsync`](#locationrequestforegroundpermissionsasync)\n   * before geocoding can be used.\n   *\n   * > **Note**: Geocoding is resource consuming and has to be used reasonably. Creating too many\n   * > requests at a time can result in an error, so they have to be managed properly.\n   * > It's also discouraged to use geocoding while the app is in the background and its results won't\n   * > be shown to the user immediately.\n   *\n   * @param location An object representing a location.\n   * @return A promise which fulfills with an array (in most cases its size is 1) of [`LocationGeocodedAddress`](#locationgeocodedaddress) objects.\n   *\n   * @platform android\n   * @platform ios\n   */\n  async function reverseGeocodeAsync(location) {\n    if (typeof location.latitude !== 'number' || typeof location.longitude !== 'number') {\n      throw new TypeError('Location to reverse-geocode must be an object with number properties `latitude` and `longitude`.');\n    }\n    if (_expoModulesCore.Platform.OS === 'web') {\n      if (__DEV__) {\n        console.warn('The Geocoding API has been removed in SDK 49, use Place Autocomplete service instead' + '(https://developers.google.com/maps/documentation/places/web-service/autocomplete)');\n      }\n      return [];\n    }\n    return await _ExpoLocation.default.reverseGeocodeAsync(location);\n  }\n  // @needsAudit\n  /**\n   * Checks user's permissions for accessing location while the app is in the foreground.\n   * @return A promise that fulfills with an object of type [`LocationPermissionResponse`](#locationpermissionresponse).\n   */\n  async function getForegroundPermissionsAsync() {\n    return await _ExpoLocation.default.getForegroundPermissionsAsync();\n  }\n  // @needsAudit\n  /**\n   * Asks the user to grant permissions for location while the app is in the foreground.\n   * @return A promise that fulfills with an object of type [`LocationPermissionResponse`](#locationpermissionresponse).\n   */\n  async function requestForegroundPermissionsAsync() {\n    return await _ExpoLocation.default.requestForegroundPermissionsAsync();\n  }\n  // @needsAudit\n  /**\n   * Check or request permissions for the foreground location.\n   * This uses both `requestForegroundPermissionsAsync` and `getForegroundPermissionsAsync` to interact with the permissions.\n   *\n   * @example\n   * ```ts\n   * const [status, requestPermission] = Location.useForegroundPermissions();\n   * ```\n   */\n  const useForegroundPermissions = exports.useForegroundPermissions = (0, _expoModulesCore.createPermissionHook)({\n    getMethod: getForegroundPermissionsAsync,\n    requestMethod: requestForegroundPermissionsAsync\n  });\n  // @needsAudit\n  /**\n   * Checks user's permissions for accessing location while the app is in the background.\n   * @return A promise that fulfills with an object of type [`PermissionResponse`](#permissionresponse).\n   */\n  async function getBackgroundPermissionsAsync() {\n    return await _ExpoLocation.default.getBackgroundPermissionsAsync();\n  }\n  // @needsAudit\n  /**\n   * Asks the user to grant permissions for location while the app is in the background.\n   * On __Android 11 or higher__: this method will open the system settings page - before that happens\n   * you should explain to the user why your application needs background location permission.\n   * For example, you can use `Modal` component from `react-native` to do that.\n   * > __Note__: Foreground permissions should be granted before asking for the background permissions\n   * (your app can't obtain background permission without foreground permission).\n   * @return A promise that fulfills with an object of type [`PermissionResponse`](#permissionresponse).\n   */\n  async function requestBackgroundPermissionsAsync() {\n    return await _ExpoLocation.default.requestBackgroundPermissionsAsync();\n  }\n  // @needsAudit\n  /**\n   * Check or request permissions for the background location.\n   * This uses both `requestBackgroundPermissionsAsync` and `getBackgroundPermissionsAsync` to\n   * interact with the permissions.\n   *\n   * @example\n   * ```ts\n   * const [status, requestPermission] = Location.useBackgroundPermissions();\n   * ```\n   */\n  const useBackgroundPermissions = exports.useBackgroundPermissions = (0, _expoModulesCore.createPermissionHook)({\n    getMethod: getBackgroundPermissionsAsync,\n    requestMethod: requestBackgroundPermissionsAsync\n  });\n  // --- Location service\n  // @needsAudit\n  /**\n   * Checks whether location services are enabled by the user.\n   * @return A promise which fulfills to `true` if location services are enabled on the device,\n   * or `false` if not.\n   */\n  async function hasServicesEnabledAsync() {\n    return await _ExpoLocation.default.hasServicesEnabledAsync();\n  }\n  // --- Background location updates\n  function _validate(taskName) {\n    if (!taskName || typeof taskName !== 'string') {\n      throw new Error(`\\`taskName\\` must be a non-empty string. Got ${taskName} instead.`);\n    }\n    if ((0, _expo.isRunningInExpoGo)()) {\n      if (!warnAboutExpoGoDisplayed) {\n        const message = 'Background location is limited in Expo Go:\\n' + 'On Android, it is not available at all.\\n' + 'On iOS, it works when running in the Simulator.\\n' + 'You can use this API, and all others, in a development build. Learn more: https://expo.fyi/dev-client.';\n        console.warn(message);\n        warnAboutExpoGoDisplayed = true;\n      }\n    }\n  }\n  // @docsMissing\n  async function isBackgroundLocationAvailableAsync() {\n    const providerStatus = await getProviderStatusAsync();\n    return providerStatus.backgroundModeEnabled;\n  }\n  // @needsAudit\n  /**\n   * Registers for receiving location updates that can also come when the app is in the background.\n   *\n   * # Task parameters\n   *\n   * Background location task will be receiving following data:\n   * - `locations` - An array of the new locations.\n   *\n   * @example\n   * ```ts\n   * import * as TaskManager from 'expo-task-manager';\n   *\n   * TaskManager.defineTask(YOUR_TASK_NAME, ({ data: { locations }, error }) => {\n   *  if (error) {\n   *    // check `error.message` for more details.\n   *    return;\n   *  }\n   *  console.log('Received new locations', locations);\n   * });\n   * ```\n   *\n   * @param taskName Name of the task receiving location updates.\n   * @param options An object of options passed to the location manager.\n   *\n   * @return A promise resolving once the task with location updates is registered.\n   */\n  async function startLocationUpdatesAsync(taskName, options = {\n    accuracy: _Location.LocationAccuracy.Balanced\n  }) {\n    _validate(taskName);\n    await _ExpoLocation.default.startLocationUpdatesAsync(taskName, options);\n  }\n  // @needsAudit\n  /**\n   * Stops location updates for specified task.\n   * @param taskName Name of the background location task to stop.\n   * @return A promise resolving as soon as the task is unregistered.\n   */\n  async function stopLocationUpdatesAsync(taskName) {\n    _validate(taskName);\n    await _ExpoLocation.default.stopLocationUpdatesAsync(taskName);\n  }\n  // @needsAudit\n  /**\n   * @param taskName Name of the location task to check.\n   * @return A promise which fulfills with boolean value indicating whether the location task is\n   * started or not.\n   */\n  async function hasStartedLocationUpdatesAsync(taskName) {\n    _validate(taskName);\n    return _ExpoLocation.default.hasStartedLocationUpdatesAsync(taskName);\n  }\n  // --- Geofencing\n  function _validateRegions(regions) {\n    if (!regions || regions.length === 0) {\n      throw new Error('Regions array cannot be empty. Use `stopGeofencingAsync` if you want to stop geofencing all regions');\n    }\n    for (const region of regions) {\n      if (typeof region.latitude !== 'number') {\n        throw new TypeError(`Region's latitude must be a number. Got '${region.latitude}' instead.`);\n      }\n      if (typeof region.longitude !== 'number') {\n        throw new TypeError(`Region's longitude must be a number. Got '${region.longitude}' instead.`);\n      }\n      if (typeof region.radius !== 'number') {\n        throw new TypeError(`Region's radius must be a number. Got '${region.radius}' instead.`);\n      }\n    }\n  }\n  // @needsAudit\n  /**\n   * Starts geofencing for given regions. When the new event comes, the task with specified name will\n   * be called with the region that the device enter to or exit from.\n   * If you want to add or remove regions from already running geofencing task, you can just call\n   * `startGeofencingAsync` again with the new array of regions.\n   *\n   * # Task parameters\n   *\n   * Geofencing task will be receiving following data:\n   *  - `eventType` - Indicates the reason for calling the task, which can be triggered by entering or exiting the region.\n   *    See [`GeofencingEventType`](#geofencingeventtype).\n   *  - `region` - Object containing details about updated region. See [`LocationRegion`](#locationregion) for more details.\n   *\n   * @param taskName Name of the task that will be called when the device enters or exits from specified regions.\n   * @param regions Array of region objects to be geofenced.\n   *\n   * @return A promise resolving as soon as the task is registered.\n   *\n   * @example\n   * ```ts\n   * import { GeofencingEventType } from 'expo-location';\n   * import * as TaskManager from 'expo-task-manager';\n   *\n   *  TaskManager.defineTask(YOUR_TASK_NAME, ({ data: { eventType, region }, error }) => {\n   *   if (error) {\n   *     // check `error.message` for more details.\n   *     return;\n   *   }\n   *   if (eventType === GeofencingEventType.Enter) {\n   *     console.log(\"You've entered region:\", region);\n   *   } else if (eventType === GeofencingEventType.Exit) {\n   *     console.log(\"You've left region:\", region);\n   *   }\n   * });\n   * ```\n   */\n  async function startGeofencingAsync(taskName, regions = []) {\n    _validate(taskName);\n    _validateRegions(regions);\n    await _ExpoLocation.default.startGeofencingAsync(taskName, {\n      regions\n    });\n  }\n  // @needsAudit\n  /**\n   * Stops geofencing for specified task. It unregisters the background task so the app will not be\n   * receiving any updates, especially in the background.\n   * @param taskName Name of the task to unregister.\n   * @return A promise resolving as soon as the task is unregistered.\n   */\n  async function stopGeofencingAsync(taskName) {\n    _validate(taskName);\n    await _ExpoLocation.default.stopGeofencingAsync(taskName);\n  }\n  // @needsAudit\n  /**\n   * @param taskName Name of the geofencing task to check.\n   * @return A promise which fulfills with boolean value indicating whether the geofencing task is\n   * started or not.\n   */\n  async function hasStartedGeofencingAsync(taskName) {\n    _validate(taskName);\n    return _ExpoLocation.default.hasStartedGeofencingAsync(taskName);\n  }\n});","lineCount":452,"map":[[28,2,1,0],[28,6,1,0,"_expo"],[28,11,1,0],[28,14,1,0,"require"],[28,21,1,0],[28,22,1,0,"_dependencyMap"],[28,36,1,0],[29,2,2,0],[29,6,2,0,"_expoModulesCore"],[29,22,2,0],[29,25,2,0,"require"],[29,32,2,0],[29,33,2,0,"_dependencyMap"],[29,47,2,0],[30,2,3,0],[30,6,3,0,"_ExpoLocation"],[30,19,3,0],[30,22,3,0,"_interopRequireDefault"],[30,44,3,0],[30,45,3,0,"require"],[30,52,3,0],[30,53,3,0,"_dependencyMap"],[30,67,3,0],[31,2,4,0],[31,6,4,0,"_Location"],[31,15,4,0],[31,18,4,0,"require"],[31,25,4,0],[31,26,4,0,"_dependencyMap"],[31,40,4,0],[32,2,5,0],[32,6,5,0,"_LocationSubscribers"],[32,26,5,0],[32,29,5,0,"require"],[32,36,5,0],[32,37,5,0,"_dependencyMap"],[32,51,5,0],[33,2,6,0],[34,2,7,0],[34,6,7,4,"warnAboutExpoGoDisplayed"],[34,30,7,28],[34,33,7,31],[34,38,7,36],[35,2,8,0],[36,2,9,0],[37,0,10,0],[38,0,11,0],[39,0,12,0],[40,2,13,7],[40,17,13,22,"getProviderStatusAsync"],[40,39,13,44,"getProviderStatusAsync"],[40,40,13,44],[40,42,13,47],[41,4,14,4],[41,11,14,11,"ExpoLocation"],[41,32,14,23],[41,33,14,24,"getProviderStatusAsync"],[41,55,14,46],[41,56,14,47],[41,57,14,48],[42,2,15,0],[43,2,16,0],[44,2,17,0],[45,0,18,0],[46,0,19,0],[47,0,20,0],[48,0,21,0],[49,0,22,0],[50,0,23,0],[51,2,24,7],[51,17,24,22,"enableNetworkProviderAsync"],[51,43,24,48,"enableNetworkProviderAsync"],[51,44,24,48],[51,46,24,51],[52,4,25,4],[53,4,26,4],[54,4,27,4],[55,4,28,4],[56,4,29,4],[56,8,29,8,"Platform"],[56,33,29,16],[56,34,29,17,"OS"],[56,36,29,19],[56,41,29,24],[56,50,29,33],[56,52,29,35],[57,6,30,8],[57,13,30,15,"ExpoLocation"],[57,34,30,27],[57,35,30,28,"enableNetworkProviderAsync"],[57,61,30,54],[57,62,30,55],[57,63,30,56],[58,4,31,4],[59,2,32,0],[60,2,33,0],[61,2,34,0],[62,0,35,0],[63,0,36,0],[64,0,37,0],[65,0,38,0],[66,0,39,0],[67,0,40,0],[68,0,41,0],[69,0,42,0],[70,0,43,0],[71,2,44,7],[71,17,44,22,"getCurrentPositionAsync"],[71,40,44,45,"getCurrentPositionAsync"],[71,41,44,46,"options"],[71,48,44,53],[71,51,44,56],[71,52,44,57],[71,53,44,58],[71,55,44,60],[72,4,45,4],[72,11,45,11,"ExpoLocation"],[72,32,45,23],[72,33,45,24,"getCurrentPositionAsync"],[72,56,45,47],[72,57,45,48,"options"],[72,64,45,55],[72,65,45,56],[73,2,46,0],[74,2,47,0],[75,2,48,0],[76,0,49,0],[77,0,50,0],[78,0,51,0],[79,0,52,0],[80,0,53,0],[81,0,54,0],[82,0,55,0],[83,0,56,0],[84,0,57,0],[85,2,58,7],[85,17,58,22,"getLastKnownPositionAsync"],[85,42,58,47,"getLastKnownPositionAsync"],[85,43,58,48,"options"],[85,50,58,55],[85,53,58,58],[85,54,58,59],[85,55,58,60],[85,57,58,62],[86,4,59,4],[86,11,59,11,"ExpoLocation"],[86,32,59,23],[86,33,59,24,"getLastKnownPositionAsync"],[86,58,59,49],[86,59,59,50,"options"],[86,66,59,57],[86,67,59,58],[87,2,60,0],[88,2,61,0],[89,2,62,0],[90,0,63,0],[91,0,64,0],[92,0,65,0],[93,0,66,0],[94,0,67,0],[95,0,68,0],[96,0,69,0],[97,0,70,0],[98,0,71,0],[99,0,72,0],[100,2,73,7],[100,17,73,22,"watchPositionAsync"],[100,35,73,40,"watchPositionAsync"],[100,36,73,41,"options"],[100,43,73,48],[100,45,73,50,"callback"],[100,53,73,58],[100,55,73,60,"errorHandler"],[100,67,73,72],[100,69,73,74],[101,4,74,4],[101,10,74,10,"watchId"],[101,17,74,17],[101,20,74,20,"LocationSubscriber"],[101,59,74,38],[101,60,74,39,"registerCallback"],[101,76,74,55],[101,77,74,56,"callback"],[101,85,74,64],[101,86,74,65],[102,4,75,4,"errorHandler"],[102,16,75,16],[102,20,75,20,"LocationErrorSubscriber"],[102,64,75,43],[102,65,75,44,"registerCallbackForId"],[102,86,75,65],[102,87,75,66,"watchId"],[102,94,75,73],[102,96,75,75,"errorHandler"],[102,108,75,87],[102,109,75,88],[103,4,76,4],[103,10,76,10,"ExpoLocation"],[103,31,76,22],[103,32,76,23,"watchPositionImplAsync"],[103,54,76,45],[103,55,76,46,"watchId"],[103,62,76,53],[103,64,76,55,"options"],[103,71,76,62],[103,72,76,63],[104,4,77,4],[104,11,77,11],[105,6,78,8,"remove"],[105,12,78,14,"remove"],[105,13,78,14],[105,15,78,17],[106,8,79,12,"LocationSubscriber"],[106,47,79,30],[106,48,79,31,"unregisterCallback"],[106,66,79,49],[106,67,79,50,"watchId"],[106,74,79,57],[106,75,79,58],[107,8,80,12,"errorHandler"],[107,20,80,24],[107,24,80,28,"LocationErrorSubscriber"],[107,68,80,51],[107,69,80,52,"unregisterCallback"],[107,87,80,70],[107,88,80,71,"watchId"],[107,95,80,78],[107,96,80,79],[108,6,81,8],[109,4,82,4],[109,5,82,5],[110,2,83,0],[111,2,84,0],[112,2,85,0],[113,0,86,0],[114,0,87,0],[115,0,88,0],[116,0,89,0],[117,2,90,7],[117,17,90,22,"getHeadingAsync"],[117,32,90,37,"getHeadingAsync"],[117,33,90,37],[117,35,90,40],[118,4,91,4],[118,11,91,11],[118,15,91,15,"Promise"],[118,22,91,22],[118,23,91,23],[118,30,91,30,"resolve"],[118,37,91,37],[118,39,91,39,"reject"],[118,45,91,45],[118,50,91,50],[119,6,92,8],[119,10,92,12,"tries"],[119,15,92,17],[119,18,92,20],[119,19,92,21],[120,6,93,8],[120,10,93,12,"subscriber"],[120,20,93,22],[120,23,93,25,"undefined"],[120,32,93,34],[121,6,94,8],[121,10,94,12],[122,8,95,12,"subscriber"],[122,18,95,22],[122,21,95,25],[122,27,95,31,"watchHeadingAsync"],[122,44,95,48],[122,45,95,50,"heading"],[122,52,95,57],[122,56,95,62],[123,10,96,16],[123,14,96,20,"heading"],[123,21,96,27],[123,22,96,28,"accuracy"],[123,30,96,36],[123,33,96,39],[123,34,96,40],[123,38,96,44,"tries"],[123,43,96,49],[123,46,96,52],[123,47,96,53],[123,49,96,55],[124,12,97,20,"subscriber"],[124,22,97,30],[124,24,97,32,"remove"],[124,30,97,38],[124,31,97,39],[124,32,97,40],[125,12,98,20,"resolve"],[125,19,98,27],[125,20,98,28,"heading"],[125,27,98,35],[125,28,98,36],[126,10,99,16],[126,11,99,17],[126,17,100,21],[127,12,101,20,"tries"],[127,17,101,25],[127,21,101,29],[127,22,101,30],[128,10,102,16],[129,8,103,12],[129,9,103,13],[129,11,103,16,"reason"],[129,17,103,22],[129,21,103,27],[130,10,104,16,"subscriber"],[130,20,104,26],[130,22,104,28,"remove"],[130,28,104,34],[130,29,104,35],[130,30,104,36],[131,10,105,16,"reject"],[131,16,105,22],[131,17,105,23,"reason"],[131,23,105,29],[131,24,105,30],[132,8,106,12],[132,9,106,13],[132,10,106,14],[133,6,107,8],[133,7,107,9],[133,8,108,8],[133,15,108,15,"e"],[133,16,108,16],[133,18,108,18],[134,8,109,12,"reject"],[134,14,109,18],[134,15,109,19,"e"],[134,16,109,20],[134,17,109,21],[135,6,110,8],[136,4,111,4],[136,5,111,5],[136,6,111,6],[137,2,112,0],[138,2,113,0],[139,2,114,0],[140,0,115,0],[141,0,116,0],[142,0,117,0],[143,0,118,0],[144,0,119,0],[145,0,120,0],[146,0,121,0],[147,0,122,0],[148,0,123,0],[149,0,124,0],[150,0,125,0],[151,2,126,7],[151,17,126,22,"watchHeadingAsync"],[151,34,126,39,"watchHeadingAsync"],[151,35,126,40,"callback"],[151,43,126,48],[151,45,126,50,"errorHandler"],[151,57,126,62],[151,59,126,64],[152,4,127,4],[152,10,127,10,"watchId"],[152,17,127,17],[152,20,127,20,"HeadingSubscriber"],[152,58,127,37],[152,59,127,38,"registerCallback"],[152,75,127,54],[152,76,127,55,"callback"],[152,84,127,63],[152,85,127,64],[153,4,128,4,"errorHandler"],[153,16,128,16],[153,20,128,20,"LocationErrorSubscriber"],[153,64,128,43],[153,65,128,44,"registerCallbackForId"],[153,86,128,65],[153,87,128,66,"watchId"],[153,94,128,73],[153,96,128,75,"errorHandler"],[153,108,128,87],[153,109,128,88],[154,4,129,4],[154,10,129,10,"ExpoLocation"],[154,31,129,22],[154,32,129,23,"watchDeviceHeading"],[154,50,129,41],[154,51,129,42,"watchId"],[154,58,129,49],[154,59,129,50],[155,4,130,4],[155,11,130,11],[156,6,131,8,"remove"],[156,12,131,14,"remove"],[156,13,131,14],[156,15,131,17],[157,8,132,12,"HeadingSubscriber"],[157,46,132,29],[157,47,132,30,"unregisterCallback"],[157,65,132,48],[157,66,132,49,"watchId"],[157,73,132,56],[157,74,132,57],[158,8,133,12,"errorHandler"],[158,20,133,24],[158,24,133,28,"LocationErrorSubscriber"],[158,68,133,51],[158,69,133,52,"unregisterCallback"],[158,87,133,70],[158,88,133,71,"watchId"],[158,95,133,78],[158,96,133,79],[159,6,134,8],[160,4,135,4],[160,5,135,5],[161,2,136,0],[162,2,137,0],[163,2,138,0],[164,0,139,0],[165,0,140,0],[166,0,141,0],[167,0,142,0],[168,0,143,0],[169,0,144,0],[170,0,145,0],[171,0,146,0],[172,0,147,0],[173,0,148,0],[174,0,149,0],[175,0,150,0],[176,0,151,0],[177,0,152,0],[178,0,153,0],[179,0,154,0],[180,0,155,0],[181,2,156,7],[181,17,156,22,"geocodeAsync"],[181,29,156,34,"geocodeAsync"],[181,30,156,35,"address"],[181,37,156,42],[181,39,156,44],[182,4,157,4],[182,8,157,8],[182,15,157,15,"address"],[182,22,157,22],[182,27,157,27],[182,35,157,35],[182,37,157,37],[183,6,158,8],[183,12,158,14],[183,16,158,18,"TypeError"],[183,25,158,27],[183,26,158,28],[183,70,158,72,"address"],[183,77,158,79],[183,88,158,90],[183,89,158,91],[184,4,159,4],[185,4,160,4],[185,8,160,8,"Platform"],[185,33,160,16],[185,34,160,17,"OS"],[185,36,160,19],[185,41,160,24],[185,46,160,29],[185,48,160,31],[186,6,161,8],[186,10,161,12,"__DEV__"],[186,17,161,19],[186,19,161,21],[187,8,162,12,"console"],[187,15,162,19],[187,16,162,20,"warn"],[187,20,162,24],[187,21,162,25],[187,107,162,111],[187,110,163,16],[187,194,163,100],[187,195,163,101],[188,6,164,8],[189,6,165,8],[189,13,165,15],[189,15,165,17],[190,4,166,4],[191,4,167,4],[191,11,167,11],[191,17,167,17,"ExpoLocation"],[191,38,167,29],[191,39,167,30,"geocodeAsync"],[191,51,167,42],[191,52,167,43,"address"],[191,59,167,50],[191,60,167,51],[192,2,168,0],[193,2,169,0],[194,2,170,0],[195,0,171,0],[196,0,172,0],[197,0,173,0],[198,0,174,0],[199,0,175,0],[200,0,176,0],[201,0,177,0],[202,0,178,0],[203,0,179,0],[204,0,180,0],[205,0,181,0],[206,0,182,0],[207,0,183,0],[208,0,184,0],[209,0,185,0],[210,0,186,0],[211,2,187,7],[211,17,187,22,"reverseGeocodeAsync"],[211,36,187,41,"reverseGeocodeAsync"],[211,37,187,42,"location"],[211,45,187,50],[211,47,187,52],[212,4,188,4],[212,8,188,8],[212,15,188,15,"location"],[212,23,188,23],[212,24,188,24,"latitude"],[212,32,188,32],[212,37,188,37],[212,45,188,45],[212,49,188,49],[212,56,188,56,"location"],[212,64,188,64],[212,65,188,65,"longitude"],[212,74,188,74],[212,79,188,79],[212,87,188,87],[212,89,188,89],[213,6,189,8],[213,12,189,14],[213,16,189,18,"TypeError"],[213,25,189,27],[213,26,189,28],[213,124,189,126],[213,125,189,127],[214,4,190,4],[215,4,191,4],[215,8,191,8,"Platform"],[215,33,191,16],[215,34,191,17,"OS"],[215,36,191,19],[215,41,191,24],[215,46,191,29],[215,48,191,31],[216,6,192,8],[216,10,192,12,"__DEV__"],[216,17,192,19],[216,19,192,21],[217,8,193,12,"console"],[217,15,193,19],[217,16,193,20,"warn"],[217,20,193,24],[217,21,193,25],[217,107,193,111],[217,110,194,16],[217,194,194,100],[217,195,194,101],[218,6,195,8],[219,6,196,8],[219,13,196,15],[219,15,196,17],[220,4,197,4],[221,4,198,4],[221,11,198,11],[221,17,198,17,"ExpoLocation"],[221,38,198,29],[221,39,198,30,"reverseGeocodeAsync"],[221,58,198,49],[221,59,198,50,"location"],[221,67,198,58],[221,68,198,59],[222,2,199,0],[223,2,200,0],[224,2,201,0],[225,0,202,0],[226,0,203,0],[227,0,204,0],[228,2,205,7],[228,17,205,22,"getForegroundPermissionsAsync"],[228,46,205,51,"getForegroundPermissionsAsync"],[228,47,205,51],[228,49,205,54],[229,4,206,4],[229,11,206,11],[229,17,206,17,"ExpoLocation"],[229,38,206,29],[229,39,206,30,"getForegroundPermissionsAsync"],[229,68,206,59],[229,69,206,60],[229,70,206,61],[230,2,207,0],[231,2,208,0],[232,2,209,0],[233,0,210,0],[234,0,211,0],[235,0,212,0],[236,2,213,7],[236,17,213,22,"requestForegroundPermissionsAsync"],[236,50,213,55,"requestForegroundPermissionsAsync"],[236,51,213,55],[236,53,213,58],[237,4,214,4],[237,11,214,11],[237,17,214,17,"ExpoLocation"],[237,38,214,29],[237,39,214,30,"requestForegroundPermissionsAsync"],[237,72,214,63],[237,73,214,64],[237,74,214,65],[238,2,215,0],[239,2,216,0],[240,2,217,0],[241,0,218,0],[242,0,219,0],[243,0,220,0],[244,0,221,0],[245,0,222,0],[246,0,223,0],[247,0,224,0],[248,0,225,0],[249,2,226,7],[249,8,226,13,"useForegroundPermissions"],[249,32,226,37],[249,35,226,37,"exports"],[249,42,226,37],[249,43,226,37,"useForegroundPermissions"],[249,67,226,37],[249,70,226,40],[249,74,226,40,"createPermissionHook"],[249,111,226,60],[249,113,226,61],[250,4,227,4,"getMethod"],[250,13,227,13],[250,15,227,15,"getForegroundPermissionsAsync"],[250,44,227,44],[251,4,228,4,"requestMethod"],[251,17,228,17],[251,19,228,19,"requestForegroundPermissionsAsync"],[252,2,229,0],[252,3,229,1],[252,4,229,2],[253,2,230,0],[254,2,231,0],[255,0,232,0],[256,0,233,0],[257,0,234,0],[258,2,235,7],[258,17,235,22,"getBackgroundPermissionsAsync"],[258,46,235,51,"getBackgroundPermissionsAsync"],[258,47,235,51],[258,49,235,54],[259,4,236,4],[259,11,236,11],[259,17,236,17,"ExpoLocation"],[259,38,236,29],[259,39,236,30,"getBackgroundPermissionsAsync"],[259,68,236,59],[259,69,236,60],[259,70,236,61],[260,2,237,0],[261,2,238,0],[262,2,239,0],[263,0,240,0],[264,0,241,0],[265,0,242,0],[266,0,243,0],[267,0,244,0],[268,0,245,0],[269,0,246,0],[270,0,247,0],[271,2,248,7],[271,17,248,22,"requestBackgroundPermissionsAsync"],[271,50,248,55,"requestBackgroundPermissionsAsync"],[271,51,248,55],[271,53,248,58],[272,4,249,4],[272,11,249,11],[272,17,249,17,"ExpoLocation"],[272,38,249,29],[272,39,249,30,"requestBackgroundPermissionsAsync"],[272,72,249,63],[272,73,249,64],[272,74,249,65],[273,2,250,0],[274,2,251,0],[275,2,252,0],[276,0,253,0],[277,0,254,0],[278,0,255,0],[279,0,256,0],[280,0,257,0],[281,0,258,0],[282,0,259,0],[283,0,260,0],[284,0,261,0],[285,2,262,7],[285,8,262,13,"useBackgroundPermissions"],[285,32,262,37],[285,35,262,37,"exports"],[285,42,262,37],[285,43,262,37,"useBackgroundPermissions"],[285,67,262,37],[285,70,262,40],[285,74,262,40,"createPermissionHook"],[285,111,262,60],[285,113,262,61],[286,4,263,4,"getMethod"],[286,13,263,13],[286,15,263,15,"getBackgroundPermissionsAsync"],[286,44,263,44],[287,4,264,4,"requestMethod"],[287,17,264,17],[287,19,264,19,"requestBackgroundPermissionsAsync"],[288,2,265,0],[288,3,265,1],[288,4,265,2],[289,2,266,0],[290,2,267,0],[291,2,268,0],[292,0,269,0],[293,0,270,0],[294,0,271,0],[295,0,272,0],[296,2,273,7],[296,17,273,22,"hasServicesEnabledAsync"],[296,40,273,45,"hasServicesEnabledAsync"],[296,41,273,45],[296,43,273,48],[297,4,274,4],[297,11,274,11],[297,17,274,17,"ExpoLocation"],[297,38,274,29],[297,39,274,30,"hasServicesEnabledAsync"],[297,62,274,53],[297,63,274,54],[297,64,274,55],[298,2,275,0],[299,2,276,0],[300,2,277,0],[300,11,277,9,"_validate"],[300,20,277,18,"_validate"],[300,21,277,19,"taskName"],[300,29,277,27],[300,31,277,29],[301,4,278,4],[301,8,278,8],[301,9,278,9,"taskName"],[301,17,278,17],[301,21,278,21],[301,28,278,28,"taskName"],[301,36,278,36],[301,41,278,41],[301,49,278,49],[301,51,278,51],[302,6,279,8],[302,12,279,14],[302,16,279,18,"Error"],[302,21,279,23],[302,22,279,24],[302,70,279,72,"taskName"],[302,78,279,80],[302,89,279,91],[302,90,279,92],[303,4,280,4],[304,4,281,4],[304,8,281,8],[304,12,281,8,"isRunningInExpoGo"],[304,35,281,25],[304,37,281,26],[304,38,281,27],[304,40,281,29],[305,6,282,8],[305,10,282,12],[305,11,282,13,"warnAboutExpoGoDisplayed"],[305,35,282,37],[305,37,282,39],[306,8,283,12],[306,14,283,18,"message"],[306,21,283,25],[306,24,283,28],[306,70,283,74],[306,73,284,16],[306,116,284,59],[306,119,285,16],[306,170,285,67],[306,173,286,16],[306,277,286,120],[307,8,287,12,"console"],[307,15,287,19],[307,16,287,20,"warn"],[307,20,287,24],[307,21,287,25,"message"],[307,28,287,32],[307,29,287,33],[308,8,288,12,"warnAboutExpoGoDisplayed"],[308,32,288,36],[308,35,288,39],[308,39,288,43],[309,6,289,8],[310,4,290,4],[311,2,291,0],[312,2,292,0],[313,2,293,7],[313,17,293,22,"isBackgroundLocationAvailableAsync"],[313,51,293,56,"isBackgroundLocationAvailableAsync"],[313,52,293,56],[313,54,293,59],[314,4,294,4],[314,10,294,10,"providerStatus"],[314,24,294,24],[314,27,294,27],[314,33,294,33,"getProviderStatusAsync"],[314,55,294,55],[314,56,294,56],[314,57,294,57],[315,4,295,4],[315,11,295,11,"providerStatus"],[315,25,295,25],[315,26,295,26,"backgroundModeEnabled"],[315,47,295,47],[316,2,296,0],[317,2,297,0],[318,2,298,0],[319,0,299,0],[320,0,300,0],[321,0,301,0],[322,0,302,0],[323,0,303,0],[324,0,304,0],[325,0,305,0],[326,0,306,0],[327,0,307,0],[328,0,308,0],[329,0,309,0],[330,0,310,0],[331,0,311,0],[332,0,312,0],[333,0,313,0],[334,0,314,0],[335,0,315,0],[336,0,316,0],[337,0,317,0],[338,0,318,0],[339,0,319,0],[340,0,320,0],[341,0,321,0],[342,0,322,0],[343,0,323,0],[344,2,324,7],[344,17,324,22,"startLocationUpdatesAsync"],[344,42,324,47,"startLocationUpdatesAsync"],[344,43,324,48,"taskName"],[344,51,324,56],[344,53,324,58,"options"],[344,60,324,65],[344,63,324,68],[345,4,324,70,"accuracy"],[345,12,324,78],[345,14,324,80,"LocationAccuracy"],[345,40,324,96],[345,41,324,97,"Balanced"],[346,2,324,106],[346,3,324,107],[346,5,324,109],[347,4,325,4,"_validate"],[347,13,325,13],[347,14,325,14,"taskName"],[347,22,325,22],[347,23,325,23],[348,4,326,4],[348,10,326,10,"ExpoLocation"],[348,31,326,22],[348,32,326,23,"startLocationUpdatesAsync"],[348,57,326,48],[348,58,326,49,"taskName"],[348,66,326,57],[348,68,326,59,"options"],[348,75,326,66],[348,76,326,67],[349,2,327,0],[350,2,328,0],[351,2,329,0],[352,0,330,0],[353,0,331,0],[354,0,332,0],[355,0,333,0],[356,2,334,7],[356,17,334,22,"stopLocationUpdatesAsync"],[356,41,334,46,"stopLocationUpdatesAsync"],[356,42,334,47,"taskName"],[356,50,334,55],[356,52,334,57],[357,4,335,4,"_validate"],[357,13,335,13],[357,14,335,14,"taskName"],[357,22,335,22],[357,23,335,23],[358,4,336,4],[358,10,336,10,"ExpoLocation"],[358,31,336,22],[358,32,336,23,"stopLocationUpdatesAsync"],[358,56,336,47],[358,57,336,48,"taskName"],[358,65,336,56],[358,66,336,57],[359,2,337,0],[360,2,338,0],[361,2,339,0],[362,0,340,0],[363,0,341,0],[364,0,342,0],[365,0,343,0],[366,2,344,7],[366,17,344,22,"hasStartedLocationUpdatesAsync"],[366,47,344,52,"hasStartedLocationUpdatesAsync"],[366,48,344,53,"taskName"],[366,56,344,61],[366,58,344,63],[367,4,345,4,"_validate"],[367,13,345,13],[367,14,345,14,"taskName"],[367,22,345,22],[367,23,345,23],[368,4,346,4],[368,11,346,11,"ExpoLocation"],[368,32,346,23],[368,33,346,24,"hasStartedLocationUpdatesAsync"],[368,63,346,54],[368,64,346,55,"taskName"],[368,72,346,63],[368,73,346,64],[369,2,347,0],[370,2,348,0],[371,2,349,0],[371,11,349,9,"_validateRegions"],[371,27,349,25,"_validateRegions"],[371,28,349,26,"regions"],[371,35,349,33],[371,37,349,35],[372,4,350,4],[372,8,350,8],[372,9,350,9,"regions"],[372,16,350,16],[372,20,350,20,"regions"],[372,27,350,27],[372,28,350,28,"length"],[372,34,350,34],[372,39,350,39],[372,40,350,40],[372,42,350,42],[373,6,351,8],[373,12,351,14],[373,16,351,18,"Error"],[373,21,351,23],[373,22,351,24],[373,123,351,125],[373,124,351,126],[374,4,352,4],[375,4,353,4],[375,9,353,9],[375,15,353,15,"region"],[375,21,353,21],[375,25,353,25,"regions"],[375,32,353,32],[375,34,353,34],[376,6,354,8],[376,10,354,12],[376,17,354,19,"region"],[376,23,354,25],[376,24,354,26,"latitude"],[376,32,354,34],[376,37,354,39],[376,45,354,47],[376,47,354,49],[377,8,355,12],[377,14,355,18],[377,18,355,22,"TypeError"],[377,27,355,31],[377,28,355,32],[377,72,355,76,"region"],[377,78,355,82],[377,79,355,83,"latitude"],[377,87,355,91],[377,99,355,103],[377,100,355,104],[378,6,356,8],[379,6,357,8],[379,10,357,12],[379,17,357,19,"region"],[379,23,357,25],[379,24,357,26,"longitude"],[379,33,357,35],[379,38,357,40],[379,46,357,48],[379,48,357,50],[380,8,358,12],[380,14,358,18],[380,18,358,22,"TypeError"],[380,27,358,31],[380,28,358,32],[380,73,358,77,"region"],[380,79,358,83],[380,80,358,84,"longitude"],[380,89,358,93],[380,101,358,105],[380,102,358,106],[381,6,359,8],[382,6,360,8],[382,10,360,12],[382,17,360,19,"region"],[382,23,360,25],[382,24,360,26,"radius"],[382,30,360,32],[382,35,360,37],[382,43,360,45],[382,45,360,47],[383,8,361,12],[383,14,361,18],[383,18,361,22,"TypeError"],[383,27,361,31],[383,28,361,32],[383,70,361,74,"region"],[383,76,361,80],[383,77,361,81,"radius"],[383,83,361,87],[383,95,361,99],[383,96,361,100],[384,6,362,8],[385,4,363,4],[386,2,364,0],[387,2,365,0],[388,2,366,0],[389,0,367,0],[390,0,368,0],[391,0,369,0],[392,0,370,0],[393,0,371,0],[394,0,372,0],[395,0,373,0],[396,0,374,0],[397,0,375,0],[398,0,376,0],[399,0,377,0],[400,0,378,0],[401,0,379,0],[402,0,380,0],[403,0,381,0],[404,0,382,0],[405,0,383,0],[406,0,384,0],[407,0,385,0],[408,0,386,0],[409,0,387,0],[410,0,388,0],[411,0,389,0],[412,0,390,0],[413,0,391,0],[414,0,392,0],[415,0,393,0],[416,0,394,0],[417,0,395,0],[418,0,396,0],[419,0,397,0],[420,0,398,0],[421,0,399,0],[422,0,400,0],[423,0,401,0],[424,2,402,7],[424,17,402,22,"startGeofencingAsync"],[424,37,402,42,"startGeofencingAsync"],[424,38,402,43,"taskName"],[424,46,402,51],[424,48,402,53,"regions"],[424,55,402,60],[424,58,402,63],[424,60,402,65],[424,62,402,67],[425,4,403,4,"_validate"],[425,13,403,13],[425,14,403,14,"taskName"],[425,22,403,22],[425,23,403,23],[426,4,404,4,"_validateRegions"],[426,20,404,20],[426,21,404,21,"regions"],[426,28,404,28],[426,29,404,29],[427,4,405,4],[427,10,405,10,"ExpoLocation"],[427,31,405,22],[427,32,405,23,"startGeofencingAsync"],[427,52,405,43],[427,53,405,44,"taskName"],[427,61,405,52],[427,63,405,54],[428,6,405,56,"regions"],[429,4,405,64],[429,5,405,65],[429,6,405,66],[430,2,406,0],[431,2,407,0],[432,2,408,0],[433,0,409,0],[434,0,410,0],[435,0,411,0],[436,0,412,0],[437,0,413,0],[438,2,414,7],[438,17,414,22,"stopGeofencingAsync"],[438,36,414,41,"stopGeofencingAsync"],[438,37,414,42,"taskName"],[438,45,414,50],[438,47,414,52],[439,4,415,4,"_validate"],[439,13,415,13],[439,14,415,14,"taskName"],[439,22,415,22],[439,23,415,23],[440,4,416,4],[440,10,416,10,"ExpoLocation"],[440,31,416,22],[440,32,416,23,"stopGeofencingAsync"],[440,51,416,42],[440,52,416,43,"taskName"],[440,60,416,51],[440,61,416,52],[441,2,417,0],[442,2,418,0],[443,2,419,0],[444,0,420,0],[445,0,421,0],[446,0,422,0],[447,0,423,0],[448,2,424,7],[448,17,424,22,"hasStartedGeofencingAsync"],[448,42,424,47,"hasStartedGeofencingAsync"],[448,43,424,48,"taskName"],[448,51,424,56],[448,53,424,58],[449,4,425,4,"_validate"],[449,13,425,13],[449,14,425,14,"taskName"],[449,22,425,22],[449,23,425,23],[450,4,426,4],[450,11,426,11,"ExpoLocation"],[450,32,426,23],[450,33,426,24,"hasStartedGeofencingAsync"],[450,58,426,49],[450,59,426,50,"taskName"],[450,67,426,58],[450,68,426,59],[451,2,427,0],[452,0,427,1],[452,3]],"functionMap":{"names":["<global>","getProviderStatusAsync","enableNetworkProviderAsync","getCurrentPositionAsync","getLastKnownPositionAsync","watchPositionAsync","remove","getHeadingAsync","Promise$argument_0","watchHeadingAsync$argument_0","watchHeadingAsync$argument_1","watchHeadingAsync","geocodeAsync","reverseGeocodeAsync","getForegroundPermissionsAsync","requestForegroundPermissionsAsync","getBackgroundPermissionsAsync","requestBackgroundPermissionsAsync","hasServicesEnabledAsync","_validate","isBackgroundLocationAvailableAsync","startLocationUpdatesAsync","stopLocationUpdatesAsync","hasStartedLocationUpdatesAsync","_validateRegions","startGeofencingAsync","stopGeofencingAsync","hasStartedGeofencingAsync"],"mappings":"AAA;OCY;CDE;OES;CFQ;OGY;CHE;OIY;CJE;OKa;QCK;SDG;CLE;OOO;uBCC;iDCI;aDQ,EE;aFG;KDK;CPC;OWc;QLK;SKG;CXE;OYoB;CZY;OamB;CbY;OcM;CdE;OeM;CfE;OgBoB;ChBE;OiBW;CjBE;OkBuB;ClBE;AmBE;CnBc;OoBE;CpBG;OqB4B;CrBG;OsBO;CtBG;OuBO;CvBG;AwBE;CxBe;OyBsC;CzBI;O0BQ;C1BG;O2BO;C3BG"}},"type":"js/module"}]}