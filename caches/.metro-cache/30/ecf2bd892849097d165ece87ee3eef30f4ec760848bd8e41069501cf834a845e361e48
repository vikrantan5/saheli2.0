{"dependencies":[{"name":"../../lib/extract/extractTransform","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":76,"index":76}}],"key":"kfBwr9wX8MpuKuAI5utiPg2AKqw=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.camelCaseToDashed = void 0;\n  exports.encodeSvg = encodeSvg;\n  exports.hasTouchableProperty = exports.getBoundingClientRect = void 0;\n  exports.parseTransformProp = parseTransformProp;\n  exports.remeasure = remeasure;\n  var _extractTransform = require(_dependencyMap[0], \"../../lib/extract/extractTransform\");\n  const hasTouchableProperty = props => props.onPress || props.onPressIn || props.onPressOut || props.onLongPress;\n  exports.hasTouchableProperty = hasTouchableProperty;\n  const camelCaseToDashed = camelCase => {\n    return camelCase.replace(/[A-Z]/g, m => '-' + m.toLowerCase());\n  };\n  exports.camelCaseToDashed = camelCaseToDashed;\n  function stringifyTransformProps(transformProps) {\n    const transformArray = [];\n    if (transformProps.translate != null) {\n      transformArray.push(`translate(${transformProps.translate})`);\n    }\n    if (transformProps.translateX != null || transformProps.translateY != null) {\n      transformArray.push(`translate(${transformProps.translateX || 0}, ${transformProps.translateY || 0})`);\n    }\n    if (transformProps.scale != null) {\n      transformArray.push(`scale(${transformProps.scale})`);\n    }\n    if (transformProps.scaleX != null || transformProps.scaleY != null) {\n      transformArray.push(`scale(${transformProps.scaleX || 1}, ${transformProps.scaleY || 1})`);\n    }\n    // rotation maps to rotate, not to collide with the text rotate attribute (which acts per glyph rather than block)\n    if (transformProps.rotation != null) {\n      transformArray.push(`rotate(${transformProps.rotation})`);\n    }\n    if (transformProps.skewX != null) {\n      transformArray.push(`skewX(${transformProps.skewX})`);\n    }\n    if (transformProps.skewY != null) {\n      transformArray.push(`skewY(${transformProps.skewY})`);\n    }\n    return transformArray;\n  }\n  function parseTransformProp(transform, props) {\n    const transformArray = [];\n    props && transformArray.push(...stringifyTransformProps(props));\n    if (Array.isArray(transform)) {\n      if (typeof transform[0] === 'number') {\n        transformArray.push(`matrix(${transform.join(' ')})`);\n      } else {\n        const stringifiedProps = (0, _extractTransform.transformsArrayToProps)(\n        // @ts-expect-error FIXME\n        transform);\n        transformArray.push(...stringifyTransformProps(stringifiedProps));\n      }\n    } else if (typeof transform === 'string') {\n      transformArray.push(transform);\n    }\n    return transformArray.length ? transformArray.join(' ') : undefined;\n  }\n  const getBoundingClientRect = node => {\n    if (node) {\n      const isElement = node.nodeType === 1; /* Node.ELEMENT_NODE */\n      if (isElement && typeof node.getBoundingClientRect === 'function') {\n        return node.getBoundingClientRect();\n      }\n    }\n    throw new Error('Can not get boundingClientRect of ' + node || 'undefined');\n  };\n  exports.getBoundingClientRect = getBoundingClientRect;\n  const measureLayout = (node, callback) => {\n    const relativeNode = node === null || node === void 0 ? void 0 : node.parentNode;\n    if (relativeNode) {\n      setTimeout(() => {\n        // @ts-expect-error TODO: handle it better\n        const relativeRect = getBoundingClientRect(relativeNode);\n        const {\n          height,\n          left,\n          top,\n          width\n        } = getBoundingClientRect(node);\n        const x = left - relativeRect.left;\n        const y = top - relativeRect.top;\n        callback(x, y, width, height, left, top);\n      }, 0);\n    }\n  };\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  function remeasure() {\n    const tag = this.state.touchable.responderID;\n    if (tag === null) {\n      return;\n    }\n    measureLayout(tag, this._handleQueryLayout);\n  }\n\n  /* Taken from here: https://gist.github.com/jennyknuth/222825e315d45a738ed9d6e04c7a88d0 */\n  function encodeSvg(svgString) {\n    return svgString.replace('<svg', ~svgString.indexOf('xmlns') ? '<svg' : '<svg xmlns=\"http://www.w3.org/2000/svg\"').replace(/\"/g, \"'\").replace(/%/g, '%25').replace(/#/g, '%23').replace(/{/g, '%7B').replace(/}/g, '%7D').replace(/</g, '%3C').replace(/>/g, '%3E').replace(/\\s+/g, ' ');\n  }\n});","lineCount":102,"map":[[10,2,1,0],[10,6,1,0,"_extractTransform"],[10,23,1,0],[10,26,1,0,"require"],[10,33,1,0],[10,34,1,0,"_dependencyMap"],[10,48,1,0],[11,2,2,7],[11,8,2,13,"hasTouchableProperty"],[11,28,2,33],[11,31,2,36,"props"],[11,36,2,41],[11,40,2,45,"props"],[11,45,2,50],[11,46,2,51,"onPress"],[11,53,2,58],[11,57,2,62,"props"],[11,62,2,67],[11,63,2,68,"onPressIn"],[11,72,2,77],[11,76,2,81,"props"],[11,81,2,86],[11,82,2,87,"onPressOut"],[11,92,2,97],[11,96,2,101,"props"],[11,101,2,106],[11,102,2,107,"onLongPress"],[11,113,2,118],[12,2,2,119,"exports"],[12,9,2,119],[12,10,2,119,"hasTouchableProperty"],[12,30,2,119],[12,33,2,119,"hasTouchableProperty"],[12,53,2,119],[13,2,3,7],[13,8,3,13,"camelCaseToDashed"],[13,25,3,30],[13,28,3,33,"camelCase"],[13,37,3,42],[13,41,3,46],[14,4,4,2],[14,11,4,9,"camelCase"],[14,20,4,18],[14,21,4,19,"replace"],[14,28,4,26],[14,29,4,27],[14,37,4,35],[14,39,4,37,"m"],[14,40,4,38],[14,44,4,42],[14,47,4,45],[14,50,4,48,"m"],[14,51,4,49],[14,52,4,50,"toLowerCase"],[14,63,4,61],[14,64,4,62],[14,65,4,63],[14,66,4,64],[15,2,5,0],[15,3,5,1],[16,2,5,2,"exports"],[16,9,5,2],[16,10,5,2,"camelCaseToDashed"],[16,27,5,2],[16,30,5,2,"camelCaseToDashed"],[16,47,5,2],[17,2,6,0],[17,11,6,9,"stringifyTransformProps"],[17,34,6,32,"stringifyTransformProps"],[17,35,6,33,"transformProps"],[17,49,6,47],[17,51,6,49],[18,4,7,2],[18,10,7,8,"transformArray"],[18,24,7,22],[18,27,7,25],[18,29,7,27],[19,4,8,2],[19,8,8,6,"transformProps"],[19,22,8,20],[19,23,8,21,"translate"],[19,32,8,30],[19,36,8,34],[19,40,8,38],[19,42,8,40],[20,6,9,4,"transformArray"],[20,20,9,18],[20,21,9,19,"push"],[20,25,9,23],[20,26,9,24],[20,39,9,37,"transformProps"],[20,53,9,51],[20,54,9,52,"translate"],[20,63,9,61],[20,66,9,64],[20,67,9,65],[21,4,10,2],[22,4,11,2],[22,8,11,6,"transformProps"],[22,22,11,20],[22,23,11,21,"translateX"],[22,33,11,31],[22,37,11,35],[22,41,11,39],[22,45,11,43,"transformProps"],[22,59,11,57],[22,60,11,58,"translateY"],[22,70,11,68],[22,74,11,72],[22,78,11,76],[22,80,11,78],[23,6,12,4,"transformArray"],[23,20,12,18],[23,21,12,19,"push"],[23,25,12,23],[23,26,12,24],[23,39,12,37,"transformProps"],[23,53,12,51],[23,54,12,52,"translateX"],[23,64,12,62],[23,68,12,66],[23,69,12,67],[23,74,12,72,"transformProps"],[23,88,12,86],[23,89,12,87,"translateY"],[23,99,12,97],[23,103,12,101],[23,104,12,102],[23,107,12,105],[23,108,12,106],[24,4,13,2],[25,4,14,2],[25,8,14,6,"transformProps"],[25,22,14,20],[25,23,14,21,"scale"],[25,28,14,26],[25,32,14,30],[25,36,14,34],[25,38,14,36],[26,6,15,4,"transformArray"],[26,20,15,18],[26,21,15,19,"push"],[26,25,15,23],[26,26,15,24],[26,35,15,33,"transformProps"],[26,49,15,47],[26,50,15,48,"scale"],[26,55,15,53],[26,58,15,56],[26,59,15,57],[27,4,16,2],[28,4,17,2],[28,8,17,6,"transformProps"],[28,22,17,20],[28,23,17,21,"scaleX"],[28,29,17,27],[28,33,17,31],[28,37,17,35],[28,41,17,39,"transformProps"],[28,55,17,53],[28,56,17,54,"scaleY"],[28,62,17,60],[28,66,17,64],[28,70,17,68],[28,72,17,70],[29,6,18,4,"transformArray"],[29,20,18,18],[29,21,18,19,"push"],[29,25,18,23],[29,26,18,24],[29,35,18,33,"transformProps"],[29,49,18,47],[29,50,18,48,"scaleX"],[29,56,18,54],[29,60,18,58],[29,61,18,59],[29,66,18,64,"transformProps"],[29,80,18,78],[29,81,18,79,"scaleY"],[29,87,18,85],[29,91,18,89],[29,92,18,90],[29,95,18,93],[29,96,18,94],[30,4,19,2],[31,4,20,2],[32,4,21,2],[32,8,21,6,"transformProps"],[32,22,21,20],[32,23,21,21,"rotation"],[32,31,21,29],[32,35,21,33],[32,39,21,37],[32,41,21,39],[33,6,22,4,"transformArray"],[33,20,22,18],[33,21,22,19,"push"],[33,25,22,23],[33,26,22,24],[33,36,22,34,"transformProps"],[33,50,22,48],[33,51,22,49,"rotation"],[33,59,22,57],[33,62,22,60],[33,63,22,61],[34,4,23,2],[35,4,24,2],[35,8,24,6,"transformProps"],[35,22,24,20],[35,23,24,21,"skewX"],[35,28,24,26],[35,32,24,30],[35,36,24,34],[35,38,24,36],[36,6,25,4,"transformArray"],[36,20,25,18],[36,21,25,19,"push"],[36,25,25,23],[36,26,25,24],[36,35,25,33,"transformProps"],[36,49,25,47],[36,50,25,48,"skewX"],[36,55,25,53],[36,58,25,56],[36,59,25,57],[37,4,26,2],[38,4,27,2],[38,8,27,6,"transformProps"],[38,22,27,20],[38,23,27,21,"skewY"],[38,28,27,26],[38,32,27,30],[38,36,27,34],[38,38,27,36],[39,6,28,4,"transformArray"],[39,20,28,18],[39,21,28,19,"push"],[39,25,28,23],[39,26,28,24],[39,35,28,33,"transformProps"],[39,49,28,47],[39,50,28,48,"skewY"],[39,55,28,53],[39,58,28,56],[39,59,28,57],[40,4,29,2],[41,4,30,2],[41,11,30,9,"transformArray"],[41,25,30,23],[42,2,31,0],[43,2,32,7],[43,11,32,16,"parseTransformProp"],[43,29,32,34,"parseTransformProp"],[43,30,32,35,"transform"],[43,39,32,44],[43,41,32,46,"props"],[43,46,32,51],[43,48,32,53],[44,4,33,2],[44,10,33,8,"transformArray"],[44,24,33,22],[44,27,33,25],[44,29,33,27],[45,4,34,2,"props"],[45,9,34,7],[45,13,34,11,"transformArray"],[45,27,34,25],[45,28,34,26,"push"],[45,32,34,30],[45,33,34,31],[45,36,34,34,"stringifyTransformProps"],[45,59,34,57],[45,60,34,58,"props"],[45,65,34,63],[45,66,34,64],[45,67,34,65],[46,4,35,2],[46,8,35,6,"Array"],[46,13,35,11],[46,14,35,12,"isArray"],[46,21,35,19],[46,22,35,20,"transform"],[46,31,35,29],[46,32,35,30],[46,34,35,32],[47,6,36,4],[47,10,36,8],[47,17,36,15,"transform"],[47,26,36,24],[47,27,36,25],[47,28,36,26],[47,29,36,27],[47,34,36,32],[47,42,36,40],[47,44,36,42],[48,8,37,6,"transformArray"],[48,22,37,20],[48,23,37,21,"push"],[48,27,37,25],[48,28,37,26],[48,38,37,36,"transform"],[48,47,37,45],[48,48,37,46,"join"],[48,52,37,50],[48,53,37,51],[48,56,37,54],[48,57,37,55],[48,60,37,58],[48,61,37,59],[49,6,38,4],[49,7,38,5],[49,13,38,11],[50,8,39,6],[50,14,39,12,"stringifiedProps"],[50,30,39,28],[50,33,39,31],[50,37,39,31,"transformsArrayToProps"],[50,77,39,53],[51,8,40,6],[52,8,41,6,"transform"],[52,17,41,15],[52,18,41,16],[53,8,42,6,"transformArray"],[53,22,42,20],[53,23,42,21,"push"],[53,27,42,25],[53,28,42,26],[53,31,42,29,"stringifyTransformProps"],[53,54,42,52],[53,55,42,53,"stringifiedProps"],[53,71,42,69],[53,72,42,70],[53,73,42,71],[54,6,43,4],[55,4,44,2],[55,5,44,3],[55,11,44,9],[55,15,44,13],[55,22,44,20,"transform"],[55,31,44,29],[55,36,44,34],[55,44,44,42],[55,46,44,44],[56,6,45,4,"transformArray"],[56,20,45,18],[56,21,45,19,"push"],[56,25,45,23],[56,26,45,24,"transform"],[56,35,45,33],[56,36,45,34],[57,4,46,2],[58,4,47,2],[58,11,47,9,"transformArray"],[58,25,47,23],[58,26,47,24,"length"],[58,32,47,30],[58,35,47,33,"transformArray"],[58,49,47,47],[58,50,47,48,"join"],[58,54,47,52],[58,55,47,53],[58,58,47,56],[58,59,47,57],[58,62,47,60,"undefined"],[58,71,47,69],[59,2,48,0],[60,2,49,7],[60,8,49,13,"getBoundingClientRect"],[60,29,49,34],[60,32,49,37,"node"],[60,36,49,41],[60,40,49,45],[61,4,50,2],[61,8,50,6,"node"],[61,12,50,10],[61,14,50,12],[62,6,51,4],[62,12,51,10,"isElement"],[62,21,51,19],[62,24,51,22,"node"],[62,28,51,26],[62,29,51,27,"nodeType"],[62,37,51,35],[62,42,51,40],[62,43,51,41],[62,44,51,42],[62,45,51,43],[63,6,52,4],[63,10,52,8,"isElement"],[63,19,52,17],[63,23,52,21],[63,30,52,28,"node"],[63,34,52,32],[63,35,52,33,"getBoundingClientRect"],[63,56,52,54],[63,61,52,59],[63,71,52,69],[63,73,52,71],[64,8,53,6],[64,15,53,13,"node"],[64,19,53,17],[64,20,53,18,"getBoundingClientRect"],[64,41,53,39],[64,42,53,40],[64,43,53,41],[65,6,54,4],[66,4,55,2],[67,4,56,2],[67,10,56,8],[67,14,56,12,"Error"],[67,19,56,17],[67,20,56,18],[67,56,56,54],[67,59,56,57,"node"],[67,63,56,61],[67,67,56,65],[67,78,56,76],[67,79,56,77],[68,2,57,0],[68,3,57,1],[69,2,57,2,"exports"],[69,9,57,2],[69,10,57,2,"getBoundingClientRect"],[69,31,57,2],[69,34,57,2,"getBoundingClientRect"],[69,55,57,2],[70,2,58,0],[70,8,58,6,"measureLayout"],[70,21,58,19],[70,24,58,22,"measureLayout"],[70,25,58,23,"node"],[70,29,58,27],[70,31,58,29,"callback"],[70,39,58,37],[70,44,58,42],[71,4,59,2],[71,10,59,8,"relativeNode"],[71,22,59,20],[71,25,59,23,"node"],[71,29,59,27],[71,34,59,32],[71,38,59,36],[71,42,59,40,"node"],[71,46,59,44],[71,51,59,49],[71,56,59,54],[71,57,59,55],[71,60,59,58],[71,65,59,63],[71,66,59,64],[71,69,59,67,"node"],[71,73,59,71],[71,74,59,72,"parentNode"],[71,84,59,82],[72,4,60,2],[72,8,60,6,"relativeNode"],[72,20,60,18],[72,22,60,20],[73,6,61,4,"setTimeout"],[73,16,61,14],[73,17,61,15],[73,23,61,21],[74,8,62,6],[75,8,63,6],[75,14,63,12,"relativeRect"],[75,26,63,24],[75,29,63,27,"getBoundingClientRect"],[75,50,63,48],[75,51,63,49,"relativeNode"],[75,63,63,61],[75,64,63,62],[76,8,64,6],[76,14,64,12],[77,10,65,8,"height"],[77,16,65,14],[78,10,66,8,"left"],[78,14,66,12],[79,10,67,8,"top"],[79,13,67,11],[80,10,68,8,"width"],[81,8,69,6],[81,9,69,7],[81,12,69,10,"getBoundingClientRect"],[81,33,69,31],[81,34,69,32,"node"],[81,38,69,36],[81,39,69,37],[82,8,70,6],[82,14,70,12,"x"],[82,15,70,13],[82,18,70,16,"left"],[82,22,70,20],[82,25,70,23,"relativeRect"],[82,37,70,35],[82,38,70,36,"left"],[82,42,70,40],[83,8,71,6],[83,14,71,12,"y"],[83,15,71,13],[83,18,71,16,"top"],[83,21,71,19],[83,24,71,22,"relativeRect"],[83,36,71,34],[83,37,71,35,"top"],[83,40,71,38],[84,8,72,6,"callback"],[84,16,72,14],[84,17,72,15,"x"],[84,18,72,16],[84,20,72,18,"y"],[84,21,72,19],[84,23,72,21,"width"],[84,28,72,26],[84,30,72,28,"height"],[84,36,72,34],[84,38,72,36,"left"],[84,42,72,40],[84,44,72,42,"top"],[84,47,72,45],[84,48,72,46],[85,6,73,4],[85,7,73,5],[85,9,73,7],[85,10,73,8],[85,11,73,9],[86,4,74,2],[87,2,75,0],[87,3,75,1],[89,2,77,0],[90,2,78,7],[90,11,78,16,"remeasure"],[90,20,78,25,"remeasure"],[90,21,78,25],[90,23,78,28],[91,4,79,2],[91,10,79,8,"tag"],[91,13,79,11],[91,16,79,14],[91,20,79,18],[91,21,79,19,"state"],[91,26,79,24],[91,27,79,25,"touchable"],[91,36,79,34],[91,37,79,35,"responderID"],[91,48,79,46],[92,4,80,2],[92,8,80,6,"tag"],[92,11,80,9],[92,16,80,14],[92,20,80,18],[92,22,80,20],[93,6,81,4],[94,4,82,2],[95,4,83,2,"measureLayout"],[95,17,83,15],[95,18,83,16,"tag"],[95,21,83,19],[95,23,83,21],[95,27,83,25],[95,28,83,26,"_handleQueryLayout"],[95,46,83,44],[95,47,83,45],[96,2,84,0],[98,2,86,0],[99,2,87,7],[99,11,87,16,"encodeSvg"],[99,20,87,25,"encodeSvg"],[99,21,87,26,"svgString"],[99,30,87,35],[99,32,87,37],[100,4,88,2],[100,11,88,9,"svgString"],[100,20,88,18],[100,21,88,19,"replace"],[100,28,88,26],[100,29,88,27],[100,35,88,33],[100,37,88,35],[100,38,88,36,"svgString"],[100,47,88,45],[100,48,88,46,"indexOf"],[100,55,88,53],[100,56,88,54],[100,63,88,61],[100,64,88,62],[100,67,88,65],[100,73,88,71],[100,76,88,74],[100,117,88,115],[100,118,88,116],[100,119,88,117,"replace"],[100,126,88,124],[100,127,88,125],[100,131,88,129],[100,133,88,131],[100,136,88,134],[100,137,88,135],[100,138,88,136,"replace"],[100,145,88,143],[100,146,88,144],[100,150,88,148],[100,152,88,150],[100,157,88,155],[100,158,88,156],[100,159,88,157,"replace"],[100,166,88,164],[100,167,88,165],[100,171,88,169],[100,173,88,171],[100,178,88,176],[100,179,88,177],[100,180,88,178,"replace"],[100,187,88,185],[100,188,88,186],[100,192,88,190],[100,194,88,192],[100,199,88,197],[100,200,88,198],[100,201,88,199,"replace"],[100,208,88,206],[100,209,88,207],[100,213,88,211],[100,215,88,213],[100,220,88,218],[100,221,88,219],[100,222,88,220,"replace"],[100,229,88,227],[100,230,88,228],[100,234,88,232],[100,236,88,234],[100,241,88,239],[100,242,88,240],[100,243,88,241,"replace"],[100,250,88,248],[100,251,88,249],[100,255,88,253],[100,257,88,255],[100,262,88,260],[100,263,88,261],[100,264,88,262,"replace"],[100,271,88,269],[100,272,88,270],[100,278,88,276],[100,280,88,278],[100,283,88,281],[100,284,88,282],[101,2,89,0],[102,0,89,1],[102,3]],"functionMap":{"names":["<global>","hasTouchableProperty","camelCaseToDashed","camelCase.replace$argument_1","stringifyTransformProps","parseTransformProp","getBoundingClientRect","measureLayout","setTimeout$argument_0","remeasure","encodeSvg"],"mappings":"AAA;oCCC,kFD;iCEC;qCCC,0BD;CFC;AIC;CJyB;OKC;CLgB;qCMC;CNQ;sBOC;eCG;KDY;CPE;OSG;CTM;OUG;CVE"}},"type":"js/module"}]}