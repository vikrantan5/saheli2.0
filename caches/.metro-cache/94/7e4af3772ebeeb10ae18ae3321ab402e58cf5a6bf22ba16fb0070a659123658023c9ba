{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":10,"column":0,"index":624},"end":{"line":10,"column":31,"index":655}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"]}},{"name":"invariant","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":12,"column":0,"index":691},"end":{"line":12,"column":34,"index":725}}],"key":"4HPAaDQ25ZwZ2dzTLatXuUucZUM=","exportNames":["*"]}},{"name":"react-native-web/dist/exports/Animated","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"dNPzxVfn0yBoRxvhD+vE+lN7k4Q=","exportNames":["*"]}},{"name":"react-native-web/dist/exports/StyleSheet","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"MK7+k1V+KnvCVW7Kj2k/ydtjmVU=","exportNames":["*"]}},{"name":"react-native-web/dist/exports/View","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"4kYBDC6LJJXoH7P9rWDi3vkLVB0=","exportNames":["*"]}},{"name":"react-native-web/dist/exports/Keyboard","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"4H7FkS8ywD5HLTNk4ggLktoHubI=","exportNames":["*"]}},{"name":"react-native-web/dist/exports/StatusBar","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"zzHKpVbCjTP+fv+3SRvKiN2M8pI=","exportNames":["*"]}},{"name":"react-native-web/dist/exports/I18nManager","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YXFxy1JKR54teS+Ykb7Z7cVZrH8=","exportNames":["*"]}},{"name":"../handlers/PanGestureHandler","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":14,"column":0,"index":819},"end":{"line":14,"column":66,"index":885}}],"key":"Z7WldcovRqVbXERv5Mkjp/bqHuA=","exportNames":["*"]}},{"name":"../handlers/TapGestureHandler","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":15,"column":0,"index":886},"end":{"line":15,"column":66,"index":952}}],"key":"+Msf+8iAdn6txPXicJvQZ0hdOZ0=","exportNames":["*"]}},{"name":"../State","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":16,"column":0,"index":953},"end":{"line":16,"column":33,"index":986}}],"key":"ISRoyBmrsYyTcSqLDCBIFNoRZWE=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  var _react = _interopRequireWildcard(require(_dependencyMap[1], \"react\"));\n  var React = _react;\n  var _invariant = _interopRequireDefault(require(_dependencyMap[2], \"invariant\"));\n  var _Animated = _interopRequireDefault(require(_dependencyMap[3], \"react-native-web/dist/exports/Animated\"));\n  var _StyleSheet = _interopRequireDefault(require(_dependencyMap[4], \"react-native-web/dist/exports/StyleSheet\"));\n  var _View = _interopRequireDefault(require(_dependencyMap[5], \"react-native-web/dist/exports/View\"));\n  var _Keyboard = _interopRequireDefault(require(_dependencyMap[6], \"react-native-web/dist/exports/Keyboard\"));\n  var _StatusBar = _interopRequireDefault(require(_dependencyMap[7], \"react-native-web/dist/exports/StatusBar\"));\n  var _I18nManager = _interopRequireDefault(require(_dependencyMap[8], \"react-native-web/dist/exports/I18nManager\"));\n  var _PanGestureHandler = require(_dependencyMap[9], \"../handlers/PanGestureHandler\");\n  var _TapGestureHandler = require(_dependencyMap[10], \"../handlers/TapGestureHandler\");\n  var _State = require(_dependencyMap[11], \"../State\");\n  function _interopRequireWildcard(e, t) { if (\"function\" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) \"default\" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }\n  function _defineProperty(obj, key, value) {\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n    return obj;\n  }\n\n  // This component is based on RN's DrawerLayoutAndroid API\n  //\n  // It perhaps deserves to be put in a separate repo, but since it relies on\n  // react-native-gesture-handler library which isn't very popular at the moment I\n  // decided to keep it here for the time being. It will allow us to move faster\n  // and fix issues that may arise in gesture handler library that could be found\n  // when using the drawer component\n\n  const DRAG_TOSS = 0.05;\n  const IDLE = 'Idle';\n  const DRAGGING = 'Dragging';\n  const SETTLING = 'Settling';\n  /**\n   * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n   */\n\n  /**\n   * @deprecated use Reanimated version of DrawerLayout instead\n   */\n  class DrawerLayout extends _react.Component {\n    constructor(_props) {\n      super(_props);\n      _defineProperty(this, \"openValue\", void 0);\n      _defineProperty(this, \"onGestureEvent\", void 0);\n      _defineProperty(this, \"accessibilityIsModalView\", /*#__PURE__*/React.createRef());\n      _defineProperty(this, \"pointerEventsView\", /*#__PURE__*/React.createRef());\n      _defineProperty(this, \"panGestureHandler\", /*#__PURE__*/React.createRef());\n      _defineProperty(this, \"drawerShown\", false);\n      _defineProperty(this, \"updateAnimatedEvent\", (props, state) => {\n        // Event definition is based on\n        const {\n          drawerPosition,\n          drawerWidth,\n          drawerType\n        } = props;\n        const {\n          dragX: dragXValue,\n          touchX: touchXValue,\n          drawerTranslation,\n          containerWidth\n        } = state;\n        let dragX = dragXValue;\n        let touchX = touchXValue;\n        if (drawerPosition !== 'left') {\n          // Most of the code is written in a way to handle left-side drawer. In\n          // order to handle right-side drawer the only thing we need to do is to\n          // reverse events coming from gesture handler in a way they emulate\n          // left-side drawer gestures. E.g. dragX is simply -dragX, and touchX is\n          // calulcated by subtracing real touchX from the width of the container\n          // (such that when touch happens at the right edge the value is simply 0)\n          dragX = _Animated.default.multiply(new _Animated.default.Value(-1), dragXValue); // TODO(TS): (for all \"as\" in this file) make sure we can map this\n\n          touchX = _Animated.default.add(new _Animated.default.Value(containerWidth), _Animated.default.multiply(new _Animated.default.Value(-1), touchXValue)); // TODO(TS): make sure we can map this;\n\n          touchXValue.setValue(containerWidth);\n        } else {\n          touchXValue.setValue(0);\n        } // While closing the drawer when user starts gesture outside of its area (in greyed\n        // out part of the window), we want the drawer to follow only once finger reaches the\n        // edge of the drawer.\n        // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n        // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n        // an arrow pointing left\n        // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n        //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n        //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n        //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n        //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n        //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n        //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n        //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n        //    +---------------+    +---------------+    +---------------+    +---------------+\n        //\n        // For the above to work properly we define animated value that will keep\n        // start position of the gesture. Then we use that value to calculate how\n        // much we need to subtract from the dragX. If the gesture started on the\n        // greyed out area we take the distance from the edge of the drawer to the\n        // start position. Otherwise we don't subtract at all and the drawer be\n        // pulled back as soon as you start the pan.\n        //\n        // This is used only when drawerType is \"front\"\n        //\n\n        let translationX = dragX;\n        if (drawerType === 'front') {\n          const startPositionX = _Animated.default.add(touchX, _Animated.default.multiply(new _Animated.default.Value(-1), dragX));\n          const dragOffsetFromOnStartPosition = startPositionX.interpolate({\n            inputRange: [drawerWidth - 1, drawerWidth, drawerWidth + 1],\n            outputRange: [0, 0, 1]\n          });\n          translationX = _Animated.default.add(dragX, dragOffsetFromOnStartPosition); // TODO: as above\n        }\n        this.openValue = _Animated.default.add(translationX, drawerTranslation).interpolate({\n          inputRange: [0, drawerWidth],\n          outputRange: [0, 1],\n          extrapolate: 'clamp'\n        });\n        const gestureOptions = {\n          useNativeDriver: props.useNativeAnimations\n        };\n        if (this.props.onDrawerSlide) {\n          gestureOptions.listener = ev => {\n            var _this$props$onDrawerS, _this$props;\n            const translationX = Math.floor(Math.abs(ev.nativeEvent.translationX));\n            const position = translationX / this.state.containerWidth;\n            (_this$props$onDrawerS = (_this$props = this.props).onDrawerSlide) === null || _this$props$onDrawerS === void 0 ? void 0 : _this$props$onDrawerS.call(_this$props, position);\n          };\n        }\n        this.onGestureEvent = _Animated.default.event([{\n          nativeEvent: {\n            translationX: dragXValue,\n            x: touchXValue\n          }\n        }], gestureOptions);\n      });\n      _defineProperty(this, \"handleContainerLayout\", ({\n        nativeEvent\n      }) => {\n        this.setState({\n          containerWidth: nativeEvent.layout.width\n        });\n      });\n      _defineProperty(this, \"emitStateChanged\", (newState, drawerWillShow) => {\n        var _this$props$onDrawerS2, _this$props2;\n        (_this$props$onDrawerS2 = (_this$props2 = this.props).onDrawerStateChanged) === null || _this$props$onDrawerS2 === void 0 ? void 0 : _this$props$onDrawerS2.call(_this$props2, newState, drawerWillShow);\n      });\n      _defineProperty(this, \"openingHandlerStateChange\", ({\n        nativeEvent\n      }) => {\n        if (nativeEvent.oldState === _State.State.ACTIVE) {\n          this.handleRelease({\n            nativeEvent\n          });\n        } else if (nativeEvent.state === _State.State.ACTIVE) {\n          this.emitStateChanged(DRAGGING, false);\n          this.setState({\n            drawerState: DRAGGING\n          });\n          if (this.props.keyboardDismissMode === 'on-drag') {\n            _Keyboard.default.dismiss();\n          }\n          if (this.props.hideStatusBar) {\n            _StatusBar.default.setHidden(true, this.props.statusBarAnimation || 'slide');\n          }\n        }\n      });\n      _defineProperty(this, \"onTapHandlerStateChange\", ({\n        nativeEvent\n      }) => {\n        if (this.drawerShown && nativeEvent.oldState === _State.State.ACTIVE && this.props.drawerLockMode !== 'locked-open') {\n          this.closeDrawer();\n        }\n      });\n      _defineProperty(this, \"handleRelease\", ({\n        nativeEvent\n      }) => {\n        const {\n          drawerWidth,\n          drawerPosition,\n          drawerType\n        } = this.props;\n        const {\n          containerWidth\n        } = this.state;\n        let {\n          translationX: dragX,\n          velocityX,\n          x: touchX\n        } = nativeEvent;\n        if (drawerPosition !== 'left') {\n          // See description in _updateAnimatedEvent about why events are flipped\n          // for right-side drawer\n          dragX = -dragX;\n          touchX = containerWidth - touchX;\n          velocityX = -velocityX;\n        }\n        const gestureStartX = touchX - dragX;\n        let dragOffsetBasedOnStart = 0;\n        if (drawerType === 'front') {\n          dragOffsetBasedOnStart = gestureStartX > drawerWidth ? gestureStartX - drawerWidth : 0;\n        }\n        const startOffsetX = dragX + dragOffsetBasedOnStart + (this.drawerShown ? drawerWidth : 0);\n        const projOffsetX = startOffsetX + DRAG_TOSS * velocityX;\n        const shouldOpen = projOffsetX > drawerWidth / 2;\n        if (shouldOpen) {\n          this.animateDrawer(startOffsetX, drawerWidth, velocityX);\n        } else {\n          this.animateDrawer(startOffsetX, 0, velocityX);\n        }\n      });\n      _defineProperty(this, \"updateShowing\", showing => {\n        var _this$accessibilityIs, _this$pointerEventsVi, _this$panGestureHandl;\n        this.drawerShown = showing;\n        (_this$accessibilityIs = this.accessibilityIsModalView.current) === null || _this$accessibilityIs === void 0 ? void 0 : _this$accessibilityIs.setNativeProps({\n          accessibilityViewIsModal: showing\n        });\n        (_this$pointerEventsVi = this.pointerEventsView.current) === null || _this$pointerEventsVi === void 0 ? void 0 : _this$pointerEventsVi.setNativeProps({\n          pointerEvents: showing ? 'auto' : 'none'\n        });\n        const {\n          drawerPosition,\n          minSwipeDistance,\n          edgeWidth\n        } = this.props;\n        const fromLeft = drawerPosition === 'left'; // gestureOrientation is 1 if the expected gesture is from left to right and\n        // -1 otherwise e.g. when drawer is on the left and is closed we expect left\n        // to right gesture, thus orientation will be 1.\n\n        const gestureOrientation = (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1); // When drawer is closed we want the hitSlop to be horizontally shorter than\n        // the container size by the value of SLOP. This will make it only activate\n        // when gesture happens not further than SLOP away from the edge\n\n        const hitSlop = fromLeft ? {\n          left: 0,\n          width: showing ? undefined : edgeWidth\n        } : {\n          right: 0,\n          width: showing ? undefined : edgeWidth\n        }; // @ts-ignore internal API, maybe could be fixed in handler types\n\n        (_this$panGestureHandl = this.panGestureHandler.current) === null || _this$panGestureHandl === void 0 ? void 0 : _this$panGestureHandl.setNativeProps({\n          hitSlop,\n          activeOffsetX: gestureOrientation * minSwipeDistance\n        });\n      });\n      _defineProperty(this, \"animateDrawer\", (fromValue, toValue, velocity, speed) => {\n        this.state.dragX.setValue(0);\n        this.state.touchX.setValue(this.props.drawerPosition === 'left' ? 0 : this.state.containerWidth);\n        if (fromValue != null) {\n          let nextFramePosition = fromValue;\n          if (this.props.useNativeAnimations) {\n            // When using native driver, we predict the next position of the\n            // animation because it takes one frame of a roundtrip to pass RELEASE\n            // event from native driver to JS before we can start animating. Without\n            // it, it is more noticable that the frame is dropped.\n            if (fromValue < toValue && velocity > 0) {\n              nextFramePosition = Math.min(fromValue + velocity / 60.0, toValue);\n            } else if (fromValue > toValue && velocity < 0) {\n              nextFramePosition = Math.max(fromValue + velocity / 60.0, toValue);\n            }\n          }\n          this.state.drawerTranslation.setValue(nextFramePosition);\n        }\n        const willShow = toValue !== 0;\n        this.updateShowing(willShow);\n        this.emitStateChanged(SETTLING, willShow);\n        this.setState({\n          drawerState: SETTLING\n        });\n        if (this.props.hideStatusBar) {\n          _StatusBar.default.setHidden(willShow, this.props.statusBarAnimation || 'slide');\n        }\n        _Animated.default.spring(this.state.drawerTranslation, {\n          velocity,\n          bounciness: 0,\n          toValue,\n          useNativeDriver: this.props.useNativeAnimations,\n          speed: speed !== null && speed !== void 0 ? speed : undefined\n        }).start(({\n          finished\n        }) => {\n          if (finished) {\n            this.emitStateChanged(IDLE, willShow);\n            this.setState({\n              drawerOpened: willShow\n            });\n            if (this.state.drawerState !== DRAGGING) {\n              // It's possilbe that user started drag while the drawer\n              // was settling, don't override state in this case\n              this.setState({\n                drawerState: IDLE\n              });\n            }\n            if (willShow) {\n              var _this$props$onDrawerO, _this$props3;\n              (_this$props$onDrawerO = (_this$props3 = this.props).onDrawerOpen) === null || _this$props$onDrawerO === void 0 ? void 0 : _this$props$onDrawerO.call(_this$props3);\n            } else {\n              var _this$props$onDrawerC, _this$props4;\n              (_this$props$onDrawerC = (_this$props4 = this.props).onDrawerClose) === null || _this$props$onDrawerC === void 0 ? void 0 : _this$props$onDrawerC.call(_this$props4);\n            }\n          }\n        });\n      });\n      _defineProperty(this, \"openDrawer\", (options = {}) => {\n        this.animateDrawer(\n        // TODO: decide if it should be null or undefined is the proper value\n        undefined, this.props.drawerWidth, options.velocity ? options.velocity : 0, options.speed); // We need to force the update, otherwise the overlay is not rerendered and\n        // it would not be clickable\n\n        this.forceUpdate();\n      });\n      _defineProperty(this, \"closeDrawer\", (options = {}) => {\n        // TODO: decide if it should be null or undefined is the proper value\n        this.animateDrawer(undefined, 0, options.velocity ? options.velocity : 0, options.speed); // We need to force the update, otherwise the overlay is not rerendered and\n        // it would be still clickable\n\n        this.forceUpdate();\n      });\n      _defineProperty(this, \"renderOverlay\", () => {\n        /* Overlay styles */\n        (0, _invariant.default)(this.openValue, 'should be set');\n        let overlayOpacity;\n        if (this.state.drawerState !== IDLE) {\n          overlayOpacity = this.openValue;\n        } else {\n          overlayOpacity = this.state.drawerOpened ? 1 : 0;\n        }\n        const dynamicOverlayStyles = {\n          opacity: overlayOpacity,\n          backgroundColor: this.props.overlayColor\n        };\n        return /*#__PURE__*/React.createElement(_TapGestureHandler.TapGestureHandler, {\n          onHandlerStateChange: this.onTapHandlerStateChange\n        }, /*#__PURE__*/React.createElement(_Animated.default.View, {\n          pointerEvents: this.drawerShown ? 'auto' : 'none',\n          ref: this.pointerEventsView,\n          style: [styles.overlay, dynamicOverlayStyles]\n        }));\n      });\n      _defineProperty(this, \"renderDrawer\", () => {\n        const {\n          drawerBackgroundColor,\n          drawerWidth,\n          drawerPosition,\n          drawerType,\n          drawerContainerStyle,\n          contentContainerStyle\n        } = this.props;\n        const fromLeft = drawerPosition === 'left';\n        const drawerSlide = drawerType !== 'back';\n        const containerSlide = drawerType !== 'front'; // We rely on row and row-reverse flex directions to position the drawer\n        // properly. Apparently for RTL these are flipped which requires us to use\n        // the opposite setting for the drawer to appear from left or right\n        // according to the drawerPosition prop\n\n        const reverseContentDirection = _I18nManager.default.isRTL ? fromLeft : !fromLeft;\n        const dynamicDrawerStyles = {\n          backgroundColor: drawerBackgroundColor,\n          width: drawerWidth\n        };\n        const openValue = this.openValue;\n        (0, _invariant.default)(openValue, 'should be set');\n        let containerStyles;\n        if (containerSlide) {\n          const containerTranslateX = openValue.interpolate({\n            inputRange: [0, 1],\n            outputRange: fromLeft ? [0, drawerWidth] : [0, -drawerWidth],\n            extrapolate: 'clamp'\n          });\n          containerStyles = {\n            transform: [{\n              translateX: containerTranslateX\n            }]\n          };\n        }\n        let drawerTranslateX = 0;\n        if (drawerSlide) {\n          const closedDrawerOffset = fromLeft ? -drawerWidth : drawerWidth;\n          if (this.state.drawerState !== IDLE) {\n            drawerTranslateX = openValue.interpolate({\n              inputRange: [0, 1],\n              outputRange: [closedDrawerOffset, 0],\n              extrapolate: 'clamp'\n            });\n          } else {\n            drawerTranslateX = this.state.drawerOpened ? 0 : closedDrawerOffset;\n          }\n        }\n        const drawerStyles = {\n          transform: [{\n            translateX: drawerTranslateX\n          }],\n          flexDirection: reverseContentDirection ? 'row-reverse' : 'row'\n        };\n        return /*#__PURE__*/React.createElement(_Animated.default.View, {\n          style: styles.main,\n          onLayout: this.handleContainerLayout\n        }, /*#__PURE__*/React.createElement(_Animated.default.View, {\n          style: [drawerType === 'front' ? styles.containerOnBack : styles.containerInFront, containerStyles, contentContainerStyle],\n          importantForAccessibility: this.drawerShown ? 'no-hide-descendants' : 'yes'\n        }, typeof this.props.children === 'function' ? this.props.children(this.openValue) : this.props.children, this.renderOverlay()), /*#__PURE__*/React.createElement(_Animated.default.View, {\n          pointerEvents: \"box-none\",\n          ref: this.accessibilityIsModalView,\n          accessibilityViewIsModal: this.drawerShown,\n          style: [styles.drawerContainer, drawerStyles, drawerContainerStyle]\n        }, /*#__PURE__*/React.createElement(_View.default, {\n          style: dynamicDrawerStyles\n        }, this.props.renderNavigationView(this.openValue))));\n      });\n      _defineProperty(this, \"setPanGestureRef\", ref => {\n        var _this$props$onGesture, _this$props5;\n\n        // TODO(TS): make sure it is OK taken from\n        // https://github.com/DefinitelyTyped/DefinitelyTyped/issues/31065#issuecomment-596081842\n        this.panGestureHandler.current = ref;\n        (_this$props$onGesture = (_this$props5 = this.props).onGestureRef) === null || _this$props$onGesture === void 0 ? void 0 : _this$props$onGesture.call(_this$props5, ref);\n      });\n      const _dragX = new _Animated.default.Value(0);\n      const _touchX = new _Animated.default.Value(0);\n      const _drawerTranslation = new _Animated.default.Value(0);\n      this.state = {\n        dragX: _dragX,\n        touchX: _touchX,\n        drawerTranslation: _drawerTranslation,\n        containerWidth: 0,\n        drawerState: IDLE,\n        drawerOpened: false\n      };\n      this.updateAnimatedEvent(_props, this.state);\n    }\n    shouldComponentUpdate(props, state) {\n      if (this.props.drawerPosition !== props.drawerPosition || this.props.drawerWidth !== props.drawerWidth || this.props.drawerType !== props.drawerType || this.state.containerWidth !== state.containerWidth) {\n        this.updateAnimatedEvent(props, state);\n      }\n      return true;\n    }\n    render() {\n      const {\n        drawerPosition,\n        drawerLockMode,\n        edgeWidth,\n        minSwipeDistance\n      } = this.props;\n      const fromLeft = drawerPosition === 'left'; // gestureOrientation is 1 if the expected gesture is from left to right and\n      // -1 otherwise e.g. when drawer is on the left and is closed we expect left\n      // to right gesture, thus orientation will be 1.\n\n      const gestureOrientation = (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1); // When drawer is closed we want the hitSlop to be horizontally shorter than\n      // the container size by the value of SLOP. This will make it only activate\n      // when gesture happens not further than SLOP away from the edge\n\n      const hitSlop = fromLeft ? {\n        left: 0,\n        width: this.drawerShown ? undefined : edgeWidth\n      } : {\n        right: 0,\n        width: this.drawerShown ? undefined : edgeWidth\n      };\n      return /*#__PURE__*/React.createElement(_PanGestureHandler.PanGestureHandler // @ts-ignore could be fixed in handler types\n      , {\n        userSelect: this.props.userSelect,\n        activeCursor: this.props.activeCursor,\n        mouseButton: this.props.mouseButton,\n        enableContextMenu: this.props.enableContextMenu,\n        ref: this.setPanGestureRef,\n        hitSlop: hitSlop,\n        activeOffsetX: gestureOrientation * minSwipeDistance,\n        failOffsetY: [-15, 15],\n        onGestureEvent: this.onGestureEvent,\n        onHandlerStateChange: this.openingHandlerStateChange,\n        enableTrackpadTwoFingerGesture: this.props.enableTrackpadTwoFingerGesture,\n        enabled: drawerLockMode !== 'locked-closed' && drawerLockMode !== 'locked-open'\n      }, this.renderDrawer());\n    }\n  }\n  exports.default = DrawerLayout;\n  _defineProperty(DrawerLayout, \"defaultProps\", {\n    drawerWidth: 200,\n    drawerPosition: 'left',\n    useNativeAnimations: true,\n    drawerType: 'front',\n    edgeWidth: 20,\n    minSwipeDistance: 3,\n    overlayColor: 'rgba(0, 0, 0, 0.7)',\n    drawerLockMode: 'unlocked',\n    enableTrackpadTwoFingerGesture: false\n  });\n  _defineProperty(DrawerLayout, \"positions\", {\n    Left: 'left',\n    Right: 'right'\n  });\n  const styles = _StyleSheet.default.create({\n    drawerContainer: {\n      ..._StyleSheet.default.absoluteFillObject,\n      zIndex: 1001,\n      flexDirection: 'row'\n    },\n    containerInFront: {\n      ..._StyleSheet.default.absoluteFillObject,\n      zIndex: 1002\n    },\n    containerOnBack: {\n      ..._StyleSheet.default.absoluteFillObject\n    },\n    main: {\n      flex: 1,\n      zIndex: 0,\n      overflow: 'hidden'\n    },\n    overlay: {\n      ..._StyleSheet.default.absoluteFillObject,\n      zIndex: 1000\n    }\n  });\n});","lineCount":528,"map":[[7,2,10,0],[7,6,10,0,"_react"],[7,12,10,0],[7,15,10,0,"_interopRequireWildcard"],[7,38,10,0],[7,39,10,0,"require"],[7,46,10,0],[7,47,10,0,"_dependencyMap"],[7,61,10,0],[8,2,10,31],[8,6,10,31,"React"],[8,11,10,31],[8,14,10,31,"_react"],[8,20,10,31],[9,2,12,0],[9,6,12,0,"_invariant"],[9,16,12,0],[9,19,12,0,"_interopRequireDefault"],[9,41,12,0],[9,42,12,0,"require"],[9,49,12,0],[9,50,12,0,"_dependencyMap"],[9,64,12,0],[10,2,12,34],[10,6,12,34,"_Animated"],[10,15,12,34],[10,18,12,34,"_interopRequireDefault"],[10,40,12,34],[10,41,12,34,"require"],[10,48,12,34],[10,49,12,34,"_dependencyMap"],[10,63,12,34],[11,2,12,34],[11,6,12,34,"_StyleSheet"],[11,17,12,34],[11,20,12,34,"_interopRequireDefault"],[11,42,12,34],[11,43,12,34,"require"],[11,50,12,34],[11,51,12,34,"_dependencyMap"],[11,65,12,34],[12,2,12,34],[12,6,12,34,"_View"],[12,11,12,34],[12,14,12,34,"_interopRequireDefault"],[12,36,12,34],[12,37,12,34,"require"],[12,44,12,34],[12,45,12,34,"_dependencyMap"],[12,59,12,34],[13,2,12,34],[13,6,12,34,"_Keyboard"],[13,15,12,34],[13,18,12,34,"_interopRequireDefault"],[13,40,12,34],[13,41,12,34,"require"],[13,48,12,34],[13,49,12,34,"_dependencyMap"],[13,63,12,34],[14,2,12,34],[14,6,12,34,"_StatusBar"],[14,16,12,34],[14,19,12,34,"_interopRequireDefault"],[14,41,12,34],[14,42,12,34,"require"],[14,49,12,34],[14,50,12,34,"_dependencyMap"],[14,64,12,34],[15,2,12,34],[15,6,12,34,"_I18nManager"],[15,18,12,34],[15,21,12,34,"_interopRequireDefault"],[15,43,12,34],[15,44,12,34,"require"],[15,51,12,34],[15,52,12,34,"_dependencyMap"],[15,66,12,34],[16,2,14,0],[16,6,14,0,"_PanGestureHandler"],[16,24,14,0],[16,27,14,0,"require"],[16,34,14,0],[16,35,14,0,"_dependencyMap"],[16,49,14,0],[17,2,15,0],[17,6,15,0,"_TapGestureHandler"],[17,24,15,0],[17,27,15,0,"require"],[17,34,15,0],[17,35,15,0,"_dependencyMap"],[17,49,15,0],[18,2,16,0],[18,6,16,0,"_State"],[18,12,16,0],[18,15,16,0,"require"],[18,22,16,0],[18,23,16,0,"_dependencyMap"],[18,37,16,0],[19,2,16,33],[19,11,16,33,"_interopRequireWildcard"],[19,35,16,33,"e"],[19,36,16,33],[19,38,16,33,"t"],[19,39,16,33],[19,68,16,33,"WeakMap"],[19,75,16,33],[19,81,16,33,"r"],[19,82,16,33],[19,89,16,33,"WeakMap"],[19,96,16,33],[19,100,16,33,"n"],[19,101,16,33],[19,108,16,33,"WeakMap"],[19,115,16,33],[19,127,16,33,"_interopRequireWildcard"],[19,150,16,33],[19,162,16,33,"_interopRequireWildcard"],[19,163,16,33,"e"],[19,164,16,33],[19,166,16,33,"t"],[19,167,16,33],[19,176,16,33,"t"],[19,177,16,33],[19,181,16,33,"e"],[19,182,16,33],[19,186,16,33,"e"],[19,187,16,33],[19,188,16,33,"__esModule"],[19,198,16,33],[19,207,16,33,"e"],[19,208,16,33],[19,214,16,33,"o"],[19,215,16,33],[19,217,16,33,"i"],[19,218,16,33],[19,220,16,33,"f"],[19,221,16,33],[19,226,16,33,"__proto__"],[19,235,16,33],[19,243,16,33,"default"],[19,250,16,33],[19,252,16,33,"e"],[19,253,16,33],[19,270,16,33,"e"],[19,271,16,33],[19,294,16,33,"e"],[19,295,16,33],[19,320,16,33,"e"],[19,321,16,33],[19,330,16,33,"f"],[19,331,16,33],[19,337,16,33,"o"],[19,338,16,33],[19,341,16,33,"t"],[19,342,16,33],[19,345,16,33,"n"],[19,346,16,33],[19,349,16,33,"r"],[19,350,16,33],[19,358,16,33,"o"],[19,359,16,33],[19,360,16,33,"has"],[19,363,16,33],[19,364,16,33,"e"],[19,365,16,33],[19,375,16,33,"o"],[19,376,16,33],[19,377,16,33,"get"],[19,380,16,33],[19,381,16,33,"e"],[19,382,16,33],[19,385,16,33,"o"],[19,386,16,33],[19,387,16,33,"set"],[19,390,16,33],[19,391,16,33,"e"],[19,392,16,33],[19,394,16,33,"f"],[19,395,16,33],[19,411,16,33,"t"],[19,412,16,33],[19,416,16,33,"e"],[19,417,16,33],[19,433,16,33,"t"],[19,434,16,33],[19,441,16,33,"hasOwnProperty"],[19,455,16,33],[19,456,16,33,"call"],[19,460,16,33],[19,461,16,33,"e"],[19,462,16,33],[19,464,16,33,"t"],[19,465,16,33],[19,472,16,33,"i"],[19,473,16,33],[19,477,16,33,"o"],[19,478,16,33],[19,481,16,33,"Object"],[19,487,16,33],[19,488,16,33,"defineProperty"],[19,502,16,33],[19,507,16,33,"Object"],[19,513,16,33],[19,514,16,33,"getOwnPropertyDescriptor"],[19,538,16,33],[19,539,16,33,"e"],[19,540,16,33],[19,542,16,33,"t"],[19,543,16,33],[19,550,16,33,"i"],[19,551,16,33],[19,552,16,33,"get"],[19,555,16,33],[19,559,16,33,"i"],[19,560,16,33],[19,561,16,33,"set"],[19,564,16,33],[19,568,16,33,"o"],[19,569,16,33],[19,570,16,33,"f"],[19,571,16,33],[19,573,16,33,"t"],[19,574,16,33],[19,576,16,33,"i"],[19,577,16,33],[19,581,16,33,"f"],[19,582,16,33],[19,583,16,33,"t"],[19,584,16,33],[19,588,16,33,"e"],[19,589,16,33],[19,590,16,33,"t"],[19,591,16,33],[19,602,16,33,"f"],[19,603,16,33],[19,608,16,33,"e"],[19,609,16,33],[19,611,16,33,"t"],[19,612,16,33],[20,2,1,0],[20,11,1,9,"_defineProperty"],[20,26,1,24,"_defineProperty"],[20,27,1,25,"obj"],[20,30,1,28],[20,32,1,30,"key"],[20,35,1,33],[20,37,1,35,"value"],[20,42,1,40],[20,44,1,42],[21,4,1,44],[21,8,1,48,"key"],[21,11,1,51],[21,15,1,55,"obj"],[21,18,1,58],[21,20,1,60],[22,6,1,62,"Object"],[22,12,1,68],[22,13,1,69,"defineProperty"],[22,27,1,83],[22,28,1,84,"obj"],[22,31,1,87],[22,33,1,89,"key"],[22,36,1,92],[22,38,1,94],[23,8,1,96,"value"],[23,13,1,101],[23,15,1,103,"value"],[23,20,1,108],[24,8,1,110,"enumerable"],[24,18,1,120],[24,20,1,122],[24,24,1,126],[25,8,1,128,"configurable"],[25,20,1,140],[25,22,1,142],[25,26,1,146],[26,8,1,148,"writable"],[26,16,1,156],[26,18,1,158],[27,6,1,163],[27,7,1,164],[27,8,1,165],[28,4,1,167],[28,5,1,168],[28,11,1,174],[29,6,1,176,"obj"],[29,9,1,179],[29,10,1,180,"key"],[29,13,1,183],[29,14,1,184],[29,17,1,187,"value"],[29,22,1,192],[30,4,1,194],[31,4,1,196],[31,11,1,203,"obj"],[31,14,1,206],[32,2,1,208],[34,2,3,0],[35,2,4,0],[36,2,5,0],[37,2,6,0],[38,2,7,0],[39,2,8,0],[40,2,9,0],[42,2,17,0],[42,8,17,6,"DRAG_TOSS"],[42,17,17,15],[42,20,17,18],[42,24,17,22],[43,2,18,0],[43,8,18,6,"IDLE"],[43,12,18,10],[43,15,18,13],[43,21,18,19],[44,2,19,0],[44,8,19,6,"DRAGGING"],[44,16,19,14],[44,19,19,17],[44,29,19,27],[45,2,20,0],[45,8,20,6,"SETTLING"],[45,16,20,14],[45,19,20,17],[45,29,20,27],[46,2,21,0],[47,0,22,0],[48,0,23,0],[50,2,25,0],[51,0,26,0],[52,0,27,0],[53,2,28,15],[53,8,28,21,"DrawerLayout"],[53,20,28,33],[53,29,28,42,"Component"],[53,45,28,51],[53,46,28,52],[54,4,29,2,"constructor"],[54,15,29,13,"constructor"],[54,16,29,14,"_props"],[54,22,29,20],[54,24,29,22],[55,6,30,4],[55,11,30,9],[55,12,30,10,"_props"],[55,18,30,16],[55,19,30,17],[56,6,32,4,"_defineProperty"],[56,21,32,19],[56,22,32,20],[56,26,32,24],[56,28,32,26],[56,39,32,37],[56,41,32,39],[56,46,32,44],[56,47,32,45],[56,48,32,46],[57,6,34,4,"_defineProperty"],[57,21,34,19],[57,22,34,20],[57,26,34,24],[57,28,34,26],[57,44,34,42],[57,46,34,44],[57,51,34,49],[57,52,34,50],[57,53,34,51],[58,6,36,4,"_defineProperty"],[58,21,36,19],[58,22,36,20],[58,26,36,24],[58,28,36,26],[58,54,36,52],[58,56,36,54],[58,69,36,67,"React"],[58,74,36,72],[58,75,36,73,"createRef"],[58,84,36,82],[58,85,36,83],[58,86,36,84],[58,87,36,85],[59,6,38,4,"_defineProperty"],[59,21,38,19],[59,22,38,20],[59,26,38,24],[59,28,38,26],[59,47,38,45],[59,49,38,47],[59,62,38,60,"React"],[59,67,38,65],[59,68,38,66,"createRef"],[59,77,38,75],[59,78,38,76],[59,79,38,77],[59,80,38,78],[60,6,40,4,"_defineProperty"],[60,21,40,19],[60,22,40,20],[60,26,40,24],[60,28,40,26],[60,47,40,45],[60,49,40,47],[60,62,40,60,"React"],[60,67,40,65],[60,68,40,66,"createRef"],[60,77,40,75],[60,78,40,76],[60,79,40,77],[60,80,40,78],[61,6,42,4,"_defineProperty"],[61,21,42,19],[61,22,42,20],[61,26,42,24],[61,28,42,26],[61,41,42,39],[61,43,42,41],[61,48,42,46],[61,49,42,47],[62,6,44,4,"_defineProperty"],[62,21,44,19],[62,22,44,20],[62,26,44,24],[62,28,44,26],[62,49,44,47],[62,51,44,49],[62,52,44,50,"props"],[62,57,44,55],[62,59,44,57,"state"],[62,64,44,62],[62,69,44,67],[63,8,45,6],[64,8,46,6],[64,14,46,12],[65,10,47,8,"drawerPosition"],[65,24,47,22],[66,10,48,8,"drawerWidth"],[66,21,48,19],[67,10,49,8,"drawerType"],[68,8,50,6],[68,9,50,7],[68,12,50,10,"props"],[68,17,50,15],[69,8,51,6],[69,14,51,12],[70,10,52,8,"dragX"],[70,15,52,13],[70,17,52,15,"dragXValue"],[70,27,52,25],[71,10,53,8,"touchX"],[71,16,53,14],[71,18,53,16,"touchXValue"],[71,29,53,27],[72,10,54,8,"drawerTranslation"],[72,27,54,25],[73,10,55,8,"containerWidth"],[74,8,56,6],[74,9,56,7],[74,12,56,10,"state"],[74,17,56,15],[75,8,57,6],[75,12,57,10,"dragX"],[75,17,57,15],[75,20,57,18,"dragXValue"],[75,30,57,28],[76,8,58,6],[76,12,58,10,"touchX"],[76,18,58,16],[76,21,58,19,"touchXValue"],[76,32,58,30],[77,8,60,6],[77,12,60,10,"drawerPosition"],[77,26,60,24],[77,31,60,29],[77,37,60,35],[77,39,60,37],[78,10,61,8],[79,10,62,8],[80,10,63,8],[81,10,64,8],[82,10,65,8],[83,10,66,8],[84,10,67,8,"dragX"],[84,15,67,13],[84,18,67,16,"Animated"],[84,35,67,24],[84,36,67,25,"multiply"],[84,44,67,33],[84,45,67,34],[84,49,67,38,"Animated"],[84,66,67,46],[84,67,67,47,"Value"],[84,72,67,52],[84,73,67,53],[84,74,67,54],[84,75,67,55],[84,76,67,56],[84,78,67,58,"dragXValue"],[84,88,67,68],[84,89,67,69],[84,90,67,70],[84,91,67,71],[86,10,69,8,"touchX"],[86,16,69,14],[86,19,69,17,"Animated"],[86,36,69,25],[86,37,69,26,"add"],[86,40,69,29],[86,41,69,30],[86,45,69,34,"Animated"],[86,62,69,42],[86,63,69,43,"Value"],[86,68,69,48],[86,69,69,49,"containerWidth"],[86,83,69,63],[86,84,69,64],[86,86,69,66,"Animated"],[86,103,69,74],[86,104,69,75,"multiply"],[86,112,69,83],[86,113,69,84],[86,117,69,88,"Animated"],[86,134,69,96],[86,135,69,97,"Value"],[86,140,69,102],[86,141,69,103],[86,142,69,104],[86,143,69,105],[86,144,69,106],[86,146,69,108,"touchXValue"],[86,157,69,119],[86,158,69,120],[86,159,69,121],[86,160,69,122],[86,161,69,123],[88,10,71,8,"touchXValue"],[88,21,71,19],[88,22,71,20,"setValue"],[88,30,71,28],[88,31,71,29,"containerWidth"],[88,45,71,43],[88,46,71,44],[89,8,72,6],[89,9,72,7],[89,15,72,13],[90,10,73,8,"touchXValue"],[90,21,73,19],[90,22,73,20,"setValue"],[90,30,73,28],[90,31,73,29],[90,32,73,30],[90,33,73,31],[91,8,74,6],[91,9,74,7],[91,10,74,8],[92,8,75,6],[93,8,76,6],[94,8,77,6],[95,8,78,6],[96,8,79,6],[97,8,80,6],[98,8,81,6],[99,8,82,6],[100,8,83,6],[101,8,84,6],[102,8,85,6],[103,8,86,6],[104,8,87,6],[105,8,88,6],[106,8,89,6],[107,8,90,6],[108,8,91,6],[109,8,92,6],[110,8,93,6],[111,8,94,6],[112,8,95,6],[113,8,96,6],[114,8,97,6],[115,8,98,6],[117,8,101,6],[117,12,101,10,"translationX"],[117,24,101,22],[117,27,101,25,"dragX"],[117,32,101,30],[118,8,103,6],[118,12,103,10,"drawerType"],[118,22,103,20],[118,27,103,25],[118,34,103,32],[118,36,103,34],[119,10,104,8],[119,16,104,14,"startPositionX"],[119,30,104,28],[119,33,104,31,"Animated"],[119,50,104,39],[119,51,104,40,"add"],[119,54,104,43],[119,55,104,44,"touchX"],[119,61,104,50],[119,63,104,52,"Animated"],[119,80,104,60],[119,81,104,61,"multiply"],[119,89,104,69],[119,90,104,70],[119,94,104,74,"Animated"],[119,111,104,82],[119,112,104,83,"Value"],[119,117,104,88],[119,118,104,89],[119,119,104,90],[119,120,104,91],[119,121,104,92],[119,123,104,94,"dragX"],[119,128,104,99],[119,129,104,100],[119,130,104,101],[120,10,105,8],[120,16,105,14,"dragOffsetFromOnStartPosition"],[120,45,105,43],[120,48,105,46,"startPositionX"],[120,62,105,60],[120,63,105,61,"interpolate"],[120,74,105,72],[120,75,105,73],[121,12,106,10,"inputRange"],[121,22,106,20],[121,24,106,22],[121,25,106,23,"drawerWidth"],[121,36,106,34],[121,39,106,37],[121,40,106,38],[121,42,106,40,"drawerWidth"],[121,53,106,51],[121,55,106,53,"drawerWidth"],[121,66,106,64],[121,69,106,67],[121,70,106,68],[121,71,106,69],[122,12,107,10,"outputRange"],[122,23,107,21],[122,25,107,23],[122,26,107,24],[122,27,107,25],[122,29,107,27],[122,30,107,28],[122,32,107,30],[122,33,107,31],[123,10,108,8],[123,11,108,9],[123,12,108,10],[124,10,109,8,"translationX"],[124,22,109,20],[124,25,109,23,"Animated"],[124,42,109,31],[124,43,109,32,"add"],[124,46,109,35],[124,47,109,36,"dragX"],[124,52,109,41],[124,54,109,43,"dragOffsetFromOnStartPosition"],[124,83,109,72],[124,84,109,73],[124,85,109,74],[124,86,109,75],[125,8,110,6],[126,8,112,6],[126,12,112,10],[126,13,112,11,"openValue"],[126,22,112,20],[126,25,112,23,"Animated"],[126,42,112,31],[126,43,112,32,"add"],[126,46,112,35],[126,47,112,36,"translationX"],[126,59,112,48],[126,61,112,50,"drawerTranslation"],[126,78,112,67],[126,79,112,68],[126,80,112,69,"interpolate"],[126,91,112,80],[126,92,112,81],[127,10,113,8,"inputRange"],[127,20,113,18],[127,22,113,20],[127,23,113,21],[127,24,113,22],[127,26,113,24,"drawerWidth"],[127,37,113,35],[127,38,113,36],[128,10,114,8,"outputRange"],[128,21,114,19],[128,23,114,21],[128,24,114,22],[128,25,114,23],[128,27,114,25],[128,28,114,26],[128,29,114,27],[129,10,115,8,"extrapolate"],[129,21,115,19],[129,23,115,21],[130,8,116,6],[130,9,116,7],[130,10,116,8],[131,8,117,6],[131,14,117,12,"gestureOptions"],[131,28,117,26],[131,31,117,29],[132,10,118,8,"useNativeDriver"],[132,25,118,23],[132,27,118,25,"props"],[132,32,118,30],[132,33,118,31,"useNativeAnimations"],[133,8,119,6],[133,9,119,7],[134,8,121,6],[134,12,121,10],[134,16,121,14],[134,17,121,15,"props"],[134,22,121,20],[134,23,121,21,"onDrawerSlide"],[134,36,121,34],[134,38,121,36],[135,10,122,8,"gestureOptions"],[135,24,122,22],[135,25,122,23,"listener"],[135,33,122,31],[135,36,122,34,"ev"],[135,38,122,36],[135,42,122,40],[136,12,123,10],[136,16,123,14,"_this$props$onDrawerS"],[136,37,123,35],[136,39,123,37,"_this$props"],[136,50,123,48],[137,12,125,10],[137,18,125,16,"translationX"],[137,30,125,28],[137,33,125,31,"Math"],[137,37,125,35],[137,38,125,36,"floor"],[137,43,125,41],[137,44,125,42,"Math"],[137,48,125,46],[137,49,125,47,"abs"],[137,52,125,50],[137,53,125,51,"ev"],[137,55,125,53],[137,56,125,54,"nativeEvent"],[137,67,125,65],[137,68,125,66,"translationX"],[137,80,125,78],[137,81,125,79],[137,82,125,80],[138,12,126,10],[138,18,126,16,"position"],[138,26,126,24],[138,29,126,27,"translationX"],[138,41,126,39],[138,44,126,42],[138,48,126,46],[138,49,126,47,"state"],[138,54,126,52],[138,55,126,53,"containerWidth"],[138,69,126,67],[139,12,127,10],[139,13,127,11,"_this$props$onDrawerS"],[139,34,127,32],[139,37,127,35],[139,38,127,36,"_this$props"],[139,49,127,47],[139,52,127,50],[139,56,127,54],[139,57,127,55,"props"],[139,62,127,60],[139,64,127,62,"onDrawerSlide"],[139,77,127,75],[139,83,127,81],[139,87,127,85],[139,91,127,89,"_this$props$onDrawerS"],[139,112,127,110],[139,117,127,115],[139,122,127,120],[139,123,127,121],[139,126,127,124],[139,131,127,129],[139,132,127,130],[139,135,127,133,"_this$props$onDrawerS"],[139,156,127,154],[139,157,127,155,"call"],[139,161,127,159],[139,162,127,160,"_this$props"],[139,173,127,171],[139,175,127,173,"position"],[139,183,127,181],[139,184,127,182],[140,10,128,8],[140,11,128,9],[141,8,129,6],[142,8,131,6],[142,12,131,10],[142,13,131,11,"onGestureEvent"],[142,27,131,25],[142,30,131,28,"Animated"],[142,47,131,36],[142,48,131,37,"event"],[142,53,131,42],[142,54,131,43],[142,55,131,44],[143,10,132,8,"nativeEvent"],[143,21,132,19],[143,23,132,21],[144,12,133,10,"translationX"],[144,24,133,22],[144,26,133,24,"dragXValue"],[144,36,133,34],[145,12,134,10,"x"],[145,13,134,11],[145,15,134,13,"touchXValue"],[146,10,135,8],[147,8,136,6],[147,9,136,7],[147,10,136,8],[147,12,136,10,"gestureOptions"],[147,26,136,24],[147,27,136,25],[148,6,137,4],[148,7,137,5],[148,8,137,6],[149,6,139,4,"_defineProperty"],[149,21,139,19],[149,22,139,20],[149,26,139,24],[149,28,139,26],[149,51,139,49],[149,53,139,51],[149,54,139,52],[150,8,140,6,"nativeEvent"],[151,6,141,4],[151,7,141,5],[151,12,141,10],[152,8,142,6],[152,12,142,10],[152,13,142,11,"setState"],[152,21,142,19],[152,22,142,20],[153,10,143,8,"containerWidth"],[153,24,143,22],[153,26,143,24,"nativeEvent"],[153,37,143,35],[153,38,143,36,"layout"],[153,44,143,42],[153,45,143,43,"width"],[154,8,144,6],[154,9,144,7],[154,10,144,8],[155,6,145,4],[155,7,145,5],[155,8,145,6],[156,6,147,4,"_defineProperty"],[156,21,147,19],[156,22,147,20],[156,26,147,24],[156,28,147,26],[156,46,147,44],[156,48,147,46],[156,49,147,47,"newState"],[156,57,147,55],[156,59,147,57,"drawerWillShow"],[156,73,147,71],[156,78,147,76],[157,8,148,6],[157,12,148,10,"_this$props$onDrawerS2"],[157,34,148,32],[157,36,148,34,"_this$props2"],[157,48,148,46],[158,8,150,6],[158,9,150,7,"_this$props$onDrawerS2"],[158,31,150,29],[158,34,150,32],[158,35,150,33,"_this$props2"],[158,47,150,45],[158,50,150,48],[158,54,150,52],[158,55,150,53,"props"],[158,60,150,58],[158,62,150,60,"onDrawerStateChanged"],[158,82,150,80],[158,88,150,86],[158,92,150,90],[158,96,150,94,"_this$props$onDrawerS2"],[158,118,150,116],[158,123,150,121],[158,128,150,126],[158,129,150,127],[158,132,150,130],[158,137,150,135],[158,138,150,136],[158,141,150,139,"_this$props$onDrawerS2"],[158,163,150,161],[158,164,150,162,"call"],[158,168,150,166],[158,169,150,167,"_this$props2"],[158,181,150,179],[158,183,150,181,"newState"],[158,191,150,189],[158,193,150,191,"drawerWillShow"],[158,207,150,205],[158,208,150,206],[159,6,151,4],[159,7,151,5],[159,8,151,6],[160,6,153,4,"_defineProperty"],[160,21,153,19],[160,22,153,20],[160,26,153,24],[160,28,153,26],[160,55,153,53],[160,57,153,55],[160,58,153,56],[161,8,154,6,"nativeEvent"],[162,6,155,4],[162,7,155,5],[162,12,155,10],[163,8,156,6],[163,12,156,10,"nativeEvent"],[163,23,156,21],[163,24,156,22,"oldState"],[163,32,156,30],[163,37,156,35,"State"],[163,49,156,40],[163,50,156,41,"ACTIVE"],[163,56,156,47],[163,58,156,49],[164,10,157,8],[164,14,157,12],[164,15,157,13,"handleRelease"],[164,28,157,26],[164,29,157,27],[165,12,158,10,"nativeEvent"],[166,10,159,8],[166,11,159,9],[166,12,159,10],[167,8,160,6],[167,9,160,7],[167,15,160,13],[167,19,160,17,"nativeEvent"],[167,30,160,28],[167,31,160,29,"state"],[167,36,160,34],[167,41,160,39,"State"],[167,53,160,44],[167,54,160,45,"ACTIVE"],[167,60,160,51],[167,62,160,53],[168,10,161,8],[168,14,161,12],[168,15,161,13,"emitStateChanged"],[168,31,161,29],[168,32,161,30,"DRAGGING"],[168,40,161,38],[168,42,161,40],[168,47,161,45],[168,48,161,46],[169,10,162,8],[169,14,162,12],[169,15,162,13,"setState"],[169,23,162,21],[169,24,162,22],[170,12,163,10,"drawerState"],[170,23,163,21],[170,25,163,23,"DRAGGING"],[171,10,164,8],[171,11,164,9],[171,12,164,10],[172,10,166,8],[172,14,166,12],[172,18,166,16],[172,19,166,17,"props"],[172,24,166,22],[172,25,166,23,"keyboardDismissMode"],[172,44,166,42],[172,49,166,47],[172,58,166,56],[172,60,166,58],[173,12,167,10,"Keyboard"],[173,29,167,18],[173,30,167,19,"dismiss"],[173,37,167,26],[173,38,167,27],[173,39,167,28],[174,10,168,8],[175,10,170,8],[175,14,170,12],[175,18,170,16],[175,19,170,17,"props"],[175,24,170,22],[175,25,170,23,"hideStatusBar"],[175,38,170,36],[175,40,170,38],[176,12,171,10,"StatusBar"],[176,30,171,19],[176,31,171,20,"setHidden"],[176,40,171,29],[176,41,171,30],[176,45,171,34],[176,47,171,36],[176,51,171,40],[176,52,171,41,"props"],[176,57,171,46],[176,58,171,47,"statusBarAnimation"],[176,76,171,65],[176,80,171,69],[176,87,171,76],[176,88,171,77],[177,10,172,8],[178,8,173,6],[179,6,174,4],[179,7,174,5],[179,8,174,6],[180,6,176,4,"_defineProperty"],[180,21,176,19],[180,22,176,20],[180,26,176,24],[180,28,176,26],[180,53,176,51],[180,55,176,53],[180,56,176,54],[181,8,177,6,"nativeEvent"],[182,6,178,4],[182,7,178,5],[182,12,178,10],[183,8,179,6],[183,12,179,10],[183,16,179,14],[183,17,179,15,"drawerShown"],[183,28,179,26],[183,32,179,30,"nativeEvent"],[183,43,179,41],[183,44,179,42,"oldState"],[183,52,179,50],[183,57,179,55,"State"],[183,69,179,60],[183,70,179,61,"ACTIVE"],[183,76,179,67],[183,80,179,71],[183,84,179,75],[183,85,179,76,"props"],[183,90,179,81],[183,91,179,82,"drawerLockMode"],[183,105,179,96],[183,110,179,101],[183,123,179,114],[183,125,179,116],[184,10,180,8],[184,14,180,12],[184,15,180,13,"closeDrawer"],[184,26,180,24],[184,27,180,25],[184,28,180,26],[185,8,181,6],[186,6,182,4],[186,7,182,5],[186,8,182,6],[187,6,184,4,"_defineProperty"],[187,21,184,19],[187,22,184,20],[187,26,184,24],[187,28,184,26],[187,43,184,41],[187,45,184,43],[187,46,184,44],[188,8,185,6,"nativeEvent"],[189,6,186,4],[189,7,186,5],[189,12,186,10],[190,8,187,6],[190,14,187,12],[191,10,188,8,"drawerWidth"],[191,21,188,19],[192,10,189,8,"drawerPosition"],[192,24,189,22],[193,10,190,8,"drawerType"],[194,8,191,6],[194,9,191,7],[194,12,191,10],[194,16,191,14],[194,17,191,15,"props"],[194,22,191,20],[195,8,192,6],[195,14,192,12],[196,10,193,8,"containerWidth"],[197,8,194,6],[197,9,194,7],[197,12,194,10],[197,16,194,14],[197,17,194,15,"state"],[197,22,194,20],[198,8,195,6],[198,12,195,10],[199,10,196,8,"translationX"],[199,22,196,20],[199,24,196,22,"dragX"],[199,29,196,27],[200,10,197,8,"velocityX"],[200,19,197,17],[201,10,198,8,"x"],[201,11,198,9],[201,13,198,11,"touchX"],[202,8,199,6],[202,9,199,7],[202,12,199,10,"nativeEvent"],[202,23,199,21],[203,8,201,6],[203,12,201,10,"drawerPosition"],[203,26,201,24],[203,31,201,29],[203,37,201,35],[203,39,201,37],[204,10,202,8],[205,10,203,8],[206,10,204,8,"dragX"],[206,15,204,13],[206,18,204,16],[206,19,204,17,"dragX"],[206,24,204,22],[207,10,205,8,"touchX"],[207,16,205,14],[207,19,205,17,"containerWidth"],[207,33,205,31],[207,36,205,34,"touchX"],[207,42,205,40],[208,10,206,8,"velocityX"],[208,19,206,17],[208,22,206,20],[208,23,206,21,"velocityX"],[208,32,206,30],[209,8,207,6],[210,8,209,6],[210,14,209,12,"gestureStartX"],[210,27,209,25],[210,30,209,28,"touchX"],[210,36,209,34],[210,39,209,37,"dragX"],[210,44,209,42],[211,8,210,6],[211,12,210,10,"dragOffsetBasedOnStart"],[211,34,210,32],[211,37,210,35],[211,38,210,36],[212,8,212,6],[212,12,212,10,"drawerType"],[212,22,212,20],[212,27,212,25],[212,34,212,32],[212,36,212,34],[213,10,213,8,"dragOffsetBasedOnStart"],[213,32,213,30],[213,35,213,33,"gestureStartX"],[213,48,213,46],[213,51,213,49,"drawerWidth"],[213,62,213,60],[213,65,213,63,"gestureStartX"],[213,78,213,76],[213,81,213,79,"drawerWidth"],[213,92,213,90],[213,95,213,93],[213,96,213,94],[214,8,214,6],[215,8,216,6],[215,14,216,12,"startOffsetX"],[215,26,216,24],[215,29,216,27,"dragX"],[215,34,216,32],[215,37,216,35,"dragOffsetBasedOnStart"],[215,59,216,57],[215,63,216,61],[215,67,216,65],[215,68,216,66,"drawerShown"],[215,79,216,77],[215,82,216,80,"drawerWidth"],[215,93,216,91],[215,96,216,94],[215,97,216,95],[215,98,216,96],[216,8,217,6],[216,14,217,12,"projOffsetX"],[216,25,217,23],[216,28,217,26,"startOffsetX"],[216,40,217,38],[216,43,217,41,"DRAG_TOSS"],[216,52,217,50],[216,55,217,53,"velocityX"],[216,64,217,62],[217,8,218,6],[217,14,218,12,"shouldOpen"],[217,24,218,22],[217,27,218,25,"projOffsetX"],[217,38,218,36],[217,41,218,39,"drawerWidth"],[217,52,218,50],[217,55,218,53],[217,56,218,54],[218,8,220,6],[218,12,220,10,"shouldOpen"],[218,22,220,20],[218,24,220,22],[219,10,221,8],[219,14,221,12],[219,15,221,13,"animateDrawer"],[219,28,221,26],[219,29,221,27,"startOffsetX"],[219,41,221,39],[219,43,221,41,"drawerWidth"],[219,54,221,52],[219,56,221,54,"velocityX"],[219,65,221,63],[219,66,221,64],[220,8,222,6],[220,9,222,7],[220,15,222,13],[221,10,223,8],[221,14,223,12],[221,15,223,13,"animateDrawer"],[221,28,223,26],[221,29,223,27,"startOffsetX"],[221,41,223,39],[221,43,223,41],[221,44,223,42],[221,46,223,44,"velocityX"],[221,55,223,53],[221,56,223,54],[222,8,224,6],[223,6,225,4],[223,7,225,5],[223,8,225,6],[224,6,227,4,"_defineProperty"],[224,21,227,19],[224,22,227,20],[224,26,227,24],[224,28,227,26],[224,43,227,41],[224,45,227,43,"showing"],[224,52,227,50],[224,56,227,54],[225,8,228,6],[225,12,228,10,"_this$accessibilityIs"],[225,33,228,31],[225,35,228,33,"_this$pointerEventsVi"],[225,56,228,54],[225,58,228,56,"_this$panGestureHandl"],[225,79,228,77],[226,8,230,6],[226,12,230,10],[226,13,230,11,"drawerShown"],[226,24,230,22],[226,27,230,25,"showing"],[226,34,230,32],[227,8,231,6],[227,9,231,7,"_this$accessibilityIs"],[227,30,231,28],[227,33,231,31],[227,37,231,35],[227,38,231,36,"accessibilityIsModalView"],[227,62,231,60],[227,63,231,61,"current"],[227,70,231,68],[227,76,231,74],[227,80,231,78],[227,84,231,82,"_this$accessibilityIs"],[227,105,231,103],[227,110,231,108],[227,115,231,113],[227,116,231,114],[227,119,231,117],[227,124,231,122],[227,125,231,123],[227,128,231,126,"_this$accessibilityIs"],[227,149,231,147],[227,150,231,148,"setNativeProps"],[227,164,231,162],[227,165,231,163],[228,10,232,8,"accessibilityViewIsModal"],[228,34,232,32],[228,36,232,34,"showing"],[229,8,233,6],[229,9,233,7],[229,10,233,8],[230,8,234,6],[230,9,234,7,"_this$pointerEventsVi"],[230,30,234,28],[230,33,234,31],[230,37,234,35],[230,38,234,36,"pointerEventsView"],[230,55,234,53],[230,56,234,54,"current"],[230,63,234,61],[230,69,234,67],[230,73,234,71],[230,77,234,75,"_this$pointerEventsVi"],[230,98,234,96],[230,103,234,101],[230,108,234,106],[230,109,234,107],[230,112,234,110],[230,117,234,115],[230,118,234,116],[230,121,234,119,"_this$pointerEventsVi"],[230,142,234,140],[230,143,234,141,"setNativeProps"],[230,157,234,155],[230,158,234,156],[231,10,235,8,"pointerEvents"],[231,23,235,21],[231,25,235,23,"showing"],[231,32,235,30],[231,35,235,33],[231,41,235,39],[231,44,235,42],[232,8,236,6],[232,9,236,7],[232,10,236,8],[233,8,237,6],[233,14,237,12],[234,10,238,8,"drawerPosition"],[234,24,238,22],[235,10,239,8,"minSwipeDistance"],[235,26,239,24],[236,10,240,8,"edgeWidth"],[237,8,241,6],[237,9,241,7],[237,12,241,10],[237,16,241,14],[237,17,241,15,"props"],[237,22,241,20],[238,8,242,6],[238,14,242,12,"fromLeft"],[238,22,242,20],[238,25,242,23,"drawerPosition"],[238,39,242,37],[238,44,242,42],[238,50,242,48],[238,51,242,49],[238,52,242,50],[239,8,243,6],[240,8,244,6],[242,8,246,6],[242,14,246,12,"gestureOrientation"],[242,32,246,30],[242,35,246,33],[242,36,246,34,"fromLeft"],[242,44,246,42],[242,47,246,45],[242,48,246,46],[242,51,246,49],[242,52,246,50],[242,53,246,51],[242,58,246,56],[242,62,246,60],[242,63,246,61,"drawerShown"],[242,74,246,72],[242,77,246,75],[242,78,246,76],[242,79,246,77],[242,82,246,80],[242,83,246,81],[242,84,246,82],[242,85,246,83],[242,86,246,84],[243,8,247,6],[244,8,248,6],[246,8,250,6],[246,14,250,12,"hitSlop"],[246,21,250,19],[246,24,250,22,"fromLeft"],[246,32,250,30],[246,35,250,33],[247,10,251,8,"left"],[247,14,251,12],[247,16,251,14],[247,17,251,15],[248,10,252,8,"width"],[248,15,252,13],[248,17,252,15,"showing"],[248,24,252,22],[248,27,252,25,"undefined"],[248,36,252,34],[248,39,252,37,"edgeWidth"],[249,8,253,6],[249,9,253,7],[249,12,253,10],[250,10,254,8,"right"],[250,15,254,13],[250,17,254,15],[250,18,254,16],[251,10,255,8,"width"],[251,15,255,13],[251,17,255,15,"showing"],[251,24,255,22],[251,27,255,25,"undefined"],[251,36,255,34],[251,39,255,37,"edgeWidth"],[252,8,256,6],[252,9,256,7],[252,10,256,8],[252,11,256,9],[254,8,258,6],[254,9,258,7,"_this$panGestureHandl"],[254,30,258,28],[254,33,258,31],[254,37,258,35],[254,38,258,36,"panGestureHandler"],[254,55,258,53],[254,56,258,54,"current"],[254,63,258,61],[254,69,258,67],[254,73,258,71],[254,77,258,75,"_this$panGestureHandl"],[254,98,258,96],[254,103,258,101],[254,108,258,106],[254,109,258,107],[254,112,258,110],[254,117,258,115],[254,118,258,116],[254,121,258,119,"_this$panGestureHandl"],[254,142,258,140],[254,143,258,141,"setNativeProps"],[254,157,258,155],[254,158,258,156],[255,10,259,8,"hitSlop"],[255,17,259,15],[256,10,260,8,"activeOffsetX"],[256,23,260,21],[256,25,260,23,"gestureOrientation"],[256,43,260,41],[256,46,260,44,"minSwipeDistance"],[257,8,261,6],[257,9,261,7],[257,10,261,8],[258,6,262,4],[258,7,262,5],[258,8,262,6],[259,6,264,4,"_defineProperty"],[259,21,264,19],[259,22,264,20],[259,26,264,24],[259,28,264,26],[259,43,264,41],[259,45,264,43],[259,46,264,44,"fromValue"],[259,55,264,53],[259,57,264,55,"toValue"],[259,64,264,62],[259,66,264,64,"velocity"],[259,74,264,72],[259,76,264,74,"speed"],[259,81,264,79],[259,86,264,84],[260,8,265,6],[260,12,265,10],[260,13,265,11,"state"],[260,18,265,16],[260,19,265,17,"dragX"],[260,24,265,22],[260,25,265,23,"setValue"],[260,33,265,31],[260,34,265,32],[260,35,265,33],[260,36,265,34],[261,8,266,6],[261,12,266,10],[261,13,266,11,"state"],[261,18,266,16],[261,19,266,17,"touchX"],[261,25,266,23],[261,26,266,24,"setValue"],[261,34,266,32],[261,35,266,33],[261,39,266,37],[261,40,266,38,"props"],[261,45,266,43],[261,46,266,44,"drawerPosition"],[261,60,266,58],[261,65,266,63],[261,71,266,69],[261,74,266,72],[261,75,266,73],[261,78,266,76],[261,82,266,80],[261,83,266,81,"state"],[261,88,266,86],[261,89,266,87,"containerWidth"],[261,103,266,101],[261,104,266,102],[262,8,268,6],[262,12,268,10,"fromValue"],[262,21,268,19],[262,25,268,23],[262,29,268,27],[262,31,268,29],[263,10,269,8],[263,14,269,12,"nextFramePosition"],[263,31,269,29],[263,34,269,32,"fromValue"],[263,43,269,41],[264,10,271,8],[264,14,271,12],[264,18,271,16],[264,19,271,17,"props"],[264,24,271,22],[264,25,271,23,"useNativeAnimations"],[264,44,271,42],[264,46,271,44],[265,12,272,10],[266,12,273,10],[267,12,274,10],[268,12,275,10],[269,12,276,10],[269,16,276,14,"fromValue"],[269,25,276,23],[269,28,276,26,"toValue"],[269,35,276,33],[269,39,276,37,"velocity"],[269,47,276,45],[269,50,276,48],[269,51,276,49],[269,53,276,51],[270,14,277,12,"nextFramePosition"],[270,31,277,29],[270,34,277,32,"Math"],[270,38,277,36],[270,39,277,37,"min"],[270,42,277,40],[270,43,277,41,"fromValue"],[270,52,277,50],[270,55,277,53,"velocity"],[270,63,277,61],[270,66,277,64],[270,70,277,68],[270,72,277,70,"toValue"],[270,79,277,77],[270,80,277,78],[271,12,278,10],[271,13,278,11],[271,19,278,17],[271,23,278,21,"fromValue"],[271,32,278,30],[271,35,278,33,"toValue"],[271,42,278,40],[271,46,278,44,"velocity"],[271,54,278,52],[271,57,278,55],[271,58,278,56],[271,60,278,58],[272,14,279,12,"nextFramePosition"],[272,31,279,29],[272,34,279,32,"Math"],[272,38,279,36],[272,39,279,37,"max"],[272,42,279,40],[272,43,279,41,"fromValue"],[272,52,279,50],[272,55,279,53,"velocity"],[272,63,279,61],[272,66,279,64],[272,70,279,68],[272,72,279,70,"toValue"],[272,79,279,77],[272,80,279,78],[273,12,280,10],[274,10,281,8],[275,10,283,8],[275,14,283,12],[275,15,283,13,"state"],[275,20,283,18],[275,21,283,19,"drawerTranslation"],[275,38,283,36],[275,39,283,37,"setValue"],[275,47,283,45],[275,48,283,46,"nextFramePosition"],[275,65,283,63],[275,66,283,64],[276,8,284,6],[277,8,286,6],[277,14,286,12,"willShow"],[277,22,286,20],[277,25,286,23,"toValue"],[277,32,286,30],[277,37,286,35],[277,38,286,36],[278,8,287,6],[278,12,287,10],[278,13,287,11,"updateShowing"],[278,26,287,24],[278,27,287,25,"willShow"],[278,35,287,33],[278,36,287,34],[279,8,288,6],[279,12,288,10],[279,13,288,11,"emitStateChanged"],[279,29,288,27],[279,30,288,28,"SETTLING"],[279,38,288,36],[279,40,288,38,"willShow"],[279,48,288,46],[279,49,288,47],[280,8,289,6],[280,12,289,10],[280,13,289,11,"setState"],[280,21,289,19],[280,22,289,20],[281,10,290,8,"drawerState"],[281,21,290,19],[281,23,290,21,"SETTLING"],[282,8,291,6],[282,9,291,7],[282,10,291,8],[283,8,293,6],[283,12,293,10],[283,16,293,14],[283,17,293,15,"props"],[283,22,293,20],[283,23,293,21,"hideStatusBar"],[283,36,293,34],[283,38,293,36],[284,10,294,8,"StatusBar"],[284,28,294,17],[284,29,294,18,"setHidden"],[284,38,294,27],[284,39,294,28,"willShow"],[284,47,294,36],[284,49,294,38],[284,53,294,42],[284,54,294,43,"props"],[284,59,294,48],[284,60,294,49,"statusBarAnimation"],[284,78,294,67],[284,82,294,71],[284,89,294,78],[284,90,294,79],[285,8,295,6],[286,8,297,6,"Animated"],[286,25,297,14],[286,26,297,15,"spring"],[286,32,297,21],[286,33,297,22],[286,37,297,26],[286,38,297,27,"state"],[286,43,297,32],[286,44,297,33,"drawerTranslation"],[286,61,297,50],[286,63,297,52],[287,10,298,8,"velocity"],[287,18,298,16],[288,10,299,8,"bounciness"],[288,20,299,18],[288,22,299,20],[288,23,299,21],[289,10,300,8,"toValue"],[289,17,300,15],[290,10,301,8,"useNativeDriver"],[290,25,301,23],[290,27,301,25],[290,31,301,29],[290,32,301,30,"props"],[290,37,301,35],[290,38,301,36,"useNativeAnimations"],[290,57,301,55],[291,10,302,8,"speed"],[291,15,302,13],[291,17,302,15,"speed"],[291,22,302,20],[291,27,302,25],[291,31,302,29],[291,35,302,33,"speed"],[291,40,302,38],[291,45,302,43],[291,50,302,48],[291,51,302,49],[291,54,302,52,"speed"],[291,59,302,57],[291,62,302,60,"undefined"],[292,8,303,6],[292,9,303,7],[292,10,303,8],[292,11,303,9,"start"],[292,16,303,14],[292,17,303,15],[292,18,303,16],[293,10,304,8,"finished"],[294,8,305,6],[294,9,305,7],[294,14,305,12],[295,10,306,8],[295,14,306,12,"finished"],[295,22,306,20],[295,24,306,22],[296,12,307,10],[296,16,307,14],[296,17,307,15,"emitStateChanged"],[296,33,307,31],[296,34,307,32,"IDLE"],[296,38,307,36],[296,40,307,38,"willShow"],[296,48,307,46],[296,49,307,47],[297,12,308,10],[297,16,308,14],[297,17,308,15,"setState"],[297,25,308,23],[297,26,308,24],[298,14,309,12,"drawerOpened"],[298,26,309,24],[298,28,309,26,"willShow"],[299,12,310,10],[299,13,310,11],[299,14,310,12],[300,12,312,10],[300,16,312,14],[300,20,312,18],[300,21,312,19,"state"],[300,26,312,24],[300,27,312,25,"drawerState"],[300,38,312,36],[300,43,312,41,"DRAGGING"],[300,51,312,49],[300,53,312,51],[301,14,313,12],[302,14,314,12],[303,14,315,12],[303,18,315,16],[303,19,315,17,"setState"],[303,27,315,25],[303,28,315,26],[304,16,316,14,"drawerState"],[304,27,316,25],[304,29,316,27,"IDLE"],[305,14,317,12],[305,15,317,13],[305,16,317,14],[306,12,318,10],[307,12,320,10],[307,16,320,14,"willShow"],[307,24,320,22],[307,26,320,24],[308,14,321,12],[308,18,321,16,"_this$props$onDrawerO"],[308,39,321,37],[308,41,321,39,"_this$props3"],[308,53,321,51],[309,14,323,12],[309,15,323,13,"_this$props$onDrawerO"],[309,36,323,34],[309,39,323,37],[309,40,323,38,"_this$props3"],[309,52,323,50],[309,55,323,53],[309,59,323,57],[309,60,323,58,"props"],[309,65,323,63],[309,67,323,65,"onDrawerOpen"],[309,79,323,77],[309,85,323,83],[309,89,323,87],[309,93,323,91,"_this$props$onDrawerO"],[309,114,323,112],[309,119,323,117],[309,124,323,122],[309,125,323,123],[309,128,323,126],[309,133,323,131],[309,134,323,132],[309,137,323,135,"_this$props$onDrawerO"],[309,158,323,156],[309,159,323,157,"call"],[309,163,323,161],[309,164,323,162,"_this$props3"],[309,176,323,174],[309,177,323,175],[310,12,324,10],[310,13,324,11],[310,19,324,17],[311,14,325,12],[311,18,325,16,"_this$props$onDrawerC"],[311,39,325,37],[311,41,325,39,"_this$props4"],[311,53,325,51],[312,14,327,12],[312,15,327,13,"_this$props$onDrawerC"],[312,36,327,34],[312,39,327,37],[312,40,327,38,"_this$props4"],[312,52,327,50],[312,55,327,53],[312,59,327,57],[312,60,327,58,"props"],[312,65,327,63],[312,67,327,65,"onDrawerClose"],[312,80,327,78],[312,86,327,84],[312,90,327,88],[312,94,327,92,"_this$props$onDrawerC"],[312,115,327,113],[312,120,327,118],[312,125,327,123],[312,126,327,124],[312,129,327,127],[312,134,327,132],[312,135,327,133],[312,138,327,136,"_this$props$onDrawerC"],[312,159,327,157],[312,160,327,158,"call"],[312,164,327,162],[312,165,327,163,"_this$props4"],[312,177,327,175],[312,178,327,176],[313,12,328,10],[314,10,329,8],[315,8,330,6],[315,9,330,7],[315,10,330,8],[316,6,331,4],[316,7,331,5],[316,8,331,6],[317,6,333,4,"_defineProperty"],[317,21,333,19],[317,22,333,20],[317,26,333,24],[317,28,333,26],[317,40,333,38],[317,42,333,40],[317,43,333,41,"options"],[317,50,333,48],[317,53,333,51],[317,54,333,52],[317,55,333,53],[317,60,333,58],[318,8,334,6],[318,12,334,10],[318,13,334,11,"animateDrawer"],[318,26,334,24],[319,8,334,26],[320,8,335,6,"undefined"],[320,17,335,15],[320,19,335,17],[320,23,335,21],[320,24,335,22,"props"],[320,29,335,27],[320,30,335,28,"drawerWidth"],[320,41,335,39],[320,43,335,41,"options"],[320,50,335,48],[320,51,335,49,"velocity"],[320,59,335,57],[320,62,335,60,"options"],[320,69,335,67],[320,70,335,68,"velocity"],[320,78,335,76],[320,81,335,79],[320,82,335,80],[320,84,335,82,"options"],[320,91,335,89],[320,92,335,90,"speed"],[320,97,335,95],[320,98,335,96],[320,99,335,97],[320,100,335,98],[321,8,336,6],[323,8,338,6],[323,12,338,10],[323,13,338,11,"forceUpdate"],[323,24,338,22],[323,25,338,23],[323,26,338,24],[324,6,339,4],[324,7,339,5],[324,8,339,6],[325,6,341,4,"_defineProperty"],[325,21,341,19],[325,22,341,20],[325,26,341,24],[325,28,341,26],[325,41,341,39],[325,43,341,41],[325,44,341,42,"options"],[325,51,341,49],[325,54,341,52],[325,55,341,53],[325,56,341,54],[325,61,341,59],[326,8,342,6],[327,8,343,6],[327,12,343,10],[327,13,343,11,"animateDrawer"],[327,26,343,24],[327,27,343,25,"undefined"],[327,36,343,34],[327,38,343,36],[327,39,343,37],[327,41,343,39,"options"],[327,48,343,46],[327,49,343,47,"velocity"],[327,57,343,55],[327,60,343,58,"options"],[327,67,343,65],[327,68,343,66,"velocity"],[327,76,343,74],[327,79,343,77],[327,80,343,78],[327,82,343,80,"options"],[327,89,343,87],[327,90,343,88,"speed"],[327,95,343,93],[327,96,343,94],[327,97,343,95],[327,98,343,96],[328,8,344,6],[330,8,346,6],[330,12,346,10],[330,13,346,11,"forceUpdate"],[330,24,346,22],[330,25,346,23],[330,26,346,24],[331,6,347,4],[331,7,347,5],[331,8,347,6],[332,6,349,4,"_defineProperty"],[332,21,349,19],[332,22,349,20],[332,26,349,24],[332,28,349,26],[332,43,349,41],[332,45,349,43],[332,51,349,49],[333,8,350,6],[334,8,351,6],[334,12,351,6,"invariant"],[334,30,351,15],[334,32,351,16],[334,36,351,20],[334,37,351,21,"openValue"],[334,46,351,30],[334,48,351,32],[334,63,351,47],[334,64,351,48],[335,8,352,6],[335,12,352,10,"overlayOpacity"],[335,26,352,24],[336,8,354,6],[336,12,354,10],[336,16,354,14],[336,17,354,15,"state"],[336,22,354,20],[336,23,354,21,"drawerState"],[336,34,354,32],[336,39,354,37,"IDLE"],[336,43,354,41],[336,45,354,43],[337,10,355,8,"overlayOpacity"],[337,24,355,22],[337,27,355,25],[337,31,355,29],[337,32,355,30,"openValue"],[337,41,355,39],[338,8,356,6],[338,9,356,7],[338,15,356,13],[339,10,357,8,"overlayOpacity"],[339,24,357,22],[339,27,357,25],[339,31,357,29],[339,32,357,30,"state"],[339,37,357,35],[339,38,357,36,"drawerOpened"],[339,50,357,48],[339,53,357,51],[339,54,357,52],[339,57,357,55],[339,58,357,56],[340,8,358,6],[341,8,360,6],[341,14,360,12,"dynamicOverlayStyles"],[341,34,360,32],[341,37,360,35],[342,10,361,8,"opacity"],[342,17,361,15],[342,19,361,17,"overlayOpacity"],[342,33,361,31],[343,10,362,8,"backgroundColor"],[343,25,362,23],[343,27,362,25],[343,31,362,29],[343,32,362,30,"props"],[343,37,362,35],[343,38,362,36,"overlayColor"],[344,8,363,6],[344,9,363,7],[345,8,364,6],[345,15,364,13],[345,28,364,26,"React"],[345,33,364,31],[345,34,364,32,"createElement"],[345,47,364,45],[345,48,364,46,"TapGestureHandler"],[345,84,364,63],[345,86,364,65],[346,10,365,8,"onHandlerStateChange"],[346,30,365,28],[346,32,365,30],[346,36,365,34],[346,37,365,35,"onTapHandlerStateChange"],[347,8,366,6],[347,9,366,7],[347,11,366,9],[347,24,366,22,"React"],[347,29,366,27],[347,30,366,28,"createElement"],[347,43,366,41],[347,44,366,42,"Animated"],[347,61,366,50],[347,62,366,51,"View"],[347,66,366,55],[347,68,366,57],[348,10,367,8,"pointerEvents"],[348,23,367,21],[348,25,367,23],[348,29,367,27],[348,30,367,28,"drawerShown"],[348,41,367,39],[348,44,367,42],[348,50,367,48],[348,53,367,51],[348,59,367,57],[349,10,368,8,"ref"],[349,13,368,11],[349,15,368,13],[349,19,368,17],[349,20,368,18,"pointerEventsView"],[349,37,368,35],[350,10,369,8,"style"],[350,15,369,13],[350,17,369,15],[350,18,369,16,"styles"],[350,24,369,22],[350,25,369,23,"overlay"],[350,32,369,30],[350,34,369,32,"dynamicOverlayStyles"],[350,54,369,52],[351,8,370,6],[351,9,370,7],[351,10,370,8],[351,11,370,9],[352,6,371,4],[352,7,371,5],[352,8,371,6],[353,6,373,4,"_defineProperty"],[353,21,373,19],[353,22,373,20],[353,26,373,24],[353,28,373,26],[353,42,373,40],[353,44,373,42],[353,50,373,48],[354,8,374,6],[354,14,374,12],[355,10,375,8,"drawerBackgroundColor"],[355,31,375,29],[356,10,376,8,"drawerWidth"],[356,21,376,19],[357,10,377,8,"drawerPosition"],[357,24,377,22],[358,10,378,8,"drawerType"],[358,20,378,18],[359,10,379,8,"drawerContainerStyle"],[359,30,379,28],[360,10,380,8,"contentContainerStyle"],[361,8,381,6],[361,9,381,7],[361,12,381,10],[361,16,381,14],[361,17,381,15,"props"],[361,22,381,20],[362,8,382,6],[362,14,382,12,"fromLeft"],[362,22,382,20],[362,25,382,23,"drawerPosition"],[362,39,382,37],[362,44,382,42],[362,50,382,48],[363,8,383,6],[363,14,383,12,"drawerSlide"],[363,25,383,23],[363,28,383,26,"drawerType"],[363,38,383,36],[363,43,383,41],[363,49,383,47],[364,8,384,6],[364,14,384,12,"containerSlide"],[364,28,384,26],[364,31,384,29,"drawerType"],[364,41,384,39],[364,46,384,44],[364,53,384,51],[364,54,384,52],[364,55,384,53],[365,8,385,6],[366,8,386,6],[367,8,387,6],[369,8,389,6],[369,14,389,12,"reverseContentDirection"],[369,37,389,35],[369,40,389,38,"I18nManager"],[369,60,389,49],[369,61,389,50,"isRTL"],[369,66,389,55],[369,69,389,58,"fromLeft"],[369,77,389,66],[369,80,389,69],[369,81,389,70,"fromLeft"],[369,89,389,78],[370,8,390,6],[370,14,390,12,"dynamicDrawerStyles"],[370,33,390,31],[370,36,390,34],[371,10,391,8,"backgroundColor"],[371,25,391,23],[371,27,391,25,"drawerBackgroundColor"],[371,48,391,46],[372,10,392,8,"width"],[372,15,392,13],[372,17,392,15,"drawerWidth"],[373,8,393,6],[373,9,393,7],[374,8,394,6],[374,14,394,12,"openValue"],[374,23,394,21],[374,26,394,24],[374,30,394,28],[374,31,394,29,"openValue"],[374,40,394,38],[375,8,395,6],[375,12,395,6,"invariant"],[375,30,395,15],[375,32,395,16,"openValue"],[375,41,395,25],[375,43,395,27],[375,58,395,42],[375,59,395,43],[376,8,396,6],[376,12,396,10,"containerStyles"],[376,27,396,25],[377,8,398,6],[377,12,398,10,"containerSlide"],[377,26,398,24],[377,28,398,26],[378,10,399,8],[378,16,399,14,"containerTranslateX"],[378,35,399,33],[378,38,399,36,"openValue"],[378,47,399,45],[378,48,399,46,"interpolate"],[378,59,399,57],[378,60,399,58],[379,12,400,10,"inputRange"],[379,22,400,20],[379,24,400,22],[379,25,400,23],[379,26,400,24],[379,28,400,26],[379,29,400,27],[379,30,400,28],[380,12,401,10,"outputRange"],[380,23,401,21],[380,25,401,23,"fromLeft"],[380,33,401,31],[380,36,401,34],[380,37,401,35],[380,38,401,36],[380,40,401,38,"drawerWidth"],[380,51,401,49],[380,52,401,50],[380,55,401,53],[380,56,401,54],[380,57,401,55],[380,59,401,57],[380,60,401,58,"drawerWidth"],[380,71,401,69],[380,72,401,70],[381,12,402,10,"extrapolate"],[381,23,402,21],[381,25,402,23],[382,10,403,8],[382,11,403,9],[382,12,403,10],[383,10,404,8,"containerStyles"],[383,25,404,23],[383,28,404,26],[384,12,405,10,"transform"],[384,21,405,19],[384,23,405,21],[384,24,405,22],[385,14,406,12,"translateX"],[385,24,406,22],[385,26,406,24,"containerTranslateX"],[386,12,407,10],[386,13,407,11],[387,10,408,8],[387,11,408,9],[388,8,409,6],[389,8,411,6],[389,12,411,10,"drawerTranslateX"],[389,28,411,26],[389,31,411,29],[389,32,411,30],[390,8,413,6],[390,12,413,10,"drawerSlide"],[390,23,413,21],[390,25,413,23],[391,10,414,8],[391,16,414,14,"closedDrawerOffset"],[391,34,414,32],[391,37,414,35,"fromLeft"],[391,45,414,43],[391,48,414,46],[391,49,414,47,"drawerWidth"],[391,60,414,58],[391,63,414,61,"drawerWidth"],[391,74,414,72],[392,10,416,8],[392,14,416,12],[392,18,416,16],[392,19,416,17,"state"],[392,24,416,22],[392,25,416,23,"drawerState"],[392,36,416,34],[392,41,416,39,"IDLE"],[392,45,416,43],[392,47,416,45],[393,12,417,10,"drawerTranslateX"],[393,28,417,26],[393,31,417,29,"openValue"],[393,40,417,38],[393,41,417,39,"interpolate"],[393,52,417,50],[393,53,417,51],[394,14,418,12,"inputRange"],[394,24,418,22],[394,26,418,24],[394,27,418,25],[394,28,418,26],[394,30,418,28],[394,31,418,29],[394,32,418,30],[395,14,419,12,"outputRange"],[395,25,419,23],[395,27,419,25],[395,28,419,26,"closedDrawerOffset"],[395,46,419,44],[395,48,419,46],[395,49,419,47],[395,50,419,48],[396,14,420,12,"extrapolate"],[396,25,420,23],[396,27,420,25],[397,12,421,10],[397,13,421,11],[397,14,421,12],[398,10,422,8],[398,11,422,9],[398,17,422,15],[399,12,423,10,"drawerTranslateX"],[399,28,423,26],[399,31,423,29],[399,35,423,33],[399,36,423,34,"state"],[399,41,423,39],[399,42,423,40,"drawerOpened"],[399,54,423,52],[399,57,423,55],[399,58,423,56],[399,61,423,59,"closedDrawerOffset"],[399,79,423,77],[400,10,424,8],[401,8,425,6],[402,8,427,6],[402,14,427,12,"drawerStyles"],[402,26,427,24],[402,29,427,27],[403,10,428,8,"transform"],[403,19,428,17],[403,21,428,19],[403,22,428,20],[404,12,429,10,"translateX"],[404,22,429,20],[404,24,429,22,"drawerTranslateX"],[405,10,430,8],[405,11,430,9],[405,12,430,10],[406,10,431,8,"flexDirection"],[406,23,431,21],[406,25,431,23,"reverseContentDirection"],[406,48,431,46],[406,51,431,49],[406,64,431,62],[406,67,431,65],[407,8,432,6],[407,9,432,7],[408,8,433,6],[408,15,433,13],[408,28,433,26,"React"],[408,33,433,31],[408,34,433,32,"createElement"],[408,47,433,45],[408,48,433,46,"Animated"],[408,65,433,54],[408,66,433,55,"View"],[408,70,433,59],[408,72,433,61],[409,10,434,8,"style"],[409,15,434,13],[409,17,434,15,"styles"],[409,23,434,21],[409,24,434,22,"main"],[409,28,434,26],[410,10,435,8,"onLayout"],[410,18,435,16],[410,20,435,18],[410,24,435,22],[410,25,435,23,"handleContainerLayout"],[411,8,436,6],[411,9,436,7],[411,11,436,9],[411,24,436,22,"React"],[411,29,436,27],[411,30,436,28,"createElement"],[411,43,436,41],[411,44,436,42,"Animated"],[411,61,436,50],[411,62,436,51,"View"],[411,66,436,55],[411,68,436,57],[412,10,437,8,"style"],[412,15,437,13],[412,17,437,15],[412,18,437,16,"drawerType"],[412,28,437,26],[412,33,437,31],[412,40,437,38],[412,43,437,41,"styles"],[412,49,437,47],[412,50,437,48,"containerOnBack"],[412,65,437,63],[412,68,437,66,"styles"],[412,74,437,72],[412,75,437,73,"containerInFront"],[412,91,437,89],[412,93,437,91,"containerStyles"],[412,108,437,106],[412,110,437,108,"contentContainerStyle"],[412,131,437,129],[412,132,437,130],[413,10,438,8,"importantForAccessibility"],[413,35,438,33],[413,37,438,35],[413,41,438,39],[413,42,438,40,"drawerShown"],[413,53,438,51],[413,56,438,54],[413,77,438,75],[413,80,438,78],[414,8,439,6],[414,9,439,7],[414,11,439,9],[414,18,439,16],[414,22,439,20],[414,23,439,21,"props"],[414,28,439,26],[414,29,439,27,"children"],[414,37,439,35],[414,42,439,40],[414,52,439,50],[414,55,439,53],[414,59,439,57],[414,60,439,58,"props"],[414,65,439,63],[414,66,439,64,"children"],[414,74,439,72],[414,75,439,73],[414,79,439,77],[414,80,439,78,"openValue"],[414,89,439,87],[414,90,439,88],[414,93,439,91],[414,97,439,95],[414,98,439,96,"props"],[414,103,439,101],[414,104,439,102,"children"],[414,112,439,110],[414,114,439,112],[414,118,439,116],[414,119,439,117,"renderOverlay"],[414,132,439,130],[414,133,439,131],[414,134,439,132],[414,135,439,133],[414,137,439,135],[414,150,439,148,"React"],[414,155,439,153],[414,156,439,154,"createElement"],[414,169,439,167],[414,170,439,168,"Animated"],[414,187,439,176],[414,188,439,177,"View"],[414,192,439,181],[414,194,439,183],[415,10,440,8,"pointerEvents"],[415,23,440,21],[415,25,440,23],[415,35,440,33],[416,10,441,8,"ref"],[416,13,441,11],[416,15,441,13],[416,19,441,17],[416,20,441,18,"accessibilityIsModalView"],[416,44,441,42],[417,10,442,8,"accessibilityViewIsModal"],[417,34,442,32],[417,36,442,34],[417,40,442,38],[417,41,442,39,"drawerShown"],[417,52,442,50],[418,10,443,8,"style"],[418,15,443,13],[418,17,443,15],[418,18,443,16,"styles"],[418,24,443,22],[418,25,443,23,"drawerContainer"],[418,40,443,38],[418,42,443,40,"drawerStyles"],[418,54,443,52],[418,56,443,54,"drawerContainerStyle"],[418,76,443,74],[419,8,444,6],[419,9,444,7],[419,11,444,9],[419,24,444,22,"React"],[419,29,444,27],[419,30,444,28,"createElement"],[419,43,444,41],[419,44,444,42,"View"],[419,57,444,46],[419,59,444,48],[420,10,445,8,"style"],[420,15,445,13],[420,17,445,15,"dynamicDrawerStyles"],[421,8,446,6],[421,9,446,7],[421,11,446,9],[421,15,446,13],[421,16,446,14,"props"],[421,21,446,19],[421,22,446,20,"renderNavigationView"],[421,42,446,40],[421,43,446,41],[421,47,446,45],[421,48,446,46,"openValue"],[421,57,446,55],[421,58,446,56],[421,59,446,57],[421,60,446,58],[421,61,446,59],[422,6,447,4],[422,7,447,5],[422,8,447,6],[423,6,449,4,"_defineProperty"],[423,21,449,19],[423,22,449,20],[423,26,449,24],[423,28,449,26],[423,46,449,44],[423,48,449,46,"ref"],[423,51,449,49],[423,55,449,53],[424,8,450,6],[424,12,450,10,"_this$props$onGesture"],[424,33,450,31],[424,35,450,33,"_this$props5"],[424,47,450,45],[426,8,452,6],[427,8,453,6],[428,8,454,6],[428,12,454,10],[428,13,454,11,"panGestureHandler"],[428,30,454,28],[428,31,454,29,"current"],[428,38,454,36],[428,41,454,39,"ref"],[428,44,454,42],[429,8,455,6],[429,9,455,7,"_this$props$onGesture"],[429,30,455,28],[429,33,455,31],[429,34,455,32,"_this$props5"],[429,46,455,44],[429,49,455,47],[429,53,455,51],[429,54,455,52,"props"],[429,59,455,57],[429,61,455,59,"onGestureRef"],[429,73,455,71],[429,79,455,77],[429,83,455,81],[429,87,455,85,"_this$props$onGesture"],[429,108,455,106],[429,113,455,111],[429,118,455,116],[429,119,455,117],[429,122,455,120],[429,127,455,125],[429,128,455,126],[429,131,455,129,"_this$props$onGesture"],[429,152,455,150],[429,153,455,151,"call"],[429,157,455,155],[429,158,455,156,"_this$props5"],[429,170,455,168],[429,172,455,170,"ref"],[429,175,455,173],[429,176,455,174],[430,6,456,4],[430,7,456,5],[430,8,456,6],[431,6,458,4],[431,12,458,10,"_dragX"],[431,18,458,16],[431,21,458,19],[431,25,458,23,"Animated"],[431,42,458,31],[431,43,458,32,"Value"],[431,48,458,37],[431,49,458,38],[431,50,458,39],[431,51,458,40],[432,6,460,4],[432,12,460,10,"_touchX"],[432,19,460,17],[432,22,460,20],[432,26,460,24,"Animated"],[432,43,460,32],[432,44,460,33,"Value"],[432,49,460,38],[432,50,460,39],[432,51,460,40],[432,52,460,41],[433,6,462,4],[433,12,462,10,"_drawerTranslation"],[433,30,462,28],[433,33,462,31],[433,37,462,35,"Animated"],[433,54,462,43],[433,55,462,44,"Value"],[433,60,462,49],[433,61,462,50],[433,62,462,51],[433,63,462,52],[434,6,464,4],[434,10,464,8],[434,11,464,9,"state"],[434,16,464,14],[434,19,464,17],[435,8,465,6,"dragX"],[435,13,465,11],[435,15,465,13,"_dragX"],[435,21,465,19],[436,8,466,6,"touchX"],[436,14,466,12],[436,16,466,14,"_touchX"],[436,23,466,21],[437,8,467,6,"drawerTranslation"],[437,25,467,23],[437,27,467,25,"_drawerTranslation"],[437,45,467,43],[438,8,468,6,"containerWidth"],[438,22,468,20],[438,24,468,22],[438,25,468,23],[439,8,469,6,"drawerState"],[439,19,469,17],[439,21,469,19,"IDLE"],[439,25,469,23],[440,8,470,6,"drawerOpened"],[440,20,470,18],[440,22,470,20],[441,6,471,4],[441,7,471,5],[442,6,472,4],[442,10,472,8],[442,11,472,9,"updateAnimatedEvent"],[442,30,472,28],[442,31,472,29,"_props"],[442,37,472,35],[442,39,472,37],[442,43,472,41],[442,44,472,42,"state"],[442,49,472,47],[442,50,472,48],[443,4,473,2],[444,4,475,2,"shouldComponentUpdate"],[444,25,475,23,"shouldComponentUpdate"],[444,26,475,24,"props"],[444,31,475,29],[444,33,475,31,"state"],[444,38,475,36],[444,40,475,38],[445,6,476,4],[445,10,476,8],[445,14,476,12],[445,15,476,13,"props"],[445,20,476,18],[445,21,476,19,"drawerPosition"],[445,35,476,33],[445,40,476,38,"props"],[445,45,476,43],[445,46,476,44,"drawerPosition"],[445,60,476,58],[445,64,476,62],[445,68,476,66],[445,69,476,67,"props"],[445,74,476,72],[445,75,476,73,"drawerWidth"],[445,86,476,84],[445,91,476,89,"props"],[445,96,476,94],[445,97,476,95,"drawerWidth"],[445,108,476,106],[445,112,476,110],[445,116,476,114],[445,117,476,115,"props"],[445,122,476,120],[445,123,476,121,"drawerType"],[445,133,476,131],[445,138,476,136,"props"],[445,143,476,141],[445,144,476,142,"drawerType"],[445,154,476,152],[445,158,476,156],[445,162,476,160],[445,163,476,161,"state"],[445,168,476,166],[445,169,476,167,"containerWidth"],[445,183,476,181],[445,188,476,186,"state"],[445,193,476,191],[445,194,476,192,"containerWidth"],[445,208,476,206],[445,210,476,208],[446,8,477,6],[446,12,477,10],[446,13,477,11,"updateAnimatedEvent"],[446,32,477,30],[446,33,477,31,"props"],[446,38,477,36],[446,40,477,38,"state"],[446,45,477,43],[446,46,477,44],[447,6,478,4],[448,6,480,4],[448,13,480,11],[448,17,480,15],[449,4,481,2],[450,4,483,2,"render"],[450,10,483,8,"render"],[450,11,483,8],[450,13,483,11],[451,6,484,4],[451,12,484,10],[452,8,485,6,"drawerPosition"],[452,22,485,20],[453,8,486,6,"drawerLockMode"],[453,22,486,20],[454,8,487,6,"edgeWidth"],[454,17,487,15],[455,8,488,6,"minSwipeDistance"],[456,6,489,4],[456,7,489,5],[456,10,489,8],[456,14,489,12],[456,15,489,13,"props"],[456,20,489,18],[457,6,490,4],[457,12,490,10,"fromLeft"],[457,20,490,18],[457,23,490,21,"drawerPosition"],[457,37,490,35],[457,42,490,40],[457,48,490,46],[457,49,490,47],[457,50,490,48],[458,6,491,4],[459,6,492,4],[461,6,494,4],[461,12,494,10,"gestureOrientation"],[461,30,494,28],[461,33,494,31],[461,34,494,32,"fromLeft"],[461,42,494,40],[461,45,494,43],[461,46,494,44],[461,49,494,47],[461,50,494,48],[461,51,494,49],[461,56,494,54],[461,60,494,58],[461,61,494,59,"drawerShown"],[461,72,494,70],[461,75,494,73],[461,76,494,74],[461,77,494,75],[461,80,494,78],[461,81,494,79],[461,82,494,80],[461,83,494,81],[461,84,494,82],[462,6,495,4],[463,6,496,4],[465,6,498,4],[465,12,498,10,"hitSlop"],[465,19,498,17],[465,22,498,20,"fromLeft"],[465,30,498,28],[465,33,498,31],[466,8,499,6,"left"],[466,12,499,10],[466,14,499,12],[466,15,499,13],[467,8,500,6,"width"],[467,13,500,11],[467,15,500,13],[467,19,500,17],[467,20,500,18,"drawerShown"],[467,31,500,29],[467,34,500,32,"undefined"],[467,43,500,41],[467,46,500,44,"edgeWidth"],[468,6,501,4],[468,7,501,5],[468,10,501,8],[469,8,502,6,"right"],[469,13,502,11],[469,15,502,13],[469,16,502,14],[470,8,503,6,"width"],[470,13,503,11],[470,15,503,13],[470,19,503,17],[470,20,503,18,"drawerShown"],[470,31,503,29],[470,34,503,32,"undefined"],[470,43,503,41],[470,46,503,44,"edgeWidth"],[471,6,504,4],[471,7,504,5],[472,6,505,4],[472,13,505,11],[472,26,505,24,"React"],[472,31,505,29],[472,32,505,30,"createElement"],[472,45,505,43],[472,46,505,44,"PanGestureHandler"],[472,82,505,61],[472,83,505,62],[473,6,505,62],[473,8,506,6],[474,8,507,6,"userSelect"],[474,18,507,16],[474,20,507,18],[474,24,507,22],[474,25,507,23,"props"],[474,30,507,28],[474,31,507,29,"userSelect"],[474,41,507,39],[475,8,508,6,"activeCursor"],[475,20,508,18],[475,22,508,20],[475,26,508,24],[475,27,508,25,"props"],[475,32,508,30],[475,33,508,31,"activeCursor"],[475,45,508,43],[476,8,509,6,"mouseButton"],[476,19,509,17],[476,21,509,19],[476,25,509,23],[476,26,509,24,"props"],[476,31,509,29],[476,32,509,30,"mouseButton"],[476,43,509,41],[477,8,510,6,"enableContextMenu"],[477,25,510,23],[477,27,510,25],[477,31,510,29],[477,32,510,30,"props"],[477,37,510,35],[477,38,510,36,"enableContextMenu"],[477,55,510,53],[478,8,511,6,"ref"],[478,11,511,9],[478,13,511,11],[478,17,511,15],[478,18,511,16,"setPanGestureRef"],[478,34,511,32],[479,8,512,6,"hitSlop"],[479,15,512,13],[479,17,512,15,"hitSlop"],[479,24,512,22],[480,8,513,6,"activeOffsetX"],[480,21,513,19],[480,23,513,21,"gestureOrientation"],[480,41,513,39],[480,44,513,42,"minSwipeDistance"],[480,60,513,58],[481,8,514,6,"failOffsetY"],[481,19,514,17],[481,21,514,19],[481,22,514,20],[481,23,514,21],[481,25,514,23],[481,27,514,25],[481,29,514,27],[481,30,514,28],[482,8,515,6,"onGestureEvent"],[482,22,515,20],[482,24,515,22],[482,28,515,26],[482,29,515,27,"onGestureEvent"],[482,43,515,41],[483,8,516,6,"onHandlerStateChange"],[483,28,516,26],[483,30,516,28],[483,34,516,32],[483,35,516,33,"openingHandlerStateChange"],[483,60,516,58],[484,8,517,6,"enableTrackpadTwoFingerGesture"],[484,38,517,36],[484,40,517,38],[484,44,517,42],[484,45,517,43,"props"],[484,50,517,48],[484,51,517,49,"enableTrackpadTwoFingerGesture"],[484,81,517,79],[485,8,518,6,"enabled"],[485,15,518,13],[485,17,518,15,"drawerLockMode"],[485,31,518,29],[485,36,518,34],[485,51,518,49],[485,55,518,53,"drawerLockMode"],[485,69,518,67],[485,74,518,72],[486,6,519,4],[486,7,519,5],[486,9,519,7],[486,13,519,11],[486,14,519,12,"renderDrawer"],[486,26,519,24],[486,27,519,25],[486,28,519,26],[486,29,519,27],[487,4,520,2],[488,2,522,0],[489,2,522,1,"exports"],[489,9,522,1],[489,10,522,1,"default"],[489,17,522,1],[489,20,522,1,"DrawerLayout"],[489,32,522,1],[490,2,524,0,"_defineProperty"],[490,17,524,15],[490,18,524,16,"DrawerLayout"],[490,30,524,28],[490,32,524,30],[490,46,524,44],[490,48,524,46],[491,4,525,2,"drawerWidth"],[491,15,525,13],[491,17,525,15],[491,20,525,18],[492,4,526,2,"drawerPosition"],[492,18,526,16],[492,20,526,18],[492,26,526,24],[493,4,527,2,"useNativeAnimations"],[493,23,527,21],[493,25,527,23],[493,29,527,27],[494,4,528,2,"drawerType"],[494,14,528,12],[494,16,528,14],[494,23,528,21],[495,4,529,2,"edgeWidth"],[495,13,529,11],[495,15,529,13],[495,17,529,15],[496,4,530,2,"minSwipeDistance"],[496,20,530,18],[496,22,530,20],[496,23,530,21],[497,4,531,2,"overlayColor"],[497,16,531,14],[497,18,531,16],[497,38,531,36],[498,4,532,2,"drawerLockMode"],[498,18,532,16],[498,20,532,18],[498,30,532,28],[499,4,533,2,"enableTrackpadTwoFingerGesture"],[499,34,533,32],[499,36,533,34],[500,2,534,0],[500,3,534,1],[500,4,534,2],[501,2,536,0,"_defineProperty"],[501,17,536,15],[501,18,536,16,"DrawerLayout"],[501,30,536,28],[501,32,536,30],[501,43,536,41],[501,45,536,43],[502,4,537,2,"Left"],[502,8,537,6],[502,10,537,8],[502,16,537,14],[503,4,538,2,"Right"],[503,9,538,7],[503,11,538,9],[504,2,539,0],[504,3,539,1],[504,4,539,2],[505,2,541,0],[505,8,541,6,"styles"],[505,14,541,12],[505,17,541,15,"StyleSheet"],[505,36,541,25],[505,37,541,26,"create"],[505,43,541,32],[505,44,541,33],[506,4,542,2,"drawerContainer"],[506,19,542,17],[506,21,542,19],[507,6,542,21],[507,9,542,24,"StyleSheet"],[507,28,542,34],[507,29,542,35,"absoluteFillObject"],[507,47,542,53],[508,6,543,4,"zIndex"],[508,12,543,10],[508,14,543,12],[508,18,543,16],[509,6,544,4,"flexDirection"],[509,19,544,17],[509,21,544,19],[510,4,545,2],[510,5,545,3],[511,4,546,2,"containerInFront"],[511,20,546,18],[511,22,546,20],[512,6,546,22],[512,9,546,25,"StyleSheet"],[512,28,546,35],[512,29,546,36,"absoluteFillObject"],[512,47,546,54],[513,6,547,4,"zIndex"],[513,12,547,10],[513,14,547,12],[514,4,548,2],[514,5,548,3],[515,4,549,2,"containerOnBack"],[515,19,549,17],[515,21,549,19],[516,6,549,21],[516,9,549,24,"StyleSheet"],[516,28,549,34],[516,29,549,35,"absoluteFillObject"],[517,4,550,2],[517,5,550,3],[518,4,551,2,"main"],[518,8,551,6],[518,10,551,8],[519,6,552,4,"flex"],[519,10,552,8],[519,12,552,10],[519,13,552,11],[520,6,553,4,"zIndex"],[520,12,553,10],[520,14,553,12],[520,15,553,13],[521,6,554,4,"overflow"],[521,14,554,12],[521,16,554,14],[522,4,555,2],[522,5,555,3],[523,4,556,2,"overlay"],[523,11,556,9],[523,13,556,11],[524,6,556,13],[524,9,556,16,"StyleSheet"],[524,28,556,26],[524,29,556,27,"absoluteFillObject"],[524,47,556,45],[525,6,557,4,"zIndex"],[525,12,557,10],[525,14,557,12],[526,4,558,2],[527,2,559,0],[527,3,559,1],[527,4,559,2],[528,0,559,3],[528,3]],"functionMap":{"names":["_defineProperty","<global>","DrawerLayout","constructor","_defineProperty$argument_2","gestureOptions.listener","Animated.spring.start$argument_0","shouldComponentUpdate","render"],"mappings":"AAA,iNC;eC2B;ECC;iDCe;kCC8E;SDM;KDS;mDCE;KDM;8CCE;KDI;uDCE;KDqB;qDCE;KDM;2CCE;KDyC;2CCE;KDmC;2CCE;eEuC;OF2B;KDC;wCCE;KDM;yCCE;KDM;2CCE;KDsB;0CCE;KD0E;8CCE;KDO;GDiB;EKE;GLM;EME;GNqC;CDE"}},"type":"js/module"}]}