{"dependencies":[{"name":"@babel/runtime/helpers/possibleConstructorReturn","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"aU3Lrys8xTVpYSDJal2nhppojC8=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/getPrototypeOf","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"4DwyfFXBA53CJWVTVj5w3kH1PUg=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/inherits","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"y0uNg4LxF1CLscQChxzgo5dfjvA=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/objectWithoutProperties","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"fnQVLibs90KHiJ7y48fLgPWzDS0=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"5y7e5+zC7teYEEC6niD9f5zII1M=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"yg7e6laZwmpbIvId5jovq9ugXp8=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30=","exportNames":["*"]}},{"name":"@firebase/util","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":11,"index":26},"end":{"line":3,"column":36,"index":51}}],"key":"R3im+0n/eSh8gKTMLLPoTxcvyH0=","exportNames":["*"]}},{"name":"@firebase/app","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":10,"index":63},"end":{"line":4,"column":34,"index":87}}],"key":"lENqTkRf5ylEITQI/k3wCDumleU=","exportNames":["*"]}},{"name":"@firebase/component","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":16,"index":105},"end":{"line":5,"column":46,"index":135}}],"key":"eDsH+fiRQ6A04XOvKTChGPEhs0I=","exportNames":["*"]}},{"name":"@firebase/logger","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":13,"index":150},"end":{"line":6,"column":40,"index":177}}],"key":"pLe/ZFQGfNWvdh/0rG0JuGxrOpM=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  var _possibleConstructorReturn = require(_dependencyMap[0], \"@babel/runtime/helpers/possibleConstructorReturn\");\n  var _getPrototypeOf = require(_dependencyMap[1], \"@babel/runtime/helpers/getPrototypeOf\");\n  var _inherits = require(_dependencyMap[2], \"@babel/runtime/helpers/inherits\");\n  var _objectWithoutProperties = require(_dependencyMap[3], \"@babel/runtime/helpers/objectWithoutProperties\");\n  var _slicedToArray = require(_dependencyMap[4], \"@babel/runtime/helpers/slicedToArray\");\n  var _asyncToGenerator = require(_dependencyMap[5], \"@babel/runtime/helpers/asyncToGenerator\");\n  var _classCallCheck = require(_dependencyMap[6], \"@babel/runtime/helpers/classCallCheck\");\n  var _createClass = require(_dependencyMap[7], \"@babel/runtime/helpers/createClass\");\n  var _excluded = [\"providerId\"],\n    _excluded2 = [\"uid\", \"auth\", \"stsTokenManager\"],\n    _excluded3 = [\"providerId\", \"signInMethod\"];\n  function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\n  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }\n  var util = require(_dependencyMap[8], \"@firebase/util\");\n  var app = require(_dependencyMap[9], \"@firebase/app\");\n  var component = require(_dependencyMap[10], \"@firebase/component\");\n  var logger = require(_dependencyMap[11], \"@firebase/logger\");\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _debugErrorMap() {\n    return {\n      [\"admin-restricted-operation\" /* AuthErrorCode.ADMIN_ONLY_OPERATION */]: 'This operation is restricted to administrators only.',\n      [\"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */]: '',\n      [\"app-not-authorized\" /* AuthErrorCode.APP_NOT_AUTHORIZED */]: \"This app, identified by the domain where it's hosted, is not \" + 'authorized to use Firebase Authentication with the provided API key. ' + 'Review your key configuration in the Google API console.',\n      [\"app-not-installed\" /* AuthErrorCode.APP_NOT_INSTALLED */]: 'The requested mobile application corresponding to the identifier (' + 'Android package name or iOS bundle ID) provided is not installed on ' + 'this device.',\n      [\"captcha-check-failed\" /* AuthErrorCode.CAPTCHA_CHECK_FAILED */]: 'The reCAPTCHA response token provided is either invalid, expired, ' + 'already used or the domain associated with it does not match the list ' + 'of whitelisted domains.',\n      [\"code-expired\" /* AuthErrorCode.CODE_EXPIRED */]: 'The SMS code has expired. Please re-send the verification code to try ' + 'again.',\n      [\"cordova-not-ready\" /* AuthErrorCode.CORDOVA_NOT_READY */]: 'Cordova framework is not ready.',\n      [\"cors-unsupported\" /* AuthErrorCode.CORS_UNSUPPORTED */]: 'This browser is not supported.',\n      [\"credential-already-in-use\" /* AuthErrorCode.CREDENTIAL_ALREADY_IN_USE */]: 'This credential is already associated with a different user account.',\n      [\"custom-token-mismatch\" /* AuthErrorCode.CREDENTIAL_MISMATCH */]: 'The custom token corresponds to a different audience.',\n      [\"requires-recent-login\" /* AuthErrorCode.CREDENTIAL_TOO_OLD_LOGIN_AGAIN */]: 'This operation is sensitive and requires recent authentication. Log in ' + 'again before retrying this request.',\n      [\"dependent-sdk-initialized-before-auth\" /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */]: 'Another Firebase SDK was initialized and is trying to use Auth before Auth is ' + 'initialized. Please be sure to call `initializeAuth` or `getAuth` before ' + 'starting any other Firebase SDK.',\n      [\"dynamic-link-not-activated\" /* AuthErrorCode.DYNAMIC_LINK_NOT_ACTIVATED */]: 'Please activate Dynamic Links in the Firebase Console and agree to the terms and ' + 'conditions.',\n      [\"email-change-needs-verification\" /* AuthErrorCode.EMAIL_CHANGE_NEEDS_VERIFICATION */]: 'Multi-factor users must always have a verified email.',\n      [\"email-already-in-use\" /* AuthErrorCode.EMAIL_EXISTS */]: 'The email address is already in use by another account.',\n      [\"emulator-config-failed\" /* AuthErrorCode.EMULATOR_CONFIG_FAILED */]: 'Auth instance has already been used to make a network call. Auth can ' + 'no longer be configured to use the emulator. Try calling ' + '\"connectAuthEmulator()\" sooner.',\n      [\"expired-action-code\" /* AuthErrorCode.EXPIRED_OOB_CODE */]: 'The action code has expired.',\n      [\"cancelled-popup-request\" /* AuthErrorCode.EXPIRED_POPUP_REQUEST */]: 'This operation has been cancelled due to another conflicting popup being opened.',\n      [\"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */]: 'An internal AuthError has occurred.',\n      [\"invalid-app-credential\" /* AuthErrorCode.INVALID_APP_CREDENTIAL */]: 'The phone verification request contains an invalid application verifier.' + ' The reCAPTCHA token response is either invalid or expired.',\n      [\"invalid-app-id\" /* AuthErrorCode.INVALID_APP_ID */]: 'The mobile app identifier is not registered for the current project.',\n      [\"invalid-user-token\" /* AuthErrorCode.INVALID_AUTH */]: \"This user's credential isn't valid for this project. This can happen \" + \"if the user's token has been tampered with, or if the user isn't for \" + 'the project associated with this API key.',\n      [\"invalid-auth-event\" /* AuthErrorCode.INVALID_AUTH_EVENT */]: 'An internal AuthError has occurred.',\n      [\"invalid-verification-code\" /* AuthErrorCode.INVALID_CODE */]: 'The SMS verification code used to create the phone auth credential is ' + 'invalid. Please resend the verification code sms and be sure to use the ' + 'verification code provided by the user.',\n      [\"invalid-continue-uri\" /* AuthErrorCode.INVALID_CONTINUE_URI */]: 'The continue URL provided in the request is invalid.',\n      [\"invalid-cordova-configuration\" /* AuthErrorCode.INVALID_CORDOVA_CONFIGURATION */]: 'The following Cordova plugins must be installed to enable OAuth sign-in: ' + 'cordova-plugin-buildinfo, cordova-universal-links-plugin, ' + 'cordova-plugin-browsertab, cordova-plugin-inappbrowser and ' + 'cordova-plugin-customurlscheme.',\n      [\"invalid-custom-token\" /* AuthErrorCode.INVALID_CUSTOM_TOKEN */]: 'The custom token format is incorrect. Please check the documentation.',\n      [\"invalid-dynamic-link-domain\" /* AuthErrorCode.INVALID_DYNAMIC_LINK_DOMAIN */]: 'The provided dynamic link domain is not configured or authorized for the current project.',\n      [\"invalid-email\" /* AuthErrorCode.INVALID_EMAIL */]: 'The email address is badly formatted.',\n      [\"invalid-emulator-scheme\" /* AuthErrorCode.INVALID_EMULATOR_SCHEME */]: 'Emulator URL must start with a valid scheme (http:// or https://).',\n      [\"invalid-api-key\" /* AuthErrorCode.INVALID_API_KEY */]: 'Your API key is invalid, please check you have copied it correctly.',\n      [\"invalid-cert-hash\" /* AuthErrorCode.INVALID_CERT_HASH */]: 'The SHA-1 certificate hash provided is invalid.',\n      [\"invalid-credential\" /* AuthErrorCode.INVALID_CREDENTIAL */]: 'The supplied auth credential is incorrect, malformed or has expired.',\n      [\"invalid-message-payload\" /* AuthErrorCode.INVALID_MESSAGE_PAYLOAD */]: 'The email template corresponding to this action contains invalid characters in its message. ' + 'Please fix by going to the Auth email templates section in the Firebase Console.',\n      [\"invalid-multi-factor-session\" /* AuthErrorCode.INVALID_MFA_SESSION */]: 'The request does not contain a valid proof of first factor successful sign-in.',\n      [\"invalid-oauth-provider\" /* AuthErrorCode.INVALID_OAUTH_PROVIDER */]: 'EmailAuthProvider is not supported for this operation. This operation ' + 'only supports OAuth providers.',\n      [\"invalid-oauth-client-id\" /* AuthErrorCode.INVALID_OAUTH_CLIENT_ID */]: 'The OAuth client ID provided is either invalid or does not match the ' + 'specified API key.',\n      [\"unauthorized-domain\" /* AuthErrorCode.INVALID_ORIGIN */]: 'This domain is not authorized for OAuth operations for your Firebase ' + 'project. Edit the list of authorized domains from the Firebase console.',\n      [\"invalid-action-code\" /* AuthErrorCode.INVALID_OOB_CODE */]: 'The action code is invalid. This can happen if the code is malformed, ' + 'expired, or has already been used.',\n      [\"wrong-password\" /* AuthErrorCode.INVALID_PASSWORD */]: 'The password is invalid or the user does not have a password.',\n      [\"invalid-persistence-type\" /* AuthErrorCode.INVALID_PERSISTENCE */]: 'The specified persistence type is invalid. It can only be local, session or none.',\n      [\"invalid-phone-number\" /* AuthErrorCode.INVALID_PHONE_NUMBER */]: 'The format of the phone number provided is incorrect. Please enter the ' + 'phone number in a format that can be parsed into E.164 format. E.164 ' + 'phone numbers are written in the format [+][country code][subscriber ' + 'number including area code].',\n      [\"invalid-provider-id\" /* AuthErrorCode.INVALID_PROVIDER_ID */]: 'The specified provider ID is invalid.',\n      [\"invalid-recipient-email\" /* AuthErrorCode.INVALID_RECIPIENT_EMAIL */]: 'The email corresponding to this action failed to send as the provided ' + 'recipient email address is invalid.',\n      [\"invalid-sender\" /* AuthErrorCode.INVALID_SENDER */]: 'The email template corresponding to this action contains an invalid sender email or name. ' + 'Please fix by going to the Auth email templates section in the Firebase Console.',\n      [\"invalid-verification-id\" /* AuthErrorCode.INVALID_SESSION_INFO */]: 'The verification ID used to create the phone auth credential is invalid.',\n      [\"invalid-tenant-id\" /* AuthErrorCode.INVALID_TENANT_ID */]: \"The Auth instance's tenant ID is invalid.\",\n      [\"login-blocked\" /* AuthErrorCode.LOGIN_BLOCKED */]: 'Login blocked by user-provided method: {$originalMessage}',\n      [\"missing-android-pkg-name\" /* AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME */]: 'An Android Package Name must be provided if the Android App is required to be installed.',\n      [\"auth-domain-config-required\" /* AuthErrorCode.MISSING_AUTH_DOMAIN */]: 'Be sure to include authDomain when calling firebase.initializeApp(), ' + 'by following the instructions in the Firebase console.',\n      [\"missing-app-credential\" /* AuthErrorCode.MISSING_APP_CREDENTIAL */]: 'The phone verification request is missing an application verifier ' + 'assertion. A reCAPTCHA response token needs to be provided.',\n      [\"missing-verification-code\" /* AuthErrorCode.MISSING_CODE */]: 'The phone auth credential was created with an empty SMS verification code.',\n      [\"missing-continue-uri\" /* AuthErrorCode.MISSING_CONTINUE_URI */]: 'A continue URL must be provided in the request.',\n      [\"missing-iframe-start\" /* AuthErrorCode.MISSING_IFRAME_START */]: 'An internal AuthError has occurred.',\n      [\"missing-ios-bundle-id\" /* AuthErrorCode.MISSING_IOS_BUNDLE_ID */]: 'An iOS Bundle ID must be provided if an App Store ID is provided.',\n      [\"missing-or-invalid-nonce\" /* AuthErrorCode.MISSING_OR_INVALID_NONCE */]: 'The request does not contain a valid nonce. This can occur if the ' + 'SHA-256 hash of the provided raw nonce does not match the hashed nonce ' + 'in the ID token payload.',\n      [\"missing-password\" /* AuthErrorCode.MISSING_PASSWORD */]: 'A non-empty password must be provided',\n      [\"missing-multi-factor-info\" /* AuthErrorCode.MISSING_MFA_INFO */]: 'No second factor identifier is provided.',\n      [\"missing-multi-factor-session\" /* AuthErrorCode.MISSING_MFA_SESSION */]: 'The request is missing proof of first factor successful sign-in.',\n      [\"missing-phone-number\" /* AuthErrorCode.MISSING_PHONE_NUMBER */]: 'To send verification codes, provide a phone number for the recipient.',\n      [\"missing-verification-id\" /* AuthErrorCode.MISSING_SESSION_INFO */]: 'The phone auth credential was created with an empty verification ID.',\n      [\"app-deleted\" /* AuthErrorCode.MODULE_DESTROYED */]: 'This instance of FirebaseApp has been deleted.',\n      [\"multi-factor-info-not-found\" /* AuthErrorCode.MFA_INFO_NOT_FOUND */]: 'The user does not have a second factor matching the identifier provided.',\n      [\"multi-factor-auth-required\" /* AuthErrorCode.MFA_REQUIRED */]: 'Proof of ownership of a second factor is required to complete sign-in.',\n      [\"account-exists-with-different-credential\" /* AuthErrorCode.NEED_CONFIRMATION */]: 'An account already exists with the same email address but different ' + 'sign-in credentials. Sign in using a provider associated with this ' + 'email address.',\n      [\"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */]: 'A network AuthError (such as timeout, interrupted connection or unreachable host) has occurred.',\n      [\"no-auth-event\" /* AuthErrorCode.NO_AUTH_EVENT */]: 'An internal AuthError has occurred.',\n      [\"no-such-provider\" /* AuthErrorCode.NO_SUCH_PROVIDER */]: 'User was not linked to an account with the given provider.',\n      [\"null-user\" /* AuthErrorCode.NULL_USER */]: 'A null user object was provided as the argument for an operation which ' + 'requires a non-null user object.',\n      [\"operation-not-allowed\" /* AuthErrorCode.OPERATION_NOT_ALLOWED */]: 'The given sign-in provider is disabled for this Firebase project. ' + 'Enable it in the Firebase console, under the sign-in method tab of the ' + 'Auth section.',\n      [\"operation-not-supported-in-this-environment\" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */]: 'This operation is not supported in the environment this application is ' + 'running on. \"location.protocol\" must be http, https or chrome-extension' + ' and web storage must be enabled.',\n      [\"popup-blocked\" /* AuthErrorCode.POPUP_BLOCKED */]: 'Unable to establish a connection with the popup. It may have been blocked by the browser.',\n      [\"popup-closed-by-user\" /* AuthErrorCode.POPUP_CLOSED_BY_USER */]: 'The popup has been closed by the user before finalizing the operation.',\n      [\"provider-already-linked\" /* AuthErrorCode.PROVIDER_ALREADY_LINKED */]: 'User can only be linked to one identity for the given provider.',\n      [\"quota-exceeded\" /* AuthErrorCode.QUOTA_EXCEEDED */]: \"The project's quota for this operation has been exceeded.\",\n      [\"redirect-cancelled-by-user\" /* AuthErrorCode.REDIRECT_CANCELLED_BY_USER */]: 'The redirect operation has been cancelled by the user before finalizing.',\n      [\"redirect-operation-pending\" /* AuthErrorCode.REDIRECT_OPERATION_PENDING */]: 'A redirect sign-in operation is already pending.',\n      [\"rejected-credential\" /* AuthErrorCode.REJECTED_CREDENTIAL */]: 'The request contains malformed or mismatching credentials.',\n      [\"second-factor-already-in-use\" /* AuthErrorCode.SECOND_FACTOR_ALREADY_ENROLLED */]: 'The second factor is already enrolled on this account.',\n      [\"maximum-second-factor-count-exceeded\" /* AuthErrorCode.SECOND_FACTOR_LIMIT_EXCEEDED */]: 'The maximum allowed number of second factors on a user has been exceeded.',\n      [\"tenant-id-mismatch\" /* AuthErrorCode.TENANT_ID_MISMATCH */]: \"The provided tenant ID does not match the Auth instance's tenant ID\",\n      [\"timeout\" /* AuthErrorCode.TIMEOUT */]: 'The operation has timed out.',\n      [\"user-token-expired\" /* AuthErrorCode.TOKEN_EXPIRED */]: \"The user's credential is no longer valid. The user must sign in again.\",\n      [\"too-many-requests\" /* AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER */]: 'We have blocked all requests from this device due to unusual activity. ' + 'Try again later.',\n      [\"unauthorized-continue-uri\" /* AuthErrorCode.UNAUTHORIZED_DOMAIN */]: 'The domain of the continue URL is not whitelisted.  Please whitelist ' + 'the domain in the Firebase console.',\n      [\"unsupported-first-factor\" /* AuthErrorCode.UNSUPPORTED_FIRST_FACTOR */]: 'Enrolling a second factor or signing in with a multi-factor account requires sign-in with a supported first factor.',\n      [\"unsupported-persistence-type\" /* AuthErrorCode.UNSUPPORTED_PERSISTENCE */]: 'The current environment does not support the specified persistence type.',\n      [\"unsupported-tenant-operation\" /* AuthErrorCode.UNSUPPORTED_TENANT_OPERATION */]: 'This operation is not supported in a multi-tenant context.',\n      [\"unverified-email\" /* AuthErrorCode.UNVERIFIED_EMAIL */]: 'The operation requires a verified email.',\n      [\"user-cancelled\" /* AuthErrorCode.USER_CANCELLED */]: 'The user did not grant your application the permissions it requested.',\n      [\"user-not-found\" /* AuthErrorCode.USER_DELETED */]: 'There is no user record corresponding to this identifier. The user may ' + 'have been deleted.',\n      [\"user-disabled\" /* AuthErrorCode.USER_DISABLED */]: 'The user account has been disabled by an administrator.',\n      [\"user-mismatch\" /* AuthErrorCode.USER_MISMATCH */]: 'The supplied credentials do not correspond to the previously signed in user.',\n      [\"user-signed-out\" /* AuthErrorCode.USER_SIGNED_OUT */]: '',\n      [\"weak-password\" /* AuthErrorCode.WEAK_PASSWORD */]: 'The password must be 6 characters long or more.',\n      [\"web-storage-unsupported\" /* AuthErrorCode.WEB_STORAGE_UNSUPPORTED */]: 'This browser is not supported or 3rd party cookies and data may be disabled.',\n      [\"already-initialized\" /* AuthErrorCode.ALREADY_INITIALIZED */]: 'initializeAuth() has already been called with ' + 'different options. To avoid this error, call initializeAuth() with the ' + 'same options as when it was originally called, or call getAuth() to return the' + ' already initialized instance.',\n      [\"missing-recaptcha-token\" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */]: 'The reCAPTCHA token is missing when sending request to the backend.',\n      [\"invalid-recaptcha-token\" /* AuthErrorCode.INVALID_RECAPTCHA_TOKEN */]: 'The reCAPTCHA token is invalid when sending request to the backend.',\n      [\"invalid-recaptcha-action\" /* AuthErrorCode.INVALID_RECAPTCHA_ACTION */]: 'The reCAPTCHA action is invalid when sending request to the backend.',\n      [\"recaptcha-not-enabled\" /* AuthErrorCode.RECAPTCHA_NOT_ENABLED */]: 'reCAPTCHA Enterprise integration is not enabled for this project.',\n      [\"missing-client-type\" /* AuthErrorCode.MISSING_CLIENT_TYPE */]: 'The reCAPTCHA client type is missing when sending request to the backend.',\n      [\"missing-recaptcha-version\" /* AuthErrorCode.MISSING_RECAPTCHA_VERSION */]: 'The reCAPTCHA version is missing when sending request to the backend.',\n      [\"invalid-req-type\" /* AuthErrorCode.INVALID_REQ_TYPE */]: 'Invalid request parameters.',\n      [\"invalid-recaptcha-version\" /* AuthErrorCode.INVALID_RECAPTCHA_VERSION */]: 'The reCAPTCHA version is invalid when sending request to the backend.',\n      [\"unsupported-password-policy-schema-version\" /* AuthErrorCode.UNSUPPORTED_PASSWORD_POLICY_SCHEMA_VERSION */]: 'The password policy received from the backend uses a schema version that is not supported by this version of the Firebase SDK.',\n      [\"password-does-not-meet-requirements\" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */]: 'The password does not meet the requirements.',\n      [\"invalid-hosting-link-domain\" /* AuthErrorCode.INVALID_HOSTING_LINK_DOMAIN */]: 'The provided Hosting link domain is not configured in Firebase Hosting or is not owned by ' + 'the current project. This cannot be a default Hosting domain (`web.app` or `firebaseapp.com`).'\n    };\n  }\n  function _prodErrorMap() {\n    // We will include this one message in the prod error map since by the very\n    // nature of this error, developers will never be able to see the message\n    // using the debugErrorMap (which is installed during auth initialization).\n    return {\n      [\"dependent-sdk-initialized-before-auth\" /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */]: 'Another Firebase SDK was initialized and is trying to use Auth before Auth is ' + 'initialized. Please be sure to call `initializeAuth` or `getAuth` before ' + 'starting any other Firebase SDK.'\n    };\n  }\n  /**\n   * A verbose error map with detailed descriptions for most error codes.\n   *\n   * See discussion at {@link AuthErrorMap}\n   *\n   * @public\n   */\n  var debugErrorMap = _debugErrorMap;\n  /**\n   * A minimal error map with all verbose error messages stripped.\n   *\n   * See discussion at {@link AuthErrorMap}\n   *\n   * @public\n   */\n  var prodErrorMap = _prodErrorMap;\n  var _DEFAULT_AUTH_ERROR_FACTORY = new util.ErrorFactory('auth', 'Firebase', _prodErrorMap());\n  /**\n   * A map of potential `Auth` error codes, for easier comparison with errors\n   * thrown by the SDK.\n   *\n   * @remarks\n   * Note that you can't tree-shake individual keys\n   * in the map, so by using the map you might substantially increase your\n   * bundle size.\n   *\n   * @public\n   */\n  var AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY = {\n    ADMIN_ONLY_OPERATION: 'auth/admin-restricted-operation',\n    ARGUMENT_ERROR: 'auth/argument-error',\n    APP_NOT_AUTHORIZED: 'auth/app-not-authorized',\n    APP_NOT_INSTALLED: 'auth/app-not-installed',\n    CAPTCHA_CHECK_FAILED: 'auth/captcha-check-failed',\n    CODE_EXPIRED: 'auth/code-expired',\n    CORDOVA_NOT_READY: 'auth/cordova-not-ready',\n    CORS_UNSUPPORTED: 'auth/cors-unsupported',\n    CREDENTIAL_ALREADY_IN_USE: 'auth/credential-already-in-use',\n    CREDENTIAL_MISMATCH: 'auth/custom-token-mismatch',\n    CREDENTIAL_TOO_OLD_LOGIN_AGAIN: 'auth/requires-recent-login',\n    DEPENDENT_SDK_INIT_BEFORE_AUTH: 'auth/dependent-sdk-initialized-before-auth',\n    DYNAMIC_LINK_NOT_ACTIVATED: 'auth/dynamic-link-not-activated',\n    EMAIL_CHANGE_NEEDS_VERIFICATION: 'auth/email-change-needs-verification',\n    EMAIL_EXISTS: 'auth/email-already-in-use',\n    EMULATOR_CONFIG_FAILED: 'auth/emulator-config-failed',\n    EXPIRED_OOB_CODE: 'auth/expired-action-code',\n    EXPIRED_POPUP_REQUEST: 'auth/cancelled-popup-request',\n    INTERNAL_ERROR: 'auth/internal-error',\n    INVALID_API_KEY: 'auth/invalid-api-key',\n    INVALID_APP_CREDENTIAL: 'auth/invalid-app-credential',\n    INVALID_APP_ID: 'auth/invalid-app-id',\n    INVALID_AUTH: 'auth/invalid-user-token',\n    INVALID_AUTH_EVENT: 'auth/invalid-auth-event',\n    INVALID_CERT_HASH: 'auth/invalid-cert-hash',\n    INVALID_CODE: 'auth/invalid-verification-code',\n    INVALID_CONTINUE_URI: 'auth/invalid-continue-uri',\n    INVALID_CORDOVA_CONFIGURATION: 'auth/invalid-cordova-configuration',\n    INVALID_CUSTOM_TOKEN: 'auth/invalid-custom-token',\n    INVALID_DYNAMIC_LINK_DOMAIN: 'auth/invalid-dynamic-link-domain',\n    INVALID_EMAIL: 'auth/invalid-email',\n    INVALID_EMULATOR_SCHEME: 'auth/invalid-emulator-scheme',\n    INVALID_IDP_RESPONSE: 'auth/invalid-credential',\n    INVALID_LOGIN_CREDENTIALS: 'auth/invalid-credential',\n    INVALID_MESSAGE_PAYLOAD: 'auth/invalid-message-payload',\n    INVALID_MFA_SESSION: 'auth/invalid-multi-factor-session',\n    INVALID_OAUTH_CLIENT_ID: 'auth/invalid-oauth-client-id',\n    INVALID_OAUTH_PROVIDER: 'auth/invalid-oauth-provider',\n    INVALID_OOB_CODE: 'auth/invalid-action-code',\n    INVALID_ORIGIN: 'auth/unauthorized-domain',\n    INVALID_PASSWORD: 'auth/wrong-password',\n    INVALID_PERSISTENCE: 'auth/invalid-persistence-type',\n    INVALID_PHONE_NUMBER: 'auth/invalid-phone-number',\n    INVALID_PROVIDER_ID: 'auth/invalid-provider-id',\n    INVALID_RECIPIENT_EMAIL: 'auth/invalid-recipient-email',\n    INVALID_SENDER: 'auth/invalid-sender',\n    INVALID_SESSION_INFO: 'auth/invalid-verification-id',\n    INVALID_TENANT_ID: 'auth/invalid-tenant-id',\n    MFA_INFO_NOT_FOUND: 'auth/multi-factor-info-not-found',\n    MFA_REQUIRED: 'auth/multi-factor-auth-required',\n    MISSING_ANDROID_PACKAGE_NAME: 'auth/missing-android-pkg-name',\n    MISSING_APP_CREDENTIAL: 'auth/missing-app-credential',\n    MISSING_AUTH_DOMAIN: 'auth/auth-domain-config-required',\n    MISSING_CODE: 'auth/missing-verification-code',\n    MISSING_CONTINUE_URI: 'auth/missing-continue-uri',\n    MISSING_IFRAME_START: 'auth/missing-iframe-start',\n    MISSING_IOS_BUNDLE_ID: 'auth/missing-ios-bundle-id',\n    MISSING_OR_INVALID_NONCE: 'auth/missing-or-invalid-nonce',\n    MISSING_MFA_INFO: 'auth/missing-multi-factor-info',\n    MISSING_MFA_SESSION: 'auth/missing-multi-factor-session',\n    MISSING_PHONE_NUMBER: 'auth/missing-phone-number',\n    MISSING_SESSION_INFO: 'auth/missing-verification-id',\n    MODULE_DESTROYED: 'auth/app-deleted',\n    NEED_CONFIRMATION: 'auth/account-exists-with-different-credential',\n    NETWORK_REQUEST_FAILED: 'auth/network-request-failed',\n    NULL_USER: 'auth/null-user',\n    NO_AUTH_EVENT: 'auth/no-auth-event',\n    NO_SUCH_PROVIDER: 'auth/no-such-provider',\n    OPERATION_NOT_ALLOWED: 'auth/operation-not-allowed',\n    OPERATION_NOT_SUPPORTED: 'auth/operation-not-supported-in-this-environment',\n    POPUP_BLOCKED: 'auth/popup-blocked',\n    POPUP_CLOSED_BY_USER: 'auth/popup-closed-by-user',\n    PROVIDER_ALREADY_LINKED: 'auth/provider-already-linked',\n    QUOTA_EXCEEDED: 'auth/quota-exceeded',\n    REDIRECT_CANCELLED_BY_USER: 'auth/redirect-cancelled-by-user',\n    REDIRECT_OPERATION_PENDING: 'auth/redirect-operation-pending',\n    REJECTED_CREDENTIAL: 'auth/rejected-credential',\n    SECOND_FACTOR_ALREADY_ENROLLED: 'auth/second-factor-already-in-use',\n    SECOND_FACTOR_LIMIT_EXCEEDED: 'auth/maximum-second-factor-count-exceeded',\n    TENANT_ID_MISMATCH: 'auth/tenant-id-mismatch',\n    TIMEOUT: 'auth/timeout',\n    TOKEN_EXPIRED: 'auth/user-token-expired',\n    TOO_MANY_ATTEMPTS_TRY_LATER: 'auth/too-many-requests',\n    UNAUTHORIZED_DOMAIN: 'auth/unauthorized-continue-uri',\n    UNSUPPORTED_FIRST_FACTOR: 'auth/unsupported-first-factor',\n    UNSUPPORTED_PERSISTENCE: 'auth/unsupported-persistence-type',\n    UNSUPPORTED_TENANT_OPERATION: 'auth/unsupported-tenant-operation',\n    UNVERIFIED_EMAIL: 'auth/unverified-email',\n    USER_CANCELLED: 'auth/user-cancelled',\n    USER_DELETED: 'auth/user-not-found',\n    USER_DISABLED: 'auth/user-disabled',\n    USER_MISMATCH: 'auth/user-mismatch',\n    USER_SIGNED_OUT: 'auth/user-signed-out',\n    WEAK_PASSWORD: 'auth/weak-password',\n    WEB_STORAGE_UNSUPPORTED: 'auth/web-storage-unsupported',\n    ALREADY_INITIALIZED: 'auth/already-initialized',\n    RECAPTCHA_NOT_ENABLED: 'auth/recaptcha-not-enabled',\n    MISSING_RECAPTCHA_TOKEN: 'auth/missing-recaptcha-token',\n    INVALID_RECAPTCHA_TOKEN: 'auth/invalid-recaptcha-token',\n    INVALID_RECAPTCHA_ACTION: 'auth/invalid-recaptcha-action',\n    MISSING_CLIENT_TYPE: 'auth/missing-client-type',\n    MISSING_RECAPTCHA_VERSION: 'auth/missing-recaptcha-version',\n    INVALID_RECAPTCHA_VERSION: 'auth/invalid-recaptcha-version',\n    INVALID_REQ_TYPE: 'auth/invalid-req-type',\n    INVALID_HOSTING_LINK_DOMAIN: 'auth/invalid-hosting-link-domain'\n  };\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  var logClient = new logger.Logger('@firebase/auth');\n  function _logWarn(msg) {\n    if (logClient.logLevel <= logger.LogLevel.WARN) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key2 = 1; _key2 < _len; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n      logClient.warn(`Auth (${app.SDK_VERSION}): ${msg}`, ...args);\n    }\n  }\n  function _logError(msg) {\n    if (logClient.logLevel <= logger.LogLevel.ERROR) {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key3 = 1; _key3 < _len2; _key3++) {\n        args[_key3 - 1] = arguments[_key3];\n      }\n      logClient.error(`Auth (${app.SDK_VERSION}): ${msg}`, ...args);\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _fail(authOrCode) {\n    for (var _len3 = arguments.length, rest = new Array(_len3 > 1 ? _len3 - 1 : 0), _key4 = 1; _key4 < _len3; _key4++) {\n      rest[_key4 - 1] = arguments[_key4];\n    }\n    throw createErrorInternal(authOrCode, ...rest);\n  }\n  function _createError(authOrCode) {\n    for (var _len4 = arguments.length, rest = new Array(_len4 > 1 ? _len4 - 1 : 0), _key5 = 1; _key5 < _len4; _key5++) {\n      rest[_key5 - 1] = arguments[_key5];\n    }\n    return createErrorInternal(authOrCode, ...rest);\n  }\n  function _errorWithCustomMessage(auth, code, message) {\n    var errorMap = {\n      ...prodErrorMap(),\n      [code]: message\n    };\n    var factory = new util.ErrorFactory('auth', 'Firebase', errorMap);\n    return factory.create(code, {\n      appName: auth.name\n    });\n  }\n  function _serverAppCurrentUserOperationNotSupportedError(auth) {\n    return _errorWithCustomMessage(auth, \"operation-not-supported-in-this-environment\" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */, 'Operations that alter the current user are not supported in conjunction with FirebaseServerApp');\n  }\n  function _assertInstanceOf(auth, object, instance) {\n    var constructorInstance = instance;\n    if (!(object instanceof constructorInstance)) {\n      if (constructorInstance.name !== object.constructor.name) {\n        _fail(auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      }\n      throw _errorWithCustomMessage(auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */, `Type of ${object.constructor.name} does not match expected instance.` + `Did you pass a reference from a different Auth SDK?`);\n    }\n  }\n  function createErrorInternal(authOrCode) {\n    for (var _len5 = arguments.length, rest = new Array(_len5 > 1 ? _len5 - 1 : 0), _key6 = 1; _key6 < _len5; _key6++) {\n      rest[_key6 - 1] = arguments[_key6];\n    }\n    if (typeof authOrCode !== 'string') {\n      var code = rest[0];\n      var fullParams = [...rest.slice(1)];\n      if (fullParams[0]) {\n        fullParams[0].appName = authOrCode.name;\n      }\n      return authOrCode._errorFactory.create(code, ...fullParams);\n    }\n    return _DEFAULT_AUTH_ERROR_FACTORY.create(authOrCode, ...rest);\n  }\n  function _assert(assertion, authOrCode) {\n    if (!assertion) {\n      for (var _len6 = arguments.length, rest = new Array(_len6 > 2 ? _len6 - 2 : 0), _key7 = 2; _key7 < _len6; _key7++) {\n        rest[_key7 - 2] = arguments[_key7];\n      }\n      throw createErrorInternal(authOrCode, ...rest);\n    }\n  }\n  /**\n   * Unconditionally fails, throwing an internal error with the given message.\n   *\n   * @param failure type of failure encountered\n   * @throws Error\n   */\n  function debugFail(failure) {\n    // Log the failure in addition to throw an exception, just in case the\n    // exception is swallowed.\n    var message = `INTERNAL ASSERTION FAILED: ` + failure;\n    _logError(message);\n    // NOTE: We don't use FirebaseError here because these are internal failures\n    // that cannot be handled by the user. (Also it would create a circular\n    // dependency between the error and assert modules which doesn't work.)\n    throw new Error(message);\n  }\n  /**\n   * Fails if the given assertion condition is false, throwing an Error with the\n   * given message if it did.\n   *\n   * @param assertion\n   * @param message\n   */\n  function debugAssert(assertion, message) {\n    if (!assertion) {\n      debugFail(message);\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _getCurrentUrl() {\n    return typeof self !== 'undefined' && self.location?.href || '';\n  }\n  function _isHttpOrHttps() {\n    return _getCurrentScheme() === 'http:' || _getCurrentScheme() === 'https:';\n  }\n  function _getCurrentScheme() {\n    return typeof self !== 'undefined' && self.location?.protocol || null;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Determine whether the browser is working online\n   */\n  function _isOnline() {\n    if (typeof navigator !== 'undefined' && navigator && 'onLine' in navigator && typeof navigator.onLine === 'boolean' && (\n    // Apply only for traditional web apps and Chrome extensions.\n    // This is especially true for Cordova apps which have unreliable\n    // navigator.onLine behavior unless cordova-plugin-network-information is\n    // installed which overwrites the native navigator.onLine value and\n    // defines navigator.connection.\n    _isHttpOrHttps() || util.isBrowserExtension() || 'connection' in navigator)) {\n      return navigator.onLine;\n    }\n    // If we can't determine the state, assume it is online.\n    return true;\n  }\n  function _getUserLanguage() {\n    if (typeof navigator === 'undefined') {\n      return null;\n    }\n    var navigatorLanguage = navigator;\n    return (\n      // Most reliable, but only supported in Chrome/Firefox.\n      navigatorLanguage.languages && navigatorLanguage.languages[0] ||\n      // Supported in most browsers, but returns the language of the browser\n      // UI, not the language set in browser settings.\n      navigatorLanguage.language ||\n      // Couldn't determine language.\n      null\n    );\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * A structure to help pick between a range of long and short delay durations\n   * depending on the current environment. In general, the long delay is used for\n   * mobile environments whereas short delays are used for desktop environments.\n   */\n  var Delay = /*#__PURE__*/function () {\n    function Delay(shortDelay, longDelay) {\n      _classCallCheck(this, Delay);\n      this.shortDelay = shortDelay;\n      this.longDelay = longDelay;\n      // Internal error when improperly initialized.\n      debugAssert(longDelay > shortDelay, 'Short delay should be less than long delay!');\n      this.isMobile = util.isMobileCordova() || util.isReactNative();\n    }\n    return _createClass(Delay, [{\n      key: \"get\",\n      value: function get() {\n        if (!_isOnline()) {\n          // Pick the shorter timeout.\n          return Math.min(5000 /* DelayMin.OFFLINE */, this.shortDelay);\n        }\n        // If running in a mobile environment, return the long delay, otherwise\n        // return the short delay.\n        // This could be improved in the future to dynamically change based on other\n        // variables instead of just reading the current environment.\n        return this.isMobile ? this.longDelay : this.shortDelay;\n      }\n    }]);\n  }();\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _emulatorUrl(config, path) {\n    debugAssert(config.emulator, 'Emulator should always be set here');\n    var url = config.emulator.url;\n    if (!path) {\n      return url;\n    }\n    return `${url}${path.startsWith('/') ? path.slice(1) : path}`;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  var FetchProvider = /*#__PURE__*/function () {\n    function FetchProvider() {\n      _classCallCheck(this, FetchProvider);\n    }\n    return _createClass(FetchProvider, null, [{\n      key: \"initialize\",\n      value: function initialize(fetchImpl, headersImpl, responseImpl) {\n        this.fetchImpl = fetchImpl;\n        if (headersImpl) {\n          this.headersImpl = headersImpl;\n        }\n        if (responseImpl) {\n          this.responseImpl = responseImpl;\n        }\n      }\n    }, {\n      key: \"fetch\",\n      value: function (_fetch) {\n        function fetch() {\n          return _fetch.apply(this, arguments);\n        }\n        fetch.toString = function () {\n          return _fetch.toString();\n        };\n        return fetch;\n      }(function () {\n        if (this.fetchImpl) {\n          return this.fetchImpl;\n        }\n        if (typeof self !== 'undefined' && 'fetch' in self) {\n          return self.fetch;\n        }\n        if (typeof globalThis !== 'undefined' && globalThis.fetch) {\n          return globalThis.fetch;\n        }\n        if (typeof fetch !== 'undefined') {\n          return fetch;\n        }\n        debugFail('Could not find fetch implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');\n      })\n    }, {\n      key: \"headers\",\n      value: function headers() {\n        if (this.headersImpl) {\n          return this.headersImpl;\n        }\n        if (typeof self !== 'undefined' && 'Headers' in self) {\n          return self.Headers;\n        }\n        if (typeof globalThis !== 'undefined' && globalThis.Headers) {\n          return globalThis.Headers;\n        }\n        if (typeof Headers !== 'undefined') {\n          return Headers;\n        }\n        debugFail('Could not find Headers implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');\n      }\n    }, {\n      key: \"response\",\n      value: function response() {\n        if (this.responseImpl) {\n          return this.responseImpl;\n        }\n        if (typeof self !== 'undefined' && 'Response' in self) {\n          return self.Response;\n        }\n        if (typeof globalThis !== 'undefined' && globalThis.Response) {\n          return globalThis.Response;\n        }\n        if (typeof Response !== 'undefined') {\n          return Response;\n        }\n        debugFail('Could not find Response implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');\n      }\n    }]);\n  }();\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Map from errors returned by the server to errors to developer visible errors\n   */\n  var SERVER_ERROR_MAP = {\n    // Custom token errors.\n    [\"CREDENTIAL_MISMATCH\" /* ServerError.CREDENTIAL_MISMATCH */]: \"custom-token-mismatch\" /* AuthErrorCode.CREDENTIAL_MISMATCH */,\n\n    // This can only happen if the SDK sends a bad request.\n    [\"MISSING_CUSTOM_TOKEN\" /* ServerError.MISSING_CUSTOM_TOKEN */]: \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */,\n\n    // Create Auth URI errors.\n    [\"INVALID_IDENTIFIER\" /* ServerError.INVALID_IDENTIFIER */]: \"invalid-email\" /* AuthErrorCode.INVALID_EMAIL */,\n\n    // This can only happen if the SDK sends a bad request.\n    [\"MISSING_CONTINUE_URI\" /* ServerError.MISSING_CONTINUE_URI */]: \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */,\n\n    // Sign in with email and password errors (some apply to sign up too).\n    [\"INVALID_PASSWORD\" /* ServerError.INVALID_PASSWORD */]: \"wrong-password\" /* AuthErrorCode.INVALID_PASSWORD */,\n\n    // This can only happen if the SDK sends a bad request.\n    [\"MISSING_PASSWORD\" /* ServerError.MISSING_PASSWORD */]: \"missing-password\" /* AuthErrorCode.MISSING_PASSWORD */,\n\n    // Thrown if Email Enumeration Protection is enabled in the project and the email or password is\n    // invalid.\n    [\"INVALID_LOGIN_CREDENTIALS\" /* ServerError.INVALID_LOGIN_CREDENTIALS */]: \"invalid-credential\" /* AuthErrorCode.INVALID_CREDENTIAL */,\n\n    // Sign up with email and password errors.\n    [\"EMAIL_EXISTS\" /* ServerError.EMAIL_EXISTS */]: \"email-already-in-use\" /* AuthErrorCode.EMAIL_EXISTS */,\n    [\"PASSWORD_LOGIN_DISABLED\" /* ServerError.PASSWORD_LOGIN_DISABLED */]: \"operation-not-allowed\" /* AuthErrorCode.OPERATION_NOT_ALLOWED */,\n\n    // Verify assertion for sign in with credential errors:\n    [\"INVALID_IDP_RESPONSE\" /* ServerError.INVALID_IDP_RESPONSE */]: \"invalid-credential\" /* AuthErrorCode.INVALID_CREDENTIAL */,\n    [\"INVALID_PENDING_TOKEN\" /* ServerError.INVALID_PENDING_TOKEN */]: \"invalid-credential\" /* AuthErrorCode.INVALID_CREDENTIAL */,\n    [\"FEDERATED_USER_ID_ALREADY_LINKED\" /* ServerError.FEDERATED_USER_ID_ALREADY_LINKED */]: \"credential-already-in-use\" /* AuthErrorCode.CREDENTIAL_ALREADY_IN_USE */,\n\n    // This can only happen if the SDK sends a bad request.\n    [\"MISSING_REQ_TYPE\" /* ServerError.MISSING_REQ_TYPE */]: \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */,\n\n    // Send Password reset email errors:\n    [\"EMAIL_NOT_FOUND\" /* ServerError.EMAIL_NOT_FOUND */]: \"user-not-found\" /* AuthErrorCode.USER_DELETED */,\n    [\"RESET_PASSWORD_EXCEED_LIMIT\" /* ServerError.RESET_PASSWORD_EXCEED_LIMIT */]: \"too-many-requests\" /* AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER */,\n    [\"EXPIRED_OOB_CODE\" /* ServerError.EXPIRED_OOB_CODE */]: \"expired-action-code\" /* AuthErrorCode.EXPIRED_OOB_CODE */,\n    [\"INVALID_OOB_CODE\" /* ServerError.INVALID_OOB_CODE */]: \"invalid-action-code\" /* AuthErrorCode.INVALID_OOB_CODE */,\n\n    // This can only happen if the SDK sends a bad request.\n    [\"MISSING_OOB_CODE\" /* ServerError.MISSING_OOB_CODE */]: \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */,\n\n    // Operations that require ID token in request:\n    [\"CREDENTIAL_TOO_OLD_LOGIN_AGAIN\" /* ServerError.CREDENTIAL_TOO_OLD_LOGIN_AGAIN */]: \"requires-recent-login\" /* AuthErrorCode.CREDENTIAL_TOO_OLD_LOGIN_AGAIN */,\n    [\"INVALID_ID_TOKEN\" /* ServerError.INVALID_ID_TOKEN */]: \"invalid-user-token\" /* AuthErrorCode.INVALID_AUTH */,\n    [\"TOKEN_EXPIRED\" /* ServerError.TOKEN_EXPIRED */]: \"user-token-expired\" /* AuthErrorCode.TOKEN_EXPIRED */,\n    [\"USER_NOT_FOUND\" /* ServerError.USER_NOT_FOUND */]: \"user-token-expired\" /* AuthErrorCode.TOKEN_EXPIRED */,\n\n    // Other errors.\n    [\"TOO_MANY_ATTEMPTS_TRY_LATER\" /* ServerError.TOO_MANY_ATTEMPTS_TRY_LATER */]: \"too-many-requests\" /* AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER */,\n    [\"PASSWORD_DOES_NOT_MEET_REQUIREMENTS\" /* ServerError.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */]: \"password-does-not-meet-requirements\" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */,\n\n    // Phone Auth related errors.\n    [\"INVALID_CODE\" /* ServerError.INVALID_CODE */]: \"invalid-verification-code\" /* AuthErrorCode.INVALID_CODE */,\n    [\"INVALID_SESSION_INFO\" /* ServerError.INVALID_SESSION_INFO */]: \"invalid-verification-id\" /* AuthErrorCode.INVALID_SESSION_INFO */,\n    [\"INVALID_TEMPORARY_PROOF\" /* ServerError.INVALID_TEMPORARY_PROOF */]: \"invalid-credential\" /* AuthErrorCode.INVALID_CREDENTIAL */,\n    [\"MISSING_SESSION_INFO\" /* ServerError.MISSING_SESSION_INFO */]: \"missing-verification-id\" /* AuthErrorCode.MISSING_SESSION_INFO */,\n    [\"SESSION_EXPIRED\" /* ServerError.SESSION_EXPIRED */]: \"code-expired\" /* AuthErrorCode.CODE_EXPIRED */,\n\n    // Other action code errors when additional settings passed.\n    // MISSING_CONTINUE_URI is getting mapped to INTERNAL_ERROR above.\n    // This is OK as this error will be caught by client side validation.\n    [\"MISSING_ANDROID_PACKAGE_NAME\" /* ServerError.MISSING_ANDROID_PACKAGE_NAME */]: \"missing-android-pkg-name\" /* AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME */,\n    [\"UNAUTHORIZED_DOMAIN\" /* ServerError.UNAUTHORIZED_DOMAIN */]: \"unauthorized-continue-uri\" /* AuthErrorCode.UNAUTHORIZED_DOMAIN */,\n\n    // getProjectConfig errors when clientId is passed.\n    [\"INVALID_OAUTH_CLIENT_ID\" /* ServerError.INVALID_OAUTH_CLIENT_ID */]: \"invalid-oauth-client-id\" /* AuthErrorCode.INVALID_OAUTH_CLIENT_ID */,\n\n    // User actions (sign-up or deletion) disabled errors.\n    [\"ADMIN_ONLY_OPERATION\" /* ServerError.ADMIN_ONLY_OPERATION */]: \"admin-restricted-operation\" /* AuthErrorCode.ADMIN_ONLY_OPERATION */,\n\n    // Multi factor related errors.\n    [\"INVALID_MFA_PENDING_CREDENTIAL\" /* ServerError.INVALID_MFA_PENDING_CREDENTIAL */]: \"invalid-multi-factor-session\" /* AuthErrorCode.INVALID_MFA_SESSION */,\n    [\"MFA_ENROLLMENT_NOT_FOUND\" /* ServerError.MFA_ENROLLMENT_NOT_FOUND */]: \"multi-factor-info-not-found\" /* AuthErrorCode.MFA_INFO_NOT_FOUND */,\n    [\"MISSING_MFA_ENROLLMENT_ID\" /* ServerError.MISSING_MFA_ENROLLMENT_ID */]: \"missing-multi-factor-info\" /* AuthErrorCode.MISSING_MFA_INFO */,\n    [\"MISSING_MFA_PENDING_CREDENTIAL\" /* ServerError.MISSING_MFA_PENDING_CREDENTIAL */]: \"missing-multi-factor-session\" /* AuthErrorCode.MISSING_MFA_SESSION */,\n    [\"SECOND_FACTOR_EXISTS\" /* ServerError.SECOND_FACTOR_EXISTS */]: \"second-factor-already-in-use\" /* AuthErrorCode.SECOND_FACTOR_ALREADY_ENROLLED */,\n    [\"SECOND_FACTOR_LIMIT_EXCEEDED\" /* ServerError.SECOND_FACTOR_LIMIT_EXCEEDED */]: \"maximum-second-factor-count-exceeded\" /* AuthErrorCode.SECOND_FACTOR_LIMIT_EXCEEDED */,\n\n    // Blocking functions related errors.\n    [\"BLOCKING_FUNCTION_ERROR_RESPONSE\" /* ServerError.BLOCKING_FUNCTION_ERROR_RESPONSE */]: \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */,\n\n    // Recaptcha related errors.\n    [\"RECAPTCHA_NOT_ENABLED\" /* ServerError.RECAPTCHA_NOT_ENABLED */]: \"recaptcha-not-enabled\" /* AuthErrorCode.RECAPTCHA_NOT_ENABLED */,\n    [\"MISSING_RECAPTCHA_TOKEN\" /* ServerError.MISSING_RECAPTCHA_TOKEN */]: \"missing-recaptcha-token\" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */,\n    [\"INVALID_RECAPTCHA_TOKEN\" /* ServerError.INVALID_RECAPTCHA_TOKEN */]: \"invalid-recaptcha-token\" /* AuthErrorCode.INVALID_RECAPTCHA_TOKEN */,\n    [\"INVALID_RECAPTCHA_ACTION\" /* ServerError.INVALID_RECAPTCHA_ACTION */]: \"invalid-recaptcha-action\" /* AuthErrorCode.INVALID_RECAPTCHA_ACTION */,\n    [\"MISSING_CLIENT_TYPE\" /* ServerError.MISSING_CLIENT_TYPE */]: \"missing-client-type\" /* AuthErrorCode.MISSING_CLIENT_TYPE */,\n    [\"MISSING_RECAPTCHA_VERSION\" /* ServerError.MISSING_RECAPTCHA_VERSION */]: \"missing-recaptcha-version\" /* AuthErrorCode.MISSING_RECAPTCHA_VERSION */,\n    [\"INVALID_RECAPTCHA_VERSION\" /* ServerError.INVALID_RECAPTCHA_VERSION */]: \"invalid-recaptcha-version\" /* AuthErrorCode.INVALID_RECAPTCHA_VERSION */,\n    [\"INVALID_REQ_TYPE\" /* ServerError.INVALID_REQ_TYPE */]: \"invalid-req-type\" /* AuthErrorCode.INVALID_REQ_TYPE */\n  };\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  var CookieAuthProxiedEndpoints = [\"/v1/accounts:signInWithCustomToken\" /* Endpoint.SIGN_IN_WITH_CUSTOM_TOKEN */, \"/v1/accounts:signInWithEmailLink\" /* Endpoint.SIGN_IN_WITH_EMAIL_LINK */, \"/v1/accounts:signInWithIdp\" /* Endpoint.SIGN_IN_WITH_IDP */, \"/v1/accounts:signInWithPassword\" /* Endpoint.SIGN_IN_WITH_PASSWORD */, \"/v1/accounts:signInWithPhoneNumber\" /* Endpoint.SIGN_IN_WITH_PHONE_NUMBER */, \"/v1/token\" /* Endpoint.TOKEN */];\n  var DEFAULT_API_TIMEOUT_MS = new Delay(30000, 60000);\n  function _addTidIfNecessary(auth, request) {\n    if (auth.tenantId && !request.tenantId) {\n      return {\n        ...request,\n        tenantId: auth.tenantId\n      };\n    }\n    return request;\n  }\n  function _performApiRequest(_x, _x2, _x3, _x4) {\n    return _performApiRequest2.apply(this, arguments);\n  }\n  function _performApiRequest2() {\n    _performApiRequest2 = _asyncToGenerator(function* (auth, method, path, request) {\n      var customErrorMap = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n      return _performFetchWithErrorHandling(auth, customErrorMap, /*#__PURE__*/_asyncToGenerator(function* () {\n        var body = {};\n        var params = {};\n        if (request) {\n          if (method === \"GET\" /* HttpMethod.GET */) {\n            params = request;\n          } else {\n            body = {\n              body: JSON.stringify(request)\n            };\n          }\n        }\n        var query = util.querystring({\n          key: auth.config.apiKey,\n          ...params\n        }).slice(1);\n        var headers = yield auth._getAdditionalHeaders();\n        headers[\"Content-Type\" /* HttpHeader.CONTENT_TYPE */] = 'application/json';\n        if (auth.languageCode) {\n          headers[\"X-Firebase-Locale\" /* HttpHeader.X_FIREBASE_LOCALE */] = auth.languageCode;\n        }\n        var fetchArgs = {\n          method,\n          headers,\n          ...body\n        };\n        /* Security-conscious server-side frameworks tend to have built in mitigations for referrer\n           problems\". See the Cloudflare GitHub issue #487: Error: The 'referrerPolicy' field on\n           'RequestInitializerDict' is not implemented.\"\n           https://github.com/cloudflare/next-on-pages/issues/487 */\n        if (!util.isCloudflareWorker()) {\n          fetchArgs.referrerPolicy = 'no-referrer';\n        }\n        if (auth.emulatorConfig && util.isCloudWorkstation(auth.emulatorConfig.host)) {\n          fetchArgs.credentials = 'include';\n        }\n        return FetchProvider.fetch()(yield _getFinalTarget(auth, auth.config.apiHost, path, query), fetchArgs);\n      }));\n    });\n    return _performApiRequest2.apply(this, arguments);\n  }\n  function _performFetchWithErrorHandling(_x5, _x6, _x7) {\n    return _performFetchWithErrorHandling2.apply(this, arguments);\n  }\n  function _performFetchWithErrorHandling2() {\n    _performFetchWithErrorHandling2 = _asyncToGenerator(function* (auth, customErrorMap, fetchFn) {\n      auth._canInitEmulator = false;\n      var errorMap = {\n        ...SERVER_ERROR_MAP,\n        ...customErrorMap\n      };\n      try {\n        var networkTimeout = new NetworkTimeout(auth);\n        var response = yield Promise.race([fetchFn(), networkTimeout.promise]);\n        // If we've reached this point, the fetch succeeded and the networkTimeout\n        // didn't throw; clear the network timeout delay so that Node won't hang\n        networkTimeout.clearNetworkTimeout();\n        var json = yield response.json();\n        if ('needConfirmation' in json) {\n          throw _makeTaggedError(auth, \"account-exists-with-different-credential\" /* AuthErrorCode.NEED_CONFIRMATION */, json);\n        }\n        if (response.ok && !('errorMessage' in json)) {\n          return json;\n        } else {\n          var errorMessage = response.ok ? json.errorMessage : json.error.message;\n          var _errorMessage$split = errorMessage.split(' : '),\n            _errorMessage$split2 = _slicedToArray(_errorMessage$split, 2),\n            serverErrorCode = _errorMessage$split2[0],\n            serverErrorMessage = _errorMessage$split2[1];\n          if (serverErrorCode === \"FEDERATED_USER_ID_ALREADY_LINKED\" /* ServerError.FEDERATED_USER_ID_ALREADY_LINKED */) {\n            throw _makeTaggedError(auth, \"credential-already-in-use\" /* AuthErrorCode.CREDENTIAL_ALREADY_IN_USE */, json);\n          } else if (serverErrorCode === \"EMAIL_EXISTS\" /* ServerError.EMAIL_EXISTS */) {\n            throw _makeTaggedError(auth, \"email-already-in-use\" /* AuthErrorCode.EMAIL_EXISTS */, json);\n          } else if (serverErrorCode === \"USER_DISABLED\" /* ServerError.USER_DISABLED */) {\n            throw _makeTaggedError(auth, \"user-disabled\" /* AuthErrorCode.USER_DISABLED */, json);\n          }\n          var authError = errorMap[serverErrorCode] || serverErrorCode.toLowerCase().replace(/[_\\s]+/g, '-');\n          if (serverErrorMessage) {\n            throw _errorWithCustomMessage(auth, authError, serverErrorMessage);\n          } else {\n            _fail(auth, authError);\n          }\n        }\n      } catch (e) {\n        if (e instanceof util.FirebaseError) {\n          throw e;\n        }\n        // Changing this to a different error code will log user out when there is a network error\n        // because we treat any error other than NETWORK_REQUEST_FAILED as token is invalid.\n        // https://github.com/firebase/firebase-js-sdk/blob/4fbc73610d70be4e0852e7de63a39cb7897e8546/packages/auth/src/core/auth/auth_impl.ts#L309-L316\n        _fail(auth, \"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */, {\n          'message': String(e)\n        });\n      }\n    });\n    return _performFetchWithErrorHandling2.apply(this, arguments);\n  }\n  function _performSignInRequest(_x8, _x9, _x0, _x1) {\n    return _performSignInRequest2.apply(this, arguments);\n  }\n  function _performSignInRequest2() {\n    _performSignInRequest2 = _asyncToGenerator(function* (auth, method, path, request) {\n      var customErrorMap = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n      var serverResponse = yield _performApiRequest(auth, method, path, request, customErrorMap);\n      if ('mfaPendingCredential' in serverResponse) {\n        _fail(auth, \"multi-factor-auth-required\" /* AuthErrorCode.MFA_REQUIRED */, {\n          _serverResponse: serverResponse\n        });\n      }\n      return serverResponse;\n    });\n    return _performSignInRequest2.apply(this, arguments);\n  }\n  function _getFinalTarget(_x10, _x11, _x12, _x13) {\n    return _getFinalTarget2.apply(this, arguments);\n  }\n  function _getFinalTarget2() {\n    _getFinalTarget2 = _asyncToGenerator(function* (auth, host, path, query) {\n      var base = `${host}${path}?${query}`;\n      var authInternal = auth;\n      var finalTarget = authInternal.config.emulator ? _emulatorUrl(auth.config, base) : `${auth.config.apiScheme}://${base}`;\n      // Cookie auth works by MiTMing the signIn and token endpoints from the developer's backend,\n      // saving the idToken and refreshToken into cookies, and then redacting the refreshToken\n      // from the response\n      if (CookieAuthProxiedEndpoints.includes(path)) {\n        // Persistence manager is async, we need to await it. We can't just wait for auth initialized\n        // here since auth initialization calls this function.\n        yield authInternal._persistenceManagerAvailable;\n        if (authInternal._getPersistenceType() === \"COOKIE\" /* PersistenceType.COOKIE */) {\n          var cookiePersistence = authInternal._getPersistence();\n          return cookiePersistence._getFinalTarget(finalTarget).toString();\n        }\n      }\n      return finalTarget;\n    });\n    return _getFinalTarget2.apply(this, arguments);\n  }\n  function _parseEnforcementState(enforcementStateStr) {\n    switch (enforcementStateStr) {\n      case 'ENFORCE':\n        return \"ENFORCE\" /* EnforcementState.ENFORCE */;\n      case 'AUDIT':\n        return \"AUDIT\" /* EnforcementState.AUDIT */;\n      case 'OFF':\n        return \"OFF\" /* EnforcementState.OFF */;\n      default:\n        return \"ENFORCEMENT_STATE_UNSPECIFIED\" /* EnforcementState.ENFORCEMENT_STATE_UNSPECIFIED */;\n    }\n  }\n  var NetworkTimeout = /*#__PURE__*/function () {\n    function NetworkTimeout(auth) {\n      _classCallCheck(this, NetworkTimeout);\n      this.auth = auth;\n      // Node timers and browser timers are fundamentally incompatible, but we\n      // don't care about the value here\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.timer = null;\n      this.promise = new Promise((_, reject) => {\n        this.timer = setTimeout(() => {\n          return reject(_createError(this.auth, \"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */));\n        }, DEFAULT_API_TIMEOUT_MS.get());\n      });\n    }\n    return _createClass(NetworkTimeout, [{\n      key: \"clearNetworkTimeout\",\n      value: function clearNetworkTimeout() {\n        clearTimeout(this.timer);\n      }\n    }]);\n  }();\n  function _makeTaggedError(auth, code, response) {\n    var errorParams = {\n      appName: auth.name\n    };\n    if (response.email) {\n      errorParams.email = response.email;\n    }\n    if (response.phoneNumber) {\n      errorParams.phoneNumber = response.phoneNumber;\n    }\n    var error = _createError(auth, code, errorParams);\n    // We know customData is defined on error because errorParams is defined\n    error.customData._tokenResponse = response;\n    return error;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function isV2(grecaptcha) {\n    return grecaptcha !== undefined && grecaptcha.getResponse !== undefined;\n  }\n  function isEnterprise(grecaptcha) {\n    return grecaptcha !== undefined && grecaptcha.enterprise !== undefined;\n  }\n  var RecaptchaConfig = /*#__PURE__*/function () {\n    function RecaptchaConfig(response) {\n      _classCallCheck(this, RecaptchaConfig);\n      /**\n       * The reCAPTCHA site key.\n       */\n      this.siteKey = '';\n      /**\n       * The list of providers and their enablement status for reCAPTCHA Enterprise.\n       */\n      this.recaptchaEnforcementState = [];\n      if (response.recaptchaKey === undefined) {\n        throw new Error('recaptchaKey undefined');\n      }\n      // Example response.recaptchaKey: \"projects/proj123/keys/sitekey123\"\n      this.siteKey = response.recaptchaKey.split('/')[3];\n      this.recaptchaEnforcementState = response.recaptchaEnforcementState;\n    }\n    /**\n     * Returns the reCAPTCHA Enterprise enforcement state for the given provider.\n     *\n     * @param providerStr - The provider whose enforcement state is to be returned.\n     * @returns The reCAPTCHA Enterprise enforcement state for the given provider.\n     */\n    return _createClass(RecaptchaConfig, [{\n      key: \"getProviderEnforcementState\",\n      value: function getProviderEnforcementState(providerStr) {\n        if (!this.recaptchaEnforcementState || this.recaptchaEnforcementState.length === 0) {\n          return null;\n        }\n        for (var recaptchaEnforcementState of this.recaptchaEnforcementState) {\n          if (recaptchaEnforcementState.provider && recaptchaEnforcementState.provider === providerStr) {\n            return _parseEnforcementState(recaptchaEnforcementState.enforcementState);\n          }\n        }\n        return null;\n      }\n      /**\n       * Returns true if the reCAPTCHA Enterprise enforcement state for the provider is set to ENFORCE or AUDIT.\n       *\n       * @param providerStr - The provider whose enablement state is to be returned.\n       * @returns Whether or not reCAPTCHA Enterprise protection is enabled for the given provider.\n       */\n    }, {\n      key: \"isProviderEnabled\",\n      value: function isProviderEnabled(providerStr) {\n        return this.getProviderEnforcementState(providerStr) === \"ENFORCE\" /* EnforcementState.ENFORCE */ || this.getProviderEnforcementState(providerStr) === \"AUDIT\" /* EnforcementState.AUDIT */;\n      }\n      /**\n       * Returns true if reCAPTCHA Enterprise protection is enabled in at least one provider, otherwise\n       * returns false.\n       *\n       * @returns Whether or not reCAPTCHA Enterprise protection is enabled for at least one provider.\n       */\n    }, {\n      key: \"isAnyProviderEnabled\",\n      value: function isAnyProviderEnabled() {\n        return this.isProviderEnabled(\"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */) || this.isProviderEnabled(\"PHONE_PROVIDER\" /* RecaptchaAuthProvider.PHONE_PROVIDER */);\n      }\n    }]);\n  }();\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function getRecaptchaParams(_x14) {\n    return _getRecaptchaParams.apply(this, arguments);\n  }\n  function _getRecaptchaParams() {\n    _getRecaptchaParams = _asyncToGenerator(function* (auth) {\n      return (yield _performApiRequest(auth, \"GET\" /* HttpMethod.GET */, \"/v1/recaptchaParams\" /* Endpoint.GET_RECAPTCHA_PARAM */)).recaptchaSiteKey || '';\n    });\n    return _getRecaptchaParams.apply(this, arguments);\n  }\n  function getRecaptchaConfig(_x15, _x16) {\n    return _getRecaptchaConfig.apply(this, arguments);\n  }\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _getRecaptchaConfig() {\n    _getRecaptchaConfig = _asyncToGenerator(function* (auth, request) {\n      return _performApiRequest(auth, \"GET\" /* HttpMethod.GET */, \"/v2/recaptchaConfig\" /* Endpoint.GET_RECAPTCHA_CONFIG */, _addTidIfNecessary(auth, request));\n    });\n    return _getRecaptchaConfig.apply(this, arguments);\n  }\n  function deleteAccount(_x17, _x18) {\n    return _deleteAccount.apply(this, arguments);\n  }\n  function _deleteAccount() {\n    _deleteAccount = _asyncToGenerator(function* (auth, request) {\n      return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:delete\" /* Endpoint.DELETE_ACCOUNT */, request);\n    });\n    return _deleteAccount.apply(this, arguments);\n  }\n  function deleteLinkedAccounts(_x19, _x20) {\n    return _deleteLinkedAccounts.apply(this, arguments);\n  }\n  function _deleteLinkedAccounts() {\n    _deleteLinkedAccounts = _asyncToGenerator(function* (auth, request) {\n      return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:update\" /* Endpoint.SET_ACCOUNT_INFO */, request);\n    });\n    return _deleteLinkedAccounts.apply(this, arguments);\n  }\n  function getAccountInfo(_x21, _x22) {\n    return _getAccountInfo.apply(this, arguments);\n  }\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _getAccountInfo() {\n    _getAccountInfo = _asyncToGenerator(function* (auth, request) {\n      return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:lookup\" /* Endpoint.GET_ACCOUNT_INFO */, request);\n    });\n    return _getAccountInfo.apply(this, arguments);\n  }\n  function utcTimestampToDateString(utcTimestamp) {\n    if (!utcTimestamp) {\n      return undefined;\n    }\n    try {\n      // Convert to date object.\n      var date = new Date(Number(utcTimestamp));\n      // Test date is valid.\n      if (!isNaN(date.getTime())) {\n        // Convert to UTC date string.\n        return date.toUTCString();\n      }\n    } catch (e) {\n      // Do nothing. undefined will be returned.\n    }\n    return undefined;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Returns a JSON Web Token (JWT) used to identify the user to a Firebase service.\n   *\n   * @remarks\n   * Returns the current token if it has not expired or if it will not expire in the next five\n   * minutes. Otherwise, this will refresh the token and return a new one.\n   *\n   * @param user - The user.\n   * @param forceRefresh - Force refresh regardless of token expiration.\n   *\n   * @public\n   */\n  function getIdToken(user) {\n    var forceRefresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    return util.getModularInstance(user).getIdToken(forceRefresh);\n  }\n  /**\n   * Returns a deserialized JSON Web Token (JWT) used to identify the user to a Firebase service.\n   *\n   * @remarks\n   * Returns the current token if it has not expired or if it will not expire in the next five\n   * minutes. Otherwise, this will refresh the token and return a new one.\n   *\n   * @param user - The user.\n   * @param forceRefresh - Force refresh regardless of token expiration.\n   *\n   * @public\n   */\n  function _getIdTokenResult2(_x23) {\n    return _getIdTokenResult.apply(this, arguments);\n  }\n  function _getIdTokenResult() {\n    _getIdTokenResult = _asyncToGenerator(function* (user) {\n      var forceRefresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var userInternal = util.getModularInstance(user);\n      var token = yield userInternal.getIdToken(forceRefresh);\n      var claims = _parseToken(token);\n      _assert(claims && claims.exp && claims.auth_time && claims.iat, userInternal.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      var firebase = typeof claims.firebase === 'object' ? claims.firebase : undefined;\n      var signInProvider = firebase?.['sign_in_provider'];\n      return {\n        claims,\n        token,\n        authTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.auth_time)),\n        issuedAtTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.iat)),\n        expirationTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.exp)),\n        signInProvider: signInProvider || null,\n        signInSecondFactor: firebase?.['sign_in_second_factor'] || null\n      };\n    });\n    return _getIdTokenResult.apply(this, arguments);\n  }\n  function secondsStringToMilliseconds(seconds) {\n    return Number(seconds) * 1000;\n  }\n  function _parseToken(token) {\n    var _token$split = token.split('.'),\n      _token$split2 = _slicedToArray(_token$split, 3),\n      algorithm = _token$split2[0],\n      payload = _token$split2[1],\n      signature = _token$split2[2];\n    if (algorithm === undefined || payload === undefined || signature === undefined) {\n      _logError('JWT malformed, contained fewer than 3 sections');\n      return null;\n    }\n    try {\n      var decoded = util.base64Decode(payload);\n      if (!decoded) {\n        _logError('Failed to decode base64 JWT payload');\n        return null;\n      }\n      return JSON.parse(decoded);\n    } catch (e) {\n      _logError('Caught error parsing JWT payload as JSON', e?.toString());\n      return null;\n    }\n  }\n  /**\n   * Extract expiresIn TTL from a token by subtracting the expiration from the issuance.\n   */\n  function _tokenExpiresIn(token) {\n    var parsedToken = _parseToken(token);\n    _assert(parsedToken, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    _assert(typeof parsedToken.exp !== 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    _assert(typeof parsedToken.iat !== 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    return Number(parsedToken.exp) - Number(parsedToken.iat);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _logoutIfInvalidated(_x24, _x25) {\n    return _logoutIfInvalidated2.apply(this, arguments);\n  }\n  function _logoutIfInvalidated2() {\n    _logoutIfInvalidated2 = _asyncToGenerator(function* (user, promise) {\n      var bypassAuthState = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      if (bypassAuthState) {\n        return promise;\n      }\n      try {\n        return yield promise;\n      } catch (e) {\n        if (e instanceof util.FirebaseError && isUserInvalidated(e)) {\n          if (user.auth.currentUser === user) {\n            yield user.auth.signOut();\n          }\n        }\n        throw e;\n      }\n    });\n    return _logoutIfInvalidated2.apply(this, arguments);\n  }\n  function isUserInvalidated(_ref) {\n    var code = _ref.code;\n    return code === `auth/${\"user-disabled\" /* AuthErrorCode.USER_DISABLED */}` || code === `auth/${\"user-token-expired\" /* AuthErrorCode.TOKEN_EXPIRED */}`;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  var ProactiveRefresh = /*#__PURE__*/function () {\n    function ProactiveRefresh(user) {\n      _classCallCheck(this, ProactiveRefresh);\n      this.user = user;\n      this.isRunning = false;\n      // Node timers and browser timers return fundamentally different types.\n      // We don't actually care what the value is but TS won't accept unknown and\n      // we can't cast properly in both environments.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.timerId = null;\n      this.errorBackoff = 30000 /* Duration.RETRY_BACKOFF_MIN */;\n    }\n    return _createClass(ProactiveRefresh, [{\n      key: \"_start\",\n      value: function _start() {\n        if (this.isRunning) {\n          return;\n        }\n        this.isRunning = true;\n        this.schedule();\n      }\n    }, {\n      key: \"_stop\",\n      value: function _stop() {\n        if (!this.isRunning) {\n          return;\n        }\n        this.isRunning = false;\n        if (this.timerId !== null) {\n          clearTimeout(this.timerId);\n        }\n      }\n    }, {\n      key: \"getInterval\",\n      value: function getInterval(wasError) {\n        if (wasError) {\n          var interval = this.errorBackoff;\n          this.errorBackoff = Math.min(this.errorBackoff * 2, 960000 /* Duration.RETRY_BACKOFF_MAX */);\n          return interval;\n        } else {\n          // Reset the error backoff\n          this.errorBackoff = 30000 /* Duration.RETRY_BACKOFF_MIN */;\n          var expTime = this.user.stsTokenManager.expirationTime ?? 0;\n          var _interval = expTime - Date.now() - 300000 /* Duration.OFFSET */;\n          return Math.max(0, _interval);\n        }\n      }\n    }, {\n      key: \"schedule\",\n      value: function schedule() {\n        var _this = this;\n        var wasError = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n        if (!this.isRunning) {\n          // Just in case...\n          return;\n        }\n        var interval = this.getInterval(wasError);\n        this.timerId = setTimeout(/*#__PURE__*/_asyncToGenerator(function* () {\n          yield _this.iteration();\n        }), interval);\n      }\n    }, {\n      key: \"iteration\",\n      value: function () {\n        var _iteration = _asyncToGenerator(function* () {\n          try {\n            yield this.user.getIdToken(true);\n          } catch (e) {\n            // Only retry on network errors\n            if (e?.code === `auth/${\"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */}`) {\n              this.schedule(/* wasError */true);\n            }\n            return;\n          }\n          this.schedule();\n        });\n        function iteration() {\n          return _iteration.apply(this, arguments);\n        }\n        return iteration;\n      }()\n    }]);\n  }();\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  var UserMetadata = /*#__PURE__*/function () {\n    function UserMetadata(createdAt, lastLoginAt) {\n      _classCallCheck(this, UserMetadata);\n      this.createdAt = createdAt;\n      this.lastLoginAt = lastLoginAt;\n      this._initializeTime();\n    }\n    return _createClass(UserMetadata, [{\n      key: \"_initializeTime\",\n      value: function _initializeTime() {\n        this.lastSignInTime = utcTimestampToDateString(this.lastLoginAt);\n        this.creationTime = utcTimestampToDateString(this.createdAt);\n      }\n    }, {\n      key: \"_copy\",\n      value: function _copy(metadata) {\n        this.createdAt = metadata.createdAt;\n        this.lastLoginAt = metadata.lastLoginAt;\n        this._initializeTime();\n      }\n    }, {\n      key: \"toJSON\",\n      value: function toJSON() {\n        return {\n          createdAt: this.createdAt,\n          lastLoginAt: this.lastLoginAt\n        };\n      }\n    }]);\n  }();\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _reloadWithoutSaving(_x26) {\n    return _reloadWithoutSaving2.apply(this, arguments);\n  }\n  /**\n   * Reloads user account data, if signed in.\n   *\n   * @param user - The user.\n   *\n   * @public\n   */\n  function _reloadWithoutSaving2() {\n    _reloadWithoutSaving2 = _asyncToGenerator(function* (user) {\n      var auth = user.auth;\n      var idToken = yield user.getIdToken();\n      var response = yield _logoutIfInvalidated(user, getAccountInfo(auth, {\n        idToken\n      }));\n      _assert(response?.users.length, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      var coreAccount = response.users[0];\n      user._notifyReloadListener(coreAccount);\n      var newProviderData = coreAccount.providerUserInfo?.length ? extractProviderData(coreAccount.providerUserInfo) : [];\n      var providerData = mergeProviderData(user.providerData, newProviderData);\n      // Preserves the non-nonymous status of the stored user, even if no more\n      // credentials (federated or email/password) are linked to the user. If\n      // the user was previously anonymous, then use provider data to update.\n      // On the other hand, if it was not anonymous before, it should never be\n      // considered anonymous now.\n      var oldIsAnonymous = user.isAnonymous;\n      var newIsAnonymous = !(user.email && coreAccount.passwordHash) && !providerData?.length;\n      var isAnonymous = !oldIsAnonymous ? false : newIsAnonymous;\n      var updates = {\n        uid: coreAccount.localId,\n        displayName: coreAccount.displayName || null,\n        photoURL: coreAccount.photoUrl || null,\n        email: coreAccount.email || null,\n        emailVerified: coreAccount.emailVerified || false,\n        phoneNumber: coreAccount.phoneNumber || null,\n        tenantId: coreAccount.tenantId || null,\n        providerData,\n        metadata: new UserMetadata(coreAccount.createdAt, coreAccount.lastLoginAt),\n        isAnonymous\n      };\n      Object.assign(user, updates);\n    });\n    return _reloadWithoutSaving2.apply(this, arguments);\n  }\n  function _reload2(_x27) {\n    return _reload.apply(this, arguments);\n  }\n  function _reload() {\n    _reload = _asyncToGenerator(function* (user) {\n      var userInternal = util.getModularInstance(user);\n      yield _reloadWithoutSaving(userInternal);\n      // Even though the current user hasn't changed, update\n      // current user will trigger a persistence update w/ the\n      // new info.\n      yield userInternal.auth._persistUserIfCurrent(userInternal);\n      userInternal.auth._notifyListenersIfCurrent(userInternal);\n    });\n    return _reload.apply(this, arguments);\n  }\n  function mergeProviderData(original, newData) {\n    var deduped = original.filter(o => !newData.some(n => n.providerId === o.providerId));\n    return [...deduped, ...newData];\n  }\n  function extractProviderData(providers) {\n    return providers.map(_ref3 => {\n      var providerId = _ref3.providerId,\n        provider = _objectWithoutProperties(_ref3, _excluded);\n      return {\n        providerId,\n        uid: provider.rawId || '',\n        displayName: provider.displayName || null,\n        email: provider.email || null,\n        phoneNumber: provider.phoneNumber || null,\n        photoURL: provider.photoUrl || null\n      };\n    });\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function requestStsToken(_x28, _x29) {\n    return _requestStsToken.apply(this, arguments);\n  }\n  function _requestStsToken() {\n    _requestStsToken = _asyncToGenerator(function* (auth, refreshToken) {\n      var response = yield _performFetchWithErrorHandling(auth, {}, /*#__PURE__*/_asyncToGenerator(function* () {\n        var body = util.querystring({\n          'grant_type': 'refresh_token',\n          'refresh_token': refreshToken\n        }).slice(1);\n        var _auth$config = auth.config,\n          tokenApiHost = _auth$config.tokenApiHost,\n          apiKey = _auth$config.apiKey;\n        var url = yield _getFinalTarget(auth, tokenApiHost, \"/v1/token\" /* Endpoint.TOKEN */, `key=${apiKey}`);\n        var headers = yield auth._getAdditionalHeaders();\n        headers[\"Content-Type\" /* HttpHeader.CONTENT_TYPE */] = 'application/x-www-form-urlencoded';\n        var options = {\n          method: \"POST\" /* HttpMethod.POST */,\n          headers,\n          body\n        };\n        if (auth.emulatorConfig && util.isCloudWorkstation(auth.emulatorConfig.host)) {\n          options.credentials = 'include';\n        }\n        return FetchProvider.fetch()(url, options);\n      }));\n      // The response comes back in snake_case. Convert to camel:\n      return {\n        accessToken: response.access_token,\n        expiresIn: response.expires_in,\n        refreshToken: response.refresh_token\n      };\n    });\n    return _requestStsToken.apply(this, arguments);\n  }\n  function revokeToken(_x30, _x31) {\n    return _revokeToken.apply(this, arguments);\n  }\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * We need to mark this class as internal explicitly to exclude it in the public typings, because\n   * it references AuthInternal which has a circular dependency with UserInternal.\n   *\n   * @internal\n   */\n  function _revokeToken() {\n    _revokeToken = _asyncToGenerator(function* (auth, request) {\n      return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts:revokeToken\" /* Endpoint.REVOKE_TOKEN */, _addTidIfNecessary(auth, request));\n    });\n    return _revokeToken.apply(this, arguments);\n  }\n  var StsTokenManager = /*#__PURE__*/function () {\n    function StsTokenManager() {\n      _classCallCheck(this, StsTokenManager);\n      this.refreshToken = null;\n      this.accessToken = null;\n      this.expirationTime = null;\n    }\n    return _createClass(StsTokenManager, [{\n      key: \"isExpired\",\n      get: function () {\n        return !this.expirationTime || Date.now() > this.expirationTime - 30000 /* Buffer.TOKEN_REFRESH */;\n      }\n    }, {\n      key: \"updateFromServerResponse\",\n      value: function updateFromServerResponse(response) {\n        _assert(response.idToken, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        _assert(typeof response.idToken !== 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        _assert(typeof response.refreshToken !== 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        var expiresIn = 'expiresIn' in response && typeof response.expiresIn !== 'undefined' ? Number(response.expiresIn) : _tokenExpiresIn(response.idToken);\n        this.updateTokensAndExpiration(response.idToken, response.refreshToken, expiresIn);\n      }\n    }, {\n      key: \"updateFromIdToken\",\n      value: function updateFromIdToken(idToken) {\n        _assert(idToken.length !== 0, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        var expiresIn = _tokenExpiresIn(idToken);\n        this.updateTokensAndExpiration(idToken, null, expiresIn);\n      }\n    }, {\n      key: \"getToken\",\n      value: function () {\n        var _getToken = _asyncToGenerator(function* (auth) {\n          var forceRefresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n          if (!forceRefresh && this.accessToken && !this.isExpired) {\n            return this.accessToken;\n          }\n          _assert(this.refreshToken, auth, \"user-token-expired\" /* AuthErrorCode.TOKEN_EXPIRED */);\n          if (this.refreshToken) {\n            yield this.refresh(auth, this.refreshToken);\n            return this.accessToken;\n          }\n          return null;\n        });\n        function getToken(_x32) {\n          return _getToken.apply(this, arguments);\n        }\n        return getToken;\n      }()\n    }, {\n      key: \"clearRefreshToken\",\n      value: function clearRefreshToken() {\n        this.refreshToken = null;\n      }\n    }, {\n      key: \"refresh\",\n      value: function () {\n        var _refresh = _asyncToGenerator(function* (auth, oldToken) {\n          var _yield$requestStsToke = yield requestStsToken(auth, oldToken),\n            accessToken = _yield$requestStsToke.accessToken,\n            refreshToken = _yield$requestStsToke.refreshToken,\n            expiresIn = _yield$requestStsToke.expiresIn;\n          this.updateTokensAndExpiration(accessToken, refreshToken, Number(expiresIn));\n        });\n        function refresh(_x33, _x34) {\n          return _refresh.apply(this, arguments);\n        }\n        return refresh;\n      }()\n    }, {\n      key: \"updateTokensAndExpiration\",\n      value: function updateTokensAndExpiration(accessToken, refreshToken, expiresInSec) {\n        this.refreshToken = refreshToken || null;\n        this.accessToken = accessToken || null;\n        this.expirationTime = Date.now() + expiresInSec * 1000;\n      }\n    }, {\n      key: \"toJSON\",\n      value: function toJSON() {\n        return {\n          refreshToken: this.refreshToken,\n          accessToken: this.accessToken,\n          expirationTime: this.expirationTime\n        };\n      }\n    }, {\n      key: \"_assign\",\n      value: function _assign(stsTokenManager) {\n        this.accessToken = stsTokenManager.accessToken;\n        this.refreshToken = stsTokenManager.refreshToken;\n        this.expirationTime = stsTokenManager.expirationTime;\n      }\n    }, {\n      key: \"_clone\",\n      value: function _clone() {\n        return Object.assign(new StsTokenManager(), this.toJSON());\n      }\n    }, {\n      key: \"_performRefresh\",\n      value: function _performRefresh() {\n        return debugFail('not implemented');\n      }\n    }], [{\n      key: \"fromJSON\",\n      value: function fromJSON(appName, object) {\n        var refreshToken = object.refreshToken,\n          accessToken = object.accessToken,\n          expirationTime = object.expirationTime;\n        var manager = new StsTokenManager();\n        if (refreshToken) {\n          _assert(typeof refreshToken === 'string', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */, {\n            appName\n          });\n          manager.refreshToken = refreshToken;\n        }\n        if (accessToken) {\n          _assert(typeof accessToken === 'string', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */, {\n            appName\n          });\n          manager.accessToken = accessToken;\n        }\n        if (expirationTime) {\n          _assert(typeof expirationTime === 'number', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */, {\n            appName\n          });\n          manager.expirationTime = expirationTime;\n        }\n        return manager;\n      }\n    }]);\n  }();\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function assertStringOrUndefined(assertion, appName) {\n    _assert(typeof assertion === 'string' || typeof assertion === 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */, {\n      appName\n    });\n  }\n  var UserImpl = /*#__PURE__*/function () {\n    function UserImpl(_ref4) {\n      var uid = _ref4.uid,\n        auth = _ref4.auth,\n        stsTokenManager = _ref4.stsTokenManager,\n        opt = _objectWithoutProperties(_ref4, _excluded2);\n      _classCallCheck(this, UserImpl);\n      // For the user object, provider is always Firebase.\n      this.providerId = \"firebase\" /* ProviderId.FIREBASE */;\n      this.proactiveRefresh = new ProactiveRefresh(this);\n      this.reloadUserInfo = null;\n      this.reloadListener = null;\n      this.uid = uid;\n      this.auth = auth;\n      this.stsTokenManager = stsTokenManager;\n      this.accessToken = stsTokenManager.accessToken;\n      this.displayName = opt.displayName || null;\n      this.email = opt.email || null;\n      this.emailVerified = opt.emailVerified || false;\n      this.phoneNumber = opt.phoneNumber || null;\n      this.photoURL = opt.photoURL || null;\n      this.isAnonymous = opt.isAnonymous || false;\n      this.tenantId = opt.tenantId || null;\n      this.providerData = opt.providerData ? [...opt.providerData] : [];\n      this.metadata = new UserMetadata(opt.createdAt || undefined, opt.lastLoginAt || undefined);\n    }\n    return _createClass(UserImpl, [{\n      key: \"getIdToken\",\n      value: function () {\n        var _getIdToken = _asyncToGenerator(function* (forceRefresh) {\n          var accessToken = yield _logoutIfInvalidated(this, this.stsTokenManager.getToken(this.auth, forceRefresh));\n          _assert(accessToken, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n          if (this.accessToken !== accessToken) {\n            this.accessToken = accessToken;\n            yield this.auth._persistUserIfCurrent(this);\n            this.auth._notifyListenersIfCurrent(this);\n          }\n          return accessToken;\n        });\n        function getIdToken(_x35) {\n          return _getIdToken.apply(this, arguments);\n        }\n        return getIdToken;\n      }()\n    }, {\n      key: \"getIdTokenResult\",\n      value: function getIdTokenResult(forceRefresh) {\n        return _getIdTokenResult2(this, forceRefresh);\n      }\n    }, {\n      key: \"reload\",\n      value: function reload() {\n        return _reload2(this);\n      }\n    }, {\n      key: \"_assign\",\n      value: function _assign(user) {\n        if (this === user) {\n          return;\n        }\n        _assert(this.uid === user.uid, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        this.displayName = user.displayName;\n        this.photoURL = user.photoURL;\n        this.email = user.email;\n        this.emailVerified = user.emailVerified;\n        this.phoneNumber = user.phoneNumber;\n        this.isAnonymous = user.isAnonymous;\n        this.tenantId = user.tenantId;\n        this.providerData = user.providerData.map(userInfo => ({\n          ...userInfo\n        }));\n        this.metadata._copy(user.metadata);\n        this.stsTokenManager._assign(user.stsTokenManager);\n      }\n    }, {\n      key: \"_clone\",\n      value: function _clone(auth) {\n        var newUser = new UserImpl({\n          ...this,\n          auth,\n          stsTokenManager: this.stsTokenManager._clone()\n        });\n        newUser.metadata._copy(this.metadata);\n        return newUser;\n      }\n    }, {\n      key: \"_onReload\",\n      value: function _onReload(callback) {\n        // There should only ever be one listener, and that is a single instance of MultiFactorUser\n        _assert(!this.reloadListener, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        this.reloadListener = callback;\n        if (this.reloadUserInfo) {\n          this._notifyReloadListener(this.reloadUserInfo);\n          this.reloadUserInfo = null;\n        }\n      }\n    }, {\n      key: \"_notifyReloadListener\",\n      value: function _notifyReloadListener(userInfo) {\n        if (this.reloadListener) {\n          this.reloadListener(userInfo);\n        } else {\n          // If no listener is subscribed yet, save the result so it's available when they do subscribe\n          this.reloadUserInfo = userInfo;\n        }\n      }\n    }, {\n      key: \"_startProactiveRefresh\",\n      value: function _startProactiveRefresh() {\n        this.proactiveRefresh._start();\n      }\n    }, {\n      key: \"_stopProactiveRefresh\",\n      value: function _stopProactiveRefresh() {\n        this.proactiveRefresh._stop();\n      }\n    }, {\n      key: \"_updateTokensIfNecessary\",\n      value: function () {\n        var _updateTokensIfNecessary2 = _asyncToGenerator(function* (response) {\n          var reload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n          var tokensRefreshed = false;\n          if (response.idToken && response.idToken !== this.stsTokenManager.accessToken) {\n            this.stsTokenManager.updateFromServerResponse(response);\n            tokensRefreshed = true;\n          }\n          if (reload) {\n            yield _reloadWithoutSaving(this);\n          }\n          yield this.auth._persistUserIfCurrent(this);\n          if (tokensRefreshed) {\n            this.auth._notifyListenersIfCurrent(this);\n          }\n        });\n        function _updateTokensIfNecessary(_x36) {\n          return _updateTokensIfNecessary2.apply(this, arguments);\n        }\n        return _updateTokensIfNecessary;\n      }()\n    }, {\n      key: \"delete\",\n      value: function () {\n        var _delete2 = _asyncToGenerator(function* () {\n          if (app._isFirebaseServerApp(this.auth.app)) {\n            return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(this.auth));\n          }\n          var idToken = yield this.getIdToken();\n          yield _logoutIfInvalidated(this, deleteAccount(this.auth, {\n            idToken\n          }));\n          this.stsTokenManager.clearRefreshToken();\n          // TODO: Determine if cancellable-promises are necessary to use in this class so that delete()\n          //       cancels pending actions...\n          return this.auth.signOut();\n        });\n        function _delete() {\n          return _delete2.apply(this, arguments);\n        }\n        return _delete;\n      }()\n    }, {\n      key: \"toJSON\",\n      value: function toJSON() {\n        return {\n          uid: this.uid,\n          email: this.email || undefined,\n          emailVerified: this.emailVerified,\n          displayName: this.displayName || undefined,\n          isAnonymous: this.isAnonymous,\n          photoURL: this.photoURL || undefined,\n          phoneNumber: this.phoneNumber || undefined,\n          tenantId: this.tenantId || undefined,\n          providerData: this.providerData.map(userInfo => ({\n            ...userInfo\n          })),\n          stsTokenManager: this.stsTokenManager.toJSON(),\n          // Redirect event ID must be maintained in case there is a pending\n          // redirect event.\n          _redirectEventId: this._redirectEventId,\n          ...this.metadata.toJSON(),\n          // Required for compatibility with the legacy SDK (go/firebase-auth-sdk-persistence-parsing):\n          apiKey: this.auth.config.apiKey,\n          appName: this.auth.name\n          // Missing authDomain will be tolerated by the legacy SDK.\n          // stsTokenManager.apiKey isn't actually required (despite the legacy SDK persisting it).\n        };\n      }\n    }, {\n      key: \"refreshToken\",\n      get: function () {\n        return this.stsTokenManager.refreshToken || '';\n      }\n    }], [{\n      key: \"_fromJSON\",\n      value: function _fromJSON(auth, object) {\n        var displayName = object.displayName ?? undefined;\n        var email = object.email ?? undefined;\n        var phoneNumber = object.phoneNumber ?? undefined;\n        var photoURL = object.photoURL ?? undefined;\n        var tenantId = object.tenantId ?? undefined;\n        var _redirectEventId = object._redirectEventId ?? undefined;\n        var createdAt = object.createdAt ?? undefined;\n        var lastLoginAt = object.lastLoginAt ?? undefined;\n        var uid = object.uid,\n          emailVerified = object.emailVerified,\n          isAnonymous = object.isAnonymous,\n          providerData = object.providerData,\n          plainObjectTokenManager = object.stsTokenManager;\n        _assert(uid && plainObjectTokenManager, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        var stsTokenManager = StsTokenManager.fromJSON(this.name, plainObjectTokenManager);\n        _assert(typeof uid === 'string', auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        assertStringOrUndefined(displayName, auth.name);\n        assertStringOrUndefined(email, auth.name);\n        _assert(typeof emailVerified === 'boolean', auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        _assert(typeof isAnonymous === 'boolean', auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        assertStringOrUndefined(phoneNumber, auth.name);\n        assertStringOrUndefined(photoURL, auth.name);\n        assertStringOrUndefined(tenantId, auth.name);\n        assertStringOrUndefined(_redirectEventId, auth.name);\n        assertStringOrUndefined(createdAt, auth.name);\n        assertStringOrUndefined(lastLoginAt, auth.name);\n        var user = new UserImpl({\n          uid,\n          auth,\n          email,\n          emailVerified,\n          displayName,\n          isAnonymous,\n          photoURL,\n          phoneNumber,\n          tenantId,\n          stsTokenManager,\n          createdAt,\n          lastLoginAt\n        });\n        if (providerData && Array.isArray(providerData)) {\n          user.providerData = providerData.map(userInfo => ({\n            ...userInfo\n          }));\n        }\n        if (_redirectEventId) {\n          user._redirectEventId = _redirectEventId;\n        }\n        return user;\n      }\n      /**\n       * Initialize a User from an idToken server response\n       * @param auth\n       * @param idTokenResponse\n       */\n    }, {\n      key: \"_fromIdTokenResponse\",\n      value: (function () {\n        var _fromIdTokenResponse2 = _asyncToGenerator(function* (auth, idTokenResponse) {\n          var isAnonymous = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n          var stsTokenManager = new StsTokenManager();\n          stsTokenManager.updateFromServerResponse(idTokenResponse);\n          // Initialize the Firebase Auth user.\n          var user = new UserImpl({\n            uid: idTokenResponse.localId,\n            auth,\n            stsTokenManager,\n            isAnonymous\n          });\n          // Updates the user info and data and resolves with a user instance.\n          yield _reloadWithoutSaving(user);\n          return user;\n        });\n        function _fromIdTokenResponse(_x37, _x38) {\n          return _fromIdTokenResponse2.apply(this, arguments);\n        }\n        return _fromIdTokenResponse;\n      }()\n      /**\n       * Initialize a User from an idToken server response\n       * @param auth\n       * @param idTokenResponse\n       */\n      )\n    }, {\n      key: \"_fromGetAccountInfoResponse\",\n      value: (function () {\n        var _fromGetAccountInfoResponse2 = _asyncToGenerator(function* (auth, response, idToken) {\n          var coreAccount = response.users[0];\n          _assert(coreAccount.localId !== undefined, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n          var providerData = coreAccount.providerUserInfo !== undefined ? extractProviderData(coreAccount.providerUserInfo) : [];\n          var isAnonymous = !(coreAccount.email && coreAccount.passwordHash) && !providerData?.length;\n          var stsTokenManager = new StsTokenManager();\n          stsTokenManager.updateFromIdToken(idToken);\n          // Initialize the Firebase Auth user.\n          var user = new UserImpl({\n            uid: coreAccount.localId,\n            auth,\n            stsTokenManager,\n            isAnonymous\n          });\n          // update the user with data from the GetAccountInfo response.\n          var updates = {\n            uid: coreAccount.localId,\n            displayName: coreAccount.displayName || null,\n            photoURL: coreAccount.photoUrl || null,\n            email: coreAccount.email || null,\n            emailVerified: coreAccount.emailVerified || false,\n            phoneNumber: coreAccount.phoneNumber || null,\n            tenantId: coreAccount.tenantId || null,\n            providerData,\n            metadata: new UserMetadata(coreAccount.createdAt, coreAccount.lastLoginAt),\n            isAnonymous: !(coreAccount.email && coreAccount.passwordHash) && !providerData?.length\n          };\n          Object.assign(user, updates);\n          return user;\n        });\n        function _fromGetAccountInfoResponse(_x39, _x40, _x41) {\n          return _fromGetAccountInfoResponse2.apply(this, arguments);\n        }\n        return _fromGetAccountInfoResponse;\n      }())\n    }]);\n  }();\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  var instanceCache = new Map();\n  function _getInstance(cls) {\n    debugAssert(cls instanceof Function, 'Expected a class definition');\n    var instance = instanceCache.get(cls);\n    if (instance) {\n      debugAssert(instance instanceof cls, 'Instance stored in cache mismatched with class');\n      return instance;\n    }\n    instance = new cls();\n    instanceCache.set(cls, instance);\n    return instance;\n  }\n\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  var InMemoryPersistence = /*#__PURE__*/function () {\n    function InMemoryPersistence() {\n      _classCallCheck(this, InMemoryPersistence);\n      this.type = \"NONE\" /* PersistenceType.NONE */;\n      this.storage = {};\n    }\n    return _createClass(InMemoryPersistence, [{\n      key: \"_isAvailable\",\n      value: function () {\n        var _isAvailable2 = _asyncToGenerator(function* () {\n          return true;\n        });\n        function _isAvailable() {\n          return _isAvailable2.apply(this, arguments);\n        }\n        return _isAvailable;\n      }()\n    }, {\n      key: \"_set\",\n      value: function () {\n        var _set2 = _asyncToGenerator(function* (key, value) {\n          this.storage[key] = value;\n        });\n        function _set(_x42, _x43) {\n          return _set2.apply(this, arguments);\n        }\n        return _set;\n      }()\n    }, {\n      key: \"_get\",\n      value: function () {\n        var _get2 = _asyncToGenerator(function* (key) {\n          var value = this.storage[key];\n          return value === undefined ? null : value;\n        });\n        function _get(_x44) {\n          return _get2.apply(this, arguments);\n        }\n        return _get;\n      }()\n    }, {\n      key: \"_remove\",\n      value: function () {\n        var _remove2 = _asyncToGenerator(function* (key) {\n          delete this.storage[key];\n        });\n        function _remove(_x45) {\n          return _remove2.apply(this, arguments);\n        }\n        return _remove;\n      }()\n    }, {\n      key: \"_addListener\",\n      value: function _addListener(_key, _listener) {\n        // Listeners are not supported for in-memory storage since it cannot be shared across windows/workers\n        return;\n      }\n    }, {\n      key: \"_removeListener\",\n      value: function _removeListener(_key, _listener) {\n        // Listeners are not supported for in-memory storage since it cannot be shared across windows/workers\n        return;\n      }\n    }]);\n  }();\n  InMemoryPersistence.type = 'NONE';\n  /**\n   * An implementation of {@link Persistence} of type 'NONE'.\n   *\n   * @public\n   */\n  var inMemoryPersistence = InMemoryPersistence;\n\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _persistenceKeyName(key, apiKey, appName) {\n    return `${\"firebase\" /* Namespace.PERSISTENCE */}:${key}:${apiKey}:${appName}`;\n  }\n  var PersistenceUserManager = /*#__PURE__*/function () {\n    function PersistenceUserManager(persistence, auth, userKey) {\n      _classCallCheck(this, PersistenceUserManager);\n      this.persistence = persistence;\n      this.auth = auth;\n      this.userKey = userKey;\n      var _this$auth = this.auth,\n        config = _this$auth.config,\n        name = _this$auth.name;\n      this.fullUserKey = _persistenceKeyName(this.userKey, config.apiKey, name);\n      this.fullPersistenceKey = _persistenceKeyName(\"persistence\" /* KeyName.PERSISTENCE_USER */, config.apiKey, name);\n      this.boundEventHandler = auth._onStorageEvent.bind(auth);\n      this.persistence._addListener(this.fullUserKey, this.boundEventHandler);\n    }\n    return _createClass(PersistenceUserManager, [{\n      key: \"setCurrentUser\",\n      value: function setCurrentUser(user) {\n        return this.persistence._set(this.fullUserKey, user.toJSON());\n      }\n    }, {\n      key: \"getCurrentUser\",\n      value: function () {\n        var _getCurrentUser = _asyncToGenerator(function* () {\n          var blob = yield this.persistence._get(this.fullUserKey);\n          if (!blob) {\n            return null;\n          }\n          if (typeof blob === 'string') {\n            var response = yield getAccountInfo(this.auth, {\n              idToken: blob\n            }).catch(() => undefined);\n            if (!response) {\n              return null;\n            }\n            return UserImpl._fromGetAccountInfoResponse(this.auth, response, blob);\n          }\n          return UserImpl._fromJSON(this.auth, blob);\n        });\n        function getCurrentUser() {\n          return _getCurrentUser.apply(this, arguments);\n        }\n        return getCurrentUser;\n      }()\n    }, {\n      key: \"removeCurrentUser\",\n      value: function removeCurrentUser() {\n        return this.persistence._remove(this.fullUserKey);\n      }\n    }, {\n      key: \"savePersistenceForRedirect\",\n      value: function savePersistenceForRedirect() {\n        return this.persistence._set(this.fullPersistenceKey, this.persistence.type);\n      }\n    }, {\n      key: \"setPersistence\",\n      value: function () {\n        var _setPersistence = _asyncToGenerator(function* (newPersistence) {\n          if (this.persistence === newPersistence) {\n            return;\n          }\n          var currentUser = yield this.getCurrentUser();\n          yield this.removeCurrentUser();\n          this.persistence = newPersistence;\n          if (currentUser) {\n            return this.setCurrentUser(currentUser);\n          }\n        });\n        function setPersistence(_x46) {\n          return _setPersistence.apply(this, arguments);\n        }\n        return setPersistence;\n      }()\n    }, {\n      key: \"delete\",\n      value: function _delete() {\n        this.persistence._removeListener(this.fullUserKey, this.boundEventHandler);\n      }\n    }], [{\n      key: \"create\",\n      value: function () {\n        var _create = _asyncToGenerator(function* (auth, persistenceHierarchy) {\n          var userKey = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"authUser\";\n          if (!persistenceHierarchy.length) {\n            return new PersistenceUserManager(_getInstance(inMemoryPersistence), auth, userKey);\n          }\n          // Eliminate any persistences that are not available\n          var availablePersistences = (yield Promise.all(persistenceHierarchy.map(/*#__PURE__*/function () {\n            var _ref5 = _asyncToGenerator(function* (persistence) {\n              if (yield persistence._isAvailable()) {\n                return persistence;\n              }\n              return undefined;\n            });\n            return function (_x49) {\n              return _ref5.apply(this, arguments);\n            };\n          }()))).filter(persistence => persistence);\n          // Fall back to the first persistence listed, or in memory if none available\n          var selectedPersistence = availablePersistences[0] || _getInstance(inMemoryPersistence);\n          var key = _persistenceKeyName(userKey, auth.config.apiKey, auth.name);\n          // Pull out the existing user, setting the chosen persistence to that\n          // persistence if the user exists.\n          var userToMigrate = null;\n          // Note, here we check for a user in _all_ persistences, not just the\n          // ones deemed available. If we can migrate a user out of a broken\n          // persistence, we will (but only if that persistence supports migration).\n          for (var persistence of persistenceHierarchy) {\n            try {\n              var blob = yield persistence._get(key);\n              if (blob) {\n                var user = void 0;\n                if (typeof blob === 'string') {\n                  var response = yield getAccountInfo(auth, {\n                    idToken: blob\n                  }).catch(() => undefined);\n                  if (!response) {\n                    break;\n                  }\n                  user = yield UserImpl._fromGetAccountInfoResponse(auth, response, blob);\n                } else {\n                  user = UserImpl._fromJSON(auth, blob); // throws for unparsable blob (wrong format)\n                }\n                if (persistence !== selectedPersistence) {\n                  userToMigrate = user;\n                }\n                selectedPersistence = persistence;\n                break;\n              }\n            } catch {}\n          }\n          // If we find the user in a persistence that does support migration, use\n          // that migration path (of only persistences that support migration)\n          var migrationHierarchy = availablePersistences.filter(p => p._shouldAllowMigration);\n          // If the persistence does _not_ allow migration, just finish off here\n          if (!selectedPersistence._shouldAllowMigration || !migrationHierarchy.length) {\n            return new PersistenceUserManager(selectedPersistence, auth, userKey);\n          }\n          selectedPersistence = migrationHierarchy[0];\n          if (userToMigrate) {\n            // This normally shouldn't throw since chosenPersistence.isAvailable() is true, but if it does\n            // we'll just let it bubble to surface the error.\n            yield selectedPersistence._set(key, userToMigrate.toJSON());\n          }\n          // Attempt to clear the key in other persistences but ignore errors. This helps prevent issues\n          // such as users getting stuck with a previous account after signing out and refreshing the tab.\n          yield Promise.all(persistenceHierarchy.map(/*#__PURE__*/function () {\n            var _ref6 = _asyncToGenerator(function* (persistence) {\n              if (persistence !== selectedPersistence) {\n                try {\n                  yield persistence._remove(key);\n                } catch {}\n              }\n            });\n            return function (_x50) {\n              return _ref6.apply(this, arguments);\n            };\n          }()));\n          return new PersistenceUserManager(selectedPersistence, auth, userKey);\n        });\n        function create(_x47, _x48) {\n          return _create.apply(this, arguments);\n        }\n        return create;\n      }()\n    }]);\n  }();\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Determine the browser for the purposes of reporting usage to the API\n   */\n  function _getBrowserName(userAgent) {\n    var ua = userAgent.toLowerCase();\n    if (ua.includes('opera/') || ua.includes('opr/') || ua.includes('opios/')) {\n      return \"Opera\" /* BrowserName.OPERA */;\n    } else if (_isIEMobile(ua)) {\n      // Windows phone IEMobile browser.\n      return \"IEMobile\" /* BrowserName.IEMOBILE */;\n    } else if (ua.includes('msie') || ua.includes('trident/')) {\n      return \"IE\" /* BrowserName.IE */;\n    } else if (ua.includes('edge/')) {\n      return \"Edge\" /* BrowserName.EDGE */;\n    } else if (_isFirefox(ua)) {\n      return \"Firefox\" /* BrowserName.FIREFOX */;\n    } else if (ua.includes('silk/')) {\n      return \"Silk\" /* BrowserName.SILK */;\n    } else if (_isBlackBerry(ua)) {\n      // Blackberry browser.\n      return \"Blackberry\" /* BrowserName.BLACKBERRY */;\n    } else if (_isWebOS(ua)) {\n      // WebOS default browser.\n      return \"Webos\" /* BrowserName.WEBOS */;\n    } else if (_isSafari(ua)) {\n      return \"Safari\" /* BrowserName.SAFARI */;\n    } else if ((ua.includes('chrome/') || _isChromeIOS(ua)) && !ua.includes('edge/')) {\n      return \"Chrome\" /* BrowserName.CHROME */;\n    } else if (_isAndroid(ua)) {\n      // Android stock browser.\n      return \"Android\" /* BrowserName.ANDROID */;\n    } else {\n      // Most modern browsers have name/version at end of user agent string.\n      var re = /([a-zA-Z\\d\\.]+)\\/[a-zA-Z\\d\\.]*$/;\n      var matches = userAgent.match(re);\n      if (matches?.length === 2) {\n        return matches[1];\n      }\n    }\n    return \"Other\" /* BrowserName.OTHER */;\n  }\n  function _isFirefox() {\n    var ua = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : util.getUA();\n    return /firefox\\//i.test(ua);\n  }\n  function _isSafari() {\n    var userAgent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : util.getUA();\n    var ua = userAgent.toLowerCase();\n    return ua.includes('safari/') && !ua.includes('chrome/') && !ua.includes('crios/') && !ua.includes('android');\n  }\n  function _isChromeIOS() {\n    var ua = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : util.getUA();\n    return /crios\\//i.test(ua);\n  }\n  function _isIEMobile() {\n    var ua = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : util.getUA();\n    return /iemobile/i.test(ua);\n  }\n  function _isAndroid() {\n    var ua = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : util.getUA();\n    return /android/i.test(ua);\n  }\n  function _isBlackBerry() {\n    var ua = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : util.getUA();\n    return /blackberry/i.test(ua);\n  }\n  function _isWebOS() {\n    var ua = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : util.getUA();\n    return /webos/i.test(ua);\n  }\n  function _isIOS() {\n    var ua = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : util.getUA();\n    return /iphone|ipad|ipod/i.test(ua) || /macintosh/i.test(ua) && /mobile/i.test(ua);\n  }\n  function _isIOS7Or8() {\n    var ua = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : util.getUA();\n    return /(iPad|iPhone|iPod).*OS 7_\\d/i.test(ua) || /(iPad|iPhone|iPod).*OS 8_\\d/i.test(ua);\n  }\n  function _isIOSStandalone() {\n    var ua = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : util.getUA();\n    return _isIOS(ua) && !!window.navigator?.standalone;\n  }\n  function _isIE10() {\n    return util.isIE() && document.documentMode === 10;\n  }\n  function _isMobileBrowser() {\n    var ua = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : util.getUA();\n    // TODO: implement getBrowserName equivalent for OS.\n    return _isIOS(ua) || _isAndroid(ua) || _isWebOS(ua) || _isBlackBerry(ua) || /windows phone/i.test(ua) || _isIEMobile(ua);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /*\n   * Determine the SDK version string\n   */\n  function _getClientVersion(clientPlatform) {\n    var frameworks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    var reportedPlatform;\n    switch (clientPlatform) {\n      case \"Browser\" /* ClientPlatform.BROWSER */:\n        // In a browser environment, report the browser name.\n        reportedPlatform = _getBrowserName(util.getUA());\n        break;\n      case \"Worker\" /* ClientPlatform.WORKER */:\n        // Technically a worker runs from a browser but we need to differentiate a\n        // worker from a browser.\n        // For example: Chrome-Worker/JsCore/4.9.1/FirebaseCore-web.\n        reportedPlatform = `${_getBrowserName(util.getUA())}-${clientPlatform}`;\n        break;\n      default:\n        reportedPlatform = clientPlatform;\n    }\n    var reportedFrameworks = frameworks.length ? frameworks.join(',') : 'FirebaseCore-web'; /* default value if no other framework is used */\n    return `${reportedPlatform}/${\"JsCore\" /* ClientImplementation.CORE */}/${app.SDK_VERSION}/${reportedFrameworks}`;\n  }\n\n  /**\n   * @license\n   * Copyright 2022 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  var AuthMiddlewareQueue = /*#__PURE__*/function () {\n    function AuthMiddlewareQueue(auth) {\n      _classCallCheck(this, AuthMiddlewareQueue);\n      this.auth = auth;\n      this.queue = [];\n    }\n    return _createClass(AuthMiddlewareQueue, [{\n      key: \"pushCallback\",\n      value: function pushCallback(callback, onAbort) {\n        // The callback could be sync or async. Wrap it into a\n        // function that is always async.\n        var wrappedCallback = user => new Promise((resolve, reject) => {\n          try {\n            var result = callback(user);\n            // Either resolve with existing promise or wrap a non-promise\n            // return value into a promise.\n            resolve(result);\n          } catch (e) {\n            // Sync callback throws.\n            reject(e);\n          }\n        });\n        // Attach the onAbort if present\n        wrappedCallback.onAbort = onAbort;\n        this.queue.push(wrappedCallback);\n        var index = this.queue.length - 1;\n        return () => {\n          // Unsubscribe. Replace with no-op. Do not remove from array, or it will disturb\n          // indexing of other elements.\n          this.queue[index] = () => Promise.resolve();\n        };\n      }\n    }, {\n      key: \"runMiddleware\",\n      value: function () {\n        var _runMiddleware = _asyncToGenerator(function* (nextUser) {\n          if (this.auth.currentUser === nextUser) {\n            return;\n          }\n          // While running the middleware, build a temporary stack of onAbort\n          // callbacks to call if one middleware callback rejects.\n          var onAbortStack = [];\n          try {\n            for (var beforeStateCallback of this.queue) {\n              yield beforeStateCallback(nextUser);\n              // Only push the onAbort if the callback succeeds\n              if (beforeStateCallback.onAbort) {\n                onAbortStack.push(beforeStateCallback.onAbort);\n              }\n            }\n          } catch (e) {\n            // Run all onAbort, with separate try/catch to ignore any errors and\n            // continue\n            onAbortStack.reverse();\n            for (var onAbort of onAbortStack) {\n              try {\n                onAbort();\n              } catch (_) {\n                /* swallow error */\n              }\n            }\n            throw this.auth._errorFactory.create(\"login-blocked\" /* AuthErrorCode.LOGIN_BLOCKED */, {\n              originalMessage: e?.message\n            });\n          }\n        });\n        function runMiddleware(_x51) {\n          return _runMiddleware.apply(this, arguments);\n        }\n        return runMiddleware;\n      }()\n    }]);\n  }();\n  /**\n   * @license\n   * Copyright 2023 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Fetches the password policy for the currently set tenant or the project if no tenant is set.\n   *\n   * @param auth Auth object.\n   * @param request Password policy request.\n   * @returns Password policy response.\n   */\n  function _getPasswordPolicy(_x52) {\n    return _getPasswordPolicy2.apply(this, arguments);\n  }\n  /**\n   * @license\n   * Copyright 2023 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  // Minimum min password length enforced by the backend, even if no minimum length is set.\n  function _getPasswordPolicy2() {\n    _getPasswordPolicy2 = _asyncToGenerator(function* (auth) {\n      var request = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return _performApiRequest(auth, \"GET\" /* HttpMethod.GET */, \"/v2/passwordPolicy\" /* Endpoint.GET_PASSWORD_POLICY */, _addTidIfNecessary(auth, request));\n    });\n    return _getPasswordPolicy2.apply(this, arguments);\n  }\n  var MINIMUM_MIN_PASSWORD_LENGTH = 6;\n  /**\n   * Stores password policy requirements and provides password validation against the policy.\n   *\n   * @internal\n   */\n  var PasswordPolicyImpl = /*#__PURE__*/function () {\n    function PasswordPolicyImpl(response) {\n      _classCallCheck(this, PasswordPolicyImpl);\n      // Only include custom strength options defined in the response.\n      var responseOptions = response.customStrengthOptions;\n      this.customStrengthOptions = {};\n      // TODO: Remove once the backend is updated to include the minimum min password length instead of undefined when there is no minimum length set.\n      this.customStrengthOptions.minPasswordLength = responseOptions.minPasswordLength ?? MINIMUM_MIN_PASSWORD_LENGTH;\n      if (responseOptions.maxPasswordLength) {\n        this.customStrengthOptions.maxPasswordLength = responseOptions.maxPasswordLength;\n      }\n      if (responseOptions.containsLowercaseCharacter !== undefined) {\n        this.customStrengthOptions.containsLowercaseLetter = responseOptions.containsLowercaseCharacter;\n      }\n      if (responseOptions.containsUppercaseCharacter !== undefined) {\n        this.customStrengthOptions.containsUppercaseLetter = responseOptions.containsUppercaseCharacter;\n      }\n      if (responseOptions.containsNumericCharacter !== undefined) {\n        this.customStrengthOptions.containsNumericCharacter = responseOptions.containsNumericCharacter;\n      }\n      if (responseOptions.containsNonAlphanumericCharacter !== undefined) {\n        this.customStrengthOptions.containsNonAlphanumericCharacter = responseOptions.containsNonAlphanumericCharacter;\n      }\n      this.enforcementState = response.enforcementState;\n      if (this.enforcementState === 'ENFORCEMENT_STATE_UNSPECIFIED') {\n        this.enforcementState = 'OFF';\n      }\n      // Use an empty string if no non-alphanumeric characters are specified in the response.\n      this.allowedNonAlphanumericCharacters = response.allowedNonAlphanumericCharacters?.join('') ?? '';\n      this.forceUpgradeOnSignin = response.forceUpgradeOnSignin ?? false;\n      this.schemaVersion = response.schemaVersion;\n    }\n    return _createClass(PasswordPolicyImpl, [{\n      key: \"validatePassword\",\n      value: function validatePassword(password) {\n        var status = {\n          isValid: true,\n          passwordPolicy: this\n        };\n        // Check the password length and character options.\n        this.validatePasswordLengthOptions(password, status);\n        this.validatePasswordCharacterOptions(password, status);\n        // Combine the status into single isValid property.\n        status.isValid && (status.isValid = status.meetsMinPasswordLength ?? true);\n        status.isValid && (status.isValid = status.meetsMaxPasswordLength ?? true);\n        status.isValid && (status.isValid = status.containsLowercaseLetter ?? true);\n        status.isValid && (status.isValid = status.containsUppercaseLetter ?? true);\n        status.isValid && (status.isValid = status.containsNumericCharacter ?? true);\n        status.isValid && (status.isValid = status.containsNonAlphanumericCharacter ?? true);\n        return status;\n      }\n      /**\n       * Validates that the password meets the length options for the policy.\n       *\n       * @param password Password to validate.\n       * @param status Validation status.\n       */\n    }, {\n      key: \"validatePasswordLengthOptions\",\n      value: function validatePasswordLengthOptions(password, status) {\n        var minPasswordLength = this.customStrengthOptions.minPasswordLength;\n        var maxPasswordLength = this.customStrengthOptions.maxPasswordLength;\n        if (minPasswordLength) {\n          status.meetsMinPasswordLength = password.length >= minPasswordLength;\n        }\n        if (maxPasswordLength) {\n          status.meetsMaxPasswordLength = password.length <= maxPasswordLength;\n        }\n      }\n      /**\n       * Validates that the password meets the character options for the policy.\n       *\n       * @param password Password to validate.\n       * @param status Validation status.\n       */\n    }, {\n      key: \"validatePasswordCharacterOptions\",\n      value: function validatePasswordCharacterOptions(password, status) {\n        // Assign statuses for requirements even if the password is an empty string.\n        this.updatePasswordCharacterOptionsStatuses(status, /* containsLowercaseCharacter= */false, /* containsUppercaseCharacter= */false, /* containsNumericCharacter= */false, /* containsNonAlphanumericCharacter= */false);\n        var passwordChar;\n        for (var i = 0; i < password.length; i++) {\n          passwordChar = password.charAt(i);\n          this.updatePasswordCharacterOptionsStatuses(status, /* containsLowercaseCharacter= */passwordChar >= 'a' && passwordChar <= 'z', /* containsUppercaseCharacter= */passwordChar >= 'A' && passwordChar <= 'Z', /* containsNumericCharacter= */passwordChar >= '0' && passwordChar <= '9', /* containsNonAlphanumericCharacter= */this.allowedNonAlphanumericCharacters.includes(passwordChar));\n        }\n      }\n      /**\n       * Updates the running validation status with the statuses for the character options.\n       * Expected to be called each time a character is processed to update each option status\n       * based on the current character.\n       *\n       * @param status Validation status.\n       * @param containsLowercaseCharacter Whether the character is a lowercase letter.\n       * @param containsUppercaseCharacter Whether the character is an uppercase letter.\n       * @param containsNumericCharacter Whether the character is a numeric character.\n       * @param containsNonAlphanumericCharacter Whether the character is a non-alphanumeric character.\n       */\n    }, {\n      key: \"updatePasswordCharacterOptionsStatuses\",\n      value: function updatePasswordCharacterOptionsStatuses(status, containsLowercaseCharacter, containsUppercaseCharacter, containsNumericCharacter, containsNonAlphanumericCharacter) {\n        if (this.customStrengthOptions.containsLowercaseLetter) {\n          status.containsLowercaseLetter || (status.containsLowercaseLetter = containsLowercaseCharacter);\n        }\n        if (this.customStrengthOptions.containsUppercaseLetter) {\n          status.containsUppercaseLetter || (status.containsUppercaseLetter = containsUppercaseCharacter);\n        }\n        if (this.customStrengthOptions.containsNumericCharacter) {\n          status.containsNumericCharacter || (status.containsNumericCharacter = containsNumericCharacter);\n        }\n        if (this.customStrengthOptions.containsNonAlphanumericCharacter) {\n          status.containsNonAlphanumericCharacter || (status.containsNonAlphanumericCharacter = containsNonAlphanumericCharacter);\n        }\n      }\n    }]);\n  }();\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  var AuthImpl = /*#__PURE__*/function () {\n    function AuthImpl(app, heartbeatServiceProvider, appCheckServiceProvider, config) {\n      _classCallCheck(this, AuthImpl);\n      this.app = app;\n      this.heartbeatServiceProvider = heartbeatServiceProvider;\n      this.appCheckServiceProvider = appCheckServiceProvider;\n      this.config = config;\n      this.currentUser = null;\n      this.emulatorConfig = null;\n      this.operations = Promise.resolve();\n      this.authStateSubscription = new Subscription(this);\n      this.idTokenSubscription = new Subscription(this);\n      this.beforeStateQueue = new AuthMiddlewareQueue(this);\n      this.redirectUser = null;\n      this.isProactiveRefreshEnabled = false;\n      this.EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION = 1;\n      // Any network calls will set this to true and prevent subsequent emulator\n      // initialization\n      this._canInitEmulator = true;\n      this._isInitialized = false;\n      this._deleted = false;\n      this._initializationPromise = null;\n      this._popupRedirectResolver = null;\n      this._errorFactory = _DEFAULT_AUTH_ERROR_FACTORY;\n      this._agentRecaptchaConfig = null;\n      this._tenantRecaptchaConfigs = {};\n      this._projectPasswordPolicy = null;\n      this._tenantPasswordPolicies = {};\n      this._resolvePersistenceManagerAvailable = undefined;\n      // Tracks the last notified UID for state change listeners to prevent\n      // repeated calls to the callbacks. Undefined means it's never been\n      // called, whereas null means it's been called with a signed out user\n      this.lastNotifiedUid = undefined;\n      this.languageCode = null;\n      this.tenantId = null;\n      this.settings = {\n        appVerificationDisabledForTesting: false\n      };\n      this.frameworks = [];\n      this.name = app.name;\n      this.clientVersion = config.sdkClientVersion;\n      // TODO(jamesdaniels) explore less hacky way to do this, cookie authentication needs\n      // persistenceMananger to be available. see _getFinalTarget for more context\n      this._persistenceManagerAvailable = new Promise(resolve => this._resolvePersistenceManagerAvailable = resolve);\n    }\n    return _createClass(AuthImpl, [{\n      key: \"_initializeWithPersistence\",\n      value: function _initializeWithPersistence(persistenceHierarchy, popupRedirectResolver) {\n        var _this2 = this;\n        if (popupRedirectResolver) {\n          this._popupRedirectResolver = _getInstance(popupRedirectResolver);\n        }\n        // Have to check for app deletion throughout initialization (after each\n        // promise resolution)\n        this._initializationPromise = this.queue(/*#__PURE__*/_asyncToGenerator(function* () {\n          if (_this2._deleted) {\n            return;\n          }\n          _this2.persistenceManager = yield PersistenceUserManager.create(_this2, persistenceHierarchy);\n          _this2._resolvePersistenceManagerAvailable?.();\n          if (_this2._deleted) {\n            return;\n          }\n          // Initialize the resolver early if necessary (only applicable to web:\n          // this will cause the iframe to load immediately in certain cases)\n          if (_this2._popupRedirectResolver?._shouldInitProactively) {\n            // If this fails, don't halt auth loading\n            try {\n              yield _this2._popupRedirectResolver._initialize(_this2);\n            } catch (e) {\n              /* Ignore the error */\n            }\n          }\n          yield _this2.initializeCurrentUser(popupRedirectResolver);\n          _this2.lastNotifiedUid = _this2.currentUser?.uid || null;\n          if (_this2._deleted) {\n            return;\n          }\n          _this2._isInitialized = true;\n        }));\n        return this._initializationPromise;\n      }\n      /**\n       * If the persistence is changed in another window, the user manager will let us know\n       */\n    }, {\n      key: \"_onStorageEvent\",\n      value: (function () {\n        var _onStorageEvent2 = _asyncToGenerator(function* () {\n          if (this._deleted) {\n            return;\n          }\n          var user = yield this.assertedPersistence.getCurrentUser();\n          if (!this.currentUser && !user) {\n            // No change, do nothing (was signed out and remained signed out).\n            return;\n          }\n          // If the same user is to be synchronized.\n          if (this.currentUser && user && this.currentUser.uid === user.uid) {\n            // Data update, simply copy data changes.\n            this._currentUser._assign(user);\n            // If tokens changed from previous user tokens, this will trigger\n            // notifyAuthListeners_.\n            yield this.currentUser.getIdToken();\n            return;\n          }\n          // Update current Auth state. Either a new login or logout.\n          // Skip blocking callbacks, they should not apply to a change in another tab.\n          yield this._updateCurrentUser(user, /* skipBeforeStateCallbacks */true);\n        });\n        function _onStorageEvent() {\n          return _onStorageEvent2.apply(this, arguments);\n        }\n        return _onStorageEvent;\n      }())\n    }, {\n      key: \"initializeCurrentUserFromIdToken\",\n      value: function () {\n        var _initializeCurrentUserFromIdToken = _asyncToGenerator(function* (idToken) {\n          try {\n            var response = yield getAccountInfo(this, {\n              idToken\n            });\n            var user = yield UserImpl._fromGetAccountInfoResponse(this, response, idToken);\n            yield this.directlySetCurrentUser(user);\n          } catch (err) {\n            console.warn('FirebaseServerApp could not login user with provided authIdToken: ', err);\n            yield this.directlySetCurrentUser(null);\n          }\n        });\n        function initializeCurrentUserFromIdToken(_x53) {\n          return _initializeCurrentUserFromIdToken.apply(this, arguments);\n        }\n        return initializeCurrentUserFromIdToken;\n      }()\n    }, {\n      key: \"initializeCurrentUser\",\n      value: function () {\n        var _initializeCurrentUser = _asyncToGenerator(function* (popupRedirectResolver) {\n          if (app._isFirebaseServerApp(this.app)) {\n            var idToken = this.app.settings.authIdToken;\n            if (idToken) {\n              // Start the auth operation in the next tick to allow a moment for the customer's app to\n              // attach an emulator, if desired.\n              return new Promise(resolve => {\n                setTimeout(() => this.initializeCurrentUserFromIdToken(idToken).then(resolve, resolve));\n              });\n            } else {\n              return this.directlySetCurrentUser(null);\n            }\n          }\n          // First check to see if we have a pending redirect event.\n          var previouslyStoredUser = yield this.assertedPersistence.getCurrentUser();\n          var futureCurrentUser = previouslyStoredUser;\n          var needsTocheckMiddleware = false;\n          if (popupRedirectResolver && this.config.authDomain) {\n            yield this.getOrInitRedirectPersistenceManager();\n            var redirectUserEventId = this.redirectUser?._redirectEventId;\n            var storedUserEventId = futureCurrentUser?._redirectEventId;\n            var result = yield this.tryRedirectSignIn(popupRedirectResolver);\n            // If the stored user (i.e. the old \"currentUser\") has a redirectId that\n            // matches the redirect user, then we want to initially sign in with the\n            // new user object from result.\n            // TODO(samgho): More thoroughly test all of this\n            if ((!redirectUserEventId || redirectUserEventId === storedUserEventId) && result?.user) {\n              futureCurrentUser = result.user;\n              needsTocheckMiddleware = true;\n            }\n          }\n          // If no user in persistence, there is no current user. Set to null.\n          if (!futureCurrentUser) {\n            return this.directlySetCurrentUser(null);\n          }\n          if (!futureCurrentUser._redirectEventId) {\n            // This isn't a redirect link operation, we can reload and bail.\n            // First though, ensure that we check the middleware is happy.\n            if (needsTocheckMiddleware) {\n              try {\n                yield this.beforeStateQueue.runMiddleware(futureCurrentUser);\n              } catch (e) {\n                futureCurrentUser = previouslyStoredUser;\n                // We know this is available since the bit is only set when the\n                // resolver is available\n                this._popupRedirectResolver._overrideRedirectResult(this, () => Promise.reject(e));\n              }\n            }\n            if (futureCurrentUser) {\n              return this.reloadAndSetCurrentUserOrClear(futureCurrentUser);\n            } else {\n              return this.directlySetCurrentUser(null);\n            }\n          }\n          _assert(this._popupRedirectResolver, this, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n          yield this.getOrInitRedirectPersistenceManager();\n          // If the redirect user's event ID matches the current user's event ID,\n          // DO NOT reload the current user, otherwise they'll be cleared from storage.\n          // This is important for the reauthenticateWithRedirect() flow.\n          if (this.redirectUser && this.redirectUser._redirectEventId === futureCurrentUser._redirectEventId) {\n            return this.directlySetCurrentUser(futureCurrentUser);\n          }\n          return this.reloadAndSetCurrentUserOrClear(futureCurrentUser);\n        });\n        function initializeCurrentUser(_x54) {\n          return _initializeCurrentUser.apply(this, arguments);\n        }\n        return initializeCurrentUser;\n      }()\n    }, {\n      key: \"tryRedirectSignIn\",\n      value: function () {\n        var _tryRedirectSignIn = _asyncToGenerator(function* (redirectResolver) {\n          // The redirect user needs to be checked (and signed in if available)\n          // during auth initialization. All of the normal sign in and link/reauth\n          // flows call back into auth and push things onto the promise queue. We\n          // need to await the result of the redirect sign in *inside the promise\n          // queue*. This presents a problem: we run into deadlock. See:\n          //    ┌> [Initialization] ─────┐\n          //    ┌> [<other queue tasks>] │\n          //    └─ [getRedirectResult] <─┘\n          //    where [] are tasks on the queue and arrows denote awaits\n          // Initialization will never complete because it's waiting on something\n          // that's waiting for initialization to complete!\n          //\n          // Instead, this method calls getRedirectResult() (stored in\n          // _completeRedirectFn) with an optional parameter that instructs all of\n          // the underlying auth operations to skip anything that mutates auth state.\n          var result = null;\n          try {\n            // We know this._popupRedirectResolver is set since redirectResolver\n            // is passed in. The _completeRedirectFn expects the unwrapped extern.\n            result = yield this._popupRedirectResolver._completeRedirectFn(this, redirectResolver, true);\n          } catch (e) {\n            // Swallow any errors here; the code can retrieve them in\n            // getRedirectResult().\n            yield this._setRedirectUser(null);\n          }\n          return result;\n        });\n        function tryRedirectSignIn(_x55) {\n          return _tryRedirectSignIn.apply(this, arguments);\n        }\n        return tryRedirectSignIn;\n      }()\n    }, {\n      key: \"reloadAndSetCurrentUserOrClear\",\n      value: function () {\n        var _reloadAndSetCurrentUserOrClear = _asyncToGenerator(function* (user) {\n          try {\n            yield _reloadWithoutSaving(user);\n          } catch (e) {\n            if (e?.code !== `auth/${\"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */}`) {\n              // Something's wrong with the user's token. Log them out and remove\n              // them from storage\n              return this.directlySetCurrentUser(null);\n            }\n          }\n          return this.directlySetCurrentUser(user);\n        });\n        function reloadAndSetCurrentUserOrClear(_x56) {\n          return _reloadAndSetCurrentUserOrClear.apply(this, arguments);\n        }\n        return reloadAndSetCurrentUserOrClear;\n      }()\n    }, {\n      key: \"useDeviceLanguage\",\n      value: function useDeviceLanguage() {\n        this.languageCode = _getUserLanguage();\n      }\n    }, {\n      key: \"_delete\",\n      value: function () {\n        var _delete3 = _asyncToGenerator(function* () {\n          this._deleted = true;\n        });\n        function _delete() {\n          return _delete3.apply(this, arguments);\n        }\n        return _delete;\n      }()\n    }, {\n      key: \"updateCurrentUser\",\n      value: function () {\n        var _updateCurrentUser2 = _asyncToGenerator(function* (userExtern) {\n          if (app._isFirebaseServerApp(this.app)) {\n            return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(this));\n          }\n          // The public updateCurrentUser method needs to make a copy of the user,\n          // and also check that the project matches\n          var user = userExtern ? util.getModularInstance(userExtern) : null;\n          if (user) {\n            _assert(user.auth.config.apiKey === this.config.apiKey, this, \"invalid-user-token\" /* AuthErrorCode.INVALID_AUTH */);\n          }\n          return this._updateCurrentUser(user && user._clone(this));\n        });\n        function updateCurrentUser(_x57) {\n          return _updateCurrentUser2.apply(this, arguments);\n        }\n        return updateCurrentUser;\n      }()\n    }, {\n      key: \"_updateCurrentUser\",\n      value: function () {\n        var _updateCurrentUser3 = _asyncToGenerator(function* (user) {\n          var _this3 = this;\n          var skipBeforeStateCallbacks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n          if (this._deleted) {\n            return;\n          }\n          if (user) {\n            _assert(this.tenantId === user.tenantId, this, \"tenant-id-mismatch\" /* AuthErrorCode.TENANT_ID_MISMATCH */);\n          }\n          if (!skipBeforeStateCallbacks) {\n            yield this.beforeStateQueue.runMiddleware(user);\n          }\n          return this.queue(/*#__PURE__*/_asyncToGenerator(function* () {\n            yield _this3.directlySetCurrentUser(user);\n            _this3.notifyAuthListeners();\n          }));\n        });\n        function _updateCurrentUser(_x58) {\n          return _updateCurrentUser3.apply(this, arguments);\n        }\n        return _updateCurrentUser;\n      }()\n    }, {\n      key: \"signOut\",\n      value: function () {\n        var _signOut = _asyncToGenerator(function* () {\n          if (app._isFirebaseServerApp(this.app)) {\n            return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(this));\n          }\n          // Run first, to block _setRedirectUser() if any callbacks fail.\n          yield this.beforeStateQueue.runMiddleware(null);\n          // Clear the redirect user when signOut is called\n          if (this.redirectPersistenceManager || this._popupRedirectResolver) {\n            yield this._setRedirectUser(null);\n          }\n          // Prevent callbacks from being called again in _updateCurrentUser, as\n          // they were already called in the first line.\n          return this._updateCurrentUser(null, /* skipBeforeStateCallbacks */true);\n        });\n        function signOut() {\n          return _signOut.apply(this, arguments);\n        }\n        return signOut;\n      }()\n    }, {\n      key: \"setPersistence\",\n      value: function setPersistence(persistence) {\n        var _this4 = this;\n        if (app._isFirebaseServerApp(this.app)) {\n          return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(this));\n        }\n        return this.queue(/*#__PURE__*/_asyncToGenerator(function* () {\n          yield _this4.assertedPersistence.setPersistence(_getInstance(persistence));\n        }));\n      }\n    }, {\n      key: \"_getRecaptchaConfig\",\n      value: function _getRecaptchaConfig() {\n        if (this.tenantId == null) {\n          return this._agentRecaptchaConfig;\n        } else {\n          return this._tenantRecaptchaConfigs[this.tenantId];\n        }\n      }\n    }, {\n      key: \"validatePassword\",\n      value: function () {\n        var _validatePassword = _asyncToGenerator(function* (password) {\n          if (!this._getPasswordPolicyInternal()) {\n            yield this._updatePasswordPolicy();\n          }\n          // Password policy will be defined after fetching.\n          var passwordPolicy = this._getPasswordPolicyInternal();\n          // Check that the policy schema version is supported by the SDK.\n          // TODO: Update this logic to use a max supported policy schema version once we have multiple schema versions.\n          if (passwordPolicy.schemaVersion !== this.EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION) {\n            return Promise.reject(this._errorFactory.create(\"unsupported-password-policy-schema-version\" /* AuthErrorCode.UNSUPPORTED_PASSWORD_POLICY_SCHEMA_VERSION */, {}));\n          }\n          return passwordPolicy.validatePassword(password);\n        });\n        function validatePassword(_x59) {\n          return _validatePassword.apply(this, arguments);\n        }\n        return validatePassword;\n      }()\n    }, {\n      key: \"_getPasswordPolicyInternal\",\n      value: function _getPasswordPolicyInternal() {\n        if (this.tenantId === null) {\n          return this._projectPasswordPolicy;\n        } else {\n          return this._tenantPasswordPolicies[this.tenantId];\n        }\n      }\n    }, {\n      key: \"_updatePasswordPolicy\",\n      value: function () {\n        var _updatePasswordPolicy2 = _asyncToGenerator(function* () {\n          var response = yield _getPasswordPolicy(this);\n          var passwordPolicy = new PasswordPolicyImpl(response);\n          if (this.tenantId === null) {\n            this._projectPasswordPolicy = passwordPolicy;\n          } else {\n            this._tenantPasswordPolicies[this.tenantId] = passwordPolicy;\n          }\n        });\n        function _updatePasswordPolicy() {\n          return _updatePasswordPolicy2.apply(this, arguments);\n        }\n        return _updatePasswordPolicy;\n      }()\n    }, {\n      key: \"_getPersistenceType\",\n      value: function _getPersistenceType() {\n        return this.assertedPersistence.persistence.type;\n      }\n    }, {\n      key: \"_getPersistence\",\n      value: function _getPersistence() {\n        return this.assertedPersistence.persistence;\n      }\n    }, {\n      key: \"_updateErrorMap\",\n      value: function _updateErrorMap(errorMap) {\n        this._errorFactory = new util.ErrorFactory('auth', 'Firebase', errorMap());\n      }\n    }, {\n      key: \"onAuthStateChanged\",\n      value: function onAuthStateChanged(nextOrObserver, error, completed) {\n        return this.registerStateListener(this.authStateSubscription, nextOrObserver, error, completed);\n      }\n    }, {\n      key: \"beforeAuthStateChanged\",\n      value: function beforeAuthStateChanged(callback, onAbort) {\n        return this.beforeStateQueue.pushCallback(callback, onAbort);\n      }\n    }, {\n      key: \"onIdTokenChanged\",\n      value: function onIdTokenChanged(nextOrObserver, error, completed) {\n        return this.registerStateListener(this.idTokenSubscription, nextOrObserver, error, completed);\n      }\n    }, {\n      key: \"authStateReady\",\n      value: function authStateReady() {\n        return new Promise((resolve, reject) => {\n          if (this.currentUser) {\n            resolve();\n          } else {\n            var unsubscribe = this.onAuthStateChanged(() => {\n              unsubscribe();\n              resolve();\n            }, reject);\n          }\n        });\n      }\n      /**\n       * Revokes the given access token. Currently only supports Apple OAuth access tokens.\n       */\n    }, {\n      key: \"revokeAccessToken\",\n      value: (function () {\n        var _revokeAccessToken = _asyncToGenerator(function* (token) {\n          if (this.currentUser) {\n            var idToken = yield this.currentUser.getIdToken();\n            // Generalize this to accept other providers once supported.\n            var request = {\n              providerId: 'apple.com',\n              tokenType: \"ACCESS_TOKEN\" /* TokenType.ACCESS_TOKEN */,\n              token,\n              idToken\n            };\n            if (this.tenantId != null) {\n              request.tenantId = this.tenantId;\n            }\n            yield revokeToken(this, request);\n          }\n        });\n        function revokeAccessToken(_x60) {\n          return _revokeAccessToken.apply(this, arguments);\n        }\n        return revokeAccessToken;\n      }())\n    }, {\n      key: \"toJSON\",\n      value: function toJSON() {\n        return {\n          apiKey: this.config.apiKey,\n          authDomain: this.config.authDomain,\n          appName: this.name,\n          currentUser: this._currentUser?.toJSON()\n        };\n      }\n    }, {\n      key: \"_setRedirectUser\",\n      value: function () {\n        var _setRedirectUser2 = _asyncToGenerator(function* (user, popupRedirectResolver) {\n          var redirectManager = yield this.getOrInitRedirectPersistenceManager(popupRedirectResolver);\n          return user === null ? redirectManager.removeCurrentUser() : redirectManager.setCurrentUser(user);\n        });\n        function _setRedirectUser(_x61, _x62) {\n          return _setRedirectUser2.apply(this, arguments);\n        }\n        return _setRedirectUser;\n      }()\n    }, {\n      key: \"getOrInitRedirectPersistenceManager\",\n      value: function () {\n        var _getOrInitRedirectPersistenceManager = _asyncToGenerator(function* (popupRedirectResolver) {\n          if (!this.redirectPersistenceManager) {\n            var resolver = popupRedirectResolver && _getInstance(popupRedirectResolver) || this._popupRedirectResolver;\n            _assert(resolver, this, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n            this.redirectPersistenceManager = yield PersistenceUserManager.create(this, [_getInstance(resolver._redirectPersistence)], \"redirectUser\" /* KeyName.REDIRECT_USER */);\n            this.redirectUser = yield this.redirectPersistenceManager.getCurrentUser();\n          }\n          return this.redirectPersistenceManager;\n        });\n        function getOrInitRedirectPersistenceManager(_x63) {\n          return _getOrInitRedirectPersistenceManager.apply(this, arguments);\n        }\n        return getOrInitRedirectPersistenceManager;\n      }()\n    }, {\n      key: \"_redirectUserForId\",\n      value: function () {\n        var _redirectUserForId2 = _asyncToGenerator(function* (id) {\n          // Make sure we've cleared any pending persistence actions if we're not in\n          // the initializer\n          if (this._isInitialized) {\n            yield this.queue(/*#__PURE__*/_asyncToGenerator(function* () {}));\n          }\n          if (this._currentUser?._redirectEventId === id) {\n            return this._currentUser;\n          }\n          if (this.redirectUser?._redirectEventId === id) {\n            return this.redirectUser;\n          }\n          return null;\n        });\n        function _redirectUserForId(_x64) {\n          return _redirectUserForId2.apply(this, arguments);\n        }\n        return _redirectUserForId;\n      }()\n    }, {\n      key: \"_persistUserIfCurrent\",\n      value: function () {\n        var _persistUserIfCurrent2 = _asyncToGenerator(function* (user) {\n          var _this5 = this;\n          if (user === this.currentUser) {\n            return this.queue(/*#__PURE__*/_asyncToGenerator(function* () {\n              return _this5.directlySetCurrentUser(user);\n            }));\n          }\n        });\n        function _persistUserIfCurrent(_x65) {\n          return _persistUserIfCurrent2.apply(this, arguments);\n        }\n        return _persistUserIfCurrent;\n      }() /** Notifies listeners only if the user is current */\n    }, {\n      key: \"_notifyListenersIfCurrent\",\n      value: function _notifyListenersIfCurrent(user) {\n        if (user === this.currentUser) {\n          this.notifyAuthListeners();\n        }\n      }\n    }, {\n      key: \"_key\",\n      value: function _key() {\n        return `${this.config.authDomain}:${this.config.apiKey}:${this.name}`;\n      }\n    }, {\n      key: \"_startProactiveRefresh\",\n      value: function _startProactiveRefresh() {\n        this.isProactiveRefreshEnabled = true;\n        if (this.currentUser) {\n          this._currentUser._startProactiveRefresh();\n        }\n      }\n    }, {\n      key: \"_stopProactiveRefresh\",\n      value: function _stopProactiveRefresh() {\n        this.isProactiveRefreshEnabled = false;\n        if (this.currentUser) {\n          this._currentUser._stopProactiveRefresh();\n        }\n      }\n      /** Returns the current user cast as the internal type */\n    }, {\n      key: \"_currentUser\",\n      get: function () {\n        return this.currentUser;\n      }\n    }, {\n      key: \"notifyAuthListeners\",\n      value: function notifyAuthListeners() {\n        if (!this._isInitialized) {\n          return;\n        }\n        this.idTokenSubscription.next(this.currentUser);\n        var currentUid = this.currentUser?.uid ?? null;\n        if (this.lastNotifiedUid !== currentUid) {\n          this.lastNotifiedUid = currentUid;\n          this.authStateSubscription.next(this.currentUser);\n        }\n      }\n    }, {\n      key: \"registerStateListener\",\n      value: function registerStateListener(subscription, nextOrObserver, error, completed) {\n        if (this._deleted) {\n          return () => {};\n        }\n        var cb = typeof nextOrObserver === 'function' ? nextOrObserver : nextOrObserver.next.bind(nextOrObserver);\n        var isUnsubscribed = false;\n        var promise = this._isInitialized ? Promise.resolve() : this._initializationPromise;\n        _assert(promise, this, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        // The callback needs to be called asynchronously per the spec.\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        promise.then(() => {\n          if (isUnsubscribed) {\n            return;\n          }\n          cb(this.currentUser);\n        });\n        if (typeof nextOrObserver === 'function') {\n          var unsubscribe = subscription.addObserver(nextOrObserver, error, completed);\n          return () => {\n            isUnsubscribed = true;\n            unsubscribe();\n          };\n        } else {\n          var _unsubscribe = subscription.addObserver(nextOrObserver);\n          return () => {\n            isUnsubscribed = true;\n            _unsubscribe();\n          };\n        }\n      }\n      /**\n       * Unprotected (from race conditions) method to set the current user. This\n       * should only be called from within a queued callback. This is necessary\n       * because the queue shouldn't rely on another queued callback.\n       */\n    }, {\n      key: \"directlySetCurrentUser\",\n      value: (function () {\n        var _directlySetCurrentUser = _asyncToGenerator(function* (user) {\n          if (this.currentUser && this.currentUser !== user) {\n            this._currentUser._stopProactiveRefresh();\n          }\n          if (user && this.isProactiveRefreshEnabled) {\n            user._startProactiveRefresh();\n          }\n          this.currentUser = user;\n          if (user) {\n            yield this.assertedPersistence.setCurrentUser(user);\n          } else {\n            yield this.assertedPersistence.removeCurrentUser();\n          }\n        });\n        function directlySetCurrentUser(_x66) {\n          return _directlySetCurrentUser.apply(this, arguments);\n        }\n        return directlySetCurrentUser;\n      }())\n    }, {\n      key: \"queue\",\n      value: function queue(action) {\n        // In case something errors, the callback still should be called in order\n        // to keep the promise chain alive\n        this.operations = this.operations.then(action, action);\n        return this.operations;\n      }\n    }, {\n      key: \"assertedPersistence\",\n      get: function () {\n        _assert(this.persistenceManager, this, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        return this.persistenceManager;\n      }\n    }, {\n      key: \"_logFramework\",\n      value: function _logFramework(framework) {\n        if (!framework || this.frameworks.includes(framework)) {\n          return;\n        }\n        this.frameworks.push(framework);\n        // Sort alphabetically so that \"FirebaseCore-web,FirebaseUI-web\" and\n        // \"FirebaseUI-web,FirebaseCore-web\" aren't viewed as different.\n        this.frameworks.sort();\n        this.clientVersion = _getClientVersion(this.config.clientPlatform, this._getFrameworks());\n      }\n    }, {\n      key: \"_getFrameworks\",\n      value: function _getFrameworks() {\n        return this.frameworks;\n      }\n    }, {\n      key: \"_getAdditionalHeaders\",\n      value: function () {\n        var _getAdditionalHeaders2 = _asyncToGenerator(function* () {\n          // Additional headers on every request\n          var headers = {\n            [\"X-Client-Version\" /* HttpHeader.X_CLIENT_VERSION */]: this.clientVersion\n          };\n          if (this.app.options.appId) {\n            headers[\"X-Firebase-gmpid\" /* HttpHeader.X_FIREBASE_GMPID */] = this.app.options.appId;\n          }\n          // If the heartbeat service exists, add the heartbeat string\n          var heartbeatsHeader = yield this.heartbeatServiceProvider.getImmediate({\n            optional: true\n          })?.getHeartbeatsHeader();\n          if (heartbeatsHeader) {\n            headers[\"X-Firebase-Client\" /* HttpHeader.X_FIREBASE_CLIENT */] = heartbeatsHeader;\n          }\n          // If the App Check service exists, add the App Check token in the headers\n          var appCheckToken = yield this._getAppCheckToken();\n          if (appCheckToken) {\n            headers[\"X-Firebase-AppCheck\" /* HttpHeader.X_FIREBASE_APP_CHECK */] = appCheckToken;\n          }\n          return headers;\n        });\n        function _getAdditionalHeaders() {\n          return _getAdditionalHeaders2.apply(this, arguments);\n        }\n        return _getAdditionalHeaders;\n      }()\n    }, {\n      key: \"_getAppCheckToken\",\n      value: function () {\n        var _getAppCheckToken2 = _asyncToGenerator(function* () {\n          if (app._isFirebaseServerApp(this.app) && this.app.settings.appCheckToken) {\n            return this.app.settings.appCheckToken;\n          }\n          var appCheckTokenResult = yield this.appCheckServiceProvider.getImmediate({\n            optional: true\n          })?.getToken();\n          if (appCheckTokenResult?.error) {\n            // Context: appCheck.getToken() will never throw even if an error happened.\n            // In the error case, a dummy token will be returned along with an error field describing\n            // the error. In general, we shouldn't care about the error condition and just use\n            // the token (actual or dummy) to send requests.\n            _logWarn(`Error while retrieving App Check token: ${appCheckTokenResult.error}`);\n          }\n          return appCheckTokenResult?.token;\n        });\n        function _getAppCheckToken() {\n          return _getAppCheckToken2.apply(this, arguments);\n        }\n        return _getAppCheckToken;\n      }()\n    }]);\n  }();\n  /**\n   * Method to be used to cast down to our private implementation of Auth.\n   * It will also handle unwrapping from the compat type if necessary\n   *\n   * @param auth Auth object passed in from developer\n   */\n  function _castAuth(auth) {\n    return util.getModularInstance(auth);\n  }\n  /** Helper class to wrap subscriber logic */\n  var Subscription = /*#__PURE__*/function () {\n    function Subscription(auth) {\n      _classCallCheck(this, Subscription);\n      this.auth = auth;\n      this.observer = null;\n      this.addObserver = util.createSubscribe(observer => this.observer = observer);\n    }\n    return _createClass(Subscription, [{\n      key: \"next\",\n      get: function () {\n        _assert(this.observer, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        return this.observer.next.bind(this.observer);\n      }\n    }]);\n  }();\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  var externalJSProvider = {\n    loadJS() {\n      return _asyncToGenerator(function* () {\n        throw new Error('Unable to load external scripts');\n      })();\n    },\n    recaptchaV2Script: '',\n    recaptchaEnterpriseScript: '',\n    gapiScript: ''\n  };\n  function _setExternalJSProvider(p) {\n    externalJSProvider = p;\n  }\n  function _loadJS(url) {\n    return externalJSProvider.loadJS(url);\n  }\n  function _recaptchaV2ScriptUrl() {\n    return externalJSProvider.recaptchaV2Script;\n  }\n  function _recaptchaEnterpriseScriptUrl() {\n    return externalJSProvider.recaptchaEnterpriseScript;\n  }\n  function _gapiScriptUrl() {\n    return externalJSProvider.gapiScript;\n  }\n  function _generateCallbackName(prefix) {\n    return `__${prefix}${Math.floor(Math.random() * 1000000)}`;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  var _SOLVE_TIME_MS = 500;\n  var _EXPIRATION_TIME_MS = 60000;\n  var _WIDGET_ID_START = 1000000000000;\n  var MockReCaptcha = /*#__PURE__*/function () {\n    function MockReCaptcha(auth) {\n      _classCallCheck(this, MockReCaptcha);\n      this.auth = auth;\n      this.counter = _WIDGET_ID_START;\n      this._widgets = new Map();\n    }\n    return _createClass(MockReCaptcha, [{\n      key: \"render\",\n      value: function render(container, parameters) {\n        var id = this.counter;\n        this._widgets.set(id, new MockWidget(container, this.auth.name, parameters || {}));\n        this.counter++;\n        return id;\n      }\n    }, {\n      key: \"reset\",\n      value: function reset(optWidgetId) {\n        var id = optWidgetId || _WIDGET_ID_START;\n        void this._widgets.get(id)?.delete();\n        this._widgets.delete(id);\n      }\n    }, {\n      key: \"getResponse\",\n      value: function getResponse(optWidgetId) {\n        var id = optWidgetId || _WIDGET_ID_START;\n        return this._widgets.get(id)?.getResponse() || '';\n      }\n    }, {\n      key: \"execute\",\n      value: function () {\n        var _execute = _asyncToGenerator(function* (optWidgetId) {\n          var id = optWidgetId || _WIDGET_ID_START;\n          void this._widgets.get(id)?.execute();\n          return '';\n        });\n        function execute(_x67) {\n          return _execute.apply(this, arguments);\n        }\n        return execute;\n      }()\n    }]);\n  }();\n  var MockGreCAPTCHATopLevel = /*#__PURE__*/function () {\n    function MockGreCAPTCHATopLevel() {\n      _classCallCheck(this, MockGreCAPTCHATopLevel);\n      this.enterprise = new MockGreCAPTCHA();\n    }\n    return _createClass(MockGreCAPTCHATopLevel, [{\n      key: \"ready\",\n      value: function ready(callback) {\n        callback();\n      }\n    }, {\n      key: \"execute\",\n      value: function execute(\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      _siteKey, _options) {\n        return Promise.resolve('token');\n      }\n    }, {\n      key: \"render\",\n      value: function render(\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      _container, _parameters) {\n        return '';\n      }\n    }]);\n  }();\n  var MockGreCAPTCHA = /*#__PURE__*/function () {\n    function MockGreCAPTCHA() {\n      _classCallCheck(this, MockGreCAPTCHA);\n    }\n    return _createClass(MockGreCAPTCHA, [{\n      key: \"ready\",\n      value: function ready(callback) {\n        callback();\n      }\n    }, {\n      key: \"execute\",\n      value: function execute(\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      _siteKey, _options) {\n        return Promise.resolve('token');\n      }\n    }, {\n      key: \"render\",\n      value: function render(\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      _container, _parameters) {\n        return '';\n      }\n    }]);\n  }();\n  var MockWidget = /*#__PURE__*/function () {\n    function MockWidget(containerOrId, appName, params) {\n      _classCallCheck(this, MockWidget);\n      this.params = params;\n      this.timerId = null;\n      this.deleted = false;\n      this.responseToken = null;\n      this.clickHandler = () => {\n        this.execute();\n      };\n      var container = typeof containerOrId === 'string' ? document.getElementById(containerOrId) : containerOrId;\n      _assert(container, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */, {\n        appName\n      });\n      this.container = container;\n      this.isVisible = this.params.size !== 'invisible';\n      if (this.isVisible) {\n        this.execute();\n      } else {\n        this.container.addEventListener('click', this.clickHandler);\n      }\n    }\n    return _createClass(MockWidget, [{\n      key: \"getResponse\",\n      value: function getResponse() {\n        this.checkIfDeleted();\n        return this.responseToken;\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete() {\n        this.checkIfDeleted();\n        this.deleted = true;\n        if (this.timerId) {\n          clearTimeout(this.timerId);\n          this.timerId = null;\n        }\n        this.container.removeEventListener('click', this.clickHandler);\n      }\n    }, {\n      key: \"execute\",\n      value: function execute() {\n        this.checkIfDeleted();\n        if (this.timerId) {\n          return;\n        }\n        this.timerId = window.setTimeout(() => {\n          this.responseToken = generateRandomAlphaNumericString(50);\n          var _this$params = this.params,\n            callback = _this$params.callback,\n            expiredCallback = _this$params['expired-callback'];\n          if (callback) {\n            try {\n              callback(this.responseToken);\n            } catch (e) {}\n          }\n          this.timerId = window.setTimeout(() => {\n            this.timerId = null;\n            this.responseToken = null;\n            if (expiredCallback) {\n              try {\n                expiredCallback();\n              } catch (e) {}\n            }\n            if (this.isVisible) {\n              this.execute();\n            }\n          }, _EXPIRATION_TIME_MS);\n        }, _SOLVE_TIME_MS);\n      }\n    }, {\n      key: \"checkIfDeleted\",\n      value: function checkIfDeleted() {\n        if (this.deleted) {\n          throw new Error('reCAPTCHA mock was already deleted!');\n        }\n      }\n    }]);\n  }();\n  function generateRandomAlphaNumericString(len) {\n    var chars = [];\n    var allowedChars = '1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    for (var i = 0; i < len; i++) {\n      chars.push(allowedChars.charAt(Math.floor(Math.random() * allowedChars.length)));\n    }\n    return chars.join('');\n  }\n\n  /* eslint-disable @typescript-eslint/no-require-imports */\n  var RECAPTCHA_ENTERPRISE_VERIFIER_TYPE = 'recaptcha-enterprise';\n  var FAKE_TOKEN = 'NO_RECAPTCHA';\n  var RecaptchaEnterpriseVerifier = /*#__PURE__*/function () {\n    /**\n     *\n     * @param authExtern - The corresponding Firebase {@link Auth} instance.\n     *\n     */\n    function RecaptchaEnterpriseVerifier(authExtern) {\n      _classCallCheck(this, RecaptchaEnterpriseVerifier);\n      /**\n       * Identifies the type of application verifier (e.g. \"recaptcha-enterprise\").\n       */\n      this.type = RECAPTCHA_ENTERPRISE_VERIFIER_TYPE;\n      this.auth = _castAuth(authExtern);\n    }\n    /**\n     * Executes the verification process.\n     *\n     * @returns A Promise for a token that can be used to assert the validity of a request.\n     */\n    return _createClass(RecaptchaEnterpriseVerifier, [{\n      key: \"verify\",\n      value: (function () {\n        var _verify = _asyncToGenerator(function* () {\n          var action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'verify';\n          var forceRefresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n          function retrieveSiteKey(_x68) {\n            return _retrieveSiteKey.apply(this, arguments);\n          }\n          function _retrieveSiteKey() {\n            _retrieveSiteKey = _asyncToGenerator(function* (auth) {\n              if (!forceRefresh) {\n                if (auth.tenantId == null && auth._agentRecaptchaConfig != null) {\n                  return auth._agentRecaptchaConfig.siteKey;\n                }\n                if (auth.tenantId != null && auth._tenantRecaptchaConfigs[auth.tenantId] !== undefined) {\n                  return auth._tenantRecaptchaConfigs[auth.tenantId].siteKey;\n                }\n              }\n              return new Promise(/*#__PURE__*/function () {\n                var _ref10 = _asyncToGenerator(function* (resolve, reject) {\n                  getRecaptchaConfig(auth, {\n                    clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */,\n                    version: \"RECAPTCHA_ENTERPRISE\" /* RecaptchaVersion.ENTERPRISE */\n                  }).then(response => {\n                    if (response.recaptchaKey === undefined) {\n                      reject(new Error('recaptcha Enterprise site key undefined'));\n                    } else {\n                      var config = new RecaptchaConfig(response);\n                      if (auth.tenantId == null) {\n                        auth._agentRecaptchaConfig = config;\n                      } else {\n                        auth._tenantRecaptchaConfigs[auth.tenantId] = config;\n                      }\n                      return resolve(config.siteKey);\n                    }\n                  }).catch(error => {\n                    reject(error);\n                  });\n                });\n                return function (_x69, _x70) {\n                  return _ref10.apply(this, arguments);\n                };\n              }());\n            });\n            return _retrieveSiteKey.apply(this, arguments);\n          }\n          function retrieveRecaptchaToken(siteKey, resolve, reject) {\n            var grecaptcha = window.grecaptcha;\n            if (isEnterprise(grecaptcha)) {\n              grecaptcha.enterprise.ready(() => {\n                grecaptcha.enterprise.execute(siteKey, {\n                  action\n                }).then(token => {\n                  resolve(token);\n                }).catch(() => {\n                  resolve(FAKE_TOKEN);\n                });\n              });\n            } else {\n              reject(Error('No reCAPTCHA enterprise script loaded.'));\n            }\n          }\n          // Returns Promise for a mock token when appVerificationDisabledForTesting is true.\n          if (this.auth.settings.appVerificationDisabledForTesting) {\n            var mockRecaptcha = new MockGreCAPTCHATopLevel();\n            return mockRecaptcha.execute('siteKey', {\n              action: 'verify'\n            });\n          }\n          return new Promise((resolve, reject) => {\n            retrieveSiteKey(this.auth).then(siteKey => {\n              if (!forceRefresh && isEnterprise(window.grecaptcha)) {\n                retrieveRecaptchaToken(siteKey, resolve, reject);\n              } else {\n                if (typeof window === 'undefined') {\n                  reject(new Error('RecaptchaVerifier is only supported in browser'));\n                  return;\n                }\n                var url = _recaptchaEnterpriseScriptUrl();\n                if (url.length !== 0) {\n                  url += siteKey;\n                }\n                _loadJS(url).then(() => {\n                  retrieveRecaptchaToken(siteKey, resolve, reject);\n                }).catch(error => {\n                  reject(error);\n                });\n              }\n            }).catch(error => {\n              reject(error);\n            });\n          });\n        });\n        function verify() {\n          return _verify.apply(this, arguments);\n        }\n        return verify;\n      }())\n    }]);\n  }();\n  function injectRecaptchaFields(_x71, _x72, _x73) {\n    return _injectRecaptchaFields.apply(this, arguments);\n  }\n  function _injectRecaptchaFields() {\n    _injectRecaptchaFields = _asyncToGenerator(function* (auth, request, action) {\n      var isCaptchaResp = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var isFakeToken = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      var verifier = new RecaptchaEnterpriseVerifier(auth);\n      var captchaResponse;\n      if (isFakeToken) {\n        captchaResponse = FAKE_TOKEN;\n      } else {\n        try {\n          captchaResponse = yield verifier.verify(action);\n        } catch (error) {\n          captchaResponse = yield verifier.verify(action, true);\n        }\n      }\n      var newRequest = {\n        ...request\n      };\n      if (action === \"mfaSmsEnrollment\" /* RecaptchaActionName.MFA_SMS_ENROLLMENT */ || action === \"mfaSmsSignIn\" /* RecaptchaActionName.MFA_SMS_SIGNIN */) {\n        if ('phoneEnrollmentInfo' in newRequest) {\n          var phoneNumber = newRequest.phoneEnrollmentInfo.phoneNumber;\n          var recaptchaToken = newRequest.phoneEnrollmentInfo.recaptchaToken;\n          Object.assign(newRequest, {\n            'phoneEnrollmentInfo': {\n              phoneNumber,\n              recaptchaToken,\n              captchaResponse,\n              'clientType': \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */,\n              'recaptchaVersion': \"RECAPTCHA_ENTERPRISE\" /* RecaptchaVersion.ENTERPRISE */\n            }\n          });\n        } else if ('phoneSignInInfo' in newRequest) {\n          var _recaptchaToken = newRequest.phoneSignInInfo.recaptchaToken;\n          Object.assign(newRequest, {\n            'phoneSignInInfo': {\n              recaptchaToken: _recaptchaToken,\n              captchaResponse,\n              'clientType': \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */,\n              'recaptchaVersion': \"RECAPTCHA_ENTERPRISE\" /* RecaptchaVersion.ENTERPRISE */\n            }\n          });\n        }\n        return newRequest;\n      }\n      if (!isCaptchaResp) {\n        Object.assign(newRequest, {\n          captchaResponse\n        });\n      } else {\n        Object.assign(newRequest, {\n          'captchaResp': captchaResponse\n        });\n      }\n      Object.assign(newRequest, {\n        'clientType': \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n      });\n      Object.assign(newRequest, {\n        'recaptchaVersion': \"RECAPTCHA_ENTERPRISE\" /* RecaptchaVersion.ENTERPRISE */\n      });\n      return newRequest;\n    });\n    return _injectRecaptchaFields.apply(this, arguments);\n  }\n  function handleRecaptchaFlow(_x74, _x75, _x76, _x77, _x78) {\n    return _handleRecaptchaFlow.apply(this, arguments);\n  }\n  function _handleRecaptchaFlow() {\n    _handleRecaptchaFlow = _asyncToGenerator(function* (authInstance, request, actionName, actionMethod, recaptchaAuthProvider) {\n      if (recaptchaAuthProvider === \"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */) {\n        if (authInstance._getRecaptchaConfig()?.isProviderEnabled(\"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */)) {\n          var requestWithRecaptcha = yield injectRecaptchaFields(authInstance, request, actionName, actionName === \"getOobCode\" /* RecaptchaActionName.GET_OOB_CODE */);\n          return actionMethod(authInstance, requestWithRecaptcha);\n        } else {\n          return actionMethod(authInstance, request).catch(/*#__PURE__*/function () {\n            var _ref26 = _asyncToGenerator(function* (error) {\n              if (error.code === `auth/${\"missing-recaptcha-token\" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */}`) {\n                console.log(`${actionName} is protected by reCAPTCHA Enterprise for this project. Automatically triggering the reCAPTCHA flow and restarting the flow.`);\n                var _requestWithRecaptcha = yield injectRecaptchaFields(authInstance, request, actionName, actionName === \"getOobCode\" /* RecaptchaActionName.GET_OOB_CODE */);\n                return actionMethod(authInstance, _requestWithRecaptcha);\n              } else {\n                return Promise.reject(error);\n              }\n            });\n            return function (_x219) {\n              return _ref26.apply(this, arguments);\n            };\n          }());\n        }\n      } else if (recaptchaAuthProvider === \"PHONE_PROVIDER\" /* RecaptchaAuthProvider.PHONE_PROVIDER */) {\n        if (authInstance._getRecaptchaConfig()?.isProviderEnabled(\"PHONE_PROVIDER\" /* RecaptchaAuthProvider.PHONE_PROVIDER */)) {\n          var _requestWithRecaptcha2 = yield injectRecaptchaFields(authInstance, request, actionName);\n          return actionMethod(authInstance, _requestWithRecaptcha2).catch(/*#__PURE__*/function () {\n            var _ref27 = _asyncToGenerator(function* (error) {\n              if (authInstance._getRecaptchaConfig()?.getProviderEnforcementState(\"PHONE_PROVIDER\" /* RecaptchaAuthProvider.PHONE_PROVIDER */) === \"AUDIT\" /* EnforcementState.AUDIT */) {\n                // AUDIT mode\n                if (error.code === `auth/${\"missing-recaptcha-token\" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */}` || error.code === `auth/${\"invalid-app-credential\" /* AuthErrorCode.INVALID_APP_CREDENTIAL */}`) {\n                  console.log(`Failed to verify with reCAPTCHA Enterprise. Automatically triggering the reCAPTCHA v2 flow to complete the ${actionName} flow.`);\n                  // reCAPTCHA Enterprise token is missing or reCAPTCHA Enterprise token\n                  // check fails.\n                  // Fallback to reCAPTCHA v2 flow.\n                  var requestWithRecaptchaFields = yield injectRecaptchaFields(authInstance, request, actionName, false,\n                  // isCaptchaResp\n                  true // isFakeToken\n                  );\n                  // This will call the PhoneApiCaller to fetch and inject reCAPTCHA v2 token.\n                  return actionMethod(authInstance, requestWithRecaptchaFields);\n                }\n              }\n              // ENFORCE mode or AUDIT mode with any other error.\n              return Promise.reject(error);\n            });\n            return function (_x220) {\n              return _ref27.apply(this, arguments);\n            };\n          }());\n        } else {\n          // Do reCAPTCHA v2 flow.\n          var requestWithRecaptchaFields = yield injectRecaptchaFields(authInstance, request, actionName, false,\n          // isCaptchaResp\n          true // isFakeToken\n          );\n          // This will call the PhoneApiCaller to fetch and inject v2 token.\n          return actionMethod(authInstance, requestWithRecaptchaFields);\n        }\n      } else {\n        return Promise.reject(recaptchaAuthProvider + ' provider is not supported.');\n      }\n    });\n    return _handleRecaptchaFlow.apply(this, arguments);\n  }\n  function _initializeRecaptchaConfig(_x79) {\n    return _initializeRecaptchaConfig2.apply(this, arguments);\n  }\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Initializes an {@link Auth} instance with fine-grained control over\n   * {@link Dependencies}.\n   *\n   * @remarks\n   *\n   * This function allows more control over the {@link Auth} instance than\n   * {@link getAuth}. `getAuth` uses platform-specific defaults to supply\n   * the {@link Dependencies}. In general, `getAuth` is the easiest way to\n   * initialize Auth and works for most use cases. Use `initializeAuth` if you\n   * need control over which persistence layer is used, or to minimize bundle\n   * size if you're not using either `signInWithPopup` or `signInWithRedirect`.\n   *\n   * For example, if your app only uses anonymous accounts and you only want\n   * accounts saved for the current session, initialize `Auth` with:\n   *\n   * ```js\n   * const auth = initializeAuth(app, {\n   *   persistence: browserSessionPersistence,\n   *   popupRedirectResolver: undefined,\n   * });\n   * ```\n   *\n   * @public\n   */\n  function _initializeRecaptchaConfig2() {\n    _initializeRecaptchaConfig2 = _asyncToGenerator(function* (auth) {\n      var authInternal = _castAuth(auth);\n      var response = yield getRecaptchaConfig(authInternal, {\n        clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */,\n        version: \"RECAPTCHA_ENTERPRISE\" /* RecaptchaVersion.ENTERPRISE */\n      });\n      var config = new RecaptchaConfig(response);\n      if (authInternal.tenantId == null) {\n        authInternal._agentRecaptchaConfig = config;\n      } else {\n        authInternal._tenantRecaptchaConfigs[authInternal.tenantId] = config;\n      }\n      if (config.isAnyProviderEnabled()) {\n        var verifier = new RecaptchaEnterpriseVerifier(authInternal);\n        void verifier.verify();\n      }\n    });\n    return _initializeRecaptchaConfig2.apply(this, arguments);\n  }\n  function initializeAuth(app$1, deps) {\n    var provider = app._getProvider(app$1, 'auth');\n    if (provider.isInitialized()) {\n      var _auth2 = provider.getImmediate();\n      var initialOptions = provider.getOptions();\n      if (util.deepEqual(initialOptions, deps ?? {})) {\n        return _auth2;\n      } else {\n        _fail(_auth2, \"already-initialized\" /* AuthErrorCode.ALREADY_INITIALIZED */);\n      }\n    }\n    var auth = provider.initialize({\n      options: deps\n    });\n    return auth;\n  }\n  function _initializeAuthInstance(auth, deps) {\n    var persistence = deps?.persistence || [];\n    var hierarchy = (Array.isArray(persistence) ? persistence : [persistence]).map(_getInstance);\n    if (deps?.errorMap) {\n      auth._updateErrorMap(deps.errorMap);\n    }\n    // This promise is intended to float; auth initialization happens in the\n    // background, meanwhile the auth object may be used by the app.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    auth._initializeWithPersistence(hierarchy, deps?.popupRedirectResolver);\n  }\n\n  /**\n   * Changes the {@link Auth} instance to communicate with the Firebase Auth Emulator, instead of production\n   * Firebase Auth services.\n   *\n   * @remarks\n   * This must be called synchronously immediately following the first call to\n   * {@link initializeAuth}.  Do not use with production credentials as emulator\n   * traffic is not encrypted.\n   *\n   *\n   * @example\n   * ```javascript\n   * connectAuthEmulator(auth, 'http://127.0.0.1:9099', { disableWarnings: true });\n   * ```\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param url - The URL at which the emulator is running (eg, 'http://localhost:9099').\n   * @param options - Optional. `options.disableWarnings` defaults to `false`. Set it to\n   * `true` to disable the warning banner attached to the DOM.\n   *\n   * @public\n   */\n  function connectAuthEmulator(auth, url, options) {\n    var authInternal = _castAuth(auth);\n    _assert(/^https?:\\/\\//.test(url), authInternal, \"invalid-emulator-scheme\" /* AuthErrorCode.INVALID_EMULATOR_SCHEME */);\n    var disableWarnings = !!options?.disableWarnings;\n    var protocol = extractProtocol(url);\n    var _extractHostAndPort = extractHostAndPort(url),\n      host = _extractHostAndPort.host,\n      port = _extractHostAndPort.port;\n    var portStr = port === null ? '' : `:${port}`;\n    // Always replace path with \"/\" (even if input url had no path at all, or had a different one).\n    var emulator = {\n      url: `${protocol}//${host}${portStr}/`\n    };\n    var emulatorConfig = Object.freeze({\n      host,\n      port,\n      protocol: protocol.replace(':', ''),\n      options: Object.freeze({\n        disableWarnings\n      })\n    });\n    // There are a few scenarios to guard against if the Auth instance has already started:\n    if (!authInternal._canInitEmulator) {\n      // Applications may not initialize the emulator for the first time if Auth has already started\n      // to make network requests.\n      _assert(authInternal.config.emulator && authInternal.emulatorConfig, authInternal, \"emulator-config-failed\" /* AuthErrorCode.EMULATOR_CONFIG_FAILED */);\n      // Applications may not alter the configuration of the emulator (aka pass a different config)\n      // once Auth has started to make network requests.\n      _assert(util.deepEqual(emulator, authInternal.config.emulator) && util.deepEqual(emulatorConfig, authInternal.emulatorConfig), authInternal, \"emulator-config-failed\" /* AuthErrorCode.EMULATOR_CONFIG_FAILED */);\n      // It's valid, however, to invoke connectAuthEmulator() after Auth has started making\n      // connections, so long as the config matches the existing config. This results in a no-op.\n      return;\n    }\n    authInternal.config.emulator = emulator;\n    authInternal.emulatorConfig = emulatorConfig;\n    authInternal.settings.appVerificationDisabledForTesting = true;\n    // Workaround to get cookies in Firebase Studio\n    if (util.isCloudWorkstation(host)) {\n      void util.pingServer(`${protocol}//${host}${portStr}`);\n      util.updateEmulatorBanner('Auth', true);\n    } else if (!disableWarnings) {\n      emitEmulatorWarning();\n    }\n  }\n  function extractProtocol(url) {\n    var protocolEnd = url.indexOf(':');\n    return protocolEnd < 0 ? '' : url.substr(0, protocolEnd + 1);\n  }\n  function extractHostAndPort(url) {\n    var protocol = extractProtocol(url);\n    var authority = /(\\/\\/)?([^?#/]+)/.exec(url.substr(protocol.length)); // Between // and /, ? or #.\n    if (!authority) {\n      return {\n        host: '',\n        port: null\n      };\n    }\n    var hostAndPort = authority[2].split('@').pop() || ''; // Strip out \"username:password@\".\n    var bracketedIPv6 = /^(\\[[^\\]]+\\])(:|$)/.exec(hostAndPort);\n    if (bracketedIPv6) {\n      var host = bracketedIPv6[1];\n      return {\n        host,\n        port: parsePort(hostAndPort.substr(host.length + 1))\n      };\n    } else {\n      var _hostAndPort$split = hostAndPort.split(':'),\n        _hostAndPort$split2 = _slicedToArray(_hostAndPort$split, 2),\n        _host = _hostAndPort$split2[0],\n        port = _hostAndPort$split2[1];\n      return {\n        host: _host,\n        port: parsePort(port)\n      };\n    }\n  }\n  function parsePort(portStr) {\n    if (!portStr) {\n      return null;\n    }\n    var port = Number(portStr);\n    if (isNaN(port)) {\n      return null;\n    }\n    return port;\n  }\n  function emitEmulatorWarning() {\n    function attachBanner() {\n      var el = document.createElement('p');\n      var sty = el.style;\n      el.innerText = 'Running in emulator mode. Do not use with production credentials.';\n      sty.position = 'fixed';\n      sty.width = '100%';\n      sty.backgroundColor = '#ffffff';\n      sty.border = '.1em solid #000000';\n      sty.color = '#b50000';\n      sty.bottom = '0px';\n      sty.left = '0px';\n      sty.margin = '0px';\n      sty.zIndex = '10000';\n      sty.textAlign = 'center';\n      el.classList.add('firebase-emulator-warning');\n      document.body.appendChild(el);\n    }\n    if (typeof console !== 'undefined' && typeof console.info === 'function') {\n      console.info('WARNING: You are using the Auth Emulator,' + ' which is intended for local testing only.  Do not use with' + ' production credentials.');\n    }\n    if (typeof window !== 'undefined' && typeof document !== 'undefined') {\n      if (document.readyState === 'loading') {\n        window.addEventListener('DOMContentLoaded', attachBanner);\n      } else {\n        attachBanner();\n      }\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Interface that represents the credentials returned by an {@link AuthProvider}.\n   *\n   * @remarks\n   * Implementations specify the details about each auth provider's credential requirements.\n   *\n   * @public\n   */\n  var AuthCredential = /*#__PURE__*/function () {\n    /** @internal */\n    function AuthCredential(\n    /**\n     * The authentication provider ID for the credential.\n     *\n     * @remarks\n     * For example, 'facebook.com', or 'google.com'.\n     */\n    providerId,\n    /**\n     * The authentication sign in method for the credential.\n     *\n     * @remarks\n     * For example, {@link SignInMethod}.EMAIL_PASSWORD, or\n     * {@link SignInMethod}.EMAIL_LINK. This corresponds to the sign-in method\n     * identifier as returned in {@link fetchSignInMethodsForEmail}.\n     */\n    signInMethod) {\n      _classCallCheck(this, AuthCredential);\n      this.providerId = providerId;\n      this.signInMethod = signInMethod;\n    }\n    /**\n     * Returns a JSON-serializable representation of this object.\n     *\n     * @returns a JSON-serializable representation of this object.\n     */\n    return _createClass(AuthCredential, [{\n      key: \"toJSON\",\n      value: function toJSON() {\n        return debugFail('not implemented');\n      }\n      /** @internal */\n    }, {\n      key: \"_getIdTokenResponse\",\n      value: function _getIdTokenResponse(_auth) {\n        return debugFail('not implemented');\n      }\n      /** @internal */\n    }, {\n      key: \"_linkToIdToken\",\n      value: function _linkToIdToken(_auth, _idToken) {\n        return debugFail('not implemented');\n      }\n      /** @internal */\n    }, {\n      key: \"_getReauthenticationResolver\",\n      value: function _getReauthenticationResolver(_auth) {\n        return debugFail('not implemented');\n      }\n    }]);\n  }();\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function resetPassword(_x80, _x81) {\n    return _resetPassword.apply(this, arguments);\n  }\n  function _resetPassword() {\n    _resetPassword = _asyncToGenerator(function* (auth, request) {\n      return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:resetPassword\" /* Endpoint.RESET_PASSWORD */, _addTidIfNecessary(auth, request));\n    });\n    return _resetPassword.apply(this, arguments);\n  }\n  function updateEmailPassword(_x82, _x83) {\n    return _updateEmailPassword.apply(this, arguments);\n  } // Used for linking an email/password account to an existing idToken. Uses the same request/response\n  // format as updateEmailPassword.\n  function _updateEmailPassword() {\n    _updateEmailPassword = _asyncToGenerator(function* (auth, request) {\n      return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:update\" /* Endpoint.SET_ACCOUNT_INFO */, request);\n    });\n    return _updateEmailPassword.apply(this, arguments);\n  }\n  function linkEmailPassword(_x84, _x85) {\n    return _linkEmailPassword.apply(this, arguments);\n  }\n  function _linkEmailPassword() {\n    _linkEmailPassword = _asyncToGenerator(function* (auth, request) {\n      return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signUp\" /* Endpoint.SIGN_UP */, request);\n    });\n    return _linkEmailPassword.apply(this, arguments);\n  }\n  function applyActionCode$1(_x86, _x87) {\n    return _applyActionCode$.apply(this, arguments);\n  }\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _applyActionCode$() {\n    _applyActionCode$ = _asyncToGenerator(function* (auth, request) {\n      return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:update\" /* Endpoint.SET_ACCOUNT_INFO */, _addTidIfNecessary(auth, request));\n    });\n    return _applyActionCode$.apply(this, arguments);\n  }\n  function signInWithPassword(_x88, _x89) {\n    return _signInWithPassword.apply(this, arguments);\n  }\n  function _signInWithPassword() {\n    _signInWithPassword = _asyncToGenerator(function* (auth, request) {\n      return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithPassword\" /* Endpoint.SIGN_IN_WITH_PASSWORD */, _addTidIfNecessary(auth, request));\n    });\n    return _signInWithPassword.apply(this, arguments);\n  }\n  function sendOobCode(_x90, _x91) {\n    return _sendOobCode.apply(this, arguments);\n  }\n  function _sendOobCode() {\n    _sendOobCode = _asyncToGenerator(function* (auth, request) {\n      return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:sendOobCode\" /* Endpoint.SEND_OOB_CODE */, _addTidIfNecessary(auth, request));\n    });\n    return _sendOobCode.apply(this, arguments);\n  }\n  function sendEmailVerification$1(_x92, _x93) {\n    return _sendEmailVerification$.apply(this, arguments);\n  }\n  function _sendEmailVerification$() {\n    _sendEmailVerification$ = _asyncToGenerator(function* (auth, request) {\n      return sendOobCode(auth, request);\n    });\n    return _sendEmailVerification$.apply(this, arguments);\n  }\n  function sendPasswordResetEmail$1(_x94, _x95) {\n    return _sendPasswordResetEmail$.apply(this, arguments);\n  }\n  function _sendPasswordResetEmail$() {\n    _sendPasswordResetEmail$ = _asyncToGenerator(function* (auth, request) {\n      return sendOobCode(auth, request);\n    });\n    return _sendPasswordResetEmail$.apply(this, arguments);\n  }\n  function sendSignInLinkToEmail$1(_x96, _x97) {\n    return _sendSignInLinkToEmail$.apply(this, arguments);\n  }\n  function _sendSignInLinkToEmail$() {\n    _sendSignInLinkToEmail$ = _asyncToGenerator(function* (auth, request) {\n      return sendOobCode(auth, request);\n    });\n    return _sendSignInLinkToEmail$.apply(this, arguments);\n  }\n  function verifyAndChangeEmail(_x98, _x99) {\n    return _verifyAndChangeEmail.apply(this, arguments);\n  }\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _verifyAndChangeEmail() {\n    _verifyAndChangeEmail = _asyncToGenerator(function* (auth, request) {\n      return sendOobCode(auth, request);\n    });\n    return _verifyAndChangeEmail.apply(this, arguments);\n  }\n  function signInWithEmailLink$1(_x100, _x101) {\n    return _signInWithEmailLink$.apply(this, arguments);\n  }\n  function _signInWithEmailLink$() {\n    _signInWithEmailLink$ = _asyncToGenerator(function* (auth, request) {\n      return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithEmailLink\" /* Endpoint.SIGN_IN_WITH_EMAIL_LINK */, _addTidIfNecessary(auth, request));\n    });\n    return _signInWithEmailLink$.apply(this, arguments);\n  }\n  function signInWithEmailLinkForLinking(_x102, _x103) {\n    return _signInWithEmailLinkForLinking.apply(this, arguments);\n  }\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Interface that represents the credentials returned by {@link EmailAuthProvider} for\n   * {@link ProviderId}.PASSWORD\n   *\n   * @remarks\n   * Covers both {@link SignInMethod}.EMAIL_PASSWORD and\n   * {@link SignInMethod}.EMAIL_LINK.\n   *\n   * @public\n   */\n  function _signInWithEmailLinkForLinking() {\n    _signInWithEmailLinkForLinking = _asyncToGenerator(function* (auth, request) {\n      return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithEmailLink\" /* Endpoint.SIGN_IN_WITH_EMAIL_LINK */, _addTidIfNecessary(auth, request));\n    });\n    return _signInWithEmailLinkForLinking.apply(this, arguments);\n  }\n  var EmailAuthCredential = /*#__PURE__*/function (_AuthCredential) {\n    /** @internal */\n    function EmailAuthCredential(/** @internal */\n    _email, /** @internal */\n    _password, signInMethod) {\n      var _this6;\n      var _tenantId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      _classCallCheck(this, EmailAuthCredential);\n      _this6 = _callSuper(this, EmailAuthCredential, [\"password\" /* ProviderId.PASSWORD */, signInMethod]);\n      _this6._email = _email;\n      _this6._password = _password;\n      _this6._tenantId = _tenantId;\n      return _this6;\n    }\n    /** @internal */\n    _inherits(EmailAuthCredential, _AuthCredential);\n    return _createClass(EmailAuthCredential, [{\n      key: \"toJSON\",\n      value: /** {@inheritdoc AuthCredential.toJSON} */\n      function toJSON() {\n        return {\n          email: this._email,\n          password: this._password,\n          signInMethod: this.signInMethod,\n          tenantId: this._tenantId\n        };\n      }\n      /**\n       * Static method to deserialize a JSON representation of an object into an {@link  AuthCredential}.\n       *\n       * @param json - Either `object` or the stringified representation of the object. When string is\n       * provided, `JSON.parse` would be called first.\n       *\n       * @returns If the JSON input does not represent an {@link AuthCredential}, null is returned.\n       */\n    }, {\n      key: \"_getIdTokenResponse\",\n      value: (/** @internal */function () {\n        var _getIdTokenResponse2 = _asyncToGenerator(function* (auth) {\n          switch (this.signInMethod) {\n            case \"password\" /* SignInMethod.EMAIL_PASSWORD */:\n              var request = {\n                returnSecureToken: true,\n                email: this._email,\n                password: this._password,\n                clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n              };\n              return handleRecaptchaFlow(auth, request, \"signInWithPassword\" /* RecaptchaActionName.SIGN_IN_WITH_PASSWORD */, signInWithPassword, \"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */);\n            case \"emailLink\" /* SignInMethod.EMAIL_LINK */:\n              return signInWithEmailLink$1(auth, {\n                email: this._email,\n                oobCode: this._password\n              });\n            default:\n              _fail(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n          }\n        });\n        function _getIdTokenResponse(_x104) {\n          return _getIdTokenResponse2.apply(this, arguments);\n        }\n        return _getIdTokenResponse;\n      }() /** @internal */)\n    }, {\n      key: \"_linkToIdToken\",\n      value: (function () {\n        var _linkToIdToken2 = _asyncToGenerator(function* (auth, idToken) {\n          switch (this.signInMethod) {\n            case \"password\" /* SignInMethod.EMAIL_PASSWORD */:\n              var request = {\n                idToken,\n                returnSecureToken: true,\n                email: this._email,\n                password: this._password,\n                clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n              };\n              return handleRecaptchaFlow(auth, request, \"signUpPassword\" /* RecaptchaActionName.SIGN_UP_PASSWORD */, linkEmailPassword, \"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */);\n            case \"emailLink\" /* SignInMethod.EMAIL_LINK */:\n              return signInWithEmailLinkForLinking(auth, {\n                idToken,\n                email: this._email,\n                oobCode: this._password\n              });\n            default:\n              _fail(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n          }\n        });\n        function _linkToIdToken(_x105, _x106) {\n          return _linkToIdToken2.apply(this, arguments);\n        }\n        return _linkToIdToken;\n      }() /** @internal */)\n    }, {\n      key: \"_getReauthenticationResolver\",\n      value: function _getReauthenticationResolver(auth) {\n        return this._getIdTokenResponse(auth);\n      }\n    }], [{\n      key: \"_fromEmailAndPassword\",\n      value: function _fromEmailAndPassword(email, password) {\n        return new EmailAuthCredential(email, password, \"password\" /* SignInMethod.EMAIL_PASSWORD */);\n      }\n      /** @internal */\n    }, {\n      key: \"_fromEmailAndCode\",\n      value: function _fromEmailAndCode(email, oobCode) {\n        var tenantId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n        return new EmailAuthCredential(email, oobCode, \"emailLink\" /* SignInMethod.EMAIL_LINK */, tenantId);\n      }\n    }, {\n      key: \"fromJSON\",\n      value: function fromJSON(json) {\n        var obj = typeof json === 'string' ? JSON.parse(json) : json;\n        if (obj?.email && obj?.password) {\n          if (obj.signInMethod === \"password\" /* SignInMethod.EMAIL_PASSWORD */) {\n            return this._fromEmailAndPassword(obj.email, obj.password);\n          } else if (obj.signInMethod === \"emailLink\" /* SignInMethod.EMAIL_LINK */) {\n            return this._fromEmailAndCode(obj.email, obj.password, obj.tenantId);\n          }\n        }\n        return null;\n      }\n    }]);\n  }(AuthCredential);\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function signInWithIdp(_x107, _x108) {\n    return _signInWithIdp.apply(this, arguments);\n  }\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _signInWithIdp() {\n    _signInWithIdp = _asyncToGenerator(function* (auth, request) {\n      return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithIdp\" /* Endpoint.SIGN_IN_WITH_IDP */, _addTidIfNecessary(auth, request));\n    });\n    return _signInWithIdp.apply(this, arguments);\n  }\n  var IDP_REQUEST_URI$1 = 'http://localhost';\n  /**\n   * Represents the OAuth credentials returned by an {@link OAuthProvider}.\n   *\n   * @remarks\n   * Implementations specify the details about each auth provider's credential requirements.\n   *\n   * @public\n   */\n  var OAuthCredential = /*#__PURE__*/function (_AuthCredential2) {\n    function OAuthCredential() {\n      var _this7;\n      _classCallCheck(this, OAuthCredential);\n      _this7 = _callSuper(this, OAuthCredential, arguments);\n      _this7.pendingToken = null;\n      return _this7;\n    }\n    /** @internal */\n    _inherits(OAuthCredential, _AuthCredential2);\n    return _createClass(OAuthCredential, [{\n      key: \"toJSON\",\n      value: /** {@inheritdoc AuthCredential.toJSON}  */\n      function toJSON() {\n        return {\n          idToken: this.idToken,\n          accessToken: this.accessToken,\n          secret: this.secret,\n          nonce: this.nonce,\n          pendingToken: this.pendingToken,\n          providerId: this.providerId,\n          signInMethod: this.signInMethod\n        };\n      }\n      /**\n       * Static method to deserialize a JSON representation of an object into an\n       * {@link  AuthCredential}.\n       *\n       * @param json - Input can be either Object or the stringified representation of the object.\n       * When string is provided, JSON.parse would be called first.\n       *\n       * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.\n       */\n    }, {\n      key: \"_getIdTokenResponse\",\n      value: /** @internal */\n      function _getIdTokenResponse(auth) {\n        var request = this.buildRequest();\n        return signInWithIdp(auth, request);\n      }\n      /** @internal */\n    }, {\n      key: \"_linkToIdToken\",\n      value: function _linkToIdToken(auth, idToken) {\n        var request = this.buildRequest();\n        request.idToken = idToken;\n        return signInWithIdp(auth, request);\n      }\n      /** @internal */\n    }, {\n      key: \"_getReauthenticationResolver\",\n      value: function _getReauthenticationResolver(auth) {\n        var request = this.buildRequest();\n        request.autoCreate = false;\n        return signInWithIdp(auth, request);\n      }\n    }, {\n      key: \"buildRequest\",\n      value: function buildRequest() {\n        var request = {\n          requestUri: IDP_REQUEST_URI$1,\n          returnSecureToken: true\n        };\n        if (this.pendingToken) {\n          request.pendingToken = this.pendingToken;\n        } else {\n          var postBody = {};\n          if (this.idToken) {\n            postBody['id_token'] = this.idToken;\n          }\n          if (this.accessToken) {\n            postBody['access_token'] = this.accessToken;\n          }\n          if (this.secret) {\n            postBody['oauth_token_secret'] = this.secret;\n          }\n          postBody['providerId'] = this.providerId;\n          if (this.nonce && !this.pendingToken) {\n            postBody['nonce'] = this.nonce;\n          }\n          request.postBody = util.querystring(postBody);\n        }\n        return request;\n      }\n    }], [{\n      key: \"_fromParams\",\n      value: function _fromParams(params) {\n        var cred = new OAuthCredential(params.providerId, params.signInMethod);\n        if (params.idToken || params.accessToken) {\n          // OAuth 2 and either ID token or access token.\n          if (params.idToken) {\n            cred.idToken = params.idToken;\n          }\n          if (params.accessToken) {\n            cred.accessToken = params.accessToken;\n          }\n          // Add nonce if available and no pendingToken is present.\n          if (params.nonce && !params.pendingToken) {\n            cred.nonce = params.nonce;\n          }\n          if (params.pendingToken) {\n            cred.pendingToken = params.pendingToken;\n          }\n        } else if (params.oauthToken && params.oauthTokenSecret) {\n          // OAuth 1 and OAuth token with token secret\n          cred.accessToken = params.oauthToken;\n          cred.secret = params.oauthTokenSecret;\n        } else {\n          _fail(\"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n        }\n        return cred;\n      }\n    }, {\n      key: \"fromJSON\",\n      value: function fromJSON(json) {\n        var obj = typeof json === 'string' ? JSON.parse(json) : json;\n        var providerId = obj.providerId,\n          signInMethod = obj.signInMethod,\n          rest = _objectWithoutProperties(obj, _excluded3);\n        if (!providerId || !signInMethod) {\n          return null;\n        }\n        var cred = new OAuthCredential(providerId, signInMethod);\n        cred.idToken = rest.idToken || undefined;\n        cred.accessToken = rest.accessToken || undefined;\n        cred.secret = rest.secret;\n        cred.nonce = rest.nonce;\n        cred.pendingToken = rest.pendingToken || null;\n        return cred;\n      }\n    }]);\n  }(AuthCredential);\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function sendPhoneVerificationCode(_x109, _x110) {\n    return _sendPhoneVerificationCode.apply(this, arguments);\n  }\n  function _sendPhoneVerificationCode() {\n    _sendPhoneVerificationCode = _asyncToGenerator(function* (auth, request) {\n      return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:sendVerificationCode\" /* Endpoint.SEND_VERIFICATION_CODE */, _addTidIfNecessary(auth, request));\n    });\n    return _sendPhoneVerificationCode.apply(this, arguments);\n  }\n  function signInWithPhoneNumber$1(_x111, _x112) {\n    return _signInWithPhoneNumber$.apply(this, arguments);\n  }\n  function _signInWithPhoneNumber$() {\n    _signInWithPhoneNumber$ = _asyncToGenerator(function* (auth, request) {\n      return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithPhoneNumber\" /* Endpoint.SIGN_IN_WITH_PHONE_NUMBER */, _addTidIfNecessary(auth, request));\n    });\n    return _signInWithPhoneNumber$.apply(this, arguments);\n  }\n  function linkWithPhoneNumber$1(_x113, _x114) {\n    return _linkWithPhoneNumber$.apply(this, arguments);\n  }\n  function _linkWithPhoneNumber$() {\n    _linkWithPhoneNumber$ = _asyncToGenerator(function* (auth, request) {\n      var response = yield _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithPhoneNumber\" /* Endpoint.SIGN_IN_WITH_PHONE_NUMBER */, _addTidIfNecessary(auth, request));\n      if (response.temporaryProof) {\n        throw _makeTaggedError(auth, \"account-exists-with-different-credential\" /* AuthErrorCode.NEED_CONFIRMATION */, response);\n      }\n      return response;\n    });\n    return _linkWithPhoneNumber$.apply(this, arguments);\n  }\n  var VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_ = {\n    [\"USER_NOT_FOUND\" /* ServerError.USER_NOT_FOUND */]: \"user-not-found\" /* AuthErrorCode.USER_DELETED */\n  };\n  function verifyPhoneNumberForExisting(_x115, _x116) {\n    return _verifyPhoneNumberForExisting.apply(this, arguments);\n  }\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Represents the credentials returned by {@link PhoneAuthProvider}.\n   *\n   * @public\n   */\n  function _verifyPhoneNumberForExisting() {\n    _verifyPhoneNumberForExisting = _asyncToGenerator(function* (auth, request) {\n      var apiRequest = {\n        ...request,\n        operation: 'REAUTH'\n      };\n      return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithPhoneNumber\" /* Endpoint.SIGN_IN_WITH_PHONE_NUMBER */, _addTidIfNecessary(auth, apiRequest), VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_);\n    });\n    return _verifyPhoneNumberForExisting.apply(this, arguments);\n  }\n  var PhoneAuthCredential = /*#__PURE__*/function (_AuthCredential3) {\n    function PhoneAuthCredential(params) {\n      var _this8;\n      _classCallCheck(this, PhoneAuthCredential);\n      _this8 = _callSuper(this, PhoneAuthCredential, [\"phone\" /* ProviderId.PHONE */, \"phone\" /* SignInMethod.PHONE */]);\n      _this8.params = params;\n      return _this8;\n    }\n    /** @internal */\n    _inherits(PhoneAuthCredential, _AuthCredential3);\n    return _createClass(PhoneAuthCredential, [{\n      key: \"_getIdTokenResponse\",\n      value: /** @internal */\n      function _getIdTokenResponse(auth) {\n        return signInWithPhoneNumber$1(auth, this._makeVerificationRequest());\n      }\n      /** @internal */\n    }, {\n      key: \"_linkToIdToken\",\n      value: function _linkToIdToken(auth, idToken) {\n        return linkWithPhoneNumber$1(auth, {\n          idToken,\n          ...this._makeVerificationRequest()\n        });\n      }\n      /** @internal */\n    }, {\n      key: \"_getReauthenticationResolver\",\n      value: function _getReauthenticationResolver(auth) {\n        return verifyPhoneNumberForExisting(auth, this._makeVerificationRequest());\n      }\n      /** @internal */\n    }, {\n      key: \"_makeVerificationRequest\",\n      value: function _makeVerificationRequest() {\n        var _this$params2 = this.params,\n          temporaryProof = _this$params2.temporaryProof,\n          phoneNumber = _this$params2.phoneNumber,\n          verificationId = _this$params2.verificationId,\n          verificationCode = _this$params2.verificationCode;\n        if (temporaryProof && phoneNumber) {\n          return {\n            temporaryProof,\n            phoneNumber\n          };\n        }\n        return {\n          sessionInfo: verificationId,\n          code: verificationCode\n        };\n      }\n      /** {@inheritdoc AuthCredential.toJSON} */\n    }, {\n      key: \"toJSON\",\n      value: function toJSON() {\n        var obj = {\n          providerId: this.providerId\n        };\n        if (this.params.phoneNumber) {\n          obj.phoneNumber = this.params.phoneNumber;\n        }\n        if (this.params.temporaryProof) {\n          obj.temporaryProof = this.params.temporaryProof;\n        }\n        if (this.params.verificationCode) {\n          obj.verificationCode = this.params.verificationCode;\n        }\n        if (this.params.verificationId) {\n          obj.verificationId = this.params.verificationId;\n        }\n        return obj;\n      }\n      /** Generates a phone credential based on a plain object or a JSON string. */\n    }], [{\n      key: \"_fromVerification\",\n      value: function _fromVerification(verificationId, verificationCode) {\n        return new PhoneAuthCredential({\n          verificationId,\n          verificationCode\n        });\n      }\n      /** @internal */\n    }, {\n      key: \"_fromTokenResponse\",\n      value: function _fromTokenResponse(phoneNumber, temporaryProof) {\n        return new PhoneAuthCredential({\n          phoneNumber,\n          temporaryProof\n        });\n      }\n    }, {\n      key: \"fromJSON\",\n      value: function fromJSON(json) {\n        if (typeof json === 'string') {\n          json = JSON.parse(json);\n        }\n        var _json = json,\n          verificationId = _json.verificationId,\n          verificationCode = _json.verificationCode,\n          phoneNumber = _json.phoneNumber,\n          temporaryProof = _json.temporaryProof;\n        if (!verificationCode && !verificationId && !phoneNumber && !temporaryProof) {\n          return null;\n        }\n        return new PhoneAuthCredential({\n          verificationId,\n          verificationCode,\n          phoneNumber,\n          temporaryProof\n        });\n      }\n    }]);\n  }(AuthCredential);\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Maps the mode string in action code URL to Action Code Info operation.\n   *\n   * @param mode\n   */\n  function parseMode(mode) {\n    switch (mode) {\n      case 'recoverEmail':\n        return \"RECOVER_EMAIL\" /* ActionCodeOperation.RECOVER_EMAIL */;\n      case 'resetPassword':\n        return \"PASSWORD_RESET\" /* ActionCodeOperation.PASSWORD_RESET */;\n      case 'signIn':\n        return \"EMAIL_SIGNIN\" /* ActionCodeOperation.EMAIL_SIGNIN */;\n      case 'verifyEmail':\n        return \"VERIFY_EMAIL\" /* ActionCodeOperation.VERIFY_EMAIL */;\n      case 'verifyAndChangeEmail':\n        return \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */;\n      case 'revertSecondFactorAddition':\n        return \"REVERT_SECOND_FACTOR_ADDITION\" /* ActionCodeOperation.REVERT_SECOND_FACTOR_ADDITION */;\n      default:\n        return null;\n    }\n  }\n  /**\n   * Helper to parse FDL links\n   *\n   * @param url\n   */\n  function parseDeepLink(url) {\n    var link = util.querystringDecode(util.extractQuerystring(url))['link'];\n    // Double link case (automatic redirect).\n    var doubleDeepLink = link ? util.querystringDecode(util.extractQuerystring(link))['deep_link_id'] : null;\n    // iOS custom scheme links.\n    var iOSDeepLink = util.querystringDecode(util.extractQuerystring(url))['deep_link_id'];\n    var iOSDoubleDeepLink = iOSDeepLink ? util.querystringDecode(util.extractQuerystring(iOSDeepLink))['link'] : null;\n    return iOSDoubleDeepLink || iOSDeepLink || doubleDeepLink || link || url;\n  }\n  /**\n   * A utility class to parse email action URLs such as password reset, email verification,\n   * email link sign in, etc.\n   *\n   * @public\n   */\n  var ActionCodeURL = /*#__PURE__*/function () {\n    /**\n     * @param actionLink - The link from which to extract the URL.\n     * @returns The {@link ActionCodeURL} object, or null if the link is invalid.\n     *\n     * @internal\n     */\n    function ActionCodeURL(actionLink) {\n      _classCallCheck(this, ActionCodeURL);\n      var searchParams = util.querystringDecode(util.extractQuerystring(actionLink));\n      var apiKey = searchParams[\"apiKey\" /* QueryField.API_KEY */] ?? null;\n      var code = searchParams[\"oobCode\" /* QueryField.CODE */] ?? null;\n      var operation = parseMode(searchParams[\"mode\" /* QueryField.MODE */] ?? null);\n      // Validate API key, code and mode.\n      _assert(apiKey && code && operation, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      this.apiKey = apiKey;\n      this.operation = operation;\n      this.code = code;\n      this.continueUrl = searchParams[\"continueUrl\" /* QueryField.CONTINUE_URL */] ?? null;\n      this.languageCode = searchParams[\"lang\" /* QueryField.LANGUAGE_CODE */] ?? null;\n      this.tenantId = searchParams[\"tenantId\" /* QueryField.TENANT_ID */] ?? null;\n    }\n    /**\n     * Parses the email action link string and returns an {@link ActionCodeURL} if the link is valid,\n     * otherwise returns null.\n     *\n     * @param link  - The email action link string.\n     * @returns The {@link ActionCodeURL} object, or null if the link is invalid.\n     *\n     * @public\n     */\n    return _createClass(ActionCodeURL, null, [{\n      key: \"parseLink\",\n      value: function parseLink(link) {\n        var actionLink = parseDeepLink(link);\n        try {\n          return new ActionCodeURL(actionLink);\n        } catch {\n          return null;\n        }\n      }\n    }]);\n  }();\n  /**\n   * Parses the email action link string and returns an {@link ActionCodeURL} if\n   * the link is valid, otherwise returns null.\n   *\n   * @public\n   */\n  function parseActionCodeURL(link) {\n    return ActionCodeURL.parseLink(link);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Provider for generating {@link EmailAuthCredential}.\n   *\n   * @public\n   */\n  var EmailAuthProvider = /*#__PURE__*/function () {\n    function EmailAuthProvider() {\n      _classCallCheck(this, EmailAuthProvider);\n      /**\n       * Always set to {@link ProviderId}.PASSWORD, even for email link.\n       */\n      this.providerId = EmailAuthProvider.PROVIDER_ID;\n    }\n    /**\n     * Initialize an {@link AuthCredential} using an email and password.\n     *\n     * @example\n     * ```javascript\n     * const authCredential = EmailAuthProvider.credential(email, password);\n     * const userCredential = await signInWithCredential(auth, authCredential);\n     * ```\n     *\n     * @example\n     * ```javascript\n     * const userCredential = await signInWithEmailAndPassword(auth, email, password);\n     * ```\n     *\n     * @param email - Email address.\n     * @param password - User account password.\n     * @returns The auth provider credential.\n     */\n    return _createClass(EmailAuthProvider, null, [{\n      key: \"credential\",\n      value: function credential(email, password) {\n        return EmailAuthCredential._fromEmailAndPassword(email, password);\n      }\n      /**\n       * Initialize an {@link AuthCredential} using an email and an email link after a sign in with\n       * email link operation.\n       *\n       * @example\n       * ```javascript\n       * const authCredential = EmailAuthProvider.credentialWithLink(auth, email, emailLink);\n       * const userCredential = await signInWithCredential(auth, authCredential);\n       * ```\n       *\n       * @example\n       * ```javascript\n       * await sendSignInLinkToEmail(auth, email);\n       * // Obtain emailLink from user.\n       * const userCredential = await signInWithEmailLink(auth, email, emailLink);\n       * ```\n       *\n       * @param auth - The {@link Auth} instance used to verify the link.\n       * @param email - Email address.\n       * @param emailLink - Sign-in email link.\n       * @returns - The auth provider credential.\n       */\n    }, {\n      key: \"credentialWithLink\",\n      value: function credentialWithLink(email, emailLink) {\n        var actionCodeUrl = ActionCodeURL.parseLink(emailLink);\n        _assert(actionCodeUrl, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n        return EmailAuthCredential._fromEmailAndCode(email, actionCodeUrl.code, actionCodeUrl.tenantId);\n      }\n    }]);\n  }();\n  /**\n   * Always set to {@link ProviderId}.PASSWORD, even for email link.\n   */\n  EmailAuthProvider.PROVIDER_ID = \"password\" /* ProviderId.PASSWORD */;\n  /**\n   * Always set to {@link SignInMethod}.EMAIL_PASSWORD.\n   */\n  EmailAuthProvider.EMAIL_PASSWORD_SIGN_IN_METHOD = \"password\" /* SignInMethod.EMAIL_PASSWORD */;\n  /**\n   * Always set to {@link SignInMethod}.EMAIL_LINK.\n   */\n  EmailAuthProvider.EMAIL_LINK_SIGN_IN_METHOD = \"emailLink\" /* SignInMethod.EMAIL_LINK */;\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * The base class for all Federated providers (OAuth (including OIDC), SAML).\n   *\n   * This class is not meant to be instantiated directly.\n   *\n   * @public\n   */\n  var FederatedAuthProvider = /*#__PURE__*/function () {\n    /**\n     * Constructor for generic OAuth providers.\n     *\n     * @param providerId - Provider for which credentials should be generated.\n     */\n    function FederatedAuthProvider(providerId) {\n      _classCallCheck(this, FederatedAuthProvider);\n      this.providerId = providerId;\n      /** @internal */\n      this.defaultLanguageCode = null;\n      /** @internal */\n      this.customParameters = {};\n    }\n    /**\n     * Set the language gode.\n     *\n     * @param languageCode - language code\n     */\n    return _createClass(FederatedAuthProvider, [{\n      key: \"setDefaultLanguage\",\n      value: function setDefaultLanguage(languageCode) {\n        this.defaultLanguageCode = languageCode;\n      }\n      /**\n       * Sets the OAuth custom parameters to pass in an OAuth request for popup and redirect sign-in\n       * operations.\n       *\n       * @remarks\n       * For a detailed list, check the reserved required OAuth 2.0 parameters such as `client_id`,\n       * `redirect_uri`, `scope`, `response_type`, and `state` are not allowed and will be ignored.\n       *\n       * @param customOAuthParameters - The custom OAuth parameters to pass in the OAuth request.\n       */\n    }, {\n      key: \"setCustomParameters\",\n      value: function setCustomParameters(customOAuthParameters) {\n        this.customParameters = customOAuthParameters;\n        return this;\n      }\n      /**\n       * Retrieve the current list of {@link CustomParameters}.\n       */\n    }, {\n      key: \"getCustomParameters\",\n      value: function getCustomParameters() {\n        return this.customParameters;\n      }\n    }]);\n  }();\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Common code to all OAuth providers. This is separate from the\n   * {@link OAuthProvider} so that child providers (like\n   * {@link GoogleAuthProvider}) don't inherit the `credential` instance method.\n   * Instead, they rely on a static `credential` method.\n   */\n  var BaseOAuthProvider = /*#__PURE__*/function (_FederatedAuthProvide) {\n    function BaseOAuthProvider() {\n      var _this9;\n      _classCallCheck(this, BaseOAuthProvider);\n      _this9 = _callSuper(this, BaseOAuthProvider, arguments);\n      /** @internal */\n      _this9.scopes = [];\n      return _this9;\n    }\n    /**\n     * Add an OAuth scope to the credential.\n     *\n     * @param scope - Provider OAuth scope to add.\n     */\n    _inherits(BaseOAuthProvider, _FederatedAuthProvide);\n    return _createClass(BaseOAuthProvider, [{\n      key: \"addScope\",\n      value: function addScope(scope) {\n        // If not already added, add scope to list.\n        if (!this.scopes.includes(scope)) {\n          this.scopes.push(scope);\n        }\n        return this;\n      }\n      /**\n       * Retrieve the current list of OAuth scopes.\n       */\n    }, {\n      key: \"getScopes\",\n      value: function getScopes() {\n        return [...this.scopes];\n      }\n    }]);\n  }(FederatedAuthProvider);\n  /**\n   * Provider for generating generic {@link OAuthCredential}.\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a redirect.\n   * const provider = new OAuthProvider('google.com');\n   * // Start a sign in process for an unauthenticated user.\n   * provider.addScope('profile');\n   * provider.addScope('email');\n   * await signInWithRedirect(auth, provider);\n   * // This will trigger a full page redirect away from your app\n   *\n   * // After returning from the redirect when your app initializes you can obtain the result\n   * const result = await getRedirectResult(auth);\n   * if (result) {\n   *   // This is the signed-in user\n   *   const user = result.user;\n   *   // This gives you a OAuth Access Token for the provider.\n   *   const credential = provider.credentialFromResult(auth, result);\n   *   const token = credential.accessToken;\n   * }\n   * ```\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a popup.\n   * const provider = new OAuthProvider('google.com');\n   * provider.addScope('profile');\n   * provider.addScope('email');\n   * const result = await signInWithPopup(auth, provider);\n   *\n   * // The signed-in user info.\n   * const user = result.user;\n   * // This gives you a OAuth Access Token for the provider.\n   * const credential = provider.credentialFromResult(auth, result);\n   * const token = credential.accessToken;\n   * ```\n   * @public\n   */\n  var OAuthProvider = /*#__PURE__*/function (_BaseOAuthProvider) {\n    function OAuthProvider() {\n      _classCallCheck(this, OAuthProvider);\n      return _callSuper(this, OAuthProvider, arguments);\n    }\n    _inherits(OAuthProvider, _BaseOAuthProvider);\n    return _createClass(OAuthProvider, [{\n      key: \"credential\",\n      value:\n      /**\n       * Creates a {@link OAuthCredential} from a generic OAuth provider's access token or ID token.\n       *\n       * @remarks\n       * The raw nonce is required when an ID token with a nonce field is provided. The SHA-256 hash of\n       * the raw nonce must match the nonce field in the ID token.\n       *\n       * @example\n       * ```javascript\n       * // `googleUser` from the onsuccess Google Sign In callback.\n       * // Initialize a generate OAuth provider with a `google.com` providerId.\n       * const provider = new OAuthProvider('google.com');\n       * const credential = provider.credential({\n       *   idToken: googleUser.getAuthResponse().id_token,\n       * });\n       * const result = await signInWithCredential(credential);\n       * ```\n       *\n       * @param params - Either the options object containing the ID token, access token and raw nonce\n       * or the ID token string.\n       */\n      function credential(params) {\n        return this._credential({\n          ...params,\n          nonce: params.rawNonce\n        });\n      }\n      /** An internal credential method that accepts more permissive options */\n    }, {\n      key: \"_credential\",\n      value: function _credential(params) {\n        _assert(params.idToken || params.accessToken, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n        // For OAuthCredential, sign in method is same as providerId.\n        return OAuthCredential._fromParams({\n          ...params,\n          providerId: this.providerId,\n          signInMethod: this.providerId\n        });\n      }\n      /**\n       * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n       *\n       * @param userCredential - The user credential.\n       */\n    }], [{\n      key: \"credentialFromJSON\",\n      value:\n      /**\n       * Creates an {@link OAuthCredential} from a JSON string or a plain object.\n       * @param json - A plain object or a JSON string\n       */\n      function credentialFromJSON(json) {\n        var obj = typeof json === 'string' ? JSON.parse(json) : json;\n        _assert('providerId' in obj && 'signInMethod' in obj, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n        return OAuthCredential._fromParams(obj);\n      }\n    }, {\n      key: \"credentialFromResult\",\n      value: function credentialFromResult(userCredential) {\n        return OAuthProvider.oauthCredentialFromTaggedObject(userCredential);\n      }\n      /**\n       * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n       * thrown during a sign-in, link, or reauthenticate operation.\n       *\n       * @param userCredential - The user credential.\n       */\n    }, {\n      key: \"credentialFromError\",\n      value: function credentialFromError(error) {\n        return OAuthProvider.oauthCredentialFromTaggedObject(error.customData || {});\n      }\n    }, {\n      key: \"oauthCredentialFromTaggedObject\",\n      value: function oauthCredentialFromTaggedObject(_ref11) {\n        var tokenResponse = _ref11._tokenResponse;\n        if (!tokenResponse) {\n          return null;\n        }\n        var oauthIdToken = tokenResponse.oauthIdToken,\n          oauthAccessToken = tokenResponse.oauthAccessToken,\n          oauthTokenSecret = tokenResponse.oauthTokenSecret,\n          pendingToken = tokenResponse.pendingToken,\n          nonce = tokenResponse.nonce,\n          providerId = tokenResponse.providerId;\n        if (!oauthAccessToken && !oauthTokenSecret && !oauthIdToken && !pendingToken) {\n          return null;\n        }\n        if (!providerId) {\n          return null;\n        }\n        try {\n          return new OAuthProvider(providerId)._credential({\n            idToken: oauthIdToken,\n            accessToken: oauthAccessToken,\n            nonce,\n            pendingToken\n          });\n        } catch (e) {\n          return null;\n        }\n      }\n    }]);\n  }(BaseOAuthProvider);\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.FACEBOOK.\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a redirect.\n   * const provider = new FacebookAuthProvider();\n   * // Start a sign in process for an unauthenticated user.\n   * provider.addScope('user_birthday');\n   * await signInWithRedirect(auth, provider);\n   * // This will trigger a full page redirect away from your app\n   *\n   * // After returning from the redirect when your app initializes you can obtain the result\n   * const result = await getRedirectResult(auth);\n   * if (result) {\n   *   // This is the signed-in user\n   *   const user = result.user;\n   *   // This gives you a Facebook Access Token.\n   *   const credential = FacebookAuthProvider.credentialFromResult(result);\n   *   const token = credential.accessToken;\n   * }\n   * ```\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a popup.\n   * const provider = new FacebookAuthProvider();\n   * provider.addScope('user_birthday');\n   * const result = await signInWithPopup(auth, provider);\n   *\n   * // The signed-in user info.\n   * const user = result.user;\n   * // This gives you a Facebook Access Token.\n   * const credential = FacebookAuthProvider.credentialFromResult(result);\n   * const token = credential.accessToken;\n   * ```\n   *\n   * @public\n   */\n  var FacebookAuthProvider = /*#__PURE__*/function (_BaseOAuthProvider2) {\n    function FacebookAuthProvider() {\n      _classCallCheck(this, FacebookAuthProvider);\n      return _callSuper(this, FacebookAuthProvider, [\"facebook.com\" /* ProviderId.FACEBOOK */]);\n    }\n    /**\n     * Creates a credential for Facebook.\n     *\n     * @example\n     * ```javascript\n     * // `event` from the Facebook auth.authResponseChange callback.\n     * const credential = FacebookAuthProvider.credential(event.authResponse.accessToken);\n     * const result = await signInWithCredential(credential);\n     * ```\n     *\n     * @param accessToken - Facebook access token.\n     */\n    _inherits(FacebookAuthProvider, _BaseOAuthProvider2);\n    return _createClass(FacebookAuthProvider, null, [{\n      key: \"credential\",\n      value: function credential(accessToken) {\n        return OAuthCredential._fromParams({\n          providerId: FacebookAuthProvider.PROVIDER_ID,\n          signInMethod: FacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD,\n          accessToken\n        });\n      }\n      /**\n       * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n       *\n       * @param userCredential - The user credential.\n       */\n    }, {\n      key: \"credentialFromResult\",\n      value: function credentialFromResult(userCredential) {\n        return FacebookAuthProvider.credentialFromTaggedObject(userCredential);\n      }\n      /**\n       * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n       * thrown during a sign-in, link, or reauthenticate operation.\n       *\n       * @param userCredential - The user credential.\n       */\n    }, {\n      key: \"credentialFromError\",\n      value: function credentialFromError(error) {\n        return FacebookAuthProvider.credentialFromTaggedObject(error.customData || {});\n      }\n    }, {\n      key: \"credentialFromTaggedObject\",\n      value: function credentialFromTaggedObject(_ref12) {\n        var tokenResponse = _ref12._tokenResponse;\n        if (!tokenResponse || !('oauthAccessToken' in tokenResponse)) {\n          return null;\n        }\n        if (!tokenResponse.oauthAccessToken) {\n          return null;\n        }\n        try {\n          return FacebookAuthProvider.credential(tokenResponse.oauthAccessToken);\n        } catch {\n          return null;\n        }\n      }\n    }]);\n  }(BaseOAuthProvider);\n  /** Always set to {@link SignInMethod}.FACEBOOK. */\n  FacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD = \"facebook.com\" /* SignInMethod.FACEBOOK */;\n  /** Always set to {@link ProviderId}.FACEBOOK. */\n  FacebookAuthProvider.PROVIDER_ID = \"facebook.com\" /* ProviderId.FACEBOOK */;\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.GOOGLE.\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a redirect.\n   * const provider = new GoogleAuthProvider();\n   * // Start a sign in process for an unauthenticated user.\n   * provider.addScope('profile');\n   * provider.addScope('email');\n   * await signInWithRedirect(auth, provider);\n   * // This will trigger a full page redirect away from your app\n   *\n   * // After returning from the redirect when your app initializes you can obtain the result\n   * const result = await getRedirectResult(auth);\n   * if (result) {\n   *   // This is the signed-in user\n   *   const user = result.user;\n   *   // This gives you a Google Access Token.\n   *   const credential = GoogleAuthProvider.credentialFromResult(result);\n   *   const token = credential.accessToken;\n   * }\n   * ```\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a popup.\n   * const provider = new GoogleAuthProvider();\n   * provider.addScope('profile');\n   * provider.addScope('email');\n   * const result = await signInWithPopup(auth, provider);\n   *\n   * // The signed-in user info.\n   * const user = result.user;\n   * // This gives you a Google Access Token.\n   * const credential = GoogleAuthProvider.credentialFromResult(result);\n   * const token = credential.accessToken;\n   * ```\n   *\n   * @public\n   */\n  var GoogleAuthProvider = /*#__PURE__*/function (_BaseOAuthProvider3) {\n    function GoogleAuthProvider() {\n      var _this0;\n      _classCallCheck(this, GoogleAuthProvider);\n      _this0 = _callSuper(this, GoogleAuthProvider, [\"google.com\" /* ProviderId.GOOGLE */]);\n      _this0.addScope('profile');\n      return _this0;\n    }\n    /**\n     * Creates a credential for Google. At least one of ID token and access token is required.\n     *\n     * @example\n     * ```javascript\n     * // \\`googleUser\\` from the onsuccess Google Sign In callback.\n     * const credential = GoogleAuthProvider.credential(googleUser.getAuthResponse().id_token);\n     * const result = await signInWithCredential(credential);\n     * ```\n     *\n     * @param idToken - Google ID token.\n     * @param accessToken - Google access token.\n     */\n    _inherits(GoogleAuthProvider, _BaseOAuthProvider3);\n    return _createClass(GoogleAuthProvider, null, [{\n      key: \"credential\",\n      value: function credential(idToken, accessToken) {\n        return OAuthCredential._fromParams({\n          providerId: GoogleAuthProvider.PROVIDER_ID,\n          signInMethod: GoogleAuthProvider.GOOGLE_SIGN_IN_METHOD,\n          idToken,\n          accessToken\n        });\n      }\n      /**\n       * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n       *\n       * @param userCredential - The user credential.\n       */\n    }, {\n      key: \"credentialFromResult\",\n      value: function credentialFromResult(userCredential) {\n        return GoogleAuthProvider.credentialFromTaggedObject(userCredential);\n      }\n      /**\n       * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n       * thrown during a sign-in, link, or reauthenticate operation.\n       *\n       * @param userCredential - The user credential.\n       */\n    }, {\n      key: \"credentialFromError\",\n      value: function credentialFromError(error) {\n        return GoogleAuthProvider.credentialFromTaggedObject(error.customData || {});\n      }\n    }, {\n      key: \"credentialFromTaggedObject\",\n      value: function credentialFromTaggedObject(_ref13) {\n        var tokenResponse = _ref13._tokenResponse;\n        if (!tokenResponse) {\n          return null;\n        }\n        var oauthIdToken = tokenResponse.oauthIdToken,\n          oauthAccessToken = tokenResponse.oauthAccessToken;\n        if (!oauthIdToken && !oauthAccessToken) {\n          // This could be an oauth 1 credential or a phone credential\n          return null;\n        }\n        try {\n          return GoogleAuthProvider.credential(oauthIdToken, oauthAccessToken);\n        } catch {\n          return null;\n        }\n      }\n    }]);\n  }(BaseOAuthProvider);\n  /** Always set to {@link SignInMethod}.GOOGLE. */\n  GoogleAuthProvider.GOOGLE_SIGN_IN_METHOD = \"google.com\" /* SignInMethod.GOOGLE */;\n  /** Always set to {@link ProviderId}.GOOGLE. */\n  GoogleAuthProvider.PROVIDER_ID = \"google.com\" /* ProviderId.GOOGLE */;\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.GITHUB.\n   *\n   * @remarks\n   * GitHub requires an OAuth 2.0 redirect, so you can either handle the redirect directly, or use\n   * the {@link signInWithPopup} handler:\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a redirect.\n   * const provider = new GithubAuthProvider();\n   * // Start a sign in process for an unauthenticated user.\n   * provider.addScope('repo');\n   * await signInWithRedirect(auth, provider);\n   * // This will trigger a full page redirect away from your app\n   *\n   * // After returning from the redirect when your app initializes you can obtain the result\n   * const result = await getRedirectResult(auth);\n   * if (result) {\n   *   // This is the signed-in user\n   *   const user = result.user;\n   *   // This gives you a GitHub Access Token.\n   *   const credential = GithubAuthProvider.credentialFromResult(result);\n   *   const token = credential.accessToken;\n   * }\n   * ```\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a popup.\n   * const provider = new GithubAuthProvider();\n   * provider.addScope('repo');\n   * const result = await signInWithPopup(auth, provider);\n   *\n   * // The signed-in user info.\n   * const user = result.user;\n   * // This gives you a GitHub Access Token.\n   * const credential = GithubAuthProvider.credentialFromResult(result);\n   * const token = credential.accessToken;\n   * ```\n   * @public\n   */\n  var GithubAuthProvider = /*#__PURE__*/function (_BaseOAuthProvider4) {\n    function GithubAuthProvider() {\n      _classCallCheck(this, GithubAuthProvider);\n      return _callSuper(this, GithubAuthProvider, [\"github.com\" /* ProviderId.GITHUB */]);\n    }\n    /**\n     * Creates a credential for GitHub.\n     *\n     * @param accessToken - GitHub access token.\n     */\n    _inherits(GithubAuthProvider, _BaseOAuthProvider4);\n    return _createClass(GithubAuthProvider, null, [{\n      key: \"credential\",\n      value: function credential(accessToken) {\n        return OAuthCredential._fromParams({\n          providerId: GithubAuthProvider.PROVIDER_ID,\n          signInMethod: GithubAuthProvider.GITHUB_SIGN_IN_METHOD,\n          accessToken\n        });\n      }\n      /**\n       * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n       *\n       * @param userCredential - The user credential.\n       */\n    }, {\n      key: \"credentialFromResult\",\n      value: function credentialFromResult(userCredential) {\n        return GithubAuthProvider.credentialFromTaggedObject(userCredential);\n      }\n      /**\n       * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n       * thrown during a sign-in, link, or reauthenticate operation.\n       *\n       * @param userCredential - The user credential.\n       */\n    }, {\n      key: \"credentialFromError\",\n      value: function credentialFromError(error) {\n        return GithubAuthProvider.credentialFromTaggedObject(error.customData || {});\n      }\n    }, {\n      key: \"credentialFromTaggedObject\",\n      value: function credentialFromTaggedObject(_ref14) {\n        var tokenResponse = _ref14._tokenResponse;\n        if (!tokenResponse || !('oauthAccessToken' in tokenResponse)) {\n          return null;\n        }\n        if (!tokenResponse.oauthAccessToken) {\n          return null;\n        }\n        try {\n          return GithubAuthProvider.credential(tokenResponse.oauthAccessToken);\n        } catch {\n          return null;\n        }\n      }\n    }]);\n  }(BaseOAuthProvider);\n  /** Always set to {@link SignInMethod}.GITHUB. */\n  GithubAuthProvider.GITHUB_SIGN_IN_METHOD = \"github.com\" /* SignInMethod.GITHUB */;\n  /** Always set to {@link ProviderId}.GITHUB. */\n  GithubAuthProvider.PROVIDER_ID = \"github.com\" /* ProviderId.GITHUB */;\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  var IDP_REQUEST_URI = 'http://localhost';\n  /**\n   * @public\n   */\n  var SAMLAuthCredential = /*#__PURE__*/function (_AuthCredential4) {\n    /** @internal */\n    function SAMLAuthCredential(providerId, pendingToken) {\n      var _this1;\n      _classCallCheck(this, SAMLAuthCredential);\n      _this1 = _callSuper(this, SAMLAuthCredential, [providerId, providerId]);\n      _this1.pendingToken = pendingToken;\n      return _this1;\n    }\n    /** @internal */\n    _inherits(SAMLAuthCredential, _AuthCredential4);\n    return _createClass(SAMLAuthCredential, [{\n      key: \"_getIdTokenResponse\",\n      value: function _getIdTokenResponse(auth) {\n        var request = this.buildRequest();\n        return signInWithIdp(auth, request);\n      }\n      /** @internal */\n    }, {\n      key: \"_linkToIdToken\",\n      value: function _linkToIdToken(auth, idToken) {\n        var request = this.buildRequest();\n        request.idToken = idToken;\n        return signInWithIdp(auth, request);\n      }\n      /** @internal */\n    }, {\n      key: \"_getReauthenticationResolver\",\n      value: function _getReauthenticationResolver(auth) {\n        var request = this.buildRequest();\n        request.autoCreate = false;\n        return signInWithIdp(auth, request);\n      }\n      /** {@inheritdoc AuthCredential.toJSON}  */\n    }, {\n      key: \"toJSON\",\n      value: function toJSON() {\n        return {\n          signInMethod: this.signInMethod,\n          providerId: this.providerId,\n          pendingToken: this.pendingToken\n        };\n      }\n      /**\n       * Static method to deserialize a JSON representation of an object into an\n       * {@link  AuthCredential}.\n       *\n       * @param json - Input can be either Object or the stringified representation of the object.\n       * When string is provided, JSON.parse would be called first.\n       *\n       * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.\n       */\n    }, {\n      key: \"buildRequest\",\n      value: function buildRequest() {\n        return {\n          requestUri: IDP_REQUEST_URI,\n          returnSecureToken: true,\n          pendingToken: this.pendingToken\n        };\n      }\n    }], [{\n      key: \"fromJSON\",\n      value: function fromJSON(json) {\n        var obj = typeof json === 'string' ? JSON.parse(json) : json;\n        var providerId = obj.providerId,\n          signInMethod = obj.signInMethod,\n          pendingToken = obj.pendingToken;\n        if (!providerId || !signInMethod || !pendingToken || providerId !== signInMethod) {\n          return null;\n        }\n        return new SAMLAuthCredential(providerId, pendingToken);\n      }\n      /**\n       * Helper static method to avoid exposing the constructor to end users.\n       *\n       * @internal\n       */\n    }, {\n      key: \"_create\",\n      value: function _create(providerId, pendingToken) {\n        return new SAMLAuthCredential(providerId, pendingToken);\n      }\n    }]);\n  }(AuthCredential);\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  var SAML_PROVIDER_PREFIX = 'saml.';\n  /**\n   * An {@link AuthProvider} for SAML.\n   *\n   * @public\n   */\n  var SAMLAuthProvider = /*#__PURE__*/function (_FederatedAuthProvide2) {\n    /**\n     * Constructor. The providerId must start with \"saml.\"\n     * @param providerId - SAML provider ID.\n     */\n    function SAMLAuthProvider(providerId) {\n      _classCallCheck(this, SAMLAuthProvider);\n      _assert(providerId.startsWith(SAML_PROVIDER_PREFIX), \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      return _callSuper(this, SAMLAuthProvider, [providerId]);\n    }\n    /**\n     * Generates an {@link AuthCredential} from a {@link UserCredential} after a\n     * successful SAML flow completes.\n     *\n     * @remarks\n     *\n     * For example, to get an {@link AuthCredential}, you could write the\n     * following code:\n     *\n     * ```js\n     * const userCredential = await signInWithPopup(auth, samlProvider);\n     * const credential = SAMLAuthProvider.credentialFromResult(userCredential);\n     * ```\n     *\n     * @param userCredential - The user credential.\n     */\n    _inherits(SAMLAuthProvider, _FederatedAuthProvide2);\n    return _createClass(SAMLAuthProvider, null, [{\n      key: \"credentialFromResult\",\n      value: function credentialFromResult(userCredential) {\n        return SAMLAuthProvider.samlCredentialFromTaggedObject(userCredential);\n      }\n      /**\n       * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n       * thrown during a sign-in, link, or reauthenticate operation.\n       *\n       * @param userCredential - The user credential.\n       */\n    }, {\n      key: \"credentialFromError\",\n      value: function credentialFromError(error) {\n        return SAMLAuthProvider.samlCredentialFromTaggedObject(error.customData || {});\n      }\n      /**\n       * Creates an {@link AuthCredential} from a JSON string or a plain object.\n       * @param json - A plain object or a JSON string\n       */\n    }, {\n      key: \"credentialFromJSON\",\n      value: function credentialFromJSON(json) {\n        var credential = SAMLAuthCredential.fromJSON(json);\n        _assert(credential, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n        return credential;\n      }\n    }, {\n      key: \"samlCredentialFromTaggedObject\",\n      value: function samlCredentialFromTaggedObject(_ref15) {\n        var tokenResponse = _ref15._tokenResponse;\n        if (!tokenResponse) {\n          return null;\n        }\n        var pendingToken = tokenResponse.pendingToken,\n          providerId = tokenResponse.providerId;\n        if (!pendingToken || !providerId) {\n          return null;\n        }\n        try {\n          return SAMLAuthCredential._create(providerId, pendingToken);\n        } catch (e) {\n          return null;\n        }\n      }\n    }]);\n  }(FederatedAuthProvider);\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.TWITTER.\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a redirect.\n   * const provider = new TwitterAuthProvider();\n   * // Start a sign in process for an unauthenticated user.\n   * await signInWithRedirect(auth, provider);\n   * // This will trigger a full page redirect away from your app\n   *\n   * // After returning from the redirect when your app initializes you can obtain the result\n   * const result = await getRedirectResult(auth);\n   * if (result) {\n   *   // This is the signed-in user\n   *   const user = result.user;\n   *   // This gives you a Twitter Access Token and Secret.\n   *   const credential = TwitterAuthProvider.credentialFromResult(result);\n   *   const token = credential.accessToken;\n   *   const secret = credential.secret;\n   * }\n   * ```\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a popup.\n   * const provider = new TwitterAuthProvider();\n   * const result = await signInWithPopup(auth, provider);\n   *\n   * // The signed-in user info.\n   * const user = result.user;\n   * // This gives you a Twitter Access Token and Secret.\n   * const credential = TwitterAuthProvider.credentialFromResult(result);\n   * const token = credential.accessToken;\n   * const secret = credential.secret;\n   * ```\n   *\n   * @public\n   */\n  var TwitterAuthProvider = /*#__PURE__*/function (_BaseOAuthProvider5) {\n    function TwitterAuthProvider() {\n      _classCallCheck(this, TwitterAuthProvider);\n      return _callSuper(this, TwitterAuthProvider, [\"twitter.com\" /* ProviderId.TWITTER */]);\n    }\n    /**\n     * Creates a credential for Twitter.\n     *\n     * @param token - Twitter access token.\n     * @param secret - Twitter secret.\n     */\n    _inherits(TwitterAuthProvider, _BaseOAuthProvider5);\n    return _createClass(TwitterAuthProvider, null, [{\n      key: \"credential\",\n      value: function credential(token, secret) {\n        return OAuthCredential._fromParams({\n          providerId: TwitterAuthProvider.PROVIDER_ID,\n          signInMethod: TwitterAuthProvider.TWITTER_SIGN_IN_METHOD,\n          oauthToken: token,\n          oauthTokenSecret: secret\n        });\n      }\n      /**\n       * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n       *\n       * @param userCredential - The user credential.\n       */\n    }, {\n      key: \"credentialFromResult\",\n      value: function credentialFromResult(userCredential) {\n        return TwitterAuthProvider.credentialFromTaggedObject(userCredential);\n      }\n      /**\n       * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n       * thrown during a sign-in, link, or reauthenticate operation.\n       *\n       * @param userCredential - The user credential.\n       */\n    }, {\n      key: \"credentialFromError\",\n      value: function credentialFromError(error) {\n        return TwitterAuthProvider.credentialFromTaggedObject(error.customData || {});\n      }\n    }, {\n      key: \"credentialFromTaggedObject\",\n      value: function credentialFromTaggedObject(_ref16) {\n        var tokenResponse = _ref16._tokenResponse;\n        if (!tokenResponse) {\n          return null;\n        }\n        var oauthAccessToken = tokenResponse.oauthAccessToken,\n          oauthTokenSecret = tokenResponse.oauthTokenSecret;\n        if (!oauthAccessToken || !oauthTokenSecret) {\n          return null;\n        }\n        try {\n          return TwitterAuthProvider.credential(oauthAccessToken, oauthTokenSecret);\n        } catch {\n          return null;\n        }\n      }\n    }]);\n  }(BaseOAuthProvider);\n  /** Always set to {@link SignInMethod}.TWITTER. */\n  TwitterAuthProvider.TWITTER_SIGN_IN_METHOD = \"twitter.com\" /* SignInMethod.TWITTER */;\n  /** Always set to {@link ProviderId}.TWITTER. */\n  TwitterAuthProvider.PROVIDER_ID = \"twitter.com\" /* ProviderId.TWITTER */;\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function signUp(_x117, _x118) {\n    return _signUp.apply(this, arguments);\n  }\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _signUp() {\n    _signUp = _asyncToGenerator(function* (auth, request) {\n      return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signUp\" /* Endpoint.SIGN_UP */, _addTidIfNecessary(auth, request));\n    });\n    return _signUp.apply(this, arguments);\n  }\n  var UserCredentialImpl = /*#__PURE__*/function () {\n    function UserCredentialImpl(params) {\n      _classCallCheck(this, UserCredentialImpl);\n      this.user = params.user;\n      this.providerId = params.providerId;\n      this._tokenResponse = params._tokenResponse;\n      this.operationType = params.operationType;\n    }\n    return _createClass(UserCredentialImpl, null, [{\n      key: \"_fromIdTokenResponse\",\n      value: function () {\n        var _fromIdTokenResponse3 = _asyncToGenerator(function* (auth, operationType, idTokenResponse) {\n          var isAnonymous = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n          var user = yield UserImpl._fromIdTokenResponse(auth, idTokenResponse, isAnonymous);\n          var providerId = providerIdForResponse(idTokenResponse);\n          var userCred = new UserCredentialImpl({\n            user,\n            providerId,\n            _tokenResponse: idTokenResponse,\n            operationType\n          });\n          return userCred;\n        });\n        function _fromIdTokenResponse(_x119, _x120, _x121) {\n          return _fromIdTokenResponse3.apply(this, arguments);\n        }\n        return _fromIdTokenResponse;\n      }()\n    }, {\n      key: \"_forOperation\",\n      value: function () {\n        var _forOperation2 = _asyncToGenerator(function* (user, operationType, response) {\n          yield user._updateTokensIfNecessary(response, /* reload */true);\n          var providerId = providerIdForResponse(response);\n          return new UserCredentialImpl({\n            user,\n            providerId,\n            _tokenResponse: response,\n            operationType\n          });\n        });\n        function _forOperation(_x122, _x123, _x124) {\n          return _forOperation2.apply(this, arguments);\n        }\n        return _forOperation;\n      }()\n    }]);\n  }();\n  function providerIdForResponse(response) {\n    if (response.providerId) {\n      return response.providerId;\n    }\n    if ('phoneNumber' in response) {\n      return \"phone\" /* ProviderId.PHONE */;\n    }\n    return null;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Asynchronously signs in as an anonymous user.\n   *\n   * @remarks\n   * If there is already an anonymous user signed in, that user will be returned; otherwise, a\n   * new anonymous user identity will be created and returned.\n   *\n   * This method is not supported by {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @param auth - The {@link Auth} instance.\n   *\n   * @public\n   */\n  function signInAnonymously(_x125) {\n    return _signInAnonymously.apply(this, arguments);\n  }\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _signInAnonymously() {\n    _signInAnonymously = _asyncToGenerator(function* (auth) {\n      if (app._isFirebaseServerApp(auth.app)) {\n        return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n      }\n      var authInternal = _castAuth(auth);\n      yield authInternal._initializationPromise;\n      if (authInternal.currentUser?.isAnonymous) {\n        // If an anonymous user is already signed in, no need to sign them in again.\n        return new UserCredentialImpl({\n          user: authInternal.currentUser,\n          providerId: null,\n          operationType: \"signIn\" /* OperationType.SIGN_IN */\n        });\n      }\n      var response = yield signUp(authInternal, {\n        returnSecureToken: true\n      });\n      var userCredential = yield UserCredentialImpl._fromIdTokenResponse(authInternal, \"signIn\" /* OperationType.SIGN_IN */, response, true);\n      yield authInternal._updateCurrentUser(userCredential.user);\n      return userCredential;\n    });\n    return _signInAnonymously.apply(this, arguments);\n  }\n  var MultiFactorError = /*#__PURE__*/function (_util$FirebaseError) {\n    function MultiFactorError(auth, error, operationType, user) {\n      var _this10;\n      _classCallCheck(this, MultiFactorError);\n      _this10 = _callSuper(this, MultiFactorError, [error.code, error.message]);\n      _this10.operationType = operationType;\n      _this10.user = user;\n      // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n      Object.setPrototypeOf(_this10, MultiFactorError.prototype);\n      _this10.customData = {\n        appName: auth.name,\n        tenantId: auth.tenantId ?? undefined,\n        _serverResponse: error.customData._serverResponse,\n        operationType\n      };\n      return _this10;\n    }\n    _inherits(MultiFactorError, _util$FirebaseError);\n    return _createClass(MultiFactorError, null, [{\n      key: \"_fromErrorAndOperation\",\n      value: function _fromErrorAndOperation(auth, error, operationType, user) {\n        return new MultiFactorError(auth, error, operationType, user);\n      }\n    }]);\n  }(util.FirebaseError);\n  function _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential, user) {\n    var idTokenProvider = operationType === \"reauthenticate\" /* OperationType.REAUTHENTICATE */ ? credential._getReauthenticationResolver(auth) : credential._getIdTokenResponse(auth);\n    return idTokenProvider.catch(error => {\n      if (error.code === `auth/${\"multi-factor-auth-required\" /* AuthErrorCode.MFA_REQUIRED */}`) {\n        throw MultiFactorError._fromErrorAndOperation(auth, error, operationType, user);\n      }\n      throw error;\n    });\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Takes a set of UserInfo provider data and converts it to a set of names\n   */\n  function providerDataAsNames(providerData) {\n    return new Set(providerData.map(_ref17 => {\n      var providerId = _ref17.providerId;\n      return providerId;\n    }).filter(pid => !!pid));\n  }\n\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Unlinks a provider from a user account.\n   *\n   * @param user - The user.\n   * @param providerId - The provider to unlink.\n   *\n   * @public\n   */\n  function unlink(_x126, _x127) {\n    return _unlink.apply(this, arguments);\n  }\n  function _unlink() {\n    _unlink = _asyncToGenerator(function* (user, providerId) {\n      var userInternal = util.getModularInstance(user);\n      yield _assertLinkedStatus(true, userInternal, providerId);\n      var _yield$deleteLinkedAc = yield deleteLinkedAccounts(userInternal.auth, {\n          idToken: yield userInternal.getIdToken(),\n          deleteProvider: [providerId]\n        }),\n        providerUserInfo = _yield$deleteLinkedAc.providerUserInfo;\n      var providersLeft = providerDataAsNames(providerUserInfo || []);\n      userInternal.providerData = userInternal.providerData.filter(pd => providersLeft.has(pd.providerId));\n      if (!providersLeft.has(\"phone\" /* ProviderId.PHONE */)) {\n        userInternal.phoneNumber = null;\n      }\n      yield userInternal.auth._persistUserIfCurrent(userInternal);\n      return userInternal;\n    });\n    return _unlink.apply(this, arguments);\n  }\n  function _link(_x128, _x129) {\n    return _link2.apply(this, arguments);\n  }\n  function _link2() {\n    _link2 = _asyncToGenerator(function* (user, credential) {\n      var bypassAuthState = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var response = yield _logoutIfInvalidated(user, credential._linkToIdToken(user.auth, yield user.getIdToken()), bypassAuthState);\n      return UserCredentialImpl._forOperation(user, \"link\" /* OperationType.LINK */, response);\n    });\n    return _link2.apply(this, arguments);\n  }\n  function _assertLinkedStatus(_x130, _x131, _x132) {\n    return _assertLinkedStatus2.apply(this, arguments);\n  }\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _assertLinkedStatus2() {\n    _assertLinkedStatus2 = _asyncToGenerator(function* (expected, user, provider) {\n      yield _reloadWithoutSaving(user);\n      var providerIds = providerDataAsNames(user.providerData);\n      var code = expected === false ? \"provider-already-linked\" /* AuthErrorCode.PROVIDER_ALREADY_LINKED */ : \"no-such-provider\" /* AuthErrorCode.NO_SUCH_PROVIDER */;\n      _assert(providerIds.has(provider) === expected, user.auth, code);\n    });\n    return _assertLinkedStatus2.apply(this, arguments);\n  }\n  function _reauthenticate(_x133, _x134) {\n    return _reauthenticate2.apply(this, arguments);\n  }\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _reauthenticate2() {\n    _reauthenticate2 = _asyncToGenerator(function* (user, credential) {\n      var bypassAuthState = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var auth = user.auth;\n      if (app._isFirebaseServerApp(auth.app)) {\n        return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n      }\n      var operationType = \"reauthenticate\" /* OperationType.REAUTHENTICATE */;\n      try {\n        var response = yield _logoutIfInvalidated(user, _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential, user), bypassAuthState);\n        _assert(response.idToken, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        var parsed = _parseToken(response.idToken);\n        _assert(parsed, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        var localId = parsed.sub;\n        _assert(user.uid === localId, auth, \"user-mismatch\" /* AuthErrorCode.USER_MISMATCH */);\n        return UserCredentialImpl._forOperation(user, operationType, response);\n      } catch (e) {\n        // Convert user deleted error into user mismatch\n        if (e?.code === `auth/${\"user-not-found\" /* AuthErrorCode.USER_DELETED */}`) {\n          _fail(auth, \"user-mismatch\" /* AuthErrorCode.USER_MISMATCH */);\n        }\n        throw e;\n      }\n    });\n    return _reauthenticate2.apply(this, arguments);\n  }\n  function _signInWithCredential(_x135, _x136) {\n    return _signInWithCredential2.apply(this, arguments);\n  }\n  /**\n   * Asynchronously signs in with the given credentials.\n   *\n   * @remarks\n   * An {@link AuthProvider} can be used to generate the credential.\n   *\n   * This method is not supported by {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param credential - The auth credential.\n   *\n   * @public\n   */\n  function _signInWithCredential2() {\n    _signInWithCredential2 = _asyncToGenerator(function* (auth, credential) {\n      var bypassAuthState = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      if (app._isFirebaseServerApp(auth.app)) {\n        return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n      }\n      var operationType = \"signIn\" /* OperationType.SIGN_IN */;\n      var response = yield _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential);\n      var userCredential = yield UserCredentialImpl._fromIdTokenResponse(auth, operationType, response);\n      if (!bypassAuthState) {\n        yield auth._updateCurrentUser(userCredential.user);\n      }\n      return userCredential;\n    });\n    return _signInWithCredential2.apply(this, arguments);\n  }\n  function signInWithCredential(_x137, _x138) {\n    return _signInWithCredential3.apply(this, arguments);\n  }\n  /**\n   * Links the user account with the given credentials.\n   *\n   * @remarks\n   * An {@link AuthProvider} can be used to generate the credential.\n   *\n   * @param user - The user.\n   * @param credential - The auth credential.\n   *\n   * @public\n   */\n  function _signInWithCredential3() {\n    _signInWithCredential3 = _asyncToGenerator(function* (auth, credential) {\n      return _signInWithCredential(_castAuth(auth), credential);\n    });\n    return _signInWithCredential3.apply(this, arguments);\n  }\n  function linkWithCredential(_x139, _x140) {\n    return _linkWithCredential.apply(this, arguments);\n  }\n  /**\n   * Re-authenticates a user using a fresh credential.\n   *\n   * @remarks\n   * Use before operations such as {@link updatePassword} that require tokens from recent sign-in\n   * attempts. This method can be used to recover from a `CREDENTIAL_TOO_OLD_LOGIN_AGAIN` error\n   * or a `TOKEN_EXPIRED` error.\n   *\n   * This method is not supported on any {@link User} signed in by {@link Auth} instances\n   * created with a {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @param user - The user.\n   * @param credential - The auth credential.\n   *\n   * @public\n   */\n  function _linkWithCredential() {\n    _linkWithCredential = _asyncToGenerator(function* (user, credential) {\n      var userInternal = util.getModularInstance(user);\n      yield _assertLinkedStatus(false, userInternal, credential.providerId);\n      return _link(userInternal, credential);\n    });\n    return _linkWithCredential.apply(this, arguments);\n  }\n  function reauthenticateWithCredential(_x141, _x142) {\n    return _reauthenticateWithCredential.apply(this, arguments);\n  }\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _reauthenticateWithCredential() {\n    _reauthenticateWithCredential = _asyncToGenerator(function* (user, credential) {\n      return _reauthenticate(util.getModularInstance(user), credential);\n    });\n    return _reauthenticateWithCredential.apply(this, arguments);\n  }\n  function signInWithCustomToken$1(_x143, _x144) {\n    return _signInWithCustomToken$.apply(this, arguments);\n  }\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Asynchronously signs in using a custom token.\n   *\n   * @remarks\n   * Custom tokens are used to integrate Firebase Auth with existing auth systems, and must\n   * be generated by an auth backend using the\n   * {@link https://firebase.google.com/docs/reference/admin/node/admin.auth.Auth#createcustomtoken | createCustomToken}\n   * method in the {@link https://firebase.google.com/docs/auth/admin | Admin SDK} .\n   *\n   * Fails with an error if the token is invalid, expired, or not accepted by the Firebase Auth service.\n   *\n   * This method is not supported by {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param customToken - The custom token to sign in with.\n   *\n   * @public\n   */\n  function _signInWithCustomToken$() {\n    _signInWithCustomToken$ = _asyncToGenerator(function* (auth, request) {\n      return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithCustomToken\" /* Endpoint.SIGN_IN_WITH_CUSTOM_TOKEN */, _addTidIfNecessary(auth, request));\n    });\n    return _signInWithCustomToken$.apply(this, arguments);\n  }\n  function signInWithCustomToken(_x145, _x146) {\n    return _signInWithCustomToken.apply(this, arguments);\n  }\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _signInWithCustomToken() {\n    _signInWithCustomToken = _asyncToGenerator(function* (auth, customToken) {\n      if (app._isFirebaseServerApp(auth.app)) {\n        return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n      }\n      var authInternal = _castAuth(auth);\n      var response = yield signInWithCustomToken$1(authInternal, {\n        token: customToken,\n        returnSecureToken: true\n      });\n      var cred = yield UserCredentialImpl._fromIdTokenResponse(authInternal, \"signIn\" /* OperationType.SIGN_IN */, response);\n      yield authInternal._updateCurrentUser(cred.user);\n      return cred;\n    });\n    return _signInWithCustomToken.apply(this, arguments);\n  }\n  var MultiFactorInfoImpl = /*#__PURE__*/function () {\n    function MultiFactorInfoImpl(factorId, response) {\n      _classCallCheck(this, MultiFactorInfoImpl);\n      this.factorId = factorId;\n      this.uid = response.mfaEnrollmentId;\n      this.enrollmentTime = new Date(response.enrolledAt).toUTCString();\n      this.displayName = response.displayName;\n    }\n    return _createClass(MultiFactorInfoImpl, null, [{\n      key: \"_fromServerResponse\",\n      value: function _fromServerResponse(auth, enrollment) {\n        if ('phoneInfo' in enrollment) {\n          return PhoneMultiFactorInfoImpl._fromServerResponse(auth, enrollment);\n        } else if ('totpInfo' in enrollment) {\n          return TotpMultiFactorInfoImpl._fromServerResponse(auth, enrollment);\n        }\n        return _fail(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      }\n    }]);\n  }();\n  var PhoneMultiFactorInfoImpl = /*#__PURE__*/function (_MultiFactorInfoImpl) {\n    function PhoneMultiFactorInfoImpl(response) {\n      var _this11;\n      _classCallCheck(this, PhoneMultiFactorInfoImpl);\n      _this11 = _callSuper(this, PhoneMultiFactorInfoImpl, [\"phone\" /* FactorId.PHONE */, response]);\n      _this11.phoneNumber = response.phoneInfo;\n      return _this11;\n    }\n    _inherits(PhoneMultiFactorInfoImpl, _MultiFactorInfoImpl);\n    return _createClass(PhoneMultiFactorInfoImpl, null, [{\n      key: \"_fromServerResponse\",\n      value: function _fromServerResponse(_auth, enrollment) {\n        return new PhoneMultiFactorInfoImpl(enrollment);\n      }\n    }]);\n  }(MultiFactorInfoImpl);\n  var TotpMultiFactorInfoImpl = /*#__PURE__*/function (_MultiFactorInfoImpl2) {\n    function TotpMultiFactorInfoImpl(response) {\n      _classCallCheck(this, TotpMultiFactorInfoImpl);\n      return _callSuper(this, TotpMultiFactorInfoImpl, [\"totp\" /* FactorId.TOTP */, response]);\n    }\n    _inherits(TotpMultiFactorInfoImpl, _MultiFactorInfoImpl2);\n    return _createClass(TotpMultiFactorInfoImpl, null, [{\n      key: \"_fromServerResponse\",\n      value: function _fromServerResponse(_auth, enrollment) {\n        return new TotpMultiFactorInfoImpl(enrollment);\n      }\n    }]);\n  }(MultiFactorInfoImpl);\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _setActionCodeSettingsOnRequest(auth, request, actionCodeSettings) {\n    _assert(actionCodeSettings.url?.length > 0, auth, \"invalid-continue-uri\" /* AuthErrorCode.INVALID_CONTINUE_URI */);\n    _assert(typeof actionCodeSettings.dynamicLinkDomain === 'undefined' || actionCodeSettings.dynamicLinkDomain.length > 0, auth, \"invalid-dynamic-link-domain\" /* AuthErrorCode.INVALID_DYNAMIC_LINK_DOMAIN */);\n    _assert(typeof actionCodeSettings.linkDomain === 'undefined' || actionCodeSettings.linkDomain.length > 0, auth, \"invalid-hosting-link-domain\" /* AuthErrorCode.INVALID_HOSTING_LINK_DOMAIN */);\n    request.continueUrl = actionCodeSettings.url;\n    request.dynamicLinkDomain = actionCodeSettings.dynamicLinkDomain;\n    request.linkDomain = actionCodeSettings.linkDomain;\n    request.canHandleCodeInApp = actionCodeSettings.handleCodeInApp;\n    if (actionCodeSettings.iOS) {\n      _assert(actionCodeSettings.iOS.bundleId.length > 0, auth, \"missing-ios-bundle-id\" /* AuthErrorCode.MISSING_IOS_BUNDLE_ID */);\n      request.iOSBundleId = actionCodeSettings.iOS.bundleId;\n    }\n    if (actionCodeSettings.android) {\n      _assert(actionCodeSettings.android.packageName.length > 0, auth, \"missing-android-pkg-name\" /* AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME */);\n      request.androidInstallApp = actionCodeSettings.android.installApp;\n      request.androidMinimumVersionCode = actionCodeSettings.android.minimumVersion;\n      request.androidPackageName = actionCodeSettings.android.packageName;\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Updates the password policy cached in the {@link Auth} instance if a policy is already\n   * cached for the project or tenant.\n   *\n   * @remarks\n   * We only fetch the password policy if the password did not meet policy requirements and\n   * there is an existing policy cached. A developer must call validatePassword at least\n   * once for the cache to be automatically updated.\n   *\n   * @param auth - The {@link Auth} instance.\n   *\n   * @private\n   */\n  function recachePasswordPolicy(_x147) {\n    return _recachePasswordPolicy.apply(this, arguments);\n  }\n  /**\n   * Sends a password reset email to the given email address. This method does not throw an error when\n   * there's no user account with the given email address and\n   * {@link https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection | Email Enumeration Protection}\n   * is enabled.\n   *\n   * @remarks\n   * To complete the password reset, call {@link confirmPasswordReset} with the code supplied in\n   * the email sent to the user, along with the new password specified by the user.\n   *\n   * @example\n   * ```javascript\n   * const actionCodeSettings = {\n   *   url: 'https://www.example.com/?email=user@example.com',\n   *   iOS: {\n   *      bundleId: 'com.example.ios'\n   *   },\n   *   android: {\n   *     packageName: 'com.example.android',\n   *     installApp: true,\n   *     minimumVersion: '12'\n   *   },\n   *   handleCodeInApp: true\n   * };\n   * await sendPasswordResetEmail(auth, 'user@example.com', actionCodeSettings);\n   * // Obtain code from user.\n   * await confirmPasswordReset('user@example.com', code);\n   * ```\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param email - The user's email address.\n   * @param actionCodeSettings - The {@link ActionCodeSettings}.\n   *\n   * @public\n   */\n  function _recachePasswordPolicy() {\n    _recachePasswordPolicy = _asyncToGenerator(function* (auth) {\n      var authInternal = _castAuth(auth);\n      if (authInternal._getPasswordPolicyInternal()) {\n        yield authInternal._updatePasswordPolicy();\n      }\n    });\n    return _recachePasswordPolicy.apply(this, arguments);\n  }\n  function sendPasswordResetEmail(_x148, _x149, _x150) {\n    return _sendPasswordResetEmail.apply(this, arguments);\n  }\n  /**\n   * Completes the password reset process, given a confirmation code and new password.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param oobCode - A confirmation code sent to the user.\n   * @param newPassword - The new password.\n   *\n   * @public\n   */\n  function _sendPasswordResetEmail() {\n    _sendPasswordResetEmail = _asyncToGenerator(function* (auth, email, actionCodeSettings) {\n      var authInternal = _castAuth(auth);\n      var request = {\n        requestType: \"PASSWORD_RESET\" /* ActionCodeOperation.PASSWORD_RESET */,\n        email,\n        clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n      };\n      if (actionCodeSettings) {\n        _setActionCodeSettingsOnRequest(authInternal, request, actionCodeSettings);\n      }\n      yield handleRecaptchaFlow(authInternal, request, \"getOobCode\" /* RecaptchaActionName.GET_OOB_CODE */, sendPasswordResetEmail$1, \"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */);\n    });\n    return _sendPasswordResetEmail.apply(this, arguments);\n  }\n  function confirmPasswordReset(_x151, _x152, _x153) {\n    return _confirmPasswordReset.apply(this, arguments);\n  }\n  /**\n   * Applies a verification code sent to the user by email or other out-of-band mechanism.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param oobCode - A verification code sent to the user.\n   *\n   * @public\n   */\n  function _confirmPasswordReset() {\n    _confirmPasswordReset = _asyncToGenerator(function* (auth, oobCode, newPassword) {\n      yield resetPassword(util.getModularInstance(auth), {\n        oobCode,\n        newPassword\n      }).catch(/*#__PURE__*/function () {\n        var _ref28 = _asyncToGenerator(function* (error) {\n          if (error.code === `auth/${\"password-does-not-meet-requirements\" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */}`) {\n            void recachePasswordPolicy(auth);\n          }\n          throw error;\n        });\n        return function (_x221) {\n          return _ref28.apply(this, arguments);\n        };\n      }());\n      // Do not return the email.\n    });\n    return _confirmPasswordReset.apply(this, arguments);\n  }\n  function applyActionCode(_x154, _x155) {\n    return _applyActionCode.apply(this, arguments);\n  }\n  /**\n   * Checks a verification code sent to the user by email or other out-of-band mechanism.\n   *\n   * @returns metadata about the code.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param oobCode - A verification code sent to the user.\n   *\n   * @public\n   */\n  function _applyActionCode() {\n    _applyActionCode = _asyncToGenerator(function* (auth, oobCode) {\n      yield applyActionCode$1(util.getModularInstance(auth), {\n        oobCode\n      });\n    });\n    return _applyActionCode.apply(this, arguments);\n  }\n  function checkActionCode(_x156, _x157) {\n    return _checkActionCode.apply(this, arguments);\n  }\n  /**\n   * Checks a password reset code sent to the user by email or other out-of-band mechanism.\n   *\n   * @returns the user's email address if valid.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param code - A verification code sent to the user.\n   *\n   * @public\n   */\n  function _checkActionCode() {\n    _checkActionCode = _asyncToGenerator(function* (auth, oobCode) {\n      var authModular = util.getModularInstance(auth);\n      var response = yield resetPassword(authModular, {\n        oobCode\n      });\n      // Email could be empty only if the request type is EMAIL_SIGNIN or\n      // VERIFY_AND_CHANGE_EMAIL.\n      // New email should not be empty if the request type is\n      // VERIFY_AND_CHANGE_EMAIL.\n      // Multi-factor info could not be empty if the request type is\n      // REVERT_SECOND_FACTOR_ADDITION.\n      var operation = response.requestType;\n      _assert(operation, authModular, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      switch (operation) {\n        case \"EMAIL_SIGNIN\" /* ActionCodeOperation.EMAIL_SIGNIN */:\n          break;\n        case \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */:\n          _assert(response.newEmail, authModular, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n          break;\n        case \"REVERT_SECOND_FACTOR_ADDITION\" /* ActionCodeOperation.REVERT_SECOND_FACTOR_ADDITION */:\n          _assert(response.mfaInfo, authModular, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        // fall through\n        default:\n          _assert(response.email, authModular, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      }\n      // The multi-factor info for revert second factor addition\n      var multiFactorInfo = null;\n      if (response.mfaInfo) {\n        multiFactorInfo = MultiFactorInfoImpl._fromServerResponse(_castAuth(authModular), response.mfaInfo);\n      }\n      return {\n        data: {\n          email: (response.requestType === \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */ ? response.newEmail : response.email) || null,\n          previousEmail: (response.requestType === \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */ ? response.email : response.newEmail) || null,\n          multiFactorInfo\n        },\n        operation\n      };\n    });\n    return _checkActionCode.apply(this, arguments);\n  }\n  function verifyPasswordResetCode(_x158, _x159) {\n    return _verifyPasswordResetCode.apply(this, arguments);\n  }\n  /**\n   * Creates a new user account associated with the specified email address and password.\n   *\n   * @remarks\n   * On successful creation of the user account, this user will also be signed in to your application.\n   *\n   * User account creation can fail if the account already exists or the password is invalid.\n   *\n   * This method is not supported on {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * Note: The email address acts as a unique identifier for the user and enables an email-based\n   * password reset. This function will create a new user account and set the initial user password.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param email - The user's email address.\n   * @param password - The user's chosen password.\n   *\n   * @public\n   */\n  function _verifyPasswordResetCode() {\n    _verifyPasswordResetCode = _asyncToGenerator(function* (auth, code) {\n      var _yield$checkActionCod = yield checkActionCode(util.getModularInstance(auth), code),\n        data = _yield$checkActionCod.data;\n      // Email should always be present since a code was sent to it\n      return data.email;\n    });\n    return _verifyPasswordResetCode.apply(this, arguments);\n  }\n  function createUserWithEmailAndPassword(_x160, _x161, _x162) {\n    return _createUserWithEmailAndPassword.apply(this, arguments);\n  }\n  /**\n   * Asynchronously signs in using an email and password.\n   *\n   * @remarks\n   * Fails with an error if the email address and password do not match. When\n   * {@link https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection | Email Enumeration Protection}\n   * is enabled, this method fails with \"auth/invalid-credential\" in case of an invalid\n   * email/password.\n   *\n   * This method is not supported on {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * Note: The user's password is NOT the password used to access the user's email account. The\n   * email address serves as a unique identifier for the user, and the password is used to access\n   * the user's account in your Firebase project. See also: {@link createUserWithEmailAndPassword}.\n   *\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param email - The users email address.\n   * @param password - The users password.\n   *\n   * @public\n   */\n  function _createUserWithEmailAndPassword() {\n    _createUserWithEmailAndPassword = _asyncToGenerator(function* (auth, email, password) {\n      if (app._isFirebaseServerApp(auth.app)) {\n        return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n      }\n      var authInternal = _castAuth(auth);\n      var request = {\n        returnSecureToken: true,\n        email,\n        password,\n        clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n      };\n      var signUpResponse = handleRecaptchaFlow(authInternal, request, \"signUpPassword\" /* RecaptchaActionName.SIGN_UP_PASSWORD */, signUp, \"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */);\n      var response = yield signUpResponse.catch(error => {\n        if (error.code === `auth/${\"password-does-not-meet-requirements\" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */}`) {\n          void recachePasswordPolicy(auth);\n        }\n        throw error;\n      });\n      var userCredential = yield UserCredentialImpl._fromIdTokenResponse(authInternal, \"signIn\" /* OperationType.SIGN_IN */, response);\n      yield authInternal._updateCurrentUser(userCredential.user);\n      return userCredential;\n    });\n    return _createUserWithEmailAndPassword.apply(this, arguments);\n  }\n  function signInWithEmailAndPassword(auth, email, password) {\n    if (app._isFirebaseServerApp(auth.app)) {\n      return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n    }\n    return signInWithCredential(util.getModularInstance(auth), EmailAuthProvider.credential(email, password)).catch(/*#__PURE__*/function () {\n      var _ref18 = _asyncToGenerator(function* (error) {\n        if (error.code === `auth/${\"password-does-not-meet-requirements\" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */}`) {\n          void recachePasswordPolicy(auth);\n        }\n        throw error;\n      });\n      return function (_x163) {\n        return _ref18.apply(this, arguments);\n      };\n    }());\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Sends a sign-in email link to the user with the specified email.\n   *\n   * @remarks\n   * The sign-in operation has to always be completed in the app unlike other out of band email\n   * actions (password reset and email verifications). This is because, at the end of the flow,\n   * the user is expected to be signed in and their Auth state persisted within the app.\n   *\n   * To complete sign in with the email link, call {@link signInWithEmailLink} with the email\n   * address and the email link supplied in the email sent to the user.\n   *\n   * @example\n   * ```javascript\n   * const actionCodeSettings = {\n   *   url: 'https://www.example.com/?email=user@example.com',\n   *   iOS: {\n   *      bundleId: 'com.example.ios'\n   *   },\n   *   android: {\n   *     packageName: 'com.example.android',\n   *     installApp: true,\n   *     minimumVersion: '12'\n   *   },\n   *   handleCodeInApp: true\n   * };\n   * await sendSignInLinkToEmail(auth, 'user@example.com', actionCodeSettings);\n   * // Obtain emailLink from the user.\n   * if(isSignInWithEmailLink(auth, emailLink)) {\n   *   await signInWithEmailLink(auth, 'user@example.com', emailLink);\n   * }\n   * ```\n   *\n   * @param authInternal - The {@link Auth} instance.\n   * @param email - The user's email address.\n   * @param actionCodeSettings - The {@link ActionCodeSettings}.\n   *\n   * @public\n   */\n  function sendSignInLinkToEmail(_x164, _x165, _x166) {\n    return _sendSignInLinkToEmail.apply(this, arguments);\n  }\n  /**\n   * Checks if an incoming link is a sign-in with email link suitable for {@link signInWithEmailLink}.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param emailLink - The link sent to the user's email address.\n   *\n   * @public\n   */\n  function _sendSignInLinkToEmail() {\n    _sendSignInLinkToEmail = _asyncToGenerator(function* (auth, email, actionCodeSettings) {\n      var authInternal = _castAuth(auth);\n      var request = {\n        requestType: \"EMAIL_SIGNIN\" /* ActionCodeOperation.EMAIL_SIGNIN */,\n        email,\n        clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n      };\n      function setActionCodeSettings(request, actionCodeSettings) {\n        _assert(actionCodeSettings.handleCodeInApp, authInternal, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n        if (actionCodeSettings) {\n          _setActionCodeSettingsOnRequest(authInternal, request, actionCodeSettings);\n        }\n      }\n      setActionCodeSettings(request, actionCodeSettings);\n      yield handleRecaptchaFlow(authInternal, request, \"getOobCode\" /* RecaptchaActionName.GET_OOB_CODE */, sendSignInLinkToEmail$1, \"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */);\n    });\n    return _sendSignInLinkToEmail.apply(this, arguments);\n  }\n  function isSignInWithEmailLink(auth, emailLink) {\n    var actionCodeUrl = ActionCodeURL.parseLink(emailLink);\n    return actionCodeUrl?.operation === \"EMAIL_SIGNIN\" /* ActionCodeOperation.EMAIL_SIGNIN */;\n  }\n  /**\n   * Asynchronously signs in using an email and sign-in email link.\n   *\n   * @remarks\n   * If no link is passed, the link is inferred from the current URL.\n   *\n   * Fails with an error if the email address is invalid or OTP in email link expires.\n   *\n   * This method is not supported by {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * Note: Confirm the link is a sign-in email link before calling this method firebase.auth.Auth.isSignInWithEmailLink.\n   *\n   * @example\n   * ```javascript\n   * const actionCodeSettings = {\n   *   url: 'https://www.example.com/?email=user@example.com',\n   *   iOS: {\n   *      bundleId: 'com.example.ios'\n   *   },\n   *   android: {\n   *     packageName: 'com.example.android',\n   *     installApp: true,\n   *     minimumVersion: '12'\n   *   },\n   *   handleCodeInApp: true\n   * };\n   * await sendSignInLinkToEmail(auth, 'user@example.com', actionCodeSettings);\n   * // Obtain emailLink from the user.\n   * if(isSignInWithEmailLink(auth, emailLink)) {\n   *   await signInWithEmailLink(auth, 'user@example.com', emailLink);\n   * }\n   * ```\n   *\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param email - The user's email address.\n   * @param emailLink - The link sent to the user's email address.\n   *\n   * @public\n   */\n  function signInWithEmailLink(_x167, _x168, _x169) {\n    return _signInWithEmailLink.apply(this, arguments);\n  }\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _signInWithEmailLink() {\n    _signInWithEmailLink = _asyncToGenerator(function* (auth, email, emailLink) {\n      if (app._isFirebaseServerApp(auth.app)) {\n        return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n      }\n      var authModular = util.getModularInstance(auth);\n      var credential = EmailAuthProvider.credentialWithLink(email, emailLink || _getCurrentUrl());\n      // Check if the tenant ID in the email link matches the tenant ID on Auth\n      // instance.\n      _assert(credential._tenantId === (authModular.tenantId || null), authModular, \"tenant-id-mismatch\" /* AuthErrorCode.TENANT_ID_MISMATCH */);\n      return signInWithCredential(authModular, credential);\n    });\n    return _signInWithEmailLink.apply(this, arguments);\n  }\n  function createAuthUri(_x170, _x171) {\n    return _createAuthUri.apply(this, arguments);\n  }\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Gets the list of possible sign in methods for the given email address. This method returns an\n   * empty list when\n   * {@link https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection | Email Enumeration Protection}\n   * is enabled, irrespective of the number of authentication methods available for the given email.\n   *\n   * @remarks\n   * This is useful to differentiate methods of sign-in for the same provider, eg.\n   * {@link EmailAuthProvider} which has 2 methods of sign-in,\n   * {@link SignInMethod}.EMAIL_PASSWORD and\n   * {@link SignInMethod}.EMAIL_LINK.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param email - The user's email address.\n   *\n   * Deprecated. Migrating off of this method is recommended as a security best-practice.\n   * Learn more in the Identity Platform documentation for\n   * {@link https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection | Email Enumeration Protection}.\n   * @public\n   */\n  function _createAuthUri() {\n    _createAuthUri = _asyncToGenerator(function* (auth, request) {\n      return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:createAuthUri\" /* Endpoint.CREATE_AUTH_URI */, _addTidIfNecessary(auth, request));\n    });\n    return _createAuthUri.apply(this, arguments);\n  }\n  function fetchSignInMethodsForEmail(_x172, _x173) {\n    return _fetchSignInMethodsForEmail.apply(this, arguments);\n  }\n  /**\n   * Sends a verification email to a user.\n   *\n   * @remarks\n   * The verification process is completed by calling {@link applyActionCode}.\n   *\n   * @example\n   * ```javascript\n   * const actionCodeSettings = {\n   *   url: 'https://www.example.com/?email=user@example.com',\n   *   iOS: {\n   *      bundleId: 'com.example.ios'\n   *   },\n   *   android: {\n   *     packageName: 'com.example.android',\n   *     installApp: true,\n   *     minimumVersion: '12'\n   *   },\n   *   handleCodeInApp: true\n   * };\n   * await sendEmailVerification(user, actionCodeSettings);\n   * // Obtain code from the user.\n   * await applyActionCode(auth, code);\n   * ```\n   *\n   * @param user - The user.\n   * @param actionCodeSettings - The {@link ActionCodeSettings}.\n   *\n   * @public\n   */\n  function _fetchSignInMethodsForEmail() {\n    _fetchSignInMethodsForEmail = _asyncToGenerator(function* (auth, email) {\n      // createAuthUri returns an error if continue URI is not http or https.\n      // For environments like Cordova, Chrome extensions, native frameworks, file\n      // systems, etc, use http://localhost as continue URL.\n      var continueUri = _isHttpOrHttps() ? _getCurrentUrl() : 'http://localhost';\n      var request = {\n        identifier: email,\n        continueUri\n      };\n      var _yield$createAuthUri = yield createAuthUri(util.getModularInstance(auth), request),\n        signinMethods = _yield$createAuthUri.signinMethods;\n      return signinMethods || [];\n    });\n    return _fetchSignInMethodsForEmail.apply(this, arguments);\n  }\n  function sendEmailVerification(_x174, _x175) {\n    return _sendEmailVerification.apply(this, arguments);\n  }\n  /**\n   * Sends a verification email to a new email address.\n   *\n   * @remarks\n   * The user's email will be updated to the new one after being verified.\n   *\n   * If you have a custom email action handler, you can complete the verification process by calling\n   * {@link applyActionCode}.\n   *\n   * @example\n   * ```javascript\n   * const actionCodeSettings = {\n   *   url: 'https://www.example.com/?email=user@example.com',\n   *   iOS: {\n   *      bundleId: 'com.example.ios'\n   *   },\n   *   android: {\n   *     packageName: 'com.example.android',\n   *     installApp: true,\n   *     minimumVersion: '12'\n   *   },\n   *   handleCodeInApp: true\n   * };\n   * await verifyBeforeUpdateEmail(user, 'newemail@example.com', actionCodeSettings);\n   * // Obtain code from the user.\n   * await applyActionCode(auth, code);\n   * ```\n   *\n   * @param user - The user.\n   * @param newEmail - The new email address to be verified before update.\n   * @param actionCodeSettings - The {@link ActionCodeSettings}.\n   *\n   * @public\n   */\n  function _sendEmailVerification() {\n    _sendEmailVerification = _asyncToGenerator(function* (user, actionCodeSettings) {\n      var userInternal = util.getModularInstance(user);\n      var idToken = yield user.getIdToken();\n      var request = {\n        requestType: \"VERIFY_EMAIL\" /* ActionCodeOperation.VERIFY_EMAIL */,\n        idToken\n      };\n      if (actionCodeSettings) {\n        _setActionCodeSettingsOnRequest(userInternal.auth, request, actionCodeSettings);\n      }\n      var _yield$sendEmailVerif = yield sendEmailVerification$1(userInternal.auth, request),\n        email = _yield$sendEmailVerif.email;\n      if (email !== user.email) {\n        yield user.reload();\n      }\n    });\n    return _sendEmailVerification.apply(this, arguments);\n  }\n  function verifyBeforeUpdateEmail(_x176, _x177, _x178) {\n    return _verifyBeforeUpdateEmail.apply(this, arguments);\n  }\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _verifyBeforeUpdateEmail() {\n    _verifyBeforeUpdateEmail = _asyncToGenerator(function* (user, newEmail, actionCodeSettings) {\n      var userInternal = util.getModularInstance(user);\n      var idToken = yield user.getIdToken();\n      var request = {\n        requestType: \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */,\n        idToken,\n        newEmail\n      };\n      if (actionCodeSettings) {\n        _setActionCodeSettingsOnRequest(userInternal.auth, request, actionCodeSettings);\n      }\n      var _yield$verifyAndChang = yield verifyAndChangeEmail(userInternal.auth, request),\n        email = _yield$verifyAndChang.email;\n      if (email !== user.email) {\n        // If the local copy of the email on user is outdated, reload the\n        // user.\n        yield user.reload();\n      }\n    });\n    return _verifyBeforeUpdateEmail.apply(this, arguments);\n  }\n  function updateProfile$1(_x179, _x180) {\n    return _updateProfile$.apply(this, arguments);\n  }\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Updates a user's profile data.\n   *\n   * @param user - The user.\n   * @param profile - The profile's `displayName` and `photoURL` to update.\n   *\n   * @public\n   */\n  function _updateProfile$() {\n    _updateProfile$ = _asyncToGenerator(function* (auth, request) {\n      return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:update\" /* Endpoint.SET_ACCOUNT_INFO */, request);\n    });\n    return _updateProfile$.apply(this, arguments);\n  }\n  function updateProfile(_x181, _x182) {\n    return _updateProfile.apply(this, arguments);\n  }\n  /**\n   * Updates the user's email address.\n   *\n   * @remarks\n   * An email will be sent to the original email address (if it was set) that allows to revoke the\n   * email address change, in order to protect them from account hijacking.\n   *\n   * This method is not supported on any {@link User} signed in by {@link Auth} instances\n   * created with a {@link @firebase/app#FirebaseServerApp}.\n   *\n   * Important: this is a security sensitive operation that requires the user to have recently signed\n   * in. If this requirement isn't met, ask the user to authenticate again and then call\n   * {@link reauthenticateWithCredential}.\n   *\n   * @param user - The user.\n   * @param newEmail - The new email address.\n   *\n   * Throws \"auth/operation-not-allowed\" error when\n   * {@link https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection | Email Enumeration Protection}\n   * is enabled.\n   * Deprecated - Use {@link verifyBeforeUpdateEmail} instead.\n   *\n   * @public\n   */\n  function _updateProfile() {\n    _updateProfile = _asyncToGenerator(function* (user, _ref19) {\n      var displayName = _ref19.displayName,\n        photoUrl = _ref19.photoURL;\n      if (displayName === undefined && photoUrl === undefined) {\n        return;\n      }\n      var userInternal = util.getModularInstance(user);\n      var idToken = yield userInternal.getIdToken();\n      var profileRequest = {\n        idToken,\n        displayName,\n        photoUrl,\n        returnSecureToken: true\n      };\n      var response = yield _logoutIfInvalidated(userInternal, updateProfile$1(userInternal.auth, profileRequest));\n      userInternal.displayName = response.displayName || null;\n      userInternal.photoURL = response.photoUrl || null;\n      // Update the password provider as well\n      var passwordProvider = userInternal.providerData.find(_ref29 => {\n        var providerId = _ref29.providerId;\n        return providerId === \"password\";\n      } /* ProviderId.PASSWORD */);\n      if (passwordProvider) {\n        passwordProvider.displayName = userInternal.displayName;\n        passwordProvider.photoURL = userInternal.photoURL;\n      }\n      yield userInternal._updateTokensIfNecessary(response);\n    });\n    return _updateProfile.apply(this, arguments);\n  }\n  function updateEmail(user, newEmail) {\n    var userInternal = util.getModularInstance(user);\n    if (app._isFirebaseServerApp(userInternal.auth.app)) {\n      return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(userInternal.auth));\n    }\n    return updateEmailOrPassword(userInternal, newEmail, null);\n  }\n  /**\n   * Updates the user's password.\n   *\n   * @remarks\n   * Important: this is a security sensitive operation that requires the user to have recently signed\n   * in. If this requirement isn't met, ask the user to authenticate again and then call\n   * {@link reauthenticateWithCredential}.\n   *\n   * @param user - The user.\n   * @param newPassword - The new password.\n   *\n   * @public\n   */\n  function updatePassword(user, newPassword) {\n    return updateEmailOrPassword(util.getModularInstance(user), null, newPassword);\n  }\n  function updateEmailOrPassword(_x183, _x184, _x185) {\n    return _updateEmailOrPassword.apply(this, arguments);\n  }\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Parse the `AdditionalUserInfo` from the ID token response.\n   *\n   */\n  function _updateEmailOrPassword() {\n    _updateEmailOrPassword = _asyncToGenerator(function* (user, email, password) {\n      var auth = user.auth;\n      var idToken = yield user.getIdToken();\n      var request = {\n        idToken,\n        returnSecureToken: true\n      };\n      if (email) {\n        request.email = email;\n      }\n      if (password) {\n        request.password = password;\n      }\n      var response = yield _logoutIfInvalidated(user, updateEmailPassword(auth, request));\n      yield user._updateTokensIfNecessary(response, /* reload */true);\n    });\n    return _updateEmailOrPassword.apply(this, arguments);\n  }\n  function _fromIdTokenResponse(idTokenResponse) {\n    if (!idTokenResponse) {\n      return null;\n    }\n    var providerId = idTokenResponse.providerId;\n    var profile = idTokenResponse.rawUserInfo ? JSON.parse(idTokenResponse.rawUserInfo) : {};\n    var isNewUser = idTokenResponse.isNewUser || idTokenResponse.kind === \"identitytoolkit#SignupNewUserResponse\" /* IdTokenResponseKind.SignupNewUser */;\n    if (!providerId && idTokenResponse?.idToken) {\n      var signInProvider = _parseToken(idTokenResponse.idToken)?.firebase?.['sign_in_provider'];\n      if (signInProvider) {\n        var filteredProviderId = signInProvider !== \"anonymous\" /* ProviderId.ANONYMOUS */ && signInProvider !== \"custom\" /* ProviderId.CUSTOM */ ? signInProvider : null;\n        // Uses generic class in accordance with the legacy SDK.\n        return new GenericAdditionalUserInfo(isNewUser, filteredProviderId);\n      }\n    }\n    if (!providerId) {\n      return null;\n    }\n    switch (providerId) {\n      case \"facebook.com\" /* ProviderId.FACEBOOK */:\n        return new FacebookAdditionalUserInfo(isNewUser, profile);\n      case \"github.com\" /* ProviderId.GITHUB */:\n        return new GithubAdditionalUserInfo(isNewUser, profile);\n      case \"google.com\" /* ProviderId.GOOGLE */:\n        return new GoogleAdditionalUserInfo(isNewUser, profile);\n      case \"twitter.com\" /* ProviderId.TWITTER */:\n        return new TwitterAdditionalUserInfo(isNewUser, profile, idTokenResponse.screenName || null);\n      case \"custom\" /* ProviderId.CUSTOM */:\n      case \"anonymous\" /* ProviderId.ANONYMOUS */:\n        return new GenericAdditionalUserInfo(isNewUser, null);\n      default:\n        return new GenericAdditionalUserInfo(isNewUser, providerId, profile);\n    }\n  }\n  var GenericAdditionalUserInfo = /*#__PURE__*/_createClass(function GenericAdditionalUserInfo(isNewUser, providerId) {\n    var profile = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    _classCallCheck(this, GenericAdditionalUserInfo);\n    this.isNewUser = isNewUser;\n    this.providerId = providerId;\n    this.profile = profile;\n  });\n  var FederatedAdditionalUserInfoWithUsername = /*#__PURE__*/function (_GenericAdditionalUse) {\n    function FederatedAdditionalUserInfoWithUsername(isNewUser, providerId, profile, username) {\n      var _this12;\n      _classCallCheck(this, FederatedAdditionalUserInfoWithUsername);\n      _this12 = _callSuper(this, FederatedAdditionalUserInfoWithUsername, [isNewUser, providerId, profile]);\n      _this12.username = username;\n      return _this12;\n    }\n    _inherits(FederatedAdditionalUserInfoWithUsername, _GenericAdditionalUse);\n    return _createClass(FederatedAdditionalUserInfoWithUsername);\n  }(GenericAdditionalUserInfo);\n  var FacebookAdditionalUserInfo = /*#__PURE__*/function (_GenericAdditionalUse2) {\n    function FacebookAdditionalUserInfo(isNewUser, profile) {\n      _classCallCheck(this, FacebookAdditionalUserInfo);\n      return _callSuper(this, FacebookAdditionalUserInfo, [isNewUser, \"facebook.com\" /* ProviderId.FACEBOOK */, profile]);\n    }\n    _inherits(FacebookAdditionalUserInfo, _GenericAdditionalUse2);\n    return _createClass(FacebookAdditionalUserInfo);\n  }(GenericAdditionalUserInfo);\n  var GithubAdditionalUserInfo = /*#__PURE__*/function (_FederatedAdditionalU) {\n    function GithubAdditionalUserInfo(isNewUser, profile) {\n      _classCallCheck(this, GithubAdditionalUserInfo);\n      return _callSuper(this, GithubAdditionalUserInfo, [isNewUser, \"github.com\" /* ProviderId.GITHUB */, profile, typeof profile?.login === 'string' ? profile?.login : null]);\n    }\n    _inherits(GithubAdditionalUserInfo, _FederatedAdditionalU);\n    return _createClass(GithubAdditionalUserInfo);\n  }(FederatedAdditionalUserInfoWithUsername);\n  var GoogleAdditionalUserInfo = /*#__PURE__*/function (_GenericAdditionalUse3) {\n    function GoogleAdditionalUserInfo(isNewUser, profile) {\n      _classCallCheck(this, GoogleAdditionalUserInfo);\n      return _callSuper(this, GoogleAdditionalUserInfo, [isNewUser, \"google.com\" /* ProviderId.GOOGLE */, profile]);\n    }\n    _inherits(GoogleAdditionalUserInfo, _GenericAdditionalUse3);\n    return _createClass(GoogleAdditionalUserInfo);\n  }(GenericAdditionalUserInfo);\n  var TwitterAdditionalUserInfo = /*#__PURE__*/function (_FederatedAdditionalU2) {\n    function TwitterAdditionalUserInfo(isNewUser, profile, screenName) {\n      _classCallCheck(this, TwitterAdditionalUserInfo);\n      return _callSuper(this, TwitterAdditionalUserInfo, [isNewUser, \"twitter.com\" /* ProviderId.TWITTER */, profile, screenName]);\n    }\n    _inherits(TwitterAdditionalUserInfo, _FederatedAdditionalU2);\n    return _createClass(TwitterAdditionalUserInfo);\n  }(FederatedAdditionalUserInfoWithUsername);\n  /**\n   * Extracts provider specific {@link AdditionalUserInfo} for the given credential.\n   *\n   * @param userCredential - The user credential.\n   *\n   * @public\n   */\n  function getAdditionalUserInfo(userCredential) {\n    var user = userCredential.user,\n      _tokenResponse = userCredential._tokenResponse;\n    if (user.isAnonymous && !_tokenResponse) {\n      // Handle the special case where signInAnonymously() gets called twice.\n      // No network call is made so there's nothing to actually fill this in\n      return {\n        providerId: null,\n        isNewUser: false,\n        profile: null\n      };\n    }\n    return _fromIdTokenResponse(_tokenResponse);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  // Non-optional auth methods.\n  /**\n   * Changes the type of persistence on the {@link Auth} instance for the currently saved\n   * `Auth` session and applies this type of persistence for future sign-in requests, including\n   * sign-in with redirect requests.\n   *\n   * @remarks\n   * This makes it easy for a user signing in to specify whether their session should be\n   * remembered or not. It also makes it easier to never persist the `Auth` state for applications\n   * that are shared by other users or have sensitive data.\n   *\n   * This method does not work in a Node.js environment or with {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @example\n   * ```javascript\n   * setPersistence(auth, browserSessionPersistence);\n   * ```\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param persistence - The {@link Persistence} to use.\n   * @returns A `Promise` that resolves once the persistence change has completed\n   *\n   * @public\n   */\n  function setPersistence(auth, persistence) {\n    return util.getModularInstance(auth).setPersistence(persistence);\n  }\n  /**\n   * Loads the reCAPTCHA configuration into the `Auth` instance.\n   *\n   * @remarks\n   * This will load the reCAPTCHA config, which indicates whether the reCAPTCHA\n   * verification flow should be triggered for each auth provider, into the\n   * current Auth session.\n   *\n   * If initializeRecaptchaConfig() is not invoked, the auth flow will always start\n   * without reCAPTCHA verification. If the provider is configured to require reCAPTCHA\n   * verification, the SDK will transparently load the reCAPTCHA config and restart the\n   * auth flows.\n   *\n   * Thus, by calling this optional method, you will reduce the latency of future auth flows.\n   * Loading the reCAPTCHA config early will also enhance the signal collected by reCAPTCHA.\n   *\n   * This method does not work in a Node.js environment.\n   *\n   * @example\n   * ```javascript\n   * initializeRecaptchaConfig(auth);\n   * ```\n   *\n   * @param auth - The {@link Auth} instance.\n   *\n   * @public\n   */\n  function initializeRecaptchaConfig(auth) {\n    return _initializeRecaptchaConfig(auth);\n  }\n  /**\n   * Validates the password against the password policy configured for the project or tenant.\n   *\n   * @remarks\n   * If no tenant ID is set on the `Auth` instance, then this method will use the password\n   * policy configured for the project. Otherwise, this method will use the policy configured\n   * for the tenant. If a password policy has not been configured, then the default policy\n   * configured for all projects will be used.\n   *\n   * If an auth flow fails because a submitted password does not meet the password policy\n   * requirements and this method has previously been called, then this method will use the\n   * most recent policy available when called again.\n   *\n   * @example\n   * ```javascript\n   * validatePassword(auth, 'some-password');\n   * ```\n   *\n   * @param auth The {@link Auth} instance.\n   * @param password The password to validate.\n   *\n   * @public\n   */\n  function validatePassword(_x186, _x187) {\n    return _validatePassword2.apply(this, arguments);\n  }\n  /**\n   * Adds an observer for changes to the signed-in user's ID token.\n   *\n   * @remarks\n   * This includes sign-in, sign-out, and token refresh events.\n   * This will not be triggered automatically upon ID token expiration. Use {@link User.getIdToken} to refresh the ID token.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param nextOrObserver - callback triggered on change.\n   * @param error - Deprecated. This callback is never triggered. Errors\n   * on signing in/out can be caught in promises returned from\n   * sign-in/sign-out functions.\n   * @param completed - Deprecated. This callback is never triggered.\n   *\n   * @public\n   */\n  function _validatePassword2() {\n    _validatePassword2 = _asyncToGenerator(function* (auth, password) {\n      var authInternal = _castAuth(auth);\n      return authInternal.validatePassword(password);\n    });\n    return _validatePassword2.apply(this, arguments);\n  }\n  function onIdTokenChanged(auth, nextOrObserver, error, completed) {\n    return util.getModularInstance(auth).onIdTokenChanged(nextOrObserver, error, completed);\n  }\n  /**\n   * Adds a blocking callback that runs before an auth state change\n   * sets a new user.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param callback - callback triggered before new user value is set.\n   *   If this throws, it blocks the user from being set.\n   * @param onAbort - callback triggered if a later `beforeAuthStateChanged()`\n   *   callback throws, allowing you to undo any side effects.\n   */\n  function beforeAuthStateChanged(auth, callback, onAbort) {\n    return util.getModularInstance(auth).beforeAuthStateChanged(callback, onAbort);\n  }\n  /**\n   * Adds an observer for changes to the user's sign-in state.\n   *\n   * @remarks\n   * To keep the old behavior, see {@link onIdTokenChanged}.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param nextOrObserver - callback triggered on change.\n   * @param error - Deprecated. This callback is never triggered. Errors\n   * on signing in/out can be caught in promises returned from\n   * sign-in/sign-out functions.\n   * @param completed - Deprecated. This callback is never triggered.\n   *\n   * @public\n   */\n  function onAuthStateChanged(auth, nextOrObserver, error, completed) {\n    return util.getModularInstance(auth).onAuthStateChanged(nextOrObserver, error, completed);\n  }\n  /**\n   * Sets the current language to the default device/browser preference.\n   *\n   * @param auth - The {@link Auth} instance.\n   *\n   * @public\n   */\n  function useDeviceLanguage(auth) {\n    util.getModularInstance(auth).useDeviceLanguage();\n  }\n  /**\n   * Asynchronously sets the provided user as {@link Auth.currentUser} on the\n   * {@link Auth} instance.\n   *\n   * @remarks\n   * A new instance copy of the user provided will be made and set as currentUser.\n   *\n   * This will trigger {@link onAuthStateChanged} and {@link onIdTokenChanged} listeners\n   * like other sign in methods.\n   *\n   * The operation fails with an error if the user to be updated belongs to a different Firebase\n   * project.\n   *\n   * This method is not supported by {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param user - The new {@link User}.\n   *\n   * @public\n   */\n  function updateCurrentUser(auth, user) {\n    return util.getModularInstance(auth).updateCurrentUser(user);\n  }\n  /**\n   * Signs out the current user.\n   *\n   * @remarks\n   * This method is not supported by {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @param auth - The {@link Auth} instance.\n   *\n   * @public\n   */\n  function signOut(auth) {\n    return util.getModularInstance(auth).signOut();\n  }\n  /**\n   * Revokes the given access token. Currently only supports Apple OAuth access tokens.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param token - The Apple OAuth access token.\n   *\n   * @public\n   */\n  function revokeAccessToken(auth, token) {\n    var authInternal = _castAuth(auth);\n    return authInternal.revokeAccessToken(token);\n  }\n  /**\n   * Deletes and signs out the user.\n   *\n   * @remarks\n   * Important: this is a security-sensitive operation that requires the user to have recently\n   * signed in. If this requirement isn't met, ask the user to authenticate again and then call\n   * {@link reauthenticateWithCredential}.\n   *\n   * @param user - The user.\n   *\n   * @public\n   */\n  function deleteUser(_x188) {\n    return _deleteUser.apply(this, arguments);\n  }\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _deleteUser() {\n    _deleteUser = _asyncToGenerator(function* (user) {\n      return util.getModularInstance(user).delete();\n    });\n    return _deleteUser.apply(this, arguments);\n  }\n  var MultiFactorSessionImpl = /*#__PURE__*/function () {\n    function MultiFactorSessionImpl(type, credential, user) {\n      _classCallCheck(this, MultiFactorSessionImpl);\n      this.type = type;\n      this.credential = credential;\n      this.user = user;\n    }\n    return _createClass(MultiFactorSessionImpl, [{\n      key: \"toJSON\",\n      value: function toJSON() {\n        var key = this.type === \"enroll\" /* MultiFactorSessionType.ENROLL */ ? 'idToken' : 'pendingCredential';\n        return {\n          multiFactorSession: {\n            [key]: this.credential\n          }\n        };\n      }\n    }], [{\n      key: \"_fromIdtoken\",\n      value: function _fromIdtoken(idToken, user) {\n        return new MultiFactorSessionImpl(\"enroll\" /* MultiFactorSessionType.ENROLL */, idToken, user);\n      }\n    }, {\n      key: \"_fromMfaPendingCredential\",\n      value: function _fromMfaPendingCredential(mfaPendingCredential) {\n        return new MultiFactorSessionImpl(\"signin\" /* MultiFactorSessionType.SIGN_IN */, mfaPendingCredential);\n      }\n    }, {\n      key: \"fromJSON\",\n      value: function fromJSON(obj) {\n        if (obj?.multiFactorSession) {\n          if (obj.multiFactorSession?.pendingCredential) {\n            return MultiFactorSessionImpl._fromMfaPendingCredential(obj.multiFactorSession.pendingCredential);\n          } else if (obj.multiFactorSession?.idToken) {\n            return MultiFactorSessionImpl._fromIdtoken(obj.multiFactorSession.idToken);\n          }\n        }\n        return null;\n      }\n    }]);\n  }();\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  var MultiFactorResolverImpl = /*#__PURE__*/function () {\n    function MultiFactorResolverImpl(session, hints, signInResolver) {\n      _classCallCheck(this, MultiFactorResolverImpl);\n      this.session = session;\n      this.hints = hints;\n      this.signInResolver = signInResolver;\n    }\n    /** @internal */\n    return _createClass(MultiFactorResolverImpl, [{\n      key: \"resolveSignIn\",\n      value: function () {\n        var _resolveSignIn = _asyncToGenerator(function* (assertionExtern) {\n          var assertion = assertionExtern;\n          return this.signInResolver(assertion);\n        });\n        function resolveSignIn(_x189) {\n          return _resolveSignIn.apply(this, arguments);\n        }\n        return resolveSignIn;\n      }()\n    }], [{\n      key: \"_fromError\",\n      value: function _fromError(authExtern, error) {\n        var auth = _castAuth(authExtern);\n        var serverResponse = error.customData._serverResponse;\n        var hints = (serverResponse.mfaInfo || []).map(enrollment => MultiFactorInfoImpl._fromServerResponse(auth, enrollment));\n        _assert(serverResponse.mfaPendingCredential, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        var session = MultiFactorSessionImpl._fromMfaPendingCredential(serverResponse.mfaPendingCredential);\n        return new MultiFactorResolverImpl(session, hints, /*#__PURE__*/function () {\n          var _ref20 = _asyncToGenerator(function* (assertion) {\n            var mfaResponse = yield assertion._process(auth, session);\n            // Clear out the unneeded fields from the old login response\n            delete serverResponse.mfaInfo;\n            delete serverResponse.mfaPendingCredential;\n            // Use in the new token & refresh token in the old response\n            var idTokenResponse = {\n              ...serverResponse,\n              idToken: mfaResponse.idToken,\n              refreshToken: mfaResponse.refreshToken\n            };\n            // TODO: we should collapse this switch statement into UserCredentialImpl._forOperation and have it support the SIGN_IN case\n            switch (error.operationType) {\n              case \"signIn\" /* OperationType.SIGN_IN */:\n                var userCredential = yield UserCredentialImpl._fromIdTokenResponse(auth, error.operationType, idTokenResponse);\n                yield auth._updateCurrentUser(userCredential.user);\n                return userCredential;\n              case \"reauthenticate\" /* OperationType.REAUTHENTICATE */:\n                _assert(error.user, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n                return UserCredentialImpl._forOperation(error.user, error.operationType, idTokenResponse);\n              default:\n                _fail(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n            }\n          });\n          return function (_x190) {\n            return _ref20.apply(this, arguments);\n          };\n        }());\n      }\n    }]);\n  }();\n  /**\n   * Provides a {@link MultiFactorResolver} suitable for completion of a\n   * multi-factor flow.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param error - The {@link MultiFactorError} raised during a sign-in, or\n   * reauthentication operation.\n   *\n   * @public\n   */\n  function getMultiFactorResolver(auth, error) {\n    var authModular = util.getModularInstance(auth);\n    var errorInternal = error;\n    _assert(error.customData.operationType, authModular, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n    _assert(errorInternal.customData._serverResponse?.mfaPendingCredential, authModular, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n    return MultiFactorResolverImpl._fromError(authModular, errorInternal);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function startEnrollPhoneMfa(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaEnrollment:start\" /* Endpoint.START_MFA_ENROLLMENT */, _addTidIfNecessary(auth, request));\n  }\n  function finalizeEnrollPhoneMfa(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaEnrollment:finalize\" /* Endpoint.FINALIZE_MFA_ENROLLMENT */, _addTidIfNecessary(auth, request));\n  }\n  function startEnrollTotpMfa(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaEnrollment:start\" /* Endpoint.START_MFA_ENROLLMENT */, _addTidIfNecessary(auth, request));\n  }\n  function finalizeEnrollTotpMfa(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaEnrollment:finalize\" /* Endpoint.FINALIZE_MFA_ENROLLMENT */, _addTidIfNecessary(auth, request));\n  }\n  function withdrawMfa(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaEnrollment:withdraw\" /* Endpoint.WITHDRAW_MFA */, _addTidIfNecessary(auth, request));\n  }\n  var MultiFactorUserImpl = /*#__PURE__*/function () {\n    function MultiFactorUserImpl(user) {\n      _classCallCheck(this, MultiFactorUserImpl);\n      this.user = user;\n      this.enrolledFactors = [];\n      user._onReload(userInfo => {\n        if (userInfo.mfaInfo) {\n          this.enrolledFactors = userInfo.mfaInfo.map(enrollment => MultiFactorInfoImpl._fromServerResponse(user.auth, enrollment));\n        }\n      });\n    }\n    return _createClass(MultiFactorUserImpl, [{\n      key: \"getSession\",\n      value: function () {\n        var _getSession = _asyncToGenerator(function* () {\n          return MultiFactorSessionImpl._fromIdtoken(yield this.user.getIdToken(), this.user);\n        });\n        function getSession() {\n          return _getSession.apply(this, arguments);\n        }\n        return getSession;\n      }()\n    }, {\n      key: \"enroll\",\n      value: function () {\n        var _enroll = _asyncToGenerator(function* (assertionExtern, displayName) {\n          var assertion = assertionExtern;\n          var session = yield this.getSession();\n          var finalizeMfaResponse = yield _logoutIfInvalidated(this.user, assertion._process(this.user.auth, session, displayName));\n          // New tokens will be issued after enrollment of the new second factors.\n          // They need to be updated on the user.\n          yield this.user._updateTokensIfNecessary(finalizeMfaResponse);\n          // The user needs to be reloaded to get the new multi-factor information\n          // from server. USER_RELOADED event will be triggered and `enrolledFactors`\n          // will be updated.\n          return this.user.reload();\n        });\n        function enroll(_x191, _x192) {\n          return _enroll.apply(this, arguments);\n        }\n        return enroll;\n      }()\n    }, {\n      key: \"unenroll\",\n      value: function () {\n        var _unenroll = _asyncToGenerator(function* (infoOrUid) {\n          var mfaEnrollmentId = typeof infoOrUid === 'string' ? infoOrUid : infoOrUid.uid;\n          var idToken = yield this.user.getIdToken();\n          try {\n            var idTokenResponse = yield _logoutIfInvalidated(this.user, withdrawMfa(this.user.auth, {\n              idToken,\n              mfaEnrollmentId\n            }));\n            // Remove the second factor from the user's list.\n            this.enrolledFactors = this.enrolledFactors.filter(_ref21 => {\n              var uid = _ref21.uid;\n              return uid !== mfaEnrollmentId;\n            });\n            // Depending on whether the backend decided to revoke the user's session,\n            // the tokenResponse may be empty. If the tokens were not updated (and they\n            // are now invalid), reloading the user will discover this and invalidate\n            // the user's state accordingly.\n            yield this.user._updateTokensIfNecessary(idTokenResponse);\n            yield this.user.reload();\n          } catch (e) {\n            throw e;\n          }\n        });\n        function unenroll(_x193) {\n          return _unenroll.apply(this, arguments);\n        }\n        return unenroll;\n      }()\n    }], [{\n      key: \"_fromUser\",\n      value: function _fromUser(user) {\n        return new MultiFactorUserImpl(user);\n      }\n    }]);\n  }();\n  var multiFactorUserCache = new WeakMap();\n  /**\n   * The {@link MultiFactorUser} corresponding to the user.\n   *\n   * @remarks\n   * This is used to access all multi-factor properties and operations related to the user.\n   *\n   * @param user - The user.\n   *\n   * @public\n   */\n  function multiFactor(user) {\n    var userModular = util.getModularInstance(user);\n    if (!multiFactorUserCache.has(userModular)) {\n      multiFactorUserCache.set(userModular, MultiFactorUserImpl._fromUser(userModular));\n    }\n    return multiFactorUserCache.get(userModular);\n  }\n  var name = \"@firebase/auth\";\n  var version = \"1.11.0\";\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  var AuthInterop = /*#__PURE__*/function () {\n    function AuthInterop(auth) {\n      _classCallCheck(this, AuthInterop);\n      this.auth = auth;\n      this.internalListeners = new Map();\n    }\n    return _createClass(AuthInterop, [{\n      key: \"getUid\",\n      value: function getUid() {\n        this.assertAuthConfigured();\n        return this.auth.currentUser?.uid || null;\n      }\n    }, {\n      key: \"getToken\",\n      value: function () {\n        var _getToken2 = _asyncToGenerator(function* (forceRefresh) {\n          this.assertAuthConfigured();\n          yield this.auth._initializationPromise;\n          if (!this.auth.currentUser) {\n            return null;\n          }\n          var accessToken = yield this.auth.currentUser.getIdToken(forceRefresh);\n          return {\n            accessToken\n          };\n        });\n        function getToken(_x194) {\n          return _getToken2.apply(this, arguments);\n        }\n        return getToken;\n      }()\n    }, {\n      key: \"addAuthTokenListener\",\n      value: function addAuthTokenListener(listener) {\n        this.assertAuthConfigured();\n        if (this.internalListeners.has(listener)) {\n          return;\n        }\n        var unsubscribe = this.auth.onIdTokenChanged(user => {\n          listener(user?.stsTokenManager.accessToken || null);\n        });\n        this.internalListeners.set(listener, unsubscribe);\n        this.updateProactiveRefresh();\n      }\n    }, {\n      key: \"removeAuthTokenListener\",\n      value: function removeAuthTokenListener(listener) {\n        this.assertAuthConfigured();\n        var unsubscribe = this.internalListeners.get(listener);\n        if (!unsubscribe) {\n          return;\n        }\n        this.internalListeners.delete(listener);\n        unsubscribe();\n        this.updateProactiveRefresh();\n      }\n    }, {\n      key: \"assertAuthConfigured\",\n      value: function assertAuthConfigured() {\n        _assert(this.auth._initializationPromise, \"dependent-sdk-initialized-before-auth\" /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */);\n      }\n    }, {\n      key: \"updateProactiveRefresh\",\n      value: function updateProactiveRefresh() {\n        if (this.internalListeners.size > 0) {\n          this.auth._startProactiveRefresh();\n        } else {\n          this.auth._stopProactiveRefresh();\n        }\n      }\n    }]);\n  }();\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function getVersionForPlatform(clientPlatform) {\n    switch (clientPlatform) {\n      case \"Node\" /* ClientPlatform.NODE */:\n        return 'node';\n      case \"ReactNative\" /* ClientPlatform.REACT_NATIVE */:\n        return 'rn';\n      case \"Worker\" /* ClientPlatform.WORKER */:\n        return 'webworker';\n      case \"Cordova\" /* ClientPlatform.CORDOVA */:\n        return 'cordova';\n      case \"WebExtension\" /* ClientPlatform.WEB_EXTENSION */:\n        return 'web-extension';\n      default:\n        return undefined;\n    }\n  }\n  /** @internal */\n  function registerAuth(clientPlatform) {\n    app._registerComponent(new component.Component(\"auth\" /* _ComponentName.AUTH */, (container, _ref22) => {\n      var deps = _ref22.options;\n      var app = container.getProvider('app').getImmediate();\n      var heartbeatServiceProvider = container.getProvider('heartbeat');\n      var appCheckServiceProvider = container.getProvider('app-check-internal');\n      var _app$options = app.options,\n        apiKey = _app$options.apiKey,\n        authDomain = _app$options.authDomain;\n      _assert(apiKey && !apiKey.includes(':'), \"invalid-api-key\" /* AuthErrorCode.INVALID_API_KEY */, {\n        appName: app.name\n      });\n      var config = {\n        apiKey,\n        authDomain,\n        clientPlatform,\n        apiHost: \"identitytoolkit.googleapis.com\" /* DefaultConfig.API_HOST */,\n        tokenApiHost: \"securetoken.googleapis.com\" /* DefaultConfig.TOKEN_API_HOST */,\n        apiScheme: \"https\" /* DefaultConfig.API_SCHEME */,\n        sdkClientVersion: _getClientVersion(clientPlatform)\n      };\n      var authInstance = new AuthImpl(app, heartbeatServiceProvider, appCheckServiceProvider, config);\n      _initializeAuthInstance(authInstance, deps);\n      return authInstance;\n    }, \"PUBLIC\" /* ComponentType.PUBLIC */)\n    /**\n     * Auth can only be initialized by explicitly calling getAuth() or initializeAuth()\n     * For why we do this, See go/firebase-next-auth-init\n     */.setInstantiationMode(\"EXPLICIT\" /* InstantiationMode.EXPLICIT */)\n    /**\n     * Because all firebase products that depend on auth depend on auth-internal directly,\n     * we need to initialize auth-internal after auth is initialized to make it available to other firebase products.\n     */.setInstanceCreatedCallback((container, _instanceIdentifier, _instance) => {\n      var authInternalProvider = container.getProvider(\"auth-internal\" /* _ComponentName.AUTH_INTERNAL */);\n      authInternalProvider.initialize();\n    }));\n    app._registerComponent(new component.Component(\"auth-internal\" /* _ComponentName.AUTH_INTERNAL */, container => {\n      var auth = _castAuth(container.getProvider(\"auth\" /* _ComponentName.AUTH */).getImmediate());\n      return (auth => new AuthInterop(auth))(auth);\n    }, \"PRIVATE\" /* ComponentType.PRIVATE */).setInstantiationMode(\"EXPLICIT\" /* InstantiationMode.EXPLICIT */));\n    app.registerVersion(name, version, getVersionForPlatform(clientPlatform));\n    // BUILD_TARGET will be replaced by values like esm, cjs, etc during the compilation\n    app.registerVersion(name, version, 'cjs2020');\n  }\n\n  /**\n   * @license\n   * Copyright 2021 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * An enum of factors that may be used for multifactor authentication.\n   *\n   * @public\n   */\n  var FactorId = {\n    /** Phone as second factor */\n    PHONE: 'phone',\n    TOTP: 'totp'\n  };\n  /**\n   * Enumeration of supported providers.\n   *\n   * @public\n   */\n  var ProviderId = {\n    /** Facebook provider ID */\n    FACEBOOK: 'facebook.com',\n    /** GitHub provider ID */\n    GITHUB: 'github.com',\n    /** Google provider ID */\n    GOOGLE: 'google.com',\n    /** Password provider */\n    PASSWORD: 'password',\n    /** Phone provider */\n    PHONE: 'phone',\n    /** Twitter provider ID */\n    TWITTER: 'twitter.com'\n  };\n  /**\n   * Enumeration of supported sign-in methods.\n   *\n   * @public\n   */\n  var SignInMethod = {\n    /** Email link sign in method */\n    EMAIL_LINK: 'emailLink',\n    /** Email/password sign in method */\n    EMAIL_PASSWORD: 'password',\n    /** Facebook sign in method */\n    FACEBOOK: 'facebook.com',\n    /** GitHub sign in method */\n    GITHUB: 'github.com',\n    /** Google sign in method */\n    GOOGLE: 'google.com',\n    /** Phone sign in method */\n    PHONE: 'phone',\n    /** Twitter sign in method */\n    TWITTER: 'twitter.com'\n  };\n  /**\n   * Enumeration of supported operation types.\n   *\n   * @public\n   */\n  var OperationType = {\n    /** Operation involving linking an additional provider to an already signed-in user. */\n    LINK: 'link',\n    /** Operation involving using a provider to reauthenticate an already signed-in user. */\n    REAUTHENTICATE: 'reauthenticate',\n    /** Operation involving signing in a user. */\n    SIGN_IN: 'signIn'\n  };\n  /**\n   * An enumeration of the possible email action types.\n   *\n   * @public\n   */\n  var ActionCodeOperation = {\n    /** The email link sign-in action. */\n    EMAIL_SIGNIN: 'EMAIL_SIGNIN',\n    /** The password reset action. */\n    PASSWORD_RESET: 'PASSWORD_RESET',\n    /** The email revocation action. */\n    RECOVER_EMAIL: 'RECOVER_EMAIL',\n    /** The revert second factor addition email action. */\n    REVERT_SECOND_FACTOR_ADDITION: 'REVERT_SECOND_FACTOR_ADDITION',\n    /** The revert second factor addition email action. */\n    VERIFY_AND_CHANGE_EMAIL: 'VERIFY_AND_CHANGE_EMAIL',\n    /** The email verification action. */\n    VERIFY_EMAIL: 'VERIFY_EMAIL'\n  };\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function startSignInPhoneMfa(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaSignIn:start\" /* Endpoint.START_MFA_SIGN_IN */, _addTidIfNecessary(auth, request));\n  }\n  function finalizeSignInPhoneMfa(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaSignIn:finalize\" /* Endpoint.FINALIZE_MFA_SIGN_IN */, _addTidIfNecessary(auth, request));\n  }\n  function finalizeSignInTotpMfa(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaSignIn:finalize\" /* Endpoint.FINALIZE_MFA_SIGN_IN */, _addTidIfNecessary(auth, request));\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Lazy accessor for window, since the compat layer won't tree shake this out,\n   * we need to make sure not to mess with window unless we have to\n   */\n  function _window() {\n    return window;\n  }\n  function _setWindowLocation(url) {\n    _window().location.href = url;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _isWorker() {\n    return typeof _window()['WorkerGlobalScope'] !== 'undefined' && typeof _window()['importScripts'] === 'function';\n  }\n  function _getActiveServiceWorker() {\n    return _getActiveServiceWorker2.apply(this, arguments);\n  }\n  function _getActiveServiceWorker2() {\n    _getActiveServiceWorker2 = _asyncToGenerator(function* () {\n      if (!navigator?.serviceWorker) {\n        return null;\n      }\n      try {\n        var registration = yield navigator.serviceWorker.ready;\n        return registration.active;\n      } catch {\n        return null;\n      }\n    });\n    return _getActiveServiceWorker2.apply(this, arguments);\n  }\n  function _getServiceWorkerController() {\n    return navigator?.serviceWorker?.controller || null;\n  }\n  function _getWorkerGlobalScope() {\n    return _isWorker() ? self : null;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  // ReCaptcha will load using the same callback, so the callback function needs\n  // to be kept around\n  var _JSLOAD_CALLBACK = _generateCallbackName('rcb');\n  var NETWORK_TIMEOUT_DELAY = new Delay(30000, 60000);\n  /**\n   * Loader for the GReCaptcha library. There should only ever be one of this.\n   */\n  var ReCaptchaLoaderImpl = /*#__PURE__*/function () {\n    function ReCaptchaLoaderImpl() {\n      _classCallCheck(this, ReCaptchaLoaderImpl);\n      this.hostLanguage = '';\n      this.counter = 0;\n      /**\n       * Check for `render()` method. `window.grecaptcha` will exist if the Enterprise\n       * version of the ReCAPTCHA script was loaded by someone else (e.g. App Check) but\n       * `window.grecaptcha.render()` will not. Another load will add it.\n       */\n      this.librarySeparatelyLoaded = !!_window().grecaptcha?.render;\n    }\n    return _createClass(ReCaptchaLoaderImpl, [{\n      key: \"load\",\n      value: function load(auth) {\n        var hl = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n        _assert(isHostLanguageValid(hl), auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n        if (this.shouldResolveImmediately(hl) && isV2(_window().grecaptcha)) {\n          return Promise.resolve(_window().grecaptcha);\n        }\n        return new Promise((resolve, reject) => {\n          var networkTimeout = _window().setTimeout(() => {\n            reject(_createError(auth, \"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */));\n          }, NETWORK_TIMEOUT_DELAY.get());\n          _window()[_JSLOAD_CALLBACK] = () => {\n            _window().clearTimeout(networkTimeout);\n            delete _window()[_JSLOAD_CALLBACK];\n            var recaptcha = _window().grecaptcha;\n            if (!recaptcha || !isV2(recaptcha)) {\n              reject(_createError(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */));\n              return;\n            }\n            // Wrap the recaptcha render function so that we know if the developer has\n            // called it separately\n            var render = recaptcha.render;\n            recaptcha.render = (container, params) => {\n              var widgetId = render(container, params);\n              this.counter++;\n              return widgetId;\n            };\n            this.hostLanguage = hl;\n            resolve(recaptcha);\n          };\n          var url = `${_recaptchaV2ScriptUrl()}?${util.querystring({\n            onload: _JSLOAD_CALLBACK,\n            render: 'explicit',\n            hl\n          })}`;\n          _loadJS(url).catch(() => {\n            clearTimeout(networkTimeout);\n            reject(_createError(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */));\n          });\n        });\n      }\n    }, {\n      key: \"clearedOneInstance\",\n      value: function clearedOneInstance() {\n        this.counter--;\n      }\n    }, {\n      key: \"shouldResolveImmediately\",\n      value: function shouldResolveImmediately(hl) {\n        // We can resolve immediately if:\n        //   • grecaptcha is already defined AND (\n        //     1. the requested language codes are the same OR\n        //     2. there exists already a ReCaptcha on the page\n        //     3. the library was already loaded by the app\n        // In cases (2) and (3), we _can't_ reload as it would break the recaptchas\n        // that are already in the page\n        return !!_window().grecaptcha?.render && (hl === this.hostLanguage || this.counter > 0 || this.librarySeparatelyLoaded);\n      }\n    }]);\n  }();\n  function isHostLanguageValid(hl) {\n    return hl.length <= 6 && /^\\s*[a-zA-Z0-9\\-]*\\s*$/.test(hl);\n  }\n  var MockReCaptchaLoaderImpl = /*#__PURE__*/function () {\n    function MockReCaptchaLoaderImpl() {\n      _classCallCheck(this, MockReCaptchaLoaderImpl);\n    }\n    return _createClass(MockReCaptchaLoaderImpl, [{\n      key: \"load\",\n      value: function () {\n        var _load = _asyncToGenerator(function* (auth) {\n          return new MockReCaptcha(auth);\n        });\n        function load(_x195) {\n          return _load.apply(this, arguments);\n        }\n        return load;\n      }()\n    }, {\n      key: \"clearedOneInstance\",\n      value: function clearedOneInstance() {}\n    }]);\n  }();\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  var RECAPTCHA_VERIFIER_TYPE = 'recaptcha';\n  var DEFAULT_PARAMS = {\n    theme: 'light',\n    type: 'image'\n  };\n  /**\n   * An {@link https://www.google.com/recaptcha/ | reCAPTCHA}-based application verifier.\n   *\n   * @remarks\n   * `RecaptchaVerifier` does not work in a Node.js environment.\n   *\n   * @public\n   */\n  var RecaptchaVerifier = /*#__PURE__*/function () {\n    /**\n     * @param authExtern - The corresponding Firebase {@link Auth} instance.\n     *\n     * @param containerOrId - The reCAPTCHA container parameter.\n     *\n     * @remarks\n     * This has different meaning depending on whether the reCAPTCHA is hidden or visible. For a\n     * visible reCAPTCHA the container must be empty. If a string is used, it has to correspond to\n     * an element ID. The corresponding element must also must be in the DOM at the time of\n     * initialization.\n     *\n     * @param parameters - The optional reCAPTCHA parameters.\n     *\n     * @remarks\n     * Check the reCAPTCHA docs for a comprehensive list. All parameters are accepted except for\n     * the sitekey. Firebase Auth backend provisions a reCAPTCHA for each project and will\n     * configure this upon rendering. For an invisible reCAPTCHA, a size key must have the value\n     * 'invisible'.\n     */\n    function RecaptchaVerifier(authExtern, containerOrId) {\n      var parameters = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n        ...DEFAULT_PARAMS\n      };\n      _classCallCheck(this, RecaptchaVerifier);\n      this.parameters = parameters;\n      /**\n       * The application verifier type.\n       *\n       * @remarks\n       * For a reCAPTCHA verifier, this is 'recaptcha'.\n       */\n      this.type = RECAPTCHA_VERIFIER_TYPE;\n      this.destroyed = false;\n      this.widgetId = null;\n      this.tokenChangeListeners = new Set();\n      this.renderPromise = null;\n      this.recaptcha = null;\n      this.auth = _castAuth(authExtern);\n      this.isInvisible = this.parameters.size === 'invisible';\n      _assert(typeof document !== 'undefined', this.auth, \"operation-not-supported-in-this-environment\" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */);\n      var container = typeof containerOrId === 'string' ? document.getElementById(containerOrId) : containerOrId;\n      _assert(container, this.auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      this.container = container;\n      this.parameters.callback = this.makeTokenCallback(this.parameters.callback);\n      this._recaptchaLoader = this.auth.settings.appVerificationDisabledForTesting ? new MockReCaptchaLoaderImpl() : new ReCaptchaLoaderImpl();\n      this.validateStartingState();\n      // TODO: Figure out if sdk version is needed\n    }\n    /**\n     * Waits for the user to solve the reCAPTCHA and resolves with the reCAPTCHA token.\n     *\n     * @returns A Promise for the reCAPTCHA token.\n     */\n    return _createClass(RecaptchaVerifier, [{\n      key: \"verify\",\n      value: (function () {\n        var _verify2 = _asyncToGenerator(function* () {\n          this.assertNotDestroyed();\n          var id = yield this.render();\n          var recaptcha = this.getAssertedRecaptcha();\n          var response = recaptcha.getResponse(id);\n          if (response) {\n            return response;\n          }\n          return new Promise(resolve => {\n            var tokenChange = token => {\n              if (!token) {\n                return; // Ignore token expirations.\n              }\n              this.tokenChangeListeners.delete(tokenChange);\n              resolve(token);\n            };\n            this.tokenChangeListeners.add(tokenChange);\n            if (this.isInvisible) {\n              recaptcha.execute(id);\n            }\n          });\n        });\n        function verify() {\n          return _verify2.apply(this, arguments);\n        }\n        return verify;\n      }()\n      /**\n       * Renders the reCAPTCHA widget on the page.\n       *\n       * @returns A Promise that resolves with the reCAPTCHA widget ID.\n       */\n      )\n    }, {\n      key: \"render\",\n      value: function render() {\n        try {\n          this.assertNotDestroyed();\n        } catch (e) {\n          // This method returns a promise. Since it's not async (we want to return the\n          // _same_ promise if rendering is still occurring), the API surface should\n          // reject with the error rather than just throw\n          return Promise.reject(e);\n        }\n        if (this.renderPromise) {\n          return this.renderPromise;\n        }\n        this.renderPromise = this.makeRenderPromise().catch(e => {\n          this.renderPromise = null;\n          throw e;\n        });\n        return this.renderPromise;\n      }\n      /** @internal */\n    }, {\n      key: \"_reset\",\n      value: function _reset() {\n        this.assertNotDestroyed();\n        if (this.widgetId !== null) {\n          this.getAssertedRecaptcha().reset(this.widgetId);\n        }\n      }\n      /**\n       * Clears the reCAPTCHA widget from the page and destroys the instance.\n       */\n    }, {\n      key: \"clear\",\n      value: function clear() {\n        this.assertNotDestroyed();\n        this.destroyed = true;\n        this._recaptchaLoader.clearedOneInstance();\n        if (!this.isInvisible) {\n          this.container.childNodes.forEach(node => {\n            this.container.removeChild(node);\n          });\n        }\n      }\n    }, {\n      key: \"validateStartingState\",\n      value: function validateStartingState() {\n        _assert(!this.parameters.sitekey, this.auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n        _assert(this.isInvisible || !this.container.hasChildNodes(), this.auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n        _assert(typeof document !== 'undefined', this.auth, \"operation-not-supported-in-this-environment\" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */);\n      }\n    }, {\n      key: \"makeTokenCallback\",\n      value: function makeTokenCallback(existing) {\n        return token => {\n          this.tokenChangeListeners.forEach(listener => listener(token));\n          if (typeof existing === 'function') {\n            existing(token);\n          } else if (typeof existing === 'string') {\n            var globalFunc = _window()[existing];\n            if (typeof globalFunc === 'function') {\n              globalFunc(token);\n            }\n          }\n        };\n      }\n    }, {\n      key: \"assertNotDestroyed\",\n      value: function assertNotDestroyed() {\n        _assert(!this.destroyed, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      }\n    }, {\n      key: \"makeRenderPromise\",\n      value: function () {\n        var _makeRenderPromise = _asyncToGenerator(function* () {\n          yield this.init();\n          if (!this.widgetId) {\n            var container = this.container;\n            if (!this.isInvisible) {\n              var guaranteedEmpty = document.createElement('div');\n              container.appendChild(guaranteedEmpty);\n              container = guaranteedEmpty;\n            }\n            this.widgetId = this.getAssertedRecaptcha().render(container, this.parameters);\n          }\n          return this.widgetId;\n        });\n        function makeRenderPromise() {\n          return _makeRenderPromise.apply(this, arguments);\n        }\n        return makeRenderPromise;\n      }()\n    }, {\n      key: \"init\",\n      value: function () {\n        var _init = _asyncToGenerator(function* () {\n          _assert(_isHttpOrHttps() && !_isWorker(), this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n          yield domReady();\n          this.recaptcha = yield this._recaptchaLoader.load(this.auth, this.auth.languageCode || undefined);\n          var siteKey = yield getRecaptchaParams(this.auth);\n          _assert(siteKey, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n          this.parameters.sitekey = siteKey;\n        });\n        function init() {\n          return _init.apply(this, arguments);\n        }\n        return init;\n      }()\n    }, {\n      key: \"getAssertedRecaptcha\",\n      value: function getAssertedRecaptcha() {\n        _assert(this.recaptcha, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        return this.recaptcha;\n      }\n    }]);\n  }();\n  function domReady() {\n    var resolver = null;\n    return new Promise(resolve => {\n      if (document.readyState === 'complete') {\n        resolve();\n        return;\n      }\n      // Document not ready, wait for load before resolving.\n      // Save resolver, so we can remove listener in case it was externally\n      // cancelled.\n      resolver = () => resolve();\n      window.addEventListener('load', resolver);\n    }).catch(e => {\n      if (resolver) {\n        window.removeEventListener('load', resolver);\n      }\n      throw e;\n    });\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  var ConfirmationResultImpl = /*#__PURE__*/function () {\n    function ConfirmationResultImpl(verificationId, onConfirmation) {\n      _classCallCheck(this, ConfirmationResultImpl);\n      this.verificationId = verificationId;\n      this.onConfirmation = onConfirmation;\n    }\n    return _createClass(ConfirmationResultImpl, [{\n      key: \"confirm\",\n      value: function confirm(verificationCode) {\n        var authCredential = PhoneAuthCredential._fromVerification(this.verificationId, verificationCode);\n        return this.onConfirmation(authCredential);\n      }\n    }]);\n  }();\n  /**\n   * Asynchronously signs in using a phone number.\n   *\n   * @remarks\n   * This method sends a code via SMS to the given\n   * phone number, and returns a {@link ConfirmationResult}. After the user\n   * provides the code sent to their phone, call {@link ConfirmationResult.confirm}\n   * with the code to sign the user in.\n   *\n   * For abuse prevention, this method requires a {@link ApplicationVerifier}.\n   * This SDK includes an implementation based on reCAPTCHA v2, {@link RecaptchaVerifier}.\n   * This function can work on other platforms that do not support the\n   * {@link RecaptchaVerifier} (like React Native), but you need to use a\n   * third-party {@link ApplicationVerifier} implementation.\n   *\n   * If you've enabled project-level reCAPTCHA Enterprise bot protection in\n   * Enforce mode, you can omit the {@link ApplicationVerifier}.\n   *\n   * This method does not work in a Node.js environment or with {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @example\n   * ```javascript\n   * // 'recaptcha-container' is the ID of an element in the DOM.\n   * const applicationVerifier = new firebase.auth.RecaptchaVerifier('recaptcha-container');\n   * const confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);\n   * // Obtain a verificationCode from the user.\n   * const credential = await confirmationResult.confirm(verificationCode);\n   * ```\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).\n   * @param appVerifier - The {@link ApplicationVerifier}.\n   *\n   * @public\n   */\n  function signInWithPhoneNumber(_x196, _x197, _x198) {\n    return _signInWithPhoneNumber.apply(this, arguments);\n  }\n  /**\n   * Links the user account with the given phone number.\n   *\n   * @remarks\n   * This method does not work in a Node.js environment.\n   *\n   * @param user - The user.\n   * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).\n   * @param appVerifier - The {@link ApplicationVerifier}.\n   *\n   * @public\n   */\n  function _signInWithPhoneNumber() {\n    _signInWithPhoneNumber = _asyncToGenerator(function* (auth, phoneNumber, appVerifier) {\n      if (app._isFirebaseServerApp(auth.app)) {\n        return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n      }\n      var authInternal = _castAuth(auth);\n      var verificationId = yield _verifyPhoneNumber(authInternal, phoneNumber, util.getModularInstance(appVerifier));\n      return new ConfirmationResultImpl(verificationId, cred => signInWithCredential(authInternal, cred));\n    });\n    return _signInWithPhoneNumber.apply(this, arguments);\n  }\n  function linkWithPhoneNumber(_x199, _x200, _x201) {\n    return _linkWithPhoneNumber.apply(this, arguments);\n  }\n  /**\n   * Re-authenticates a user using a fresh phone credential.\n   *\n   * @remarks\n   * Use before operations such as {@link updatePassword} that require tokens from recent sign-in attempts.\n   *\n   * This method does not work in a Node.js environment or on any {@link User} signed in by\n   * {@link Auth} instances created with a {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @param user - The user.\n   * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).\n   * @param appVerifier - The {@link ApplicationVerifier}.\n   *\n   * @public\n   */\n  function _linkWithPhoneNumber() {\n    _linkWithPhoneNumber = _asyncToGenerator(function* (user, phoneNumber, appVerifier) {\n      var userInternal = util.getModularInstance(user);\n      yield _assertLinkedStatus(false, userInternal, \"phone\" /* ProviderId.PHONE */);\n      var verificationId = yield _verifyPhoneNumber(userInternal.auth, phoneNumber, util.getModularInstance(appVerifier));\n      return new ConfirmationResultImpl(verificationId, cred => linkWithCredential(userInternal, cred));\n    });\n    return _linkWithPhoneNumber.apply(this, arguments);\n  }\n  function reauthenticateWithPhoneNumber(_x202, _x203, _x204) {\n    return _reauthenticateWithPhoneNumber.apply(this, arguments);\n  }\n  /**\n   * Returns a verification ID to be used in conjunction with the SMS code that is sent.\n   *\n   */\n  function _reauthenticateWithPhoneNumber() {\n    _reauthenticateWithPhoneNumber = _asyncToGenerator(function* (user, phoneNumber, appVerifier) {\n      var userInternal = util.getModularInstance(user);\n      if (app._isFirebaseServerApp(userInternal.auth.app)) {\n        return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(userInternal.auth));\n      }\n      var verificationId = yield _verifyPhoneNumber(userInternal.auth, phoneNumber, util.getModularInstance(appVerifier));\n      return new ConfirmationResultImpl(verificationId, cred => reauthenticateWithCredential(userInternal, cred));\n    });\n    return _reauthenticateWithPhoneNumber.apply(this, arguments);\n  }\n  function _verifyPhoneNumber(_x205, _x206, _x207) {\n    return _verifyPhoneNumber2.apply(this, arguments);\n  }\n  /**\n   * Updates the user's phone number.\n   *\n   * @remarks\n   * This method does not work in a Node.js environment or on any {@link User} signed in by\n   * {@link Auth} instances created with a {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @example\n   * ```\n   * // 'recaptcha-container' is the ID of an element in the DOM.\n   * const applicationVerifier = new RecaptchaVerifier('recaptcha-container');\n   * const provider = new PhoneAuthProvider(auth);\n   * const verificationId = await provider.verifyPhoneNumber('+16505550101', applicationVerifier);\n   * // Obtain the verificationCode from the user.\n   * const phoneCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\n   * await updatePhoneNumber(user, phoneCredential);\n   * ```\n   *\n   * @param user - The user.\n   * @param credential - A credential authenticating the new phone number.\n   *\n   * @public\n   */\n  function _verifyPhoneNumber2() {\n    _verifyPhoneNumber2 = _asyncToGenerator(function* (auth, options, verifier) {\n      if (!auth._getRecaptchaConfig()) {\n        try {\n          yield _initializeRecaptchaConfig(auth);\n        } catch (error) {\n          // If an error occurs while fetching the config, there is no way to know the enablement state\n          // of Phone provider, so we proceed with recaptcha V2 verification.\n          // The error is likely \"recaptchaKey undefined\", as reCAPTCHA Enterprise is not\n          // enabled for any provider.\n          console.log('Failed to initialize reCAPTCHA Enterprise config. Triggering the reCAPTCHA v2 verification.');\n        }\n      }\n      try {\n        var phoneInfoOptions;\n        if (typeof options === 'string') {\n          phoneInfoOptions = {\n            phoneNumber: options\n          };\n        } else {\n          phoneInfoOptions = options;\n        }\n        if ('session' in phoneInfoOptions) {\n          var session = phoneInfoOptions.session;\n          if ('phoneNumber' in phoneInfoOptions) {\n            _assert(session.type === \"enroll\" /* MultiFactorSessionType.ENROLL */, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n            var startPhoneMfaEnrollmentRequest = {\n              idToken: session.credential,\n              phoneEnrollmentInfo: {\n                phoneNumber: phoneInfoOptions.phoneNumber,\n                clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n              }\n            };\n            var startEnrollPhoneMfaActionCallback = /*#__PURE__*/function () {\n              var _ref30 = _asyncToGenerator(function* (authInstance, request) {\n                // If reCAPTCHA Enterprise token is FAKE_TOKEN, fetch reCAPTCHA v2 token and inject into request.\n                if (request.phoneEnrollmentInfo.captchaResponse === FAKE_TOKEN) {\n                  _assert(verifier?.type === RECAPTCHA_VERIFIER_TYPE, authInstance, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n                  var requestWithRecaptchaV2 = yield injectRecaptchaV2Token(authInstance, request, verifier);\n                  return startEnrollPhoneMfa(authInstance, requestWithRecaptchaV2);\n                }\n                return startEnrollPhoneMfa(authInstance, request);\n              });\n              return function startEnrollPhoneMfaActionCallback(_x222, _x223) {\n                return _ref30.apply(this, arguments);\n              };\n            }();\n            var startPhoneMfaEnrollmentResponse = handleRecaptchaFlow(auth, startPhoneMfaEnrollmentRequest, \"mfaSmsEnrollment\" /* RecaptchaActionName.MFA_SMS_ENROLLMENT */, startEnrollPhoneMfaActionCallback, \"PHONE_PROVIDER\" /* RecaptchaAuthProvider.PHONE_PROVIDER */);\n            var response = yield startPhoneMfaEnrollmentResponse.catch(error => {\n              return Promise.reject(error);\n            });\n            return response.phoneSessionInfo.sessionInfo;\n          } else {\n            _assert(session.type === \"signin\" /* MultiFactorSessionType.SIGN_IN */, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n            var mfaEnrollmentId = phoneInfoOptions.multiFactorHint?.uid || phoneInfoOptions.multiFactorUid;\n            _assert(mfaEnrollmentId, auth, \"missing-multi-factor-info\" /* AuthErrorCode.MISSING_MFA_INFO */);\n            var startPhoneMfaSignInRequest = {\n              mfaPendingCredential: session.credential,\n              mfaEnrollmentId,\n              phoneSignInInfo: {\n                clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n              }\n            };\n            var startSignInPhoneMfaActionCallback = /*#__PURE__*/function () {\n              var _ref31 = _asyncToGenerator(function* (authInstance, request) {\n                // If reCAPTCHA Enterprise token is FAKE_TOKEN, fetch reCAPTCHA v2 token and inject into request.\n                if (request.phoneSignInInfo.captchaResponse === FAKE_TOKEN) {\n                  _assert(verifier?.type === RECAPTCHA_VERIFIER_TYPE, authInstance, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n                  var requestWithRecaptchaV2 = yield injectRecaptchaV2Token(authInstance, request, verifier);\n                  return startSignInPhoneMfa(authInstance, requestWithRecaptchaV2);\n                }\n                return startSignInPhoneMfa(authInstance, request);\n              });\n              return function startSignInPhoneMfaActionCallback(_x224, _x225) {\n                return _ref31.apply(this, arguments);\n              };\n            }();\n            var startPhoneMfaSignInResponse = handleRecaptchaFlow(auth, startPhoneMfaSignInRequest, \"mfaSmsSignIn\" /* RecaptchaActionName.MFA_SMS_SIGNIN */, startSignInPhoneMfaActionCallback, \"PHONE_PROVIDER\" /* RecaptchaAuthProvider.PHONE_PROVIDER */);\n            var _response = yield startPhoneMfaSignInResponse.catch(error => {\n              return Promise.reject(error);\n            });\n            return _response.phoneResponseInfo.sessionInfo;\n          }\n        } else {\n          var sendPhoneVerificationCodeRequest = {\n            phoneNumber: phoneInfoOptions.phoneNumber,\n            clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n          };\n          var sendPhoneVerificationCodeActionCallback = /*#__PURE__*/function () {\n            var _ref32 = _asyncToGenerator(function* (authInstance, request) {\n              // If reCAPTCHA Enterprise token is FAKE_TOKEN, fetch reCAPTCHA v2 token and inject into request.\n              if (request.captchaResponse === FAKE_TOKEN) {\n                _assert(verifier?.type === RECAPTCHA_VERIFIER_TYPE, authInstance, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n                var requestWithRecaptchaV2 = yield injectRecaptchaV2Token(authInstance, request, verifier);\n                return sendPhoneVerificationCode(authInstance, requestWithRecaptchaV2);\n              }\n              return sendPhoneVerificationCode(authInstance, request);\n            });\n            return function sendPhoneVerificationCodeActionCallback(_x226, _x227) {\n              return _ref32.apply(this, arguments);\n            };\n          }();\n          var sendPhoneVerificationCodeResponse = handleRecaptchaFlow(auth, sendPhoneVerificationCodeRequest, \"sendVerificationCode\" /* RecaptchaActionName.SEND_VERIFICATION_CODE */, sendPhoneVerificationCodeActionCallback, \"PHONE_PROVIDER\" /* RecaptchaAuthProvider.PHONE_PROVIDER */);\n          var _response2 = yield sendPhoneVerificationCodeResponse.catch(error => {\n            return Promise.reject(error);\n          });\n          return _response2.sessionInfo;\n        }\n      } finally {\n        verifier?._reset();\n      }\n    });\n    return _verifyPhoneNumber2.apply(this, arguments);\n  }\n  function updatePhoneNumber(_x208, _x209) {\n    return _updatePhoneNumber.apply(this, arguments);\n  } // Helper function that fetches and injects a reCAPTCHA v2 token into the request.\n  function _updatePhoneNumber() {\n    _updatePhoneNumber = _asyncToGenerator(function* (user, credential) {\n      var userInternal = util.getModularInstance(user);\n      if (app._isFirebaseServerApp(userInternal.auth.app)) {\n        return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(userInternal.auth));\n      }\n      yield _link(userInternal, credential);\n    });\n    return _updatePhoneNumber.apply(this, arguments);\n  }\n  function injectRecaptchaV2Token(_x210, _x211, _x212) {\n    return _injectRecaptchaV2Token.apply(this, arguments);\n  }\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Provider for generating an {@link PhoneAuthCredential}.\n   *\n   * @remarks\n   * `PhoneAuthProvider` does not work in a Node.js environment.\n   *\n   * @example\n   * ```javascript\n   * // 'recaptcha-container' is the ID of an element in the DOM.\n   * const applicationVerifier = new RecaptchaVerifier('recaptcha-container');\n   * const provider = new PhoneAuthProvider(auth);\n   * const verificationId = await provider.verifyPhoneNumber('+16505550101', applicationVerifier);\n   * // Obtain the verificationCode from the user.\n   * const phoneCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\n   * const userCredential = await signInWithCredential(auth, phoneCredential);\n   * ```\n   *\n   * @public\n   */\n  function _injectRecaptchaV2Token() {\n    _injectRecaptchaV2Token = _asyncToGenerator(function* (auth, request, recaptchaV2Verifier) {\n      _assert(recaptchaV2Verifier.type === RECAPTCHA_VERIFIER_TYPE, auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      var recaptchaV2Token = yield recaptchaV2Verifier.verify();\n      _assert(typeof recaptchaV2Token === 'string', auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      var newRequest = {\n        ...request\n      };\n      if ('phoneEnrollmentInfo' in newRequest) {\n        var phoneNumber = newRequest.phoneEnrollmentInfo.phoneNumber;\n        var captchaResponse = newRequest.phoneEnrollmentInfo.captchaResponse;\n        var clientType = newRequest.phoneEnrollmentInfo.clientType;\n        var recaptchaVersion = newRequest.phoneEnrollmentInfo.recaptchaVersion;\n        Object.assign(newRequest, {\n          'phoneEnrollmentInfo': {\n            phoneNumber,\n            recaptchaToken: recaptchaV2Token,\n            captchaResponse,\n            clientType,\n            recaptchaVersion\n          }\n        });\n        return newRequest;\n      } else if ('phoneSignInInfo' in newRequest) {\n        var _captchaResponse = newRequest.phoneSignInInfo.captchaResponse;\n        var _clientType = newRequest.phoneSignInInfo.clientType;\n        var _recaptchaVersion = newRequest.phoneSignInInfo.recaptchaVersion;\n        Object.assign(newRequest, {\n          'phoneSignInInfo': {\n            recaptchaToken: recaptchaV2Token,\n            captchaResponse: _captchaResponse,\n            clientType: _clientType,\n            recaptchaVersion: _recaptchaVersion\n          }\n        });\n        return newRequest;\n      } else {\n        Object.assign(newRequest, {\n          'recaptchaToken': recaptchaV2Token\n        });\n        return newRequest;\n      }\n    });\n    return _injectRecaptchaV2Token.apply(this, arguments);\n  }\n  var PhoneAuthProvider = /*#__PURE__*/function () {\n    /**\n     * @param auth - The Firebase {@link Auth} instance in which sign-ins should occur.\n     *\n     */\n    function PhoneAuthProvider(auth) {\n      _classCallCheck(this, PhoneAuthProvider);\n      /** Always set to {@link ProviderId}.PHONE. */\n      this.providerId = PhoneAuthProvider.PROVIDER_ID;\n      this.auth = _castAuth(auth);\n    }\n    /**\n     *\n     * Starts a phone number authentication flow by sending a verification code to the given phone\n     * number.\n     *\n     * @example\n     * ```javascript\n     * const provider = new PhoneAuthProvider(auth);\n     * const verificationId = await provider.verifyPhoneNumber(phoneNumber, applicationVerifier);\n     * // Obtain verificationCode from the user.\n     * const authCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\n     * const userCredential = await signInWithCredential(auth, authCredential);\n     * ```\n     *\n     * @example\n     * An alternative flow is provided using the `signInWithPhoneNumber` method.\n     * ```javascript\n     * const confirmationResult = signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);\n     * // Obtain verificationCode from the user.\n     * const userCredential = confirmationResult.confirm(verificationCode);\n     * ```\n     *\n     * @param phoneInfoOptions - The user's {@link PhoneInfoOptions}. The phone number should be in\n     * E.164 format (e.g. +16505550101).\n     * @param applicationVerifier - An {@link ApplicationVerifier}, which prevents\n     * requests from unauthorized clients. This SDK includes an implementation\n     * based on reCAPTCHA v2, {@link RecaptchaVerifier}. If you've enabled\n     * reCAPTCHA Enterprise bot protection in Enforce mode, this parameter is\n     * optional; in all other configurations, the parameter is required.\n     *\n     * @returns A Promise for a verification ID that can be passed to\n     * {@link PhoneAuthProvider.credential} to identify this flow.\n     */\n    return _createClass(PhoneAuthProvider, [{\n      key: \"verifyPhoneNumber\",\n      value: function verifyPhoneNumber(phoneOptions, applicationVerifier) {\n        return _verifyPhoneNumber(this.auth, phoneOptions, util.getModularInstance(applicationVerifier));\n      }\n      /**\n       * Creates a phone auth credential, given the verification ID from\n       * {@link PhoneAuthProvider.verifyPhoneNumber} and the code that was sent to the user's\n       * mobile device.\n       *\n       * @example\n       * ```javascript\n       * const provider = new PhoneAuthProvider(auth);\n       * const verificationId = provider.verifyPhoneNumber(phoneNumber, applicationVerifier);\n       * // Obtain verificationCode from the user.\n       * const authCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\n       * const userCredential = signInWithCredential(auth, authCredential);\n       * ```\n       *\n       * @example\n       * An alternative flow is provided using the `signInWithPhoneNumber` method.\n       * ```javascript\n       * const confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);\n       * // Obtain verificationCode from the user.\n       * const userCredential = await confirmationResult.confirm(verificationCode);\n       * ```\n       *\n       * @param verificationId - The verification ID returned from {@link PhoneAuthProvider.verifyPhoneNumber}.\n       * @param verificationCode - The verification code sent to the user's mobile device.\n       *\n       * @returns The auth provider credential.\n       */\n    }], [{\n      key: \"credential\",\n      value: function credential(verificationId, verificationCode) {\n        return PhoneAuthCredential._fromVerification(verificationId, verificationCode);\n      }\n      /**\n       * Generates an {@link AuthCredential} from a {@link UserCredential}.\n       * @param userCredential - The user credential.\n       */\n    }, {\n      key: \"credentialFromResult\",\n      value: function credentialFromResult(userCredential) {\n        var credential = userCredential;\n        return PhoneAuthProvider.credentialFromTaggedObject(credential);\n      }\n      /**\n       * Returns an {@link AuthCredential} when passed an error.\n       *\n       * @remarks\n       *\n       * This method works for errors like\n       * `auth/account-exists-with-different-credentials`. This is useful for\n       * recovering when attempting to set a user's phone number but the number\n       * in question is already tied to another account. For example, the following\n       * code tries to update the current user's phone number, and if that\n       * fails, links the user with the account associated with that number:\n       *\n       * ```js\n       * const provider = new PhoneAuthProvider(auth);\n       * const verificationId = await provider.verifyPhoneNumber(number, verifier);\n       * try {\n       *   const code = ''; // Prompt the user for the verification code\n       *   await updatePhoneNumber(\n       *       auth.currentUser,\n       *       PhoneAuthProvider.credential(verificationId, code));\n       * } catch (e) {\n       *   if ((e as FirebaseError)?.code === 'auth/account-exists-with-different-credential') {\n       *     const cred = PhoneAuthProvider.credentialFromError(e);\n       *     await linkWithCredential(auth.currentUser, cred);\n       *   }\n       * }\n       *\n       * // At this point, auth.currentUser.phoneNumber === number.\n       * ```\n       *\n       * @param error - The error to generate a credential from.\n       */\n    }, {\n      key: \"credentialFromError\",\n      value: function credentialFromError(error) {\n        return PhoneAuthProvider.credentialFromTaggedObject(error.customData || {});\n      }\n    }, {\n      key: \"credentialFromTaggedObject\",\n      value: function credentialFromTaggedObject(_ref23) {\n        var tokenResponse = _ref23._tokenResponse;\n        if (!tokenResponse) {\n          return null;\n        }\n        var phoneNumber = tokenResponse.phoneNumber,\n          temporaryProof = tokenResponse.temporaryProof;\n        if (phoneNumber && temporaryProof) {\n          return PhoneAuthCredential._fromTokenResponse(phoneNumber, temporaryProof);\n        }\n        return null;\n      }\n    }]);\n  }();\n  /** Always set to {@link ProviderId}.PHONE. */\n  PhoneAuthProvider.PROVIDER_ID = \"phone\" /* ProviderId.PHONE */;\n  /** Always set to {@link SignInMethod}.PHONE. */\n  PhoneAuthProvider.PHONE_SIGN_IN_METHOD = \"phone\" /* SignInMethod.PHONE */;\n  var MultiFactorAssertionImpl = /*#__PURE__*/function () {\n    function MultiFactorAssertionImpl(factorId) {\n      _classCallCheck(this, MultiFactorAssertionImpl);\n      this.factorId = factorId;\n    }\n    return _createClass(MultiFactorAssertionImpl, [{\n      key: \"_process\",\n      value: function _process(auth, session, displayName) {\n        switch (session.type) {\n          case \"enroll\" /* MultiFactorSessionType.ENROLL */:\n            return this._finalizeEnroll(auth, session.credential, displayName);\n          case \"signin\" /* MultiFactorSessionType.SIGN_IN */:\n            return this._finalizeSignIn(auth, session.credential);\n          default:\n            return debugFail('unexpected MultiFactorSessionType');\n        }\n      }\n    }]);\n  }();\n  /**\n   * {@inheritdoc PhoneMultiFactorAssertion}\n   *\n   * @public\n   */\n  var PhoneMultiFactorAssertionImpl = /*#__PURE__*/function (_MultiFactorAssertion) {\n    function PhoneMultiFactorAssertionImpl(credential) {\n      var _this13;\n      _classCallCheck(this, PhoneMultiFactorAssertionImpl);\n      _this13 = _callSuper(this, PhoneMultiFactorAssertionImpl, [\"phone\" /* FactorId.PHONE */]);\n      _this13.credential = credential;\n      return _this13;\n    }\n    /** @internal */\n    _inherits(PhoneMultiFactorAssertionImpl, _MultiFactorAssertion);\n    return _createClass(PhoneMultiFactorAssertionImpl, [{\n      key: \"_finalizeEnroll\",\n      value: /** @internal */\n      function _finalizeEnroll(auth, idToken, displayName) {\n        return finalizeEnrollPhoneMfa(auth, {\n          idToken,\n          displayName,\n          phoneVerificationInfo: this.credential._makeVerificationRequest()\n        });\n      }\n      /** @internal */\n    }, {\n      key: \"_finalizeSignIn\",\n      value: function _finalizeSignIn(auth, mfaPendingCredential) {\n        return finalizeSignInPhoneMfa(auth, {\n          mfaPendingCredential,\n          phoneVerificationInfo: this.credential._makeVerificationRequest()\n        });\n      }\n    }], [{\n      key: \"_fromCredential\",\n      value: function _fromCredential(credential) {\n        return new PhoneMultiFactorAssertionImpl(credential);\n      }\n    }]);\n  }(MultiFactorAssertionImpl);\n  /**\n   * Provider for generating a {@link PhoneMultiFactorAssertion}.\n   *\n   * @public\n   */\n  var PhoneMultiFactorGenerator = /*#__PURE__*/function () {\n    function PhoneMultiFactorGenerator() {\n      _classCallCheck(this, PhoneMultiFactorGenerator);\n    }\n    /**\n     * Provides a {@link PhoneMultiFactorAssertion} to confirm ownership of the phone second factor.\n     *\n     * @remarks\n     * This method does not work in a Node.js environment.\n     *\n     * @param phoneAuthCredential - A credential provided by {@link PhoneAuthProvider.credential}.\n     * @returns A {@link PhoneMultiFactorAssertion} which can be used with\n     * {@link MultiFactorResolver.resolveSignIn}\n     */\n    return _createClass(PhoneMultiFactorGenerator, null, [{\n      key: \"assertion\",\n      value: function assertion(credential) {\n        return PhoneMultiFactorAssertionImpl._fromCredential(credential);\n      }\n    }]);\n  }();\n  /**\n   * The identifier of the phone second factor: `phone`.\n   */\n  PhoneMultiFactorGenerator.FACTOR_ID = 'phone';\n\n  /**\n   * Provider for generating a {@link TotpMultiFactorAssertion}.\n   *\n   * @public\n   */\n  var TotpMultiFactorGenerator = /*#__PURE__*/function () {\n    function TotpMultiFactorGenerator() {\n      _classCallCheck(this, TotpMultiFactorGenerator);\n    }\n    return _createClass(TotpMultiFactorGenerator, null, [{\n      key: \"assertionForEnrollment\",\n      value:\n      /**\n       * Provides a {@link TotpMultiFactorAssertion} to confirm ownership of\n       * the TOTP (time-based one-time password) second factor.\n       * This assertion is used to complete enrollment in TOTP second factor.\n       *\n       * @param secret A {@link TotpSecret} containing the shared secret key and other TOTP parameters.\n       * @param oneTimePassword One-time password from TOTP App.\n       * @returns A {@link TotpMultiFactorAssertion} which can be used with\n       * {@link MultiFactorUser.enroll}.\n       */\n      function assertionForEnrollment(secret, oneTimePassword) {\n        return TotpMultiFactorAssertionImpl._fromSecret(secret, oneTimePassword);\n      }\n      /**\n       * Provides a {@link TotpMultiFactorAssertion} to confirm ownership of the TOTP second factor.\n       * This assertion is used to complete signIn with TOTP as the second factor.\n       *\n       * @param enrollmentId identifies the enrolled TOTP second factor.\n       * @param oneTimePassword One-time password from TOTP App.\n       * @returns A {@link TotpMultiFactorAssertion} which can be used with\n       * {@link MultiFactorResolver.resolveSignIn}.\n       */\n    }, {\n      key: \"assertionForSignIn\",\n      value: function assertionForSignIn(enrollmentId, oneTimePassword) {\n        return TotpMultiFactorAssertionImpl._fromEnrollmentId(enrollmentId, oneTimePassword);\n      }\n      /**\n       * Returns a promise to {@link TotpSecret} which contains the TOTP shared secret key and other parameters.\n       * Creates a TOTP secret as part of enrolling a TOTP second factor.\n       * Used for generating a QR code URL or inputting into a TOTP app.\n       * This method uses the auth instance corresponding to the user in the multiFactorSession.\n       *\n       * @param session The {@link MultiFactorSession} that the user is part of.\n       * @returns A promise to {@link TotpSecret}.\n       */\n    }, {\n      key: \"generateSecret\",\n      value: (function () {\n        var _generateSecret = _asyncToGenerator(function* (session) {\n          var mfaSession = session;\n          _assert(typeof mfaSession.user?.auth !== 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n          var response = yield startEnrollTotpMfa(mfaSession.user.auth, {\n            idToken: mfaSession.credential,\n            totpEnrollmentInfo: {}\n          });\n          return TotpSecret._fromStartTotpMfaEnrollmentResponse(response, mfaSession.user.auth);\n        });\n        function generateSecret(_x213) {\n          return _generateSecret.apply(this, arguments);\n        }\n        return generateSecret;\n      }())\n    }]);\n  }();\n  /**\n   * The identifier of the TOTP second factor: `totp`.\n   */\n  TotpMultiFactorGenerator.FACTOR_ID = \"totp\" /* FactorId.TOTP */;\n  var TotpMultiFactorAssertionImpl = /*#__PURE__*/function (_MultiFactorAssertion2) {\n    function TotpMultiFactorAssertionImpl(otp, enrollmentId, secret) {\n      var _this14;\n      _classCallCheck(this, TotpMultiFactorAssertionImpl);\n      _this14 = _callSuper(this, TotpMultiFactorAssertionImpl, [\"totp\" /* FactorId.TOTP */]);\n      _this14.otp = otp;\n      _this14.enrollmentId = enrollmentId;\n      _this14.secret = secret;\n      return _this14;\n    }\n    /** @internal */\n    _inherits(TotpMultiFactorAssertionImpl, _MultiFactorAssertion2);\n    return _createClass(TotpMultiFactorAssertionImpl, [{\n      key: \"_finalizeEnroll\",\n      value: (/** @internal */function () {\n        var _finalizeEnroll2 = _asyncToGenerator(function* (auth, idToken, displayName) {\n          _assert(typeof this.secret !== 'undefined', auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n          return finalizeEnrollTotpMfa(auth, {\n            idToken,\n            displayName,\n            totpVerificationInfo: this.secret._makeTotpVerificationInfo(this.otp)\n          });\n        });\n        function _finalizeEnroll(_x214, _x215, _x216) {\n          return _finalizeEnroll2.apply(this, arguments);\n        }\n        return _finalizeEnroll;\n      }() /** @internal */)\n    }, {\n      key: \"_finalizeSignIn\",\n      value: (function () {\n        var _finalizeSignIn2 = _asyncToGenerator(function* (auth, mfaPendingCredential) {\n          _assert(this.enrollmentId !== undefined && this.otp !== undefined, auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n          var totpVerificationInfo = {\n            verificationCode: this.otp\n          };\n          return finalizeSignInTotpMfa(auth, {\n            mfaPendingCredential,\n            mfaEnrollmentId: this.enrollmentId,\n            totpVerificationInfo\n          });\n        });\n        function _finalizeSignIn(_x217, _x218) {\n          return _finalizeSignIn2.apply(this, arguments);\n        }\n        return _finalizeSignIn;\n      }())\n    }], [{\n      key: \"_fromSecret\",\n      value: function _fromSecret(secret, otp) {\n        return new TotpMultiFactorAssertionImpl(otp, undefined, secret);\n      }\n      /** @internal */\n    }, {\n      key: \"_fromEnrollmentId\",\n      value: function _fromEnrollmentId(enrollmentId, otp) {\n        return new TotpMultiFactorAssertionImpl(otp, enrollmentId);\n      }\n    }]);\n  }(MultiFactorAssertionImpl);\n  /**\n   * Provider for generating a {@link TotpMultiFactorAssertion}.\n   *\n   * Stores the shared secret key and other parameters to generate time-based OTPs.\n   * Implements methods to retrieve the shared secret key and generate a QR code URL.\n   * @public\n   */\n  var TotpSecret = /*#__PURE__*/function () {\n    // The public members are declared outside the constructor so the docs can be generated.\n    function TotpSecret(secretKey, hashingAlgorithm, codeLength, codeIntervalSeconds, enrollmentCompletionDeadline, sessionInfo, auth) {\n      _classCallCheck(this, TotpSecret);\n      this.sessionInfo = sessionInfo;\n      this.auth = auth;\n      this.secretKey = secretKey;\n      this.hashingAlgorithm = hashingAlgorithm;\n      this.codeLength = codeLength;\n      this.codeIntervalSeconds = codeIntervalSeconds;\n      this.enrollmentCompletionDeadline = enrollmentCompletionDeadline;\n    }\n    /** @internal */\n    return _createClass(TotpSecret, [{\n      key: \"_makeTotpVerificationInfo\",\n      value: /** @internal */\n      function _makeTotpVerificationInfo(otp) {\n        return {\n          sessionInfo: this.sessionInfo,\n          verificationCode: otp\n        };\n      }\n      /**\n       * Returns a QR code URL as described in\n       * https://github.com/google/google-authenticator/wiki/Key-Uri-Format\n       * This can be displayed to the user as a QR code to be scanned into a TOTP app like Google Authenticator.\n       * If the optional parameters are unspecified, an accountName of <userEmail> and issuer of <firebaseAppName> are used.\n       *\n       * @param accountName the name of the account/app along with a user identifier.\n       * @param issuer issuer of the TOTP (likely the app name).\n       * @returns A QR code URL string.\n       */\n    }, {\n      key: \"generateQrCodeUrl\",\n      value: function generateQrCodeUrl(accountName, issuer) {\n        var useDefaults = false;\n        if (_isEmptyString(accountName) || _isEmptyString(issuer)) {\n          useDefaults = true;\n        }\n        if (useDefaults) {\n          if (_isEmptyString(accountName)) {\n            accountName = this.auth.currentUser?.email || 'unknownuser';\n          }\n          if (_isEmptyString(issuer)) {\n            issuer = this.auth.name;\n          }\n        }\n        return `otpauth://totp/${issuer}:${accountName}?secret=${this.secretKey}&issuer=${issuer}&algorithm=${this.hashingAlgorithm}&digits=${this.codeLength}`;\n      }\n    }], [{\n      key: \"_fromStartTotpMfaEnrollmentResponse\",\n      value: function _fromStartTotpMfaEnrollmentResponse(response, auth) {\n        return new TotpSecret(response.totpSessionInfo.sharedSecretKey, response.totpSessionInfo.hashingAlgorithm, response.totpSessionInfo.verificationCodeLength, response.totpSessionInfo.periodSec, new Date(response.totpSessionInfo.finalizeEnrollmentTime).toUTCString(), response.totpSessionInfo.sessionInfo, auth);\n      }\n    }]);\n  }();\n  /** @internal */\n  function _isEmptyString(input) {\n    return typeof input === 'undefined' || input?.length === 0;\n  }\n  var STORAGE_AVAILABLE_KEY = '__sak';\n  exports.AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY = AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY;\n  exports.ActionCodeOperation = ActionCodeOperation;\n  exports.ActionCodeURL = ActionCodeURL;\n  exports.AuthCredential = AuthCredential;\n  exports.AuthImpl = AuthImpl;\n  exports.BaseOAuthProvider = BaseOAuthProvider;\n  exports.Delay = Delay;\n  exports.EmailAuthCredential = EmailAuthCredential;\n  exports.EmailAuthProvider = EmailAuthProvider;\n  exports.FacebookAuthProvider = FacebookAuthProvider;\n  exports.FactorId = FactorId;\n  exports.FederatedAuthProvider = FederatedAuthProvider;\n  exports.FetchProvider = FetchProvider;\n  exports.GithubAuthProvider = GithubAuthProvider;\n  exports.GoogleAuthProvider = GoogleAuthProvider;\n  exports.OAuthCredential = OAuthCredential;\n  exports.OAuthProvider = OAuthProvider;\n  exports.OperationType = OperationType;\n  exports.PhoneAuthCredential = PhoneAuthCredential;\n  exports.PhoneAuthProvider = PhoneAuthProvider;\n  exports.PhoneMultiFactorGenerator = PhoneMultiFactorGenerator;\n  exports.ProviderId = ProviderId;\n  exports.RecaptchaVerifier = RecaptchaVerifier;\n  exports.SAMLAuthCredential = SAMLAuthCredential;\n  exports.SAMLAuthProvider = SAMLAuthProvider;\n  exports.STORAGE_AVAILABLE_KEY = STORAGE_AVAILABLE_KEY;\n  exports.SignInMethod = SignInMethod;\n  exports.TotpMultiFactorGenerator = TotpMultiFactorGenerator;\n  exports.TotpSecret = TotpSecret;\n  exports.TwitterAuthProvider = TwitterAuthProvider;\n  exports.UserImpl = UserImpl;\n  exports._assert = _assert;\n  exports._assertInstanceOf = _assertInstanceOf;\n  exports._assertLinkedStatus = _assertLinkedStatus;\n  exports._castAuth = _castAuth;\n  exports._createError = _createError;\n  exports._emulatorUrl = _emulatorUrl;\n  exports._fail = _fail;\n  exports._gapiScriptUrl = _gapiScriptUrl;\n  exports._generateCallbackName = _generateCallbackName;\n  exports._getActiveServiceWorker = _getActiveServiceWorker;\n  exports._getClientVersion = _getClientVersion;\n  exports._getCurrentUrl = _getCurrentUrl;\n  exports._getInstance = _getInstance;\n  exports._getServiceWorkerController = _getServiceWorkerController;\n  exports._getWorkerGlobalScope = _getWorkerGlobalScope;\n  exports._isAndroid = _isAndroid;\n  exports._isChromeIOS = _isChromeIOS;\n  exports._isFirefox = _isFirefox;\n  exports._isIE10 = _isIE10;\n  exports._isIOS = _isIOS;\n  exports._isIOS7Or8 = _isIOS7Or8;\n  exports._isIOSStandalone = _isIOSStandalone;\n  exports._isMobileBrowser = _isMobileBrowser;\n  exports._isSafari = _isSafari;\n  exports._isWorker = _isWorker;\n  exports._link = _link;\n  exports._loadJS = _loadJS;\n  exports._logWarn = _logWarn;\n  exports._performApiRequest = _performApiRequest;\n  exports._persistenceKeyName = _persistenceKeyName;\n  exports._reauthenticate = _reauthenticate;\n  exports._serverAppCurrentUserOperationNotSupportedError = _serverAppCurrentUserOperationNotSupportedError;\n  exports._setExternalJSProvider = _setExternalJSProvider;\n  exports._setWindowLocation = _setWindowLocation;\n  exports._signInWithCredential = _signInWithCredential;\n  exports._window = _window;\n  exports.applyActionCode = applyActionCode;\n  exports.beforeAuthStateChanged = beforeAuthStateChanged;\n  exports.checkActionCode = checkActionCode;\n  exports.confirmPasswordReset = confirmPasswordReset;\n  exports.connectAuthEmulator = connectAuthEmulator;\n  exports.createUserWithEmailAndPassword = createUserWithEmailAndPassword;\n  exports.debugAssert = debugAssert;\n  exports.debugErrorMap = debugErrorMap;\n  exports.deleteUser = deleteUser;\n  exports.fetchSignInMethodsForEmail = fetchSignInMethodsForEmail;\n  exports.getAdditionalUserInfo = getAdditionalUserInfo;\n  exports.getIdToken = getIdToken;\n  exports.getIdTokenResult = _getIdTokenResult2;\n  exports.getMultiFactorResolver = getMultiFactorResolver;\n  exports.inMemoryPersistence = inMemoryPersistence;\n  exports.initializeAuth = initializeAuth;\n  exports.initializeRecaptchaConfig = initializeRecaptchaConfig;\n  exports.isSignInWithEmailLink = isSignInWithEmailLink;\n  exports.linkWithCredential = linkWithCredential;\n  exports.linkWithPhoneNumber = linkWithPhoneNumber;\n  exports.multiFactor = multiFactor;\n  exports.onAuthStateChanged = onAuthStateChanged;\n  exports.onIdTokenChanged = onIdTokenChanged;\n  exports.parseActionCodeURL = parseActionCodeURL;\n  exports.prodErrorMap = prodErrorMap;\n  exports.reauthenticateWithCredential = reauthenticateWithCredential;\n  exports.reauthenticateWithPhoneNumber = reauthenticateWithPhoneNumber;\n  exports.registerAuth = registerAuth;\n  exports.reload = _reload2;\n  exports.revokeAccessToken = revokeAccessToken;\n  exports.sendEmailVerification = sendEmailVerification;\n  exports.sendPasswordResetEmail = sendPasswordResetEmail;\n  exports.sendSignInLinkToEmail = sendSignInLinkToEmail;\n  exports.setPersistence = setPersistence;\n  exports.signInAnonymously = signInAnonymously;\n  exports.signInWithCredential = signInWithCredential;\n  exports.signInWithCustomToken = signInWithCustomToken;\n  exports.signInWithEmailAndPassword = signInWithEmailAndPassword;\n  exports.signInWithEmailLink = signInWithEmailLink;\n  exports.signInWithIdp = signInWithIdp;\n  exports.signInWithPhoneNumber = signInWithPhoneNumber;\n  exports.signOut = signOut;\n  exports.unlink = unlink;\n  exports.updateCurrentUser = updateCurrentUser;\n  exports.updateEmail = updateEmail;\n  exports.updatePassword = updatePassword;\n  exports.updatePhoneNumber = updatePhoneNumber;\n  exports.updateProfile = updateProfile;\n  exports.useDeviceLanguage = useDeviceLanguage;\n  exports.validatePassword = validatePassword;\n  exports.verifyBeforeUpdateEmail = verifyBeforeUpdateEmail;\n  exports.verifyPasswordResetCode = verifyPasswordResetCode;\n});","lineCount":10072,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_possibleConstructorReturn"],[4,32,1,13],[4,35,1,13,"require"],[4,42,1,13],[4,43,1,13,"_dependencyMap"],[4,57,1,13],[5,2,1,13],[5,6,1,13,"_getPrototypeOf"],[5,21,1,13],[5,24,1,13,"require"],[5,31,1,13],[5,32,1,13,"_dependencyMap"],[5,46,1,13],[6,2,1,13],[6,6,1,13,"_inherits"],[6,15,1,13],[6,18,1,13,"require"],[6,25,1,13],[6,26,1,13,"_dependencyMap"],[6,40,1,13],[7,2,1,13],[7,6,1,13,"_objectWithoutProperties"],[7,30,1,13],[7,33,1,13,"require"],[7,40,1,13],[7,41,1,13,"_dependencyMap"],[7,55,1,13],[8,2,1,13],[8,6,1,13,"_slicedToArray"],[8,20,1,13],[8,23,1,13,"require"],[8,30,1,13],[8,31,1,13,"_dependencyMap"],[8,45,1,13],[9,2,1,13],[9,6,1,13,"_asyncToGenerator"],[9,23,1,13],[9,26,1,13,"require"],[9,33,1,13],[9,34,1,13,"_dependencyMap"],[9,48,1,13],[10,2,1,13],[10,6,1,13,"_classCallCheck"],[10,21,1,13],[10,24,1,13,"require"],[10,31,1,13],[10,32,1,13,"_dependencyMap"],[10,46,1,13],[11,2,1,13],[11,6,1,13,"_createClass"],[11,18,1,13],[11,21,1,13,"require"],[11,28,1,13],[11,29,1,13,"_dependencyMap"],[11,43,1,13],[12,2,1,13],[12,6,1,13,"_excluded"],[12,15,1,13],[13,4,1,13,"_excluded2"],[13,14,1,13],[14,4,1,13,"_excluded3"],[14,14,1,13],[15,2,1,13],[15,11,1,13,"_callSuper"],[15,22,1,13,"t"],[15,23,1,13],[15,25,1,13,"o"],[15,26,1,13],[15,28,1,13,"e"],[15,29,1,13],[15,40,1,13,"o"],[15,41,1,13],[15,44,1,13,"_getPrototypeOf"],[15,59,1,13],[15,60,1,13,"o"],[15,61,1,13],[15,64,1,13,"_possibleConstructorReturn"],[15,90,1,13],[15,91,1,13,"t"],[15,92,1,13],[15,94,1,13,"_isNativeReflectConstruct"],[15,119,1,13],[15,124,1,13,"Reflect"],[15,131,1,13],[15,132,1,13,"construct"],[15,141,1,13],[15,142,1,13,"o"],[15,143,1,13],[15,145,1,13,"e"],[15,146,1,13],[15,154,1,13,"_getPrototypeOf"],[15,169,1,13],[15,170,1,13,"t"],[15,171,1,13],[15,173,1,13,"constructor"],[15,184,1,13],[15,188,1,13,"o"],[15,189,1,13],[15,190,1,13,"apply"],[15,195,1,13],[15,196,1,13,"t"],[15,197,1,13],[15,199,1,13,"e"],[15,200,1,13],[16,2,1,13],[16,11,1,13,"_isNativeReflectConstruct"],[16,37,1,13],[16,51,1,13,"t"],[16,52,1,13],[16,56,1,13,"Boolean"],[16,63,1,13],[16,64,1,13,"prototype"],[16,73,1,13],[16,74,1,13,"valueOf"],[16,81,1,13],[16,82,1,13,"call"],[16,86,1,13],[16,87,1,13,"Reflect"],[16,94,1,13],[16,95,1,13,"construct"],[16,104,1,13],[16,105,1,13,"Boolean"],[16,112,1,13],[16,145,1,13,"t"],[16,146,1,13],[16,159,1,13,"_isNativeReflectConstruct"],[16,184,1,13],[16,196,1,13,"_isNativeReflectConstruct"],[16,197,1,13],[16,210,1,13,"t"],[16,211,1,13],[17,2,3,0],[17,6,3,4,"util"],[17,10,3,8],[17,13,3,11,"require"],[17,20,3,18],[17,21,3,18,"_dependencyMap"],[17,35,3,18],[17,56,3,35],[17,57,3,36],[18,2,4,0],[18,6,4,4,"app"],[18,9,4,7],[18,12,4,10,"require"],[18,19,4,17],[18,20,4,17,"_dependencyMap"],[18,34,4,17],[18,54,4,33],[18,55,4,34],[19,2,5,0],[19,6,5,4,"component"],[19,15,5,13],[19,18,5,16,"require"],[19,25,5,23],[19,26,5,23,"_dependencyMap"],[19,40,5,23],[19,67,5,45],[19,68,5,46],[20,2,6,0],[20,6,6,4,"logger"],[20,12,6,10],[20,15,6,13,"require"],[20,22,6,20],[20,23,6,20,"_dependencyMap"],[20,37,6,20],[20,61,6,39],[20,62,6,40],[22,2,8,0],[23,0,9,0],[24,0,10,0],[25,0,11,0],[26,0,12,0],[27,0,13,0],[28,0,14,0],[29,0,15,0],[30,0,16,0],[31,0,17,0],[32,0,18,0],[33,0,19,0],[34,0,20,0],[35,0,21,0],[36,0,22,0],[37,0,23,0],[38,2,24,0],[38,11,24,9,"_debugErrorMap"],[38,25,24,23,"_debugErrorMap"],[38,26,24,23],[38,28,24,26],[39,4,25,4],[39,11,25,11],[40,6,26,8],[40,7,26,9],[40,35,26,37],[40,36,26,38],[40,79,26,81],[40,133,26,135],[41,6,27,8],[41,7,27,9],[41,23,27,25],[41,24,27,26],[41,61,27,63],[41,63,27,65],[42,6,28,8],[42,7,28,9],[42,27,28,29],[42,28,28,30],[42,69,28,71],[42,132,28,134],[42,135,29,12],[42,206,29,83],[42,209,30,12],[42,267,30,70],[43,6,31,8],[43,7,31,9],[43,26,31,28],[43,27,31,29],[43,67,31,69],[43,135,31,137],[43,138,32,12],[43,208,32,82],[43,211,33,12],[43,225,33,26],[44,6,34,8],[44,7,34,9],[44,29,34,31],[44,30,34,32],[44,73,34,75],[44,141,34,143],[44,144,35,12],[44,216,35,84],[44,219,36,12],[44,244,36,37],[45,6,37,8],[45,7,37,9],[45,21,37,23],[45,22,37,24],[45,57,37,59],[45,129,37,131],[45,132,38,12],[45,140,38,20],[46,6,39,8],[46,7,39,9],[46,26,39,28],[46,27,39,29],[46,67,39,69],[46,100,39,102],[47,6,40,8],[47,7,40,9],[47,25,40,27],[47,26,40,28],[47,65,40,67],[47,97,40,99],[48,6,41,8],[48,7,41,9],[48,34,41,36],[48,35,41,37],[48,83,41,85],[48,153,41,155],[49,6,42,8],[49,7,42,9],[49,30,42,32],[49,31,42,33],[49,73,42,75],[49,128,42,130],[50,6,43,8],[50,7,43,9],[50,30,43,32],[50,31,43,33],[50,84,43,86],[50,157,43,159],[50,160,44,12],[50,197,44,49],[51,6,45,8],[51,7,45,9],[51,46,45,48],[51,47,45,49],[51,100,45,102],[51,180,45,182],[51,183,46,12],[51,258,46,87],[51,261,47,12],[51,295,47,46],[52,6,48,8],[52,7,48,9],[52,35,48,37],[52,36,48,38],[52,85,48,87],[52,168,48,170],[52,171,49,12],[52,184,49,25],[53,6,50,8],[53,7,50,9],[53,40,50,42],[53,41,50,43],[53,95,50,97],[53,150,50,152],[54,6,51,8],[54,7,51,9],[54,29,51,31],[54,30,51,32],[54,65,51,67],[54,122,51,124],[55,6,52,8],[55,7,52,9],[55,31,52,33],[55,32,52,34],[55,77,52,79],[55,148,52,150],[55,151,53,12],[55,210,53,71],[55,213,54,12],[55,246,54,45],[56,6,55,8],[56,7,55,9],[56,28,55,30],[56,29,55,31],[56,68,55,70],[56,98,55,100],[57,6,56,8],[57,7,56,9],[57,32,56,34],[57,33,56,35],[57,77,56,79],[57,159,56,161],[58,6,57,8],[58,7,57,9],[58,23,57,25],[58,24,57,26],[58,61,57,63],[58,98,57,100],[59,6,58,8],[59,7,58,9],[59,31,58,33],[59,32,58,34],[59,77,58,79],[59,151,58,153],[59,154,59,12],[59,215,59,73],[60,6,60,8],[60,7,60,9],[60,23,60,25],[60,24,60,26],[60,61,60,63],[60,131,60,133],[61,6,61,8],[61,7,61,9],[61,27,61,29],[61,28,61,30],[61,63,61,65],[61,134,61,136],[61,137,62,12],[61,208,62,83],[61,211,63,12],[61,254,63,55],[62,6,64,8],[62,7,64,9],[62,27,64,29],[62,28,64,30],[62,69,64,71],[62,106,64,108],[63,6,65,8],[63,7,65,9],[63,34,65,36],[63,35,65,37],[63,70,65,72],[63,142,65,144],[63,145,66,12],[63,219,66,86],[63,222,67,12],[63,263,67,53],[64,6,68,8],[64,7,68,9],[64,29,68,31],[64,30,68,32],[64,73,68,75],[64,127,68,129],[65,6,69,8],[65,7,69,9],[65,38,69,40],[65,39,69,41],[65,91,69,93],[65,166,69,168],[65,169,70,12],[65,229,70,72],[65,232,71,12],[65,293,71,73],[65,296,72,12],[65,329,72,45],[66,6,73,8],[66,7,73,9],[66,29,73,31],[66,30,73,32],[66,73,73,75],[66,144,73,146],[67,6,74,8],[67,7,74,9],[67,36,74,38],[67,37,74,39],[67,87,74,89],[67,178,74,180],[68,6,75,8],[68,7,75,9],[68,22,75,24],[68,23,75,25],[68,59,75,61],[68,98,75,100],[69,6,76,8],[69,7,76,9],[69,32,76,34],[69,33,76,35],[69,79,76,81],[69,147,76,149],[70,6,77,8],[70,7,77,9],[70,24,77,26],[70,25,77,27],[70,63,77,65],[70,132,77,134],[71,6,78,8],[71,7,78,9],[71,26,78,28],[71,27,78,29],[71,67,78,69],[71,116,78,118],[72,6,79,8],[72,7,79,9],[72,27,79,29],[72,28,79,30],[72,69,79,71],[72,139,79,141],[73,6,80,8],[73,7,80,9],[73,32,80,34],[73,33,80,35],[73,79,80,81],[73,173,80,175],[73,176,81,12],[73,258,81,94],[74,6,82,8],[74,7,82,9],[74,37,82,39],[74,38,82,40],[74,80,82,82],[74,160,82,162],[75,6,83,8],[75,7,83,9],[75,31,83,33],[75,32,83,34],[75,77,83,79],[75,149,83,151],[75,152,84,12],[75,184,84,44],[76,6,85,8],[76,7,85,9],[76,32,85,34],[76,33,85,35],[76,79,85,81],[76,150,85,152],[76,153,86,12],[76,173,86,32],[77,6,87,8],[77,7,87,9],[77,28,87,30],[77,29,87,31],[77,66,87,68],[77,137,87,139],[77,140,88,12],[77,213,88,85],[78,6,89,8],[78,7,89,9],[78,28,89,30],[78,29,89,31],[78,68,89,70],[78,140,89,142],[78,143,90,12],[78,179,90,48],[79,6,91,8],[79,7,91,9],[79,23,91,25],[79,24,91,26],[79,63,91,65],[79,126,91,128],[80,6,92,8],[80,7,92,9],[80,33,92,35],[80,34,92,36],[80,76,92,78],[80,159,92,161],[81,6,93,8],[81,7,93,9],[81,29,93,31],[81,30,93,32],[81,73,93,75],[81,146,93,148],[81,149,94,12],[81,220,94,83],[81,223,95,12],[81,294,95,83],[81,297,96,12],[81,327,96,42],[82,6,97,8],[82,7,97,9],[82,28,97,30],[82,29,97,31],[82,71,97,73],[82,110,97,112],[83,6,98,8],[83,7,98,9],[83,32,98,34],[83,33,98,35],[83,79,98,81],[83,151,98,153],[83,154,99,12],[83,191,99,49],[84,6,100,8],[84,7,100,9],[84,23,100,25],[84,24,100,26],[84,61,100,63],[84,153,100,155],[84,156,101,12],[84,238,101,94],[85,6,102,8],[85,7,102,9],[85,32,102,34],[85,33,102,35],[85,76,102,78],[85,150,102,152],[86,6,103,8],[86,7,103,9],[86,26,103,28],[86,27,103,29],[86,67,103,69],[86,110,103,112],[87,6,104,8],[87,7,104,9],[87,22,104,24],[87,23,104,25],[87,59,104,61],[87,118,104,120],[88,6,105,8],[88,7,105,9],[88,33,105,35],[88,34,105,36],[88,85,105,87],[88,175,105,177],[89,6,106,8],[89,7,106,9],[89,36,106,38],[89,37,106,39],[89,79,106,81],[89,150,106,152],[89,153,107,12],[89,209,107,68],[90,6,108,8],[90,7,108,9],[90,31,108,33],[90,32,108,34],[90,77,108,79],[90,145,108,147],[90,148,109,12],[90,209,109,73],[91,6,110,8],[91,7,110,9],[91,34,110,36],[91,35,110,37],[91,70,110,72],[91,146,110,148],[92,6,111,8],[92,7,111,9],[92,29,111,31],[92,30,111,32],[92,73,111,75],[92,122,111,124],[93,6,112,8],[93,7,112,9],[93,29,112,31],[93,30,112,32],[93,73,112,75],[93,110,112,112],[94,6,113,8],[94,7,113,9],[94,30,113,32],[94,31,113,33],[94,75,113,77],[94,142,113,144],[95,6,114,8],[95,7,114,9],[95,33,114,35],[95,34,114,36],[95,81,114,83],[95,149,114,151],[95,152,115,12],[95,225,115,85],[95,228,116,12],[95,254,116,38],[96,6,117,8],[96,7,117,9],[96,25,117,27],[96,26,117,28],[96,65,117,67],[96,104,117,106],[97,6,118,8],[97,7,118,9],[97,34,118,36],[97,35,118,37],[97,74,118,76],[97,116,118,118],[98,6,119,8],[98,7,119,9],[98,37,119,39],[98,38,119,40],[98,80,119,82],[98,146,119,148],[99,6,120,8],[99,7,120,9],[99,29,120,31],[99,30,120,32],[99,73,120,75],[99,144,120,146],[100,6,121,8],[100,7,121,9],[100,32,121,34],[100,33,121,35],[100,76,121,78],[100,146,121,148],[101,6,122,8],[101,7,122,9],[101,20,122,22],[101,21,122,23],[101,60,122,62],[101,108,122,110],[102,6,123,8],[102,7,123,9],[102,36,123,38],[102,37,123,39],[102,78,123,80],[102,152,123,154],[103,6,124,8],[103,7,124,9],[103,35,124,37],[103,36,124,38],[103,71,124,73],[103,143,124,145],[104,6,125,8],[104,7,125,9],[104,49,125,51],[104,50,125,52],[104,90,125,92],[104,160,125,162],[104,163,126,12],[104,232,126,81],[104,235,127,12],[104,251,127,28],[105,6,128,8],[105,7,128,9],[105,31,128,33],[105,32,128,34],[105,77,128,79],[105,174,128,176],[106,6,129,8],[106,7,129,9],[106,22,129,24],[106,23,129,25],[106,59,129,61],[106,96,129,98],[107,6,130,8],[107,7,130,9],[107,25,130,27],[107,26,130,28],[107,65,130,67],[107,125,130,127],[108,6,131,8],[108,7,131,9],[108,18,131,20],[108,19,131,21],[108,51,131,53],[108,124,131,126],[108,127,132,12],[108,161,132,46],[109,6,133,8],[109,7,133,9],[109,30,133,32],[109,31,133,33],[109,75,133,77],[109,143,133,145],[109,146,134,12],[109,219,134,85],[109,222,135,12],[109,237,135,27],[110,6,136,8],[110,7,136,9],[110,52,136,54],[110,53,136,55],[110,99,136,101],[110,172,136,174],[110,175,137,12],[110,248,137,85],[110,251,138,12],[110,286,138,47],[111,6,139,8],[111,7,139,9],[111,22,139,24],[111,23,139,25],[111,59,139,61],[111,150,139,152],[112,6,140,8],[112,7,140,9],[112,29,140,31],[112,30,140,32],[112,73,140,75],[112,145,140,147],[113,6,141,8],[113,7,141,9],[113,32,141,34],[113,33,141,35],[113,79,141,81],[113,144,141,146],[114,6,142,8],[114,7,142,9],[114,23,142,25],[114,24,142,26],[114,61,142,63],[114,120,142,122],[115,6,143,8],[115,7,143,9],[115,35,143,37],[115,36,143,38],[115,85,143,87],[115,159,143,161],[116,6,144,8],[116,7,144,9],[116,35,144,37],[116,36,144,38],[116,85,144,87],[116,135,144,137],[117,6,145,8],[117,7,145,9],[117,28,145,30],[117,29,145,31],[117,71,145,73],[117,131,145,133],[118,6,146,8],[118,7,146,9],[118,37,146,39],[118,38,146,40],[118,91,146,93],[118,147,146,149],[119,6,147,8],[119,7,147,9],[119,45,147,47],[119,46,147,48],[119,97,147,99],[119,172,147,174],[120,6,148,8],[120,7,148,9],[120,27,148,29],[120,28,148,30],[120,69,148,71],[120,138,148,140],[121,6,149,8],[121,7,149,9],[121,16,149,18],[121,17,149,19],[121,47,149,49],[121,77,149,79],[122,6,150,8],[122,7,150,9],[122,27,150,29],[122,28,150,30],[122,64,150,66],[122,136,150,138],[123,6,151,8],[123,7,151,9],[123,26,151,28],[123,27,151,29],[123,77,151,79],[123,150,151,152],[123,153,152,12],[123,171,152,30],[124,6,153,8],[124,7,153,9],[124,34,153,36],[124,35,153,37],[124,77,153,79],[124,148,153,150],[124,151,154,12],[124,188,154,49],[125,6,155,8],[125,7,155,9],[125,33,155,35],[125,34,155,36],[125,81,155,83],[125,198,155,200],[126,6,156,8],[126,7,156,9],[126,37,156,39],[126,38,156,40],[126,84,156,86],[126,158,156,160],[127,6,157,8],[127,7,157,9],[127,37,157,39],[127,38,157,40],[127,89,157,91],[127,149,157,151],[128,6,158,8],[128,7,158,9],[128,25,158,27],[128,26,158,28],[128,65,158,67],[128,107,158,109],[129,6,159,8],[129,7,159,9],[129,23,159,25],[129,24,159,26],[129,61,159,63],[129,132,159,134],[130,6,160,8],[130,7,160,9],[130,23,160,25],[130,24,160,26],[130,59,160,61],[130,132,160,134],[130,135,161,12],[130,155,161,32],[131,6,162,8],[131,7,162,9],[131,22,162,24],[131,23,162,25],[131,59,162,61],[131,116,162,118],[132,6,163,8],[132,7,163,9],[132,22,163,24],[132,23,163,25],[132,59,163,61],[132,137,163,139],[133,6,164,8],[133,7,164,9],[133,24,164,26],[133,25,164,27],[133,63,164,65],[133,65,164,67],[134,6,165,8],[134,7,165,9],[134,22,165,24],[134,23,165,25],[134,59,165,61],[134,108,165,110],[135,6,166,8],[135,7,166,9],[135,32,166,34],[135,33,166,35],[135,79,166,81],[135,157,166,159],[136,6,167,8],[136,7,167,9],[136,28,167,30],[136,29,167,31],[136,71,167,73],[136,119,167,121],[136,122,168,12],[136,195,168,85],[136,198,169,12],[136,278,169,92],[136,281,170,12],[136,313,170,44],[137,6,171,8],[137,7,171,9],[137,32,171,34],[137,33,171,35],[137,79,171,81],[137,148,171,150],[138,6,172,8],[138,7,172,9],[138,32,172,34],[138,33,172,35],[138,79,172,81],[138,148,172,150],[139,6,173,8],[139,7,173,9],[139,33,173,35],[139,34,173,36],[139,81,173,83],[139,151,173,153],[140,6,174,8],[140,7,174,9],[140,30,174,32],[140,31,174,33],[140,75,174,77],[140,142,174,144],[141,6,175,8],[141,7,175,9],[141,28,175,30],[141,29,175,31],[141,71,175,73],[141,146,175,148],[142,6,176,8],[142,7,176,9],[142,34,176,36],[142,35,176,37],[142,83,176,85],[142,154,176,156],[143,6,177,8],[143,7,177,9],[143,25,177,27],[143,26,177,28],[143,65,177,67],[143,94,177,96],[144,6,178,8],[144,7,178,9],[144,34,178,36],[144,35,178,37],[144,83,178,85],[144,154,178,156],[145,6,179,8],[145,7,179,9],[145,51,179,53],[145,52,179,54],[145,117,179,119],[145,245,179,247],[146,6,180,8],[146,7,180,9],[146,44,180,46],[146,45,180,47],[146,103,180,105],[146,149,180,151],[147,6,181,8],[147,7,181,9],[147,36,181,38],[147,37,181,39],[147,87,181,89],[147,179,181,181],[147,182,182,12],[148,4,183,4],[148,5,183,5],[149,2,184,0],[150,2,185,0],[150,11,185,9,"_prodErrorMap"],[150,24,185,22,"_prodErrorMap"],[150,25,185,22],[150,27,185,25],[151,4,186,4],[152,4,187,4],[153,4,188,4],[154,4,189,4],[154,11,189,11],[155,6,190,8],[155,7,190,9],[155,46,190,48],[155,47,190,49],[155,100,190,102],[155,180,190,182],[155,183,191,12],[155,258,191,87],[155,261,192,12],[156,4,193,4],[156,5,193,5],[157,2,194,0],[158,2,195,0],[159,0,196,0],[160,0,197,0],[161,0,198,0],[162,0,199,0],[163,0,200,0],[164,0,201,0],[165,2,202,0],[165,6,202,6,"debugErrorMap"],[165,19,202,19],[165,22,202,22,"_debugErrorMap"],[165,36,202,36],[166,2,203,0],[167,0,204,0],[168,0,205,0],[169,0,206,0],[170,0,207,0],[171,0,208,0],[172,0,209,0],[173,2,210,0],[173,6,210,6,"prodErrorMap"],[173,18,210,18],[173,21,210,21,"_prodErrorMap"],[173,34,210,34],[174,2,211,0],[174,6,211,6,"_DEFAULT_AUTH_ERROR_FACTORY"],[174,33,211,33],[174,36,211,36],[174,40,211,40,"util"],[174,44,211,44],[174,45,211,45,"ErrorFactory"],[174,57,211,57],[174,58,211,58],[174,64,211,64],[174,66,211,66],[174,76,211,76],[174,78,211,78,"_prodErrorMap"],[174,91,211,91],[174,92,211,92],[174,93,211,93],[174,94,211,94],[175,2,212,0],[176,0,213,0],[177,0,214,0],[178,0,215,0],[179,0,216,0],[180,0,217,0],[181,0,218,0],[182,0,219,0],[183,0,220,0],[184,0,221,0],[185,0,222,0],[186,2,223,0],[186,6,223,6,"AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY"],[186,48,223,48],[186,51,223,51],[187,4,224,4,"ADMIN_ONLY_OPERATION"],[187,24,224,24],[187,26,224,26],[187,59,224,59],[188,4,225,4,"ARGUMENT_ERROR"],[188,18,225,18],[188,20,225,20],[188,41,225,41],[189,4,226,4,"APP_NOT_AUTHORIZED"],[189,22,226,22],[189,24,226,24],[189,49,226,49],[190,4,227,4,"APP_NOT_INSTALLED"],[190,21,227,21],[190,23,227,23],[190,47,227,47],[191,4,228,4,"CAPTCHA_CHECK_FAILED"],[191,24,228,24],[191,26,228,26],[191,53,228,53],[192,4,229,4,"CODE_EXPIRED"],[192,16,229,16],[192,18,229,18],[192,37,229,37],[193,4,230,4,"CORDOVA_NOT_READY"],[193,21,230,21],[193,23,230,23],[193,47,230,47],[194,4,231,4,"CORS_UNSUPPORTED"],[194,20,231,20],[194,22,231,22],[194,45,231,45],[195,4,232,4,"CREDENTIAL_ALREADY_IN_USE"],[195,29,232,29],[195,31,232,31],[195,63,232,63],[196,4,233,4,"CREDENTIAL_MISMATCH"],[196,23,233,23],[196,25,233,25],[196,53,233,53],[197,4,234,4,"CREDENTIAL_TOO_OLD_LOGIN_AGAIN"],[197,34,234,34],[197,36,234,36],[197,64,234,64],[198,4,235,4,"DEPENDENT_SDK_INIT_BEFORE_AUTH"],[198,34,235,34],[198,36,235,36],[198,80,235,80],[199,4,236,4,"DYNAMIC_LINK_NOT_ACTIVATED"],[199,30,236,30],[199,32,236,32],[199,65,236,65],[200,4,237,4,"EMAIL_CHANGE_NEEDS_VERIFICATION"],[200,35,237,35],[200,37,237,37],[200,75,237,75],[201,4,238,4,"EMAIL_EXISTS"],[201,16,238,16],[201,18,238,18],[201,45,238,45],[202,4,239,4,"EMULATOR_CONFIG_FAILED"],[202,26,239,26],[202,28,239,28],[202,57,239,57],[203,4,240,4,"EXPIRED_OOB_CODE"],[203,20,240,20],[203,22,240,22],[203,48,240,48],[204,4,241,4,"EXPIRED_POPUP_REQUEST"],[204,25,241,25],[204,27,241,27],[204,57,241,57],[205,4,242,4,"INTERNAL_ERROR"],[205,18,242,18],[205,20,242,20],[205,41,242,41],[206,4,243,4,"INVALID_API_KEY"],[206,19,243,19],[206,21,243,21],[206,43,243,43],[207,4,244,4,"INVALID_APP_CREDENTIAL"],[207,26,244,26],[207,28,244,28],[207,57,244,57],[208,4,245,4,"INVALID_APP_ID"],[208,18,245,18],[208,20,245,20],[208,41,245,41],[209,4,246,4,"INVALID_AUTH"],[209,16,246,16],[209,18,246,18],[209,43,246,43],[210,4,247,4,"INVALID_AUTH_EVENT"],[210,22,247,22],[210,24,247,24],[210,49,247,49],[211,4,248,4,"INVALID_CERT_HASH"],[211,21,248,21],[211,23,248,23],[211,47,248,47],[212,4,249,4,"INVALID_CODE"],[212,16,249,16],[212,18,249,18],[212,50,249,50],[213,4,250,4,"INVALID_CONTINUE_URI"],[213,24,250,24],[213,26,250,26],[213,53,250,53],[214,4,251,4,"INVALID_CORDOVA_CONFIGURATION"],[214,33,251,33],[214,35,251,35],[214,71,251,71],[215,4,252,4,"INVALID_CUSTOM_TOKEN"],[215,24,252,24],[215,26,252,26],[215,53,252,53],[216,4,253,4,"INVALID_DYNAMIC_LINK_DOMAIN"],[216,31,253,31],[216,33,253,33],[216,67,253,67],[217,4,254,4,"INVALID_EMAIL"],[217,17,254,17],[217,19,254,19],[217,39,254,39],[218,4,255,4,"INVALID_EMULATOR_SCHEME"],[218,27,255,27],[218,29,255,29],[218,59,255,59],[219,4,256,4,"INVALID_IDP_RESPONSE"],[219,24,256,24],[219,26,256,26],[219,51,256,51],[220,4,257,4,"INVALID_LOGIN_CREDENTIALS"],[220,29,257,29],[220,31,257,31],[220,56,257,56],[221,4,258,4,"INVALID_MESSAGE_PAYLOAD"],[221,27,258,27],[221,29,258,29],[221,59,258,59],[222,4,259,4,"INVALID_MFA_SESSION"],[222,23,259,23],[222,25,259,25],[222,60,259,60],[223,4,260,4,"INVALID_OAUTH_CLIENT_ID"],[223,27,260,27],[223,29,260,29],[223,59,260,59],[224,4,261,4,"INVALID_OAUTH_PROVIDER"],[224,26,261,26],[224,28,261,28],[224,57,261,57],[225,4,262,4,"INVALID_OOB_CODE"],[225,20,262,20],[225,22,262,22],[225,48,262,48],[226,4,263,4,"INVALID_ORIGIN"],[226,18,263,18],[226,20,263,20],[226,46,263,46],[227,4,264,4,"INVALID_PASSWORD"],[227,20,264,20],[227,22,264,22],[227,43,264,43],[228,4,265,4,"INVALID_PERSISTENCE"],[228,23,265,23],[228,25,265,25],[228,56,265,56],[229,4,266,4,"INVALID_PHONE_NUMBER"],[229,24,266,24],[229,26,266,26],[229,53,266,53],[230,4,267,4,"INVALID_PROVIDER_ID"],[230,23,267,23],[230,25,267,25],[230,51,267,51],[231,4,268,4,"INVALID_RECIPIENT_EMAIL"],[231,27,268,27],[231,29,268,29],[231,59,268,59],[232,4,269,4,"INVALID_SENDER"],[232,18,269,18],[232,20,269,20],[232,41,269,41],[233,4,270,4,"INVALID_SESSION_INFO"],[233,24,270,24],[233,26,270,26],[233,56,270,56],[234,4,271,4,"INVALID_TENANT_ID"],[234,21,271,21],[234,23,271,23],[234,47,271,47],[235,4,272,4,"MFA_INFO_NOT_FOUND"],[235,22,272,22],[235,24,272,24],[235,58,272,58],[236,4,273,4,"MFA_REQUIRED"],[236,16,273,16],[236,18,273,18],[236,51,273,51],[237,4,274,4,"MISSING_ANDROID_PACKAGE_NAME"],[237,32,274,32],[237,34,274,34],[237,65,274,65],[238,4,275,4,"MISSING_APP_CREDENTIAL"],[238,26,275,26],[238,28,275,28],[238,57,275,57],[239,4,276,4,"MISSING_AUTH_DOMAIN"],[239,23,276,23],[239,25,276,25],[239,59,276,59],[240,4,277,4,"MISSING_CODE"],[240,16,277,16],[240,18,277,18],[240,50,277,50],[241,4,278,4,"MISSING_CONTINUE_URI"],[241,24,278,24],[241,26,278,26],[241,53,278,53],[242,4,279,4,"MISSING_IFRAME_START"],[242,24,279,24],[242,26,279,26],[242,53,279,53],[243,4,280,4,"MISSING_IOS_BUNDLE_ID"],[243,25,280,25],[243,27,280,27],[243,55,280,55],[244,4,281,4,"MISSING_OR_INVALID_NONCE"],[244,28,281,28],[244,30,281,30],[244,61,281,61],[245,4,282,4,"MISSING_MFA_INFO"],[245,20,282,20],[245,22,282,22],[245,54,282,54],[246,4,283,4,"MISSING_MFA_SESSION"],[246,23,283,23],[246,25,283,25],[246,60,283,60],[247,4,284,4,"MISSING_PHONE_NUMBER"],[247,24,284,24],[247,26,284,26],[247,53,284,53],[248,4,285,4,"MISSING_SESSION_INFO"],[248,24,285,24],[248,26,285,26],[248,56,285,56],[249,4,286,4,"MODULE_DESTROYED"],[249,20,286,20],[249,22,286,22],[249,40,286,40],[250,4,287,4,"NEED_CONFIRMATION"],[250,21,287,21],[250,23,287,23],[250,70,287,70],[251,4,288,4,"NETWORK_REQUEST_FAILED"],[251,26,288,26],[251,28,288,28],[251,57,288,57],[252,4,289,4,"NULL_USER"],[252,13,289,13],[252,15,289,15],[252,31,289,31],[253,4,290,4,"NO_AUTH_EVENT"],[253,17,290,17],[253,19,290,19],[253,39,290,39],[254,4,291,4,"NO_SUCH_PROVIDER"],[254,20,291,20],[254,22,291,22],[254,45,291,45],[255,4,292,4,"OPERATION_NOT_ALLOWED"],[255,25,292,25],[255,27,292,27],[255,55,292,55],[256,4,293,4,"OPERATION_NOT_SUPPORTED"],[256,27,293,27],[256,29,293,29],[256,79,293,79],[257,4,294,4,"POPUP_BLOCKED"],[257,17,294,17],[257,19,294,19],[257,39,294,39],[258,4,295,4,"POPUP_CLOSED_BY_USER"],[258,24,295,24],[258,26,295,26],[258,53,295,53],[259,4,296,4,"PROVIDER_ALREADY_LINKED"],[259,27,296,27],[259,29,296,29],[259,59,296,59],[260,4,297,4,"QUOTA_EXCEEDED"],[260,18,297,18],[260,20,297,20],[260,41,297,41],[261,4,298,4,"REDIRECT_CANCELLED_BY_USER"],[261,30,298,30],[261,32,298,32],[261,65,298,65],[262,4,299,4,"REDIRECT_OPERATION_PENDING"],[262,30,299,30],[262,32,299,32],[262,65,299,65],[263,4,300,4,"REJECTED_CREDENTIAL"],[263,23,300,23],[263,25,300,25],[263,51,300,51],[264,4,301,4,"SECOND_FACTOR_ALREADY_ENROLLED"],[264,34,301,34],[264,36,301,36],[264,71,301,71],[265,4,302,4,"SECOND_FACTOR_LIMIT_EXCEEDED"],[265,32,302,32],[265,34,302,34],[265,77,302,77],[266,4,303,4,"TENANT_ID_MISMATCH"],[266,22,303,22],[266,24,303,24],[266,49,303,49],[267,4,304,4,"TIMEOUT"],[267,11,304,11],[267,13,304,13],[267,27,304,27],[268,4,305,4,"TOKEN_EXPIRED"],[268,17,305,17],[268,19,305,19],[268,44,305,44],[269,4,306,4,"TOO_MANY_ATTEMPTS_TRY_LATER"],[269,31,306,31],[269,33,306,33],[269,57,306,57],[270,4,307,4,"UNAUTHORIZED_DOMAIN"],[270,23,307,23],[270,25,307,25],[270,57,307,57],[271,4,308,4,"UNSUPPORTED_FIRST_FACTOR"],[271,28,308,28],[271,30,308,30],[271,61,308,61],[272,4,309,4,"UNSUPPORTED_PERSISTENCE"],[272,27,309,27],[272,29,309,29],[272,64,309,64],[273,4,310,4,"UNSUPPORTED_TENANT_OPERATION"],[273,32,310,32],[273,34,310,34],[273,69,310,69],[274,4,311,4,"UNVERIFIED_EMAIL"],[274,20,311,20],[274,22,311,22],[274,45,311,45],[275,4,312,4,"USER_CANCELLED"],[275,18,312,18],[275,20,312,20],[275,41,312,41],[276,4,313,4,"USER_DELETED"],[276,16,313,16],[276,18,313,18],[276,39,313,39],[277,4,314,4,"USER_DISABLED"],[277,17,314,17],[277,19,314,19],[277,39,314,39],[278,4,315,4,"USER_MISMATCH"],[278,17,315,17],[278,19,315,19],[278,39,315,39],[279,4,316,4,"USER_SIGNED_OUT"],[279,19,316,19],[279,21,316,21],[279,43,316,43],[280,4,317,4,"WEAK_PASSWORD"],[280,17,317,17],[280,19,317,19],[280,39,317,39],[281,4,318,4,"WEB_STORAGE_UNSUPPORTED"],[281,27,318,27],[281,29,318,29],[281,59,318,59],[282,4,319,4,"ALREADY_INITIALIZED"],[282,23,319,23],[282,25,319,25],[282,51,319,51],[283,4,320,4,"RECAPTCHA_NOT_ENABLED"],[283,25,320,25],[283,27,320,27],[283,55,320,55],[284,4,321,4,"MISSING_RECAPTCHA_TOKEN"],[284,27,321,27],[284,29,321,29],[284,59,321,59],[285,4,322,4,"INVALID_RECAPTCHA_TOKEN"],[285,27,322,27],[285,29,322,29],[285,59,322,59],[286,4,323,4,"INVALID_RECAPTCHA_ACTION"],[286,28,323,28],[286,30,323,30],[286,61,323,61],[287,4,324,4,"MISSING_CLIENT_TYPE"],[287,23,324,23],[287,25,324,25],[287,51,324,51],[288,4,325,4,"MISSING_RECAPTCHA_VERSION"],[288,29,325,29],[288,31,325,31],[288,63,325,63],[289,4,326,4,"INVALID_RECAPTCHA_VERSION"],[289,29,326,29],[289,31,326,31],[289,63,326,63],[290,4,327,4,"INVALID_REQ_TYPE"],[290,20,327,20],[290,22,327,22],[290,45,327,45],[291,4,328,4,"INVALID_HOSTING_LINK_DOMAIN"],[291,31,328,31],[291,33,328,33],[292,2,329,0],[292,3,329,1],[294,2,331,0],[295,0,332,0],[296,0,333,0],[297,0,334,0],[298,0,335,0],[299,0,336,0],[300,0,337,0],[301,0,338,0],[302,0,339,0],[303,0,340,0],[304,0,341,0],[305,0,342,0],[306,0,343,0],[307,0,344,0],[308,0,345,0],[309,0,346,0],[310,2,347,0],[310,6,347,6,"logClient"],[310,15,347,15],[310,18,347,18],[310,22,347,22,"logger"],[310,28,347,28],[310,29,347,29,"Logger"],[310,35,347,35],[310,36,347,36],[310,52,347,52],[310,53,347,53],[311,2,348,0],[311,11,348,9,"_logWarn"],[311,19,348,17,"_logWarn"],[311,20,348,18,"msg"],[311,23,348,21],[311,25,348,32],[312,4,349,4],[312,8,349,8,"logClient"],[312,17,349,17],[312,18,349,18,"logLevel"],[312,26,349,26],[312,30,349,30,"logger"],[312,36,349,36],[312,37,349,37,"LogLevel"],[312,45,349,45],[312,46,349,46,"WARN"],[312,50,349,50],[312,52,349,52],[313,6,349,52],[313,15,349,52,"_len"],[313,19,349,52],[313,22,349,52,"arguments"],[313,31,349,52],[313,32,349,52,"length"],[313,38,349,52],[313,40,348,26,"args"],[313,44,348,30],[313,51,348,30,"Array"],[313,56,348,30],[313,57,348,30,"_len"],[313,61,348,30],[313,68,348,30,"_len"],[313,72,348,30],[313,83,348,30,"_key2"],[313,88,348,30],[313,94,348,30,"_key2"],[313,99,348,30],[313,102,348,30,"_len"],[313,106,348,30],[313,108,348,30,"_key2"],[313,113,348,30],[314,8,348,26,"args"],[314,12,348,30],[314,13,348,30,"_key2"],[314,18,348,30],[314,26,348,30,"arguments"],[314,35,348,30],[314,36,348,30,"_key2"],[314,41,348,30],[315,6,348,30],[316,6,350,8,"logClient"],[316,15,350,17],[316,16,350,18,"warn"],[316,20,350,22],[316,21,350,23],[316,30,350,32,"app"],[316,33,350,35],[316,34,350,36,"SDK_VERSION"],[316,45,350,47],[316,51,350,53,"msg"],[316,54,350,56],[316,56,350,58],[316,58,350,60],[316,61,350,63,"args"],[316,65,350,67],[316,66,350,68],[317,4,351,4],[318,2,352,0],[319,2,353,0],[319,11,353,9,"_logError"],[319,20,353,18,"_logError"],[319,21,353,19,"msg"],[319,24,353,22],[319,26,353,33],[320,4,354,4],[320,8,354,8,"logClient"],[320,17,354,17],[320,18,354,18,"logLevel"],[320,26,354,26],[320,30,354,30,"logger"],[320,36,354,36],[320,37,354,37,"LogLevel"],[320,45,354,45],[320,46,354,46,"ERROR"],[320,51,354,51],[320,53,354,53],[321,6,354,53],[321,15,354,53,"_len2"],[321,20,354,53],[321,23,354,53,"arguments"],[321,32,354,53],[321,33,354,53,"length"],[321,39,354,53],[321,41,353,27,"args"],[321,45,353,31],[321,52,353,31,"Array"],[321,57,353,31],[321,58,353,31,"_len2"],[321,63,353,31],[321,70,353,31,"_len2"],[321,75,353,31],[321,86,353,31,"_key3"],[321,91,353,31],[321,97,353,31,"_key3"],[321,102,353,31],[321,105,353,31,"_len2"],[321,110,353,31],[321,112,353,31,"_key3"],[321,117,353,31],[322,8,353,27,"args"],[322,12,353,31],[322,13,353,31,"_key3"],[322,18,353,31],[322,26,353,31,"arguments"],[322,35,353,31],[322,36,353,31,"_key3"],[322,41,353,31],[323,6,353,31],[324,6,355,8,"logClient"],[324,15,355,17],[324,16,355,18,"error"],[324,21,355,23],[324,22,355,24],[324,31,355,33,"app"],[324,34,355,36],[324,35,355,37,"SDK_VERSION"],[324,46,355,48],[324,52,355,54,"msg"],[324,55,355,57],[324,57,355,59],[324,59,355,61],[324,62,355,64,"args"],[324,66,355,68],[324,67,355,69],[325,4,356,4],[326,2,357,0],[328,2,359,0],[329,0,360,0],[330,0,361,0],[331,0,362,0],[332,0,363,0],[333,0,364,0],[334,0,365,0],[335,0,366,0],[336,0,367,0],[337,0,368,0],[338,0,369,0],[339,0,370,0],[340,0,371,0],[341,0,372,0],[342,0,373,0],[343,0,374,0],[344,2,375,0],[344,11,375,9,"_fail"],[344,16,375,14,"_fail"],[344,17,375,15,"authOrCode"],[344,27,375,25],[344,29,375,36],[345,4,375,36],[345,13,375,36,"_len3"],[345,18,375,36],[345,21,375,36,"arguments"],[345,30,375,36],[345,31,375,36,"length"],[345,37,375,36],[345,39,375,30,"rest"],[345,43,375,34],[345,50,375,34,"Array"],[345,55,375,34],[345,56,375,34,"_len3"],[345,61,375,34],[345,68,375,34,"_len3"],[345,73,375,34],[345,84,375,34,"_key4"],[345,89,375,34],[345,95,375,34,"_key4"],[345,100,375,34],[345,103,375,34,"_len3"],[345,108,375,34],[345,110,375,34,"_key4"],[345,115,375,34],[346,6,375,30,"rest"],[346,10,375,34],[346,11,375,34,"_key4"],[346,16,375,34],[346,24,375,34,"arguments"],[346,33,375,34],[346,34,375,34,"_key4"],[346,39,375,34],[347,4,375,34],[348,4,376,4],[348,10,376,10,"createErrorInternal"],[348,29,376,29],[348,30,376,30,"authOrCode"],[348,40,376,40],[348,42,376,42],[348,45,376,45,"rest"],[348,49,376,49],[348,50,376,50],[349,2,377,0],[350,2,378,0],[350,11,378,9,"_createError"],[350,23,378,21,"_createError"],[350,24,378,22,"authOrCode"],[350,34,378,32],[350,36,378,43],[351,4,378,43],[351,13,378,43,"_len4"],[351,18,378,43],[351,21,378,43,"arguments"],[351,30,378,43],[351,31,378,43,"length"],[351,37,378,43],[351,39,378,37,"rest"],[351,43,378,41],[351,50,378,41,"Array"],[351,55,378,41],[351,56,378,41,"_len4"],[351,61,378,41],[351,68,378,41,"_len4"],[351,73,378,41],[351,84,378,41,"_key5"],[351,89,378,41],[351,95,378,41,"_key5"],[351,100,378,41],[351,103,378,41,"_len4"],[351,108,378,41],[351,110,378,41,"_key5"],[351,115,378,41],[352,6,378,37,"rest"],[352,10,378,41],[352,11,378,41,"_key5"],[352,16,378,41],[352,24,378,41,"arguments"],[352,33,378,41],[352,34,378,41,"_key5"],[352,39,378,41],[353,4,378,41],[354,4,379,4],[354,11,379,11,"createErrorInternal"],[354,30,379,30],[354,31,379,31,"authOrCode"],[354,41,379,41],[354,43,379,43],[354,46,379,46,"rest"],[354,50,379,50],[354,51,379,51],[355,2,380,0],[356,2,381,0],[356,11,381,9,"_errorWithCustomMessage"],[356,34,381,32,"_errorWithCustomMessage"],[356,35,381,33,"auth"],[356,39,381,37],[356,41,381,39,"code"],[356,45,381,43],[356,47,381,45,"message"],[356,54,381,52],[356,56,381,54],[357,4,382,4],[357,8,382,10,"errorMap"],[357,16,382,18],[357,19,382,21],[358,6,383,8],[358,9,383,11,"prodErrorMap"],[358,21,383,23],[358,22,383,24],[358,23,383,25],[359,6,384,8],[359,7,384,9,"code"],[359,11,384,13],[359,14,384,16,"message"],[360,4,385,4],[360,5,385,5],[361,4,386,4],[361,8,386,10,"factory"],[361,15,386,17],[361,18,386,20],[361,22,386,24,"util"],[361,26,386,28],[361,27,386,29,"ErrorFactory"],[361,39,386,41],[361,40,386,42],[361,46,386,48],[361,48,386,50],[361,58,386,60],[361,60,386,62,"errorMap"],[361,68,386,70],[361,69,386,71],[362,4,387,4],[362,11,387,11,"factory"],[362,18,387,18],[362,19,387,19,"create"],[362,25,387,25],[362,26,387,26,"code"],[362,30,387,30],[362,32,387,32],[363,6,388,8,"appName"],[363,13,388,15],[363,15,388,17,"auth"],[363,19,388,21],[363,20,388,22,"name"],[364,4,389,4],[364,5,389,5],[364,6,389,6],[365,2,390,0],[366,2,391,0],[366,11,391,9,"_serverAppCurrentUserOperationNotSupportedError"],[366,58,391,56,"_serverAppCurrentUserOperationNotSupportedError"],[366,59,391,57,"auth"],[366,63,391,61],[366,65,391,63],[367,4,392,4],[367,11,392,11,"_errorWithCustomMessage"],[367,34,392,34],[367,35,392,35,"auth"],[367,39,392,39],[367,41,392,41],[367,86,392,86],[367,87,392,87],[367,132,392,132],[367,228,392,228],[367,229,392,229],[368,2,393,0],[369,2,394,0],[369,11,394,9,"_assertInstanceOf"],[369,28,394,26,"_assertInstanceOf"],[369,29,394,27,"auth"],[369,33,394,31],[369,35,394,33,"object"],[369,41,394,39],[369,43,394,41,"instance"],[369,51,394,49],[369,53,394,51],[370,4,395,4],[370,8,395,10,"constructorInstance"],[370,27,395,29],[370,30,395,32,"instance"],[370,38,395,40],[371,4,396,4],[371,8,396,8],[371,10,396,10,"object"],[371,16,396,16],[371,28,396,28,"constructorInstance"],[371,47,396,47],[371,48,396,48],[371,50,396,50],[372,6,397,8],[372,10,397,12,"constructorInstance"],[372,29,397,31],[372,30,397,32,"name"],[372,34,397,36],[372,39,397,41,"object"],[372,45,397,47],[372,46,397,48,"constructor"],[372,57,397,59],[372,58,397,60,"name"],[372,62,397,64],[372,64,397,66],[373,8,398,12,"_fail"],[373,13,398,17],[373,14,398,18,"auth"],[373,18,398,22],[373,20,398,24],[373,36,398,40],[373,37,398,41],[373,71,398,75],[373,72,398,76],[374,6,399,8],[375,6,400,8],[375,12,400,14,"_errorWithCustomMessage"],[375,35,400,37],[375,36,400,38,"auth"],[375,40,400,42],[375,42,400,44],[375,58,400,60],[375,59,400,61],[375,95,400,97],[375,106,400,108,"object"],[375,112,400,114],[375,113,400,115,"constructor"],[375,124,400,126],[375,125,400,127,"name"],[375,129,400,131],[375,165,400,167],[375,168,401,12],[375,221,401,65],[375,222,401,66],[376,4,402,4],[377,2,403,0],[378,2,404,0],[378,11,404,9,"createErrorInternal"],[378,30,404,28,"createErrorInternal"],[378,31,404,29,"authOrCode"],[378,41,404,39],[378,43,404,50],[379,4,404,50],[379,13,404,50,"_len5"],[379,18,404,50],[379,21,404,50,"arguments"],[379,30,404,50],[379,31,404,50,"length"],[379,37,404,50],[379,39,404,44,"rest"],[379,43,404,48],[379,50,404,48,"Array"],[379,55,404,48],[379,56,404,48,"_len5"],[379,61,404,48],[379,68,404,48,"_len5"],[379,73,404,48],[379,84,404,48,"_key6"],[379,89,404,48],[379,95,404,48,"_key6"],[379,100,404,48],[379,103,404,48,"_len5"],[379,108,404,48],[379,110,404,48,"_key6"],[379,115,404,48],[380,6,404,44,"rest"],[380,10,404,48],[380,11,404,48,"_key6"],[380,16,404,48],[380,24,404,48,"arguments"],[380,33,404,48],[380,34,404,48,"_key6"],[380,39,404,48],[381,4,404,48],[382,4,405,4],[382,8,405,8],[382,15,405,15,"authOrCode"],[382,25,405,25],[382,30,405,30],[382,38,405,38],[382,40,405,40],[383,6,406,8],[383,10,406,14,"code"],[383,14,406,18],[383,17,406,21,"rest"],[383,21,406,25],[383,22,406,26],[383,23,406,27],[383,24,406,28],[384,6,407,8],[384,10,407,14,"fullParams"],[384,20,407,24],[384,23,407,27],[384,24,407,28],[384,27,407,31,"rest"],[384,31,407,35],[384,32,407,36,"slice"],[384,37,407,41],[384,38,407,42],[384,39,407,43],[384,40,407,44],[384,41,407,45],[385,6,408,8],[385,10,408,12,"fullParams"],[385,20,408,22],[385,21,408,23],[385,22,408,24],[385,23,408,25],[385,25,408,27],[386,8,409,12,"fullParams"],[386,18,409,22],[386,19,409,23],[386,20,409,24],[386,21,409,25],[386,22,409,26,"appName"],[386,29,409,33],[386,32,409,36,"authOrCode"],[386,42,409,46],[386,43,409,47,"name"],[386,47,409,51],[387,6,410,8],[388,6,411,8],[388,13,411,15,"authOrCode"],[388,23,411,25],[388,24,411,26,"_errorFactory"],[388,37,411,39],[388,38,411,40,"create"],[388,44,411,46],[388,45,411,47,"code"],[388,49,411,51],[388,51,411,53],[388,54,411,56,"fullParams"],[388,64,411,66],[388,65,411,67],[389,4,412,4],[390,4,413,4],[390,11,413,11,"_DEFAULT_AUTH_ERROR_FACTORY"],[390,38,413,38],[390,39,413,39,"create"],[390,45,413,45],[390,46,413,46,"authOrCode"],[390,56,413,56],[390,58,413,58],[390,61,413,61,"rest"],[390,65,413,65],[390,66,413,66],[391,2,414,0],[392,2,415,0],[392,11,415,9,"_assert"],[392,18,415,16,"_assert"],[392,19,415,17,"assertion"],[392,28,415,26],[392,30,415,28,"authOrCode"],[392,40,415,38],[392,42,415,49],[393,4,416,4],[393,8,416,8],[393,9,416,9,"assertion"],[393,18,416,18],[393,20,416,20],[394,6,416,20],[394,15,416,20,"_len6"],[394,20,416,20],[394,23,416,20,"arguments"],[394,32,416,20],[394,33,416,20,"length"],[394,39,416,20],[394,41,415,43,"rest"],[394,45,415,47],[394,52,415,47,"Array"],[394,57,415,47],[394,58,415,47,"_len6"],[394,63,415,47],[394,70,415,47,"_len6"],[394,75,415,47],[394,86,415,47,"_key7"],[394,91,415,47],[394,97,415,47,"_key7"],[394,102,415,47],[394,105,415,47,"_len6"],[394,110,415,47],[394,112,415,47,"_key7"],[394,117,415,47],[395,8,415,43,"rest"],[395,12,415,47],[395,13,415,47,"_key7"],[395,18,415,47],[395,26,415,47,"arguments"],[395,35,415,47],[395,36,415,47,"_key7"],[395,41,415,47],[396,6,415,47],[397,6,417,8],[397,12,417,14,"createErrorInternal"],[397,31,417,33],[397,32,417,34,"authOrCode"],[397,42,417,44],[397,44,417,46],[397,47,417,49,"rest"],[397,51,417,53],[397,52,417,54],[398,4,418,4],[399,2,419,0],[400,2,420,0],[401,0,421,0],[402,0,422,0],[403,0,423,0],[404,0,424,0],[405,0,425,0],[406,2,426,0],[406,11,426,9,"debugFail"],[406,20,426,18,"debugFail"],[406,21,426,19,"failure"],[406,28,426,26],[406,30,426,28],[407,4,427,4],[408,4,428,4],[409,4,429,4],[409,8,429,10,"message"],[409,15,429,17],[409,18,429,20],[409,47,429,49],[409,50,429,52,"failure"],[409,57,429,59],[410,4,430,4,"_logError"],[410,13,430,13],[410,14,430,14,"message"],[410,21,430,21],[410,22,430,22],[411,4,431,4],[412,4,432,4],[413,4,433,4],[414,4,434,4],[414,10,434,10],[414,14,434,14,"Error"],[414,19,434,19],[414,20,434,20,"message"],[414,27,434,27],[414,28,434,28],[415,2,435,0],[416,2,436,0],[417,0,437,0],[418,0,438,0],[419,0,439,0],[420,0,440,0],[421,0,441,0],[422,0,442,0],[423,2,443,0],[423,11,443,9,"debugAssert"],[423,22,443,20,"debugAssert"],[423,23,443,21,"assertion"],[423,32,443,30],[423,34,443,32,"message"],[423,41,443,39],[423,43,443,41],[424,4,444,4],[424,8,444,8],[424,9,444,9,"assertion"],[424,18,444,18],[424,20,444,20],[425,6,445,8,"debugFail"],[425,15,445,17],[425,16,445,18,"message"],[425,23,445,25],[425,24,445,26],[426,4,446,4],[427,2,447,0],[429,2,449,0],[430,0,450,0],[431,0,451,0],[432,0,452,0],[433,0,453,0],[434,0,454,0],[435,0,455,0],[436,0,456,0],[437,0,457,0],[438,0,458,0],[439,0,459,0],[440,0,460,0],[441,0,461,0],[442,0,462,0],[443,0,463,0],[444,0,464,0],[445,2,465,0],[445,11,465,9,"_getCurrentUrl"],[445,25,465,23,"_getCurrentUrl"],[445,26,465,23],[445,28,465,26],[446,4,466,4],[446,11,466,12],[446,18,466,19,"self"],[446,22,466,23],[446,27,466,28],[446,38,466,39],[446,42,466,43,"self"],[446,46,466,47],[446,47,466,48,"location"],[446,55,466,56],[446,57,466,58,"href"],[446,61,466,62],[446,65,466,67],[446,67,466,69],[447,2,467,0],[448,2,468,0],[448,11,468,9,"_isHttpOrHttps"],[448,25,468,23,"_isHttpOrHttps"],[448,26,468,23],[448,28,468,26],[449,4,469,4],[449,11,469,11,"_getCurrentScheme"],[449,28,469,28],[449,29,469,29],[449,30,469,30],[449,35,469,35],[449,42,469,42],[449,46,469,46,"_getCurrentScheme"],[449,63,469,63],[449,64,469,64],[449,65,469,65],[449,70,469,70],[449,78,469,78],[450,2,470,0],[451,2,471,0],[451,11,471,9,"_getCurrentScheme"],[451,28,471,26,"_getCurrentScheme"],[451,29,471,26],[451,31,471,29],[452,4,472,4],[452,11,472,12],[452,18,472,19,"self"],[452,22,472,23],[452,27,472,28],[452,38,472,39],[452,42,472,43,"self"],[452,46,472,47],[452,47,472,48,"location"],[452,55,472,56],[452,57,472,58,"protocol"],[452,65,472,66],[452,69,472,71],[452,73,472,75],[453,2,473,0],[455,2,475,0],[456,0,476,0],[457,0,477,0],[458,0,478,0],[459,0,479,0],[460,0,480,0],[461,0,481,0],[462,0,482,0],[463,0,483,0],[464,0,484,0],[465,0,485,0],[466,0,486,0],[467,0,487,0],[468,0,488,0],[469,0,489,0],[470,0,490,0],[471,2,491,0],[472,0,492,0],[473,0,493,0],[474,2,494,0],[474,11,494,9,"_isOnline"],[474,20,494,18,"_isOnline"],[474,21,494,18],[474,23,494,21],[475,4,495,4],[475,8,495,8],[475,15,495,15,"navigator"],[475,24,495,24],[475,29,495,29],[475,40,495,40],[475,44,496,8,"navigator"],[475,53,496,17],[475,57,497,8],[475,65,497,16],[475,69,497,20,"navigator"],[475,78,497,29],[475,82,498,8],[475,89,498,15,"navigator"],[475,98,498,24],[475,99,498,25,"onLine"],[475,105,498,31],[475,110,498,36],[475,119,498,45],[476,4,499,8],[477,4,500,8],[478,4,501,8],[479,4,502,8],[480,4,503,8],[481,4,504,9,"_isHttpOrHttps"],[481,18,504,23],[481,19,504,24],[481,20,504,25],[481,24,504,29,"util"],[481,28,504,33],[481,29,504,34,"isBrowserExtension"],[481,47,504,52],[481,48,504,53],[481,49,504,54],[481,53,504,58],[481,65,504,70],[481,69,504,74,"navigator"],[481,78,504,83],[481,79,504,84],[481,81,504,86],[482,6,505,8],[482,13,505,15,"navigator"],[482,22,505,24],[482,23,505,25,"onLine"],[482,29,505,31],[483,4,506,4],[484,4,507,4],[485,4,508,4],[485,11,508,11],[485,15,508,15],[486,2,509,0],[487,2,510,0],[487,11,510,9,"_getUserLanguage"],[487,27,510,25,"_getUserLanguage"],[487,28,510,25],[487,30,510,28],[488,4,511,4],[488,8,511,8],[488,15,511,15,"navigator"],[488,24,511,24],[488,29,511,29],[488,40,511,40],[488,42,511,42],[489,6,512,8],[489,13,512,15],[489,17,512,19],[490,4,513,4],[491,4,514,4],[491,8,514,10,"navigatorLanguage"],[491,25,514,27],[491,28,514,30,"navigator"],[491,37,514,39],[492,4,515,4],[493,6,516,4],[494,6,517,5,"navigatorLanguage"],[494,23,517,22],[494,24,517,23,"languages"],[494,33,517,32],[494,37,517,36,"navigatorLanguage"],[494,54,517,53],[494,55,517,54,"languages"],[494,64,517,63],[494,65,517,64],[494,66,517,65],[494,67,517,66],[495,6,518,8],[496,6,519,8],[497,6,520,8,"navigatorLanguage"],[497,23,520,25],[497,24,520,26,"language"],[497,32,520,34],[498,6,521,8],[499,6,522,8],[500,4,522,12],[501,2,523,0],[503,2,525,0],[504,0,526,0],[505,0,527,0],[506,0,528,0],[507,0,529,0],[508,0,530,0],[509,0,531,0],[510,0,532,0],[511,0,533,0],[512,0,534,0],[513,0,535,0],[514,0,536,0],[515,0,537,0],[516,0,538,0],[517,0,539,0],[518,0,540,0],[519,2,541,0],[520,0,542,0],[521,0,543,0],[522,0,544,0],[523,0,545,0],[524,2,541,0],[524,6,546,6,"Delay"],[524,11,546,11],[525,4,547,4],[525,13,547,4,"Delay"],[525,19,547,16,"shortDelay"],[525,29,547,26],[525,31,547,28,"longDelay"],[525,40,547,37],[525,42,547,39],[526,6,547,39,"_classCallCheck"],[526,21,547,39],[526,28,547,39,"Delay"],[526,33,547,39],[527,6,548,8],[527,10,548,12],[527,11,548,13,"shortDelay"],[527,21,548,23],[527,24,548,26,"shortDelay"],[527,34,548,36],[528,6,549,8],[528,10,549,12],[528,11,549,13,"longDelay"],[528,20,549,22],[528,23,549,25,"longDelay"],[528,32,549,34],[529,6,550,8],[530,6,551,8,"debugAssert"],[530,17,551,19],[530,18,551,20,"longDelay"],[530,27,551,29],[530,30,551,32,"shortDelay"],[530,40,551,42],[530,42,551,44],[530,87,551,89],[530,88,551,90],[531,6,552,8],[531,10,552,12],[531,11,552,13,"isMobile"],[531,19,552,21],[531,22,552,24,"util"],[531,26,552,28],[531,27,552,29,"isMobileCordova"],[531,42,552,44],[531,43,552,45],[531,44,552,46],[531,48,552,50,"util"],[531,52,552,54],[531,53,552,55,"isReactNative"],[531,66,552,68],[531,67,552,69],[531,68,552,70],[532,4,553,4],[533,4,553,5],[533,11,553,5,"_createClass"],[533,23,553,5],[533,24,553,5,"Delay"],[533,29,553,5],[534,6,553,5,"key"],[534,9,553,5],[535,6,553,5,"value"],[535,11,553,5],[535,13,554,4],[535,22,554,4,"get"],[535,25,554,7,"get"],[535,26,554,7],[535,28,554,10],[536,8,555,8],[536,12,555,12],[536,13,555,13,"_isOnline"],[536,22,555,22],[536,23,555,23],[536,24,555,24],[536,26,555,26],[537,10,556,12],[538,10,557,12],[538,17,557,19,"Math"],[538,21,557,23],[538,22,557,24,"min"],[538,25,557,27],[538,26,557,28],[538,30,557,32],[538,31,557,33],[538,55,557,57],[538,59,557,61],[538,60,557,62,"shortDelay"],[538,70,557,72],[538,71,557,73],[539,8,558,8],[540,8,559,8],[541,8,560,8],[542,8,561,8],[543,8,562,8],[544,8,563,8],[544,15,563,15],[544,19,563,19],[544,20,563,20,"isMobile"],[544,28,563,28],[544,31,563,31],[544,35,563,35],[544,36,563,36,"longDelay"],[544,45,563,45],[544,48,563,48],[544,52,563,52],[544,53,563,53,"shortDelay"],[544,63,563,63],[545,6,564,4],[546,4,564,5],[547,2,564,5],[548,2,567,0],[549,0,568,0],[550,0,569,0],[551,0,570,0],[552,0,571,0],[553,0,572,0],[554,0,573,0],[555,0,574,0],[556,0,575,0],[557,0,576,0],[558,0,577,0],[559,0,578,0],[560,0,579,0],[561,0,580,0],[562,0,581,0],[563,0,582,0],[564,2,583,0],[564,11,583,9,"_emulatorUrl"],[564,23,583,21,"_emulatorUrl"],[564,24,583,22,"config"],[564,30,583,28],[564,32,583,30,"path"],[564,36,583,34],[564,38,583,36],[565,4,584,4,"debugAssert"],[565,15,584,15],[565,16,584,16,"config"],[565,22,584,22],[565,23,584,23,"emulator"],[565,31,584,31],[565,33,584,33],[565,69,584,69],[565,70,584,70],[566,4,585,4],[566,8,585,12,"url"],[566,11,585,15],[566,14,585,20,"config"],[566,20,585,26],[566,21,585,27,"emulator"],[566,29,585,35],[566,30,585,12,"url"],[566,33,585,15],[567,4,586,4],[567,8,586,8],[567,9,586,9,"path"],[567,13,586,13],[567,15,586,15],[568,6,587,8],[568,13,587,15,"url"],[568,16,587,18],[569,4,588,4],[570,4,589,4],[570,11,589,11],[570,14,589,14,"url"],[570,17,589,17],[570,20,589,20,"path"],[570,24,589,24],[570,25,589,25,"startsWith"],[570,35,589,35],[570,36,589,36],[570,39,589,39],[570,40,589,40],[570,43,589,43,"path"],[570,47,589,47],[570,48,589,48,"slice"],[570,53,589,53],[570,54,589,54],[570,55,589,55],[570,56,589,56],[570,59,589,59,"path"],[570,63,589,63],[570,65,589,65],[571,2,590,0],[573,2,592,0],[574,0,593,0],[575,0,594,0],[576,0,595,0],[577,0,596,0],[578,0,597,0],[579,0,598,0],[580,0,599,0],[581,0,600,0],[582,0,601,0],[583,0,602,0],[584,0,603,0],[585,0,604,0],[586,0,605,0],[587,0,606,0],[588,0,607,0],[589,2,592,0],[589,6,608,6,"FetchProvider"],[589,19,608,19],[590,4,608,19],[590,13,608,19,"FetchProvider"],[590,27,608,19],[591,6,608,19,"_classCallCheck"],[591,21,608,19],[591,28,608,19,"FetchProvider"],[591,41,608,19],[592,4,608,19],[593,4,608,19],[593,11,608,19,"_createClass"],[593,23,608,19],[593,24,608,19,"FetchProvider"],[593,37,608,19],[594,6,608,19,"key"],[594,9,608,19],[595,6,608,19,"value"],[595,11,608,19],[595,13,609,4],[595,22,609,11,"initialize"],[595,32,609,21,"initialize"],[595,33,609,22,"fetchImpl"],[595,42,609,31],[595,44,609,33,"headersImpl"],[595,55,609,44],[595,57,609,46,"responseImpl"],[595,69,609,58],[595,71,609,60],[596,8,610,8],[596,12,610,12],[596,13,610,13,"fetchImpl"],[596,22,610,22],[596,25,610,25,"fetchImpl"],[596,34,610,34],[597,8,611,8],[597,12,611,12,"headersImpl"],[597,23,611,23],[597,25,611,25],[598,10,612,12],[598,14,612,16],[598,15,612,17,"headersImpl"],[598,26,612,28],[598,29,612,31,"headersImpl"],[598,40,612,42],[599,8,613,8],[600,8,614,8],[600,12,614,12,"responseImpl"],[600,24,614,24],[600,26,614,26],[601,10,615,12],[601,14,615,16],[601,15,615,17,"responseImpl"],[601,27,615,29],[601,30,615,32,"responseImpl"],[601,42,615,44],[602,8,616,8],[603,6,617,4],[604,4,617,5],[605,6,617,5,"key"],[605,9,617,5],[606,6,617,5,"value"],[606,11,617,5],[606,23,617,5,"_fetch"],[606,29,617,5],[607,8,617,5],[607,17,618,11,"fetch"],[607,22,618,16,"fetch"],[607,23,618,16],[608,10,618,16],[608,17,618,16,"_fetch"],[608,23,618,16],[608,24,618,16,"apply"],[608,29,618,16],[608,36,618,16,"arguments"],[608,45,618,16],[609,8,618,16],[610,8,618,11,"fetch"],[610,13,618,16],[610,14,618,16,"toString"],[610,22,618,16],[611,10,618,16],[611,17,618,16,"_fetch"],[611,23,618,16],[611,24,618,16,"toString"],[611,32,618,16],[612,8,618,16],[613,8,618,16],[613,15,618,11,"fetch"],[613,20,618,16],[614,6,618,16],[614,8,618,4],[614,20,618,19],[615,8,619,8],[615,12,619,12],[615,16,619,16],[615,17,619,17,"fetchImpl"],[615,26,619,26],[615,28,619,28],[616,10,620,12],[616,17,620,19],[616,21,620,23],[616,22,620,24,"fetchImpl"],[616,31,620,33],[617,8,621,8],[618,8,622,8],[618,12,622,12],[618,19,622,19,"self"],[618,23,622,23],[618,28,622,28],[618,39,622,39],[618,43,622,43],[618,50,622,50],[618,54,622,54,"self"],[618,58,622,58],[618,60,622,60],[619,10,623,12],[619,17,623,19,"self"],[619,21,623,23],[619,22,623,24,"fetch"],[619,27,623,29],[620,8,624,8],[621,8,625,8],[621,12,625,12],[621,19,625,19,"globalThis"],[621,29,625,29],[621,34,625,34],[621,45,625,45],[621,49,625,49,"globalThis"],[621,59,625,59],[621,60,625,60,"fetch"],[621,65,625,65],[621,67,625,67],[622,10,626,12],[622,17,626,19,"globalThis"],[622,27,626,29],[622,28,626,30,"fetch"],[622,33,626,35],[623,8,627,8],[624,8,628,8],[624,12,628,12],[624,19,628,19,"fetch"],[624,24,628,24],[624,29,628,29],[624,40,628,40],[624,42,628,42],[625,10,629,12],[625,17,629,19,"fetch"],[625,22,629,24],[626,8,630,8],[627,8,631,8,"debugFail"],[627,17,631,17],[627,18,631,18],[627,131,631,131],[627,132,631,132],[628,6,632,4],[628,7,632,5],[629,4,632,5],[630,6,632,5,"key"],[630,9,632,5],[631,6,632,5,"value"],[631,11,632,5],[631,13,633,4],[631,22,633,11,"headers"],[631,29,633,18,"headers"],[631,30,633,18],[631,32,633,21],[632,8,634,8],[632,12,634,12],[632,16,634,16],[632,17,634,17,"headersImpl"],[632,28,634,28],[632,30,634,30],[633,10,635,12],[633,17,635,19],[633,21,635,23],[633,22,635,24,"headersImpl"],[633,33,635,35],[634,8,636,8],[635,8,637,8],[635,12,637,12],[635,19,637,19,"self"],[635,23,637,23],[635,28,637,28],[635,39,637,39],[635,43,637,43],[635,52,637,52],[635,56,637,56,"self"],[635,60,637,60],[635,62,637,62],[636,10,638,12],[636,17,638,19,"self"],[636,21,638,23],[636,22,638,24,"Headers"],[636,29,638,31],[637,8,639,8],[638,8,640,8],[638,12,640,12],[638,19,640,19,"globalThis"],[638,29,640,29],[638,34,640,34],[638,45,640,45],[638,49,640,49,"globalThis"],[638,59,640,59],[638,60,640,60,"Headers"],[638,67,640,67],[638,69,640,69],[639,10,641,12],[639,17,641,19,"globalThis"],[639,27,641,29],[639,28,641,30,"Headers"],[639,35,641,37],[640,8,642,8],[641,8,643,8],[641,12,643,12],[641,19,643,19,"Headers"],[641,26,643,26],[641,31,643,31],[641,42,643,42],[641,44,643,44],[642,10,644,12],[642,17,644,19,"Headers"],[642,24,644,26],[643,8,645,8],[644,8,646,8,"debugFail"],[644,17,646,17],[644,18,646,18],[644,133,646,133],[644,134,646,134],[645,6,647,4],[646,4,647,5],[647,6,647,5,"key"],[647,9,647,5],[648,6,647,5,"value"],[648,11,647,5],[648,13,648,4],[648,22,648,11,"response"],[648,30,648,19,"response"],[648,31,648,19],[648,33,648,22],[649,8,649,8],[649,12,649,12],[649,16,649,16],[649,17,649,17,"responseImpl"],[649,29,649,29],[649,31,649,31],[650,10,650,12],[650,17,650,19],[650,21,650,23],[650,22,650,24,"responseImpl"],[650,34,650,36],[651,8,651,8],[652,8,652,8],[652,12,652,12],[652,19,652,19,"self"],[652,23,652,23],[652,28,652,28],[652,39,652,39],[652,43,652,43],[652,53,652,53],[652,57,652,57,"self"],[652,61,652,61],[652,63,652,63],[653,10,653,12],[653,17,653,19,"self"],[653,21,653,23],[653,22,653,24,"Response"],[653,30,653,32],[654,8,654,8],[655,8,655,8],[655,12,655,12],[655,19,655,19,"globalThis"],[655,29,655,29],[655,34,655,34],[655,45,655,45],[655,49,655,49,"globalThis"],[655,59,655,59],[655,60,655,60,"Response"],[655,68,655,68],[655,70,655,70],[656,10,656,12],[656,17,656,19,"globalThis"],[656,27,656,29],[656,28,656,30,"Response"],[656,36,656,38],[657,8,657,8],[658,8,658,8],[658,12,658,12],[658,19,658,19,"Response"],[658,27,658,27],[658,32,658,32],[658,43,658,43],[658,45,658,45],[659,10,659,12],[659,17,659,19,"Response"],[659,25,659,27],[660,8,660,8],[661,8,661,8,"debugFail"],[661,17,661,17],[661,18,661,18],[661,134,661,134],[661,135,661,135],[662,6,662,4],[663,4,662,5],[664,2,662,5],[665,2,665,0],[666,0,666,0],[667,0,667,0],[668,0,668,0],[669,0,669,0],[670,0,670,0],[671,0,671,0],[672,0,672,0],[673,0,673,0],[674,0,674,0],[675,0,675,0],[676,0,676,0],[677,0,677,0],[678,0,678,0],[679,0,679,0],[680,0,680,0],[681,2,681,0],[682,0,682,0],[683,0,683,0],[684,2,684,0],[684,6,684,6,"SERVER_ERROR_MAP"],[684,22,684,22],[684,25,684,25],[685,4,685,4],[686,4,686,4],[686,5,686,5],[686,26,686,26],[686,27,686,27],[686,67,686,67],[686,90,686,90],[686,91,686,91],[688,4,687,4],[689,4,688,4],[689,5,688,5],[689,27,688,27],[689,28,688,28],[689,69,688,69],[689,85,688,85],[689,86,688,86],[691,4,689,4],[692,4,690,4],[692,5,690,5],[692,25,690,25],[692,26,690,26],[692,65,690,65],[692,80,690,80],[692,81,690,81],[694,4,691,4],[695,4,692,4],[695,5,692,5],[695,27,692,27],[695,28,692,28],[695,69,692,69],[695,85,692,85],[695,86,692,86],[697,4,693,4],[698,4,694,4],[698,5,694,5],[698,23,694,23],[698,24,694,24],[698,61,694,61],[698,77,694,77],[698,78,694,78],[700,4,695,4],[701,4,696,4],[701,5,696,5],[701,23,696,23],[701,24,696,24],[701,61,696,61],[701,79,696,79],[701,80,696,80],[703,4,697,4],[704,4,698,4],[705,4,699,4],[705,5,699,5],[705,32,699,32],[705,33,699,33],[705,79,699,79],[705,99,699,99],[705,100,699,100],[707,4,700,4],[708,4,701,4],[708,5,701,5],[708,19,701,19],[708,20,701,20],[708,53,701,53],[708,75,701,75],[708,76,701,76],[709,4,702,4],[709,5,702,5],[709,30,702,30],[709,31,702,31],[709,75,702,75],[709,98,702,98],[709,99,702,99],[711,4,703,4],[712,4,704,4],[712,5,704,5],[712,27,704,27],[712,28,704,28],[712,69,704,69],[712,89,704,89],[712,90,704,90],[713,4,705,4],[713,5,705,5],[713,28,705,28],[713,29,705,29],[713,71,705,71],[713,91,705,91],[713,92,705,92],[714,4,706,4],[714,5,706,5],[714,39,706,39],[714,40,706,40],[714,93,706,93],[714,120,706,120],[714,121,706,121],[716,4,707,4],[717,4,708,4],[717,5,708,5],[717,23,708,23],[717,24,708,24],[717,61,708,61],[717,77,708,77],[717,78,708,78],[719,4,709,4],[720,4,710,4],[720,5,710,5],[720,22,710,22],[720,23,710,23],[720,59,710,59],[720,75,710,75],[720,76,710,76],[721,4,711,4],[721,5,711,5],[721,34,711,34],[721,35,711,35],[721,83,711,83],[721,102,711,102],[721,103,711,103],[722,4,712,4],[722,5,712,5],[722,23,712,23],[722,24,712,24],[722,61,712,61],[722,82,712,82],[722,83,712,83],[723,4,713,4],[723,5,713,5],[723,23,713,23],[723,24,713,24],[723,61,713,61],[723,82,713,82],[723,83,713,83],[725,4,714,4],[726,4,715,4],[726,5,715,5],[726,23,715,23],[726,24,715,24],[726,61,715,61],[726,77,715,77],[726,78,715,78],[728,4,716,4],[729,4,717,4],[729,5,717,5],[729,37,717,37],[729,38,717,38],[729,89,717,89],[729,112,717,112],[729,113,717,113],[730,4,718,4],[730,5,718,5],[730,23,718,23],[730,24,718,24],[730,61,718,61],[730,81,718,81],[730,82,718,82],[731,4,719,4],[731,5,719,5],[731,20,719,20],[731,21,719,21],[731,55,719,55],[731,75,719,75],[731,76,719,76],[732,4,720,4],[732,5,720,5],[732,21,720,21],[732,22,720,22],[732,57,720,57],[732,77,720,77],[732,78,720,78],[734,4,721,4],[735,4,722,4],[735,5,722,5],[735,34,722,34],[735,35,722,35],[735,83,722,83],[735,102,722,102],[735,103,722,103],[736,4,723,4],[736,5,723,5],[736,42,723,42],[736,43,723,43],[736,99,723,99],[736,136,723,136],[736,137,723,137],[738,4,724,4],[739,4,725,4],[739,5,725,5],[739,19,725,19],[739,20,725,20],[739,53,725,53],[739,80,725,80],[739,81,725,81],[740,4,726,4],[740,5,726,5],[740,27,726,27],[740,28,726,28],[740,69,726,69],[740,94,726,94],[740,95,726,95],[741,4,727,4],[741,5,727,5],[741,30,727,30],[741,31,727,31],[741,75,727,75],[741,95,727,95],[741,96,727,96],[742,4,728,4],[742,5,728,5],[742,27,728,27],[742,28,728,28],[742,69,728,69],[742,94,728,94],[742,95,728,95],[743,4,729,4],[743,5,729,5],[743,22,729,22],[743,23,729,23],[743,59,729,59],[743,73,729,73],[743,74,729,74],[745,4,730,4],[746,4,731,4],[747,4,732,4],[748,4,733,4],[748,5,733,5],[748,35,733,35],[748,36,733,36],[748,85,733,85],[748,111,733,111],[748,112,733,112],[749,4,734,4],[749,5,734,5],[749,26,734,26],[749,27,734,27],[749,67,734,67],[749,94,734,94],[749,95,734,95],[751,4,735,4],[752,4,736,4],[752,5,736,5],[752,30,736,30],[752,31,736,31],[752,75,736,75],[752,100,736,100],[752,101,736,101],[754,4,737,4],[755,4,738,4],[755,5,738,5],[755,27,738,27],[755,28,738,28],[755,69,738,69],[755,97,738,97],[755,98,738,98],[757,4,739,4],[758,4,740,4],[758,5,740,5],[758,37,740,37],[758,38,740,38],[758,89,740,89],[758,119,740,119],[758,120,740,120],[759,4,741,4],[759,5,741,5],[759,31,741,31],[759,32,741,32],[759,77,741,77],[759,106,741,106],[759,107,741,107],[760,4,742,4],[760,5,742,5],[760,32,742,32],[760,33,742,33],[760,79,742,79],[760,106,742,106],[760,107,742,107],[761,4,743,4],[761,5,743,5],[761,37,743,37],[761,38,743,38],[761,89,743,89],[761,119,743,119],[761,120,743,120],[762,4,744,4],[762,5,744,5],[762,27,744,27],[762,28,744,28],[762,69,744,69],[762,99,744,99],[762,100,744,100],[763,4,745,4],[763,5,745,5],[763,35,745,35],[763,36,745,36],[763,85,745,85],[763,123,745,123],[763,124,745,124],[765,4,746,4],[766,4,747,4],[766,5,747,5],[766,39,747,39],[766,40,747,40],[766,93,747,93],[766,109,747,109],[766,110,747,110],[768,4,748,4],[769,4,749,4],[769,5,749,5],[769,28,749,28],[769,29,749,29],[769,71,749,71],[769,94,749,94],[769,95,749,95],[770,4,750,4],[770,5,750,5],[770,30,750,30],[770,31,750,31],[770,75,750,75],[770,100,750,100],[770,101,750,101],[771,4,751,4],[771,5,751,5],[771,30,751,30],[771,31,751,31],[771,75,751,75],[771,100,751,100],[771,101,751,101],[772,4,752,4],[772,5,752,5],[772,31,752,31],[772,32,752,32],[772,77,752,77],[772,103,752,103],[772,104,752,104],[773,4,753,4],[773,5,753,5],[773,26,753,26],[773,27,753,27],[773,67,753,67],[773,88,753,88],[773,89,753,89],[774,4,754,4],[774,5,754,5],[774,32,754,32],[774,33,754,33],[774,79,754,79],[774,106,754,106],[774,107,754,107],[775,4,755,4],[775,5,755,5],[775,32,755,32],[775,33,755,33],[775,79,755,79],[775,106,755,106],[775,107,755,107],[776,4,756,4],[776,5,756,5],[776,23,756,23],[776,24,756,24],[776,61,756,61],[776,79,756,79],[776,80,756,80],[777,2,757,0],[777,3,757,1],[779,2,759,0],[780,0,760,0],[781,0,761,0],[782,0,762,0],[783,0,763,0],[784,0,764,0],[785,0,765,0],[786,0,766,0],[787,0,767,0],[788,0,768,0],[789,0,769,0],[790,0,770,0],[791,0,771,0],[792,0,772,0],[793,0,773,0],[794,0,774,0],[795,2,775,0],[795,6,775,6,"CookieAuthProxiedEndpoints"],[795,32,775,32],[795,35,775,35],[795,36,776,4],[795,72,776,40],[795,73,776,41],[795,115,777,4],[795,149,777,38],[795,150,777,39],[795,190,778,4],[795,218,778,32],[795,219,778,33],[795,252,779,4],[795,285,779,37],[795,286,779,38],[795,324,780,4],[795,360,780,40],[795,361,780,41],[795,403,781,4],[795,414,781,15],[795,415,781,16],[795,436,782,1],[796,2,783,0],[796,6,783,6,"DEFAULT_API_TIMEOUT_MS"],[796,28,783,28],[796,31,783,31],[796,35,783,35,"Delay"],[796,40,783,40],[796,41,783,41],[796,46,783,46],[796,48,783,48],[796,53,783,53],[796,54,783,54],[797,2,784,0],[797,11,784,9,"_addTidIfNecessary"],[797,29,784,27,"_addTidIfNecessary"],[797,30,784,28,"auth"],[797,34,784,32],[797,36,784,34,"request"],[797,43,784,41],[797,45,784,43],[798,4,785,4],[798,8,785,8,"auth"],[798,12,785,12],[798,13,785,13,"tenantId"],[798,21,785,21],[798,25,785,25],[798,26,785,26,"request"],[798,33,785,33],[798,34,785,34,"tenantId"],[798,42,785,42],[798,44,785,44],[799,6,786,8],[799,13,786,15],[800,8,787,12],[800,11,787,15,"request"],[800,18,787,22],[801,8,788,12,"tenantId"],[801,16,788,20],[801,18,788,22,"auth"],[801,22,788,26],[801,23,788,27,"tenantId"],[802,6,789,8],[802,7,789,9],[803,4,790,4],[804,4,791,4],[804,11,791,11,"request"],[804,18,791,18],[805,2,792,0],[806,2,792,1],[806,11,793,15,"_performApiRequest"],[806,29,793,33,"_performApiRequest"],[806,30,793,33,"_x"],[806,32,793,33],[806,34,793,33,"_x2"],[806,37,793,33],[806,39,793,33,"_x3"],[806,42,793,33],[806,44,793,33,"_x4"],[806,47,793,33],[807,4,793,33],[807,11,793,33,"_performApiRequest2"],[807,30,793,33],[807,31,793,33,"apply"],[807,36,793,33],[807,43,793,33,"arguments"],[807,52,793,33],[808,2,793,33],[809,2,793,33],[809,11,793,33,"_performApiRequest2"],[809,31,793,33],[810,4,793,33,"_performApiRequest2"],[810,23,793,33],[810,26,793,33,"_asyncToGenerator"],[810,43,793,33],[810,44,793,0],[810,55,793,34,"auth"],[810,59,793,38],[810,61,793,40,"method"],[810,67,793,46],[810,69,793,48,"path"],[810,73,793,52],[810,75,793,54,"request"],[810,82,793,61],[810,84,793,84],[811,6,793,84],[811,10,793,63,"customErrorMap"],[811,24,793,77],[811,27,793,77,"arguments"],[811,36,793,77],[811,37,793,77,"length"],[811,43,793,77],[811,51,793,77,"arguments"],[811,60,793,77],[811,68,793,77,"undefined"],[811,77,793,77],[811,80,793,77,"arguments"],[811,89,793,77],[811,95,793,80],[811,96,793,81],[811,97,793,82],[812,6,794,4],[812,13,794,11,"_performFetchWithErrorHandling"],[812,43,794,41],[812,44,794,42,"auth"],[812,48,794,46],[812,50,794,48,"customErrorMap"],[812,64,794,62],[812,79,794,62,"_asyncToGenerator"],[812,96,794,62],[812,97,794,64],[812,110,794,76],[813,8,795,8],[813,12,795,12,"body"],[813,16,795,16],[813,19,795,19],[813,20,795,20],[813,21,795,21],[814,8,796,8],[814,12,796,12,"params"],[814,18,796,18],[814,21,796,21],[814,22,796,22],[814,23,796,23],[815,8,797,8],[815,12,797,12,"request"],[815,19,797,19],[815,21,797,21],[816,10,798,12],[816,14,798,16,"method"],[816,20,798,22],[816,25,798,27],[816,30,798,32],[816,31,798,33],[816,53,798,55],[817,12,799,16,"params"],[817,18,799,22],[817,21,799,25,"request"],[817,28,799,32],[818,10,800,12],[818,11,800,13],[818,17,801,17],[819,12,802,16,"body"],[819,16,802,20],[819,19,802,23],[820,14,803,20,"body"],[820,18,803,24],[820,20,803,26,"JSON"],[820,24,803,30],[820,25,803,31,"stringify"],[820,34,803,40],[820,35,803,41,"request"],[820,42,803,48],[821,12,804,16],[821,13,804,17],[822,10,805,12],[823,8,806,8],[824,8,807,8],[824,12,807,14,"query"],[824,17,807,19],[824,20,807,22,"util"],[824,24,807,26],[824,25,807,27,"querystring"],[824,36,807,38],[824,37,807,39],[825,10,808,12,"key"],[825,13,808,15],[825,15,808,17,"auth"],[825,19,808,21],[825,20,808,22,"config"],[825,26,808,28],[825,27,808,29,"apiKey"],[825,33,808,35],[826,10,809,12],[826,13,809,15,"params"],[827,8,810,8],[827,9,810,9],[827,10,810,10],[827,11,810,11,"slice"],[827,16,810,16],[827,17,810,17],[827,18,810,18],[827,19,810,19],[828,8,811,8],[828,12,811,14,"headers"],[828,19,811,21],[828,28,811,30,"auth"],[828,32,811,34],[828,33,811,35,"_getAdditionalHeaders"],[828,54,811,56],[828,55,811,57],[828,56,811,58],[829,8,812,8,"headers"],[829,15,812,15],[829,16,812,16],[829,30,812,30],[829,31,812,31],[829,61,812,61],[829,64,812,64],[829,82,812,82],[830,8,813,8],[830,12,813,12,"auth"],[830,16,813,16],[830,17,813,17,"languageCode"],[830,29,813,29],[830,31,813,31],[831,10,814,12,"headers"],[831,17,814,19],[831,18,814,20],[831,37,814,39],[831,38,814,40],[831,73,814,75],[831,76,814,78,"auth"],[831,80,814,82],[831,81,814,83,"languageCode"],[831,93,814,95],[832,8,815,8],[833,8,816,8],[833,12,816,14,"fetchArgs"],[833,21,816,23],[833,24,816,26],[834,10,817,12,"method"],[834,16,817,18],[835,10,818,12,"headers"],[835,17,818,19],[836,10,819,12],[836,13,819,15,"body"],[837,8,820,8],[837,9,820,9],[838,8,821,8],[839,0,822,0],[840,0,823,0],[841,0,824,0],[842,8,825,8],[842,12,825,12],[842,13,825,13,"util"],[842,17,825,17],[842,18,825,18,"isCloudflareWorker"],[842,36,825,36],[842,37,825,37],[842,38,825,38],[842,40,825,40],[843,10,826,12,"fetchArgs"],[843,19,826,21],[843,20,826,22,"referrerPolicy"],[843,34,826,36],[843,37,826,39],[843,50,826,52],[844,8,827,8],[845,8,828,8],[845,12,828,12,"auth"],[845,16,828,16],[845,17,828,17,"emulatorConfig"],[845,31,828,31],[845,35,828,35,"util"],[845,39,828,39],[845,40,828,40,"isCloudWorkstation"],[845,58,828,58],[845,59,828,59,"auth"],[845,63,828,63],[845,64,828,64,"emulatorConfig"],[845,78,828,78],[845,79,828,79,"host"],[845,83,828,83],[845,84,828,84],[845,86,828,86],[846,10,829,12,"fetchArgs"],[846,19,829,21],[846,20,829,22,"credentials"],[846,31,829,33],[846,34,829,36],[846,43,829,45],[847,8,830,8],[848,8,831,8],[848,15,831,15,"FetchProvider"],[848,28,831,28],[848,29,831,29,"fetch"],[848,34,831,34],[848,35,831,35],[848,36,831,36],[848,43,831,43,"_getFinalTarget"],[848,58,831,58],[848,59,831,59,"auth"],[848,63,831,63],[848,65,831,65,"auth"],[848,69,831,69],[848,70,831,70,"config"],[848,76,831,76],[848,77,831,77,"apiHost"],[848,84,831,84],[848,86,831,86,"path"],[848,90,831,90],[848,92,831,92,"query"],[848,97,831,97],[848,98,831,98],[848,100,831,100,"fetchArgs"],[848,109,831,109],[848,110,831,110],[849,6,832,4],[849,7,832,5],[849,9,832,6],[850,4,833,0],[850,5,833,1],[851,4,833,1],[851,11,833,1,"_performApiRequest2"],[851,30,833,1],[851,31,833,1,"apply"],[851,36,833,1],[851,43,833,1,"arguments"],[851,52,833,1],[852,2,833,1],[853,2,833,1],[853,11,834,15,"_performFetchWithErrorHandling"],[853,41,834,45,"_performFetchWithErrorHandling"],[853,42,834,45,"_x5"],[853,45,834,45],[853,47,834,45,"_x6"],[853,50,834,45],[853,52,834,45,"_x7"],[853,55,834,45],[854,4,834,45],[854,11,834,45,"_performFetchWithErrorHandling2"],[854,42,834,45],[854,43,834,45,"apply"],[854,48,834,45],[854,55,834,45,"arguments"],[854,64,834,45],[855,2,834,45],[856,2,834,45],[856,11,834,45,"_performFetchWithErrorHandling2"],[856,43,834,45],[857,4,834,45,"_performFetchWithErrorHandling2"],[857,35,834,45],[857,38,834,45,"_asyncToGenerator"],[857,55,834,45],[857,56,834,0],[857,67,834,46,"auth"],[857,71,834,50],[857,73,834,52,"customErrorMap"],[857,87,834,66],[857,89,834,68,"fetchFn"],[857,96,834,75],[857,98,834,77],[858,6,835,4,"auth"],[858,10,835,8],[858,11,835,9,"_canInitEmulator"],[858,27,835,25],[858,30,835,28],[858,35,835,33],[859,6,836,4],[859,10,836,10,"errorMap"],[859,18,836,18],[859,21,836,21],[860,8,836,23],[860,11,836,26,"SERVER_ERROR_MAP"],[860,27,836,42],[861,8,836,44],[861,11,836,47,"customErrorMap"],[862,6,836,62],[862,7,836,63],[863,6,837,4],[863,10,837,8],[864,8,838,8],[864,12,838,14,"networkTimeout"],[864,26,838,28],[864,29,838,31],[864,33,838,35,"NetworkTimeout"],[864,47,838,49],[864,48,838,50,"auth"],[864,52,838,54],[864,53,838,55],[865,8,839,8],[865,12,839,14,"response"],[865,20,839,22],[865,29,839,31,"Promise"],[865,36,839,38],[865,37,839,39,"race"],[865,41,839,43],[865,42,839,44],[865,43,840,12,"fetchFn"],[865,50,840,19],[865,51,840,20],[865,52,840,21],[865,54,841,12,"networkTimeout"],[865,68,841,26],[865,69,841,27,"promise"],[865,76,841,34],[865,77,842,9],[865,78,842,10],[866,8,843,8],[867,8,844,8],[868,8,845,8,"networkTimeout"],[868,22,845,22],[868,23,845,23,"clearNetworkTimeout"],[868,42,845,42],[868,43,845,43],[868,44,845,44],[869,8,846,8],[869,12,846,14,"json"],[869,16,846,18],[869,25,846,27,"response"],[869,33,846,35],[869,34,846,36,"json"],[869,38,846,40],[869,39,846,41],[869,40,846,42],[870,8,847,8],[870,12,847,12],[870,30,847,30],[870,34,847,34,"json"],[870,38,847,38],[870,40,847,40],[871,10,848,12],[871,16,848,18,"_makeTaggedError"],[871,32,848,34],[871,33,848,35,"auth"],[871,37,848,39],[871,39,848,41],[871,81,848,83],[871,82,848,84],[871,121,848,123,"json"],[871,125,848,127],[871,126,848,128],[872,8,849,8],[873,8,850,8],[873,12,850,12,"response"],[873,20,850,20],[873,21,850,21,"ok"],[873,23,850,23],[873,27,850,27],[873,29,850,29],[873,43,850,43],[873,47,850,47,"json"],[873,51,850,51],[873,52,850,52],[873,54,850,54],[874,10,851,12],[874,17,851,19,"json"],[874,21,851,23],[875,8,852,8],[875,9,852,9],[875,15,853,13],[876,10,854,12],[876,14,854,18,"errorMessage"],[876,26,854,30],[876,29,854,33,"response"],[876,37,854,41],[876,38,854,42,"ok"],[876,40,854,44],[876,43,854,47,"json"],[876,47,854,51],[876,48,854,52,"errorMessage"],[876,60,854,64],[876,63,854,67,"json"],[876,67,854,71],[876,68,854,72,"error"],[876,73,854,77],[876,74,854,78,"message"],[876,81,854,85],[877,10,855,12],[877,14,855,12,"_errorMessage$split"],[877,33,855,12],[877,36,855,58,"errorMessage"],[877,48,855,70],[877,49,855,71,"split"],[877,54,855,76],[877,55,855,77],[877,60,855,82],[877,61,855,83],[878,12,855,83,"_errorMessage$split2"],[878,32,855,83],[878,35,855,83,"_slicedToArray"],[878,49,855,83],[878,50,855,83,"_errorMessage$split"],[878,69,855,83],[879,12,855,19,"serverErrorCode"],[879,27,855,34],[879,30,855,34,"_errorMessage$split2"],[879,50,855,34],[880,12,855,36,"serverErrorMessage"],[880,30,855,54],[880,33,855,54,"_errorMessage$split2"],[880,53,855,54],[881,10,856,12],[881,14,856,16,"serverErrorCode"],[881,29,856,31],[881,34,856,36],[881,68,856,70],[881,69,856,71],[881,121,856,123],[882,12,857,16],[882,18,857,22,"_makeTaggedError"],[882,34,857,38],[882,35,857,39,"auth"],[882,39,857,43],[882,41,857,45],[882,68,857,72],[882,69,857,73],[882,116,857,120,"json"],[882,120,857,124],[882,121,857,125],[883,10,858,12],[883,11,858,13],[883,17,859,17],[883,21,859,21,"serverErrorCode"],[883,36,859,36],[883,41,859,41],[883,55,859,55],[883,56,859,56],[883,88,859,88],[884,12,860,16],[884,18,860,22,"_makeTaggedError"],[884,34,860,38],[884,35,860,39,"auth"],[884,39,860,43],[884,41,860,45],[884,63,860,67],[884,64,860,68],[884,98,860,102,"json"],[884,102,860,106],[884,103,860,107],[885,10,861,12],[885,11,861,13],[885,17,862,17],[885,21,862,21,"serverErrorCode"],[885,36,862,36],[885,41,862,41],[885,56,862,56],[885,57,862,57],[885,90,862,90],[886,12,863,16],[886,18,863,22,"_makeTaggedError"],[886,34,863,38],[886,35,863,39,"auth"],[886,39,863,43],[886,41,863,45],[886,56,863,60],[886,57,863,61],[886,92,863,96,"json"],[886,96,863,100],[886,97,863,101],[887,10,864,12],[888,10,865,12],[888,14,865,18,"authError"],[888,23,865,27],[888,26,865,30,"errorMap"],[888,34,865,38],[888,35,865,39,"serverErrorCode"],[888,50,865,54],[888,51,865,55],[888,55,866,16,"serverErrorCode"],[888,70,866,31],[888,71,867,21,"toLowerCase"],[888,82,867,32],[888,83,867,33],[888,84,867,34],[888,85,868,21,"replace"],[888,92,868,28],[888,93,868,29],[888,102,868,38],[888,104,868,40],[888,107,868,43],[888,108,868,44],[889,10,869,12],[889,14,869,16,"serverErrorMessage"],[889,32,869,34],[889,34,869,36],[890,12,870,16],[890,18,870,22,"_errorWithCustomMessage"],[890,41,870,45],[890,42,870,46,"auth"],[890,46,870,50],[890,48,870,52,"authError"],[890,57,870,61],[890,59,870,63,"serverErrorMessage"],[890,77,870,81],[890,78,870,82],[891,10,871,12],[891,11,871,13],[891,17,872,17],[892,12,873,16,"_fail"],[892,17,873,21],[892,18,873,22,"auth"],[892,22,873,26],[892,24,873,28,"authError"],[892,33,873,37],[892,34,873,38],[893,10,874,12],[894,8,875,8],[895,6,876,4],[895,7,876,5],[895,8,877,4],[895,15,877,11,"e"],[895,16,877,12],[895,18,877,14],[896,8,878,8],[896,12,878,12,"e"],[896,13,878,13],[896,25,878,25,"util"],[896,29,878,29],[896,30,878,30,"FirebaseError"],[896,43,878,43],[896,45,878,45],[897,10,879,12],[897,16,879,18,"e"],[897,17,879,19],[898,8,880,8],[899,8,881,8],[900,8,882,8],[901,8,883,8],[902,8,884,8,"_fail"],[902,13,884,13],[902,14,884,14,"auth"],[902,18,884,18],[902,20,884,20],[902,44,884,44],[902,45,884,45],[902,89,884,89],[903,10,884,91],[903,19,884,100],[903,21,884,102,"String"],[903,27,884,108],[903,28,884,109,"e"],[903,29,884,110],[904,8,884,112],[904,9,884,113],[904,10,884,114],[905,6,885,4],[906,4,886,0],[906,5,886,1],[907,4,886,1],[907,11,886,1,"_performFetchWithErrorHandling2"],[907,42,886,1],[907,43,886,1,"apply"],[907,48,886,1],[907,55,886,1,"arguments"],[907,64,886,1],[908,2,886,1],[909,2,886,1],[909,11,887,15,"_performSignInRequest"],[909,32,887,36,"_performSignInRequest"],[909,33,887,36,"_x8"],[909,36,887,36],[909,38,887,36,"_x9"],[909,41,887,36],[909,43,887,36,"_x0"],[909,46,887,36],[909,48,887,36,"_x1"],[909,51,887,36],[910,4,887,36],[910,11,887,36,"_performSignInRequest2"],[910,33,887,36],[910,34,887,36,"apply"],[910,39,887,36],[910,46,887,36,"arguments"],[910,55,887,36],[911,2,887,36],[912,2,887,36],[912,11,887,36,"_performSignInRequest2"],[912,34,887,36],[913,4,887,36,"_performSignInRequest2"],[913,26,887,36],[913,29,887,36,"_asyncToGenerator"],[913,46,887,36],[913,47,887,0],[913,58,887,37,"auth"],[913,62,887,41],[913,64,887,43,"method"],[913,70,887,49],[913,72,887,51,"path"],[913,76,887,55],[913,78,887,57,"request"],[913,85,887,64],[913,87,887,87],[914,6,887,87],[914,10,887,66,"customErrorMap"],[914,24,887,80],[914,27,887,80,"arguments"],[914,36,887,80],[914,37,887,80,"length"],[914,43,887,80],[914,51,887,80,"arguments"],[914,60,887,80],[914,68,887,80,"undefined"],[914,77,887,80],[914,80,887,80,"arguments"],[914,89,887,80],[914,95,887,83],[914,96,887,84],[914,97,887,85],[915,6,888,4],[915,10,888,10,"serverResponse"],[915,24,888,24],[915,33,888,33,"_performApiRequest"],[915,51,888,51],[915,52,888,52,"auth"],[915,56,888,56],[915,58,888,58,"method"],[915,64,888,64],[915,66,888,66,"path"],[915,70,888,70],[915,72,888,72,"request"],[915,79,888,79],[915,81,888,81,"customErrorMap"],[915,95,888,95],[915,96,888,96],[916,6,889,4],[916,10,889,8],[916,32,889,30],[916,36,889,34,"serverResponse"],[916,50,889,48],[916,52,889,50],[917,8,890,8,"_fail"],[917,13,890,13],[917,14,890,14,"auth"],[917,18,890,18],[917,20,890,20],[917,48,890,48],[917,49,890,49],[917,83,890,83],[918,10,891,12,"_serverResponse"],[918,25,891,27],[918,27,891,29,"serverResponse"],[919,8,892,8],[919,9,892,9],[919,10,892,10],[920,6,893,4],[921,6,894,4],[921,13,894,11,"serverResponse"],[921,27,894,25],[922,4,895,0],[922,5,895,1],[923,4,895,1],[923,11,895,1,"_performSignInRequest2"],[923,33,895,1],[923,34,895,1,"apply"],[923,39,895,1],[923,46,895,1,"arguments"],[923,55,895,1],[924,2,895,1],[925,2,895,1],[925,11,896,15,"_getFinalTarget"],[925,26,896,30,"_getFinalTarget"],[925,27,896,30,"_x10"],[925,31,896,30],[925,33,896,30,"_x11"],[925,37,896,30],[925,39,896,30,"_x12"],[925,43,896,30],[925,45,896,30,"_x13"],[925,49,896,30],[926,4,896,30],[926,11,896,30,"_getFinalTarget2"],[926,27,896,30],[926,28,896,30,"apply"],[926,33,896,30],[926,40,896,30,"arguments"],[926,49,896,30],[927,2,896,30],[928,2,896,30],[928,11,896,30,"_getFinalTarget2"],[928,28,896,30],[929,4,896,30,"_getFinalTarget2"],[929,20,896,30],[929,23,896,30,"_asyncToGenerator"],[929,40,896,30],[929,41,896,0],[929,52,896,31,"auth"],[929,56,896,35],[929,58,896,37,"host"],[929,62,896,41],[929,64,896,43,"path"],[929,68,896,47],[929,70,896,49,"query"],[929,75,896,54],[929,77,896,56],[930,6,897,4],[930,10,897,10,"base"],[930,14,897,14],[930,17,897,17],[930,20,897,20,"host"],[930,24,897,24],[930,27,897,27,"path"],[930,31,897,31],[930,35,897,35,"query"],[930,40,897,40],[930,42,897,42],[931,6,898,4],[931,10,898,10,"authInternal"],[931,22,898,22],[931,25,898,25,"auth"],[931,29,898,29],[932,6,899,4],[932,10,899,10,"finalTarget"],[932,21,899,21],[932,24,899,24,"authInternal"],[932,36,899,36],[932,37,899,37,"config"],[932,43,899,43],[932,44,899,44,"emulator"],[932,52,899,52],[932,55,900,10,"_emulatorUrl"],[932,67,900,22],[932,68,900,23,"auth"],[932,72,900,27],[932,73,900,28,"config"],[932,79,900,34],[932,81,900,36,"base"],[932,85,900,40],[932,86,900,41],[932,89,901,10],[932,92,901,13,"auth"],[932,96,901,17],[932,97,901,18,"config"],[932,103,901,24],[932,104,901,25,"apiScheme"],[932,113,901,34],[932,119,901,40,"base"],[932,123,901,44],[932,125,901,46],[933,6,902,4],[934,6,903,4],[935,6,904,4],[936,6,905,4],[936,10,905,8,"CookieAuthProxiedEndpoints"],[936,36,905,34],[936,37,905,35,"includes"],[936,45,905,43],[936,46,905,44,"path"],[936,50,905,48],[936,51,905,49],[936,53,905,51],[937,8,906,8],[938,8,907,8],[939,8,908,8],[939,14,908,14,"authInternal"],[939,26,908,26],[939,27,908,27,"_persistenceManagerAvailable"],[939,55,908,55],[940,8,909,8],[940,12,909,12,"authInternal"],[940,24,909,24],[940,25,909,25,"_getPersistenceType"],[940,44,909,44],[940,45,909,45],[940,46,909,46],[940,51,909,51],[940,59,909,59],[940,60,909,60],[940,90,909,90],[941,10,910,12],[941,14,910,18,"cookiePersistence"],[941,31,910,35],[941,34,910,38,"authInternal"],[941,46,910,50],[941,47,910,51,"_getPersistence"],[941,62,910,66],[941,63,910,67],[941,64,910,68],[942,10,911,12],[942,17,911,19,"cookiePersistence"],[942,34,911,36],[942,35,911,37,"_getFinalTarget"],[942,50,911,52],[942,51,911,53,"finalTarget"],[942,62,911,64],[942,63,911,65],[942,64,911,66,"toString"],[942,72,911,74],[942,73,911,75],[942,74,911,76],[943,8,912,8],[944,6,913,4],[945,6,914,4],[945,13,914,11,"finalTarget"],[945,24,914,22],[946,4,915,0],[946,5,915,1],[947,4,915,1],[947,11,915,1,"_getFinalTarget2"],[947,27,915,1],[947,28,915,1,"apply"],[947,33,915,1],[947,40,915,1,"arguments"],[947,49,915,1],[948,2,915,1],[949,2,916,0],[949,11,916,9,"_parseEnforcementState"],[949,33,916,31,"_parseEnforcementState"],[949,34,916,32,"enforcementStateStr"],[949,53,916,51],[949,55,916,53],[950,4,917,4],[950,12,917,12,"enforcementStateStr"],[950,31,917,31],[951,6,918,8],[951,11,918,13],[951,20,918,22],[952,8,919,12],[952,15,919,19],[952,24,919,28],[952,25,919,29],[953,6,920,8],[953,11,920,13],[953,18,920,20],[954,8,921,12],[954,15,921,19],[954,22,921,26],[954,23,921,27],[955,6,922,8],[955,11,922,13],[955,16,922,18],[956,8,923,12],[956,15,923,19],[956,20,923,24],[956,21,923,25],[957,6,924,8],[958,8,925,12],[958,15,925,19],[958,46,925,50],[958,47,925,51],[959,4,926,4],[960,2,927,0],[961,2,927,1],[961,6,928,6,"NetworkTimeout"],[961,20,928,20],[962,4,932,4],[962,13,932,4,"NetworkTimeout"],[962,28,932,16,"auth"],[962,32,932,20],[962,34,932,22],[963,6,932,22,"_classCallCheck"],[963,21,932,22],[963,28,932,22,"NetworkTimeout"],[963,42,932,22],[964,6,933,8],[964,10,933,12],[964,11,933,13,"auth"],[964,15,933,17],[964,18,933,20,"auth"],[964,22,933,24],[965,6,934,8],[966,6,935,8],[967,6,936,8],[968,6,937,8],[968,10,937,12],[968,11,937,13,"timer"],[968,16,937,18],[968,19,937,21],[968,23,937,25],[969,6,938,8],[969,10,938,12],[969,11,938,13,"promise"],[969,18,938,20],[969,21,938,23],[969,25,938,27,"Promise"],[969,32,938,34],[969,33,938,35],[969,34,938,36,"_"],[969,35,938,37],[969,37,938,39,"reject"],[969,43,938,45],[969,48,938,50],[970,8,939,12],[970,12,939,16],[970,13,939,17,"timer"],[970,18,939,22],[970,21,939,25,"setTimeout"],[970,31,939,35],[970,32,939,36],[970,38,939,42],[971,10,940,16],[971,17,940,23,"reject"],[971,23,940,29],[971,24,940,30,"_createError"],[971,36,940,42],[971,37,940,43],[971,41,940,47],[971,42,940,48,"auth"],[971,46,940,52],[971,48,940,54],[971,72,940,78],[971,73,940,79],[971,115,940,121],[971,116,940,122],[971,117,940,123],[972,8,941,12],[972,9,941,13],[972,11,941,15,"DEFAULT_API_TIMEOUT_MS"],[972,33,941,37],[972,34,941,38,"get"],[972,37,941,41],[972,38,941,42],[972,39,941,43],[972,40,941,44],[973,6,942,8],[973,7,942,9],[973,8,942,10],[974,4,943,4],[975,4,943,5],[975,11,943,5,"_createClass"],[975,23,943,5],[975,24,943,5,"NetworkTimeout"],[975,38,943,5],[976,6,943,5,"key"],[976,9,943,5],[977,6,943,5,"value"],[977,11,943,5],[977,13,929,4],[977,22,929,4,"clearNetworkTimeout"],[977,41,929,23,"clearNetworkTimeout"],[977,42,929,23],[977,44,929,26],[978,8,930,8,"clearTimeout"],[978,20,930,20],[978,21,930,21],[978,25,930,25],[978,26,930,26,"timer"],[978,31,930,31],[978,32,930,32],[979,6,931,4],[980,4,931,5],[981,2,931,5],[982,2,945,0],[982,11,945,9,"_makeTaggedError"],[982,27,945,25,"_makeTaggedError"],[982,28,945,26,"auth"],[982,32,945,30],[982,34,945,32,"code"],[982,38,945,36],[982,40,945,38,"response"],[982,48,945,46],[982,50,945,48],[983,4,946,4],[983,8,946,10,"errorParams"],[983,19,946,21],[983,22,946,24],[984,6,947,8,"appName"],[984,13,947,15],[984,15,947,17,"auth"],[984,19,947,21],[984,20,947,22,"name"],[985,4,948,4],[985,5,948,5],[986,4,949,4],[986,8,949,8,"response"],[986,16,949,16],[986,17,949,17,"email"],[986,22,949,22],[986,24,949,24],[987,6,950,8,"errorParams"],[987,17,950,19],[987,18,950,20,"email"],[987,23,950,25],[987,26,950,28,"response"],[987,34,950,36],[987,35,950,37,"email"],[987,40,950,42],[988,4,951,4],[989,4,952,4],[989,8,952,8,"response"],[989,16,952,16],[989,17,952,17,"phoneNumber"],[989,28,952,28],[989,30,952,30],[990,6,953,8,"errorParams"],[990,17,953,19],[990,18,953,20,"phoneNumber"],[990,29,953,31],[990,32,953,34,"response"],[990,40,953,42],[990,41,953,43,"phoneNumber"],[990,52,953,54],[991,4,954,4],[992,4,955,4],[992,8,955,10,"error"],[992,13,955,15],[992,16,955,18,"_createError"],[992,28,955,30],[992,29,955,31,"auth"],[992,33,955,35],[992,35,955,37,"code"],[992,39,955,41],[992,41,955,43,"errorParams"],[992,52,955,54],[992,53,955,55],[993,4,956,4],[994,4,957,4,"error"],[994,9,957,9],[994,10,957,10,"customData"],[994,20,957,20],[994,21,957,21,"_tokenResponse"],[994,35,957,35],[994,38,957,38,"response"],[994,46,957,46],[995,4,958,4],[995,11,958,11,"error"],[995,16,958,16],[996,2,959,0],[998,2,961,0],[999,0,962,0],[1000,0,963,0],[1001,0,964,0],[1002,0,965,0],[1003,0,966,0],[1004,0,967,0],[1005,0,968,0],[1006,0,969,0],[1007,0,970,0],[1008,0,971,0],[1009,0,972,0],[1010,0,973,0],[1011,0,974,0],[1012,0,975,0],[1013,0,976,0],[1014,2,977,0],[1014,11,977,9,"isV2"],[1014,15,977,13,"isV2"],[1014,16,977,14,"grecaptcha"],[1014,26,977,24],[1014,28,977,26],[1015,4,978,4],[1015,11,978,12,"grecaptcha"],[1015,21,978,22],[1015,26,978,27,"undefined"],[1015,35,978,36],[1015,39,979,8,"grecaptcha"],[1015,49,979,18],[1015,50,979,19,"getResponse"],[1015,61,979,30],[1015,66,979,35,"undefined"],[1015,75,979,44],[1016,2,980,0],[1017,2,981,0],[1017,11,981,9,"isEnterprise"],[1017,23,981,21,"isEnterprise"],[1017,24,981,22,"grecaptcha"],[1017,34,981,32],[1017,36,981,34],[1018,4,982,4],[1018,11,982,12,"grecaptcha"],[1018,21,982,22],[1018,26,982,27,"undefined"],[1018,35,982,36],[1018,39,983,8,"grecaptcha"],[1018,49,983,18],[1018,50,983,19,"enterprise"],[1018,60,983,29],[1018,65,983,34,"undefined"],[1018,74,983,43],[1019,2,984,0],[1020,2,984,1],[1020,6,985,6,"RecaptchaConfig"],[1020,21,985,21],[1021,4,986,4],[1021,13,986,4,"RecaptchaConfig"],[1021,29,986,16,"response"],[1021,37,986,24],[1021,39,986,26],[1022,6,986,26,"_classCallCheck"],[1022,21,986,26],[1022,28,986,26,"RecaptchaConfig"],[1022,43,986,26],[1023,6,987,8],[1024,0,988,0],[1025,0,989,0],[1026,6,990,8],[1026,10,990,12],[1026,11,990,13,"siteKey"],[1026,18,990,20],[1026,21,990,23],[1026,23,990,25],[1027,6,991,8],[1028,0,992,0],[1029,0,993,0],[1030,6,994,8],[1030,10,994,12],[1030,11,994,13,"recaptchaEnforcementState"],[1030,36,994,38],[1030,39,994,41],[1030,41,994,43],[1031,6,995,8],[1031,10,995,12,"response"],[1031,18,995,20],[1031,19,995,21,"recaptchaKey"],[1031,31,995,33],[1031,36,995,38,"undefined"],[1031,45,995,47],[1031,47,995,49],[1032,8,996,12],[1032,14,996,18],[1032,18,996,22,"Error"],[1032,23,996,27],[1032,24,996,28],[1032,48,996,52],[1032,49,996,53],[1033,6,997,8],[1034,6,998,8],[1035,6,999,8],[1035,10,999,12],[1035,11,999,13,"siteKey"],[1035,18,999,20],[1035,21,999,23,"response"],[1035,29,999,31],[1035,30,999,32,"recaptchaKey"],[1035,42,999,44],[1035,43,999,45,"split"],[1035,48,999,50],[1035,49,999,51],[1035,52,999,54],[1035,53,999,55],[1035,54,999,56],[1035,55,999,57],[1035,56,999,58],[1036,6,1000,8],[1036,10,1000,12],[1036,11,1000,13,"recaptchaEnforcementState"],[1036,36,1000,38],[1036,39,1000,41,"response"],[1036,47,1000,49],[1036,48,1000,50,"recaptchaEnforcementState"],[1036,73,1000,75],[1037,4,1001,4],[1038,4,1002,4],[1039,0,1003,0],[1040,0,1004,0],[1041,0,1005,0],[1042,0,1006,0],[1043,0,1007,0],[1044,4,1002,4],[1044,11,1002,4,"_createClass"],[1044,23,1002,4],[1044,24,1002,4,"RecaptchaConfig"],[1044,39,1002,4],[1045,6,1002,4,"key"],[1045,9,1002,4],[1046,6,1002,4,"value"],[1046,11,1002,4],[1046,13,1008,4],[1046,22,1008,4,"getProviderEnforcementState"],[1046,49,1008,31,"getProviderEnforcementState"],[1046,50,1008,32,"providerStr"],[1046,61,1008,43],[1046,63,1008,45],[1047,8,1009,8],[1047,12,1009,12],[1047,13,1009,13],[1047,17,1009,17],[1047,18,1009,18,"recaptchaEnforcementState"],[1047,43,1009,43],[1047,47,1010,12],[1047,51,1010,16],[1047,52,1010,17,"recaptchaEnforcementState"],[1047,77,1010,42],[1047,78,1010,43,"length"],[1047,84,1010,49],[1047,89,1010,54],[1047,90,1010,55],[1047,92,1010,57],[1048,10,1011,12],[1048,17,1011,19],[1048,21,1011,23],[1049,8,1012,8],[1050,8,1013,8],[1050,13,1013,13],[1050,17,1013,19,"recaptchaEnforcementState"],[1050,42,1013,44],[1050,46,1013,48],[1050,50,1013,52],[1050,51,1013,53,"recaptchaEnforcementState"],[1050,76,1013,78],[1050,78,1013,80],[1051,10,1014,12],[1051,14,1014,16,"recaptchaEnforcementState"],[1051,39,1014,41],[1051,40,1014,42,"provider"],[1051,48,1014,50],[1051,52,1015,16,"recaptchaEnforcementState"],[1051,77,1015,41],[1051,78,1015,42,"provider"],[1051,86,1015,50],[1051,91,1015,55,"providerStr"],[1051,102,1015,66],[1051,104,1015,68],[1052,12,1016,16],[1052,19,1016,23,"_parseEnforcementState"],[1052,41,1016,45],[1052,42,1016,46,"recaptchaEnforcementState"],[1052,67,1016,71],[1052,68,1016,72,"enforcementState"],[1052,84,1016,88],[1052,85,1016,89],[1053,10,1017,12],[1054,8,1018,8],[1055,8,1019,8],[1055,15,1019,15],[1055,19,1019,19],[1056,6,1020,4],[1057,6,1021,4],[1058,0,1022,0],[1059,0,1023,0],[1060,0,1024,0],[1061,0,1025,0],[1062,0,1026,0],[1063,4,1021,4],[1064,6,1021,4,"key"],[1064,9,1021,4],[1065,6,1021,4,"value"],[1065,11,1021,4],[1065,13,1027,4],[1065,22,1027,4,"isProviderEnabled"],[1065,39,1027,21,"isProviderEnabled"],[1065,40,1027,22,"providerStr"],[1065,51,1027,33],[1065,53,1027,35],[1066,8,1028,8],[1066,15,1028,16],[1066,19,1028,20],[1066,20,1028,21,"getProviderEnforcementState"],[1066,47,1028,48],[1066,48,1028,49,"providerStr"],[1066,59,1028,60],[1066,60,1028,61],[1066,65,1029,12],[1066,74,1029,21],[1066,75,1029,22],[1066,109,1030,12],[1066,113,1030,16],[1066,114,1030,17,"getProviderEnforcementState"],[1066,141,1030,44],[1066,142,1030,45,"providerStr"],[1066,153,1030,56],[1066,154,1030,57],[1066,159,1030,62],[1066,166,1030,69],[1066,167,1030,70],[1067,6,1031,4],[1068,6,1032,4],[1069,0,1033,0],[1070,0,1034,0],[1071,0,1035,0],[1072,0,1036,0],[1073,0,1037,0],[1074,4,1032,4],[1075,6,1032,4,"key"],[1075,9,1032,4],[1076,6,1032,4,"value"],[1076,11,1032,4],[1076,13,1038,4],[1076,22,1038,4,"isAnyProviderEnabled"],[1076,42,1038,24,"isAnyProviderEnabled"],[1076,43,1038,24],[1076,45,1038,27],[1077,8,1039,8],[1077,15,1039,16],[1077,19,1039,20],[1077,20,1039,21,"isProviderEnabled"],[1077,37,1039,38],[1077,38,1039,39],[1077,63,1039,64],[1077,64,1039,65],[1077,115,1039,116],[1077,116,1039,117],[1077,120,1040,12],[1077,124,1040,16],[1077,125,1040,17,"isProviderEnabled"],[1077,142,1040,34],[1077,143,1040,35],[1077,159,1040,51],[1077,160,1040,52],[1077,202,1040,94],[1077,203,1040,95],[1078,6,1041,4],[1079,4,1041,5],[1080,2,1041,5],[1081,2,1044,0],[1082,0,1045,0],[1083,0,1046,0],[1084,0,1047,0],[1085,0,1048,0],[1086,0,1049,0],[1087,0,1050,0],[1088,0,1051,0],[1089,0,1052,0],[1090,0,1053,0],[1091,0,1054,0],[1092,0,1055,0],[1093,0,1056,0],[1094,0,1057,0],[1095,0,1058,0],[1096,0,1059,0],[1097,2,1044,0],[1097,11,1060,15,"getRecaptchaParams"],[1097,29,1060,33,"getRecaptchaParams"],[1097,30,1060,33,"_x14"],[1097,34,1060,33],[1098,4,1060,33],[1098,11,1060,33,"_getRecaptchaParams"],[1098,30,1060,33],[1098,31,1060,33,"apply"],[1098,36,1060,33],[1098,43,1060,33,"arguments"],[1098,52,1060,33],[1099,2,1060,33],[1100,2,1060,33],[1100,11,1060,33,"_getRecaptchaParams"],[1100,31,1060,33],[1101,4,1060,33,"_getRecaptchaParams"],[1101,23,1060,33],[1101,26,1060,33,"_asyncToGenerator"],[1101,43,1060,33],[1101,44,1060,0],[1101,55,1060,34,"auth"],[1101,59,1060,38],[1101,61,1060,40],[1102,6,1061,4],[1102,13,1061,12],[1102,20,1061,19,"_performApiRequest"],[1102,38,1061,37],[1102,39,1061,38,"auth"],[1102,43,1061,42],[1102,45,1061,44],[1102,50,1061,49],[1102,51,1061,50],[1102,73,1061,72],[1102,94,1061,93],[1102,95,1061,94],[1102,129,1061,128],[1102,130,1061,129],[1102,132,1061,131,"recaptchaSiteKey"],[1102,148,1061,147],[1102,152,1061,151],[1102,154,1061,153],[1103,4,1062,0],[1103,5,1062,1],[1104,4,1062,1],[1104,11,1062,1,"_getRecaptchaParams"],[1104,30,1062,1],[1104,31,1062,1,"apply"],[1104,36,1062,1],[1104,43,1062,1,"arguments"],[1104,52,1062,1],[1105,2,1062,1],[1106,2,1062,1],[1106,11,1063,15,"getRecaptchaConfig"],[1106,29,1063,33,"getRecaptchaConfig"],[1106,30,1063,33,"_x15"],[1106,34,1063,33],[1106,36,1063,33,"_x16"],[1106,40,1063,33],[1107,4,1063,33],[1107,11,1063,33,"_getRecaptchaConfig"],[1107,30,1063,33],[1107,31,1063,33,"apply"],[1107,36,1063,33],[1107,43,1063,33,"arguments"],[1107,52,1063,33],[1108,2,1063,33],[1109,2,1067,0],[1110,0,1068,0],[1111,0,1069,0],[1112,0,1070,0],[1113,0,1071,0],[1114,0,1072,0],[1115,0,1073,0],[1116,0,1074,0],[1117,0,1075,0],[1118,0,1076,0],[1119,0,1077,0],[1120,0,1078,0],[1121,0,1079,0],[1122,0,1080,0],[1123,0,1081,0],[1124,0,1082,0],[1125,2,1067,0],[1125,11,1067,0,"_getRecaptchaConfig"],[1125,31,1067,0],[1126,4,1067,0,"_getRecaptchaConfig"],[1126,23,1067,0],[1126,26,1067,0,"_asyncToGenerator"],[1126,43,1067,0],[1126,44,1063,0],[1126,55,1063,34,"auth"],[1126,59,1063,38],[1126,61,1063,40,"request"],[1126,68,1063,47],[1126,70,1063,49],[1127,6,1064,4],[1127,13,1064,11,"_performApiRequest"],[1127,31,1064,29],[1127,32,1064,30,"auth"],[1127,36,1064,34],[1127,38,1064,36],[1127,43,1064,41],[1127,44,1064,42],[1127,66,1064,64],[1127,87,1064,85],[1127,88,1064,86],[1127,125,1064,123,"_addTidIfNecessary"],[1127,143,1064,141],[1127,144,1064,142,"auth"],[1127,148,1064,146],[1127,150,1064,148,"request"],[1127,157,1064,155],[1127,158,1064,156],[1127,159,1064,157],[1128,4,1065,0],[1128,5,1065,1],[1129,4,1065,1],[1129,11,1065,1,"_getRecaptchaConfig"],[1129,30,1065,1],[1129,31,1065,1,"apply"],[1129,36,1065,1],[1129,43,1065,1,"arguments"],[1129,52,1065,1],[1130,2,1065,1],[1131,2,1065,1],[1131,11,1083,15,"deleteAccount"],[1131,24,1083,28,"deleteAccount"],[1131,25,1083,28,"_x17"],[1131,29,1083,28],[1131,31,1083,28,"_x18"],[1131,35,1083,28],[1132,4,1083,28],[1132,11,1083,28,"_deleteAccount"],[1132,25,1083,28],[1132,26,1083,28,"apply"],[1132,31,1083,28],[1132,38,1083,28,"arguments"],[1132,47,1083,28],[1133,2,1083,28],[1134,2,1083,28],[1134,11,1083,28,"_deleteAccount"],[1134,26,1083,28],[1135,4,1083,28,"_deleteAccount"],[1135,18,1083,28],[1135,21,1083,28,"_asyncToGenerator"],[1135,38,1083,28],[1135,39,1083,0],[1135,50,1083,29,"auth"],[1135,54,1083,33],[1135,56,1083,35,"request"],[1135,63,1083,42],[1135,65,1083,44],[1136,6,1084,4],[1136,13,1084,11,"_performApiRequest"],[1136,31,1084,29],[1136,32,1084,30,"auth"],[1136,36,1084,34],[1136,38,1084,36],[1136,44,1084,42],[1136,45,1084,43],[1136,68,1084,66],[1136,89,1084,87],[1136,90,1084,88],[1136,121,1084,119,"request"],[1136,128,1084,126],[1136,129,1084,127],[1137,4,1085,0],[1137,5,1085,1],[1138,4,1085,1],[1138,11,1085,1,"_deleteAccount"],[1138,25,1085,1],[1138,26,1085,1,"apply"],[1138,31,1085,1],[1138,38,1085,1,"arguments"],[1138,47,1085,1],[1139,2,1085,1],[1140,2,1085,1],[1140,11,1086,15,"deleteLinkedAccounts"],[1140,31,1086,35,"deleteLinkedAccounts"],[1140,32,1086,35,"_x19"],[1140,36,1086,35],[1140,38,1086,35,"_x20"],[1140,42,1086,35],[1141,4,1086,35],[1141,11,1086,35,"_deleteLinkedAccounts"],[1141,32,1086,35],[1141,33,1086,35,"apply"],[1141,38,1086,35],[1141,45,1086,35,"arguments"],[1141,54,1086,35],[1142,2,1086,35],[1143,2,1086,35],[1143,11,1086,35,"_deleteLinkedAccounts"],[1143,33,1086,35],[1144,4,1086,35,"_deleteLinkedAccounts"],[1144,25,1086,35],[1144,28,1086,35,"_asyncToGenerator"],[1144,45,1086,35],[1144,46,1086,0],[1144,57,1086,36,"auth"],[1144,61,1086,40],[1144,63,1086,42,"request"],[1144,70,1086,49],[1144,72,1086,51],[1145,6,1087,4],[1145,13,1087,11,"_performApiRequest"],[1145,31,1087,29],[1145,32,1087,30,"auth"],[1145,36,1087,34],[1145,38,1087,36],[1145,44,1087,42],[1145,45,1087,43],[1145,68,1087,66],[1145,89,1087,87],[1145,90,1087,88],[1145,123,1087,121,"request"],[1145,130,1087,128],[1145,131,1087,129],[1146,4,1088,0],[1146,5,1088,1],[1147,4,1088,1],[1147,11,1088,1,"_deleteLinkedAccounts"],[1147,32,1088,1],[1147,33,1088,1,"apply"],[1147,38,1088,1],[1147,45,1088,1,"arguments"],[1147,54,1088,1],[1148,2,1088,1],[1149,2,1088,1],[1149,11,1089,15,"getAccountInfo"],[1149,25,1089,29,"getAccountInfo"],[1149,26,1089,29,"_x21"],[1149,30,1089,29],[1149,32,1089,29,"_x22"],[1149,36,1089,29],[1150,4,1089,29],[1150,11,1089,29,"_getAccountInfo"],[1150,26,1089,29],[1150,27,1089,29,"apply"],[1150,32,1089,29],[1150,39,1089,29,"arguments"],[1150,48,1089,29],[1151,2,1089,29],[1152,2,1093,0],[1153,0,1094,0],[1154,0,1095,0],[1155,0,1096,0],[1156,0,1097,0],[1157,0,1098,0],[1158,0,1099,0],[1159,0,1100,0],[1160,0,1101,0],[1161,0,1102,0],[1162,0,1103,0],[1163,0,1104,0],[1164,0,1105,0],[1165,0,1106,0],[1166,0,1107,0],[1167,0,1108,0],[1168,2,1093,0],[1168,11,1093,0,"_getAccountInfo"],[1168,27,1093,0],[1169,4,1093,0,"_getAccountInfo"],[1169,19,1093,0],[1169,22,1093,0,"_asyncToGenerator"],[1169,39,1093,0],[1169,40,1089,0],[1169,51,1089,30,"auth"],[1169,55,1089,34],[1169,57,1089,36,"request"],[1169,64,1089,43],[1169,66,1089,45],[1170,6,1090,4],[1170,13,1090,11,"_performApiRequest"],[1170,31,1090,29],[1170,32,1090,30,"auth"],[1170,36,1090,34],[1170,38,1090,36],[1170,44,1090,42],[1170,45,1090,43],[1170,68,1090,66],[1170,89,1090,87],[1170,90,1090,88],[1170,123,1090,121,"request"],[1170,130,1090,128],[1170,131,1090,129],[1171,4,1091,0],[1171,5,1091,1],[1172,4,1091,1],[1172,11,1091,1,"_getAccountInfo"],[1172,26,1091,1],[1172,27,1091,1,"apply"],[1172,32,1091,1],[1172,39,1091,1,"arguments"],[1172,48,1091,1],[1173,2,1091,1],[1174,2,1109,0],[1174,11,1109,9,"utcTimestampToDateString"],[1174,35,1109,33,"utcTimestampToDateString"],[1174,36,1109,34,"utcTimestamp"],[1174,48,1109,46],[1174,50,1109,48],[1175,4,1110,4],[1175,8,1110,8],[1175,9,1110,9,"utcTimestamp"],[1175,21,1110,21],[1175,23,1110,23],[1176,6,1111,8],[1176,13,1111,15,"undefined"],[1176,22,1111,24],[1177,4,1112,4],[1178,4,1113,4],[1178,8,1113,8],[1179,6,1114,8],[1180,6,1115,8],[1180,10,1115,14,"date"],[1180,14,1115,18],[1180,17,1115,21],[1180,21,1115,25,"Date"],[1180,25,1115,29],[1180,26,1115,30,"Number"],[1180,32,1115,36],[1180,33,1115,37,"utcTimestamp"],[1180,45,1115,49],[1180,46,1115,50],[1180,47,1115,51],[1181,6,1116,8],[1182,6,1117,8],[1182,10,1117,12],[1182,11,1117,13,"isNaN"],[1182,16,1117,18],[1182,17,1117,19,"date"],[1182,21,1117,23],[1182,22,1117,24,"getTime"],[1182,29,1117,31],[1182,30,1117,32],[1182,31,1117,33],[1182,32,1117,34],[1182,34,1117,36],[1183,8,1118,12],[1184,8,1119,12],[1184,15,1119,19,"date"],[1184,19,1119,23],[1184,20,1119,24,"toUTCString"],[1184,31,1119,35],[1184,32,1119,36],[1184,33,1119,37],[1185,6,1120,8],[1186,4,1121,4],[1186,5,1121,5],[1186,6,1122,4],[1186,13,1122,11,"e"],[1186,14,1122,12],[1186,16,1122,14],[1187,6,1123,8],[1188,4,1123,8],[1189,4,1125,4],[1189,11,1125,11,"undefined"],[1189,20,1125,20],[1190,2,1126,0],[1192,2,1128,0],[1193,0,1129,0],[1194,0,1130,0],[1195,0,1131,0],[1196,0,1132,0],[1197,0,1133,0],[1198,0,1134,0],[1199,0,1135,0],[1200,0,1136,0],[1201,0,1137,0],[1202,0,1138,0],[1203,0,1139,0],[1204,0,1140,0],[1205,0,1141,0],[1206,0,1142,0],[1207,0,1143,0],[1208,2,1144,0],[1209,0,1145,0],[1210,0,1146,0],[1211,0,1147,0],[1212,0,1148,0],[1213,0,1149,0],[1214,0,1150,0],[1215,0,1151,0],[1216,0,1152,0],[1217,0,1153,0],[1218,0,1154,0],[1219,0,1155,0],[1220,2,1156,0],[1220,11,1156,9,"getIdToken"],[1220,21,1156,19,"getIdToken"],[1220,22,1156,20,"user"],[1220,26,1156,24],[1220,28,1156,48],[1221,4,1156,48],[1221,8,1156,26,"forceRefresh"],[1221,20,1156,38],[1221,23,1156,38,"arguments"],[1221,32,1156,38],[1221,33,1156,38,"length"],[1221,39,1156,38],[1221,47,1156,38,"arguments"],[1221,56,1156,38],[1221,64,1156,38,"undefined"],[1221,73,1156,38],[1221,76,1156,38,"arguments"],[1221,85,1156,38],[1221,91,1156,41],[1221,96,1156,46],[1222,4,1157,4],[1222,11,1157,11,"util"],[1222,15,1157,15],[1222,16,1157,16,"getModularInstance"],[1222,34,1157,34],[1222,35,1157,35,"user"],[1222,39,1157,39],[1222,40,1157,40],[1222,41,1157,41,"getIdToken"],[1222,51,1157,51],[1222,52,1157,52,"forceRefresh"],[1222,64,1157,64],[1222,65,1157,65],[1223,2,1158,0],[1224,2,1159,0],[1225,0,1160,0],[1226,0,1161,0],[1227,0,1162,0],[1228,0,1163,0],[1229,0,1164,0],[1230,0,1165,0],[1231,0,1166,0],[1232,0,1167,0],[1233,0,1168,0],[1234,0,1169,0],[1235,0,1170,0],[1236,2,1159,0],[1236,11,1171,15,"getIdTokenResult"],[1236,29,1171,31,"getIdTokenResult"],[1236,30,1171,31,"_x23"],[1236,34,1171,31],[1237,4,1171,31],[1237,11,1171,31,"_getIdTokenResult"],[1237,28,1171,31],[1237,29,1171,31,"apply"],[1237,34,1171,31],[1237,41,1171,31,"arguments"],[1237,50,1171,31],[1238,2,1171,31],[1239,2,1171,31],[1239,11,1171,31,"_getIdTokenResult"],[1239,29,1171,31],[1240,4,1171,31,"_getIdTokenResult"],[1240,21,1171,31],[1240,24,1171,31,"_asyncToGenerator"],[1240,41,1171,31],[1240,42,1171,0],[1240,53,1171,32,"user"],[1240,57,1171,36],[1240,59,1171,60],[1241,6,1171,60],[1241,10,1171,38,"forceRefresh"],[1241,22,1171,50],[1241,25,1171,50,"arguments"],[1241,34,1171,50],[1241,35,1171,50,"length"],[1241,41,1171,50],[1241,49,1171,50,"arguments"],[1241,58,1171,50],[1241,66,1171,50,"undefined"],[1241,75,1171,50],[1241,78,1171,50,"arguments"],[1241,87,1171,50],[1241,93,1171,53],[1241,98,1171,58],[1242,6,1172,4],[1242,10,1172,10,"userInternal"],[1242,22,1172,22],[1242,25,1172,25,"util"],[1242,29,1172,29],[1242,30,1172,30,"getModularInstance"],[1242,48,1172,48],[1242,49,1172,49,"user"],[1242,53,1172,53],[1242,54,1172,54],[1243,6,1173,4],[1243,10,1173,10,"token"],[1243,15,1173,15],[1243,24,1173,24,"userInternal"],[1243,36,1173,36],[1243,37,1173,37,"getIdToken"],[1243,47,1173,47],[1243,48,1173,48,"forceRefresh"],[1243,60,1173,60],[1243,61,1173,61],[1244,6,1174,4],[1244,10,1174,10,"claims"],[1244,16,1174,16],[1244,19,1174,19,"_parseToken"],[1244,30,1174,30],[1244,31,1174,31,"token"],[1244,36,1174,36],[1244,37,1174,37],[1245,6,1175,4,"_assert"],[1245,13,1175,11],[1245,14,1175,12,"claims"],[1245,20,1175,18],[1245,24,1175,22,"claims"],[1245,30,1175,28],[1245,31,1175,29,"exp"],[1245,34,1175,32],[1245,38,1175,36,"claims"],[1245,44,1175,42],[1245,45,1175,43,"auth_time"],[1245,54,1175,52],[1245,58,1175,56,"claims"],[1245,64,1175,62],[1245,65,1175,63,"iat"],[1245,68,1175,66],[1245,70,1175,68,"userInternal"],[1245,82,1175,80],[1245,83,1175,81,"auth"],[1245,87,1175,85],[1245,89,1175,87],[1245,105,1175,103],[1245,106,1175,104],[1245,140,1175,138],[1245,141,1175,139],[1246,6,1176,4],[1246,10,1176,10,"firebase"],[1246,18,1176,18],[1246,21,1176,21],[1246,28,1176,28,"claims"],[1246,34,1176,34],[1246,35,1176,35,"firebase"],[1246,43,1176,43],[1246,48,1176,48],[1246,56,1176,56],[1246,59,1176,59,"claims"],[1246,65,1176,65],[1246,66,1176,66,"firebase"],[1246,74,1176,74],[1246,77,1176,77,"undefined"],[1246,86,1176,86],[1247,6,1177,4],[1247,10,1177,10,"signInProvider"],[1247,24,1177,24],[1247,27,1177,27,"firebase"],[1247,35,1177,35],[1247,38,1177,38],[1247,56,1177,56],[1247,57,1177,57],[1248,6,1178,4],[1248,13,1178,11],[1249,8,1179,8,"claims"],[1249,14,1179,14],[1250,8,1180,8,"token"],[1250,13,1180,13],[1251,8,1181,8,"authTime"],[1251,16,1181,16],[1251,18,1181,18,"utcTimestampToDateString"],[1251,42,1181,42],[1251,43,1181,43,"secondsStringToMilliseconds"],[1251,70,1181,70],[1251,71,1181,71,"claims"],[1251,77,1181,77],[1251,78,1181,78,"auth_time"],[1251,87,1181,87],[1251,88,1181,88],[1251,89,1181,89],[1252,8,1182,8,"issuedAtTime"],[1252,20,1182,20],[1252,22,1182,22,"utcTimestampToDateString"],[1252,46,1182,46],[1252,47,1182,47,"secondsStringToMilliseconds"],[1252,74,1182,74],[1252,75,1182,75,"claims"],[1252,81,1182,81],[1252,82,1182,82,"iat"],[1252,85,1182,85],[1252,86,1182,86],[1252,87,1182,87],[1253,8,1183,8,"expirationTime"],[1253,22,1183,22],[1253,24,1183,24,"utcTimestampToDateString"],[1253,48,1183,48],[1253,49,1183,49,"secondsStringToMilliseconds"],[1253,76,1183,76],[1253,77,1183,77,"claims"],[1253,83,1183,83],[1253,84,1183,84,"exp"],[1253,87,1183,87],[1253,88,1183,88],[1253,89,1183,89],[1254,8,1184,8,"signInProvider"],[1254,22,1184,22],[1254,24,1184,24,"signInProvider"],[1254,38,1184,38],[1254,42,1184,42],[1254,46,1184,46],[1255,8,1185,8,"signInSecondFactor"],[1255,26,1185,26],[1255,28,1185,28,"firebase"],[1255,36,1185,36],[1255,39,1185,39],[1255,62,1185,62],[1255,63,1185,63],[1255,67,1185,67],[1256,6,1186,4],[1256,7,1186,5],[1257,4,1187,0],[1257,5,1187,1],[1258,4,1187,1],[1258,11,1187,1,"_getIdTokenResult"],[1258,28,1187,1],[1258,29,1187,1,"apply"],[1258,34,1187,1],[1258,41,1187,1,"arguments"],[1258,50,1187,1],[1259,2,1187,1],[1260,2,1188,0],[1260,11,1188,9,"secondsStringToMilliseconds"],[1260,38,1188,36,"secondsStringToMilliseconds"],[1260,39,1188,37,"seconds"],[1260,46,1188,44],[1260,48,1188,46],[1261,4,1189,4],[1261,11,1189,11,"Number"],[1261,17,1189,17],[1261,18,1189,18,"seconds"],[1261,25,1189,25],[1261,26,1189,26],[1261,29,1189,29],[1261,33,1189,33],[1262,2,1190,0],[1263,2,1191,0],[1263,11,1191,9,"_parseToken"],[1263,22,1191,20,"_parseToken"],[1263,23,1191,21,"token"],[1263,28,1191,26],[1263,30,1191,28],[1264,4,1192,4],[1264,8,1192,4,"_token$split"],[1264,20,1192,4],[1264,23,1192,44,"token"],[1264,28,1192,49],[1264,29,1192,50,"split"],[1264,34,1192,55],[1264,35,1192,56],[1264,38,1192,59],[1264,39,1192,60],[1265,6,1192,60,"_token$split2"],[1265,19,1192,60],[1265,22,1192,60,"_slicedToArray"],[1265,36,1192,60],[1265,37,1192,60,"_token$split"],[1265,49,1192,60],[1266,6,1192,11,"algorithm"],[1266,15,1192,20],[1266,18,1192,20,"_token$split2"],[1266,31,1192,20],[1267,6,1192,22,"payload"],[1267,13,1192,29],[1267,16,1192,29,"_token$split2"],[1267,29,1192,29],[1268,6,1192,31,"signature"],[1268,15,1192,40],[1268,18,1192,40,"_token$split2"],[1268,31,1192,40],[1269,4,1193,4],[1269,8,1193,8,"algorithm"],[1269,17,1193,17],[1269,22,1193,22,"undefined"],[1269,31,1193,31],[1269,35,1194,8,"payload"],[1269,42,1194,15],[1269,47,1194,20,"undefined"],[1269,56,1194,29],[1269,60,1195,8,"signature"],[1269,69,1195,17],[1269,74,1195,22,"undefined"],[1269,83,1195,31],[1269,85,1195,33],[1270,6,1196,8,"_logError"],[1270,15,1196,17],[1270,16,1196,18],[1270,64,1196,66],[1270,65,1196,67],[1271,6,1197,8],[1271,13,1197,15],[1271,17,1197,19],[1272,4,1198,4],[1273,4,1199,4],[1273,8,1199,8],[1274,6,1200,8],[1274,10,1200,14,"decoded"],[1274,17,1200,21],[1274,20,1200,24,"util"],[1274,24,1200,28],[1274,25,1200,29,"base64Decode"],[1274,37,1200,41],[1274,38,1200,42,"payload"],[1274,45,1200,49],[1274,46,1200,50],[1275,6,1201,8],[1275,10,1201,12],[1275,11,1201,13,"decoded"],[1275,18,1201,20],[1275,20,1201,22],[1276,8,1202,12,"_logError"],[1276,17,1202,21],[1276,18,1202,22],[1276,55,1202,59],[1276,56,1202,60],[1277,8,1203,12],[1277,15,1203,19],[1277,19,1203,23],[1278,6,1204,8],[1279,6,1205,8],[1279,13,1205,15,"JSON"],[1279,17,1205,19],[1279,18,1205,20,"parse"],[1279,23,1205,25],[1279,24,1205,26,"decoded"],[1279,31,1205,33],[1279,32,1205,34],[1280,4,1206,4],[1280,5,1206,5],[1280,6,1207,4],[1280,13,1207,11,"e"],[1280,14,1207,12],[1280,16,1207,14],[1281,6,1208,8,"_logError"],[1281,15,1208,17],[1281,16,1208,18],[1281,58,1208,60],[1281,60,1208,62,"e"],[1281,61,1208,63],[1281,63,1208,65,"toString"],[1281,71,1208,73],[1281,72,1208,74],[1281,73,1208,75],[1281,74,1208,76],[1282,6,1209,8],[1282,13,1209,15],[1282,17,1209,19],[1283,4,1210,4],[1284,2,1211,0],[1285,2,1212,0],[1286,0,1213,0],[1287,0,1214,0],[1288,2,1215,0],[1288,11,1215,9,"_tokenExpiresIn"],[1288,26,1215,24,"_tokenExpiresIn"],[1288,27,1215,25,"token"],[1288,32,1215,30],[1288,34,1215,32],[1289,4,1216,4],[1289,8,1216,10,"parsedToken"],[1289,19,1216,21],[1289,22,1216,24,"_parseToken"],[1289,33,1216,35],[1289,34,1216,36,"token"],[1289,39,1216,41],[1289,40,1216,42],[1290,4,1217,4,"_assert"],[1290,11,1217,11],[1290,12,1217,12,"parsedToken"],[1290,23,1217,23],[1290,25,1217,25],[1290,41,1217,41],[1290,42,1217,42],[1290,76,1217,76],[1290,77,1217,77],[1291,4,1218,4,"_assert"],[1291,11,1218,11],[1291,12,1218,12],[1291,19,1218,19,"parsedToken"],[1291,30,1218,30],[1291,31,1218,31,"exp"],[1291,34,1218,34],[1291,39,1218,39],[1291,50,1218,50],[1291,52,1218,52],[1291,68,1218,68],[1291,69,1218,69],[1291,103,1218,103],[1291,104,1218,104],[1292,4,1219,4,"_assert"],[1292,11,1219,11],[1292,12,1219,12],[1292,19,1219,19,"parsedToken"],[1292,30,1219,30],[1292,31,1219,31,"iat"],[1292,34,1219,34],[1292,39,1219,39],[1292,50,1219,50],[1292,52,1219,52],[1292,68,1219,68],[1292,69,1219,69],[1292,103,1219,103],[1292,104,1219,104],[1293,4,1220,4],[1293,11,1220,11,"Number"],[1293,17,1220,17],[1293,18,1220,18,"parsedToken"],[1293,29,1220,29],[1293,30,1220,30,"exp"],[1293,33,1220,33],[1293,34,1220,34],[1293,37,1220,37,"Number"],[1293,43,1220,43],[1293,44,1220,44,"parsedToken"],[1293,55,1220,55],[1293,56,1220,56,"iat"],[1293,59,1220,59],[1293,60,1220,60],[1294,2,1221,0],[1296,2,1223,0],[1297,0,1224,0],[1298,0,1225,0],[1299,0,1226,0],[1300,0,1227,0],[1301,0,1228,0],[1302,0,1229,0],[1303,0,1230,0],[1304,0,1231,0],[1305,0,1232,0],[1306,0,1233,0],[1307,0,1234,0],[1308,0,1235,0],[1309,0,1236,0],[1310,0,1237,0],[1311,0,1238,0],[1312,2,1223,0],[1312,11,1239,15,"_logoutIfInvalidated"],[1312,31,1239,35,"_logoutIfInvalidated"],[1312,32,1239,35,"_x24"],[1312,36,1239,35],[1312,38,1239,35,"_x25"],[1312,42,1239,35],[1313,4,1239,35],[1313,11,1239,35,"_logoutIfInvalidated2"],[1313,32,1239,35],[1313,33,1239,35,"apply"],[1313,38,1239,35],[1313,45,1239,35,"arguments"],[1313,54,1239,35],[1314,2,1239,35],[1315,2,1239,35],[1315,11,1239,35,"_logoutIfInvalidated2"],[1315,33,1239,35],[1316,4,1239,35,"_logoutIfInvalidated2"],[1316,25,1239,35],[1316,28,1239,35,"_asyncToGenerator"],[1316,45,1239,35],[1316,46,1239,0],[1316,57,1239,36,"user"],[1316,61,1239,40],[1316,63,1239,42,"promise"],[1316,70,1239,49],[1316,72,1239,76],[1317,6,1239,76],[1317,10,1239,51,"bypassAuthState"],[1317,25,1239,66],[1317,28,1239,66,"arguments"],[1317,37,1239,66],[1317,38,1239,66,"length"],[1317,44,1239,66],[1317,52,1239,66,"arguments"],[1317,61,1239,66],[1317,69,1239,66,"undefined"],[1317,78,1239,66],[1317,81,1239,66,"arguments"],[1317,90,1239,66],[1317,96,1239,69],[1317,101,1239,74],[1318,6,1240,4],[1318,10,1240,8,"bypassAuthState"],[1318,25,1240,23],[1318,27,1240,25],[1319,8,1241,8],[1319,15,1241,15,"promise"],[1319,22,1241,22],[1320,6,1242,4],[1321,6,1243,4],[1321,10,1243,8],[1322,8,1244,8],[1322,21,1244,21,"promise"],[1322,28,1244,28],[1323,6,1245,4],[1323,7,1245,5],[1323,8,1246,4],[1323,15,1246,11,"e"],[1323,16,1246,12],[1323,18,1246,14],[1324,8,1247,8],[1324,12,1247,12,"e"],[1324,13,1247,13],[1324,25,1247,25,"util"],[1324,29,1247,29],[1324,30,1247,30,"FirebaseError"],[1324,43,1247,43],[1324,47,1247,47,"isUserInvalidated"],[1324,64,1247,64],[1324,65,1247,65,"e"],[1324,66,1247,66],[1324,67,1247,67],[1324,69,1247,69],[1325,10,1248,12],[1325,14,1248,16,"user"],[1325,18,1248,20],[1325,19,1248,21,"auth"],[1325,23,1248,25],[1325,24,1248,26,"currentUser"],[1325,35,1248,37],[1325,40,1248,42,"user"],[1325,44,1248,46],[1325,46,1248,48],[1326,12,1249,16],[1326,18,1249,22,"user"],[1326,22,1249,26],[1326,23,1249,27,"auth"],[1326,27,1249,31],[1326,28,1249,32,"signOut"],[1326,35,1249,39],[1326,36,1249,40],[1326,37,1249,41],[1327,10,1250,12],[1328,8,1251,8],[1329,8,1252,8],[1329,14,1252,14,"e"],[1329,15,1252,15],[1330,6,1253,4],[1331,4,1254,0],[1331,5,1254,1],[1332,4,1254,1],[1332,11,1254,1,"_logoutIfInvalidated2"],[1332,32,1254,1],[1332,33,1254,1,"apply"],[1332,38,1254,1],[1332,45,1254,1,"arguments"],[1332,54,1254,1],[1333,2,1254,1],[1334,2,1255,0],[1334,11,1255,9,"isUserInvalidated"],[1334,28,1255,26,"isUserInvalidated"],[1334,29,1255,26,"_ref"],[1334,33,1255,26],[1334,35,1255,37],[1335,4,1255,37],[1335,8,1255,29,"code"],[1335,12,1255,33],[1335,15,1255,33,"_ref"],[1335,19,1255,33],[1335,20,1255,29,"code"],[1335,24,1255,33],[1336,4,1256,4],[1336,11,1256,12,"code"],[1336,15,1256,16],[1336,20,1256,21],[1336,28,1256,29],[1336,43,1256,44],[1336,44,1256,45],[1336,79,1256,80],[1336,83,1257,8,"code"],[1336,87,1257,12],[1336,92,1257,17],[1336,100,1257,25],[1336,120,1257,45],[1336,121,1257,46],[1336,156,1257,81],[1337,2,1258,0],[1339,2,1260,0],[1340,0,1261,0],[1341,0,1262,0],[1342,0,1263,0],[1343,0,1264,0],[1344,0,1265,0],[1345,0,1266,0],[1346,0,1267,0],[1347,0,1268,0],[1348,0,1269,0],[1349,0,1270,0],[1350,0,1271,0],[1351,0,1272,0],[1352,0,1273,0],[1353,0,1274,0],[1354,0,1275,0],[1355,2,1260,0],[1355,6,1276,6,"ProactiveRefresh"],[1355,22,1276,22],[1356,4,1277,4],[1356,13,1277,4,"ProactiveRefresh"],[1356,30,1277,16,"user"],[1356,34,1277,20],[1356,36,1277,22],[1357,6,1277,22,"_classCallCheck"],[1357,21,1277,22],[1357,28,1277,22,"ProactiveRefresh"],[1357,44,1277,22],[1358,6,1278,8],[1358,10,1278,12],[1358,11,1278,13,"user"],[1358,15,1278,17],[1358,18,1278,20,"user"],[1358,22,1278,24],[1359,6,1279,8],[1359,10,1279,12],[1359,11,1279,13,"isRunning"],[1359,20,1279,22],[1359,23,1279,25],[1359,28,1279,30],[1360,6,1280,8],[1361,6,1281,8],[1362,6,1282,8],[1363,6,1283,8],[1364,6,1284,8],[1364,10,1284,12],[1364,11,1284,13,"timerId"],[1364,18,1284,20],[1364,21,1284,23],[1364,25,1284,27],[1365,6,1285,8],[1365,10,1285,12],[1365,11,1285,13,"errorBackoff"],[1365,23,1285,25],[1365,26,1285,28],[1365,31,1285,33],[1365,32,1285,34],[1366,4,1286,4],[1367,4,1286,5],[1367,11,1286,5,"_createClass"],[1367,23,1286,5],[1367,24,1286,5,"ProactiveRefresh"],[1367,40,1286,5],[1368,6,1286,5,"key"],[1368,9,1286,5],[1369,6,1286,5,"value"],[1369,11,1286,5],[1369,13,1287,4],[1369,22,1287,4,"_start"],[1369,28,1287,10,"_start"],[1369,29,1287,10],[1369,31,1287,13],[1370,8,1288,8],[1370,12,1288,12],[1370,16,1288,16],[1370,17,1288,17,"isRunning"],[1370,26,1288,26],[1370,28,1288,28],[1371,10,1289,12],[1372,8,1290,8],[1373,8,1291,8],[1373,12,1291,12],[1373,13,1291,13,"isRunning"],[1373,22,1291,22],[1373,25,1291,25],[1373,29,1291,29],[1374,8,1292,8],[1374,12,1292,12],[1374,13,1292,13,"schedule"],[1374,21,1292,21],[1374,22,1292,22],[1374,23,1292,23],[1375,6,1293,4],[1376,4,1293,5],[1377,6,1293,5,"key"],[1377,9,1293,5],[1378,6,1293,5,"value"],[1378,11,1293,5],[1378,13,1294,4],[1378,22,1294,4,"_stop"],[1378,27,1294,9,"_stop"],[1378,28,1294,9],[1378,30,1294,12],[1379,8,1295,8],[1379,12,1295,12],[1379,13,1295,13],[1379,17,1295,17],[1379,18,1295,18,"isRunning"],[1379,27,1295,27],[1379,29,1295,29],[1380,10,1296,12],[1381,8,1297,8],[1382,8,1298,8],[1382,12,1298,12],[1382,13,1298,13,"isRunning"],[1382,22,1298,22],[1382,25,1298,25],[1382,30,1298,30],[1383,8,1299,8],[1383,12,1299,12],[1383,16,1299,16],[1383,17,1299,17,"timerId"],[1383,24,1299,24],[1383,29,1299,29],[1383,33,1299,33],[1383,35,1299,35],[1384,10,1300,12,"clearTimeout"],[1384,22,1300,24],[1384,23,1300,25],[1384,27,1300,29],[1384,28,1300,30,"timerId"],[1384,35,1300,37],[1384,36,1300,38],[1385,8,1301,8],[1386,6,1302,4],[1387,4,1302,5],[1388,6,1302,5,"key"],[1388,9,1302,5],[1389,6,1302,5,"value"],[1389,11,1302,5],[1389,13,1303,4],[1389,22,1303,4,"getInterval"],[1389,33,1303,15,"getInterval"],[1389,34,1303,16,"wasError"],[1389,42,1303,24],[1389,44,1303,26],[1390,8,1304,8],[1390,12,1304,12,"wasError"],[1390,20,1304,20],[1390,22,1304,22],[1391,10,1305,12],[1391,14,1305,18,"interval"],[1391,22,1305,26],[1391,25,1305,29],[1391,29,1305,33],[1391,30,1305,34,"errorBackoff"],[1391,42,1305,46],[1392,10,1306,12],[1392,14,1306,16],[1392,15,1306,17,"errorBackoff"],[1392,27,1306,29],[1392,30,1306,32,"Math"],[1392,34,1306,36],[1392,35,1306,37,"min"],[1392,38,1306,40],[1392,39,1306,41],[1392,43,1306,45],[1392,44,1306,46,"errorBackoff"],[1392,56,1306,58],[1392,59,1306,61],[1392,60,1306,62],[1392,62,1306,64],[1392,68,1306,70],[1392,69,1306,71],[1392,101,1306,103],[1392,102,1306,104],[1393,10,1307,12],[1393,17,1307,19,"interval"],[1393,25,1307,27],[1394,8,1308,8],[1394,9,1308,9],[1394,15,1309,13],[1395,10,1310,12],[1396,10,1311,12],[1396,14,1311,16],[1396,15,1311,17,"errorBackoff"],[1396,27,1311,29],[1396,30,1311,32],[1396,35,1311,37],[1396,36,1311,38],[1397,10,1312,12],[1397,14,1312,18,"expTime"],[1397,21,1312,25],[1397,24,1312,28],[1397,28,1312,32],[1397,29,1312,33,"user"],[1397,33,1312,37],[1397,34,1312,38,"stsTokenManager"],[1397,49,1312,53],[1397,50,1312,54,"expirationTime"],[1397,64,1312,68],[1397,68,1312,72],[1397,69,1312,73],[1398,10,1313,12],[1398,14,1313,18,"interval"],[1398,23,1313,26],[1398,26,1313,29,"expTime"],[1398,33,1313,36],[1398,36,1313,39,"Date"],[1398,40,1313,43],[1398,41,1313,44,"now"],[1398,44,1313,47],[1398,45,1313,48],[1398,46,1313,49],[1398,49,1313,52],[1398,55,1313,58],[1398,56,1313,59],[1399,10,1314,12],[1399,17,1314,19,"Math"],[1399,21,1314,23],[1399,22,1314,24,"max"],[1399,25,1314,27],[1399,26,1314,28],[1399,27,1314,29],[1399,29,1314,31,"interval"],[1399,38,1314,39],[1399,39,1314,40],[1400,8,1315,8],[1401,6,1316,4],[1402,4,1316,5],[1403,6,1316,5,"key"],[1403,9,1316,5],[1404,6,1316,5,"value"],[1404,11,1316,5],[1404,13,1317,4],[1404,22,1317,4,"schedule"],[1404,30,1317,12,"schedule"],[1404,31,1317,12],[1404,33,1317,31],[1405,8,1317,31],[1405,12,1317,31,"_this"],[1405,17,1317,31],[1406,8,1317,31],[1406,12,1317,13,"wasError"],[1406,20,1317,21],[1406,23,1317,21,"arguments"],[1406,32,1317,21],[1406,33,1317,21,"length"],[1406,39,1317,21],[1406,47,1317,21,"arguments"],[1406,56,1317,21],[1406,64,1317,21,"undefined"],[1406,73,1317,21],[1406,76,1317,21,"arguments"],[1406,85,1317,21],[1406,91,1317,24],[1406,96,1317,29],[1407,8,1318,8],[1407,12,1318,12],[1407,13,1318,13],[1407,17,1318,17],[1407,18,1318,18,"isRunning"],[1407,27,1318,27],[1407,29,1318,29],[1408,10,1319,12],[1409,10,1320,12],[1410,8,1321,8],[1411,8,1322,8],[1411,12,1322,14,"interval"],[1411,20,1322,22],[1411,23,1322,25],[1411,27,1322,29],[1411,28,1322,30,"getInterval"],[1411,39,1322,41],[1411,40,1322,42,"wasError"],[1411,48,1322,50],[1411,49,1322,51],[1412,8,1323,8],[1412,12,1323,12],[1412,13,1323,13,"timerId"],[1412,20,1323,20],[1412,23,1323,23,"setTimeout"],[1412,33,1323,33],[1412,47,1323,33,"_asyncToGenerator"],[1412,64,1323,33],[1412,65,1323,34],[1412,78,1323,46],[1413,10,1324,12],[1413,16,1324,18,"_this"],[1413,21,1324,22],[1413,22,1324,23,"iteration"],[1413,31,1324,32],[1413,32,1324,33],[1413,33,1324,34],[1414,8,1325,8],[1414,9,1325,9],[1414,12,1325,11,"interval"],[1414,20,1325,19],[1414,21,1325,20],[1415,6,1326,4],[1416,4,1326,5],[1417,6,1326,5,"key"],[1417,9,1326,5],[1418,6,1326,5,"value"],[1418,11,1326,5],[1419,8,1326,5],[1419,12,1326,5,"_iteration"],[1419,22,1326,5],[1419,25,1326,5,"_asyncToGenerator"],[1419,42,1326,5],[1419,43,1327,4],[1419,56,1327,22],[1420,10,1328,8],[1420,14,1328,12],[1421,12,1329,12],[1421,18,1329,18],[1421,22,1329,22],[1421,23,1329,23,"user"],[1421,27,1329,27],[1421,28,1329,28,"getIdToken"],[1421,38,1329,38],[1421,39,1329,39],[1421,43,1329,43],[1421,44,1329,44],[1422,10,1330,8],[1422,11,1330,9],[1422,12,1331,8],[1422,19,1331,15,"e"],[1422,20,1331,16],[1422,22,1331,18],[1423,12,1332,12],[1424,12,1333,12],[1424,16,1333,16,"e"],[1424,17,1333,17],[1424,19,1333,19,"code"],[1424,23,1333,23],[1424,28,1334,16],[1424,36,1334,24],[1424,60,1334,48],[1424,61,1334,49],[1424,105,1334,93],[1424,107,1334,95],[1425,14,1335,16],[1425,18,1335,20],[1425,19,1335,21,"schedule"],[1425,27,1335,29],[1425,28,1335,30],[1425,42,1335,45],[1425,46,1335,49],[1425,47,1335,50],[1426,12,1336,12],[1427,12,1337,12],[1428,10,1338,8],[1429,10,1339,8],[1429,14,1339,12],[1429,15,1339,13,"schedule"],[1429,23,1339,21],[1429,24,1339,22],[1429,25,1339,23],[1430,8,1340,4],[1430,9,1340,5],[1431,8,1340,5],[1431,17,1327,10,"iteration"],[1431,26,1327,19,"iteration"],[1431,27,1327,19],[1432,10,1327,19],[1432,17,1327,19,"_iteration"],[1432,27,1327,19],[1432,28,1327,19,"apply"],[1432,33,1327,19],[1432,40,1327,19,"arguments"],[1432,49,1327,19],[1433,8,1327,19],[1434,8,1327,19],[1434,15,1327,10,"iteration"],[1434,24,1327,19],[1435,6,1327,19],[1436,4,1327,19],[1437,2,1327,19],[1438,2,1343,0],[1439,0,1344,0],[1440,0,1345,0],[1441,0,1346,0],[1442,0,1347,0],[1443,0,1348,0],[1444,0,1349,0],[1445,0,1350,0],[1446,0,1351,0],[1447,0,1352,0],[1448,0,1353,0],[1449,0,1354,0],[1450,0,1355,0],[1451,0,1356,0],[1452,0,1357,0],[1453,0,1358,0],[1454,2,1343,0],[1454,6,1359,6,"UserMetadata"],[1454,18,1359,18],[1455,4,1360,4],[1455,13,1360,4,"UserMetadata"],[1455,26,1360,16,"createdAt"],[1455,35,1360,25],[1455,37,1360,27,"lastLoginAt"],[1455,48,1360,38],[1455,50,1360,40],[1456,6,1360,40,"_classCallCheck"],[1456,21,1360,40],[1456,28,1360,40,"UserMetadata"],[1456,40,1360,40],[1457,6,1361,8],[1457,10,1361,12],[1457,11,1361,13,"createdAt"],[1457,20,1361,22],[1457,23,1361,25,"createdAt"],[1457,32,1361,34],[1458,6,1362,8],[1458,10,1362,12],[1458,11,1362,13,"lastLoginAt"],[1458,22,1362,24],[1458,25,1362,27,"lastLoginAt"],[1458,36,1362,38],[1459,6,1363,8],[1459,10,1363,12],[1459,11,1363,13,"_initializeTime"],[1459,26,1363,28],[1459,27,1363,29],[1459,28,1363,30],[1460,4,1364,4],[1461,4,1364,5],[1461,11,1364,5,"_createClass"],[1461,23,1364,5],[1461,24,1364,5,"UserMetadata"],[1461,36,1364,5],[1462,6,1364,5,"key"],[1462,9,1364,5],[1463,6,1364,5,"value"],[1463,11,1364,5],[1463,13,1365,4],[1463,22,1365,4,"_initializeTime"],[1463,37,1365,19,"_initializeTime"],[1463,38,1365,19],[1463,40,1365,22],[1464,8,1366,8],[1464,12,1366,12],[1464,13,1366,13,"lastSignInTime"],[1464,27,1366,27],[1464,30,1366,30,"utcTimestampToDateString"],[1464,54,1366,54],[1464,55,1366,55],[1464,59,1366,59],[1464,60,1366,60,"lastLoginAt"],[1464,71,1366,71],[1464,72,1366,72],[1465,8,1367,8],[1465,12,1367,12],[1465,13,1367,13,"creationTime"],[1465,25,1367,25],[1465,28,1367,28,"utcTimestampToDateString"],[1465,52,1367,52],[1465,53,1367,53],[1465,57,1367,57],[1465,58,1367,58,"createdAt"],[1465,67,1367,67],[1465,68,1367,68],[1466,6,1368,4],[1467,4,1368,5],[1468,6,1368,5,"key"],[1468,9,1368,5],[1469,6,1368,5,"value"],[1469,11,1368,5],[1469,13,1369,4],[1469,22,1369,4,"_copy"],[1469,27,1369,9,"_copy"],[1469,28,1369,10,"metadata"],[1469,36,1369,18],[1469,38,1369,20],[1470,8,1370,8],[1470,12,1370,12],[1470,13,1370,13,"createdAt"],[1470,22,1370,22],[1470,25,1370,25,"metadata"],[1470,33,1370,33],[1470,34,1370,34,"createdAt"],[1470,43,1370,43],[1471,8,1371,8],[1471,12,1371,12],[1471,13,1371,13,"lastLoginAt"],[1471,24,1371,24],[1471,27,1371,27,"metadata"],[1471,35,1371,35],[1471,36,1371,36,"lastLoginAt"],[1471,47,1371,47],[1472,8,1372,8],[1472,12,1372,12],[1472,13,1372,13,"_initializeTime"],[1472,28,1372,28],[1472,29,1372,29],[1472,30,1372,30],[1473,6,1373,4],[1474,4,1373,5],[1475,6,1373,5,"key"],[1475,9,1373,5],[1476,6,1373,5,"value"],[1476,11,1373,5],[1476,13,1374,4],[1476,22,1374,4,"toJSON"],[1476,28,1374,10,"toJSON"],[1476,29,1374,10],[1476,31,1374,13],[1477,8,1375,8],[1477,15,1375,15],[1478,10,1376,12,"createdAt"],[1478,19,1376,21],[1478,21,1376,23],[1478,25,1376,27],[1478,26,1376,28,"createdAt"],[1478,35,1376,37],[1479,10,1377,12,"lastLoginAt"],[1479,21,1377,23],[1479,23,1377,25],[1479,27,1377,29],[1479,28,1377,30,"lastLoginAt"],[1480,8,1378,8],[1480,9,1378,9],[1481,6,1379,4],[1482,4,1379,5],[1483,2,1379,5],[1484,2,1382,0],[1485,0,1383,0],[1486,0,1384,0],[1487,0,1385,0],[1488,0,1386,0],[1489,0,1387,0],[1490,0,1388,0],[1491,0,1389,0],[1492,0,1390,0],[1493,0,1391,0],[1494,0,1392,0],[1495,0,1393,0],[1496,0,1394,0],[1497,0,1395,0],[1498,0,1396,0],[1499,0,1397,0],[1500,2,1382,0],[1500,11,1398,15,"_reloadWithoutSaving"],[1500,31,1398,35,"_reloadWithoutSaving"],[1500,32,1398,35,"_x26"],[1500,36,1398,35],[1501,4,1398,35],[1501,11,1398,35,"_reloadWithoutSaving2"],[1501,32,1398,35],[1501,33,1398,35,"apply"],[1501,38,1398,35],[1501,45,1398,35,"arguments"],[1501,54,1398,35],[1502,2,1398,35],[1503,2,1431,0],[1504,0,1432,0],[1505,0,1433,0],[1506,0,1434,0],[1507,0,1435,0],[1508,0,1436,0],[1509,0,1437,0],[1510,2,1431,0],[1510,11,1431,0,"_reloadWithoutSaving2"],[1510,33,1431,0],[1511,4,1431,0,"_reloadWithoutSaving2"],[1511,25,1431,0],[1511,28,1431,0,"_asyncToGenerator"],[1511,45,1431,0],[1511,46,1398,0],[1511,57,1398,36,"user"],[1511,61,1398,40],[1511,63,1398,42],[1512,6,1399,4],[1512,10,1399,10,"auth"],[1512,14,1399,14],[1512,17,1399,17,"user"],[1512,21,1399,21],[1512,22,1399,22,"auth"],[1512,26,1399,26],[1513,6,1400,4],[1513,10,1400,10,"idToken"],[1513,17,1400,17],[1513,26,1400,26,"user"],[1513,30,1400,30],[1513,31,1400,31,"getIdToken"],[1513,41,1400,41],[1513,42,1400,42],[1513,43,1400,43],[1514,6,1401,4],[1514,10,1401,10,"response"],[1514,18,1401,18],[1514,27,1401,27,"_logoutIfInvalidated"],[1514,47,1401,47],[1514,48,1401,48,"user"],[1514,52,1401,52],[1514,54,1401,54,"getAccountInfo"],[1514,68,1401,68],[1514,69,1401,69,"auth"],[1514,73,1401,73],[1514,75,1401,75],[1515,8,1401,77,"idToken"],[1516,6,1401,85],[1516,7,1401,86],[1516,8,1401,87],[1516,9,1401,88],[1517,6,1402,4,"_assert"],[1517,13,1402,11],[1517,14,1402,12,"response"],[1517,22,1402,20],[1517,24,1402,22,"users"],[1517,29,1402,27],[1517,30,1402,28,"length"],[1517,36,1402,34],[1517,38,1402,36,"auth"],[1517,42,1402,40],[1517,44,1402,42],[1517,60,1402,58],[1517,61,1402,59],[1517,95,1402,93],[1517,96,1402,94],[1518,6,1403,4],[1518,10,1403,10,"coreAccount"],[1518,21,1403,21],[1518,24,1403,24,"response"],[1518,32,1403,32],[1518,33,1403,33,"users"],[1518,38,1403,38],[1518,39,1403,39],[1518,40,1403,40],[1518,41,1403,41],[1519,6,1404,4,"user"],[1519,10,1404,8],[1519,11,1404,9,"_notifyReloadListener"],[1519,32,1404,30],[1519,33,1404,31,"coreAccount"],[1519,44,1404,42],[1519,45,1404,43],[1520,6,1405,4],[1520,10,1405,10,"newProviderData"],[1520,25,1405,25],[1520,28,1405,28,"coreAccount"],[1520,39,1405,39],[1520,40,1405,40,"providerUserInfo"],[1520,56,1405,56],[1520,58,1405,58,"length"],[1520,64,1405,64],[1520,67,1406,10,"extractProviderData"],[1520,86,1406,29],[1520,87,1406,30,"coreAccount"],[1520,98,1406,41],[1520,99,1406,42,"providerUserInfo"],[1520,115,1406,58],[1520,116,1406,59],[1520,119,1407,10],[1520,121,1407,12],[1521,6,1408,4],[1521,10,1408,10,"providerData"],[1521,22,1408,22],[1521,25,1408,25,"mergeProviderData"],[1521,42,1408,42],[1521,43,1408,43,"user"],[1521,47,1408,47],[1521,48,1408,48,"providerData"],[1521,60,1408,60],[1521,62,1408,62,"newProviderData"],[1521,77,1408,77],[1521,78,1408,78],[1522,6,1409,4],[1523,6,1410,4],[1524,6,1411,4],[1525,6,1412,4],[1526,6,1413,4],[1527,6,1414,4],[1527,10,1414,10,"oldIsAnonymous"],[1527,24,1414,24],[1527,27,1414,27,"user"],[1527,31,1414,31],[1527,32,1414,32,"isAnonymous"],[1527,43,1414,43],[1528,6,1415,4],[1528,10,1415,10,"newIsAnonymous"],[1528,24,1415,24],[1528,27,1415,27],[1528,29,1415,29,"user"],[1528,33,1415,33],[1528,34,1415,34,"email"],[1528,39,1415,39],[1528,43,1415,43,"coreAccount"],[1528,54,1415,54],[1528,55,1415,55,"passwordHash"],[1528,67,1415,67],[1528,68,1415,68],[1528,72,1415,72],[1528,73,1415,73,"providerData"],[1528,85,1415,85],[1528,87,1415,87,"length"],[1528,93,1415,93],[1529,6,1416,4],[1529,10,1416,10,"isAnonymous"],[1529,21,1416,21],[1529,24,1416,24],[1529,25,1416,25,"oldIsAnonymous"],[1529,39,1416,39],[1529,42,1416,42],[1529,47,1416,47],[1529,50,1416,50,"newIsAnonymous"],[1529,64,1416,64],[1530,6,1417,4],[1530,10,1417,10,"updates"],[1530,17,1417,17],[1530,20,1417,20],[1531,8,1418,8,"uid"],[1531,11,1418,11],[1531,13,1418,13,"coreAccount"],[1531,24,1418,24],[1531,25,1418,25,"localId"],[1531,32,1418,32],[1532,8,1419,8,"displayName"],[1532,19,1419,19],[1532,21,1419,21,"coreAccount"],[1532,32,1419,32],[1532,33,1419,33,"displayName"],[1532,44,1419,44],[1532,48,1419,48],[1532,52,1419,52],[1533,8,1420,8,"photoURL"],[1533,16,1420,16],[1533,18,1420,18,"coreAccount"],[1533,29,1420,29],[1533,30,1420,30,"photoUrl"],[1533,38,1420,38],[1533,42,1420,42],[1533,46,1420,46],[1534,8,1421,8,"email"],[1534,13,1421,13],[1534,15,1421,15,"coreAccount"],[1534,26,1421,26],[1534,27,1421,27,"email"],[1534,32,1421,32],[1534,36,1421,36],[1534,40,1421,40],[1535,8,1422,8,"emailVerified"],[1535,21,1422,21],[1535,23,1422,23,"coreAccount"],[1535,34,1422,34],[1535,35,1422,35,"emailVerified"],[1535,48,1422,48],[1535,52,1422,52],[1535,57,1422,57],[1536,8,1423,8,"phoneNumber"],[1536,19,1423,19],[1536,21,1423,21,"coreAccount"],[1536,32,1423,32],[1536,33,1423,33,"phoneNumber"],[1536,44,1423,44],[1536,48,1423,48],[1536,52,1423,52],[1537,8,1424,8,"tenantId"],[1537,16,1424,16],[1537,18,1424,18,"coreAccount"],[1537,29,1424,29],[1537,30,1424,30,"tenantId"],[1537,38,1424,38],[1537,42,1424,42],[1537,46,1424,46],[1538,8,1425,8,"providerData"],[1538,20,1425,20],[1539,8,1426,8,"metadata"],[1539,16,1426,16],[1539,18,1426,18],[1539,22,1426,22,"UserMetadata"],[1539,34,1426,34],[1539,35,1426,35,"coreAccount"],[1539,46,1426,46],[1539,47,1426,47,"createdAt"],[1539,56,1426,56],[1539,58,1426,58,"coreAccount"],[1539,69,1426,69],[1539,70,1426,70,"lastLoginAt"],[1539,81,1426,81],[1539,82,1426,82],[1540,8,1427,8,"isAnonymous"],[1541,6,1428,4],[1541,7,1428,5],[1542,6,1429,4,"Object"],[1542,12,1429,10],[1542,13,1429,11,"assign"],[1542,19,1429,17],[1542,20,1429,18,"user"],[1542,24,1429,22],[1542,26,1429,24,"updates"],[1542,33,1429,31],[1542,34,1429,32],[1543,4,1430,0],[1543,5,1430,1],[1544,4,1430,1],[1544,11,1430,1,"_reloadWithoutSaving2"],[1544,32,1430,1],[1544,33,1430,1,"apply"],[1544,38,1430,1],[1544,45,1430,1,"arguments"],[1544,54,1430,1],[1545,2,1430,1],[1546,2,1430,1],[1546,11,1438,15,"reload"],[1546,19,1438,21,"reload"],[1546,20,1438,21,"_x27"],[1546,24,1438,21],[1547,4,1438,21],[1547,11,1438,21,"_reload"],[1547,18,1438,21],[1547,19,1438,21,"apply"],[1547,24,1438,21],[1547,31,1438,21,"arguments"],[1547,40,1438,21],[1548,2,1438,21],[1549,2,1438,21],[1549,11,1438,21,"_reload"],[1549,19,1438,21],[1550,4,1438,21,"_reload"],[1550,11,1438,21],[1550,14,1438,21,"_asyncToGenerator"],[1550,31,1438,21],[1550,32,1438,0],[1550,43,1438,22,"user"],[1550,47,1438,26],[1550,49,1438,28],[1551,6,1439,4],[1551,10,1439,10,"userInternal"],[1551,22,1439,22],[1551,25,1439,25,"util"],[1551,29,1439,29],[1551,30,1439,30,"getModularInstance"],[1551,48,1439,48],[1551,49,1439,49,"user"],[1551,53,1439,53],[1551,54,1439,54],[1552,6,1440,4],[1552,12,1440,10,"_reloadWithoutSaving"],[1552,32,1440,30],[1552,33,1440,31,"userInternal"],[1552,45,1440,43],[1552,46,1440,44],[1553,6,1441,4],[1554,6,1442,4],[1555,6,1443,4],[1556,6,1444,4],[1556,12,1444,10,"userInternal"],[1556,24,1444,22],[1556,25,1444,23,"auth"],[1556,29,1444,27],[1556,30,1444,28,"_persistUserIfCurrent"],[1556,51,1444,49],[1556,52,1444,50,"userInternal"],[1556,64,1444,62],[1556,65,1444,63],[1557,6,1445,4,"userInternal"],[1557,18,1445,16],[1557,19,1445,17,"auth"],[1557,23,1445,21],[1557,24,1445,22,"_notifyListenersIfCurrent"],[1557,49,1445,47],[1557,50,1445,48,"userInternal"],[1557,62,1445,60],[1557,63,1445,61],[1558,4,1446,0],[1558,5,1446,1],[1559,4,1446,1],[1559,11,1446,1,"_reload"],[1559,18,1446,1],[1559,19,1446,1,"apply"],[1559,24,1446,1],[1559,31,1446,1,"arguments"],[1559,40,1446,1],[1560,2,1446,1],[1561,2,1447,0],[1561,11,1447,9,"mergeProviderData"],[1561,28,1447,26,"mergeProviderData"],[1561,29,1447,27,"original"],[1561,37,1447,35],[1561,39,1447,37,"newData"],[1561,46,1447,44],[1561,48,1447,46],[1562,4,1448,4],[1562,8,1448,10,"deduped"],[1562,15,1448,17],[1562,18,1448,20,"original"],[1562,26,1448,28],[1562,27,1448,29,"filter"],[1562,33,1448,35],[1562,34,1448,36,"o"],[1562,35,1448,37],[1562,39,1448,41],[1562,40,1448,42,"newData"],[1562,47,1448,49],[1562,48,1448,50,"some"],[1562,52,1448,54],[1562,53,1448,55,"n"],[1562,54,1448,56],[1562,58,1448,60,"n"],[1562,59,1448,61],[1562,60,1448,62,"providerId"],[1562,70,1448,72],[1562,75,1448,77,"o"],[1562,76,1448,78],[1562,77,1448,79,"providerId"],[1562,87,1448,89],[1562,88,1448,90],[1562,89,1448,91],[1563,4,1449,4],[1563,11,1449,11],[1563,12,1449,12],[1563,15,1449,15,"deduped"],[1563,22,1449,22],[1563,24,1449,24],[1563,27,1449,27,"newData"],[1563,34,1449,34],[1563,35,1449,35],[1564,2,1450,0],[1565,2,1451,0],[1565,11,1451,9,"extractProviderData"],[1565,30,1451,28,"extractProviderData"],[1565,31,1451,29,"providers"],[1565,40,1451,38],[1565,42,1451,40],[1566,4,1452,4],[1566,11,1452,11,"providers"],[1566,20,1452,20],[1566,21,1452,21,"map"],[1566,24,1452,24],[1566,25,1452,25,"_ref3"],[1566,30,1452,25],[1566,34,1452,58],[1567,6,1452,58],[1567,10,1452,28,"providerId"],[1567,20,1452,38],[1567,23,1452,38,"_ref3"],[1567,28,1452,38],[1567,29,1452,28,"providerId"],[1567,39,1452,38],[1568,8,1452,43,"provider"],[1568,16,1452,51],[1568,19,1452,51,"_objectWithoutProperties"],[1568,43,1452,51],[1568,44,1452,51,"_ref3"],[1568,49,1452,51],[1568,51,1452,51,"_excluded"],[1568,60,1452,51],[1569,6,1453,8],[1569,13,1453,15],[1570,8,1454,12,"providerId"],[1570,18,1454,22],[1571,8,1455,12,"uid"],[1571,11,1455,15],[1571,13,1455,17,"provider"],[1571,21,1455,25],[1571,22,1455,26,"rawId"],[1571,27,1455,31],[1571,31,1455,35],[1571,33,1455,37],[1572,8,1456,12,"displayName"],[1572,19,1456,23],[1572,21,1456,25,"provider"],[1572,29,1456,33],[1572,30,1456,34,"displayName"],[1572,41,1456,45],[1572,45,1456,49],[1572,49,1456,53],[1573,8,1457,12,"email"],[1573,13,1457,17],[1573,15,1457,19,"provider"],[1573,23,1457,27],[1573,24,1457,28,"email"],[1573,29,1457,33],[1573,33,1457,37],[1573,37,1457,41],[1574,8,1458,12,"phoneNumber"],[1574,19,1458,23],[1574,21,1458,25,"provider"],[1574,29,1458,33],[1574,30,1458,34,"phoneNumber"],[1574,41,1458,45],[1574,45,1458,49],[1574,49,1458,53],[1575,8,1459,12,"photoURL"],[1575,16,1459,20],[1575,18,1459,22,"provider"],[1575,26,1459,30],[1575,27,1459,31,"photoUrl"],[1575,35,1459,39],[1575,39,1459,43],[1576,6,1460,8],[1576,7,1460,9],[1577,4,1461,4],[1577,5,1461,5],[1577,6,1461,6],[1578,2,1462,0],[1580,2,1464,0],[1581,0,1465,0],[1582,0,1466,0],[1583,0,1467,0],[1584,0,1468,0],[1585,0,1469,0],[1586,0,1470,0],[1587,0,1471,0],[1588,0,1472,0],[1589,0,1473,0],[1590,0,1474,0],[1591,0,1475,0],[1592,0,1476,0],[1593,0,1477,0],[1594,0,1478,0],[1595,0,1479,0],[1596,2,1464,0],[1596,11,1480,15,"requestStsToken"],[1596,26,1480,30,"requestStsToken"],[1596,27,1480,30,"_x28"],[1596,31,1480,30],[1596,33,1480,30,"_x29"],[1596,37,1480,30],[1597,4,1480,30],[1597,11,1480,30,"_requestStsToken"],[1597,27,1480,30],[1597,28,1480,30,"apply"],[1597,33,1480,30],[1597,40,1480,30,"arguments"],[1597,49,1480,30],[1598,2,1480,30],[1599,2,1480,30],[1599,11,1480,30,"_requestStsToken"],[1599,28,1480,30],[1600,4,1480,30,"_requestStsToken"],[1600,20,1480,30],[1600,23,1480,30,"_asyncToGenerator"],[1600,40,1480,30],[1600,41,1480,0],[1600,52,1480,31,"auth"],[1600,56,1480,35],[1600,58,1480,37,"refreshToken"],[1600,70,1480,49],[1600,72,1480,51],[1601,6,1481,4],[1601,10,1481,10,"response"],[1601,18,1481,18],[1601,27,1481,27,"_performFetchWithErrorHandling"],[1601,57,1481,57],[1601,58,1481,58,"auth"],[1601,62,1481,62],[1601,64,1481,64],[1601,65,1481,65],[1601,66,1481,66],[1601,81,1481,66,"_asyncToGenerator"],[1601,98,1481,66],[1601,99,1481,68],[1601,112,1481,80],[1602,8,1482,8],[1602,12,1482,14,"body"],[1602,16,1482,18],[1602,19,1482,21,"util"],[1602,23,1482,25],[1602,24,1482,26,"querystring"],[1602,35,1482,37],[1602,36,1482,38],[1603,10,1483,12],[1603,22,1483,24],[1603,24,1483,26],[1603,39,1483,41],[1604,10,1484,12],[1604,25,1484,27],[1604,27,1484,29,"refreshToken"],[1605,8,1485,8],[1605,9,1485,9],[1605,10,1485,10],[1605,11,1485,11,"slice"],[1605,16,1485,16],[1605,17,1485,17],[1605,18,1485,18],[1605,19,1485,19],[1606,8,1486,8],[1606,12,1486,8,"_auth$config"],[1606,24,1486,8],[1606,27,1486,41,"auth"],[1606,31,1486,45],[1606,32,1486,46,"config"],[1606,38,1486,52],[1607,10,1486,16,"tokenApiHost"],[1607,22,1486,28],[1607,25,1486,28,"_auth$config"],[1607,37,1486,28],[1607,38,1486,16,"tokenApiHost"],[1607,50,1486,28],[1608,10,1486,30,"apiKey"],[1608,16,1486,36],[1608,19,1486,36,"_auth$config"],[1608,31,1486,36],[1608,32,1486,30,"apiKey"],[1608,38,1486,36],[1609,8,1487,8],[1609,12,1487,14,"url"],[1609,15,1487,17],[1609,24,1487,26,"_getFinalTarget"],[1609,39,1487,41],[1609,40,1487,42,"auth"],[1609,44,1487,46],[1609,46,1487,48,"tokenApiHost"],[1609,58,1487,60],[1609,60,1487,62],[1609,71,1487,73],[1609,72,1487,74],[1609,94,1487,96],[1609,101,1487,103,"apiKey"],[1609,107,1487,109],[1609,109,1487,111],[1609,110,1487,112],[1610,8,1488,8],[1610,12,1488,14,"headers"],[1610,19,1488,21],[1610,28,1488,30,"auth"],[1610,32,1488,34],[1610,33,1488,35,"_getAdditionalHeaders"],[1610,54,1488,56],[1610,55,1488,57],[1610,56,1488,58],[1611,8,1489,8,"headers"],[1611,15,1489,15],[1611,16,1489,16],[1611,30,1489,30],[1611,31,1489,31],[1611,61,1489,61],[1611,64,1489,64],[1611,99,1489,99],[1612,8,1490,8],[1612,12,1490,14,"options"],[1612,19,1490,21],[1612,22,1490,24],[1613,10,1491,12,"method"],[1613,16,1491,18],[1613,18,1491,20],[1613,24,1491,26],[1613,25,1491,27],[1614,10,1492,12,"headers"],[1614,17,1492,19],[1615,10,1493,12,"body"],[1616,8,1494,8],[1616,9,1494,9],[1617,8,1495,8],[1617,12,1495,12,"auth"],[1617,16,1495,16],[1617,17,1495,17,"emulatorConfig"],[1617,31,1495,31],[1617,35,1496,12,"util"],[1617,39,1496,16],[1617,40,1496,17,"isCloudWorkstation"],[1617,58,1496,35],[1617,59,1496,36,"auth"],[1617,63,1496,40],[1617,64,1496,41,"emulatorConfig"],[1617,78,1496,55],[1617,79,1496,56,"host"],[1617,83,1496,60],[1617,84,1496,61],[1617,86,1496,63],[1618,10,1497,12,"options"],[1618,17,1497,19],[1618,18,1497,20,"credentials"],[1618,29,1497,31],[1618,32,1497,34],[1618,41,1497,43],[1619,8,1498,8],[1620,8,1499,8],[1620,15,1499,15,"FetchProvider"],[1620,28,1499,28],[1620,29,1499,29,"fetch"],[1620,34,1499,34],[1620,35,1499,35],[1620,36,1499,36],[1620,37,1499,37,"url"],[1620,40,1499,40],[1620,42,1499,42,"options"],[1620,49,1499,49],[1620,50,1499,50],[1621,6,1500,4],[1621,7,1500,5],[1621,9,1500,6],[1622,6,1501,4],[1623,6,1502,4],[1623,13,1502,11],[1624,8,1503,8,"accessToken"],[1624,19,1503,19],[1624,21,1503,21,"response"],[1624,29,1503,29],[1624,30,1503,30,"access_token"],[1624,42,1503,42],[1625,8,1504,8,"expiresIn"],[1625,17,1504,17],[1625,19,1504,19,"response"],[1625,27,1504,27],[1625,28,1504,28,"expires_in"],[1625,38,1504,38],[1626,8,1505,8,"refreshToken"],[1626,20,1505,20],[1626,22,1505,22,"response"],[1626,30,1505,30],[1626,31,1505,31,"refresh_token"],[1627,6,1506,4],[1627,7,1506,5],[1628,4,1507,0],[1628,5,1507,1],[1629,4,1507,1],[1629,11,1507,1,"_requestStsToken"],[1629,27,1507,1],[1629,28,1507,1,"apply"],[1629,33,1507,1],[1629,40,1507,1,"arguments"],[1629,49,1507,1],[1630,2,1507,1],[1631,2,1507,1],[1631,11,1508,15,"revokeToken"],[1631,22,1508,26,"revokeToken"],[1631,23,1508,26,"_x30"],[1631,27,1508,26],[1631,29,1508,26,"_x31"],[1631,33,1508,26],[1632,4,1508,26],[1632,11,1508,26,"_revokeToken"],[1632,23,1508,26],[1632,24,1508,26,"apply"],[1632,29,1508,26],[1632,36,1508,26,"arguments"],[1632,45,1508,26],[1633,2,1508,26],[1634,2,1512,0],[1635,0,1513,0],[1636,0,1514,0],[1637,0,1515,0],[1638,0,1516,0],[1639,0,1517,0],[1640,0,1518,0],[1641,0,1519,0],[1642,0,1520,0],[1643,0,1521,0],[1644,0,1522,0],[1645,0,1523,0],[1646,0,1524,0],[1647,0,1525,0],[1648,0,1526,0],[1649,0,1527,0],[1650,2,1528,0],[1651,0,1529,0],[1652,0,1530,0],[1653,0,1531,0],[1654,0,1532,0],[1655,0,1533,0],[1656,2,1528,0],[1656,11,1528,0,"_revokeToken"],[1656,24,1528,0],[1657,4,1528,0,"_revokeToken"],[1657,16,1528,0],[1657,19,1528,0,"_asyncToGenerator"],[1657,36,1528,0],[1657,37,1508,0],[1657,48,1508,27,"auth"],[1657,52,1508,31],[1657,54,1508,33,"request"],[1657,61,1508,40],[1657,63,1508,42],[1658,6,1509,4],[1658,13,1509,11,"_performApiRequest"],[1658,31,1509,29],[1658,32,1509,30,"auth"],[1658,36,1509,34],[1658,38,1509,36],[1658,44,1509,42],[1658,45,1509,43],[1658,68,1509,66],[1658,94,1509,92],[1658,95,1509,93],[1658,124,1509,122,"_addTidIfNecessary"],[1658,142,1509,140],[1658,143,1509,141,"auth"],[1658,147,1509,145],[1658,149,1509,147,"request"],[1658,156,1509,154],[1658,157,1509,155],[1658,158,1509,156],[1659,4,1510,0],[1659,5,1510,1],[1660,4,1510,1],[1660,11,1510,1,"_revokeToken"],[1660,23,1510,1],[1660,24,1510,1,"apply"],[1660,29,1510,1],[1660,36,1510,1,"arguments"],[1660,45,1510,1],[1661,2,1510,1],[1662,2,1510,1],[1662,6,1534,6,"StsTokenManager"],[1662,21,1534,21],[1663,4,1535,4],[1663,13,1535,4,"StsTokenManager"],[1663,29,1535,4],[1663,31,1535,18],[1664,6,1535,18,"_classCallCheck"],[1664,21,1535,18],[1664,28,1535,18,"StsTokenManager"],[1664,43,1535,18],[1665,6,1536,8],[1665,10,1536,12],[1665,11,1536,13,"refreshToken"],[1665,23,1536,25],[1665,26,1536,28],[1665,30,1536,32],[1666,6,1537,8],[1666,10,1537,12],[1666,11,1537,13,"accessToken"],[1666,22,1537,24],[1666,25,1537,27],[1666,29,1537,31],[1667,6,1538,8],[1667,10,1538,12],[1667,11,1538,13,"expirationTime"],[1667,25,1538,27],[1667,28,1538,30],[1667,32,1538,34],[1668,4,1539,4],[1669,4,1539,5],[1669,11,1539,5,"_createClass"],[1669,23,1539,5],[1669,24,1539,5,"StsTokenManager"],[1669,39,1539,5],[1670,6,1539,5,"key"],[1670,9,1539,5],[1671,6,1539,5,"get"],[1671,9,1539,5],[1671,11,1540,4],[1671,20,1540,4,"get"],[1671,21,1540,4],[1671,23,1540,20],[1672,8,1541,8],[1672,15,1541,16],[1672,16,1541,17],[1672,20,1541,21],[1672,21,1541,22,"expirationTime"],[1672,35,1541,36],[1672,39,1542,12,"Date"],[1672,43,1542,16],[1672,44,1542,17,"now"],[1672,47,1542,20],[1672,48,1542,21],[1672,49,1542,22],[1672,52,1542,25],[1672,56,1542,29],[1672,57,1542,30,"expirationTime"],[1672,71,1542,44],[1672,74,1542,47],[1672,79,1542,52],[1672,80,1542,53],[1673,6,1543,4],[1674,4,1543,5],[1675,6,1543,5,"key"],[1675,9,1543,5],[1676,6,1543,5,"value"],[1676,11,1543,5],[1676,13,1544,4],[1676,22,1544,4,"updateFromServerResponse"],[1676,46,1544,28,"updateFromServerResponse"],[1676,47,1544,29,"response"],[1676,55,1544,37],[1676,57,1544,39],[1677,8,1545,8,"_assert"],[1677,15,1545,15],[1677,16,1545,16,"response"],[1677,24,1545,24],[1677,25,1545,25,"idToken"],[1677,32,1545,32],[1677,34,1545,34],[1677,50,1545,50],[1677,51,1545,51],[1677,85,1545,85],[1677,86,1545,86],[1678,8,1546,8,"_assert"],[1678,15,1546,15],[1678,16,1546,16],[1678,23,1546,23,"response"],[1678,31,1546,31],[1678,32,1546,32,"idToken"],[1678,39,1546,39],[1678,44,1546,44],[1678,55,1546,55],[1678,57,1546,57],[1678,73,1546,73],[1678,74,1546,74],[1678,108,1546,108],[1678,109,1546,109],[1679,8,1547,8,"_assert"],[1679,15,1547,15],[1679,16,1547,16],[1679,23,1547,23,"response"],[1679,31,1547,31],[1679,32,1547,32,"refreshToken"],[1679,44,1547,44],[1679,49,1547,49],[1679,60,1547,60],[1679,62,1547,62],[1679,78,1547,78],[1679,79,1547,79],[1679,113,1547,113],[1679,114,1547,114],[1680,8,1548,8],[1680,12,1548,14,"expiresIn"],[1680,21,1548,23],[1680,24,1548,26],[1680,35,1548,37],[1680,39,1548,41,"response"],[1680,47,1548,49],[1680,51,1548,53],[1680,58,1548,60,"response"],[1680,66,1548,68],[1680,67,1548,69,"expiresIn"],[1680,76,1548,78],[1680,81,1548,83],[1680,92,1548,94],[1680,95,1549,14,"Number"],[1680,101,1549,20],[1680,102,1549,21,"response"],[1680,110,1549,29],[1680,111,1549,30,"expiresIn"],[1680,120,1549,39],[1680,121,1549,40],[1680,124,1550,14,"_tokenExpiresIn"],[1680,139,1550,29],[1680,140,1550,30,"response"],[1680,148,1550,38],[1680,149,1550,39,"idToken"],[1680,156,1550,46],[1680,157,1550,47],[1681,8,1551,8],[1681,12,1551,12],[1681,13,1551,13,"updateTokensAndExpiration"],[1681,38,1551,38],[1681,39,1551,39,"response"],[1681,47,1551,47],[1681,48,1551,48,"idToken"],[1681,55,1551,55],[1681,57,1551,57,"response"],[1681,65,1551,65],[1681,66,1551,66,"refreshToken"],[1681,78,1551,78],[1681,80,1551,80,"expiresIn"],[1681,89,1551,89],[1681,90,1551,90],[1682,6,1552,4],[1683,4,1552,5],[1684,6,1552,5,"key"],[1684,9,1552,5],[1685,6,1552,5,"value"],[1685,11,1552,5],[1685,13,1553,4],[1685,22,1553,4,"updateFromIdToken"],[1685,39,1553,21,"updateFromIdToken"],[1685,40,1553,22,"idToken"],[1685,47,1553,29],[1685,49,1553,31],[1686,8,1554,8,"_assert"],[1686,15,1554,15],[1686,16,1554,16,"idToken"],[1686,23,1554,23],[1686,24,1554,24,"length"],[1686,30,1554,30],[1686,35,1554,35],[1686,36,1554,36],[1686,38,1554,38],[1686,54,1554,54],[1686,55,1554,55],[1686,89,1554,89],[1686,90,1554,90],[1687,8,1555,8],[1687,12,1555,14,"expiresIn"],[1687,21,1555,23],[1687,24,1555,26,"_tokenExpiresIn"],[1687,39,1555,41],[1687,40,1555,42,"idToken"],[1687,47,1555,49],[1687,48,1555,50],[1688,8,1556,8],[1688,12,1556,12],[1688,13,1556,13,"updateTokensAndExpiration"],[1688,38,1556,38],[1688,39,1556,39,"idToken"],[1688,46,1556,46],[1688,48,1556,48],[1688,52,1556,52],[1688,54,1556,54,"expiresIn"],[1688,63,1556,63],[1688,64,1556,64],[1689,6,1557,4],[1690,4,1557,5],[1691,6,1557,5,"key"],[1691,9,1557,5],[1692,6,1557,5,"value"],[1692,11,1557,5],[1693,8,1557,5],[1693,12,1557,5,"_getToken"],[1693,21,1557,5],[1693,24,1557,5,"_asyncToGenerator"],[1693,41,1557,5],[1693,42,1558,4],[1693,53,1558,19,"auth"],[1693,57,1558,23],[1693,59,1558,47],[1694,10,1558,47],[1694,14,1558,25,"forceRefresh"],[1694,26,1558,37],[1694,29,1558,37,"arguments"],[1694,38,1558,37],[1694,39,1558,37,"length"],[1694,45,1558,37],[1694,53,1558,37,"arguments"],[1694,62,1558,37],[1694,70,1558,37,"undefined"],[1694,79,1558,37],[1694,82,1558,37,"arguments"],[1694,91,1558,37],[1694,97,1558,40],[1694,102,1558,45],[1695,10,1559,8],[1695,14,1559,12],[1695,15,1559,13,"forceRefresh"],[1695,27,1559,25],[1695,31,1559,29],[1695,35,1559,33],[1695,36,1559,34,"accessToken"],[1695,47,1559,45],[1695,51,1559,49],[1695,52,1559,50],[1695,56,1559,54],[1695,57,1559,55,"isExpired"],[1695,66,1559,64],[1695,68,1559,66],[1696,12,1560,12],[1696,19,1560,19],[1696,23,1560,23],[1696,24,1560,24,"accessToken"],[1696,35,1560,35],[1697,10,1561,8],[1698,10,1562,8,"_assert"],[1698,17,1562,15],[1698,18,1562,16],[1698,22,1562,20],[1698,23,1562,21,"refreshToken"],[1698,35,1562,33],[1698,37,1562,35,"auth"],[1698,41,1562,39],[1698,43,1562,41],[1698,63,1562,61],[1698,64,1562,62],[1698,97,1562,95],[1698,98,1562,96],[1699,10,1563,8],[1699,14,1563,12],[1699,18,1563,16],[1699,19,1563,17,"refreshToken"],[1699,31,1563,29],[1699,33,1563,31],[1700,12,1564,12],[1700,18,1564,18],[1700,22,1564,22],[1700,23,1564,23,"refresh"],[1700,30,1564,30],[1700,31,1564,31,"auth"],[1700,35,1564,35],[1700,37,1564,37],[1700,41,1564,41],[1700,42,1564,42,"refreshToken"],[1700,54,1564,54],[1700,55,1564,55],[1701,12,1565,12],[1701,19,1565,19],[1701,23,1565,23],[1701,24,1565,24,"accessToken"],[1701,35,1565,35],[1702,10,1566,8],[1703,10,1567,8],[1703,17,1567,15],[1703,21,1567,19],[1704,8,1568,4],[1704,9,1568,5],[1705,8,1568,5],[1705,17,1558,10,"getToken"],[1705,25,1558,18,"getToken"],[1705,26,1558,18,"_x32"],[1705,30,1558,18],[1706,10,1558,18],[1706,17,1558,18,"_getToken"],[1706,26,1558,18],[1706,27,1558,18,"apply"],[1706,32,1558,18],[1706,39,1558,18,"arguments"],[1706,48,1558,18],[1707,8,1558,18],[1708,8,1558,18],[1708,15,1558,10,"getToken"],[1708,23,1558,18],[1709,6,1558,18],[1710,4,1558,18],[1711,6,1558,18,"key"],[1711,9,1558,18],[1712,6,1558,18,"value"],[1712,11,1558,18],[1712,13,1569,4],[1712,22,1569,4,"clearRefreshToken"],[1712,39,1569,21,"clearRefreshToken"],[1712,40,1569,21],[1712,42,1569,24],[1713,8,1570,8],[1713,12,1570,12],[1713,13,1570,13,"refreshToken"],[1713,25,1570,25],[1713,28,1570,28],[1713,32,1570,32],[1714,6,1571,4],[1715,4,1571,5],[1716,6,1571,5,"key"],[1716,9,1571,5],[1717,6,1571,5,"value"],[1717,11,1571,5],[1718,8,1571,5],[1718,12,1571,5,"_refresh"],[1718,20,1571,5],[1718,23,1571,5,"_asyncToGenerator"],[1718,40,1571,5],[1718,41,1572,4],[1718,52,1572,18,"auth"],[1718,56,1572,22],[1718,58,1572,24,"oldToken"],[1718,66,1572,32],[1718,68,1572,34],[1719,10,1573,8],[1719,14,1573,8,"_yield$requestStsToke"],[1719,35,1573,8],[1719,44,1573,63,"requestStsToken"],[1719,59,1573,78],[1719,60,1573,79,"auth"],[1719,64,1573,83],[1719,66,1573,85,"oldToken"],[1719,74,1573,93],[1719,75,1573,94],[1720,12,1573,16,"accessToken"],[1720,23,1573,27],[1720,26,1573,27,"_yield$requestStsToke"],[1720,47,1573,27],[1720,48,1573,16,"accessToken"],[1720,59,1573,27],[1721,12,1573,29,"refreshToken"],[1721,24,1573,41],[1721,27,1573,41,"_yield$requestStsToke"],[1721,48,1573,41],[1721,49,1573,29,"refreshToken"],[1721,61,1573,41],[1722,12,1573,43,"expiresIn"],[1722,21,1573,52],[1722,24,1573,52,"_yield$requestStsToke"],[1722,45,1573,52],[1722,46,1573,43,"expiresIn"],[1722,55,1573,52],[1723,10,1574,8],[1723,14,1574,12],[1723,15,1574,13,"updateTokensAndExpiration"],[1723,40,1574,38],[1723,41,1574,39,"accessToken"],[1723,52,1574,50],[1723,54,1574,52,"refreshToken"],[1723,66,1574,64],[1723,68,1574,66,"Number"],[1723,74,1574,72],[1723,75,1574,73,"expiresIn"],[1723,84,1574,82],[1723,85,1574,83],[1723,86,1574,84],[1724,8,1575,4],[1724,9,1575,5],[1725,8,1575,5],[1725,17,1572,10,"refresh"],[1725,24,1572,17,"refresh"],[1725,25,1572,17,"_x33"],[1725,29,1572,17],[1725,31,1572,17,"_x34"],[1725,35,1572,17],[1726,10,1572,17],[1726,17,1572,17,"_refresh"],[1726,25,1572,17],[1726,26,1572,17,"apply"],[1726,31,1572,17],[1726,38,1572,17,"arguments"],[1726,47,1572,17],[1727,8,1572,17],[1728,8,1572,17],[1728,15,1572,10,"refresh"],[1728,22,1572,17],[1729,6,1572,17],[1730,4,1572,17],[1731,6,1572,17,"key"],[1731,9,1572,17],[1732,6,1572,17,"value"],[1732,11,1572,17],[1732,13,1576,4],[1732,22,1576,4,"updateTokensAndExpiration"],[1732,47,1576,29,"updateTokensAndExpiration"],[1732,48,1576,30,"accessToken"],[1732,59,1576,41],[1732,61,1576,43,"refreshToken"],[1732,73,1576,55],[1732,75,1576,57,"expiresInSec"],[1732,87,1576,69],[1732,89,1576,71],[1733,8,1577,8],[1733,12,1577,12],[1733,13,1577,13,"refreshToken"],[1733,25,1577,25],[1733,28,1577,28,"refreshToken"],[1733,40,1577,40],[1733,44,1577,44],[1733,48,1577,48],[1734,8,1578,8],[1734,12,1578,12],[1734,13,1578,13,"accessToken"],[1734,24,1578,24],[1734,27,1578,27,"accessToken"],[1734,38,1578,38],[1734,42,1578,42],[1734,46,1578,46],[1735,8,1579,8],[1735,12,1579,12],[1735,13,1579,13,"expirationTime"],[1735,27,1579,27],[1735,30,1579,30,"Date"],[1735,34,1579,34],[1735,35,1579,35,"now"],[1735,38,1579,38],[1735,39,1579,39],[1735,40,1579,40],[1735,43,1579,43,"expiresInSec"],[1735,55,1579,55],[1735,58,1579,58],[1735,62,1579,62],[1736,6,1580,4],[1737,4,1580,5],[1738,6,1580,5,"key"],[1738,9,1580,5],[1739,6,1580,5,"value"],[1739,11,1580,5],[1739,13,1604,4],[1739,22,1604,4,"toJSON"],[1739,28,1604,10,"toJSON"],[1739,29,1604,10],[1739,31,1604,13],[1740,8,1605,8],[1740,15,1605,15],[1741,10,1606,12,"refreshToken"],[1741,22,1606,24],[1741,24,1606,26],[1741,28,1606,30],[1741,29,1606,31,"refreshToken"],[1741,41,1606,43],[1742,10,1607,12,"accessToken"],[1742,21,1607,23],[1742,23,1607,25],[1742,27,1607,29],[1742,28,1607,30,"accessToken"],[1742,39,1607,41],[1743,10,1608,12,"expirationTime"],[1743,24,1608,26],[1743,26,1608,28],[1743,30,1608,32],[1743,31,1608,33,"expirationTime"],[1744,8,1609,8],[1744,9,1609,9],[1745,6,1610,4],[1746,4,1610,5],[1747,6,1610,5,"key"],[1747,9,1610,5],[1748,6,1610,5,"value"],[1748,11,1610,5],[1748,13,1611,4],[1748,22,1611,4,"_assign"],[1748,29,1611,11,"_assign"],[1748,30,1611,12,"stsTokenManager"],[1748,45,1611,27],[1748,47,1611,29],[1749,8,1612,8],[1749,12,1612,12],[1749,13,1612,13,"accessToken"],[1749,24,1612,24],[1749,27,1612,27,"stsTokenManager"],[1749,42,1612,42],[1749,43,1612,43,"accessToken"],[1749,54,1612,54],[1750,8,1613,8],[1750,12,1613,12],[1750,13,1613,13,"refreshToken"],[1750,25,1613,25],[1750,28,1613,28,"stsTokenManager"],[1750,43,1613,43],[1750,44,1613,44,"refreshToken"],[1750,56,1613,56],[1751,8,1614,8],[1751,12,1614,12],[1751,13,1614,13,"expirationTime"],[1751,27,1614,27],[1751,30,1614,30,"stsTokenManager"],[1751,45,1614,45],[1751,46,1614,46,"expirationTime"],[1751,60,1614,60],[1752,6,1615,4],[1753,4,1615,5],[1754,6,1615,5,"key"],[1754,9,1615,5],[1755,6,1615,5,"value"],[1755,11,1615,5],[1755,13,1616,4],[1755,22,1616,4,"_clone"],[1755,28,1616,10,"_clone"],[1755,29,1616,10],[1755,31,1616,13],[1756,8,1617,8],[1756,15,1617,15,"Object"],[1756,21,1617,21],[1756,22,1617,22,"assign"],[1756,28,1617,28],[1756,29,1617,29],[1756,33,1617,33,"StsTokenManager"],[1756,48,1617,48],[1756,49,1617,49],[1756,50,1617,50],[1756,52,1617,52],[1756,56,1617,56],[1756,57,1617,57,"toJSON"],[1756,63,1617,63],[1756,64,1617,64],[1756,65,1617,65],[1756,66,1617,66],[1757,6,1618,4],[1758,4,1618,5],[1759,6,1618,5,"key"],[1759,9,1618,5],[1760,6,1618,5,"value"],[1760,11,1618,5],[1760,13,1619,4],[1760,22,1619,4,"_performRefresh"],[1760,37,1619,19,"_performRefresh"],[1760,38,1619,19],[1760,40,1619,22],[1761,8,1620,8],[1761,15,1620,15,"debugFail"],[1761,24,1620,24],[1761,25,1620,25],[1761,42,1620,42],[1761,43,1620,43],[1762,6,1621,4],[1763,4,1621,5],[1764,6,1621,5,"key"],[1764,9,1621,5],[1765,6,1621,5,"value"],[1765,11,1621,5],[1765,13,1581,4],[1765,22,1581,11,"fromJSON"],[1765,30,1581,19,"fromJSON"],[1765,31,1581,20,"appName"],[1765,38,1581,27],[1765,40,1581,29,"object"],[1765,46,1581,35],[1765,48,1581,37],[1766,8,1582,8],[1766,12,1582,16,"refreshToken"],[1766,24,1582,28],[1766,27,1582,62,"object"],[1766,33,1582,68],[1766,34,1582,16,"refreshToken"],[1766,46,1582,28],[1767,10,1582,30,"accessToken"],[1767,21,1582,41],[1767,24,1582,62,"object"],[1767,30,1582,68],[1767,31,1582,30,"accessToken"],[1767,42,1582,41],[1768,10,1582,43,"expirationTime"],[1768,24,1582,57],[1768,27,1582,62,"object"],[1768,33,1582,68],[1768,34,1582,43,"expirationTime"],[1768,48,1582,57],[1769,8,1583,8],[1769,12,1583,14,"manager"],[1769,19,1583,21],[1769,22,1583,24],[1769,26,1583,28,"StsTokenManager"],[1769,41,1583,43],[1769,42,1583,44],[1769,43,1583,45],[1770,8,1584,8],[1770,12,1584,12,"refreshToken"],[1770,24,1584,24],[1770,26,1584,26],[1771,10,1585,12,"_assert"],[1771,17,1585,19],[1771,18,1585,20],[1771,25,1585,27,"refreshToken"],[1771,37,1585,39],[1771,42,1585,44],[1771,50,1585,52],[1771,52,1585,54],[1771,68,1585,70],[1771,69,1585,71],[1771,105,1585,107],[1772,12,1586,16,"appName"],[1773,10,1587,12],[1773,11,1587,13],[1773,12,1587,14],[1774,10,1588,12,"manager"],[1774,17,1588,19],[1774,18,1588,20,"refreshToken"],[1774,30,1588,32],[1774,33,1588,35,"refreshToken"],[1774,45,1588,47],[1775,8,1589,8],[1776,8,1590,8],[1776,12,1590,12,"accessToken"],[1776,23,1590,23],[1776,25,1590,25],[1777,10,1591,12,"_assert"],[1777,17,1591,19],[1777,18,1591,20],[1777,25,1591,27,"accessToken"],[1777,36,1591,38],[1777,41,1591,43],[1777,49,1591,51],[1777,51,1591,53],[1777,67,1591,69],[1777,68,1591,70],[1777,104,1591,106],[1778,12,1592,16,"appName"],[1779,10,1593,12],[1779,11,1593,13],[1779,12,1593,14],[1780,10,1594,12,"manager"],[1780,17,1594,19],[1780,18,1594,20,"accessToken"],[1780,29,1594,31],[1780,32,1594,34,"accessToken"],[1780,43,1594,45],[1781,8,1595,8],[1782,8,1596,8],[1782,12,1596,12,"expirationTime"],[1782,26,1596,26],[1782,28,1596,28],[1783,10,1597,12,"_assert"],[1783,17,1597,19],[1783,18,1597,20],[1783,25,1597,27,"expirationTime"],[1783,39,1597,41],[1783,44,1597,46],[1783,52,1597,54],[1783,54,1597,56],[1783,70,1597,72],[1783,71,1597,73],[1783,107,1597,109],[1784,12,1598,16,"appName"],[1785,10,1599,12],[1785,11,1599,13],[1785,12,1599,14],[1786,10,1600,12,"manager"],[1786,17,1600,19],[1786,18,1600,20,"expirationTime"],[1786,32,1600,34],[1786,35,1600,37,"expirationTime"],[1786,49,1600,51],[1787,8,1601,8],[1788,8,1602,8],[1788,15,1602,15,"manager"],[1788,22,1602,22],[1789,6,1603,4],[1790,4,1603,5],[1791,2,1603,5],[1792,2,1624,0],[1793,0,1625,0],[1794,0,1626,0],[1795,0,1627,0],[1796,0,1628,0],[1797,0,1629,0],[1798,0,1630,0],[1799,0,1631,0],[1800,0,1632,0],[1801,0,1633,0],[1802,0,1634,0],[1803,0,1635,0],[1804,0,1636,0],[1805,0,1637,0],[1806,0,1638,0],[1807,0,1639,0],[1808,2,1640,0],[1808,11,1640,9,"assertStringOrUndefined"],[1808,34,1640,32,"assertStringOrUndefined"],[1808,35,1640,33,"assertion"],[1808,44,1640,42],[1808,46,1640,44,"appName"],[1808,53,1640,51],[1808,55,1640,53],[1809,4,1641,4,"_assert"],[1809,11,1641,11],[1809,12,1641,12],[1809,19,1641,19,"assertion"],[1809,28,1641,28],[1809,33,1641,33],[1809,41,1641,41],[1809,45,1641,45],[1809,52,1641,52,"assertion"],[1809,61,1641,61],[1809,66,1641,66],[1809,77,1641,77],[1809,79,1641,79],[1809,95,1641,95],[1809,96,1641,96],[1809,132,1641,132],[1810,6,1641,134,"appName"],[1811,4,1641,142],[1811,5,1641,143],[1811,6,1641,144],[1812,2,1642,0],[1813,2,1642,1],[1813,6,1643,6,"UserImpl"],[1813,14,1643,14],[1814,4,1644,4],[1814,13,1644,4,"UserImpl"],[1814,22,1644,4,"_ref4"],[1814,27,1644,4],[1814,29,1644,56],[1815,6,1644,56],[1815,10,1644,18,"uid"],[1815,13,1644,21],[1815,16,1644,21,"_ref4"],[1815,21,1644,21],[1815,22,1644,18,"uid"],[1815,25,1644,21],[1816,8,1644,23,"auth"],[1816,12,1644,27],[1816,15,1644,27,"_ref4"],[1816,20,1644,27],[1816,21,1644,23,"auth"],[1816,25,1644,27],[1817,8,1644,29,"stsTokenManager"],[1817,23,1644,44],[1817,26,1644,44,"_ref4"],[1817,31,1644,44],[1817,32,1644,29,"stsTokenManager"],[1817,47,1644,44],[1818,8,1644,49,"opt"],[1818,11,1644,52],[1818,14,1644,52,"_objectWithoutProperties"],[1818,38,1644,52],[1818,39,1644,52,"_ref4"],[1818,44,1644,52],[1818,46,1644,52,"_excluded2"],[1818,56,1644,52],[1819,6,1644,52,"_classCallCheck"],[1819,21,1644,52],[1819,28,1644,52,"UserImpl"],[1819,36,1644,52],[1820,6,1645,8],[1821,6,1646,8],[1821,10,1646,12],[1821,11,1646,13,"providerId"],[1821,21,1646,23],[1821,24,1646,26],[1821,34,1646,36],[1821,35,1646,37],[1822,6,1647,8],[1822,10,1647,12],[1822,11,1647,13,"proactiveRefresh"],[1822,27,1647,29],[1822,30,1647,32],[1822,34,1647,36,"ProactiveRefresh"],[1822,50,1647,52],[1822,51,1647,53],[1822,55,1647,57],[1822,56,1647,58],[1823,6,1648,8],[1823,10,1648,12],[1823,11,1648,13,"reloadUserInfo"],[1823,25,1648,27],[1823,28,1648,30],[1823,32,1648,34],[1824,6,1649,8],[1824,10,1649,12],[1824,11,1649,13,"reloadListener"],[1824,25,1649,27],[1824,28,1649,30],[1824,32,1649,34],[1825,6,1650,8],[1825,10,1650,12],[1825,11,1650,13,"uid"],[1825,14,1650,16],[1825,17,1650,19,"uid"],[1825,20,1650,22],[1826,6,1651,8],[1826,10,1651,12],[1826,11,1651,13,"auth"],[1826,15,1651,17],[1826,18,1651,20,"auth"],[1826,22,1651,24],[1827,6,1652,8],[1827,10,1652,12],[1827,11,1652,13,"stsTokenManager"],[1827,26,1652,28],[1827,29,1652,31,"stsTokenManager"],[1827,44,1652,46],[1828,6,1653,8],[1828,10,1653,12],[1828,11,1653,13,"accessToken"],[1828,22,1653,24],[1828,25,1653,27,"stsTokenManager"],[1828,40,1653,42],[1828,41,1653,43,"accessToken"],[1828,52,1653,54],[1829,6,1654,8],[1829,10,1654,12],[1829,11,1654,13,"displayName"],[1829,22,1654,24],[1829,25,1654,27,"opt"],[1829,28,1654,30],[1829,29,1654,31,"displayName"],[1829,40,1654,42],[1829,44,1654,46],[1829,48,1654,50],[1830,6,1655,8],[1830,10,1655,12],[1830,11,1655,13,"email"],[1830,16,1655,18],[1830,19,1655,21,"opt"],[1830,22,1655,24],[1830,23,1655,25,"email"],[1830,28,1655,30],[1830,32,1655,34],[1830,36,1655,38],[1831,6,1656,8],[1831,10,1656,12],[1831,11,1656,13,"emailVerified"],[1831,24,1656,26],[1831,27,1656,29,"opt"],[1831,30,1656,32],[1831,31,1656,33,"emailVerified"],[1831,44,1656,46],[1831,48,1656,50],[1831,53,1656,55],[1832,6,1657,8],[1832,10,1657,12],[1832,11,1657,13,"phoneNumber"],[1832,22,1657,24],[1832,25,1657,27,"opt"],[1832,28,1657,30],[1832,29,1657,31,"phoneNumber"],[1832,40,1657,42],[1832,44,1657,46],[1832,48,1657,50],[1833,6,1658,8],[1833,10,1658,12],[1833,11,1658,13,"photoURL"],[1833,19,1658,21],[1833,22,1658,24,"opt"],[1833,25,1658,27],[1833,26,1658,28,"photoURL"],[1833,34,1658,36],[1833,38,1658,40],[1833,42,1658,44],[1834,6,1659,8],[1834,10,1659,12],[1834,11,1659,13,"isAnonymous"],[1834,22,1659,24],[1834,25,1659,27,"opt"],[1834,28,1659,30],[1834,29,1659,31,"isAnonymous"],[1834,40,1659,42],[1834,44,1659,46],[1834,49,1659,51],[1835,6,1660,8],[1835,10,1660,12],[1835,11,1660,13,"tenantId"],[1835,19,1660,21],[1835,22,1660,24,"opt"],[1835,25,1660,27],[1835,26,1660,28,"tenantId"],[1835,34,1660,36],[1835,38,1660,40],[1835,42,1660,44],[1836,6,1661,8],[1836,10,1661,12],[1836,11,1661,13,"providerData"],[1836,23,1661,25],[1836,26,1661,28,"opt"],[1836,29,1661,31],[1836,30,1661,32,"providerData"],[1836,42,1661,44],[1836,45,1661,47],[1836,46,1661,48],[1836,49,1661,51,"opt"],[1836,52,1661,54],[1836,53,1661,55,"providerData"],[1836,65,1661,67],[1836,66,1661,68],[1836,69,1661,71],[1836,71,1661,73],[1837,6,1662,8],[1837,10,1662,12],[1837,11,1662,13,"metadata"],[1837,19,1662,21],[1837,22,1662,24],[1837,26,1662,28,"UserMetadata"],[1837,38,1662,40],[1837,39,1662,41,"opt"],[1837,42,1662,44],[1837,43,1662,45,"createdAt"],[1837,52,1662,54],[1837,56,1662,58,"undefined"],[1837,65,1662,67],[1837,67,1662,69,"opt"],[1837,70,1662,72],[1837,71,1662,73,"lastLoginAt"],[1837,82,1662,84],[1837,86,1662,88,"undefined"],[1837,95,1662,97],[1837,96,1662,98],[1838,4,1663,4],[1839,4,1663,5],[1839,11,1663,5,"_createClass"],[1839,23,1663,5],[1839,24,1663,5,"UserImpl"],[1839,32,1663,5],[1840,6,1663,5,"key"],[1840,9,1663,5],[1841,6,1663,5,"value"],[1841,11,1663,5],[1842,8,1663,5],[1842,12,1663,5,"_getIdToken"],[1842,23,1663,5],[1842,26,1663,5,"_asyncToGenerator"],[1842,43,1663,5],[1842,44,1664,4],[1842,55,1664,21,"forceRefresh"],[1842,67,1664,33],[1842,69,1664,35],[1843,10,1665,8],[1843,14,1665,14,"accessToken"],[1843,25,1665,25],[1843,34,1665,34,"_logoutIfInvalidated"],[1843,54,1665,54],[1843,55,1665,55],[1843,59,1665,59],[1843,61,1665,61],[1843,65,1665,65],[1843,66,1665,66,"stsTokenManager"],[1843,81,1665,81],[1843,82,1665,82,"getToken"],[1843,90,1665,90],[1843,91,1665,91],[1843,95,1665,95],[1843,96,1665,96,"auth"],[1843,100,1665,100],[1843,102,1665,102,"forceRefresh"],[1843,114,1665,114],[1843,115,1665,115],[1843,116,1665,116],[1844,10,1666,8,"_assert"],[1844,17,1666,15],[1844,18,1666,16,"accessToken"],[1844,29,1666,27],[1844,31,1666,29],[1844,35,1666,33],[1844,36,1666,34,"auth"],[1844,40,1666,38],[1844,42,1666,40],[1844,58,1666,56],[1844,59,1666,57],[1844,93,1666,91],[1844,94,1666,92],[1845,10,1667,8],[1845,14,1667,12],[1845,18,1667,16],[1845,19,1667,17,"accessToken"],[1845,30,1667,28],[1845,35,1667,33,"accessToken"],[1845,46,1667,44],[1845,48,1667,46],[1846,12,1668,12],[1846,16,1668,16],[1846,17,1668,17,"accessToken"],[1846,28,1668,28],[1846,31,1668,31,"accessToken"],[1846,42,1668,42],[1847,12,1669,12],[1847,18,1669,18],[1847,22,1669,22],[1847,23,1669,23,"auth"],[1847,27,1669,27],[1847,28,1669,28,"_persistUserIfCurrent"],[1847,49,1669,49],[1847,50,1669,50],[1847,54,1669,54],[1847,55,1669,55],[1848,12,1670,12],[1848,16,1670,16],[1848,17,1670,17,"auth"],[1848,21,1670,21],[1848,22,1670,22,"_notifyListenersIfCurrent"],[1848,47,1670,47],[1848,48,1670,48],[1848,52,1670,52],[1848,53,1670,53],[1849,10,1671,8],[1850,10,1672,8],[1850,17,1672,15,"accessToken"],[1850,28,1672,26],[1851,8,1673,4],[1851,9,1673,5],[1852,8,1673,5],[1852,17,1664,10,"getIdToken"],[1852,27,1664,20,"getIdToken"],[1852,28,1664,20,"_x35"],[1852,32,1664,20],[1853,10,1664,20],[1853,17,1664,20,"_getIdToken"],[1853,28,1664,20],[1853,29,1664,20,"apply"],[1853,34,1664,20],[1853,41,1664,20,"arguments"],[1853,50,1664,20],[1854,8,1664,20],[1855,8,1664,20],[1855,15,1664,10,"getIdToken"],[1855,25,1664,20],[1856,6,1664,20],[1857,4,1664,20],[1858,6,1664,20,"key"],[1858,9,1664,20],[1859,6,1664,20,"value"],[1859,11,1664,20],[1859,13,1674,4],[1859,22,1674,4,"getIdTokenResult"],[1859,38,1674,20,"getIdTokenResult"],[1859,39,1674,21,"forceRefresh"],[1859,51,1674,33],[1859,53,1674,35],[1860,8,1675,8],[1860,15,1675,15,"getIdTokenResult"],[1860,33,1675,31],[1860,34,1675,32],[1860,38,1675,36],[1860,40,1675,38,"forceRefresh"],[1860,52,1675,50],[1860,53,1675,51],[1861,6,1676,4],[1862,4,1676,5],[1863,6,1676,5,"key"],[1863,9,1676,5],[1864,6,1676,5,"value"],[1864,11,1676,5],[1864,13,1677,4],[1864,22,1677,4,"reload"],[1864,28,1677,10,"reload"],[1864,29,1677,10],[1864,31,1677,13],[1865,8,1678,8],[1865,15,1678,15,"reload"],[1865,23,1678,21],[1865,24,1678,22],[1865,28,1678,26],[1865,29,1678,27],[1866,6,1679,4],[1867,4,1679,5],[1868,6,1679,5,"key"],[1868,9,1679,5],[1869,6,1679,5,"value"],[1869,11,1679,5],[1869,13,1680,4],[1869,22,1680,4,"_assign"],[1869,29,1680,11,"_assign"],[1869,30,1680,12,"user"],[1869,34,1680,16],[1869,36,1680,18],[1870,8,1681,8],[1870,12,1681,12],[1870,16,1681,16],[1870,21,1681,21,"user"],[1870,25,1681,25],[1870,27,1681,27],[1871,10,1682,12],[1872,8,1683,8],[1873,8,1684,8,"_assert"],[1873,15,1684,15],[1873,16,1684,16],[1873,20,1684,20],[1873,21,1684,21,"uid"],[1873,24,1684,24],[1873,29,1684,29,"user"],[1873,33,1684,33],[1873,34,1684,34,"uid"],[1873,37,1684,37],[1873,39,1684,39],[1873,43,1684,43],[1873,44,1684,44,"auth"],[1873,48,1684,48],[1873,50,1684,50],[1873,66,1684,66],[1873,67,1684,67],[1873,101,1684,101],[1873,102,1684,102],[1874,8,1685,8],[1874,12,1685,12],[1874,13,1685,13,"displayName"],[1874,24,1685,24],[1874,27,1685,27,"user"],[1874,31,1685,31],[1874,32,1685,32,"displayName"],[1874,43,1685,43],[1875,8,1686,8],[1875,12,1686,12],[1875,13,1686,13,"photoURL"],[1875,21,1686,21],[1875,24,1686,24,"user"],[1875,28,1686,28],[1875,29,1686,29,"photoURL"],[1875,37,1686,37],[1876,8,1687,8],[1876,12,1687,12],[1876,13,1687,13,"email"],[1876,18,1687,18],[1876,21,1687,21,"user"],[1876,25,1687,25],[1876,26,1687,26,"email"],[1876,31,1687,31],[1877,8,1688,8],[1877,12,1688,12],[1877,13,1688,13,"emailVerified"],[1877,26,1688,26],[1877,29,1688,29,"user"],[1877,33,1688,33],[1877,34,1688,34,"emailVerified"],[1877,47,1688,47],[1878,8,1689,8],[1878,12,1689,12],[1878,13,1689,13,"phoneNumber"],[1878,24,1689,24],[1878,27,1689,27,"user"],[1878,31,1689,31],[1878,32,1689,32,"phoneNumber"],[1878,43,1689,43],[1879,8,1690,8],[1879,12,1690,12],[1879,13,1690,13,"isAnonymous"],[1879,24,1690,24],[1879,27,1690,27,"user"],[1879,31,1690,31],[1879,32,1690,32,"isAnonymous"],[1879,43,1690,43],[1880,8,1691,8],[1880,12,1691,12],[1880,13,1691,13,"tenantId"],[1880,21,1691,21],[1880,24,1691,24,"user"],[1880,28,1691,28],[1880,29,1691,29,"tenantId"],[1880,37,1691,37],[1881,8,1692,8],[1881,12,1692,12],[1881,13,1692,13,"providerData"],[1881,25,1692,25],[1881,28,1692,28,"user"],[1881,32,1692,32],[1881,33,1692,33,"providerData"],[1881,45,1692,45],[1881,46,1692,46,"map"],[1881,49,1692,49],[1881,50,1692,50,"userInfo"],[1881,58,1692,58],[1881,63,1692,63],[1882,10,1692,65],[1882,13,1692,68,"userInfo"],[1883,8,1692,77],[1883,9,1692,78],[1883,10,1692,79],[1883,11,1692,80],[1884,8,1693,8],[1884,12,1693,12],[1884,13,1693,13,"metadata"],[1884,21,1693,21],[1884,22,1693,22,"_copy"],[1884,27,1693,27],[1884,28,1693,28,"user"],[1884,32,1693,32],[1884,33,1693,33,"metadata"],[1884,41,1693,41],[1884,42,1693,42],[1885,8,1694,8],[1885,12,1694,12],[1885,13,1694,13,"stsTokenManager"],[1885,28,1694,28],[1885,29,1694,29,"_assign"],[1885,36,1694,36],[1885,37,1694,37,"user"],[1885,41,1694,41],[1885,42,1694,42,"stsTokenManager"],[1885,57,1694,57],[1885,58,1694,58],[1886,6,1695,4],[1887,4,1695,5],[1888,6,1695,5,"key"],[1888,9,1695,5],[1889,6,1695,5,"value"],[1889,11,1695,5],[1889,13,1696,4],[1889,22,1696,4,"_clone"],[1889,28,1696,10,"_clone"],[1889,29,1696,11,"auth"],[1889,33,1696,15],[1889,35,1696,17],[1890,8,1697,8],[1890,12,1697,14,"newUser"],[1890,19,1697,21],[1890,22,1697,24],[1890,26,1697,28,"UserImpl"],[1890,34,1697,36],[1890,35,1697,37],[1891,10,1698,12],[1891,13,1698,15],[1891,17,1698,19],[1892,10,1699,12,"auth"],[1892,14,1699,16],[1893,10,1700,12,"stsTokenManager"],[1893,25,1700,27],[1893,27,1700,29],[1893,31,1700,33],[1893,32,1700,34,"stsTokenManager"],[1893,47,1700,49],[1893,48,1700,50,"_clone"],[1893,54,1700,56],[1893,55,1700,57],[1894,8,1701,8],[1894,9,1701,9],[1894,10,1701,10],[1895,8,1702,8,"newUser"],[1895,15,1702,15],[1895,16,1702,16,"metadata"],[1895,24,1702,24],[1895,25,1702,25,"_copy"],[1895,30,1702,30],[1895,31,1702,31],[1895,35,1702,35],[1895,36,1702,36,"metadata"],[1895,44,1702,44],[1895,45,1702,45],[1896,8,1703,8],[1896,15,1703,15,"newUser"],[1896,22,1703,22],[1897,6,1704,4],[1898,4,1704,5],[1899,6,1704,5,"key"],[1899,9,1704,5],[1900,6,1704,5,"value"],[1900,11,1704,5],[1900,13,1705,4],[1900,22,1705,4,"_onReload"],[1900,31,1705,13,"_onReload"],[1900,32,1705,14,"callback"],[1900,40,1705,22],[1900,42,1705,24],[1901,8,1706,8],[1902,8,1707,8,"_assert"],[1902,15,1707,15],[1902,16,1707,16],[1902,17,1707,17],[1902,21,1707,21],[1902,22,1707,22,"reloadListener"],[1902,36,1707,36],[1902,38,1707,38],[1902,42,1707,42],[1902,43,1707,43,"auth"],[1902,47,1707,47],[1902,49,1707,49],[1902,65,1707,65],[1902,66,1707,66],[1902,100,1707,100],[1902,101,1707,101],[1903,8,1708,8],[1903,12,1708,12],[1903,13,1708,13,"reloadListener"],[1903,27,1708,27],[1903,30,1708,30,"callback"],[1903,38,1708,38],[1904,8,1709,8],[1904,12,1709,12],[1904,16,1709,16],[1904,17,1709,17,"reloadUserInfo"],[1904,31,1709,31],[1904,33,1709,33],[1905,10,1710,12],[1905,14,1710,16],[1905,15,1710,17,"_notifyReloadListener"],[1905,36,1710,38],[1905,37,1710,39],[1905,41,1710,43],[1905,42,1710,44,"reloadUserInfo"],[1905,56,1710,58],[1905,57,1710,59],[1906,10,1711,12],[1906,14,1711,16],[1906,15,1711,17,"reloadUserInfo"],[1906,29,1711,31],[1906,32,1711,34],[1906,36,1711,38],[1907,8,1712,8],[1908,6,1713,4],[1909,4,1713,5],[1910,6,1713,5,"key"],[1910,9,1713,5],[1911,6,1713,5,"value"],[1911,11,1713,5],[1911,13,1714,4],[1911,22,1714,4,"_notifyReloadListener"],[1911,43,1714,25,"_notifyReloadListener"],[1911,44,1714,26,"userInfo"],[1911,52,1714,34],[1911,54,1714,36],[1912,8,1715,8],[1912,12,1715,12],[1912,16,1715,16],[1912,17,1715,17,"reloadListener"],[1912,31,1715,31],[1912,33,1715,33],[1913,10,1716,12],[1913,14,1716,16],[1913,15,1716,17,"reloadListener"],[1913,29,1716,31],[1913,30,1716,32,"userInfo"],[1913,38,1716,40],[1913,39,1716,41],[1914,8,1717,8],[1914,9,1717,9],[1914,15,1718,13],[1915,10,1719,12],[1916,10,1720,12],[1916,14,1720,16],[1916,15,1720,17,"reloadUserInfo"],[1916,29,1720,31],[1916,32,1720,34,"userInfo"],[1916,40,1720,42],[1917,8,1721,8],[1918,6,1722,4],[1919,4,1722,5],[1920,6,1722,5,"key"],[1920,9,1722,5],[1921,6,1722,5,"value"],[1921,11,1722,5],[1921,13,1723,4],[1921,22,1723,4,"_startProactiveRefresh"],[1921,44,1723,26,"_startProactiveRefresh"],[1921,45,1723,26],[1921,47,1723,29],[1922,8,1724,8],[1922,12,1724,12],[1922,13,1724,13,"proactiveRefresh"],[1922,29,1724,29],[1922,30,1724,30,"_start"],[1922,36,1724,36],[1922,37,1724,37],[1922,38,1724,38],[1923,6,1725,4],[1924,4,1725,5],[1925,6,1725,5,"key"],[1925,9,1725,5],[1926,6,1725,5,"value"],[1926,11,1725,5],[1926,13,1726,4],[1926,22,1726,4,"_stopProactiveRefresh"],[1926,43,1726,25,"_stopProactiveRefresh"],[1926,44,1726,25],[1926,46,1726,28],[1927,8,1727,8],[1927,12,1727,12],[1927,13,1727,13,"proactiveRefresh"],[1927,29,1727,29],[1927,30,1727,30,"_stop"],[1927,35,1727,35],[1927,36,1727,36],[1927,37,1727,37],[1928,6,1728,4],[1929,4,1728,5],[1930,6,1728,5,"key"],[1930,9,1728,5],[1931,6,1728,5,"value"],[1931,11,1728,5],[1932,8,1728,5],[1932,12,1728,5,"_updateTokensIfNecessary2"],[1932,37,1728,5],[1932,40,1728,5,"_asyncToGenerator"],[1932,57,1728,5],[1932,58,1729,4],[1932,69,1729,35,"response"],[1932,77,1729,43],[1932,79,1729,61],[1933,10,1729,61],[1933,14,1729,45,"reload"],[1933,20,1729,51],[1933,23,1729,51,"arguments"],[1933,32,1729,51],[1933,33,1729,51,"length"],[1933,39,1729,51],[1933,47,1729,51,"arguments"],[1933,56,1729,51],[1933,64,1729,51,"undefined"],[1933,73,1729,51],[1933,76,1729,51,"arguments"],[1933,85,1729,51],[1933,91,1729,54],[1933,96,1729,59],[1934,10,1730,8],[1934,14,1730,12,"tokensRefreshed"],[1934,29,1730,27],[1934,32,1730,30],[1934,37,1730,35],[1935,10,1731,8],[1935,14,1731,12,"response"],[1935,22,1731,20],[1935,23,1731,21,"idToken"],[1935,30,1731,28],[1935,34,1732,12,"response"],[1935,42,1732,20],[1935,43,1732,21,"idToken"],[1935,50,1732,28],[1935,55,1732,33],[1935,59,1732,37],[1935,60,1732,38,"stsTokenManager"],[1935,75,1732,53],[1935,76,1732,54,"accessToken"],[1935,87,1732,65],[1935,89,1732,67],[1936,12,1733,12],[1936,16,1733,16],[1936,17,1733,17,"stsTokenManager"],[1936,32,1733,32],[1936,33,1733,33,"updateFromServerResponse"],[1936,57,1733,57],[1936,58,1733,58,"response"],[1936,66,1733,66],[1936,67,1733,67],[1937,12,1734,12,"tokensRefreshed"],[1937,27,1734,27],[1937,30,1734,30],[1937,34,1734,34],[1938,10,1735,8],[1939,10,1736,8],[1939,14,1736,12,"reload"],[1939,20,1736,18],[1939,22,1736,20],[1940,12,1737,12],[1940,18,1737,18,"_reloadWithoutSaving"],[1940,38,1737,38],[1940,39,1737,39],[1940,43,1737,43],[1940,44,1737,44],[1941,10,1738,8],[1942,10,1739,8],[1942,16,1739,14],[1942,20,1739,18],[1942,21,1739,19,"auth"],[1942,25,1739,23],[1942,26,1739,24,"_persistUserIfCurrent"],[1942,47,1739,45],[1942,48,1739,46],[1942,52,1739,50],[1942,53,1739,51],[1943,10,1740,8],[1943,14,1740,12,"tokensRefreshed"],[1943,29,1740,27],[1943,31,1740,29],[1944,12,1741,12],[1944,16,1741,16],[1944,17,1741,17,"auth"],[1944,21,1741,21],[1944,22,1741,22,"_notifyListenersIfCurrent"],[1944,47,1741,47],[1944,48,1741,48],[1944,52,1741,52],[1944,53,1741,53],[1945,10,1742,8],[1946,8,1743,4],[1946,9,1743,5],[1947,8,1743,5],[1947,17,1729,10,"_updateTokensIfNecessary"],[1947,41,1729,34,"_updateTokensIfNecessary"],[1947,42,1729,34,"_x36"],[1947,46,1729,34],[1948,10,1729,34],[1948,17,1729,34,"_updateTokensIfNecessary2"],[1948,42,1729,34],[1948,43,1729,34,"apply"],[1948,48,1729,34],[1948,55,1729,34,"arguments"],[1948,64,1729,34],[1949,8,1729,34],[1950,8,1729,34],[1950,15,1729,10,"_updateTokensIfNecessary"],[1950,39,1729,34],[1951,6,1729,34],[1952,4,1729,34],[1953,6,1729,34,"key"],[1953,9,1729,34],[1954,6,1729,34,"value"],[1954,11,1729,34],[1955,8,1729,34],[1955,12,1729,34,"_delete2"],[1955,20,1729,34],[1955,23,1729,34,"_asyncToGenerator"],[1955,40,1729,34],[1955,41,1744,4],[1955,54,1744,19],[1956,10,1745,8],[1956,14,1745,12,"app"],[1956,17,1745,15],[1956,18,1745,16,"_isFirebaseServerApp"],[1956,38,1745,36],[1956,39,1745,37],[1956,43,1745,41],[1956,44,1745,42,"auth"],[1956,48,1745,46],[1956,49,1745,47,"app"],[1956,52,1745,50],[1956,53,1745,51],[1956,55,1745,53],[1957,12,1746,12],[1957,19,1746,19,"Promise"],[1957,26,1746,26],[1957,27,1746,27,"reject"],[1957,33,1746,33],[1957,34,1746,34,"_serverAppCurrentUserOperationNotSupportedError"],[1957,81,1746,81],[1957,82,1746,82],[1957,86,1746,86],[1957,87,1746,87,"auth"],[1957,91,1746,91],[1957,92,1746,92],[1957,93,1746,93],[1958,10,1747,8],[1959,10,1748,8],[1959,14,1748,14,"idToken"],[1959,21,1748,21],[1959,30,1748,30],[1959,34,1748,34],[1959,35,1748,35,"getIdToken"],[1959,45,1748,45],[1959,46,1748,46],[1959,47,1748,47],[1960,10,1749,8],[1960,16,1749,14,"_logoutIfInvalidated"],[1960,36,1749,34],[1960,37,1749,35],[1960,41,1749,39],[1960,43,1749,41,"deleteAccount"],[1960,56,1749,54],[1960,57,1749,55],[1960,61,1749,59],[1960,62,1749,60,"auth"],[1960,66,1749,64],[1960,68,1749,66],[1961,12,1749,68,"idToken"],[1962,10,1749,76],[1962,11,1749,77],[1962,12,1749,78],[1962,13,1749,79],[1963,10,1750,8],[1963,14,1750,12],[1963,15,1750,13,"stsTokenManager"],[1963,30,1750,28],[1963,31,1750,29,"clearRefreshToken"],[1963,48,1750,46],[1963,49,1750,47],[1963,50,1750,48],[1964,10,1751,8],[1965,10,1752,8],[1966,10,1753,8],[1966,17,1753,15],[1966,21,1753,19],[1966,22,1753,20,"auth"],[1966,26,1753,24],[1966,27,1753,25,"signOut"],[1966,34,1753,32],[1966,35,1753,33],[1966,36,1753,34],[1967,8,1754,4],[1967,9,1754,5],[1968,8,1754,5],[1968,17,1744,10,"delete"],[1968,24,1744,16,"delete"],[1968,25,1744,16],[1969,10,1744,16],[1969,17,1744,16,"_delete2"],[1969,25,1744,16],[1969,26,1744,16,"apply"],[1969,31,1744,16],[1969,38,1744,16,"arguments"],[1969,47,1744,16],[1970,8,1744,16],[1971,8,1744,16],[1971,15,1744,10,"delete"],[1971,22,1744,16],[1972,6,1744,16],[1973,4,1744,16],[1974,6,1744,16,"key"],[1974,9,1744,16],[1975,6,1744,16,"value"],[1975,11,1744,16],[1975,13,1755,4],[1975,22,1755,4,"toJSON"],[1975,28,1755,10,"toJSON"],[1975,29,1755,10],[1975,31,1755,13],[1976,8,1756,8],[1976,15,1756,15],[1977,10,1757,12,"uid"],[1977,13,1757,15],[1977,15,1757,17],[1977,19,1757,21],[1977,20,1757,22,"uid"],[1977,23,1757,25],[1978,10,1758,12,"email"],[1978,15,1758,17],[1978,17,1758,19],[1978,21,1758,23],[1978,22,1758,24,"email"],[1978,27,1758,29],[1978,31,1758,33,"undefined"],[1978,40,1758,42],[1979,10,1759,12,"emailVerified"],[1979,23,1759,25],[1979,25,1759,27],[1979,29,1759,31],[1979,30,1759,32,"emailVerified"],[1979,43,1759,45],[1980,10,1760,12,"displayName"],[1980,21,1760,23],[1980,23,1760,25],[1980,27,1760,29],[1980,28,1760,30,"displayName"],[1980,39,1760,41],[1980,43,1760,45,"undefined"],[1980,52,1760,54],[1981,10,1761,12,"isAnonymous"],[1981,21,1761,23],[1981,23,1761,25],[1981,27,1761,29],[1981,28,1761,30,"isAnonymous"],[1981,39,1761,41],[1982,10,1762,12,"photoURL"],[1982,18,1762,20],[1982,20,1762,22],[1982,24,1762,26],[1982,25,1762,27,"photoURL"],[1982,33,1762,35],[1982,37,1762,39,"undefined"],[1982,46,1762,48],[1983,10,1763,12,"phoneNumber"],[1983,21,1763,23],[1983,23,1763,25],[1983,27,1763,29],[1983,28,1763,30,"phoneNumber"],[1983,39,1763,41],[1983,43,1763,45,"undefined"],[1983,52,1763,54],[1984,10,1764,12,"tenantId"],[1984,18,1764,20],[1984,20,1764,22],[1984,24,1764,26],[1984,25,1764,27,"tenantId"],[1984,33,1764,35],[1984,37,1764,39,"undefined"],[1984,46,1764,48],[1985,10,1765,12,"providerData"],[1985,22,1765,24],[1985,24,1765,26],[1985,28,1765,30],[1985,29,1765,31,"providerData"],[1985,41,1765,43],[1985,42,1765,44,"map"],[1985,45,1765,47],[1985,46,1765,48,"userInfo"],[1985,54,1765,56],[1985,59,1765,61],[1986,12,1765,63],[1986,15,1765,66,"userInfo"],[1987,10,1765,75],[1987,11,1765,76],[1987,12,1765,77],[1987,13,1765,78],[1988,10,1766,12,"stsTokenManager"],[1988,25,1766,27],[1988,27,1766,29],[1988,31,1766,33],[1988,32,1766,34,"stsTokenManager"],[1988,47,1766,49],[1988,48,1766,50,"toJSON"],[1988,54,1766,56],[1988,55,1766,57],[1988,56,1766,58],[1989,10,1767,12],[1990,10,1768,12],[1991,10,1769,12,"_redirectEventId"],[1991,26,1769,28],[1991,28,1769,30],[1991,32,1769,34],[1991,33,1769,35,"_redirectEventId"],[1991,49,1769,51],[1992,10,1770,12],[1992,13,1770,15],[1992,17,1770,19],[1992,18,1770,20,"metadata"],[1992,26,1770,28],[1992,27,1770,29,"toJSON"],[1992,33,1770,35],[1992,34,1770,36],[1992,35,1770,37],[1993,10,1771,12],[1994,10,1772,12,"apiKey"],[1994,16,1772,18],[1994,18,1772,20],[1994,22,1772,24],[1994,23,1772,25,"auth"],[1994,27,1772,29],[1994,28,1772,30,"config"],[1994,34,1772,36],[1994,35,1772,37,"apiKey"],[1994,41,1772,43],[1995,10,1773,12,"appName"],[1995,17,1773,19],[1995,19,1773,21],[1995,23,1773,25],[1995,24,1773,26,"auth"],[1995,28,1773,30],[1995,29,1773,31,"name"],[1996,10,1774,12],[1997,10,1775,12],[1998,8,1776,8],[1998,9,1776,9],[1999,6,1777,4],[2000,4,1777,5],[2001,6,1777,5,"key"],[2001,9,1777,5],[2002,6,1777,5,"get"],[2002,9,1777,5],[2002,11,1778,4],[2002,20,1778,4,"get"],[2002,21,1778,4],[2002,23,1778,23],[2003,8,1779,8],[2003,15,1779,15],[2003,19,1779,19],[2003,20,1779,20,"stsTokenManager"],[2003,35,1779,35],[2003,36,1779,36,"refreshToken"],[2003,48,1779,48],[2003,52,1779,52],[2003,54,1779,54],[2004,6,1780,4],[2005,4,1780,5],[2006,6,1780,5,"key"],[2006,9,1780,5],[2007,6,1780,5,"value"],[2007,11,1780,5],[2007,13,1781,4],[2007,22,1781,11,"_fromJSON"],[2007,31,1781,20,"_fromJSON"],[2007,32,1781,21,"auth"],[2007,36,1781,25],[2007,38,1781,27,"object"],[2007,44,1781,33],[2007,46,1781,35],[2008,8,1782,8],[2008,12,1782,14,"displayName"],[2008,23,1782,25],[2008,26,1782,28,"object"],[2008,32,1782,34],[2008,33,1782,35,"displayName"],[2008,44,1782,46],[2008,48,1782,50,"undefined"],[2008,57,1782,59],[2009,8,1783,8],[2009,12,1783,14,"email"],[2009,17,1783,19],[2009,20,1783,22,"object"],[2009,26,1783,28],[2009,27,1783,29,"email"],[2009,32,1783,34],[2009,36,1783,38,"undefined"],[2009,45,1783,47],[2010,8,1784,8],[2010,12,1784,14,"phoneNumber"],[2010,23,1784,25],[2010,26,1784,28,"object"],[2010,32,1784,34],[2010,33,1784,35,"phoneNumber"],[2010,44,1784,46],[2010,48,1784,50,"undefined"],[2010,57,1784,59],[2011,8,1785,8],[2011,12,1785,14,"photoURL"],[2011,20,1785,22],[2011,23,1785,25,"object"],[2011,29,1785,31],[2011,30,1785,32,"photoURL"],[2011,38,1785,40],[2011,42,1785,44,"undefined"],[2011,51,1785,53],[2012,8,1786,8],[2012,12,1786,14,"tenantId"],[2012,20,1786,22],[2012,23,1786,25,"object"],[2012,29,1786,31],[2012,30,1786,32,"tenantId"],[2012,38,1786,40],[2012,42,1786,44,"undefined"],[2012,51,1786,53],[2013,8,1787,8],[2013,12,1787,14,"_redirectEventId"],[2013,28,1787,30],[2013,31,1787,33,"object"],[2013,37,1787,39],[2013,38,1787,40,"_redirectEventId"],[2013,54,1787,56],[2013,58,1787,60,"undefined"],[2013,67,1787,69],[2014,8,1788,8],[2014,12,1788,14,"createdAt"],[2014,21,1788,23],[2014,24,1788,26,"object"],[2014,30,1788,32],[2014,31,1788,33,"createdAt"],[2014,40,1788,42],[2014,44,1788,46,"undefined"],[2014,53,1788,55],[2015,8,1789,8],[2015,12,1789,14,"lastLoginAt"],[2015,23,1789,25],[2015,26,1789,28,"object"],[2015,32,1789,34],[2015,33,1789,35,"lastLoginAt"],[2015,44,1789,46],[2015,48,1789,50,"undefined"],[2015,57,1789,59],[2016,8,1790,8],[2016,12,1790,16,"uid"],[2016,15,1790,19],[2016,18,1790,108,"object"],[2016,24,1790,114],[2016,25,1790,16,"uid"],[2016,28,1790,19],[2017,10,1790,21,"emailVerified"],[2017,23,1790,34],[2017,26,1790,108,"object"],[2017,32,1790,114],[2017,33,1790,21,"emailVerified"],[2017,46,1790,34],[2018,10,1790,36,"isAnonymous"],[2018,21,1790,47],[2018,24,1790,108,"object"],[2018,30,1790,114],[2018,31,1790,36,"isAnonymous"],[2018,42,1790,47],[2019,10,1790,49,"providerData"],[2019,22,1790,61],[2019,25,1790,108,"object"],[2019,31,1790,114],[2019,32,1790,49,"providerData"],[2019,44,1790,61],[2020,10,1790,80,"plainObjectTokenManager"],[2020,33,1790,103],[2020,36,1790,108,"object"],[2020,42,1790,114],[2020,43,1790,63,"stsTokenManager"],[2020,58,1790,78],[2021,8,1791,8,"_assert"],[2021,15,1791,15],[2021,16,1791,16,"uid"],[2021,19,1791,19],[2021,23,1791,23,"plainObjectTokenManager"],[2021,46,1791,46],[2021,48,1791,48,"auth"],[2021,52,1791,52],[2021,54,1791,54],[2021,70,1791,70],[2021,71,1791,71],[2021,105,1791,105],[2021,106,1791,106],[2022,8,1792,8],[2022,12,1792,14,"stsTokenManager"],[2022,27,1792,29],[2022,30,1792,32,"StsTokenManager"],[2022,45,1792,47],[2022,46,1792,48,"fromJSON"],[2022,54,1792,56],[2022,55,1792,57],[2022,59,1792,61],[2022,60,1792,62,"name"],[2022,64,1792,66],[2022,66,1792,68,"plainObjectTokenManager"],[2022,89,1792,91],[2022,90,1792,92],[2023,8,1793,8,"_assert"],[2023,15,1793,15],[2023,16,1793,16],[2023,23,1793,23,"uid"],[2023,26,1793,26],[2023,31,1793,31],[2023,39,1793,39],[2023,41,1793,41,"auth"],[2023,45,1793,45],[2023,47,1793,47],[2023,63,1793,63],[2023,64,1793,64],[2023,98,1793,98],[2023,99,1793,99],[2024,8,1794,8,"assertStringOrUndefined"],[2024,31,1794,31],[2024,32,1794,32,"displayName"],[2024,43,1794,43],[2024,45,1794,45,"auth"],[2024,49,1794,49],[2024,50,1794,50,"name"],[2024,54,1794,54],[2024,55,1794,55],[2025,8,1795,8,"assertStringOrUndefined"],[2025,31,1795,31],[2025,32,1795,32,"email"],[2025,37,1795,37],[2025,39,1795,39,"auth"],[2025,43,1795,43],[2025,44,1795,44,"name"],[2025,48,1795,48],[2025,49,1795,49],[2026,8,1796,8,"_assert"],[2026,15,1796,15],[2026,16,1796,16],[2026,23,1796,23,"emailVerified"],[2026,36,1796,36],[2026,41,1796,41],[2026,50,1796,50],[2026,52,1796,52,"auth"],[2026,56,1796,56],[2026,58,1796,58],[2026,74,1796,74],[2026,75,1796,75],[2026,109,1796,109],[2026,110,1796,110],[2027,8,1797,8,"_assert"],[2027,15,1797,15],[2027,16,1797,16],[2027,23,1797,23,"isAnonymous"],[2027,34,1797,34],[2027,39,1797,39],[2027,48,1797,48],[2027,50,1797,50,"auth"],[2027,54,1797,54],[2027,56,1797,56],[2027,72,1797,72],[2027,73,1797,73],[2027,107,1797,107],[2027,108,1797,108],[2028,8,1798,8,"assertStringOrUndefined"],[2028,31,1798,31],[2028,32,1798,32,"phoneNumber"],[2028,43,1798,43],[2028,45,1798,45,"auth"],[2028,49,1798,49],[2028,50,1798,50,"name"],[2028,54,1798,54],[2028,55,1798,55],[2029,8,1799,8,"assertStringOrUndefined"],[2029,31,1799,31],[2029,32,1799,32,"photoURL"],[2029,40,1799,40],[2029,42,1799,42,"auth"],[2029,46,1799,46],[2029,47,1799,47,"name"],[2029,51,1799,51],[2029,52,1799,52],[2030,8,1800,8,"assertStringOrUndefined"],[2030,31,1800,31],[2030,32,1800,32,"tenantId"],[2030,40,1800,40],[2030,42,1800,42,"auth"],[2030,46,1800,46],[2030,47,1800,47,"name"],[2030,51,1800,51],[2030,52,1800,52],[2031,8,1801,8,"assertStringOrUndefined"],[2031,31,1801,31],[2031,32,1801,32,"_redirectEventId"],[2031,48,1801,48],[2031,50,1801,50,"auth"],[2031,54,1801,54],[2031,55,1801,55,"name"],[2031,59,1801,59],[2031,60,1801,60],[2032,8,1802,8,"assertStringOrUndefined"],[2032,31,1802,31],[2032,32,1802,32,"createdAt"],[2032,41,1802,41],[2032,43,1802,43,"auth"],[2032,47,1802,47],[2032,48,1802,48,"name"],[2032,52,1802,52],[2032,53,1802,53],[2033,8,1803,8,"assertStringOrUndefined"],[2033,31,1803,31],[2033,32,1803,32,"lastLoginAt"],[2033,43,1803,43],[2033,45,1803,45,"auth"],[2033,49,1803,49],[2033,50,1803,50,"name"],[2033,54,1803,54],[2033,55,1803,55],[2034,8,1804,8],[2034,12,1804,14,"user"],[2034,16,1804,18],[2034,19,1804,21],[2034,23,1804,25,"UserImpl"],[2034,31,1804,33],[2034,32,1804,34],[2035,10,1805,12,"uid"],[2035,13,1805,15],[2036,10,1806,12,"auth"],[2036,14,1806,16],[2037,10,1807,12,"email"],[2037,15,1807,17],[2038,10,1808,12,"emailVerified"],[2038,23,1808,25],[2039,10,1809,12,"displayName"],[2039,21,1809,23],[2040,10,1810,12,"isAnonymous"],[2040,21,1810,23],[2041,10,1811,12,"photoURL"],[2041,18,1811,20],[2042,10,1812,12,"phoneNumber"],[2042,21,1812,23],[2043,10,1813,12,"tenantId"],[2043,18,1813,20],[2044,10,1814,12,"stsTokenManager"],[2044,25,1814,27],[2045,10,1815,12,"createdAt"],[2045,19,1815,21],[2046,10,1816,12,"lastLoginAt"],[2047,8,1817,8],[2047,9,1817,9],[2047,10,1817,10],[2048,8,1818,8],[2048,12,1818,12,"providerData"],[2048,24,1818,24],[2048,28,1818,28,"Array"],[2048,33,1818,33],[2048,34,1818,34,"isArray"],[2048,41,1818,41],[2048,42,1818,42,"providerData"],[2048,54,1818,54],[2048,55,1818,55],[2048,57,1818,57],[2049,10,1819,12,"user"],[2049,14,1819,16],[2049,15,1819,17,"providerData"],[2049,27,1819,29],[2049,30,1819,32,"providerData"],[2049,42,1819,44],[2049,43,1819,45,"map"],[2049,46,1819,48],[2049,47,1819,49,"userInfo"],[2049,55,1819,57],[2049,60,1819,62],[2050,12,1819,64],[2050,15,1819,67,"userInfo"],[2051,10,1819,76],[2051,11,1819,77],[2051,12,1819,78],[2051,13,1819,79],[2052,8,1820,8],[2053,8,1821,8],[2053,12,1821,12,"_redirectEventId"],[2053,28,1821,28],[2053,30,1821,30],[2054,10,1822,12,"user"],[2054,14,1822,16],[2054,15,1822,17,"_redirectEventId"],[2054,31,1822,33],[2054,34,1822,36,"_redirectEventId"],[2054,50,1822,52],[2055,8,1823,8],[2056,8,1824,8],[2056,15,1824,15,"user"],[2056,19,1824,19],[2057,6,1825,4],[2058,6,1826,4],[2059,0,1827,0],[2060,0,1828,0],[2061,0,1829,0],[2062,0,1830,0],[2063,4,1826,4],[2064,6,1826,4,"key"],[2064,9,1826,4],[2065,6,1826,4,"value"],[2065,11,1826,4],[2066,8,1826,4],[2066,12,1826,4,"_fromIdTokenResponse2"],[2066,33,1826,4],[2066,36,1826,4,"_asyncToGenerator"],[2066,53,1826,4],[2066,54,1831,4],[2066,65,1831,38,"auth"],[2066,69,1831,42],[2066,71,1831,44,"idTokenResponse"],[2066,86,1831,59],[2066,88,1831,82],[2067,10,1831,82],[2067,14,1831,61,"isAnonymous"],[2067,25,1831,72],[2067,28,1831,72,"arguments"],[2067,37,1831,72],[2067,38,1831,72,"length"],[2067,44,1831,72],[2067,52,1831,72,"arguments"],[2067,61,1831,72],[2067,69,1831,72,"undefined"],[2067,78,1831,72],[2067,81,1831,72,"arguments"],[2067,90,1831,72],[2067,96,1831,75],[2067,101,1831,80],[2068,10,1832,8],[2068,14,1832,14,"stsTokenManager"],[2068,29,1832,29],[2068,32,1832,32],[2068,36,1832,36,"StsTokenManager"],[2068,51,1832,51],[2068,52,1832,52],[2068,53,1832,53],[2069,10,1833,8,"stsTokenManager"],[2069,25,1833,23],[2069,26,1833,24,"updateFromServerResponse"],[2069,50,1833,48],[2069,51,1833,49,"idTokenResponse"],[2069,66,1833,64],[2069,67,1833,65],[2070,10,1834,8],[2071,10,1835,8],[2071,14,1835,14,"user"],[2071,18,1835,18],[2071,21,1835,21],[2071,25,1835,25,"UserImpl"],[2071,33,1835,33],[2071,34,1835,34],[2072,12,1836,12,"uid"],[2072,15,1836,15],[2072,17,1836,17,"idTokenResponse"],[2072,32,1836,32],[2072,33,1836,33,"localId"],[2072,40,1836,40],[2073,12,1837,12,"auth"],[2073,16,1837,16],[2074,12,1838,12,"stsTokenManager"],[2074,27,1838,27],[2075,12,1839,12,"isAnonymous"],[2076,10,1840,8],[2076,11,1840,9],[2076,12,1840,10],[2077,10,1841,8],[2078,10,1842,8],[2078,16,1842,14,"_reloadWithoutSaving"],[2078,36,1842,34],[2078,37,1842,35,"user"],[2078,41,1842,39],[2078,42,1842,40],[2079,10,1843,8],[2079,17,1843,15,"user"],[2079,21,1843,19],[2080,8,1844,4],[2080,9,1844,5],[2081,8,1844,5],[2081,17,1831,17,"_fromIdTokenResponse"],[2081,37,1831,37,"_fromIdTokenResponse"],[2081,38,1831,37,"_x37"],[2081,42,1831,37],[2081,44,1831,37,"_x38"],[2081,48,1831,37],[2082,10,1831,37],[2082,17,1831,37,"_fromIdTokenResponse2"],[2082,38,1831,37],[2082,39,1831,37,"apply"],[2082,44,1831,37],[2082,51,1831,37,"arguments"],[2082,60,1831,37],[2083,8,1831,37],[2084,8,1831,37],[2084,15,1831,17,"_fromIdTokenResponse"],[2084,35,1831,37],[2085,6,1831,37],[2086,6,1845,4],[2087,0,1846,0],[2088,0,1847,0],[2089,0,1848,0],[2090,0,1849,0],[2091,6,1845,4],[2092,4,1845,4],[2093,6,1845,4,"key"],[2093,9,1845,4],[2094,6,1845,4,"value"],[2094,11,1845,4],[2095,8,1845,4],[2095,12,1845,4,"_fromGetAccountInfoResponse2"],[2095,40,1845,4],[2095,43,1845,4,"_asyncToGenerator"],[2095,60,1845,4],[2095,61,1850,4],[2095,72,1850,45,"auth"],[2095,76,1850,49],[2095,78,1850,51,"response"],[2095,86,1850,59],[2095,88,1850,61,"idToken"],[2095,95,1850,68],[2095,97,1850,70],[2096,10,1851,8],[2096,14,1851,14,"coreAccount"],[2096,25,1851,25],[2096,28,1851,28,"response"],[2096,36,1851,36],[2096,37,1851,37,"users"],[2096,42,1851,42],[2096,43,1851,43],[2096,44,1851,44],[2096,45,1851,45],[2097,10,1852,8,"_assert"],[2097,17,1852,15],[2097,18,1852,16,"coreAccount"],[2097,29,1852,27],[2097,30,1852,28,"localId"],[2097,37,1852,35],[2097,42,1852,40,"undefined"],[2097,51,1852,49],[2097,53,1852,51],[2097,69,1852,67],[2097,70,1852,68],[2097,104,1852,102],[2097,105,1852,103],[2098,10,1853,8],[2098,14,1853,14,"providerData"],[2098,26,1853,26],[2098,29,1853,29,"coreAccount"],[2098,40,1853,40],[2098,41,1853,41,"providerUserInfo"],[2098,57,1853,57],[2098,62,1853,62,"undefined"],[2098,71,1853,71],[2098,74,1854,14,"extractProviderData"],[2098,93,1854,33],[2098,94,1854,34,"coreAccount"],[2098,105,1854,45],[2098,106,1854,46,"providerUserInfo"],[2098,122,1854,62],[2098,123,1854,63],[2098,126,1855,14],[2098,128,1855,16],[2099,10,1856,8],[2099,14,1856,14,"isAnonymous"],[2099,25,1856,25],[2099,28,1856,28],[2099,30,1856,30,"coreAccount"],[2099,41,1856,41],[2099,42,1856,42,"email"],[2099,47,1856,47],[2099,51,1856,51,"coreAccount"],[2099,62,1856,62],[2099,63,1856,63,"passwordHash"],[2099,75,1856,75],[2099,76,1856,76],[2099,80,1856,80],[2099,81,1856,81,"providerData"],[2099,93,1856,93],[2099,95,1856,95,"length"],[2099,101,1856,101],[2100,10,1857,8],[2100,14,1857,14,"stsTokenManager"],[2100,29,1857,29],[2100,32,1857,32],[2100,36,1857,36,"StsTokenManager"],[2100,51,1857,51],[2100,52,1857,52],[2100,53,1857,53],[2101,10,1858,8,"stsTokenManager"],[2101,25,1858,23],[2101,26,1858,24,"updateFromIdToken"],[2101,43,1858,41],[2101,44,1858,42,"idToken"],[2101,51,1858,49],[2101,52,1858,50],[2102,10,1859,8],[2103,10,1860,8],[2103,14,1860,14,"user"],[2103,18,1860,18],[2103,21,1860,21],[2103,25,1860,25,"UserImpl"],[2103,33,1860,33],[2103,34,1860,34],[2104,12,1861,12,"uid"],[2104,15,1861,15],[2104,17,1861,17,"coreAccount"],[2104,28,1861,28],[2104,29,1861,29,"localId"],[2104,36,1861,36],[2105,12,1862,12,"auth"],[2105,16,1862,16],[2106,12,1863,12,"stsTokenManager"],[2106,27,1863,27],[2107,12,1864,12,"isAnonymous"],[2108,10,1865,8],[2108,11,1865,9],[2108,12,1865,10],[2109,10,1866,8],[2110,10,1867,8],[2110,14,1867,14,"updates"],[2110,21,1867,21],[2110,24,1867,24],[2111,12,1868,12,"uid"],[2111,15,1868,15],[2111,17,1868,17,"coreAccount"],[2111,28,1868,28],[2111,29,1868,29,"localId"],[2111,36,1868,36],[2112,12,1869,12,"displayName"],[2112,23,1869,23],[2112,25,1869,25,"coreAccount"],[2112,36,1869,36],[2112,37,1869,37,"displayName"],[2112,48,1869,48],[2112,52,1869,52],[2112,56,1869,56],[2113,12,1870,12,"photoURL"],[2113,20,1870,20],[2113,22,1870,22,"coreAccount"],[2113,33,1870,33],[2113,34,1870,34,"photoUrl"],[2113,42,1870,42],[2113,46,1870,46],[2113,50,1870,50],[2114,12,1871,12,"email"],[2114,17,1871,17],[2114,19,1871,19,"coreAccount"],[2114,30,1871,30],[2114,31,1871,31,"email"],[2114,36,1871,36],[2114,40,1871,40],[2114,44,1871,44],[2115,12,1872,12,"emailVerified"],[2115,25,1872,25],[2115,27,1872,27,"coreAccount"],[2115,38,1872,38],[2115,39,1872,39,"emailVerified"],[2115,52,1872,52],[2115,56,1872,56],[2115,61,1872,61],[2116,12,1873,12,"phoneNumber"],[2116,23,1873,23],[2116,25,1873,25,"coreAccount"],[2116,36,1873,36],[2116,37,1873,37,"phoneNumber"],[2116,48,1873,48],[2116,52,1873,52],[2116,56,1873,56],[2117,12,1874,12,"tenantId"],[2117,20,1874,20],[2117,22,1874,22,"coreAccount"],[2117,33,1874,33],[2117,34,1874,34,"tenantId"],[2117,42,1874,42],[2117,46,1874,46],[2117,50,1874,50],[2118,12,1875,12,"providerData"],[2118,24,1875,24],[2119,12,1876,12,"metadata"],[2119,20,1876,20],[2119,22,1876,22],[2119,26,1876,26,"UserMetadata"],[2119,38,1876,38],[2119,39,1876,39,"coreAccount"],[2119,50,1876,50],[2119,51,1876,51,"createdAt"],[2119,60,1876,60],[2119,62,1876,62,"coreAccount"],[2119,73,1876,73],[2119,74,1876,74,"lastLoginAt"],[2119,85,1876,85],[2119,86,1876,86],[2120,12,1877,12,"isAnonymous"],[2120,23,1877,23],[2120,25,1877,25],[2120,27,1877,27,"coreAccount"],[2120,38,1877,38],[2120,39,1877,39,"email"],[2120,44,1877,44],[2120,48,1877,48,"coreAccount"],[2120,59,1877,59],[2120,60,1877,60,"passwordHash"],[2120,72,1877,72],[2120,73,1877,73],[2120,77,1878,16],[2120,78,1878,17,"providerData"],[2120,90,1878,29],[2120,92,1878,31,"length"],[2121,10,1879,8],[2121,11,1879,9],[2122,10,1880,8,"Object"],[2122,16,1880,14],[2122,17,1880,15,"assign"],[2122,23,1880,21],[2122,24,1880,22,"user"],[2122,28,1880,26],[2122,30,1880,28,"updates"],[2122,37,1880,35],[2122,38,1880,36],[2123,10,1881,8],[2123,17,1881,15,"user"],[2123,21,1881,19],[2124,8,1882,4],[2124,9,1882,5],[2125,8,1882,5],[2125,17,1850,17,"_fromGetAccountInfoResponse"],[2125,44,1850,44,"_fromGetAccountInfoResponse"],[2125,45,1850,44,"_x39"],[2125,49,1850,44],[2125,51,1850,44,"_x40"],[2125,55,1850,44],[2125,57,1850,44,"_x41"],[2125,61,1850,44],[2126,10,1850,44],[2126,17,1850,44,"_fromGetAccountInfoResponse2"],[2126,45,1850,44],[2126,46,1850,44,"apply"],[2126,51,1850,44],[2126,58,1850,44,"arguments"],[2126,67,1850,44],[2127,8,1850,44],[2128,8,1850,44],[2128,15,1850,17,"_fromGetAccountInfoResponse"],[2128,42,1850,44],[2129,6,1850,44],[2130,4,1850,44],[2131,2,1850,44],[2132,2,1885,0],[2133,0,1886,0],[2134,0,1887,0],[2135,0,1888,0],[2136,0,1889,0],[2137,0,1890,0],[2138,0,1891,0],[2139,0,1892,0],[2140,0,1893,0],[2141,0,1894,0],[2142,0,1895,0],[2143,0,1896,0],[2144,0,1897,0],[2145,0,1898,0],[2146,0,1899,0],[2147,0,1900,0],[2148,2,1901,0],[2148,6,1901,6,"instanceCache"],[2148,19,1901,19],[2148,22,1901,22],[2148,26,1901,26,"Map"],[2148,29,1901,29],[2148,30,1901,30],[2148,31,1901,31],[2149,2,1902,0],[2149,11,1902,9,"_getInstance"],[2149,23,1902,21,"_getInstance"],[2149,24,1902,22,"cls"],[2149,27,1902,25],[2149,29,1902,27],[2150,4,1903,4,"debugAssert"],[2150,15,1903,15],[2150,16,1903,16,"cls"],[2150,19,1903,19],[2150,31,1903,31,"Function"],[2150,39,1903,39],[2150,41,1903,41],[2150,70,1903,70],[2150,71,1903,71],[2151,4,1904,4],[2151,8,1904,8,"instance"],[2151,16,1904,16],[2151,19,1904,19,"instanceCache"],[2151,32,1904,32],[2151,33,1904,33,"get"],[2151,36,1904,36],[2151,37,1904,37,"cls"],[2151,40,1904,40],[2151,41,1904,41],[2152,4,1905,4],[2152,8,1905,8,"instance"],[2152,16,1905,16],[2152,18,1905,18],[2153,6,1906,8,"debugAssert"],[2153,17,1906,19],[2153,18,1906,20,"instance"],[2153,26,1906,28],[2153,38,1906,40,"cls"],[2153,41,1906,43],[2153,43,1906,45],[2153,91,1906,93],[2153,92,1906,94],[2154,6,1907,8],[2154,13,1907,15,"instance"],[2154,21,1907,23],[2155,4,1908,4],[2156,4,1909,4,"instance"],[2156,12,1909,12],[2156,15,1909,15],[2156,19,1909,19,"cls"],[2156,22,1909,22],[2156,23,1909,23],[2156,24,1909,24],[2157,4,1910,4,"instanceCache"],[2157,17,1910,17],[2157,18,1910,18,"set"],[2157,21,1910,21],[2157,22,1910,22,"cls"],[2157,25,1910,25],[2157,27,1910,27,"instance"],[2157,35,1910,35],[2157,36,1910,36],[2158,4,1911,4],[2158,11,1911,11,"instance"],[2158,19,1911,19],[2159,2,1912,0],[2161,2,1914,0],[2162,0,1915,0],[2163,0,1916,0],[2164,0,1917,0],[2165,0,1918,0],[2166,0,1919,0],[2167,0,1920,0],[2168,0,1921,0],[2169,0,1922,0],[2170,0,1923,0],[2171,0,1924,0],[2172,0,1925,0],[2173,0,1926,0],[2174,0,1927,0],[2175,0,1928,0],[2176,0,1929,0],[2177,2,1914,0],[2177,6,1930,6,"InMemoryPersistence"],[2177,25,1930,25],[2178,4,1931,4],[2178,13,1931,4,"InMemoryPersistence"],[2178,33,1931,4],[2178,35,1931,18],[2179,6,1931,18,"_classCallCheck"],[2179,21,1931,18],[2179,28,1931,18,"InMemoryPersistence"],[2179,47,1931,18],[2180,6,1932,8],[2180,10,1932,12],[2180,11,1932,13,"type"],[2180,15,1932,17],[2180,18,1932,20],[2180,24,1932,26],[2180,25,1932,27],[2181,6,1933,8],[2181,10,1933,12],[2181,11,1933,13,"storage"],[2181,18,1933,20],[2181,21,1933,23],[2181,22,1933,24],[2181,23,1933,25],[2182,4,1934,4],[2183,4,1934,5],[2183,11,1934,5,"_createClass"],[2183,23,1934,5],[2183,24,1934,5,"InMemoryPersistence"],[2183,43,1934,5],[2184,6,1934,5,"key"],[2184,9,1934,5],[2185,6,1934,5,"value"],[2185,11,1934,5],[2186,8,1934,5],[2186,12,1934,5,"_isAvailable2"],[2186,25,1934,5],[2186,28,1934,5,"_asyncToGenerator"],[2186,45,1934,5],[2186,46,1935,4],[2186,59,1935,25],[2187,10,1936,8],[2187,17,1936,15],[2187,21,1936,19],[2188,8,1937,4],[2188,9,1937,5],[2189,8,1937,5],[2189,17,1935,10,"_isAvailable"],[2189,29,1935,22,"_isAvailable"],[2189,30,1935,22],[2190,10,1935,22],[2190,17,1935,22,"_isAvailable2"],[2190,30,1935,22],[2190,31,1935,22,"apply"],[2190,36,1935,22],[2190,43,1935,22,"arguments"],[2190,52,1935,22],[2191,8,1935,22],[2192,8,1935,22],[2192,15,1935,10,"_isAvailable"],[2192,27,1935,22],[2193,6,1935,22],[2194,4,1935,22],[2195,6,1935,22,"key"],[2195,9,1935,22],[2196,6,1935,22,"value"],[2196,11,1935,22],[2197,8,1935,22],[2197,12,1935,22,"_set2"],[2197,17,1935,22],[2197,20,1935,22,"_asyncToGenerator"],[2197,37,1935,22],[2197,38,1938,4],[2197,49,1938,15,"key"],[2197,52,1938,18],[2197,54,1938,20,"value"],[2197,59,1938,25],[2197,61,1938,27],[2198,10,1939,8],[2198,14,1939,12],[2198,15,1939,13,"storage"],[2198,22,1939,20],[2198,23,1939,21,"key"],[2198,26,1939,24],[2198,27,1939,25],[2198,30,1939,28,"value"],[2198,35,1939,33],[2199,8,1940,4],[2199,9,1940,5],[2200,8,1940,5],[2200,17,1938,10,"_set"],[2200,21,1938,14,"_set"],[2200,22,1938,14,"_x42"],[2200,26,1938,14],[2200,28,1938,14,"_x43"],[2200,32,1938,14],[2201,10,1938,14],[2201,17,1938,14,"_set2"],[2201,22,1938,14],[2201,23,1938,14,"apply"],[2201,28,1938,14],[2201,35,1938,14,"arguments"],[2201,44,1938,14],[2202,8,1938,14],[2203,8,1938,14],[2203,15,1938,10,"_set"],[2203,19,1938,14],[2204,6,1938,14],[2205,4,1938,14],[2206,6,1938,14,"key"],[2206,9,1938,14],[2207,6,1938,14,"value"],[2207,11,1938,14],[2208,8,1938,14],[2208,12,1938,14,"_get2"],[2208,17,1938,14],[2208,20,1938,14,"_asyncToGenerator"],[2208,37,1938,14],[2208,38,1941,4],[2208,49,1941,15,"key"],[2208,52,1941,18],[2208,54,1941,20],[2209,10,1942,8],[2209,14,1942,14,"value"],[2209,19,1942,19],[2209,22,1942,22],[2209,26,1942,26],[2209,27,1942,27,"storage"],[2209,34,1942,34],[2209,35,1942,35,"key"],[2209,38,1942,38],[2209,39,1942,39],[2210,10,1943,8],[2210,17,1943,15,"value"],[2210,22,1943,20],[2210,27,1943,25,"undefined"],[2210,36,1943,34],[2210,39,1943,37],[2210,43,1943,41],[2210,46,1943,44,"value"],[2210,51,1943,49],[2211,8,1944,4],[2211,9,1944,5],[2212,8,1944,5],[2212,17,1941,10,"_get"],[2212,21,1941,14,"_get"],[2212,22,1941,14,"_x44"],[2212,26,1941,14],[2213,10,1941,14],[2213,17,1941,14,"_get2"],[2213,22,1941,14],[2213,23,1941,14,"apply"],[2213,28,1941,14],[2213,35,1941,14,"arguments"],[2213,44,1941,14],[2214,8,1941,14],[2215,8,1941,14],[2215,15,1941,10,"_get"],[2215,19,1941,14],[2216,6,1941,14],[2217,4,1941,14],[2218,6,1941,14,"key"],[2218,9,1941,14],[2219,6,1941,14,"value"],[2219,11,1941,14],[2220,8,1941,14],[2220,12,1941,14,"_remove2"],[2220,20,1941,14],[2220,23,1941,14,"_asyncToGenerator"],[2220,40,1941,14],[2220,41,1945,4],[2220,52,1945,18,"key"],[2220,55,1945,21],[2220,57,1945,23],[2221,10,1946,8],[2221,17,1946,15],[2221,21,1946,19],[2221,22,1946,20,"storage"],[2221,29,1946,27],[2221,30,1946,28,"key"],[2221,33,1946,31],[2221,34,1946,32],[2222,8,1947,4],[2222,9,1947,5],[2223,8,1947,5],[2223,17,1945,10,"_remove"],[2223,24,1945,17,"_remove"],[2223,25,1945,17,"_x45"],[2223,29,1945,17],[2224,10,1945,17],[2224,17,1945,17,"_remove2"],[2224,25,1945,17],[2224,26,1945,17,"apply"],[2224,31,1945,17],[2224,38,1945,17,"arguments"],[2224,47,1945,17],[2225,8,1945,17],[2226,8,1945,17],[2226,15,1945,10,"_remove"],[2226,22,1945,17],[2227,6,1945,17],[2228,4,1945,17],[2229,6,1945,17,"key"],[2229,9,1945,17],[2230,6,1945,17,"value"],[2230,11,1945,17],[2230,13,1948,4],[2230,22,1948,4,"_addListener"],[2230,34,1948,16,"_addListener"],[2230,35,1948,17,"_key"],[2230,39,1948,21],[2230,41,1948,23,"_listener"],[2230,50,1948,32],[2230,52,1948,34],[2231,8,1949,8],[2232,8,1950,8],[2233,6,1951,4],[2234,4,1951,5],[2235,6,1951,5,"key"],[2235,9,1951,5],[2236,6,1951,5,"value"],[2236,11,1951,5],[2236,13,1952,4],[2236,22,1952,4,"_removeListener"],[2236,37,1952,19,"_removeListener"],[2236,38,1952,20,"_key"],[2236,42,1952,24],[2236,44,1952,26,"_listener"],[2236,53,1952,35],[2236,55,1952,37],[2237,8,1953,8],[2238,8,1954,8],[2239,6,1955,4],[2240,4,1955,5],[2241,2,1955,5],[2242,2,1957,0,"InMemoryPersistence"],[2242,21,1957,19],[2242,22,1957,20,"type"],[2242,26,1957,24],[2242,29,1957,27],[2242,35,1957,33],[2243,2,1958,0],[2244,0,1959,0],[2245,0,1960,0],[2246,0,1961,0],[2247,0,1962,0],[2248,2,1963,0],[2248,6,1963,6,"inMemoryPersistence"],[2248,25,1963,25],[2248,28,1963,28,"InMemoryPersistence"],[2248,47,1963,47],[2250,2,1965,0],[2251,0,1966,0],[2252,0,1967,0],[2253,0,1968,0],[2254,0,1969,0],[2255,0,1970,0],[2256,0,1971,0],[2257,0,1972,0],[2258,0,1973,0],[2259,0,1974,0],[2260,0,1975,0],[2261,0,1976,0],[2262,0,1977,0],[2263,0,1978,0],[2264,0,1979,0],[2265,0,1980,0],[2266,2,1981,0],[2266,11,1981,9,"_persistenceKeyName"],[2266,30,1981,28,"_persistenceKeyName"],[2266,31,1981,29,"key"],[2266,34,1981,32],[2266,36,1981,34,"apiKey"],[2266,42,1981,40],[2266,44,1981,42,"appName"],[2266,51,1981,49],[2266,53,1981,51],[2267,4,1982,4],[2267,11,1982,11],[2267,14,1982,14],[2267,24,1982,24],[2267,25,1982,25],[2267,56,1982,56,"key"],[2267,59,1982,59],[2267,63,1982,63,"apiKey"],[2267,69,1982,69],[2267,73,1982,73,"appName"],[2267,80,1982,80],[2267,82,1982,82],[2268,2,1983,0],[2269,2,1983,1],[2269,6,1984,6,"PersistenceUserManager"],[2269,28,1984,28],[2270,4,1985,4],[2270,13,1985,4,"PersistenceUserManager"],[2270,36,1985,16,"persistence"],[2270,47,1985,27],[2270,49,1985,29,"auth"],[2270,53,1985,33],[2270,55,1985,35,"userKey"],[2270,62,1985,42],[2270,64,1985,44],[2271,6,1985,44,"_classCallCheck"],[2271,21,1985,44],[2271,28,1985,44,"PersistenceUserManager"],[2271,50,1985,44],[2272,6,1986,8],[2272,10,1986,12],[2272,11,1986,13,"persistence"],[2272,22,1986,24],[2272,25,1986,27,"persistence"],[2272,36,1986,38],[2273,6,1987,8],[2273,10,1987,12],[2273,11,1987,13,"auth"],[2273,15,1987,17],[2273,18,1987,20,"auth"],[2273,22,1987,24],[2274,6,1988,8],[2274,10,1988,12],[2274,11,1988,13,"userKey"],[2274,18,1988,20],[2274,21,1988,23,"userKey"],[2274,28,1988,30],[2275,6,1989,8],[2275,10,1989,8,"_this$auth"],[2275,20,1989,8],[2275,23,1989,33],[2275,27,1989,37],[2275,28,1989,38,"auth"],[2275,32,1989,42],[2276,8,1989,16,"config"],[2276,14,1989,22],[2276,17,1989,22,"_this$auth"],[2276,27,1989,22],[2276,28,1989,16,"config"],[2276,34,1989,22],[2277,8,1989,24,"name"],[2277,12,1989,28],[2277,15,1989,28,"_this$auth"],[2277,25,1989,28],[2277,26,1989,24,"name"],[2277,30,1989,28],[2278,6,1990,8],[2278,10,1990,12],[2278,11,1990,13,"fullUserKey"],[2278,22,1990,24],[2278,25,1990,27,"_persistenceKeyName"],[2278,44,1990,46],[2278,45,1990,47],[2278,49,1990,51],[2278,50,1990,52,"userKey"],[2278,57,1990,59],[2278,59,1990,61,"config"],[2278,65,1990,67],[2278,66,1990,68,"apiKey"],[2278,72,1990,74],[2278,74,1990,76,"name"],[2278,78,1990,80],[2278,79,1990,81],[2279,6,1991,8],[2279,10,1991,12],[2279,11,1991,13,"fullPersistenceKey"],[2279,29,1991,31],[2279,32,1991,34,"_persistenceKeyName"],[2279,51,1991,53],[2279,52,1991,54],[2279,65,1991,67],[2279,66,1991,68],[2279,98,1991,100,"config"],[2279,104,1991,106],[2279,105,1991,107,"apiKey"],[2279,111,1991,113],[2279,113,1991,115,"name"],[2279,117,1991,119],[2279,118,1991,120],[2280,6,1992,8],[2280,10,1992,12],[2280,11,1992,13,"boundEventHandler"],[2280,28,1992,30],[2280,31,1992,33,"auth"],[2280,35,1992,37],[2280,36,1992,38,"_onStorageEvent"],[2280,51,1992,53],[2280,52,1992,54,"bind"],[2280,56,1992,58],[2280,57,1992,59,"auth"],[2280,61,1992,63],[2280,62,1992,64],[2281,6,1993,8],[2281,10,1993,12],[2281,11,1993,13,"persistence"],[2281,22,1993,24],[2281,23,1993,25,"_addListener"],[2281,35,1993,37],[2281,36,1993,38],[2281,40,1993,42],[2281,41,1993,43,"fullUserKey"],[2281,52,1993,54],[2281,54,1993,56],[2281,58,1993,60],[2281,59,1993,61,"boundEventHandler"],[2281,76,1993,78],[2281,77,1993,79],[2282,4,1994,4],[2283,4,1994,5],[2283,11,1994,5,"_createClass"],[2283,23,1994,5],[2283,24,1994,5,"PersistenceUserManager"],[2283,46,1994,5],[2284,6,1994,5,"key"],[2284,9,1994,5],[2285,6,1994,5,"value"],[2285,11,1994,5],[2285,13,1995,4],[2285,22,1995,4,"setCurrentUser"],[2285,36,1995,18,"setCurrentUser"],[2285,37,1995,19,"user"],[2285,41,1995,23],[2285,43,1995,25],[2286,8,1996,8],[2286,15,1996,15],[2286,19,1996,19],[2286,20,1996,20,"persistence"],[2286,31,1996,31],[2286,32,1996,32,"_set"],[2286,36,1996,36],[2286,37,1996,37],[2286,41,1996,41],[2286,42,1996,42,"fullUserKey"],[2286,53,1996,53],[2286,55,1996,55,"user"],[2286,59,1996,59],[2286,60,1996,60,"toJSON"],[2286,66,1996,66],[2286,67,1996,67],[2286,68,1996,68],[2286,69,1996,69],[2287,6,1997,4],[2288,4,1997,5],[2289,6,1997,5,"key"],[2289,9,1997,5],[2290,6,1997,5,"value"],[2290,11,1997,5],[2291,8,1997,5],[2291,12,1997,5,"_getCurrentUser"],[2291,27,1997,5],[2291,30,1997,5,"_asyncToGenerator"],[2291,47,1997,5],[2291,48,1998,4],[2291,61,1998,27],[2292,10,1999,8],[2292,14,1999,14,"blob"],[2292,18,1999,18],[2292,27,1999,27],[2292,31,1999,31],[2292,32,1999,32,"persistence"],[2292,43,1999,43],[2292,44,1999,44,"_get"],[2292,48,1999,48],[2292,49,1999,49],[2292,53,1999,53],[2292,54,1999,54,"fullUserKey"],[2292,65,1999,65],[2292,66,1999,66],[2293,10,2000,8],[2293,14,2000,12],[2293,15,2000,13,"blob"],[2293,19,2000,17],[2293,21,2000,19],[2294,12,2001,12],[2294,19,2001,19],[2294,23,2001,23],[2295,10,2002,8],[2296,10,2003,8],[2296,14,2003,12],[2296,21,2003,19,"blob"],[2296,25,2003,23],[2296,30,2003,28],[2296,38,2003,36],[2296,40,2003,38],[2297,12,2004,12],[2297,16,2004,18,"response"],[2297,24,2004,26],[2297,33,2004,35,"getAccountInfo"],[2297,47,2004,49],[2297,48,2004,50],[2297,52,2004,54],[2297,53,2004,55,"auth"],[2297,57,2004,59],[2297,59,2004,61],[2298,14,2004,63,"idToken"],[2298,21,2004,70],[2298,23,2004,72,"blob"],[2299,12,2004,77],[2299,13,2004,78],[2299,14,2004,79],[2299,15,2004,80,"catch"],[2299,20,2004,85],[2299,21,2004,86],[2299,27,2004,92,"undefined"],[2299,36,2004,101],[2299,37,2004,102],[2300,12,2005,12],[2300,16,2005,16],[2300,17,2005,17,"response"],[2300,25,2005,25],[2300,27,2005,27],[2301,14,2006,16],[2301,21,2006,23],[2301,25,2006,27],[2302,12,2007,12],[2303,12,2008,12],[2303,19,2008,19,"UserImpl"],[2303,27,2008,27],[2303,28,2008,28,"_fromGetAccountInfoResponse"],[2303,55,2008,55],[2303,56,2008,56],[2303,60,2008,60],[2303,61,2008,61,"auth"],[2303,65,2008,65],[2303,67,2008,67,"response"],[2303,75,2008,75],[2303,77,2008,77,"blob"],[2303,81,2008,81],[2303,82,2008,82],[2304,10,2009,8],[2305,10,2010,8],[2305,17,2010,15,"UserImpl"],[2305,25,2010,23],[2305,26,2010,24,"_fromJSON"],[2305,35,2010,33],[2305,36,2010,34],[2305,40,2010,38],[2305,41,2010,39,"auth"],[2305,45,2010,43],[2305,47,2010,45,"blob"],[2305,51,2010,49],[2305,52,2010,50],[2306,8,2011,4],[2306,9,2011,5],[2307,8,2011,5],[2307,17,1998,10,"getCurrentUser"],[2307,31,1998,24,"getCurrentUser"],[2307,32,1998,24],[2308,10,1998,24],[2308,17,1998,24,"_getCurrentUser"],[2308,32,1998,24],[2308,33,1998,24,"apply"],[2308,38,1998,24],[2308,45,1998,24,"arguments"],[2308,54,1998,24],[2309,8,1998,24],[2310,8,1998,24],[2310,15,1998,10,"getCurrentUser"],[2310,29,1998,24],[2311,6,1998,24],[2312,4,1998,24],[2313,6,1998,24,"key"],[2313,9,1998,24],[2314,6,1998,24,"value"],[2314,11,1998,24],[2314,13,2012,4],[2314,22,2012,4,"removeCurrentUser"],[2314,39,2012,21,"removeCurrentUser"],[2314,40,2012,21],[2314,42,2012,24],[2315,8,2013,8],[2315,15,2013,15],[2315,19,2013,19],[2315,20,2013,20,"persistence"],[2315,31,2013,31],[2315,32,2013,32,"_remove"],[2315,39,2013,39],[2315,40,2013,40],[2315,44,2013,44],[2315,45,2013,45,"fullUserKey"],[2315,56,2013,56],[2315,57,2013,57],[2316,6,2014,4],[2317,4,2014,5],[2318,6,2014,5,"key"],[2318,9,2014,5],[2319,6,2014,5,"value"],[2319,11,2014,5],[2319,13,2015,4],[2319,22,2015,4,"savePersistenceForRedirect"],[2319,48,2015,30,"savePersistenceForRedirect"],[2319,49,2015,30],[2319,51,2015,33],[2320,8,2016,8],[2320,15,2016,15],[2320,19,2016,19],[2320,20,2016,20,"persistence"],[2320,31,2016,31],[2320,32,2016,32,"_set"],[2320,36,2016,36],[2320,37,2016,37],[2320,41,2016,41],[2320,42,2016,42,"fullPersistenceKey"],[2320,60,2016,60],[2320,62,2016,62],[2320,66,2016,66],[2320,67,2016,67,"persistence"],[2320,78,2016,78],[2320,79,2016,79,"type"],[2320,83,2016,83],[2320,84,2016,84],[2321,6,2017,4],[2322,4,2017,5],[2323,6,2017,5,"key"],[2323,9,2017,5],[2324,6,2017,5,"value"],[2324,11,2017,5],[2325,8,2017,5],[2325,12,2017,5,"_setPersistence"],[2325,27,2017,5],[2325,30,2017,5,"_asyncToGenerator"],[2325,47,2017,5],[2325,48,2018,4],[2325,59,2018,25,"newPersistence"],[2325,73,2018,39],[2325,75,2018,41],[2326,10,2019,8],[2326,14,2019,12],[2326,18,2019,16],[2326,19,2019,17,"persistence"],[2326,30,2019,28],[2326,35,2019,33,"newPersistence"],[2326,49,2019,47],[2326,51,2019,49],[2327,12,2020,12],[2328,10,2021,8],[2329,10,2022,8],[2329,14,2022,14,"currentUser"],[2329,25,2022,25],[2329,34,2022,34],[2329,38,2022,38],[2329,39,2022,39,"getCurrentUser"],[2329,53,2022,53],[2329,54,2022,54],[2329,55,2022,55],[2330,10,2023,8],[2330,16,2023,14],[2330,20,2023,18],[2330,21,2023,19,"removeCurrentUser"],[2330,38,2023,36],[2330,39,2023,37],[2330,40,2023,38],[2331,10,2024,8],[2331,14,2024,12],[2331,15,2024,13,"persistence"],[2331,26,2024,24],[2331,29,2024,27,"newPersistence"],[2331,43,2024,41],[2332,10,2025,8],[2332,14,2025,12,"currentUser"],[2332,25,2025,23],[2332,27,2025,25],[2333,12,2026,12],[2333,19,2026,19],[2333,23,2026,23],[2333,24,2026,24,"setCurrentUser"],[2333,38,2026,38],[2333,39,2026,39,"currentUser"],[2333,50,2026,50],[2333,51,2026,51],[2334,10,2027,8],[2335,8,2028,4],[2335,9,2028,5],[2336,8,2028,5],[2336,17,2018,10,"setPersistence"],[2336,31,2018,24,"setPersistence"],[2336,32,2018,24,"_x46"],[2336,36,2018,24],[2337,10,2018,24],[2337,17,2018,24,"_setPersistence"],[2337,32,2018,24],[2337,33,2018,24,"apply"],[2337,38,2018,24],[2337,45,2018,24,"arguments"],[2337,54,2018,24],[2338,8,2018,24],[2339,8,2018,24],[2339,15,2018,10,"setPersistence"],[2339,29,2018,24],[2340,6,2018,24],[2341,4,2018,24],[2342,6,2018,24,"key"],[2342,9,2018,24],[2343,6,2018,24,"value"],[2343,11,2018,24],[2343,13,2029,4],[2343,22,2029,4,"delete"],[2343,29,2029,10,"delete"],[2343,30,2029,10],[2343,32,2029,13],[2344,8,2030,8],[2344,12,2030,12],[2344,13,2030,13,"persistence"],[2344,24,2030,24],[2344,25,2030,25,"_removeListener"],[2344,40,2030,40],[2344,41,2030,41],[2344,45,2030,45],[2344,46,2030,46,"fullUserKey"],[2344,57,2030,57],[2344,59,2030,59],[2344,63,2030,63],[2344,64,2030,64,"boundEventHandler"],[2344,81,2030,81],[2344,82,2030,82],[2345,6,2031,4],[2346,4,2031,5],[2347,6,2031,5,"key"],[2347,9,2031,5],[2348,6,2031,5,"value"],[2348,11,2031,5],[2349,8,2031,5],[2349,12,2031,5,"_create"],[2349,19,2031,5],[2349,22,2031,5,"_asyncToGenerator"],[2349,39,2031,5],[2349,40,2032,4],[2349,51,2032,24,"auth"],[2349,55,2032,28],[2349,57,2032,30,"persistenceHierarchy"],[2349,77,2032,50],[2349,79,2032,98],[2350,10,2032,98],[2350,14,2032,52,"userKey"],[2350,21,2032,59],[2350,24,2032,59,"arguments"],[2350,33,2032,59],[2350,34,2032,59,"length"],[2350,40,2032,59],[2350,48,2032,59,"arguments"],[2350,57,2032,59],[2350,65,2032,59,"undefined"],[2350,74,2032,59],[2350,77,2032,59,"arguments"],[2350,86,2032,59],[2350,92,2032,62],[2350,102,2032,72],[2351,10,2033,8],[2351,14,2033,12],[2351,15,2033,13,"persistenceHierarchy"],[2351,35,2033,33],[2351,36,2033,34,"length"],[2351,42,2033,40],[2351,44,2033,42],[2352,12,2034,12],[2352,19,2034,19],[2352,23,2034,23,"PersistenceUserManager"],[2352,45,2034,45],[2352,46,2034,46,"_getInstance"],[2352,58,2034,58],[2352,59,2034,59,"inMemoryPersistence"],[2352,78,2034,78],[2352,79,2034,79],[2352,81,2034,81,"auth"],[2352,85,2034,85],[2352,87,2034,87,"userKey"],[2352,94,2034,94],[2352,95,2034,95],[2353,10,2035,8],[2354,10,2036,8],[2355,10,2037,8],[2355,14,2037,14,"availablePersistences"],[2355,35,2037,35],[2355,38,2037,38],[2355,45,2037,45,"Promise"],[2355,52,2037,52],[2355,53,2037,53,"all"],[2355,56,2037,56],[2355,57,2037,57,"persistenceHierarchy"],[2355,77,2037,77],[2355,78,2037,78,"map"],[2355,81,2037,81],[2356,12,2037,81],[2356,16,2037,81,"_ref5"],[2356,21,2037,81],[2356,24,2037,81,"_asyncToGenerator"],[2356,41,2037,81],[2356,42,2037,82],[2356,53,2037,89,"persistence"],[2356,64,2037,100],[2356,66,2037,105],[2357,14,2038,12],[2357,24,2038,22,"persistence"],[2357,35,2038,33],[2357,36,2038,34,"_isAvailable"],[2357,48,2038,46],[2357,49,2038,47],[2357,50,2038,48],[2357,52,2038,50],[2358,16,2039,16],[2358,23,2039,23,"persistence"],[2358,34,2039,34],[2359,14,2040,12],[2360,14,2041,12],[2360,21,2041,19,"undefined"],[2360,30,2041,28],[2361,12,2042,8],[2361,13,2042,9],[2362,12,2042,9],[2362,29,2042,9,"_x49"],[2362,33,2042,9],[2363,14,2042,9],[2363,21,2042,9,"_ref5"],[2363,26,2042,9],[2363,27,2042,9,"apply"],[2363,32,2042,9],[2363,39,2042,9,"arguments"],[2363,48,2042,9],[2364,12,2042,9],[2365,10,2042,9],[2365,14,2042,10],[2365,15,2042,11],[2365,17,2042,13,"filter"],[2365,23,2042,19],[2365,24,2042,20,"persistence"],[2365,35,2042,31],[2365,39,2042,35,"persistence"],[2365,50,2042,46],[2365,51,2042,47],[2366,10,2043,8],[2367,10,2044,8],[2367,14,2044,12,"selectedPersistence"],[2367,33,2044,31],[2367,36,2044,34,"availablePersistences"],[2367,57,2044,55],[2367,58,2044,56],[2367,59,2044,57],[2367,60,2044,58],[2367,64,2045,12,"_getInstance"],[2367,76,2045,24],[2367,77,2045,25,"inMemoryPersistence"],[2367,96,2045,44],[2367,97,2045,45],[2368,10,2046,8],[2368,14,2046,14,"key"],[2368,17,2046,17],[2368,20,2046,20,"_persistenceKeyName"],[2368,39,2046,39],[2368,40,2046,40,"userKey"],[2368,47,2046,47],[2368,49,2046,49,"auth"],[2368,53,2046,53],[2368,54,2046,54,"config"],[2368,60,2046,60],[2368,61,2046,61,"apiKey"],[2368,67,2046,67],[2368,69,2046,69,"auth"],[2368,73,2046,73],[2368,74,2046,74,"name"],[2368,78,2046,78],[2368,79,2046,79],[2369,10,2047,8],[2370,10,2048,8],[2371,10,2049,8],[2371,14,2049,12,"userToMigrate"],[2371,27,2049,25],[2371,30,2049,28],[2371,34,2049,32],[2372,10,2050,8],[2373,10,2051,8],[2374,10,2052,8],[2375,10,2053,8],[2375,15,2053,13],[2375,19,2053,19,"persistence"],[2375,30,2053,30],[2375,34,2053,34,"persistenceHierarchy"],[2375,54,2053,54],[2375,56,2053,56],[2376,12,2054,12],[2376,16,2054,16],[2377,14,2055,16],[2377,18,2055,22,"blob"],[2377,22,2055,26],[2377,31,2055,35,"persistence"],[2377,42,2055,46],[2377,43,2055,47,"_get"],[2377,47,2055,51],[2377,48,2055,52,"key"],[2377,51,2055,55],[2377,52,2055,56],[2378,14,2056,16],[2378,18,2056,20,"blob"],[2378,22,2056,24],[2378,24,2056,26],[2379,16,2057,20],[2379,20,2057,24,"user"],[2379,24,2057,28],[2380,16,2058,20],[2380,20,2058,24],[2380,27,2058,31,"blob"],[2380,31,2058,35],[2380,36,2058,40],[2380,44,2058,48],[2380,46,2058,50],[2381,18,2059,24],[2381,22,2059,30,"response"],[2381,30,2059,38],[2381,39,2059,47,"getAccountInfo"],[2381,53,2059,61],[2381,54,2059,62,"auth"],[2381,58,2059,66],[2381,60,2059,68],[2382,20,2060,28,"idToken"],[2382,27,2060,35],[2382,29,2060,37,"blob"],[2383,18,2061,24],[2383,19,2061,25],[2383,20,2061,26],[2383,21,2061,27,"catch"],[2383,26,2061,32],[2383,27,2061,33],[2383,33,2061,39,"undefined"],[2383,42,2061,48],[2383,43,2061,49],[2384,18,2062,24],[2384,22,2062,28],[2384,23,2062,29,"response"],[2384,31,2062,37],[2384,33,2062,39],[2385,20,2063,28],[2386,18,2064,24],[2387,18,2065,24,"user"],[2387,22,2065,28],[2387,31,2065,37,"UserImpl"],[2387,39,2065,45],[2387,40,2065,46,"_fromGetAccountInfoResponse"],[2387,67,2065,73],[2387,68,2065,74,"auth"],[2387,72,2065,78],[2387,74,2065,80,"response"],[2387,82,2065,88],[2387,84,2065,90,"blob"],[2387,88,2065,94],[2387,89,2065,95],[2388,16,2066,20],[2388,17,2066,21],[2388,23,2067,25],[2389,18,2068,24,"user"],[2389,22,2068,28],[2389,25,2068,31,"UserImpl"],[2389,33,2068,39],[2389,34,2068,40,"_fromJSON"],[2389,43,2068,49],[2389,44,2068,50,"auth"],[2389,48,2068,54],[2389,50,2068,56,"blob"],[2389,54,2068,60],[2389,55,2068,61],[2389,56,2068,62],[2389,57,2068,63],[2390,16,2069,20],[2391,16,2070,20],[2391,20,2070,24,"persistence"],[2391,31,2070,35],[2391,36,2070,40,"selectedPersistence"],[2391,55,2070,59],[2391,57,2070,61],[2392,18,2071,24,"userToMigrate"],[2392,31,2071,37],[2392,34,2071,40,"user"],[2392,38,2071,44],[2393,16,2072,20],[2394,16,2073,20,"selectedPersistence"],[2394,35,2073,39],[2394,38,2073,42,"persistence"],[2394,49,2073,53],[2395,16,2074,20],[2396,14,2075,16],[2397,12,2076,12],[2397,13,2076,13],[2397,14,2077,12],[2397,20,2077,18],[2397,21,2077,20],[2398,10,2078,8],[2399,10,2079,8],[2400,10,2080,8],[2401,10,2081,8],[2401,14,2081,14,"migrationHierarchy"],[2401,32,2081,32],[2401,35,2081,35,"availablePersistences"],[2401,56,2081,56],[2401,57,2081,57,"filter"],[2401,63,2081,63],[2401,64,2081,64,"p"],[2401,65,2081,65],[2401,69,2081,69,"p"],[2401,70,2081,70],[2401,71,2081,71,"_shouldAllowMigration"],[2401,92,2081,92],[2401,93,2081,93],[2402,10,2082,8],[2403,10,2083,8],[2403,14,2083,12],[2403,15,2083,13,"selectedPersistence"],[2403,34,2083,32],[2403,35,2083,33,"_shouldAllowMigration"],[2403,56,2083,54],[2403,60,2084,12],[2403,61,2084,13,"migrationHierarchy"],[2403,79,2084,31],[2403,80,2084,32,"length"],[2403,86,2084,38],[2403,88,2084,40],[2404,12,2085,12],[2404,19,2085,19],[2404,23,2085,23,"PersistenceUserManager"],[2404,45,2085,45],[2404,46,2085,46,"selectedPersistence"],[2404,65,2085,65],[2404,67,2085,67,"auth"],[2404,71,2085,71],[2404,73,2085,73,"userKey"],[2404,80,2085,80],[2404,81,2085,81],[2405,10,2086,8],[2406,10,2087,8,"selectedPersistence"],[2406,29,2087,27],[2406,32,2087,30,"migrationHierarchy"],[2406,50,2087,48],[2406,51,2087,49],[2406,52,2087,50],[2406,53,2087,51],[2407,10,2088,8],[2407,14,2088,12,"userToMigrate"],[2407,27,2088,25],[2407,29,2088,27],[2408,12,2089,12],[2409,12,2090,12],[2410,12,2091,12],[2410,18,2091,18,"selectedPersistence"],[2410,37,2091,37],[2410,38,2091,38,"_set"],[2410,42,2091,42],[2410,43,2091,43,"key"],[2410,46,2091,46],[2410,48,2091,48,"userToMigrate"],[2410,61,2091,61],[2410,62,2091,62,"toJSON"],[2410,68,2091,68],[2410,69,2091,69],[2410,70,2091,70],[2410,71,2091,71],[2411,10,2092,8],[2412,10,2093,8],[2413,10,2094,8],[2414,10,2095,8],[2414,16,2095,14,"Promise"],[2414,23,2095,21],[2414,24,2095,22,"all"],[2414,27,2095,25],[2414,28,2095,26,"persistenceHierarchy"],[2414,48,2095,46],[2414,49,2095,47,"map"],[2414,52,2095,50],[2415,12,2095,50],[2415,16,2095,50,"_ref6"],[2415,21,2095,50],[2415,24,2095,50,"_asyncToGenerator"],[2415,41,2095,50],[2415,42,2095,51],[2415,53,2095,58,"persistence"],[2415,64,2095,69],[2415,66,2095,74],[2416,14,2096,12],[2416,18,2096,16,"persistence"],[2416,29,2096,27],[2416,34,2096,32,"selectedPersistence"],[2416,53,2096,51],[2416,55,2096,53],[2417,16,2097,16],[2417,20,2097,20],[2418,18,2098,20],[2418,24,2098,26,"persistence"],[2418,35,2098,37],[2418,36,2098,38,"_remove"],[2418,43,2098,45],[2418,44,2098,46,"key"],[2418,47,2098,49],[2418,48,2098,50],[2419,16,2099,16],[2419,17,2099,17],[2419,18,2100,16],[2419,24,2100,22],[2419,25,2100,24],[2420,14,2101,12],[2421,12,2102,8],[2421,13,2102,9],[2422,12,2102,9],[2422,29,2102,9,"_x50"],[2422,33,2102,9],[2423,14,2102,9],[2423,21,2102,9,"_ref6"],[2423,26,2102,9],[2423,27,2102,9,"apply"],[2423,32,2102,9],[2423,39,2102,9,"arguments"],[2423,48,2102,9],[2424,12,2102,9],[2425,10,2102,9],[2425,14,2102,10],[2425,15,2102,11],[2426,10,2103,8],[2426,17,2103,15],[2426,21,2103,19,"PersistenceUserManager"],[2426,43,2103,41],[2426,44,2103,42,"selectedPersistence"],[2426,63,2103,61],[2426,65,2103,63,"auth"],[2426,69,2103,67],[2426,71,2103,69,"userKey"],[2426,78,2103,76],[2426,79,2103,77],[2427,8,2104,4],[2427,9,2104,5],[2428,8,2104,5],[2428,17,2032,17,"create"],[2428,23,2032,23,"create"],[2428,24,2032,23,"_x47"],[2428,28,2032,23],[2428,30,2032,23,"_x48"],[2428,34,2032,23],[2429,10,2032,23],[2429,17,2032,23,"_create"],[2429,24,2032,23],[2429,25,2032,23,"apply"],[2429,30,2032,23],[2429,37,2032,23,"arguments"],[2429,46,2032,23],[2430,8,2032,23],[2431,8,2032,23],[2431,15,2032,17,"create"],[2431,21,2032,23],[2432,6,2032,23],[2433,4,2032,23],[2434,2,2032,23],[2435,2,2107,0],[2436,0,2108,0],[2437,0,2109,0],[2438,0,2110,0],[2439,0,2111,0],[2440,0,2112,0],[2441,0,2113,0],[2442,0,2114,0],[2443,0,2115,0],[2444,0,2116,0],[2445,0,2117,0],[2446,0,2118,0],[2447,0,2119,0],[2448,0,2120,0],[2449,0,2121,0],[2450,0,2122,0],[2451,2,2123,0],[2452,0,2124,0],[2453,0,2125,0],[2454,2,2126,0],[2454,11,2126,9,"_getBrowserName"],[2454,26,2126,24,"_getBrowserName"],[2454,27,2126,25,"userAgent"],[2454,36,2126,34],[2454,38,2126,36],[2455,4,2127,4],[2455,8,2127,10,"ua"],[2455,10,2127,12],[2455,13,2127,15,"userAgent"],[2455,22,2127,24],[2455,23,2127,25,"toLowerCase"],[2455,34,2127,36],[2455,35,2127,37],[2455,36,2127,38],[2456,4,2128,4],[2456,8,2128,8,"ua"],[2456,10,2128,10],[2456,11,2128,11,"includes"],[2456,19,2128,19],[2456,20,2128,20],[2456,28,2128,28],[2456,29,2128,29],[2456,33,2128,33,"ua"],[2456,35,2128,35],[2456,36,2128,36,"includes"],[2456,44,2128,44],[2456,45,2128,45],[2456,51,2128,51],[2456,52,2128,52],[2456,56,2128,56,"ua"],[2456,58,2128,58],[2456,59,2128,59,"includes"],[2456,67,2128,67],[2456,68,2128,68],[2456,76,2128,76],[2456,77,2128,77],[2456,79,2128,79],[2457,6,2129,8],[2457,13,2129,15],[2457,20,2129,22],[2457,21,2129,23],[2458,4,2130,4],[2458,5,2130,5],[2458,11,2131,9],[2458,15,2131,13,"_isIEMobile"],[2458,26,2131,24],[2458,27,2131,25,"ua"],[2458,29,2131,27],[2458,30,2131,28],[2458,32,2131,30],[2459,6,2132,8],[2460,6,2133,8],[2460,13,2133,15],[2460,23,2133,25],[2460,24,2133,26],[2461,4,2134,4],[2461,5,2134,5],[2461,11,2135,9],[2461,15,2135,13,"ua"],[2461,17,2135,15],[2461,18,2135,16,"includes"],[2461,26,2135,24],[2461,27,2135,25],[2461,33,2135,31],[2461,34,2135,32],[2461,38,2135,36,"ua"],[2461,40,2135,38],[2461,41,2135,39,"includes"],[2461,49,2135,47],[2461,50,2135,48],[2461,60,2135,58],[2461,61,2135,59],[2461,63,2135,61],[2462,6,2136,8],[2462,13,2136,15],[2462,17,2136,19],[2462,18,2136,20],[2463,4,2137,4],[2463,5,2137,5],[2463,11,2138,9],[2463,15,2138,13,"ua"],[2463,17,2138,15],[2463,18,2138,16,"includes"],[2463,26,2138,24],[2463,27,2138,25],[2463,34,2138,32],[2463,35,2138,33],[2463,37,2138,35],[2464,6,2139,8],[2464,13,2139,15],[2464,19,2139,21],[2464,20,2139,22],[2465,4,2140,4],[2465,5,2140,5],[2465,11,2141,9],[2465,15,2141,13,"_isFirefox"],[2465,25,2141,23],[2465,26,2141,24,"ua"],[2465,28,2141,26],[2465,29,2141,27],[2465,31,2141,29],[2466,6,2142,8],[2466,13,2142,15],[2466,22,2142,24],[2466,23,2142,25],[2467,4,2143,4],[2467,5,2143,5],[2467,11,2144,9],[2467,15,2144,13,"ua"],[2467,17,2144,15],[2467,18,2144,16,"includes"],[2467,26,2144,24],[2467,27,2144,25],[2467,34,2144,32],[2467,35,2144,33],[2467,37,2144,35],[2468,6,2145,8],[2468,13,2145,15],[2468,19,2145,21],[2468,20,2145,22],[2469,4,2146,4],[2469,5,2146,5],[2469,11,2147,9],[2469,15,2147,13,"_isBlackBerry"],[2469,28,2147,26],[2469,29,2147,27,"ua"],[2469,31,2147,29],[2469,32,2147,30],[2469,34,2147,32],[2470,6,2148,8],[2471,6,2149,8],[2471,13,2149,15],[2471,25,2149,27],[2471,26,2149,28],[2472,4,2150,4],[2472,5,2150,5],[2472,11,2151,9],[2472,15,2151,13,"_isWebOS"],[2472,23,2151,21],[2472,24,2151,22,"ua"],[2472,26,2151,24],[2472,27,2151,25],[2472,29,2151,27],[2473,6,2152,8],[2474,6,2153,8],[2474,13,2153,15],[2474,20,2153,22],[2474,21,2153,23],[2475,4,2154,4],[2475,5,2154,5],[2475,11,2155,9],[2475,15,2155,13,"_isSafari"],[2475,24,2155,22],[2475,25,2155,23,"ua"],[2475,27,2155,25],[2475,28,2155,26],[2475,30,2155,28],[2476,6,2156,8],[2476,13,2156,15],[2476,21,2156,23],[2476,22,2156,24],[2477,4,2157,4],[2477,5,2157,5],[2477,11,2158,9],[2477,15,2158,13],[2477,16,2158,14,"ua"],[2477,18,2158,16],[2477,19,2158,17,"includes"],[2477,27,2158,25],[2477,28,2158,26],[2477,37,2158,35],[2477,38,2158,36],[2477,42,2158,40,"_isChromeIOS"],[2477,54,2158,52],[2477,55,2158,53,"ua"],[2477,57,2158,55],[2477,58,2158,56],[2477,63,2159,8],[2477,64,2159,9,"ua"],[2477,66,2159,11],[2477,67,2159,12,"includes"],[2477,75,2159,20],[2477,76,2159,21],[2477,83,2159,28],[2477,84,2159,29],[2477,86,2159,31],[2478,6,2160,8],[2478,13,2160,15],[2478,21,2160,23],[2478,22,2160,24],[2479,4,2161,4],[2479,5,2161,5],[2479,11,2162,9],[2479,15,2162,13,"_isAndroid"],[2479,25,2162,23],[2479,26,2162,24,"ua"],[2479,28,2162,26],[2479,29,2162,27],[2479,31,2162,29],[2480,6,2163,8],[2481,6,2164,8],[2481,13,2164,15],[2481,22,2164,24],[2481,23,2164,25],[2482,4,2165,4],[2482,5,2165,5],[2482,11,2166,9],[2483,6,2167,8],[2484,6,2168,8],[2484,10,2168,14,"re"],[2484,12,2168,16],[2484,15,2168,19],[2484,48,2168,52],[2485,6,2169,8],[2485,10,2169,14,"matches"],[2485,17,2169,21],[2485,20,2169,24,"userAgent"],[2485,29,2169,33],[2485,30,2169,34,"match"],[2485,35,2169,39],[2485,36,2169,40,"re"],[2485,38,2169,42],[2485,39,2169,43],[2486,6,2170,8],[2486,10,2170,12,"matches"],[2486,17,2170,19],[2486,19,2170,21,"length"],[2486,25,2170,27],[2486,30,2170,32],[2486,31,2170,33],[2486,33,2170,35],[2487,8,2171,12],[2487,15,2171,19,"matches"],[2487,22,2171,26],[2487,23,2171,27],[2487,24,2171,28],[2487,25,2171,29],[2488,6,2172,8],[2489,4,2173,4],[2490,4,2174,4],[2490,11,2174,11],[2490,18,2174,18],[2490,19,2174,19],[2491,2,2175,0],[2492,2,2176,0],[2492,11,2176,9,"_isFirefox"],[2492,21,2176,19,"_isFirefox"],[2492,22,2176,19],[2492,24,2176,39],[2493,4,2176,39],[2493,8,2176,20,"ua"],[2493,10,2176,22],[2493,13,2176,22,"arguments"],[2493,22,2176,22],[2493,23,2176,22,"length"],[2493,29,2176,22],[2493,37,2176,22,"arguments"],[2493,46,2176,22],[2493,54,2176,22,"undefined"],[2493,63,2176,22],[2493,66,2176,22,"arguments"],[2493,75,2176,22],[2493,81,2176,25,"util"],[2493,85,2176,29],[2493,86,2176,30,"getUA"],[2493,91,2176,35],[2493,92,2176,36],[2493,93,2176,37],[2494,4,2177,4],[2494,11,2177,11],[2494,23,2177,23],[2494,24,2177,24,"test"],[2494,28,2177,28],[2494,29,2177,29,"ua"],[2494,31,2177,31],[2494,32,2177,32],[2495,2,2178,0],[2496,2,2179,0],[2496,11,2179,9,"_isSafari"],[2496,20,2179,18,"_isSafari"],[2496,21,2179,18],[2496,23,2179,45],[2497,4,2179,45],[2497,8,2179,19,"userAgent"],[2497,17,2179,28],[2497,20,2179,28,"arguments"],[2497,29,2179,28],[2497,30,2179,28,"length"],[2497,36,2179,28],[2497,44,2179,28,"arguments"],[2497,53,2179,28],[2497,61,2179,28,"undefined"],[2497,70,2179,28],[2497,73,2179,28,"arguments"],[2497,82,2179,28],[2497,88,2179,31,"util"],[2497,92,2179,35],[2497,93,2179,36,"getUA"],[2497,98,2179,41],[2497,99,2179,42],[2497,100,2179,43],[2498,4,2180,4],[2498,8,2180,10,"ua"],[2498,10,2180,12],[2498,13,2180,15,"userAgent"],[2498,22,2180,24],[2498,23,2180,25,"toLowerCase"],[2498,34,2180,36],[2498,35,2180,37],[2498,36,2180,38],[2499,4,2181,4],[2499,11,2181,12,"ua"],[2499,13,2181,14],[2499,14,2181,15,"includes"],[2499,22,2181,23],[2499,23,2181,24],[2499,32,2181,33],[2499,33,2181,34],[2499,37,2182,8],[2499,38,2182,9,"ua"],[2499,40,2182,11],[2499,41,2182,12,"includes"],[2499,49,2182,20],[2499,50,2182,21],[2499,59,2182,30],[2499,60,2182,31],[2499,64,2183,8],[2499,65,2183,9,"ua"],[2499,67,2183,11],[2499,68,2183,12,"includes"],[2499,76,2183,20],[2499,77,2183,21],[2499,85,2183,29],[2499,86,2183,30],[2499,90,2184,8],[2499,91,2184,9,"ua"],[2499,93,2184,11],[2499,94,2184,12,"includes"],[2499,102,2184,20],[2499,103,2184,21],[2499,112,2184,30],[2499,113,2184,31],[2500,2,2185,0],[2501,2,2186,0],[2501,11,2186,9,"_isChromeIOS"],[2501,23,2186,21,"_isChromeIOS"],[2501,24,2186,21],[2501,26,2186,41],[2502,4,2186,41],[2502,8,2186,22,"ua"],[2502,10,2186,24],[2502,13,2186,24,"arguments"],[2502,22,2186,24],[2502,23,2186,24,"length"],[2502,29,2186,24],[2502,37,2186,24,"arguments"],[2502,46,2186,24],[2502,54,2186,24,"undefined"],[2502,63,2186,24],[2502,66,2186,24,"arguments"],[2502,75,2186,24],[2502,81,2186,27,"util"],[2502,85,2186,31],[2502,86,2186,32,"getUA"],[2502,91,2186,37],[2502,92,2186,38],[2502,93,2186,39],[2503,4,2187,4],[2503,11,2187,11],[2503,21,2187,21],[2503,22,2187,22,"test"],[2503,26,2187,26],[2503,27,2187,27,"ua"],[2503,29,2187,29],[2503,30,2187,30],[2504,2,2188,0],[2505,2,2189,0],[2505,11,2189,9,"_isIEMobile"],[2505,22,2189,20,"_isIEMobile"],[2505,23,2189,20],[2505,25,2189,40],[2506,4,2189,40],[2506,8,2189,21,"ua"],[2506,10,2189,23],[2506,13,2189,23,"arguments"],[2506,22,2189,23],[2506,23,2189,23,"length"],[2506,29,2189,23],[2506,37,2189,23,"arguments"],[2506,46,2189,23],[2506,54,2189,23,"undefined"],[2506,63,2189,23],[2506,66,2189,23,"arguments"],[2506,75,2189,23],[2506,81,2189,26,"util"],[2506,85,2189,30],[2506,86,2189,31,"getUA"],[2506,91,2189,36],[2506,92,2189,37],[2506,93,2189,38],[2507,4,2190,4],[2507,11,2190,11],[2507,22,2190,22],[2507,23,2190,23,"test"],[2507,27,2190,27],[2507,28,2190,28,"ua"],[2507,30,2190,30],[2507,31,2190,31],[2508,2,2191,0],[2509,2,2192,0],[2509,11,2192,9,"_isAndroid"],[2509,21,2192,19,"_isAndroid"],[2509,22,2192,19],[2509,24,2192,39],[2510,4,2192,39],[2510,8,2192,20,"ua"],[2510,10,2192,22],[2510,13,2192,22,"arguments"],[2510,22,2192,22],[2510,23,2192,22,"length"],[2510,29,2192,22],[2510,37,2192,22,"arguments"],[2510,46,2192,22],[2510,54,2192,22,"undefined"],[2510,63,2192,22],[2510,66,2192,22,"arguments"],[2510,75,2192,22],[2510,81,2192,25,"util"],[2510,85,2192,29],[2510,86,2192,30,"getUA"],[2510,91,2192,35],[2510,92,2192,36],[2510,93,2192,37],[2511,4,2193,4],[2511,11,2193,11],[2511,21,2193,21],[2511,22,2193,22,"test"],[2511,26,2193,26],[2511,27,2193,27,"ua"],[2511,29,2193,29],[2511,30,2193,30],[2512,2,2194,0],[2513,2,2195,0],[2513,11,2195,9,"_isBlackBerry"],[2513,24,2195,22,"_isBlackBerry"],[2513,25,2195,22],[2513,27,2195,42],[2514,4,2195,42],[2514,8,2195,23,"ua"],[2514,10,2195,25],[2514,13,2195,25,"arguments"],[2514,22,2195,25],[2514,23,2195,25,"length"],[2514,29,2195,25],[2514,37,2195,25,"arguments"],[2514,46,2195,25],[2514,54,2195,25,"undefined"],[2514,63,2195,25],[2514,66,2195,25,"arguments"],[2514,75,2195,25],[2514,81,2195,28,"util"],[2514,85,2195,32],[2514,86,2195,33,"getUA"],[2514,91,2195,38],[2514,92,2195,39],[2514,93,2195,40],[2515,4,2196,4],[2515,11,2196,11],[2515,24,2196,24],[2515,25,2196,25,"test"],[2515,29,2196,29],[2515,30,2196,30,"ua"],[2515,32,2196,32],[2515,33,2196,33],[2516,2,2197,0],[2517,2,2198,0],[2517,11,2198,9,"_isWebOS"],[2517,19,2198,17,"_isWebOS"],[2517,20,2198,17],[2517,22,2198,37],[2518,4,2198,37],[2518,8,2198,18,"ua"],[2518,10,2198,20],[2518,13,2198,20,"arguments"],[2518,22,2198,20],[2518,23,2198,20,"length"],[2518,29,2198,20],[2518,37,2198,20,"arguments"],[2518,46,2198,20],[2518,54,2198,20,"undefined"],[2518,63,2198,20],[2518,66,2198,20,"arguments"],[2518,75,2198,20],[2518,81,2198,23,"util"],[2518,85,2198,27],[2518,86,2198,28,"getUA"],[2518,91,2198,33],[2518,92,2198,34],[2518,93,2198,35],[2519,4,2199,4],[2519,11,2199,11],[2519,19,2199,19],[2519,20,2199,20,"test"],[2519,24,2199,24],[2519,25,2199,25,"ua"],[2519,27,2199,27],[2519,28,2199,28],[2520,2,2200,0],[2521,2,2201,0],[2521,11,2201,9,"_isIOS"],[2521,17,2201,15,"_isIOS"],[2521,18,2201,15],[2521,20,2201,35],[2522,4,2201,35],[2522,8,2201,16,"ua"],[2522,10,2201,18],[2522,13,2201,18,"arguments"],[2522,22,2201,18],[2522,23,2201,18,"length"],[2522,29,2201,18],[2522,37,2201,18,"arguments"],[2522,46,2201,18],[2522,54,2201,18,"undefined"],[2522,63,2201,18],[2522,66,2201,18,"arguments"],[2522,75,2201,18],[2522,81,2201,21,"util"],[2522,85,2201,25],[2522,86,2201,26,"getUA"],[2522,91,2201,31],[2522,92,2201,32],[2522,93,2201,33],[2523,4,2202,4],[2523,11,2202,12],[2523,30,2202,31],[2523,31,2202,32,"test"],[2523,35,2202,36],[2523,36,2202,37,"ua"],[2523,38,2202,39],[2523,39,2202,40],[2523,43,2203,9],[2523,55,2203,21],[2523,56,2203,22,"test"],[2523,60,2203,26],[2523,61,2203,27,"ua"],[2523,63,2203,29],[2523,64,2203,30],[2523,68,2203,34],[2523,77,2203,43],[2523,78,2203,44,"test"],[2523,82,2203,48],[2523,83,2203,49,"ua"],[2523,85,2203,51],[2523,86,2203,53],[2524,2,2204,0],[2525,2,2205,0],[2525,11,2205,9,"_isIOS7Or8"],[2525,21,2205,19,"_isIOS7Or8"],[2525,22,2205,19],[2525,24,2205,39],[2526,4,2205,39],[2526,8,2205,20,"ua"],[2526,10,2205,22],[2526,13,2205,22,"arguments"],[2526,22,2205,22],[2526,23,2205,22,"length"],[2526,29,2205,22],[2526,37,2205,22,"arguments"],[2526,46,2205,22],[2526,54,2205,22,"undefined"],[2526,63,2205,22],[2526,66,2205,22,"arguments"],[2526,75,2205,22],[2526,81,2205,25,"util"],[2526,85,2205,29],[2526,86,2205,30,"getUA"],[2526,91,2205,35],[2526,92,2205,36],[2526,93,2205,37],[2527,4,2206,4],[2527,11,2206,12],[2527,41,2206,42],[2527,42,2206,43,"test"],[2527,46,2206,47],[2527,47,2206,48,"ua"],[2527,49,2206,50],[2527,50,2206,51],[2527,54,2207,8],[2527,84,2207,38],[2527,85,2207,39,"test"],[2527,89,2207,43],[2527,90,2207,44,"ua"],[2527,92,2207,46],[2527,93,2207,47],[2528,2,2208,0],[2529,2,2209,0],[2529,11,2209,9,"_isIOSStandalone"],[2529,27,2209,25,"_isIOSStandalone"],[2529,28,2209,25],[2529,30,2209,45],[2530,4,2209,45],[2530,8,2209,26,"ua"],[2530,10,2209,28],[2530,13,2209,28,"arguments"],[2530,22,2209,28],[2530,23,2209,28,"length"],[2530,29,2209,28],[2530,37,2209,28,"arguments"],[2530,46,2209,28],[2530,54,2209,28,"undefined"],[2530,63,2209,28],[2530,66,2209,28,"arguments"],[2530,75,2209,28],[2530,81,2209,31,"util"],[2530,85,2209,35],[2530,86,2209,36,"getUA"],[2530,91,2209,41],[2530,92,2209,42],[2530,93,2209,43],[2531,4,2210,4],[2531,11,2210,11,"_isIOS"],[2531,17,2210,17],[2531,18,2210,18,"ua"],[2531,20,2210,20],[2531,21,2210,21],[2531,25,2210,25],[2531,26,2210,26],[2531,27,2210,27,"window"],[2531,33,2210,33],[2531,34,2210,34,"navigator"],[2531,43,2210,43],[2531,45,2210,45,"standalone"],[2531,55,2210,55],[2532,2,2211,0],[2533,2,2212,0],[2533,11,2212,9,"_isIE10"],[2533,18,2212,16,"_isIE10"],[2533,19,2212,16],[2533,21,2212,19],[2534,4,2213,4],[2534,11,2213,11,"util"],[2534,15,2213,15],[2534,16,2213,16,"isIE"],[2534,20,2213,20],[2534,21,2213,21],[2534,22,2213,22],[2534,26,2213,26,"document"],[2534,34,2213,34],[2534,35,2213,35,"documentMode"],[2534,47,2213,47],[2534,52,2213,52],[2534,54,2213,54],[2535,2,2214,0],[2536,2,2215,0],[2536,11,2215,9,"_isMobileBrowser"],[2536,27,2215,25,"_isMobileBrowser"],[2536,28,2215,25],[2536,30,2215,45],[2537,4,2215,45],[2537,8,2215,26,"ua"],[2537,10,2215,28],[2537,13,2215,28,"arguments"],[2537,22,2215,28],[2537,23,2215,28,"length"],[2537,29,2215,28],[2537,37,2215,28,"arguments"],[2537,46,2215,28],[2537,54,2215,28,"undefined"],[2537,63,2215,28],[2537,66,2215,28,"arguments"],[2537,75,2215,28],[2537,81,2215,31,"util"],[2537,85,2215,35],[2537,86,2215,36,"getUA"],[2537,91,2215,41],[2537,92,2215,42],[2537,93,2215,43],[2538,4,2216,4],[2539,4,2217,4],[2539,11,2217,12,"_isIOS"],[2539,17,2217,18],[2539,18,2217,19,"ua"],[2539,20,2217,21],[2539,21,2217,22],[2539,25,2218,8,"_isAndroid"],[2539,35,2218,18],[2539,36,2218,19,"ua"],[2539,38,2218,21],[2539,39,2218,22],[2539,43,2219,8,"_isWebOS"],[2539,51,2219,16],[2539,52,2219,17,"ua"],[2539,54,2219,19],[2539,55,2219,20],[2539,59,2220,8,"_isBlackBerry"],[2539,72,2220,21],[2539,73,2220,22,"ua"],[2539,75,2220,24],[2539,76,2220,25],[2539,80,2221,8],[2539,96,2221,24],[2539,97,2221,25,"test"],[2539,101,2221,29],[2539,102,2221,30,"ua"],[2539,104,2221,32],[2539,105,2221,33],[2539,109,2222,8,"_isIEMobile"],[2539,120,2222,19],[2539,121,2222,20,"ua"],[2539,123,2222,22],[2539,124,2222,23],[2540,2,2223,0],[2542,2,2225,0],[2543,0,2226,0],[2544,0,2227,0],[2545,0,2228,0],[2546,0,2229,0],[2547,0,2230,0],[2548,0,2231,0],[2549,0,2232,0],[2550,0,2233,0],[2551,0,2234,0],[2552,0,2235,0],[2553,0,2236,0],[2554,0,2237,0],[2555,0,2238,0],[2556,0,2239,0],[2557,0,2240,0],[2558,2,2241,0],[2559,0,2242,0],[2560,0,2243,0],[2561,2,2244,0],[2561,11,2244,9,"_getClientVersion"],[2561,28,2244,26,"_getClientVersion"],[2561,29,2244,27,"clientPlatform"],[2561,43,2244,41],[2561,45,2244,60],[2562,4,2244,60],[2562,8,2244,43,"frameworks"],[2562,18,2244,53],[2562,21,2244,53,"arguments"],[2562,30,2244,53],[2562,31,2244,53,"length"],[2562,37,2244,53],[2562,45,2244,53,"arguments"],[2562,54,2244,53],[2562,62,2244,53,"undefined"],[2562,71,2244,53],[2562,74,2244,53,"arguments"],[2562,83,2244,53],[2562,89,2244,56],[2562,91,2244,58],[2563,4,2245,4],[2563,8,2245,8,"reportedPlatform"],[2563,24,2245,24],[2564,4,2246,4],[2564,12,2246,12,"clientPlatform"],[2564,26,2246,26],[2565,6,2247,8],[2565,11,2247,13],[2565,20,2247,22],[2565,21,2247,23],[2566,8,2248,12],[2567,8,2249,12,"reportedPlatform"],[2567,24,2249,28],[2567,27,2249,31,"_getBrowserName"],[2567,42,2249,46],[2567,43,2249,47,"util"],[2567,47,2249,51],[2567,48,2249,52,"getUA"],[2567,53,2249,57],[2567,54,2249,58],[2567,55,2249,59],[2567,56,2249,60],[2568,8,2250,12],[2569,6,2251,8],[2569,11,2251,13],[2569,19,2251,21],[2569,20,2251,22],[2570,8,2252,12],[2571,8,2253,12],[2572,8,2254,12],[2573,8,2255,12,"reportedPlatform"],[2573,24,2255,28],[2573,27,2255,31],[2573,30,2255,34,"_getBrowserName"],[2573,45,2255,49],[2573,46,2255,50,"util"],[2573,50,2255,54],[2573,51,2255,55,"getUA"],[2573,56,2255,60],[2573,57,2255,61],[2573,58,2255,62],[2573,59,2255,63],[2573,63,2255,67,"clientPlatform"],[2573,77,2255,81],[2573,79,2255,83],[2574,8,2256,12],[2575,6,2257,8],[2576,8,2258,12,"reportedPlatform"],[2576,24,2258,28],[2576,27,2258,31,"clientPlatform"],[2576,41,2258,45],[2577,4,2259,4],[2578,4,2260,4],[2578,8,2260,10,"reportedFrameworks"],[2578,26,2260,28],[2578,29,2260,31,"frameworks"],[2578,39,2260,41],[2578,40,2260,42,"length"],[2578,46,2260,48],[2578,49,2261,10,"frameworks"],[2578,59,2261,20],[2578,60,2261,21,"join"],[2578,64,2261,25],[2578,65,2261,26],[2578,68,2261,29],[2578,69,2261,30],[2578,72,2262,10],[2578,90,2262,28],[2578,91,2262,29],[2578,92,2262,30],[2579,4,2263,4],[2579,11,2263,11],[2579,14,2263,14,"reportedPlatform"],[2579,30,2263,30],[2579,34,2263,34],[2579,42,2263,42],[2579,43,2263,43],[2579,78,2263,78,"app"],[2579,81,2263,81],[2579,82,2263,82,"SDK_VERSION"],[2579,93,2263,93],[2579,97,2263,97,"reportedFrameworks"],[2579,115,2263,115],[2579,117,2263,117],[2580,2,2264,0],[2582,2,2266,0],[2583,0,2267,0],[2584,0,2268,0],[2585,0,2269,0],[2586,0,2270,0],[2587,0,2271,0],[2588,0,2272,0],[2589,0,2273,0],[2590,0,2274,0],[2591,0,2275,0],[2592,0,2276,0],[2593,0,2277,0],[2594,0,2278,0],[2595,0,2279,0],[2596,0,2280,0],[2597,0,2281,0],[2598,2,2266,0],[2598,6,2282,6,"AuthMiddlewareQueue"],[2598,25,2282,25],[2599,4,2283,4],[2599,13,2283,4,"AuthMiddlewareQueue"],[2599,33,2283,16,"auth"],[2599,37,2283,20],[2599,39,2283,22],[2600,6,2283,22,"_classCallCheck"],[2600,21,2283,22],[2600,28,2283,22,"AuthMiddlewareQueue"],[2600,47,2283,22],[2601,6,2284,8],[2601,10,2284,12],[2601,11,2284,13,"auth"],[2601,15,2284,17],[2601,18,2284,20,"auth"],[2601,22,2284,24],[2602,6,2285,8],[2602,10,2285,12],[2602,11,2285,13,"queue"],[2602,16,2285,18],[2602,19,2285,21],[2602,21,2285,23],[2603,4,2286,4],[2604,4,2286,5],[2604,11,2286,5,"_createClass"],[2604,23,2286,5],[2604,24,2286,5,"AuthMiddlewareQueue"],[2604,43,2286,5],[2605,6,2286,5,"key"],[2605,9,2286,5],[2606,6,2286,5,"value"],[2606,11,2286,5],[2606,13,2287,4],[2606,22,2287,4,"pushCallback"],[2606,34,2287,16,"pushCallback"],[2606,35,2287,17,"callback"],[2606,43,2287,25],[2606,45,2287,27,"onAbort"],[2606,52,2287,34],[2606,54,2287,36],[2607,8,2288,8],[2608,8,2289,8],[2609,8,2290,8],[2609,12,2290,14,"wrappedCallback"],[2609,27,2290,29],[2609,30,2290,33,"user"],[2609,34,2290,37],[2609,38,2290,42],[2609,42,2290,46,"Promise"],[2609,49,2290,53],[2609,50,2290,54],[2609,51,2290,55,"resolve"],[2609,58,2290,62],[2609,60,2290,64,"reject"],[2609,66,2290,70],[2609,71,2290,75],[2610,10,2291,12],[2610,14,2291,16],[2611,12,2292,16],[2611,16,2292,22,"result"],[2611,22,2292,28],[2611,25,2292,31,"callback"],[2611,33,2292,39],[2611,34,2292,40,"user"],[2611,38,2292,44],[2611,39,2292,45],[2612,12,2293,16],[2613,12,2294,16],[2614,12,2295,16,"resolve"],[2614,19,2295,23],[2614,20,2295,24,"result"],[2614,26,2295,30],[2614,27,2295,31],[2615,10,2296,12],[2615,11,2296,13],[2615,12,2297,12],[2615,19,2297,19,"e"],[2615,20,2297,20],[2615,22,2297,22],[2616,12,2298,16],[2617,12,2299,16,"reject"],[2617,18,2299,22],[2617,19,2299,23,"e"],[2617,20,2299,24],[2617,21,2299,25],[2618,10,2300,12],[2619,8,2301,8],[2619,9,2301,9],[2619,10,2301,10],[2620,8,2302,8],[2621,8,2303,8,"wrappedCallback"],[2621,23,2303,23],[2621,24,2303,24,"onAbort"],[2621,31,2303,31],[2621,34,2303,34,"onAbort"],[2621,41,2303,41],[2622,8,2304,8],[2622,12,2304,12],[2622,13,2304,13,"queue"],[2622,18,2304,18],[2622,19,2304,19,"push"],[2622,23,2304,23],[2622,24,2304,24,"wrappedCallback"],[2622,39,2304,39],[2622,40,2304,40],[2623,8,2305,8],[2623,12,2305,14,"index"],[2623,17,2305,19],[2623,20,2305,22],[2623,24,2305,26],[2623,25,2305,27,"queue"],[2623,30,2305,32],[2623,31,2305,33,"length"],[2623,37,2305,39],[2623,40,2305,42],[2623,41,2305,43],[2624,8,2306,8],[2624,15,2306,15],[2624,21,2306,21],[2625,10,2307,12],[2626,10,2308,12],[2627,10,2309,12],[2627,14,2309,16],[2627,15,2309,17,"queue"],[2627,20,2309,22],[2627,21,2309,23,"index"],[2627,26,2309,28],[2627,27,2309,29],[2627,30,2309,32],[2627,36,2309,38,"Promise"],[2627,43,2309,45],[2627,44,2309,46,"resolve"],[2627,51,2309,53],[2627,52,2309,54],[2627,53,2309,55],[2628,8,2310,8],[2628,9,2310,9],[2629,6,2311,4],[2630,4,2311,5],[2631,6,2311,5,"key"],[2631,9,2311,5],[2632,6,2311,5,"value"],[2632,11,2311,5],[2633,8,2311,5],[2633,12,2311,5,"_runMiddleware"],[2633,26,2311,5],[2633,29,2311,5,"_asyncToGenerator"],[2633,46,2311,5],[2633,47,2312,4],[2633,58,2312,24,"nextUser"],[2633,66,2312,32],[2633,68,2312,34],[2634,10,2313,8],[2634,14,2313,12],[2634,18,2313,16],[2634,19,2313,17,"auth"],[2634,23,2313,21],[2634,24,2313,22,"currentUser"],[2634,35,2313,33],[2634,40,2313,38,"nextUser"],[2634,48,2313,46],[2634,50,2313,48],[2635,12,2314,12],[2636,10,2315,8],[2637,10,2316,8],[2638,10,2317,8],[2639,10,2318,8],[2639,14,2318,14,"onAbortStack"],[2639,26,2318,26],[2639,29,2318,29],[2639,31,2318,31],[2640,10,2319,8],[2640,14,2319,12],[2641,12,2320,12],[2641,17,2320,17],[2641,21,2320,23,"beforeStateCallback"],[2641,40,2320,42],[2641,44,2320,46],[2641,48,2320,50],[2641,49,2320,51,"queue"],[2641,54,2320,56],[2641,56,2320,58],[2642,14,2321,16],[2642,20,2321,22,"beforeStateCallback"],[2642,39,2321,41],[2642,40,2321,42,"nextUser"],[2642,48,2321,50],[2642,49,2321,51],[2643,14,2322,16],[2644,14,2323,16],[2644,18,2323,20,"beforeStateCallback"],[2644,37,2323,39],[2644,38,2323,40,"onAbort"],[2644,45,2323,47],[2644,47,2323,49],[2645,16,2324,20,"onAbortStack"],[2645,28,2324,32],[2645,29,2324,33,"push"],[2645,33,2324,37],[2645,34,2324,38,"beforeStateCallback"],[2645,53,2324,57],[2645,54,2324,58,"onAbort"],[2645,61,2324,65],[2645,62,2324,66],[2646,14,2325,16],[2647,12,2326,12],[2648,10,2327,8],[2648,11,2327,9],[2648,12,2328,8],[2648,19,2328,15,"e"],[2648,20,2328,16],[2648,22,2328,18],[2649,12,2329,12],[2650,12,2330,12],[2651,12,2331,12,"onAbortStack"],[2651,24,2331,24],[2651,25,2331,25,"reverse"],[2651,32,2331,32],[2651,33,2331,33],[2651,34,2331,34],[2652,12,2332,12],[2652,17,2332,17],[2652,21,2332,23,"onAbort"],[2652,28,2332,30],[2652,32,2332,34,"onAbortStack"],[2652,44,2332,46],[2652,46,2332,48],[2653,14,2333,16],[2653,18,2333,20],[2654,16,2334,20,"onAbort"],[2654,23,2334,27],[2654,24,2334,28],[2654,25,2334,29],[2655,14,2335,16],[2655,15,2335,17],[2655,16,2336,16],[2655,23,2336,23,"_"],[2655,24,2336,24],[2655,26,2336,26],[2656,16,2337,20],[2657,14,2337,20],[2658,12,2339,12],[2659,12,2340,12],[2659,18,2340,18],[2659,22,2340,22],[2659,23,2340,23,"auth"],[2659,27,2340,27],[2659,28,2340,28,"_errorFactory"],[2659,41,2340,41],[2659,42,2340,42,"create"],[2659,48,2340,48],[2659,49,2340,49],[2659,64,2340,64],[2659,65,2340,65],[2659,100,2340,100],[2660,14,2341,16,"originalMessage"],[2660,29,2341,31],[2660,31,2341,33,"e"],[2660,32,2341,34],[2660,34,2341,36,"message"],[2661,12,2342,12],[2661,13,2342,13],[2661,14,2342,14],[2662,10,2343,8],[2663,8,2344,4],[2663,9,2344,5],[2664,8,2344,5],[2664,17,2312,10,"runMiddleware"],[2664,30,2312,23,"runMiddleware"],[2664,31,2312,23,"_x51"],[2664,35,2312,23],[2665,10,2312,23],[2665,17,2312,23,"_runMiddleware"],[2665,31,2312,23],[2665,32,2312,23,"apply"],[2665,37,2312,23],[2665,44,2312,23,"arguments"],[2665,53,2312,23],[2666,8,2312,23],[2667,8,2312,23],[2667,15,2312,10,"runMiddleware"],[2667,28,2312,23],[2668,6,2312,23],[2669,4,2312,23],[2670,2,2312,23],[2671,2,2347,0],[2672,0,2348,0],[2673,0,2349,0],[2674,0,2350,0],[2675,0,2351,0],[2676,0,2352,0],[2677,0,2353,0],[2678,0,2354,0],[2679,0,2355,0],[2680,0,2356,0],[2681,0,2357,0],[2682,0,2358,0],[2683,0,2359,0],[2684,0,2360,0],[2685,0,2361,0],[2686,0,2362,0],[2687,2,2363,0],[2688,0,2364,0],[2689,0,2365,0],[2690,0,2366,0],[2691,0,2367,0],[2692,0,2368,0],[2693,0,2369,0],[2694,2,2363,0],[2694,11,2370,15,"_getPasswordPolicy"],[2694,29,2370,33,"_getPasswordPolicy"],[2694,30,2370,33,"_x52"],[2694,34,2370,33],[2695,4,2370,33],[2695,11,2370,33,"_getPasswordPolicy2"],[2695,30,2370,33],[2695,31,2370,33,"apply"],[2695,36,2370,33],[2695,43,2370,33,"arguments"],[2695,52,2370,33],[2696,2,2370,33],[2697,2,2374,0],[2698,0,2375,0],[2699,0,2376,0],[2700,0,2377,0],[2701,0,2378,0],[2702,0,2379,0],[2703,0,2380,0],[2704,0,2381,0],[2705,0,2382,0],[2706,0,2383,0],[2707,0,2384,0],[2708,0,2385,0],[2709,0,2386,0],[2710,0,2387,0],[2711,0,2388,0],[2712,0,2389,0],[2713,2,2390,0],[2714,2,2390,0],[2714,11,2390,0,"_getPasswordPolicy2"],[2714,31,2390,0],[2715,4,2390,0,"_getPasswordPolicy2"],[2715,23,2390,0],[2715,26,2390,0,"_asyncToGenerator"],[2715,43,2390,0],[2715,44,2370,0],[2715,55,2370,34,"auth"],[2715,59,2370,38],[2715,61,2370,54],[2716,6,2370,54],[2716,10,2370,40,"request"],[2716,17,2370,47],[2716,20,2370,47,"arguments"],[2716,29,2370,47],[2716,30,2370,47,"length"],[2716,36,2370,47],[2716,44,2370,47,"arguments"],[2716,53,2370,47],[2716,61,2370,47,"undefined"],[2716,70,2370,47],[2716,73,2370,47,"arguments"],[2716,82,2370,47],[2716,88,2370,50],[2716,89,2370,51],[2716,90,2370,52],[2717,6,2371,4],[2717,13,2371,11,"_performApiRequest"],[2717,31,2371,29],[2717,32,2371,30,"auth"],[2717,36,2371,34],[2717,38,2371,36],[2717,43,2371,41],[2717,44,2371,42],[2717,66,2371,64],[2717,86,2371,84],[2717,87,2371,85],[2717,123,2371,121,"_addTidIfNecessary"],[2717,141,2371,139],[2717,142,2371,140,"auth"],[2717,146,2371,144],[2717,148,2371,146,"request"],[2717,155,2371,153],[2717,156,2371,154],[2717,157,2371,155],[2718,4,2372,0],[2718,5,2372,1],[2719,4,2372,1],[2719,11,2372,1,"_getPasswordPolicy2"],[2719,30,2372,1],[2719,31,2372,1,"apply"],[2719,36,2372,1],[2719,43,2372,1,"arguments"],[2719,52,2372,1],[2720,2,2372,1],[2721,2,2391,0],[2721,6,2391,6,"MINIMUM_MIN_PASSWORD_LENGTH"],[2721,33,2391,33],[2721,36,2391,36],[2721,37,2391,37],[2722,2,2392,0],[2723,0,2393,0],[2724,0,2394,0],[2725,0,2395,0],[2726,0,2396,0],[2727,2,2392,0],[2727,6,2397,6,"PasswordPolicyImpl"],[2727,24,2397,24],[2728,4,2398,4],[2728,13,2398,4,"PasswordPolicyImpl"],[2728,32,2398,16,"response"],[2728,40,2398,24],[2728,42,2398,26],[2729,6,2398,26,"_classCallCheck"],[2729,21,2398,26],[2729,28,2398,26,"PasswordPolicyImpl"],[2729,46,2398,26],[2730,6,2399,8],[2731,6,2400,8],[2731,10,2400,14,"responseOptions"],[2731,25,2400,29],[2731,28,2400,32,"response"],[2731,36,2400,40],[2731,37,2400,41,"customStrengthOptions"],[2731,58,2400,62],[2732,6,2401,8],[2732,10,2401,12],[2732,11,2401,13,"customStrengthOptions"],[2732,32,2401,34],[2732,35,2401,37],[2732,36,2401,38],[2732,37,2401,39],[2733,6,2402,8],[2734,6,2403,8],[2734,10,2403,12],[2734,11,2403,13,"customStrengthOptions"],[2734,32,2403,34],[2734,33,2403,35,"minPasswordLength"],[2734,50,2403,52],[2734,53,2404,12,"responseOptions"],[2734,68,2404,27],[2734,69,2404,28,"minPasswordLength"],[2734,86,2404,45],[2734,90,2404,49,"MINIMUM_MIN_PASSWORD_LENGTH"],[2734,117,2404,76],[2735,6,2405,8],[2735,10,2405,12,"responseOptions"],[2735,25,2405,27],[2735,26,2405,28,"maxPasswordLength"],[2735,43,2405,45],[2735,45,2405,47],[2736,8,2406,12],[2736,12,2406,16],[2736,13,2406,17,"customStrengthOptions"],[2736,34,2406,38],[2736,35,2406,39,"maxPasswordLength"],[2736,52,2406,56],[2736,55,2407,16,"responseOptions"],[2736,70,2407,31],[2736,71,2407,32,"maxPasswordLength"],[2736,88,2407,49],[2737,6,2408,8],[2738,6,2409,8],[2738,10,2409,12,"responseOptions"],[2738,25,2409,27],[2738,26,2409,28,"containsLowercaseCharacter"],[2738,52,2409,54],[2738,57,2409,59,"undefined"],[2738,66,2409,68],[2738,68,2409,70],[2739,8,2410,12],[2739,12,2410,16],[2739,13,2410,17,"customStrengthOptions"],[2739,34,2410,38],[2739,35,2410,39,"containsLowercaseLetter"],[2739,58,2410,62],[2739,61,2411,16,"responseOptions"],[2739,76,2411,31],[2739,77,2411,32,"containsLowercaseCharacter"],[2739,103,2411,58],[2740,6,2412,8],[2741,6,2413,8],[2741,10,2413,12,"responseOptions"],[2741,25,2413,27],[2741,26,2413,28,"containsUppercaseCharacter"],[2741,52,2413,54],[2741,57,2413,59,"undefined"],[2741,66,2413,68],[2741,68,2413,70],[2742,8,2414,12],[2742,12,2414,16],[2742,13,2414,17,"customStrengthOptions"],[2742,34,2414,38],[2742,35,2414,39,"containsUppercaseLetter"],[2742,58,2414,62],[2742,61,2415,16,"responseOptions"],[2742,76,2415,31],[2742,77,2415,32,"containsUppercaseCharacter"],[2742,103,2415,58],[2743,6,2416,8],[2744,6,2417,8],[2744,10,2417,12,"responseOptions"],[2744,25,2417,27],[2744,26,2417,28,"containsNumericCharacter"],[2744,50,2417,52],[2744,55,2417,57,"undefined"],[2744,64,2417,66],[2744,66,2417,68],[2745,8,2418,12],[2745,12,2418,16],[2745,13,2418,17,"customStrengthOptions"],[2745,34,2418,38],[2745,35,2418,39,"containsNumericCharacter"],[2745,59,2418,63],[2745,62,2419,16,"responseOptions"],[2745,77,2419,31],[2745,78,2419,32,"containsNumericCharacter"],[2745,102,2419,56],[2746,6,2420,8],[2747,6,2421,8],[2747,10,2421,12,"responseOptions"],[2747,25,2421,27],[2747,26,2421,28,"containsNonAlphanumericCharacter"],[2747,58,2421,60],[2747,63,2421,65,"undefined"],[2747,72,2421,74],[2747,74,2421,76],[2748,8,2422,12],[2748,12,2422,16],[2748,13,2422,17,"customStrengthOptions"],[2748,34,2422,38],[2748,35,2422,39,"containsNonAlphanumericCharacter"],[2748,67,2422,71],[2748,70,2423,16,"responseOptions"],[2748,85,2423,31],[2748,86,2423,32,"containsNonAlphanumericCharacter"],[2748,118,2423,64],[2749,6,2424,8],[2750,6,2425,8],[2750,10,2425,12],[2750,11,2425,13,"enforcementState"],[2750,27,2425,29],[2750,30,2425,32,"response"],[2750,38,2425,40],[2750,39,2425,41,"enforcementState"],[2750,55,2425,57],[2751,6,2426,8],[2751,10,2426,12],[2751,14,2426,16],[2751,15,2426,17,"enforcementState"],[2751,31,2426,33],[2751,36,2426,38],[2751,67,2426,69],[2751,69,2426,71],[2752,8,2427,12],[2752,12,2427,16],[2752,13,2427,17,"enforcementState"],[2752,29,2427,33],[2752,32,2427,36],[2752,37,2427,41],[2753,6,2428,8],[2754,6,2429,8],[2755,6,2430,8],[2755,10,2430,12],[2755,11,2430,13,"allowedNonAlphanumericCharacters"],[2755,43,2430,45],[2755,46,2431,12,"response"],[2755,54,2431,20],[2755,55,2431,21,"allowedNonAlphanumericCharacters"],[2755,87,2431,53],[2755,89,2431,55,"join"],[2755,93,2431,59],[2755,94,2431,60],[2755,96,2431,62],[2755,97,2431,63],[2755,101,2431,67],[2755,103,2431,69],[2756,6,2432,8],[2756,10,2432,12],[2756,11,2432,13,"forceUpgradeOnSignin"],[2756,31,2432,33],[2756,34,2432,36,"response"],[2756,42,2432,44],[2756,43,2432,45,"forceUpgradeOnSignin"],[2756,63,2432,65],[2756,67,2432,69],[2756,72,2432,74],[2757,6,2433,8],[2757,10,2433,12],[2757,11,2433,13,"schemaVersion"],[2757,24,2433,26],[2757,27,2433,29,"response"],[2757,35,2433,37],[2757,36,2433,38,"schemaVersion"],[2757,49,2433,51],[2758,4,2434,4],[2759,4,2434,5],[2759,11,2434,5,"_createClass"],[2759,23,2434,5],[2759,24,2434,5,"PasswordPolicyImpl"],[2759,42,2434,5],[2760,6,2434,5,"key"],[2760,9,2434,5],[2761,6,2434,5,"value"],[2761,11,2434,5],[2761,13,2435,4],[2761,22,2435,4,"validatePassword"],[2761,38,2435,20,"validatePassword"],[2761,39,2435,21,"password"],[2761,47,2435,29],[2761,49,2435,31],[2762,8,2436,8],[2762,12,2436,14,"status"],[2762,18,2436,20],[2762,21,2436,23],[2763,10,2437,12,"isValid"],[2763,17,2437,19],[2763,19,2437,21],[2763,23,2437,25],[2764,10,2438,12,"passwordPolicy"],[2764,24,2438,26],[2764,26,2438,28],[2765,8,2439,8],[2765,9,2439,9],[2766,8,2440,8],[2767,8,2441,8],[2767,12,2441,12],[2767,13,2441,13,"validatePasswordLengthOptions"],[2767,42,2441,42],[2767,43,2441,43,"password"],[2767,51,2441,51],[2767,53,2441,53,"status"],[2767,59,2441,59],[2767,60,2441,60],[2768,8,2442,8],[2768,12,2442,12],[2768,13,2442,13,"validatePasswordCharacterOptions"],[2768,45,2442,45],[2768,46,2442,46,"password"],[2768,54,2442,54],[2768,56,2442,56,"status"],[2768,62,2442,62],[2768,63,2442,63],[2769,8,2443,8],[2770,8,2444,8,"status"],[2770,14,2444,14],[2770,15,2444,15,"isValid"],[2770,22,2444,22],[2770,27,2444,27,"status"],[2770,33,2444,33],[2770,34,2444,34,"isValid"],[2770,41,2444,41],[2770,44,2444,44,"status"],[2770,50,2444,50],[2770,51,2444,51,"meetsMinPasswordLength"],[2770,73,2444,73],[2770,77,2444,77],[2770,81,2444,81],[2770,82,2444,82],[2771,8,2445,8,"status"],[2771,14,2445,14],[2771,15,2445,15,"isValid"],[2771,22,2445,22],[2771,27,2445,27,"status"],[2771,33,2445,33],[2771,34,2445,34,"isValid"],[2771,41,2445,41],[2771,44,2445,44,"status"],[2771,50,2445,50],[2771,51,2445,51,"meetsMaxPasswordLength"],[2771,73,2445,73],[2771,77,2445,77],[2771,81,2445,81],[2771,82,2445,82],[2772,8,2446,8,"status"],[2772,14,2446,14],[2772,15,2446,15,"isValid"],[2772,22,2446,22],[2772,27,2446,27,"status"],[2772,33,2446,33],[2772,34,2446,34,"isValid"],[2772,41,2446,41],[2772,44,2446,44,"status"],[2772,50,2446,50],[2772,51,2446,51,"containsLowercaseLetter"],[2772,74,2446,74],[2772,78,2446,78],[2772,82,2446,82],[2772,83,2446,83],[2773,8,2447,8,"status"],[2773,14,2447,14],[2773,15,2447,15,"isValid"],[2773,22,2447,22],[2773,27,2447,27,"status"],[2773,33,2447,33],[2773,34,2447,34,"isValid"],[2773,41,2447,41],[2773,44,2447,44,"status"],[2773,50,2447,50],[2773,51,2447,51,"containsUppercaseLetter"],[2773,74,2447,74],[2773,78,2447,78],[2773,82,2447,82],[2773,83,2447,83],[2774,8,2448,8,"status"],[2774,14,2448,14],[2774,15,2448,15,"isValid"],[2774,22,2448,22],[2774,27,2448,27,"status"],[2774,33,2448,33],[2774,34,2448,34,"isValid"],[2774,41,2448,41],[2774,44,2448,44,"status"],[2774,50,2448,50],[2774,51,2448,51,"containsNumericCharacter"],[2774,75,2448,75],[2774,79,2448,79],[2774,83,2448,83],[2774,84,2448,84],[2775,8,2449,8,"status"],[2775,14,2449,14],[2775,15,2449,15,"isValid"],[2775,22,2449,22],[2775,27,2449,27,"status"],[2775,33,2449,33],[2775,34,2449,34,"isValid"],[2775,41,2449,41],[2775,44,2449,44,"status"],[2775,50,2449,50],[2775,51,2449,51,"containsNonAlphanumericCharacter"],[2775,83,2449,83],[2775,87,2449,87],[2775,91,2449,91],[2775,92,2449,92],[2776,8,2450,8],[2776,15,2450,15,"status"],[2776,21,2450,21],[2777,6,2451,4],[2778,6,2452,4],[2779,0,2453,0],[2780,0,2454,0],[2781,0,2455,0],[2782,0,2456,0],[2783,0,2457,0],[2784,4,2452,4],[2785,6,2452,4,"key"],[2785,9,2452,4],[2786,6,2452,4,"value"],[2786,11,2452,4],[2786,13,2458,4],[2786,22,2458,4,"validatePasswordLengthOptions"],[2786,51,2458,33,"validatePasswordLengthOptions"],[2786,52,2458,34,"password"],[2786,60,2458,42],[2786,62,2458,44,"status"],[2786,68,2458,50],[2786,70,2458,52],[2787,8,2459,8],[2787,12,2459,14,"minPasswordLength"],[2787,29,2459,31],[2787,32,2459,34],[2787,36,2459,38],[2787,37,2459,39,"customStrengthOptions"],[2787,58,2459,60],[2787,59,2459,61,"minPasswordLength"],[2787,76,2459,78],[2788,8,2460,8],[2788,12,2460,14,"maxPasswordLength"],[2788,29,2460,31],[2788,32,2460,34],[2788,36,2460,38],[2788,37,2460,39,"customStrengthOptions"],[2788,58,2460,60],[2788,59,2460,61,"maxPasswordLength"],[2788,76,2460,78],[2789,8,2461,8],[2789,12,2461,12,"minPasswordLength"],[2789,29,2461,29],[2789,31,2461,31],[2790,10,2462,12,"status"],[2790,16,2462,18],[2790,17,2462,19,"meetsMinPasswordLength"],[2790,39,2462,41],[2790,42,2462,44,"password"],[2790,50,2462,52],[2790,51,2462,53,"length"],[2790,57,2462,59],[2790,61,2462,63,"minPasswordLength"],[2790,78,2462,80],[2791,8,2463,8],[2792,8,2464,8],[2792,12,2464,12,"maxPasswordLength"],[2792,29,2464,29],[2792,31,2464,31],[2793,10,2465,12,"status"],[2793,16,2465,18],[2793,17,2465,19,"meetsMaxPasswordLength"],[2793,39,2465,41],[2793,42,2465,44,"password"],[2793,50,2465,52],[2793,51,2465,53,"length"],[2793,57,2465,59],[2793,61,2465,63,"maxPasswordLength"],[2793,78,2465,80],[2794,8,2466,8],[2795,6,2467,4],[2796,6,2468,4],[2797,0,2469,0],[2798,0,2470,0],[2799,0,2471,0],[2800,0,2472,0],[2801,0,2473,0],[2802,4,2468,4],[2803,6,2468,4,"key"],[2803,9,2468,4],[2804,6,2468,4,"value"],[2804,11,2468,4],[2804,13,2474,4],[2804,22,2474,4,"validatePasswordCharacterOptions"],[2804,54,2474,36,"validatePasswordCharacterOptions"],[2804,55,2474,37,"password"],[2804,63,2474,45],[2804,65,2474,47,"status"],[2804,71,2474,53],[2804,73,2474,55],[2805,8,2475,8],[2806,8,2476,8],[2806,12,2476,12],[2806,13,2476,13,"updatePasswordCharacterOptionsStatuses"],[2806,51,2476,51],[2806,52,2476,52,"status"],[2806,58,2476,58],[2806,60,2477,8],[2806,93,2477,42],[2806,98,2477,47],[2806,100,2478,8],[2806,133,2478,42],[2806,138,2478,47],[2806,140,2479,8],[2806,171,2479,40],[2806,176,2479,45],[2806,178,2480,8],[2806,217,2480,48],[2806,222,2480,53],[2806,223,2480,54],[2807,8,2481,8],[2807,12,2481,12,"passwordChar"],[2807,24,2481,24],[2808,8,2482,8],[2808,13,2482,13],[2808,17,2482,17,"i"],[2808,18,2482,18],[2808,21,2482,21],[2808,22,2482,22],[2808,24,2482,24,"i"],[2808,25,2482,25],[2808,28,2482,28,"password"],[2808,36,2482,36],[2808,37,2482,37,"length"],[2808,43,2482,43],[2808,45,2482,45,"i"],[2808,46,2482,46],[2808,48,2482,48],[2808,50,2482,50],[2809,10,2483,12,"passwordChar"],[2809,22,2483,24],[2809,25,2483,27,"password"],[2809,33,2483,35],[2809,34,2483,36,"charAt"],[2809,40,2483,42],[2809,41,2483,43,"i"],[2809,42,2483,44],[2809,43,2483,45],[2810,10,2484,12],[2810,14,2484,16],[2810,15,2484,17,"updatePasswordCharacterOptionsStatuses"],[2810,53,2484,55],[2810,54,2484,56,"status"],[2810,60,2484,62],[2810,62,2485,12],[2810,95,2485,46,"passwordChar"],[2810,107,2485,58],[2810,111,2485,62],[2810,114,2485,65],[2810,118,2486,16,"passwordChar"],[2810,130,2486,28],[2810,134,2486,32],[2810,137,2486,35],[2810,139,2487,12],[2810,172,2487,46,"passwordChar"],[2810,184,2487,58],[2810,188,2487,62],[2810,191,2487,65],[2810,195,2488,16,"passwordChar"],[2810,207,2488,28],[2810,211,2488,32],[2810,214,2488,35],[2810,216,2489,12],[2810,247,2489,44,"passwordChar"],[2810,259,2489,56],[2810,263,2489,60],[2810,266,2489,63],[2810,270,2490,16,"passwordChar"],[2810,282,2490,28],[2810,286,2490,32],[2810,289,2490,35],[2810,291,2491,12],[2810,330,2491,52],[2810,334,2491,56],[2810,335,2491,57,"allowedNonAlphanumericCharacters"],[2810,367,2491,89],[2810,368,2491,90,"includes"],[2810,376,2491,98],[2810,377,2491,99,"passwordChar"],[2810,389,2491,111],[2810,390,2491,112],[2810,391,2491,113],[2811,8,2492,8],[2812,6,2493,4],[2813,6,2494,4],[2814,0,2495,0],[2815,0,2496,0],[2816,0,2497,0],[2817,0,2498,0],[2818,0,2499,0],[2819,0,2500,0],[2820,0,2501,0],[2821,0,2502,0],[2822,0,2503,0],[2823,0,2504,0],[2824,4,2494,4],[2825,6,2494,4,"key"],[2825,9,2494,4],[2826,6,2494,4,"value"],[2826,11,2494,4],[2826,13,2505,4],[2826,22,2505,4,"updatePasswordCharacterOptionsStatuses"],[2826,60,2505,42,"updatePasswordCharacterOptionsStatuses"],[2826,61,2505,43,"status"],[2826,67,2505,49],[2826,69,2505,51,"containsLowercaseCharacter"],[2826,95,2505,77],[2826,97,2505,79,"containsUppercaseCharacter"],[2826,123,2505,105],[2826,125,2505,107,"containsNumericCharacter"],[2826,149,2505,131],[2826,151,2505,133,"containsNonAlphanumericCharacter"],[2826,183,2505,165],[2826,185,2505,167],[2827,8,2506,8],[2827,12,2506,12],[2827,16,2506,16],[2827,17,2506,17,"customStrengthOptions"],[2827,38,2506,38],[2827,39,2506,39,"containsLowercaseLetter"],[2827,62,2506,62],[2827,64,2506,64],[2828,10,2507,12,"status"],[2828,16,2507,18],[2828,17,2507,19,"containsLowercaseLetter"],[2828,40,2507,42],[2828,45,2507,47,"status"],[2828,51,2507,53],[2828,52,2507,54,"containsLowercaseLetter"],[2828,75,2507,77],[2828,78,2507,80,"containsLowercaseCharacter"],[2828,104,2507,106],[2828,105,2507,107],[2829,8,2508,8],[2830,8,2509,8],[2830,12,2509,12],[2830,16,2509,16],[2830,17,2509,17,"customStrengthOptions"],[2830,38,2509,38],[2830,39,2509,39,"containsUppercaseLetter"],[2830,62,2509,62],[2830,64,2509,64],[2831,10,2510,12,"status"],[2831,16,2510,18],[2831,17,2510,19,"containsUppercaseLetter"],[2831,40,2510,42],[2831,45,2510,47,"status"],[2831,51,2510,53],[2831,52,2510,54,"containsUppercaseLetter"],[2831,75,2510,77],[2831,78,2510,80,"containsUppercaseCharacter"],[2831,104,2510,106],[2831,105,2510,107],[2832,8,2511,8],[2833,8,2512,8],[2833,12,2512,12],[2833,16,2512,16],[2833,17,2512,17,"customStrengthOptions"],[2833,38,2512,38],[2833,39,2512,39,"containsNumericCharacter"],[2833,63,2512,63],[2833,65,2512,65],[2834,10,2513,12,"status"],[2834,16,2513,18],[2834,17,2513,19,"containsNumericCharacter"],[2834,41,2513,43],[2834,46,2513,48,"status"],[2834,52,2513,54],[2834,53,2513,55,"containsNumericCharacter"],[2834,77,2513,79],[2834,80,2513,82,"containsNumericCharacter"],[2834,104,2513,106],[2834,105,2513,107],[2835,8,2514,8],[2836,8,2515,8],[2836,12,2515,12],[2836,16,2515,16],[2836,17,2515,17,"customStrengthOptions"],[2836,38,2515,38],[2836,39,2515,39,"containsNonAlphanumericCharacter"],[2836,71,2515,71],[2836,73,2515,73],[2837,10,2516,12,"status"],[2837,16,2516,18],[2837,17,2516,19,"containsNonAlphanumericCharacter"],[2837,49,2516,51],[2837,54,2516,56,"status"],[2837,60,2516,62],[2837,61,2516,63,"containsNonAlphanumericCharacter"],[2837,93,2516,95],[2837,96,2516,98,"containsNonAlphanumericCharacter"],[2837,128,2516,130],[2837,129,2516,131],[2838,8,2517,8],[2839,6,2518,4],[2840,4,2518,5],[2841,2,2518,5],[2842,2,2521,0],[2843,0,2522,0],[2844,0,2523,0],[2845,0,2524,0],[2846,0,2525,0],[2847,0,2526,0],[2848,0,2527,0],[2849,0,2528,0],[2850,0,2529,0],[2851,0,2530,0],[2852,0,2531,0],[2853,0,2532,0],[2854,0,2533,0],[2855,0,2534,0],[2856,0,2535,0],[2857,0,2536,0],[2858,2,2521,0],[2858,6,2537,6,"AuthImpl"],[2858,14,2537,14],[2859,4,2538,4],[2859,13,2538,4,"AuthImpl"],[2859,22,2538,16,"app"],[2859,25,2538,19],[2859,27,2538,21,"heartbeatServiceProvider"],[2859,51,2538,45],[2859,53,2538,47,"appCheckServiceProvider"],[2859,76,2538,70],[2859,78,2538,72,"config"],[2859,84,2538,78],[2859,86,2538,80],[2860,6,2538,80,"_classCallCheck"],[2860,21,2538,80],[2860,28,2538,80,"AuthImpl"],[2860,36,2538,80],[2861,6,2539,8],[2861,10,2539,12],[2861,11,2539,13,"app"],[2861,14,2539,16],[2861,17,2539,19,"app"],[2861,20,2539,22],[2862,6,2540,8],[2862,10,2540,12],[2862,11,2540,13,"heartbeatServiceProvider"],[2862,35,2540,37],[2862,38,2540,40,"heartbeatServiceProvider"],[2862,62,2540,64],[2863,6,2541,8],[2863,10,2541,12],[2863,11,2541,13,"appCheckServiceProvider"],[2863,34,2541,36],[2863,37,2541,39,"appCheckServiceProvider"],[2863,60,2541,62],[2864,6,2542,8],[2864,10,2542,12],[2864,11,2542,13,"config"],[2864,17,2542,19],[2864,20,2542,22,"config"],[2864,26,2542,28],[2865,6,2543,8],[2865,10,2543,12],[2865,11,2543,13,"currentUser"],[2865,22,2543,24],[2865,25,2543,27],[2865,29,2543,31],[2866,6,2544,8],[2866,10,2544,12],[2866,11,2544,13,"emulatorConfig"],[2866,25,2544,27],[2866,28,2544,30],[2866,32,2544,34],[2867,6,2545,8],[2867,10,2545,12],[2867,11,2545,13,"operations"],[2867,21,2545,23],[2867,24,2545,26,"Promise"],[2867,31,2545,33],[2867,32,2545,34,"resolve"],[2867,39,2545,41],[2867,40,2545,42],[2867,41,2545,43],[2868,6,2546,8],[2868,10,2546,12],[2868,11,2546,13,"authStateSubscription"],[2868,32,2546,34],[2868,35,2546,37],[2868,39,2546,41,"Subscription"],[2868,51,2546,53],[2868,52,2546,54],[2868,56,2546,58],[2868,57,2546,59],[2869,6,2547,8],[2869,10,2547,12],[2869,11,2547,13,"idTokenSubscription"],[2869,30,2547,32],[2869,33,2547,35],[2869,37,2547,39,"Subscription"],[2869,49,2547,51],[2869,50,2547,52],[2869,54,2547,56],[2869,55,2547,57],[2870,6,2548,8],[2870,10,2548,12],[2870,11,2548,13,"beforeStateQueue"],[2870,27,2548,29],[2870,30,2548,32],[2870,34,2548,36,"AuthMiddlewareQueue"],[2870,53,2548,55],[2870,54,2548,56],[2870,58,2548,60],[2870,59,2548,61],[2871,6,2549,8],[2871,10,2549,12],[2871,11,2549,13,"redirectUser"],[2871,23,2549,25],[2871,26,2549,28],[2871,30,2549,32],[2872,6,2550,8],[2872,10,2550,12],[2872,11,2550,13,"isProactiveRefreshEnabled"],[2872,36,2550,38],[2872,39,2550,41],[2872,44,2550,46],[2873,6,2551,8],[2873,10,2551,12],[2873,11,2551,13,"EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION"],[2873,50,2551,52],[2873,53,2551,55],[2873,54,2551,56],[2874,6,2552,8],[2875,6,2553,8],[2876,6,2554,8],[2876,10,2554,12],[2876,11,2554,13,"_canInitEmulator"],[2876,27,2554,29],[2876,30,2554,32],[2876,34,2554,36],[2877,6,2555,8],[2877,10,2555,12],[2877,11,2555,13,"_isInitialized"],[2877,25,2555,27],[2877,28,2555,30],[2877,33,2555,35],[2878,6,2556,8],[2878,10,2556,12],[2878,11,2556,13,"_deleted"],[2878,19,2556,21],[2878,22,2556,24],[2878,27,2556,29],[2879,6,2557,8],[2879,10,2557,12],[2879,11,2557,13,"_initializationPromise"],[2879,33,2557,35],[2879,36,2557,38],[2879,40,2557,42],[2880,6,2558,8],[2880,10,2558,12],[2880,11,2558,13,"_popupRedirectResolver"],[2880,33,2558,35],[2880,36,2558,38],[2880,40,2558,42],[2881,6,2559,8],[2881,10,2559,12],[2881,11,2559,13,"_errorFactory"],[2881,24,2559,26],[2881,27,2559,29,"_DEFAULT_AUTH_ERROR_FACTORY"],[2881,54,2559,56],[2882,6,2560,8],[2882,10,2560,12],[2882,11,2560,13,"_agentRecaptchaConfig"],[2882,32,2560,34],[2882,35,2560,37],[2882,39,2560,41],[2883,6,2561,8],[2883,10,2561,12],[2883,11,2561,13,"_tenantRecaptchaConfigs"],[2883,34,2561,36],[2883,37,2561,39],[2883,38,2561,40],[2883,39,2561,41],[2884,6,2562,8],[2884,10,2562,12],[2884,11,2562,13,"_projectPasswordPolicy"],[2884,33,2562,35],[2884,36,2562,38],[2884,40,2562,42],[2885,6,2563,8],[2885,10,2563,12],[2885,11,2563,13,"_tenantPasswordPolicies"],[2885,34,2563,36],[2885,37,2563,39],[2885,38,2563,40],[2885,39,2563,41],[2886,6,2564,8],[2886,10,2564,12],[2886,11,2564,13,"_resolvePersistenceManagerAvailable"],[2886,46,2564,48],[2886,49,2564,51,"undefined"],[2886,58,2564,60],[2887,6,2565,8],[2888,6,2566,8],[2889,6,2567,8],[2890,6,2568,8],[2890,10,2568,12],[2890,11,2568,13,"lastNotifiedUid"],[2890,26,2568,28],[2890,29,2568,31,"undefined"],[2890,38,2568,40],[2891,6,2569,8],[2891,10,2569,12],[2891,11,2569,13,"languageCode"],[2891,23,2569,25],[2891,26,2569,28],[2891,30,2569,32],[2892,6,2570,8],[2892,10,2570,12],[2892,11,2570,13,"tenantId"],[2892,19,2570,21],[2892,22,2570,24],[2892,26,2570,28],[2893,6,2571,8],[2893,10,2571,12],[2893,11,2571,13,"settings"],[2893,19,2571,21],[2893,22,2571,24],[2894,8,2571,26,"appVerificationDisabledForTesting"],[2894,41,2571,59],[2894,43,2571,61],[2895,6,2571,67],[2895,7,2571,68],[2896,6,2572,8],[2896,10,2572,12],[2896,11,2572,13,"frameworks"],[2896,21,2572,23],[2896,24,2572,26],[2896,26,2572,28],[2897,6,2573,8],[2897,10,2573,12],[2897,11,2573,13,"name"],[2897,15,2573,17],[2897,18,2573,20,"app"],[2897,21,2573,23],[2897,22,2573,24,"name"],[2897,26,2573,28],[2898,6,2574,8],[2898,10,2574,12],[2898,11,2574,13,"clientVersion"],[2898,24,2574,26],[2898,27,2574,29,"config"],[2898,33,2574,35],[2898,34,2574,36,"sdkClientVersion"],[2898,50,2574,52],[2899,6,2575,8],[2900,6,2576,8],[2901,6,2577,8],[2901,10,2577,12],[2901,11,2577,13,"_persistenceManagerAvailable"],[2901,39,2577,41],[2901,42,2577,44],[2901,46,2577,48,"Promise"],[2901,53,2577,55],[2901,54,2577,56,"resolve"],[2901,61,2577,63],[2901,65,2577,68],[2901,69,2577,72],[2901,70,2577,73,"_resolvePersistenceManagerAvailable"],[2901,105,2577,108],[2901,108,2577,111,"resolve"],[2901,115,2577,119],[2901,116,2577,120],[2902,4,2578,4],[2903,4,2578,5],[2903,11,2578,5,"_createClass"],[2903,23,2578,5],[2903,24,2578,5,"AuthImpl"],[2903,32,2578,5],[2904,6,2578,5,"key"],[2904,9,2578,5],[2905,6,2578,5,"value"],[2905,11,2578,5],[2905,13,2579,4],[2905,22,2579,4,"_initializeWithPersistence"],[2905,48,2579,30,"_initializeWithPersistence"],[2905,49,2579,31,"persistenceHierarchy"],[2905,69,2579,51],[2905,71,2579,53,"popupRedirectResolver"],[2905,92,2579,74],[2905,94,2579,76],[2906,8,2579,76],[2906,12,2579,76,"_this2"],[2906,18,2579,76],[2907,8,2580,8],[2907,12,2580,12,"popupRedirectResolver"],[2907,33,2580,33],[2907,35,2580,35],[2908,10,2581,12],[2908,14,2581,16],[2908,15,2581,17,"_popupRedirectResolver"],[2908,37,2581,39],[2908,40,2581,42,"_getInstance"],[2908,52,2581,54],[2908,53,2581,55,"popupRedirectResolver"],[2908,74,2581,76],[2908,75,2581,77],[2909,8,2582,8],[2910,8,2583,8],[2911,8,2584,8],[2912,8,2585,8],[2912,12,2585,12],[2912,13,2585,13,"_initializationPromise"],[2912,35,2585,35],[2912,38,2585,38],[2912,42,2585,42],[2912,43,2585,43,"queue"],[2912,48,2585,48],[2912,62,2585,48,"_asyncToGenerator"],[2912,79,2585,48],[2912,80,2585,49],[2912,93,2585,61],[2913,10,2586,12],[2913,14,2586,16,"_this2"],[2913,20,2586,20],[2913,21,2586,21,"_deleted"],[2913,29,2586,29],[2913,31,2586,31],[2914,12,2587,16],[2915,10,2588,12],[2916,10,2589,12,"_this2"],[2916,16,2589,16],[2916,17,2589,17,"persistenceManager"],[2916,35,2589,35],[2916,44,2589,44,"PersistenceUserManager"],[2916,66,2589,66],[2916,67,2589,67,"create"],[2916,73,2589,73],[2916,74,2589,74,"_this2"],[2916,80,2589,78],[2916,82,2589,80,"persistenceHierarchy"],[2916,102,2589,100],[2916,103,2589,101],[2917,10,2590,12,"_this2"],[2917,16,2590,16],[2917,17,2590,17,"_resolvePersistenceManagerAvailable"],[2917,52,2590,52],[2917,55,2590,55],[2917,56,2590,56],[2918,10,2591,12],[2918,14,2591,16,"_this2"],[2918,20,2591,20],[2918,21,2591,21,"_deleted"],[2918,29,2591,29],[2918,31,2591,31],[2919,12,2592,16],[2920,10,2593,12],[2921,10,2594,12],[2922,10,2595,12],[2923,10,2596,12],[2923,14,2596,16,"_this2"],[2923,20,2596,20],[2923,21,2596,21,"_popupRedirectResolver"],[2923,43,2596,43],[2923,45,2596,45,"_shouldInitProactively"],[2923,67,2596,67],[2923,69,2596,69],[2924,12,2597,16],[2925,12,2598,16],[2925,16,2598,20],[2926,14,2599,20],[2926,20,2599,26,"_this2"],[2926,26,2599,30],[2926,27,2599,31,"_popupRedirectResolver"],[2926,49,2599,53],[2926,50,2599,54,"_initialize"],[2926,61,2599,65],[2926,62,2599,66,"_this2"],[2926,68,2599,70],[2926,69,2599,71],[2927,12,2600,16],[2927,13,2600,17],[2927,14,2601,16],[2927,21,2601,23,"e"],[2927,22,2601,24],[2927,24,2601,26],[2928,14,2602,20],[2929,12,2602,20],[2930,10,2604,12],[2931,10,2605,12],[2931,16,2605,18,"_this2"],[2931,22,2605,22],[2931,23,2605,23,"initializeCurrentUser"],[2931,44,2605,44],[2931,45,2605,45,"popupRedirectResolver"],[2931,66,2605,66],[2931,67,2605,67],[2932,10,2606,12,"_this2"],[2932,16,2606,16],[2932,17,2606,17,"lastNotifiedUid"],[2932,32,2606,32],[2932,35,2606,35,"_this2"],[2932,41,2606,39],[2932,42,2606,40,"currentUser"],[2932,53,2606,51],[2932,55,2606,53,"uid"],[2932,58,2606,56],[2932,62,2606,60],[2932,66,2606,64],[2933,10,2607,12],[2933,14,2607,16,"_this2"],[2933,20,2607,20],[2933,21,2607,21,"_deleted"],[2933,29,2607,29],[2933,31,2607,31],[2934,12,2608,16],[2935,10,2609,12],[2936,10,2610,12,"_this2"],[2936,16,2610,16],[2936,17,2610,17,"_isInitialized"],[2936,31,2610,31],[2936,34,2610,34],[2936,38,2610,38],[2937,8,2611,8],[2937,9,2611,9],[2937,11,2611,10],[2938,8,2612,8],[2938,15,2612,15],[2938,19,2612,19],[2938,20,2612,20,"_initializationPromise"],[2938,42,2612,42],[2939,6,2613,4],[2940,6,2614,4],[2941,0,2615,0],[2942,0,2616,0],[2943,4,2614,4],[2944,6,2614,4,"key"],[2944,9,2614,4],[2945,6,2614,4,"value"],[2945,11,2614,4],[2946,8,2614,4],[2946,12,2614,4,"_onStorageEvent2"],[2946,28,2614,4],[2946,31,2614,4,"_asyncToGenerator"],[2946,48,2614,4],[2946,49,2617,4],[2946,62,2617,28],[2947,10,2618,8],[2947,14,2618,12],[2947,18,2618,16],[2947,19,2618,17,"_deleted"],[2947,27,2618,25],[2947,29,2618,27],[2948,12,2619,12],[2949,10,2620,8],[2950,10,2621,8],[2950,14,2621,14,"user"],[2950,18,2621,18],[2950,27,2621,27],[2950,31,2621,31],[2950,32,2621,32,"assertedPersistence"],[2950,51,2621,51],[2950,52,2621,52,"getCurrentUser"],[2950,66,2621,66],[2950,67,2621,67],[2950,68,2621,68],[2951,10,2622,8],[2951,14,2622,12],[2951,15,2622,13],[2951,19,2622,17],[2951,20,2622,18,"currentUser"],[2951,31,2622,29],[2951,35,2622,33],[2951,36,2622,34,"user"],[2951,40,2622,38],[2951,42,2622,40],[2952,12,2623,12],[2953,12,2624,12],[2954,10,2625,8],[2955,10,2626,8],[2956,10,2627,8],[2956,14,2627,12],[2956,18,2627,16],[2956,19,2627,17,"currentUser"],[2956,30,2627,28],[2956,34,2627,32,"user"],[2956,38,2627,36],[2956,42,2627,40],[2956,46,2627,44],[2956,47,2627,45,"currentUser"],[2956,58,2627,56],[2956,59,2627,57,"uid"],[2956,62,2627,60],[2956,67,2627,65,"user"],[2956,71,2627,69],[2956,72,2627,70,"uid"],[2956,75,2627,73],[2956,77,2627,75],[2957,12,2628,12],[2958,12,2629,12],[2958,16,2629,16],[2958,17,2629,17,"_currentUser"],[2958,29,2629,29],[2958,30,2629,30,"_assign"],[2958,37,2629,37],[2958,38,2629,38,"user"],[2958,42,2629,42],[2958,43,2629,43],[2959,12,2630,12],[2960,12,2631,12],[2961,12,2632,12],[2961,18,2632,18],[2961,22,2632,22],[2961,23,2632,23,"currentUser"],[2961,34,2632,34],[2961,35,2632,35,"getIdToken"],[2961,45,2632,45],[2961,46,2632,46],[2961,47,2632,47],[2962,12,2633,12],[2963,10,2634,8],[2964,10,2635,8],[2965,10,2636,8],[2966,10,2637,8],[2966,16,2637,14],[2966,20,2637,18],[2966,21,2637,19,"_updateCurrentUser"],[2966,39,2637,37],[2966,40,2637,38,"user"],[2966,44,2637,42],[2966,46,2637,44],[2966,76,2637,75],[2966,80,2637,79],[2966,81,2637,80],[2967,8,2638,4],[2967,9,2638,5],[2968,8,2638,5],[2968,17,2617,10,"_onStorageEvent"],[2968,32,2617,25,"_onStorageEvent"],[2968,33,2617,25],[2969,10,2617,25],[2969,17,2617,25,"_onStorageEvent2"],[2969,33,2617,25],[2969,34,2617,25,"apply"],[2969,39,2617,25],[2969,46,2617,25,"arguments"],[2969,55,2617,25],[2970,8,2617,25],[2971,8,2617,25],[2971,15,2617,10,"_onStorageEvent"],[2971,30,2617,25],[2972,6,2617,25],[2973,4,2617,25],[2974,6,2617,25,"key"],[2974,9,2617,25],[2975,6,2617,25,"value"],[2975,11,2617,25],[2976,8,2617,25],[2976,12,2617,25,"_initializeCurrentUserFromIdToken"],[2976,45,2617,25],[2976,48,2617,25,"_asyncToGenerator"],[2976,65,2617,25],[2976,66,2639,4],[2976,77,2639,43,"idToken"],[2976,84,2639,50],[2976,86,2639,52],[2977,10,2640,8],[2977,14,2640,12],[2978,12,2641,12],[2978,16,2641,18,"response"],[2978,24,2641,26],[2978,33,2641,35,"getAccountInfo"],[2978,47,2641,49],[2978,48,2641,50],[2978,52,2641,54],[2978,54,2641,56],[2979,14,2641,58,"idToken"],[2980,12,2641,66],[2980,13,2641,67],[2980,14,2641,68],[2981,12,2642,12],[2981,16,2642,18,"user"],[2981,20,2642,22],[2981,29,2642,31,"UserImpl"],[2981,37,2642,39],[2981,38,2642,40,"_fromGetAccountInfoResponse"],[2981,65,2642,67],[2981,66,2642,68],[2981,70,2642,72],[2981,72,2642,74,"response"],[2981,80,2642,82],[2981,82,2642,84,"idToken"],[2981,89,2642,91],[2981,90,2642,92],[2982,12,2643,12],[2982,18,2643,18],[2982,22,2643,22],[2982,23,2643,23,"directlySetCurrentUser"],[2982,45,2643,45],[2982,46,2643,46,"user"],[2982,50,2643,50],[2982,51,2643,51],[2983,10,2644,8],[2983,11,2644,9],[2983,12,2645,8],[2983,19,2645,15,"err"],[2983,22,2645,18],[2983,24,2645,20],[2984,12,2646,12,"console"],[2984,19,2646,19],[2984,20,2646,20,"warn"],[2984,24,2646,24],[2984,25,2646,25],[2984,93,2646,93],[2984,95,2646,95,"err"],[2984,98,2646,98],[2984,99,2646,99],[2985,12,2647,12],[2985,18,2647,18],[2985,22,2647,22],[2985,23,2647,23,"directlySetCurrentUser"],[2985,45,2647,45],[2985,46,2647,46],[2985,50,2647,50],[2985,51,2647,51],[2986,10,2648,8],[2987,8,2649,4],[2987,9,2649,5],[2988,8,2649,5],[2988,17,2639,10,"initializeCurrentUserFromIdToken"],[2988,49,2639,42,"initializeCurrentUserFromIdToken"],[2988,50,2639,42,"_x53"],[2988,54,2639,42],[2989,10,2639,42],[2989,17,2639,42,"_initializeCurrentUserFromIdToken"],[2989,50,2639,42],[2989,51,2639,42,"apply"],[2989,56,2639,42],[2989,63,2639,42,"arguments"],[2989,72,2639,42],[2990,8,2639,42],[2991,8,2639,42],[2991,15,2639,10,"initializeCurrentUserFromIdToken"],[2991,47,2639,42],[2992,6,2639,42],[2993,4,2639,42],[2994,6,2639,42,"key"],[2994,9,2639,42],[2995,6,2639,42,"value"],[2995,11,2639,42],[2996,8,2639,42],[2996,12,2639,42,"_initializeCurrentUser"],[2996,34,2639,42],[2996,37,2639,42,"_asyncToGenerator"],[2996,54,2639,42],[2996,55,2650,4],[2996,66,2650,32,"popupRedirectResolver"],[2996,87,2650,53],[2996,89,2650,55],[2997,10,2651,8],[2997,14,2651,12,"app"],[2997,17,2651,15],[2997,18,2651,16,"_isFirebaseServerApp"],[2997,38,2651,36],[2997,39,2651,37],[2997,43,2651,41],[2997,44,2651,42,"app"],[2997,47,2651,45],[2997,48,2651,46],[2997,50,2651,48],[2998,12,2652,12],[2998,16,2652,18,"idToken"],[2998,23,2652,25],[2998,26,2652,28],[2998,30,2652,32],[2998,31,2652,33,"app"],[2998,34,2652,36],[2998,35,2652,37,"settings"],[2998,43,2652,45],[2998,44,2652,46,"authIdToken"],[2998,55,2652,57],[2999,12,2653,12],[2999,16,2653,16,"idToken"],[2999,23,2653,23],[2999,25,2653,25],[3000,14,2654,16],[3001,14,2655,16],[3002,14,2656,16],[3002,21,2656,23],[3002,25,2656,27,"Promise"],[3002,32,2656,34],[3002,33,2656,35,"resolve"],[3002,40,2656,42],[3002,44,2656,46],[3003,16,2657,20,"setTimeout"],[3003,26,2657,30],[3003,27,2657,31],[3003,33,2657,37],[3003,37,2657,41],[3003,38,2657,42,"initializeCurrentUserFromIdToken"],[3003,70,2657,74],[3003,71,2657,75,"idToken"],[3003,78,2657,82],[3003,79,2657,83],[3003,80,2657,84,"then"],[3003,84,2657,88],[3003,85,2657,89,"resolve"],[3003,92,2657,96],[3003,94,2657,98,"resolve"],[3003,101,2657,105],[3003,102,2657,106],[3003,103,2657,107],[3004,14,2658,16],[3004,15,2658,17],[3004,16,2658,18],[3005,12,2659,12],[3005,13,2659,13],[3005,19,2660,17],[3006,14,2661,16],[3006,21,2661,23],[3006,25,2661,27],[3006,26,2661,28,"directlySetCurrentUser"],[3006,48,2661,50],[3006,49,2661,51],[3006,53,2661,55],[3006,54,2661,56],[3007,12,2662,12],[3008,10,2663,8],[3009,10,2664,8],[3010,10,2665,8],[3010,14,2665,14,"previouslyStoredUser"],[3010,34,2665,34],[3010,43,2665,44],[3010,47,2665,48],[3010,48,2665,49,"assertedPersistence"],[3010,67,2665,68],[3010,68,2665,69,"getCurrentUser"],[3010,82,2665,83],[3010,83,2665,84],[3010,84,2665,86],[3011,10,2666,8],[3011,14,2666,12,"futureCurrentUser"],[3011,31,2666,29],[3011,34,2666,32,"previouslyStoredUser"],[3011,54,2666,52],[3012,10,2667,8],[3012,14,2667,12,"needsTocheckMiddleware"],[3012,36,2667,34],[3012,39,2667,37],[3012,44,2667,42],[3013,10,2668,8],[3013,14,2668,12,"popupRedirectResolver"],[3013,35,2668,33],[3013,39,2668,37],[3013,43,2668,41],[3013,44,2668,42,"config"],[3013,50,2668,48],[3013,51,2668,49,"authDomain"],[3013,61,2668,59],[3013,63,2668,61],[3014,12,2669,12],[3014,18,2669,18],[3014,22,2669,22],[3014,23,2669,23,"getOrInitRedirectPersistenceManager"],[3014,58,2669,58],[3014,59,2669,59],[3014,60,2669,60],[3015,12,2670,12],[3015,16,2670,18,"redirectUserEventId"],[3015,35,2670,37],[3015,38,2670,40],[3015,42,2670,44],[3015,43,2670,45,"redirectUser"],[3015,55,2670,57],[3015,57,2670,59,"_redirectEventId"],[3015,73,2670,75],[3016,12,2671,12],[3016,16,2671,18,"storedUserEventId"],[3016,33,2671,35],[3016,36,2671,38,"futureCurrentUser"],[3016,53,2671,55],[3016,55,2671,57,"_redirectEventId"],[3016,71,2671,73],[3017,12,2672,12],[3017,16,2672,18,"result"],[3017,22,2672,24],[3017,31,2672,33],[3017,35,2672,37],[3017,36,2672,38,"tryRedirectSignIn"],[3017,53,2672,55],[3017,54,2672,56,"popupRedirectResolver"],[3017,75,2672,77],[3017,76,2672,78],[3018,12,2673,12],[3019,12,2674,12],[3020,12,2675,12],[3021,12,2676,12],[3022,12,2677,12],[3022,16,2677,16],[3022,17,2677,17],[3022,18,2677,18,"redirectUserEventId"],[3022,37,2677,37],[3022,41,2677,41,"redirectUserEventId"],[3022,60,2677,60],[3022,65,2677,65,"storedUserEventId"],[3022,82,2677,82],[3022,87,2678,16,"result"],[3022,93,2678,22],[3022,95,2678,24,"user"],[3022,99,2678,28],[3022,101,2678,30],[3023,14,2679,16,"futureCurrentUser"],[3023,31,2679,33],[3023,34,2679,36,"result"],[3023,40,2679,42],[3023,41,2679,43,"user"],[3023,45,2679,47],[3024,14,2680,16,"needsTocheckMiddleware"],[3024,36,2680,38],[3024,39,2680,41],[3024,43,2680,45],[3025,12,2681,12],[3026,10,2682,8],[3027,10,2683,8],[3028,10,2684,8],[3028,14,2684,12],[3028,15,2684,13,"futureCurrentUser"],[3028,32,2684,30],[3028,34,2684,32],[3029,12,2685,12],[3029,19,2685,19],[3029,23,2685,23],[3029,24,2685,24,"directlySetCurrentUser"],[3029,46,2685,46],[3029,47,2685,47],[3029,51,2685,51],[3029,52,2685,52],[3030,10,2686,8],[3031,10,2687,8],[3031,14,2687,12],[3031,15,2687,13,"futureCurrentUser"],[3031,32,2687,30],[3031,33,2687,31,"_redirectEventId"],[3031,49,2687,47],[3031,51,2687,49],[3032,12,2688,12],[3033,12,2689,12],[3034,12,2690,12],[3034,16,2690,16,"needsTocheckMiddleware"],[3034,38,2690,38],[3034,40,2690,40],[3035,14,2691,16],[3035,18,2691,20],[3036,16,2692,20],[3036,22,2692,26],[3036,26,2692,30],[3036,27,2692,31,"beforeStateQueue"],[3036,43,2692,47],[3036,44,2692,48,"runMiddleware"],[3036,57,2692,61],[3036,58,2692,62,"futureCurrentUser"],[3036,75,2692,79],[3036,76,2692,80],[3037,14,2693,16],[3037,15,2693,17],[3037,16,2694,16],[3037,23,2694,23,"e"],[3037,24,2694,24],[3037,26,2694,26],[3038,16,2695,20,"futureCurrentUser"],[3038,33,2695,37],[3038,36,2695,40,"previouslyStoredUser"],[3038,56,2695,60],[3039,16,2696,20],[3040,16,2697,20],[3041,16,2698,20],[3041,20,2698,24],[3041,21,2698,25,"_popupRedirectResolver"],[3041,43,2698,47],[3041,44,2698,48,"_overrideRedirectResult"],[3041,67,2698,71],[3041,68,2698,72],[3041,72,2698,76],[3041,74,2698,78],[3041,80,2698,84,"Promise"],[3041,87,2698,91],[3041,88,2698,92,"reject"],[3041,94,2698,98],[3041,95,2698,99,"e"],[3041,96,2698,100],[3041,97,2698,101],[3041,98,2698,102],[3042,14,2699,16],[3043,12,2700,12],[3044,12,2701,12],[3044,16,2701,16,"futureCurrentUser"],[3044,33,2701,33],[3044,35,2701,35],[3045,14,2702,16],[3045,21,2702,23],[3045,25,2702,27],[3045,26,2702,28,"reloadAndSetCurrentUserOrClear"],[3045,56,2702,58],[3045,57,2702,59,"futureCurrentUser"],[3045,74,2702,76],[3045,75,2702,77],[3046,12,2703,12],[3046,13,2703,13],[3046,19,2704,17],[3047,14,2705,16],[3047,21,2705,23],[3047,25,2705,27],[3047,26,2705,28,"directlySetCurrentUser"],[3047,48,2705,50],[3047,49,2705,51],[3047,53,2705,55],[3047,54,2705,56],[3048,12,2706,12],[3049,10,2707,8],[3050,10,2708,8,"_assert"],[3050,17,2708,15],[3050,18,2708,16],[3050,22,2708,20],[3050,23,2708,21,"_popupRedirectResolver"],[3050,45,2708,43],[3050,47,2708,45],[3050,51,2708,49],[3050,53,2708,51],[3050,69,2708,67],[3050,70,2708,68],[3050,104,2708,102],[3050,105,2708,103],[3051,10,2709,8],[3051,16,2709,14],[3051,20,2709,18],[3051,21,2709,19,"getOrInitRedirectPersistenceManager"],[3051,56,2709,54],[3051,57,2709,55],[3051,58,2709,56],[3052,10,2710,8],[3053,10,2711,8],[3054,10,2712,8],[3055,10,2713,8],[3055,14,2713,12],[3055,18,2713,16],[3055,19,2713,17,"redirectUser"],[3055,31,2713,29],[3055,35,2714,12],[3055,39,2714,16],[3055,40,2714,17,"redirectUser"],[3055,52,2714,29],[3055,53,2714,30,"_redirectEventId"],[3055,69,2714,46],[3055,74,2714,51,"futureCurrentUser"],[3055,91,2714,68],[3055,92,2714,69,"_redirectEventId"],[3055,108,2714,85],[3055,110,2714,87],[3056,12,2715,12],[3056,19,2715,19],[3056,23,2715,23],[3056,24,2715,24,"directlySetCurrentUser"],[3056,46,2715,46],[3056,47,2715,47,"futureCurrentUser"],[3056,64,2715,64],[3056,65,2715,65],[3057,10,2716,8],[3058,10,2717,8],[3058,17,2717,15],[3058,21,2717,19],[3058,22,2717,20,"reloadAndSetCurrentUserOrClear"],[3058,52,2717,50],[3058,53,2717,51,"futureCurrentUser"],[3058,70,2717,68],[3058,71,2717,69],[3059,8,2718,4],[3059,9,2718,5],[3060,8,2718,5],[3060,17,2650,10,"initializeCurrentUser"],[3060,38,2650,31,"initializeCurrentUser"],[3060,39,2650,31,"_x54"],[3060,43,2650,31],[3061,10,2650,31],[3061,17,2650,31,"_initializeCurrentUser"],[3061,39,2650,31],[3061,40,2650,31,"apply"],[3061,45,2650,31],[3061,52,2650,31,"arguments"],[3061,61,2650,31],[3062,8,2650,31],[3063,8,2650,31],[3063,15,2650,10,"initializeCurrentUser"],[3063,36,2650,31],[3064,6,2650,31],[3065,4,2650,31],[3066,6,2650,31,"key"],[3066,9,2650,31],[3067,6,2650,31,"value"],[3067,11,2650,31],[3068,8,2650,31],[3068,12,2650,31,"_tryRedirectSignIn"],[3068,30,2650,31],[3068,33,2650,31,"_asyncToGenerator"],[3068,50,2650,31],[3068,51,2719,4],[3068,62,2719,28,"redirectResolver"],[3068,78,2719,44],[3068,80,2719,46],[3069,10,2720,8],[3070,10,2721,8],[3071,10,2722,8],[3072,10,2723,8],[3073,10,2724,8],[3074,10,2725,8],[3075,10,2726,8],[3076,10,2727,8],[3077,10,2728,8],[3078,10,2729,8],[3079,10,2730,8],[3080,10,2731,8],[3081,10,2732,8],[3082,10,2733,8],[3083,10,2734,8],[3084,10,2735,8],[3084,14,2735,12,"result"],[3084,20,2735,18],[3084,23,2735,21],[3084,27,2735,25],[3085,10,2736,8],[3085,14,2736,12],[3086,12,2737,12],[3087,12,2738,12],[3088,12,2739,12,"result"],[3088,18,2739,18],[3088,27,2739,27],[3088,31,2739,31],[3088,32,2739,32,"_popupRedirectResolver"],[3088,54,2739,54],[3088,55,2739,55,"_completeRedirectFn"],[3088,74,2739,74],[3088,75,2739,75],[3088,79,2739,79],[3088,81,2739,81,"redirectResolver"],[3088,97,2739,97],[3088,99,2739,99],[3088,103,2739,103],[3088,104,2739,104],[3089,10,2740,8],[3089,11,2740,9],[3089,12,2741,8],[3089,19,2741,15,"e"],[3089,20,2741,16],[3089,22,2741,18],[3090,12,2742,12],[3091,12,2743,12],[3092,12,2744,12],[3092,18,2744,18],[3092,22,2744,22],[3092,23,2744,23,"_setRedirectUser"],[3092,39,2744,39],[3092,40,2744,40],[3092,44,2744,44],[3092,45,2744,45],[3093,10,2745,8],[3094,10,2746,8],[3094,17,2746,15,"result"],[3094,23,2746,21],[3095,8,2747,4],[3095,9,2747,5],[3096,8,2747,5],[3096,17,2719,10,"tryRedirectSignIn"],[3096,34,2719,27,"tryRedirectSignIn"],[3096,35,2719,27,"_x55"],[3096,39,2719,27],[3097,10,2719,27],[3097,17,2719,27,"_tryRedirectSignIn"],[3097,35,2719,27],[3097,36,2719,27,"apply"],[3097,41,2719,27],[3097,48,2719,27,"arguments"],[3097,57,2719,27],[3098,8,2719,27],[3099,8,2719,27],[3099,15,2719,10,"tryRedirectSignIn"],[3099,32,2719,27],[3100,6,2719,27],[3101,4,2719,27],[3102,6,2719,27,"key"],[3102,9,2719,27],[3103,6,2719,27,"value"],[3103,11,2719,27],[3104,8,2719,27],[3104,12,2719,27,"_reloadAndSetCurrentUserOrClear"],[3104,43,2719,27],[3104,46,2719,27,"_asyncToGenerator"],[3104,63,2719,27],[3104,64,2748,4],[3104,75,2748,41,"user"],[3104,79,2748,45],[3104,81,2748,47],[3105,10,2749,8],[3105,14,2749,12],[3106,12,2750,12],[3106,18,2750,18,"_reloadWithoutSaving"],[3106,38,2750,38],[3106,39,2750,39,"user"],[3106,43,2750,43],[3106,44,2750,44],[3107,10,2751,8],[3107,11,2751,9],[3107,12,2752,8],[3107,19,2752,15,"e"],[3107,20,2752,16],[3107,22,2752,18],[3108,12,2753,12],[3108,16,2753,16,"e"],[3108,17,2753,17],[3108,19,2753,19,"code"],[3108,23,2753,23],[3108,28,2754,16],[3108,36,2754,24],[3108,60,2754,48],[3108,61,2754,49],[3108,105,2754,93],[3108,107,2754,95],[3109,14,2755,16],[3110,14,2756,16],[3111,14,2757,16],[3111,21,2757,23],[3111,25,2757,27],[3111,26,2757,28,"directlySetCurrentUser"],[3111,48,2757,50],[3111,49,2757,51],[3111,53,2757,55],[3111,54,2757,56],[3112,12,2758,12],[3113,10,2759,8],[3114,10,2760,8],[3114,17,2760,15],[3114,21,2760,19],[3114,22,2760,20,"directlySetCurrentUser"],[3114,44,2760,42],[3114,45,2760,43,"user"],[3114,49,2760,47],[3114,50,2760,48],[3115,8,2761,4],[3115,9,2761,5],[3116,8,2761,5],[3116,17,2748,10,"reloadAndSetCurrentUserOrClear"],[3116,47,2748,40,"reloadAndSetCurrentUserOrClear"],[3116,48,2748,40,"_x56"],[3116,52,2748,40],[3117,10,2748,40],[3117,17,2748,40,"_reloadAndSetCurrentUserOrClear"],[3117,48,2748,40],[3117,49,2748,40,"apply"],[3117,54,2748,40],[3117,61,2748,40,"arguments"],[3117,70,2748,40],[3118,8,2748,40],[3119,8,2748,40],[3119,15,2748,10,"reloadAndSetCurrentUserOrClear"],[3119,45,2748,40],[3120,6,2748,40],[3121,4,2748,40],[3122,6,2748,40,"key"],[3122,9,2748,40],[3123,6,2748,40,"value"],[3123,11,2748,40],[3123,13,2762,4],[3123,22,2762,4,"useDeviceLanguage"],[3123,39,2762,21,"useDeviceLanguage"],[3123,40,2762,21],[3123,42,2762,24],[3124,8,2763,8],[3124,12,2763,12],[3124,13,2763,13,"languageCode"],[3124,25,2763,25],[3124,28,2763,28,"_getUserLanguage"],[3124,44,2763,44],[3124,45,2763,45],[3124,46,2763,46],[3125,6,2764,4],[3126,4,2764,5],[3127,6,2764,5,"key"],[3127,9,2764,5],[3128,6,2764,5,"value"],[3128,11,2764,5],[3129,8,2764,5],[3129,12,2764,5,"_delete3"],[3129,20,2764,5],[3129,23,2764,5,"_asyncToGenerator"],[3129,40,2764,5],[3129,41,2765,4],[3129,54,2765,20],[3130,10,2766,8],[3130,14,2766,12],[3130,15,2766,13,"_deleted"],[3130,23,2766,21],[3130,26,2766,24],[3130,30,2766,28],[3131,8,2767,4],[3131,9,2767,5],[3132,8,2767,5],[3132,17,2765,10,"_delete"],[3132,24,2765,17,"_delete"],[3132,25,2765,17],[3133,10,2765,17],[3133,17,2765,17,"_delete3"],[3133,25,2765,17],[3133,26,2765,17,"apply"],[3133,31,2765,17],[3133,38,2765,17,"arguments"],[3133,47,2765,17],[3134,8,2765,17],[3135,8,2765,17],[3135,15,2765,10,"_delete"],[3135,22,2765,17],[3136,6,2765,17],[3137,4,2765,17],[3138,6,2765,17,"key"],[3138,9,2765,17],[3139,6,2765,17,"value"],[3139,11,2765,17],[3140,8,2765,17],[3140,12,2765,17,"_updateCurrentUser2"],[3140,31,2765,17],[3140,34,2765,17,"_asyncToGenerator"],[3140,51,2765,17],[3140,52,2768,4],[3140,63,2768,28,"userExtern"],[3140,73,2768,38],[3140,75,2768,40],[3141,10,2769,8],[3141,14,2769,12,"app"],[3141,17,2769,15],[3141,18,2769,16,"_isFirebaseServerApp"],[3141,38,2769,36],[3141,39,2769,37],[3141,43,2769,41],[3141,44,2769,42,"app"],[3141,47,2769,45],[3141,48,2769,46],[3141,50,2769,48],[3142,12,2770,12],[3142,19,2770,19,"Promise"],[3142,26,2770,26],[3142,27,2770,27,"reject"],[3142,33,2770,33],[3142,34,2770,34,"_serverAppCurrentUserOperationNotSupportedError"],[3142,81,2770,81],[3142,82,2770,82],[3142,86,2770,86],[3142,87,2770,87],[3142,88,2770,88],[3143,10,2771,8],[3144,10,2772,8],[3145,10,2773,8],[3146,10,2774,8],[3146,14,2774,14,"user"],[3146,18,2774,18],[3146,21,2774,21,"userExtern"],[3146,31,2774,31],[3146,34,2775,14,"util"],[3146,38,2775,18],[3146,39,2775,19,"getModularInstance"],[3146,57,2775,37],[3146,58,2775,38,"userExtern"],[3146,68,2775,48],[3146,69,2775,49],[3146,72,2776,14],[3146,76,2776,18],[3147,10,2777,8],[3147,14,2777,12,"user"],[3147,18,2777,16],[3147,20,2777,18],[3148,12,2778,12,"_assert"],[3148,19,2778,19],[3148,20,2778,20,"user"],[3148,24,2778,24],[3148,25,2778,25,"auth"],[3148,29,2778,29],[3148,30,2778,30,"config"],[3148,36,2778,36],[3148,37,2778,37,"apiKey"],[3148,43,2778,43],[3148,48,2778,48],[3148,52,2778,52],[3148,53,2778,53,"config"],[3148,59,2778,59],[3148,60,2778,60,"apiKey"],[3148,66,2778,66],[3148,68,2778,68],[3148,72,2778,72],[3148,74,2778,74],[3148,94,2778,94],[3148,95,2778,95],[3148,127,2778,127],[3148,128,2778,128],[3149,10,2779,8],[3150,10,2780,8],[3150,17,2780,15],[3150,21,2780,19],[3150,22,2780,20,"_updateCurrentUser"],[3150,40,2780,38],[3150,41,2780,39,"user"],[3150,45,2780,43],[3150,49,2780,47,"user"],[3150,53,2780,51],[3150,54,2780,52,"_clone"],[3150,60,2780,58],[3150,61,2780,59],[3150,65,2780,63],[3150,66,2780,64],[3150,67,2780,65],[3151,8,2781,4],[3151,9,2781,5],[3152,8,2781,5],[3152,17,2768,10,"updateCurrentUser"],[3152,34,2768,27,"updateCurrentUser"],[3152,35,2768,27,"_x57"],[3152,39,2768,27],[3153,10,2768,27],[3153,17,2768,27,"_updateCurrentUser2"],[3153,36,2768,27],[3153,37,2768,27,"apply"],[3153,42,2768,27],[3153,49,2768,27,"arguments"],[3153,58,2768,27],[3154,8,2768,27],[3155,8,2768,27],[3155,15,2768,10,"updateCurrentUser"],[3155,32,2768,27],[3156,6,2768,27],[3157,4,2768,27],[3158,6,2768,27,"key"],[3158,9,2768,27],[3159,6,2768,27,"value"],[3159,11,2768,27],[3160,8,2768,27],[3160,12,2768,27,"_updateCurrentUser3"],[3160,31,2768,27],[3160,34,2768,27,"_asyncToGenerator"],[3160,51,2768,27],[3160,52,2782,4],[3160,63,2782,29,"user"],[3160,67,2782,33],[3160,69,2782,69],[3161,10,2782,69],[3161,14,2782,69,"_this3"],[3161,20,2782,69],[3162,10,2782,69],[3162,14,2782,35,"skipBeforeStateCallbacks"],[3162,38,2782,59],[3162,41,2782,59,"arguments"],[3162,50,2782,59],[3162,51,2782,59,"length"],[3162,57,2782,59],[3162,65,2782,59,"arguments"],[3162,74,2782,59],[3162,82,2782,59,"undefined"],[3162,91,2782,59],[3162,94,2782,59,"arguments"],[3162,103,2782,59],[3162,109,2782,62],[3162,114,2782,67],[3163,10,2783,8],[3163,14,2783,12],[3163,18,2783,16],[3163,19,2783,17,"_deleted"],[3163,27,2783,25],[3163,29,2783,27],[3164,12,2784,12],[3165,10,2785,8],[3166,10,2786,8],[3166,14,2786,12,"user"],[3166,18,2786,16],[3166,20,2786,18],[3167,12,2787,12,"_assert"],[3167,19,2787,19],[3167,20,2787,20],[3167,24,2787,24],[3167,25,2787,25,"tenantId"],[3167,33,2787,33],[3167,38,2787,38,"user"],[3167,42,2787,42],[3167,43,2787,43,"tenantId"],[3167,51,2787,51],[3167,53,2787,53],[3167,57,2787,57],[3167,59,2787,59],[3167,79,2787,79],[3167,80,2787,80],[3167,118,2787,118],[3167,119,2787,119],[3168,10,2788,8],[3169,10,2789,8],[3169,14,2789,12],[3169,15,2789,13,"skipBeforeStateCallbacks"],[3169,39,2789,37],[3169,41,2789,39],[3170,12,2790,12],[3170,18,2790,18],[3170,22,2790,22],[3170,23,2790,23,"beforeStateQueue"],[3170,39,2790,39],[3170,40,2790,40,"runMiddleware"],[3170,53,2790,53],[3170,54,2790,54,"user"],[3170,58,2790,58],[3170,59,2790,59],[3171,10,2791,8],[3172,10,2792,8],[3172,17,2792,15],[3172,21,2792,19],[3172,22,2792,20,"queue"],[3172,27,2792,25],[3172,41,2792,25,"_asyncToGenerator"],[3172,58,2792,25],[3172,59,2792,26],[3172,72,2792,38],[3173,12,2793,12],[3173,18,2793,18,"_this3"],[3173,24,2793,22],[3173,25,2793,23,"directlySetCurrentUser"],[3173,47,2793,45],[3173,48,2793,46,"user"],[3173,52,2793,50],[3173,53,2793,51],[3174,12,2794,12,"_this3"],[3174,18,2794,16],[3174,19,2794,17,"notifyAuthListeners"],[3174,38,2794,36],[3174,39,2794,37],[3174,40,2794,38],[3175,10,2795,8],[3175,11,2795,9],[3175,13,2795,10],[3176,8,2796,4],[3176,9,2796,5],[3177,8,2796,5],[3177,17,2782,10,"_updateCurrentUser"],[3177,35,2782,28,"_updateCurrentUser"],[3177,36,2782,28,"_x58"],[3177,40,2782,28],[3178,10,2782,28],[3178,17,2782,28,"_updateCurrentUser3"],[3178,36,2782,28],[3178,37,2782,28,"apply"],[3178,42,2782,28],[3178,49,2782,28,"arguments"],[3178,58,2782,28],[3179,8,2782,28],[3180,8,2782,28],[3180,15,2782,10,"_updateCurrentUser"],[3180,33,2782,28],[3181,6,2782,28],[3182,4,2782,28],[3183,6,2782,28,"key"],[3183,9,2782,28],[3184,6,2782,28,"value"],[3184,11,2782,28],[3185,8,2782,28],[3185,12,2782,28,"_signOut"],[3185,20,2782,28],[3185,23,2782,28,"_asyncToGenerator"],[3185,40,2782,28],[3185,41,2797,4],[3185,54,2797,20],[3186,10,2798,8],[3186,14,2798,12,"app"],[3186,17,2798,15],[3186,18,2798,16,"_isFirebaseServerApp"],[3186,38,2798,36],[3186,39,2798,37],[3186,43,2798,41],[3186,44,2798,42,"app"],[3186,47,2798,45],[3186,48,2798,46],[3186,50,2798,48],[3187,12,2799,12],[3187,19,2799,19,"Promise"],[3187,26,2799,26],[3187,27,2799,27,"reject"],[3187,33,2799,33],[3187,34,2799,34,"_serverAppCurrentUserOperationNotSupportedError"],[3187,81,2799,81],[3187,82,2799,82],[3187,86,2799,86],[3187,87,2799,87],[3187,88,2799,88],[3188,10,2800,8],[3189,10,2801,8],[3190,10,2802,8],[3190,16,2802,14],[3190,20,2802,18],[3190,21,2802,19,"beforeStateQueue"],[3190,37,2802,35],[3190,38,2802,36,"runMiddleware"],[3190,51,2802,49],[3190,52,2802,50],[3190,56,2802,54],[3190,57,2802,55],[3191,10,2803,8],[3192,10,2804,8],[3192,14,2804,12],[3192,18,2804,16],[3192,19,2804,17,"redirectPersistenceManager"],[3192,45,2804,43],[3192,49,2804,47],[3192,53,2804,51],[3192,54,2804,52,"_popupRedirectResolver"],[3192,76,2804,74],[3192,78,2804,76],[3193,12,2805,12],[3193,18,2805,18],[3193,22,2805,22],[3193,23,2805,23,"_setRedirectUser"],[3193,39,2805,39],[3193,40,2805,40],[3193,44,2805,44],[3193,45,2805,45],[3194,10,2806,8],[3195,10,2807,8],[3196,10,2808,8],[3197,10,2809,8],[3197,17,2809,15],[3197,21,2809,19],[3197,22,2809,20,"_updateCurrentUser"],[3197,40,2809,38],[3197,41,2809,39],[3197,45,2809,43],[3197,47,2809,45],[3197,77,2809,76],[3197,81,2809,80],[3197,82,2809,81],[3198,8,2810,4],[3198,9,2810,5],[3199,8,2810,5],[3199,17,2797,10,"signOut"],[3199,24,2797,17,"signOut"],[3199,25,2797,17],[3200,10,2797,17],[3200,17,2797,17,"_signOut"],[3200,25,2797,17],[3200,26,2797,17,"apply"],[3200,31,2797,17],[3200,38,2797,17,"arguments"],[3200,47,2797,17],[3201,8,2797,17],[3202,8,2797,17],[3202,15,2797,10,"signOut"],[3202,22,2797,17],[3203,6,2797,17],[3204,4,2797,17],[3205,6,2797,17,"key"],[3205,9,2797,17],[3206,6,2797,17,"value"],[3206,11,2797,17],[3206,13,2811,4],[3206,22,2811,4,"setPersistence"],[3206,36,2811,18,"setPersistence"],[3206,37,2811,19,"persistence"],[3206,48,2811,30],[3206,50,2811,32],[3207,8,2811,32],[3207,12,2811,32,"_this4"],[3207,18,2811,32],[3208,8,2812,8],[3208,12,2812,12,"app"],[3208,15,2812,15],[3208,16,2812,16,"_isFirebaseServerApp"],[3208,36,2812,36],[3208,37,2812,37],[3208,41,2812,41],[3208,42,2812,42,"app"],[3208,45,2812,45],[3208,46,2812,46],[3208,48,2812,48],[3209,10,2813,12],[3209,17,2813,19,"Promise"],[3209,24,2813,26],[3209,25,2813,27,"reject"],[3209,31,2813,33],[3209,32,2813,34,"_serverAppCurrentUserOperationNotSupportedError"],[3209,79,2813,81],[3209,80,2813,82],[3209,84,2813,86],[3209,85,2813,87],[3209,86,2813,88],[3210,8,2814,8],[3211,8,2815,8],[3211,15,2815,15],[3211,19,2815,19],[3211,20,2815,20,"queue"],[3211,25,2815,25],[3211,39,2815,25,"_asyncToGenerator"],[3211,56,2815,25],[3211,57,2815,26],[3211,70,2815,38],[3212,10,2816,12],[3212,16,2816,18,"_this4"],[3212,22,2816,22],[3212,23,2816,23,"assertedPersistence"],[3212,42,2816,42],[3212,43,2816,43,"setPersistence"],[3212,57,2816,57],[3212,58,2816,58,"_getInstance"],[3212,70,2816,70],[3212,71,2816,71,"persistence"],[3212,82,2816,82],[3212,83,2816,83],[3212,84,2816,84],[3213,8,2817,8],[3213,9,2817,9],[3213,11,2817,10],[3214,6,2818,4],[3215,4,2818,5],[3216,6,2818,5,"key"],[3216,9,2818,5],[3217,6,2818,5,"value"],[3217,11,2818,5],[3217,13,2819,4],[3217,22,2819,4,"_getRecaptchaConfig"],[3217,41,2819,23,"_getRecaptchaConfig"],[3217,42,2819,23],[3217,44,2819,26],[3218,8,2820,8],[3218,12,2820,12],[3218,16,2820,16],[3218,17,2820,17,"tenantId"],[3218,25,2820,25],[3218,29,2820,29],[3218,33,2820,33],[3218,35,2820,35],[3219,10,2821,12],[3219,17,2821,19],[3219,21,2821,23],[3219,22,2821,24,"_agentRecaptchaConfig"],[3219,43,2821,45],[3220,8,2822,8],[3220,9,2822,9],[3220,15,2823,13],[3221,10,2824,12],[3221,17,2824,19],[3221,21,2824,23],[3221,22,2824,24,"_tenantRecaptchaConfigs"],[3221,45,2824,47],[3221,46,2824,48],[3221,50,2824,52],[3221,51,2824,53,"tenantId"],[3221,59,2824,61],[3221,60,2824,62],[3222,8,2825,8],[3223,6,2826,4],[3224,4,2826,5],[3225,6,2826,5,"key"],[3225,9,2826,5],[3226,6,2826,5,"value"],[3226,11,2826,5],[3227,8,2826,5],[3227,12,2826,5,"_validatePassword"],[3227,29,2826,5],[3227,32,2826,5,"_asyncToGenerator"],[3227,49,2826,5],[3227,50,2827,4],[3227,61,2827,27,"password"],[3227,69,2827,35],[3227,71,2827,37],[3228,10,2828,8],[3228,14,2828,12],[3228,15,2828,13],[3228,19,2828,17],[3228,20,2828,18,"_getPasswordPolicyInternal"],[3228,46,2828,44],[3228,47,2828,45],[3228,48,2828,46],[3228,50,2828,48],[3229,12,2829,12],[3229,18,2829,18],[3229,22,2829,22],[3229,23,2829,23,"_updatePasswordPolicy"],[3229,44,2829,44],[3229,45,2829,45],[3229,46,2829,46],[3230,10,2830,8],[3231,10,2831,8],[3232,10,2832,8],[3232,14,2832,14,"passwordPolicy"],[3232,28,2832,28],[3232,31,2832,31],[3232,35,2832,35],[3232,36,2832,36,"_getPasswordPolicyInternal"],[3232,62,2832,62],[3232,63,2832,63],[3232,64,2832,64],[3233,10,2833,8],[3234,10,2834,8],[3235,10,2835,8],[3235,14,2835,12,"passwordPolicy"],[3235,28,2835,26],[3235,29,2835,27,"schemaVersion"],[3235,42,2835,40],[3235,47,2836,12],[3235,51,2836,16],[3235,52,2836,17,"EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION"],[3235,91,2836,56],[3235,93,2836,58],[3236,12,2837,12],[3236,19,2837,19,"Promise"],[3236,26,2837,26],[3236,27,2837,27,"reject"],[3236,33,2837,33],[3236,34,2837,34],[3236,38,2837,38],[3236,39,2837,39,"_errorFactory"],[3236,52,2837,52],[3236,53,2837,53,"create"],[3236,59,2837,59],[3236,60,2837,60],[3236,104,2837,104],[3236,105,2837,105],[3236,169,2837,169],[3236,170,2837,170],[3236,171,2837,171],[3236,172,2837,172],[3236,173,2837,173],[3237,10,2838,8],[3238,10,2839,8],[3238,17,2839,15,"passwordPolicy"],[3238,31,2839,29],[3238,32,2839,30,"validatePassword"],[3238,48,2839,46],[3238,49,2839,47,"password"],[3238,57,2839,55],[3238,58,2839,56],[3239,8,2840,4],[3239,9,2840,5],[3240,8,2840,5],[3240,17,2827,10,"validatePassword"],[3240,33,2827,26,"validatePassword"],[3240,34,2827,26,"_x59"],[3240,38,2827,26],[3241,10,2827,26],[3241,17,2827,26,"_validatePassword"],[3241,34,2827,26],[3241,35,2827,26,"apply"],[3241,40,2827,26],[3241,47,2827,26,"arguments"],[3241,56,2827,26],[3242,8,2827,26],[3243,8,2827,26],[3243,15,2827,10,"validatePassword"],[3243,31,2827,26],[3244,6,2827,26],[3245,4,2827,26],[3246,6,2827,26,"key"],[3246,9,2827,26],[3247,6,2827,26,"value"],[3247,11,2827,26],[3247,13,2841,4],[3247,22,2841,4,"_getPasswordPolicyInternal"],[3247,48,2841,30,"_getPasswordPolicyInternal"],[3247,49,2841,30],[3247,51,2841,33],[3248,8,2842,8],[3248,12,2842,12],[3248,16,2842,16],[3248,17,2842,17,"tenantId"],[3248,25,2842,25],[3248,30,2842,30],[3248,34,2842,34],[3248,36,2842,36],[3249,10,2843,12],[3249,17,2843,19],[3249,21,2843,23],[3249,22,2843,24,"_projectPasswordPolicy"],[3249,44,2843,46],[3250,8,2844,8],[3250,9,2844,9],[3250,15,2845,13],[3251,10,2846,12],[3251,17,2846,19],[3251,21,2846,23],[3251,22,2846,24,"_tenantPasswordPolicies"],[3251,45,2846,47],[3251,46,2846,48],[3251,50,2846,52],[3251,51,2846,53,"tenantId"],[3251,59,2846,61],[3251,60,2846,62],[3252,8,2847,8],[3253,6,2848,4],[3254,4,2848,5],[3255,6,2848,5,"key"],[3255,9,2848,5],[3256,6,2848,5,"value"],[3256,11,2848,5],[3257,8,2848,5],[3257,12,2848,5,"_updatePasswordPolicy2"],[3257,34,2848,5],[3257,37,2848,5,"_asyncToGenerator"],[3257,54,2848,5],[3257,55,2849,4],[3257,68,2849,34],[3258,10,2850,8],[3258,14,2850,14,"response"],[3258,22,2850,22],[3258,31,2850,31,"_getPasswordPolicy"],[3258,49,2850,49],[3258,50,2850,50],[3258,54,2850,54],[3258,55,2850,55],[3259,10,2851,8],[3259,14,2851,14,"passwordPolicy"],[3259,28,2851,28],[3259,31,2851,31],[3259,35,2851,35,"PasswordPolicyImpl"],[3259,53,2851,53],[3259,54,2851,54,"response"],[3259,62,2851,62],[3259,63,2851,63],[3260,10,2852,8],[3260,14,2852,12],[3260,18,2852,16],[3260,19,2852,17,"tenantId"],[3260,27,2852,25],[3260,32,2852,30],[3260,36,2852,34],[3260,38,2852,36],[3261,12,2853,12],[3261,16,2853,16],[3261,17,2853,17,"_projectPasswordPolicy"],[3261,39,2853,39],[3261,42,2853,42,"passwordPolicy"],[3261,56,2853,56],[3262,10,2854,8],[3262,11,2854,9],[3262,17,2855,13],[3263,12,2856,12],[3263,16,2856,16],[3263,17,2856,17,"_tenantPasswordPolicies"],[3263,40,2856,40],[3263,41,2856,41],[3263,45,2856,45],[3263,46,2856,46,"tenantId"],[3263,54,2856,54],[3263,55,2856,55],[3263,58,2856,58,"passwordPolicy"],[3263,72,2856,72],[3264,10,2857,8],[3265,8,2858,4],[3265,9,2858,5],[3266,8,2858,5],[3266,17,2849,10,"_updatePasswordPolicy"],[3266,38,2849,31,"_updatePasswordPolicy"],[3266,39,2849,31],[3267,10,2849,31],[3267,17,2849,31,"_updatePasswordPolicy2"],[3267,39,2849,31],[3267,40,2849,31,"apply"],[3267,45,2849,31],[3267,52,2849,31,"arguments"],[3267,61,2849,31],[3268,8,2849,31],[3269,8,2849,31],[3269,15,2849,10,"_updatePasswordPolicy"],[3269,36,2849,31],[3270,6,2849,31],[3271,4,2849,31],[3272,6,2849,31,"key"],[3272,9,2849,31],[3273,6,2849,31,"value"],[3273,11,2849,31],[3273,13,2859,4],[3273,22,2859,4,"_getPersistenceType"],[3273,41,2859,23,"_getPersistenceType"],[3273,42,2859,23],[3273,44,2859,26],[3274,8,2860,8],[3274,15,2860,15],[3274,19,2860,19],[3274,20,2860,20,"assertedPersistence"],[3274,39,2860,39],[3274,40,2860,40,"persistence"],[3274,51,2860,51],[3274,52,2860,52,"type"],[3274,56,2860,56],[3275,6,2861,4],[3276,4,2861,5],[3277,6,2861,5,"key"],[3277,9,2861,5],[3278,6,2861,5,"value"],[3278,11,2861,5],[3278,13,2862,4],[3278,22,2862,4,"_getPersistence"],[3278,37,2862,19,"_getPersistence"],[3278,38,2862,19],[3278,40,2862,22],[3279,8,2863,8],[3279,15,2863,15],[3279,19,2863,19],[3279,20,2863,20,"assertedPersistence"],[3279,39,2863,39],[3279,40,2863,40,"persistence"],[3279,51,2863,51],[3280,6,2864,4],[3281,4,2864,5],[3282,6,2864,5,"key"],[3282,9,2864,5],[3283,6,2864,5,"value"],[3283,11,2864,5],[3283,13,2865,4],[3283,22,2865,4,"_updateErrorMap"],[3283,37,2865,19,"_updateErrorMap"],[3283,38,2865,20,"errorMap"],[3283,46,2865,28],[3283,48,2865,30],[3284,8,2866,8],[3284,12,2866,12],[3284,13,2866,13,"_errorFactory"],[3284,26,2866,26],[3284,29,2866,29],[3284,33,2866,33,"util"],[3284,37,2866,37],[3284,38,2866,38,"ErrorFactory"],[3284,50,2866,50],[3284,51,2866,51],[3284,57,2866,57],[3284,59,2866,59],[3284,69,2866,69],[3284,71,2866,71,"errorMap"],[3284,79,2866,79],[3284,80,2866,80],[3284,81,2866,81],[3284,82,2866,82],[3285,6,2867,4],[3286,4,2867,5],[3287,6,2867,5,"key"],[3287,9,2867,5],[3288,6,2867,5,"value"],[3288,11,2867,5],[3288,13,2868,4],[3288,22,2868,4,"onAuthStateChanged"],[3288,40,2868,22,"onAuthStateChanged"],[3288,41,2868,23,"nextOrObserver"],[3288,55,2868,37],[3288,57,2868,39,"error"],[3288,62,2868,44],[3288,64,2868,46,"completed"],[3288,73,2868,55],[3288,75,2868,57],[3289,8,2869,8],[3289,15,2869,15],[3289,19,2869,19],[3289,20,2869,20,"registerStateListener"],[3289,41,2869,41],[3289,42,2869,42],[3289,46,2869,46],[3289,47,2869,47,"authStateSubscription"],[3289,68,2869,68],[3289,70,2869,70,"nextOrObserver"],[3289,84,2869,84],[3289,86,2869,86,"error"],[3289,91,2869,91],[3289,93,2869,93,"completed"],[3289,102,2869,102],[3289,103,2869,103],[3290,6,2870,4],[3291,4,2870,5],[3292,6,2870,5,"key"],[3292,9,2870,5],[3293,6,2870,5,"value"],[3293,11,2870,5],[3293,13,2871,4],[3293,22,2871,4,"beforeAuthStateChanged"],[3293,44,2871,26,"beforeAuthStateChanged"],[3293,45,2871,27,"callback"],[3293,53,2871,35],[3293,55,2871,37,"onAbort"],[3293,62,2871,44],[3293,64,2871,46],[3294,8,2872,8],[3294,15,2872,15],[3294,19,2872,19],[3294,20,2872,20,"beforeStateQueue"],[3294,36,2872,36],[3294,37,2872,37,"pushCallback"],[3294,49,2872,49],[3294,50,2872,50,"callback"],[3294,58,2872,58],[3294,60,2872,60,"onAbort"],[3294,67,2872,67],[3294,68,2872,68],[3295,6,2873,4],[3296,4,2873,5],[3297,6,2873,5,"key"],[3297,9,2873,5],[3298,6,2873,5,"value"],[3298,11,2873,5],[3298,13,2874,4],[3298,22,2874,4,"onIdTokenChanged"],[3298,38,2874,20,"onIdTokenChanged"],[3298,39,2874,21,"nextOrObserver"],[3298,53,2874,35],[3298,55,2874,37,"error"],[3298,60,2874,42],[3298,62,2874,44,"completed"],[3298,71,2874,53],[3298,73,2874,55],[3299,8,2875,8],[3299,15,2875,15],[3299,19,2875,19],[3299,20,2875,20,"registerStateListener"],[3299,41,2875,41],[3299,42,2875,42],[3299,46,2875,46],[3299,47,2875,47,"idTokenSubscription"],[3299,66,2875,66],[3299,68,2875,68,"nextOrObserver"],[3299,82,2875,82],[3299,84,2875,84,"error"],[3299,89,2875,89],[3299,91,2875,91,"completed"],[3299,100,2875,100],[3299,101,2875,101],[3300,6,2876,4],[3301,4,2876,5],[3302,6,2876,5,"key"],[3302,9,2876,5],[3303,6,2876,5,"value"],[3303,11,2876,5],[3303,13,2877,4],[3303,22,2877,4,"authStateReady"],[3303,36,2877,18,"authStateReady"],[3303,37,2877,18],[3303,39,2877,21],[3304,8,2878,8],[3304,15,2878,15],[3304,19,2878,19,"Promise"],[3304,26,2878,26],[3304,27,2878,27],[3304,28,2878,28,"resolve"],[3304,35,2878,35],[3304,37,2878,37,"reject"],[3304,43,2878,43],[3304,48,2878,48],[3305,10,2879,12],[3305,14,2879,16],[3305,18,2879,20],[3305,19,2879,21,"currentUser"],[3305,30,2879,32],[3305,32,2879,34],[3306,12,2880,16,"resolve"],[3306,19,2880,23],[3306,20,2880,24],[3306,21,2880,25],[3307,10,2881,12],[3307,11,2881,13],[3307,17,2882,17],[3308,12,2883,16],[3308,16,2883,22,"unsubscribe"],[3308,27,2883,33],[3308,30,2883,36],[3308,34,2883,40],[3308,35,2883,41,"onAuthStateChanged"],[3308,53,2883,59],[3308,54,2883,60],[3308,60,2883,66],[3309,14,2884,20,"unsubscribe"],[3309,25,2884,31],[3309,26,2884,32],[3309,27,2884,33],[3310,14,2885,20,"resolve"],[3310,21,2885,27],[3310,22,2885,28],[3310,23,2885,29],[3311,12,2886,16],[3311,13,2886,17],[3311,15,2886,19,"reject"],[3311,21,2886,25],[3311,22,2886,26],[3312,10,2887,12],[3313,8,2888,8],[3313,9,2888,9],[3313,10,2888,10],[3314,6,2889,4],[3315,6,2890,4],[3316,0,2891,0],[3317,0,2892,0],[3318,4,2890,4],[3319,6,2890,4,"key"],[3319,9,2890,4],[3320,6,2890,4,"value"],[3320,11,2890,4],[3321,8,2890,4],[3321,12,2890,4,"_revokeAccessToken"],[3321,30,2890,4],[3321,33,2890,4,"_asyncToGenerator"],[3321,50,2890,4],[3321,51,2893,4],[3321,62,2893,28,"token"],[3321,67,2893,33],[3321,69,2893,35],[3322,10,2894,8],[3322,14,2894,12],[3322,18,2894,16],[3322,19,2894,17,"currentUser"],[3322,30,2894,28],[3322,32,2894,30],[3323,12,2895,12],[3323,16,2895,18,"idToken"],[3323,23,2895,25],[3323,32,2895,34],[3323,36,2895,38],[3323,37,2895,39,"currentUser"],[3323,48,2895,50],[3323,49,2895,51,"getIdToken"],[3323,59,2895,61],[3323,60,2895,62],[3323,61,2895,63],[3324,12,2896,12],[3325,12,2897,12],[3325,16,2897,18,"request"],[3325,23,2897,25],[3325,26,2897,28],[3326,14,2898,16,"providerId"],[3326,24,2898,26],[3326,26,2898,28],[3326,37,2898,39],[3327,14,2899,16,"tokenType"],[3327,23,2899,25],[3327,25,2899,27],[3327,39,2899,41],[3327,40,2899,42],[3328,14,2900,16,"token"],[3328,19,2900,21],[3329,14,2901,16,"idToken"],[3330,12,2902,12],[3330,13,2902,13],[3331,12,2903,12],[3331,16,2903,16],[3331,20,2903,20],[3331,21,2903,21,"tenantId"],[3331,29,2903,29],[3331,33,2903,33],[3331,37,2903,37],[3331,39,2903,39],[3332,14,2904,16,"request"],[3332,21,2904,23],[3332,22,2904,24,"tenantId"],[3332,30,2904,32],[3332,33,2904,35],[3332,37,2904,39],[3332,38,2904,40,"tenantId"],[3332,46,2904,48],[3333,12,2905,12],[3334,12,2906,12],[3334,18,2906,18,"revokeToken"],[3334,29,2906,29],[3334,30,2906,30],[3334,34,2906,34],[3334,36,2906,36,"request"],[3334,43,2906,43],[3334,44,2906,44],[3335,10,2907,8],[3336,8,2908,4],[3336,9,2908,5],[3337,8,2908,5],[3337,17,2893,10,"revokeAccessToken"],[3337,34,2893,27,"revokeAccessToken"],[3337,35,2893,27,"_x60"],[3337,39,2893,27],[3338,10,2893,27],[3338,17,2893,27,"_revokeAccessToken"],[3338,35,2893,27],[3338,36,2893,27,"apply"],[3338,41,2893,27],[3338,48,2893,27,"arguments"],[3338,57,2893,27],[3339,8,2893,27],[3340,8,2893,27],[3340,15,2893,10,"revokeAccessToken"],[3340,32,2893,27],[3341,6,2893,27],[3342,4,2893,27],[3343,6,2893,27,"key"],[3343,9,2893,27],[3344,6,2893,27,"value"],[3344,11,2893,27],[3344,13,2909,4],[3344,22,2909,4,"toJSON"],[3344,28,2909,10,"toJSON"],[3344,29,2909,10],[3344,31,2909,13],[3345,8,2910,8],[3345,15,2910,15],[3346,10,2911,12,"apiKey"],[3346,16,2911,18],[3346,18,2911,20],[3346,22,2911,24],[3346,23,2911,25,"config"],[3346,29,2911,31],[3346,30,2911,32,"apiKey"],[3346,36,2911,38],[3347,10,2912,12,"authDomain"],[3347,20,2912,22],[3347,22,2912,24],[3347,26,2912,28],[3347,27,2912,29,"config"],[3347,33,2912,35],[3347,34,2912,36,"authDomain"],[3347,44,2912,46],[3348,10,2913,12,"appName"],[3348,17,2913,19],[3348,19,2913,21],[3348,23,2913,25],[3348,24,2913,26,"name"],[3348,28,2913,30],[3349,10,2914,12,"currentUser"],[3349,21,2914,23],[3349,23,2914,25],[3349,27,2914,29],[3349,28,2914,30,"_currentUser"],[3349,40,2914,42],[3349,42,2914,44,"toJSON"],[3349,48,2914,50],[3349,49,2914,51],[3350,8,2915,8],[3350,9,2915,9],[3351,6,2916,4],[3352,4,2916,5],[3353,6,2916,5,"key"],[3353,9,2916,5],[3354,6,2916,5,"value"],[3354,11,2916,5],[3355,8,2916,5],[3355,12,2916,5,"_setRedirectUser2"],[3355,29,2916,5],[3355,32,2916,5,"_asyncToGenerator"],[3355,49,2916,5],[3355,50,2917,4],[3355,61,2917,27,"user"],[3355,65,2917,31],[3355,67,2917,33,"popupRedirectResolver"],[3355,88,2917,54],[3355,90,2917,56],[3356,10,2918,8],[3356,14,2918,14,"redirectManager"],[3356,29,2918,29],[3356,38,2918,38],[3356,42,2918,42],[3356,43,2918,43,"getOrInitRedirectPersistenceManager"],[3356,78,2918,78],[3356,79,2918,79,"popupRedirectResolver"],[3356,100,2918,100],[3356,101,2918,101],[3357,10,2919,8],[3357,17,2919,15,"user"],[3357,21,2919,19],[3357,26,2919,24],[3357,30,2919,28],[3357,33,2920,14,"redirectManager"],[3357,48,2920,29],[3357,49,2920,30,"removeCurrentUser"],[3357,66,2920,47],[3357,67,2920,48],[3357,68,2920,49],[3357,71,2921,14,"redirectManager"],[3357,86,2921,29],[3357,87,2921,30,"setCurrentUser"],[3357,101,2921,44],[3357,102,2921,45,"user"],[3357,106,2921,49],[3357,107,2921,50],[3358,8,2922,4],[3358,9,2922,5],[3359,8,2922,5],[3359,17,2917,10,"_setRedirectUser"],[3359,33,2917,26,"_setRedirectUser"],[3359,34,2917,26,"_x61"],[3359,38,2917,26],[3359,40,2917,26,"_x62"],[3359,44,2917,26],[3360,10,2917,26],[3360,17,2917,26,"_setRedirectUser2"],[3360,34,2917,26],[3360,35,2917,26,"apply"],[3360,40,2917,26],[3360,47,2917,26,"arguments"],[3360,56,2917,26],[3361,8,2917,26],[3362,8,2917,26],[3362,15,2917,10,"_setRedirectUser"],[3362,31,2917,26],[3363,6,2917,26],[3364,4,2917,26],[3365,6,2917,26,"key"],[3365,9,2917,26],[3366,6,2917,26,"value"],[3366,11,2917,26],[3367,8,2917,26],[3367,12,2917,26,"_getOrInitRedirectPersistenceManager"],[3367,48,2917,26],[3367,51,2917,26,"_asyncToGenerator"],[3367,68,2917,26],[3367,69,2923,4],[3367,80,2923,46,"popupRedirectResolver"],[3367,101,2923,67],[3367,103,2923,69],[3368,10,2924,8],[3368,14,2924,12],[3368,15,2924,13],[3368,19,2924,17],[3368,20,2924,18,"redirectPersistenceManager"],[3368,46,2924,44],[3368,48,2924,46],[3369,12,2925,12],[3369,16,2925,18,"resolver"],[3369,24,2925,26],[3369,27,2925,30,"popupRedirectResolver"],[3369,48,2925,51],[3369,52,2925,55,"_getInstance"],[3369,64,2925,67],[3369,65,2925,68,"popupRedirectResolver"],[3369,86,2925,89],[3369,87,2925,90],[3369,91,2926,16],[3369,95,2926,20],[3369,96,2926,21,"_popupRedirectResolver"],[3369,118,2926,43],[3370,12,2927,12,"_assert"],[3370,19,2927,19],[3370,20,2927,20,"resolver"],[3370,28,2927,28],[3370,30,2927,30],[3370,34,2927,34],[3370,36,2927,36],[3370,52,2927,52],[3370,53,2927,53],[3370,87,2927,87],[3370,88,2927,88],[3371,12,2928,12],[3371,16,2928,16],[3371,17,2928,17,"redirectPersistenceManager"],[3371,43,2928,43],[3371,52,2928,52,"PersistenceUserManager"],[3371,74,2928,74],[3371,75,2928,75,"create"],[3371,81,2928,81],[3371,82,2928,82],[3371,86,2928,86],[3371,88,2928,88],[3371,89,2928,89,"_getInstance"],[3371,101,2928,101],[3371,102,2928,102,"resolver"],[3371,110,2928,110],[3371,111,2928,111,"_redirectPersistence"],[3371,131,2928,131],[3371,132,2928,132],[3371,133,2928,133],[3371,135,2928,135],[3371,149,2928,149],[3371,150,2928,150],[3371,177,2928,177],[3371,178,2928,178],[3372,12,2929,12],[3372,16,2929,16],[3372,17,2929,17,"redirectUser"],[3372,29,2929,29],[3372,38,2930,22],[3372,42,2930,26],[3372,43,2930,27,"redirectPersistenceManager"],[3372,69,2930,53],[3372,70,2930,54,"getCurrentUser"],[3372,84,2930,68],[3372,85,2930,69],[3372,86,2930,70],[3373,10,2931,8],[3374,10,2932,8],[3374,17,2932,15],[3374,21,2932,19],[3374,22,2932,20,"redirectPersistenceManager"],[3374,48,2932,46],[3375,8,2933,4],[3375,9,2933,5],[3376,8,2933,5],[3376,17,2923,10,"getOrInitRedirectPersistenceManager"],[3376,52,2923,45,"getOrInitRedirectPersistenceManager"],[3376,53,2923,45,"_x63"],[3376,57,2923,45],[3377,10,2923,45],[3377,17,2923,45,"_getOrInitRedirectPersistenceManager"],[3377,53,2923,45],[3377,54,2923,45,"apply"],[3377,59,2923,45],[3377,66,2923,45,"arguments"],[3377,75,2923,45],[3378,8,2923,45],[3379,8,2923,45],[3379,15,2923,10,"getOrInitRedirectPersistenceManager"],[3379,50,2923,45],[3380,6,2923,45],[3381,4,2923,45],[3382,6,2923,45,"key"],[3382,9,2923,45],[3383,6,2923,45,"value"],[3383,11,2923,45],[3384,8,2923,45],[3384,12,2923,45,"_redirectUserForId2"],[3384,31,2923,45],[3384,34,2923,45,"_asyncToGenerator"],[3384,51,2923,45],[3384,52,2934,4],[3384,63,2934,29,"id"],[3384,65,2934,31],[3384,67,2934,33],[3385,10,2935,8],[3386,10,2936,8],[3387,10,2937,8],[3387,14,2937,12],[3387,18,2937,16],[3387,19,2937,17,"_isInitialized"],[3387,33,2937,31],[3387,35,2937,33],[3388,12,2938,12],[3388,18,2938,18],[3388,22,2938,22],[3388,23,2938,23,"queue"],[3388,28,2938,28],[3388,42,2938,28,"_asyncToGenerator"],[3388,59,2938,28],[3388,60,2938,29],[3388,73,2938,41],[3388,74,2938,43],[3388,75,2938,44],[3388,77,2938,45],[3389,10,2939,8],[3390,10,2940,8],[3390,14,2940,12],[3390,18,2940,16],[3390,19,2940,17,"_currentUser"],[3390,31,2940,29],[3390,33,2940,31,"_redirectEventId"],[3390,49,2940,47],[3390,54,2940,52,"id"],[3390,56,2940,54],[3390,58,2940,56],[3391,12,2941,12],[3391,19,2941,19],[3391,23,2941,23],[3391,24,2941,24,"_currentUser"],[3391,36,2941,36],[3392,10,2942,8],[3393,10,2943,8],[3393,14,2943,12],[3393,18,2943,16],[3393,19,2943,17,"redirectUser"],[3393,31,2943,29],[3393,33,2943,31,"_redirectEventId"],[3393,49,2943,47],[3393,54,2943,52,"id"],[3393,56,2943,54],[3393,58,2943,56],[3394,12,2944,12],[3394,19,2944,19],[3394,23,2944,23],[3394,24,2944,24,"redirectUser"],[3394,36,2944,36],[3395,10,2945,8],[3396,10,2946,8],[3396,17,2946,15],[3396,21,2946,19],[3397,8,2947,4],[3397,9,2947,5],[3398,8,2947,5],[3398,17,2934,10,"_redirectUserForId"],[3398,35,2934,28,"_redirectUserForId"],[3398,36,2934,28,"_x64"],[3398,40,2934,28],[3399,10,2934,28],[3399,17,2934,28,"_redirectUserForId2"],[3399,36,2934,28],[3399,37,2934,28,"apply"],[3399,42,2934,28],[3399,49,2934,28,"arguments"],[3399,58,2934,28],[3400,8,2934,28],[3401,8,2934,28],[3401,15,2934,10,"_redirectUserForId"],[3401,33,2934,28],[3402,6,2934,28],[3403,4,2934,28],[3404,6,2934,28,"key"],[3404,9,2934,28],[3405,6,2934,28,"value"],[3405,11,2934,28],[3406,8,2934,28],[3406,12,2934,28,"_persistUserIfCurrent2"],[3406,34,2934,28],[3406,37,2934,28,"_asyncToGenerator"],[3406,54,2934,28],[3406,55,2948,4],[3406,66,2948,32,"user"],[3406,70,2948,36],[3406,72,2948,38],[3407,10,2948,38],[3407,14,2948,38,"_this5"],[3407,20,2948,38],[3408,10,2949,8],[3408,14,2949,12,"user"],[3408,18,2949,16],[3408,23,2949,21],[3408,27,2949,25],[3408,28,2949,26,"currentUser"],[3408,39,2949,37],[3408,41,2949,39],[3409,12,2950,12],[3409,19,2950,19],[3409,23,2950,23],[3409,24,2950,24,"queue"],[3409,29,2950,29],[3409,43,2950,29,"_asyncToGenerator"],[3409,60,2950,29],[3409,61,2950,30],[3410,14,2950,30],[3410,21,2950,42,"_this5"],[3410,27,2950,46],[3410,28,2950,47,"directlySetCurrentUser"],[3410,50,2950,69],[3410,51,2950,70,"user"],[3410,55,2950,74],[3410,56,2950,75],[3411,12,2950,75],[3411,15,2950,76],[3412,10,2951,8],[3413,8,2952,4],[3413,9,2952,5],[3414,8,2952,5],[3414,17,2948,10,"_persistUserIfCurrent"],[3414,38,2948,31,"_persistUserIfCurrent"],[3414,39,2948,31,"_x65"],[3414,43,2948,31],[3415,10,2948,31],[3415,17,2948,31,"_persistUserIfCurrent2"],[3415,39,2948,31],[3415,40,2948,31,"apply"],[3415,45,2948,31],[3415,52,2948,31,"arguments"],[3415,61,2948,31],[3416,8,2948,31],[3417,8,2948,31],[3417,15,2948,10,"_persistUserIfCurrent"],[3417,36,2948,31],[3418,6,2948,31],[3418,10,2953,4],[3419,4,2953,4],[3420,6,2953,4,"key"],[3420,9,2953,4],[3421,6,2953,4,"value"],[3421,11,2953,4],[3421,13,2954,4],[3421,22,2954,4,"_notifyListenersIfCurrent"],[3421,47,2954,29,"_notifyListenersIfCurrent"],[3421,48,2954,30,"user"],[3421,52,2954,34],[3421,54,2954,36],[3422,8,2955,8],[3422,12,2955,12,"user"],[3422,16,2955,16],[3422,21,2955,21],[3422,25,2955,25],[3422,26,2955,26,"currentUser"],[3422,37,2955,37],[3422,39,2955,39],[3423,10,2956,12],[3423,14,2956,16],[3423,15,2956,17,"notifyAuthListeners"],[3423,34,2956,36],[3423,35,2956,37],[3423,36,2956,38],[3424,8,2957,8],[3425,6,2958,4],[3426,4,2958,5],[3427,6,2958,5,"key"],[3427,9,2958,5],[3428,6,2958,5,"value"],[3428,11,2958,5],[3428,13,2959,4],[3428,22,2959,4,"_key"],[3428,26,2959,8,"_key"],[3428,27,2959,8],[3428,29,2959,11],[3429,8,2960,8],[3429,15,2960,15],[3429,18,2960,18],[3429,22,2960,22],[3429,23,2960,23,"config"],[3429,29,2960,29],[3429,30,2960,30,"authDomain"],[3429,40,2960,40],[3429,44,2960,44],[3429,48,2960,48],[3429,49,2960,49,"config"],[3429,55,2960,55],[3429,56,2960,56,"apiKey"],[3429,62,2960,62],[3429,66,2960,66],[3429,70,2960,70],[3429,71,2960,71,"name"],[3429,75,2960,75],[3429,77,2960,77],[3430,6,2961,4],[3431,4,2961,5],[3432,6,2961,5,"key"],[3432,9,2961,5],[3433,6,2961,5,"value"],[3433,11,2961,5],[3433,13,2962,4],[3433,22,2962,4,"_startProactiveRefresh"],[3433,44,2962,26,"_startProactiveRefresh"],[3433,45,2962,26],[3433,47,2962,29],[3434,8,2963,8],[3434,12,2963,12],[3434,13,2963,13,"isProactiveRefreshEnabled"],[3434,38,2963,38],[3434,41,2963,41],[3434,45,2963,45],[3435,8,2964,8],[3435,12,2964,12],[3435,16,2964,16],[3435,17,2964,17,"currentUser"],[3435,28,2964,28],[3435,30,2964,30],[3436,10,2965,12],[3436,14,2965,16],[3436,15,2965,17,"_currentUser"],[3436,27,2965,29],[3436,28,2965,30,"_startProactiveRefresh"],[3436,50,2965,52],[3436,51,2965,53],[3436,52,2965,54],[3437,8,2966,8],[3438,6,2967,4],[3439,4,2967,5],[3440,6,2967,5,"key"],[3440,9,2967,5],[3441,6,2967,5,"value"],[3441,11,2967,5],[3441,13,2968,4],[3441,22,2968,4,"_stopProactiveRefresh"],[3441,43,2968,25,"_stopProactiveRefresh"],[3441,44,2968,25],[3441,46,2968,28],[3442,8,2969,8],[3442,12,2969,12],[3442,13,2969,13,"isProactiveRefreshEnabled"],[3442,38,2969,38],[3442,41,2969,41],[3442,46,2969,46],[3443,8,2970,8],[3443,12,2970,12],[3443,16,2970,16],[3443,17,2970,17,"currentUser"],[3443,28,2970,28],[3443,30,2970,30],[3444,10,2971,12],[3444,14,2971,16],[3444,15,2971,17,"_currentUser"],[3444,27,2971,29],[3444,28,2971,30,"_stopProactiveRefresh"],[3444,49,2971,51],[3444,50,2971,52],[3444,51,2971,53],[3445,8,2972,8],[3446,6,2973,4],[3447,6,2974,4],[3448,4,2974,4],[3449,6,2974,4,"key"],[3449,9,2974,4],[3450,6,2974,4,"get"],[3450,9,2974,4],[3450,11,2975,4],[3450,20,2975,4,"get"],[3450,21,2975,4],[3450,23,2975,23],[3451,8,2976,8],[3451,15,2976,15],[3451,19,2976,19],[3451,20,2976,20,"currentUser"],[3451,31,2976,31],[3452,6,2977,4],[3453,4,2977,5],[3454,6,2977,5,"key"],[3454,9,2977,5],[3455,6,2977,5,"value"],[3455,11,2977,5],[3455,13,2978,4],[3455,22,2978,4,"notifyAuthListeners"],[3455,41,2978,23,"notifyAuthListeners"],[3455,42,2978,23],[3455,44,2978,26],[3456,8,2979,8],[3456,12,2979,12],[3456,13,2979,13],[3456,17,2979,17],[3456,18,2979,18,"_isInitialized"],[3456,32,2979,32],[3456,34,2979,34],[3457,10,2980,12],[3458,8,2981,8],[3459,8,2982,8],[3459,12,2982,12],[3459,13,2982,13,"idTokenSubscription"],[3459,32,2982,32],[3459,33,2982,33,"next"],[3459,37,2982,37],[3459,38,2982,38],[3459,42,2982,42],[3459,43,2982,43,"currentUser"],[3459,54,2982,54],[3459,55,2982,55],[3460,8,2983,8],[3460,12,2983,14,"currentUid"],[3460,22,2983,24],[3460,25,2983,27],[3460,29,2983,31],[3460,30,2983,32,"currentUser"],[3460,41,2983,43],[3460,43,2983,45,"uid"],[3460,46,2983,48],[3460,50,2983,52],[3460,54,2983,56],[3461,8,2984,8],[3461,12,2984,12],[3461,16,2984,16],[3461,17,2984,17,"lastNotifiedUid"],[3461,32,2984,32],[3461,37,2984,37,"currentUid"],[3461,47,2984,47],[3461,49,2984,49],[3462,10,2985,12],[3462,14,2985,16],[3462,15,2985,17,"lastNotifiedUid"],[3462,30,2985,32],[3462,33,2985,35,"currentUid"],[3462,43,2985,45],[3463,10,2986,12],[3463,14,2986,16],[3463,15,2986,17,"authStateSubscription"],[3463,36,2986,38],[3463,37,2986,39,"next"],[3463,41,2986,43],[3463,42,2986,44],[3463,46,2986,48],[3463,47,2986,49,"currentUser"],[3463,58,2986,60],[3463,59,2986,61],[3464,8,2987,8],[3465,6,2988,4],[3466,4,2988,5],[3467,6,2988,5,"key"],[3467,9,2988,5],[3468,6,2988,5,"value"],[3468,11,2988,5],[3468,13,2989,4],[3468,22,2989,4,"registerStateListener"],[3468,43,2989,25,"registerStateListener"],[3468,44,2989,26,"subscription"],[3468,56,2989,38],[3468,58,2989,40,"nextOrObserver"],[3468,72,2989,54],[3468,74,2989,56,"error"],[3468,79,2989,61],[3468,81,2989,63,"completed"],[3468,90,2989,72],[3468,92,2989,74],[3469,8,2990,8],[3469,12,2990,12],[3469,16,2990,16],[3469,17,2990,17,"_deleted"],[3469,25,2990,25],[3469,27,2990,27],[3470,10,2991,12],[3470,17,2991,19],[3470,23,2991,25],[3470,24,2991,27],[3470,25,2991,28],[3471,8,2992,8],[3472,8,2993,8],[3472,12,2993,14,"cb"],[3472,14,2993,16],[3472,17,2993,19],[3472,24,2993,26,"nextOrObserver"],[3472,38,2993,40],[3472,43,2993,45],[3472,53,2993,55],[3472,56,2994,14,"nextOrObserver"],[3472,70,2994,28],[3472,73,2995,14,"nextOrObserver"],[3472,87,2995,28],[3472,88,2995,29,"next"],[3472,92,2995,33],[3472,93,2995,34,"bind"],[3472,97,2995,38],[3472,98,2995,39,"nextOrObserver"],[3472,112,2995,53],[3472,113,2995,54],[3473,8,2996,8],[3473,12,2996,12,"isUnsubscribed"],[3473,26,2996,26],[3473,29,2996,29],[3473,34,2996,34],[3474,8,2997,8],[3474,12,2997,14,"promise"],[3474,19,2997,21],[3474,22,2997,24],[3474,26,2997,28],[3474,27,2997,29,"_isInitialized"],[3474,41,2997,43],[3474,44,2998,14,"Promise"],[3474,51,2998,21],[3474,52,2998,22,"resolve"],[3474,59,2998,29],[3474,60,2998,30],[3474,61,2998,31],[3474,64,2999,14],[3474,68,2999,18],[3474,69,2999,19,"_initializationPromise"],[3474,91,2999,41],[3475,8,3000,8,"_assert"],[3475,15,3000,15],[3475,16,3000,16,"promise"],[3475,23,3000,23],[3475,25,3000,25],[3475,29,3000,29],[3475,31,3000,31],[3475,47,3000,47],[3475,48,3000,48],[3475,82,3000,82],[3475,83,3000,83],[3476,8,3001,8],[3477,8,3002,8],[3478,8,3003,8,"promise"],[3478,15,3003,15],[3478,16,3003,16,"then"],[3478,20,3003,20],[3478,21,3003,21],[3478,27,3003,27],[3479,10,3004,12],[3479,14,3004,16,"isUnsubscribed"],[3479,28,3004,30],[3479,30,3004,32],[3480,12,3005,16],[3481,10,3006,12],[3482,10,3007,12,"cb"],[3482,12,3007,14],[3482,13,3007,15],[3482,17,3007,19],[3482,18,3007,20,"currentUser"],[3482,29,3007,31],[3482,30,3007,32],[3483,8,3008,8],[3483,9,3008,9],[3483,10,3008,10],[3484,8,3009,8],[3484,12,3009,12],[3484,19,3009,19,"nextOrObserver"],[3484,33,3009,33],[3484,38,3009,38],[3484,48,3009,48],[3484,50,3009,50],[3485,10,3010,12],[3485,14,3010,18,"unsubscribe"],[3485,25,3010,29],[3485,28,3010,32,"subscription"],[3485,40,3010,44],[3485,41,3010,45,"addObserver"],[3485,52,3010,56],[3485,53,3010,57,"nextOrObserver"],[3485,67,3010,71],[3485,69,3010,73,"error"],[3485,74,3010,78],[3485,76,3010,80,"completed"],[3485,85,3010,89],[3485,86,3010,90],[3486,10,3011,12],[3486,17,3011,19],[3486,23,3011,25],[3487,12,3012,16,"isUnsubscribed"],[3487,26,3012,30],[3487,29,3012,33],[3487,33,3012,37],[3488,12,3013,16,"unsubscribe"],[3488,23,3013,27],[3488,24,3013,28],[3488,25,3013,29],[3489,10,3014,12],[3489,11,3014,13],[3490,8,3015,8],[3490,9,3015,9],[3490,15,3016,13],[3491,10,3017,12],[3491,14,3017,18,"unsubscribe"],[3491,26,3017,29],[3491,29,3017,32,"subscription"],[3491,41,3017,44],[3491,42,3017,45,"addObserver"],[3491,53,3017,56],[3491,54,3017,57,"nextOrObserver"],[3491,68,3017,71],[3491,69,3017,72],[3492,10,3018,12],[3492,17,3018,19],[3492,23,3018,25],[3493,12,3019,16,"isUnsubscribed"],[3493,26,3019,30],[3493,29,3019,33],[3493,33,3019,37],[3494,12,3020,16,"unsubscribe"],[3494,24,3020,27],[3494,25,3020,28],[3494,26,3020,29],[3495,10,3021,12],[3495,11,3021,13],[3496,8,3022,8],[3497,6,3023,4],[3498,6,3024,4],[3499,0,3025,0],[3500,0,3026,0],[3501,0,3027,0],[3502,0,3028,0],[3503,4,3024,4],[3504,6,3024,4,"key"],[3504,9,3024,4],[3505,6,3024,4,"value"],[3505,11,3024,4],[3506,8,3024,4],[3506,12,3024,4,"_directlySetCurrentUser"],[3506,35,3024,4],[3506,38,3024,4,"_asyncToGenerator"],[3506,55,3024,4],[3506,56,3029,4],[3506,67,3029,33,"user"],[3506,71,3029,37],[3506,73,3029,39],[3507,10,3030,8],[3507,14,3030,12],[3507,18,3030,16],[3507,19,3030,17,"currentUser"],[3507,30,3030,28],[3507,34,3030,32],[3507,38,3030,36],[3507,39,3030,37,"currentUser"],[3507,50,3030,48],[3507,55,3030,53,"user"],[3507,59,3030,57],[3507,61,3030,59],[3508,12,3031,12],[3508,16,3031,16],[3508,17,3031,17,"_currentUser"],[3508,29,3031,29],[3508,30,3031,30,"_stopProactiveRefresh"],[3508,51,3031,51],[3508,52,3031,52],[3508,53,3031,53],[3509,10,3032,8],[3510,10,3033,8],[3510,14,3033,12,"user"],[3510,18,3033,16],[3510,22,3033,20],[3510,26,3033,24],[3510,27,3033,25,"isProactiveRefreshEnabled"],[3510,52,3033,50],[3510,54,3033,52],[3511,12,3034,12,"user"],[3511,16,3034,16],[3511,17,3034,17,"_startProactiveRefresh"],[3511,39,3034,39],[3511,40,3034,40],[3511,41,3034,41],[3512,10,3035,8],[3513,10,3036,8],[3513,14,3036,12],[3513,15,3036,13,"currentUser"],[3513,26,3036,24],[3513,29,3036,27,"user"],[3513,33,3036,31],[3514,10,3037,8],[3514,14,3037,12,"user"],[3514,18,3037,16],[3514,20,3037,18],[3515,12,3038,12],[3515,18,3038,18],[3515,22,3038,22],[3515,23,3038,23,"assertedPersistence"],[3515,42,3038,42],[3515,43,3038,43,"setCurrentUser"],[3515,57,3038,57],[3515,58,3038,58,"user"],[3515,62,3038,62],[3515,63,3038,63],[3516,10,3039,8],[3516,11,3039,9],[3516,17,3040,13],[3517,12,3041,12],[3517,18,3041,18],[3517,22,3041,22],[3517,23,3041,23,"assertedPersistence"],[3517,42,3041,42],[3517,43,3041,43,"removeCurrentUser"],[3517,60,3041,60],[3517,61,3041,61],[3517,62,3041,62],[3518,10,3042,8],[3519,8,3043,4],[3519,9,3043,5],[3520,8,3043,5],[3520,17,3029,10,"directlySetCurrentUser"],[3520,39,3029,32,"directlySetCurrentUser"],[3520,40,3029,32,"_x66"],[3520,44,3029,32],[3521,10,3029,32],[3521,17,3029,32,"_directlySetCurrentUser"],[3521,40,3029,32],[3521,41,3029,32,"apply"],[3521,46,3029,32],[3521,53,3029,32,"arguments"],[3521,62,3029,32],[3522,8,3029,32],[3523,8,3029,32],[3523,15,3029,10,"directlySetCurrentUser"],[3523,37,3029,32],[3524,6,3029,32],[3525,4,3029,32],[3526,6,3029,32,"key"],[3526,9,3029,32],[3527,6,3029,32,"value"],[3527,11,3029,32],[3527,13,3044,4],[3527,22,3044,4,"queue"],[3527,27,3044,9,"queue"],[3527,28,3044,10,"action"],[3527,34,3044,16],[3527,36,3044,18],[3528,8,3045,8],[3529,8,3046,8],[3530,8,3047,8],[3530,12,3047,12],[3530,13,3047,13,"operations"],[3530,23,3047,23],[3530,26,3047,26],[3530,30,3047,30],[3530,31,3047,31,"operations"],[3530,41,3047,41],[3530,42,3047,42,"then"],[3530,46,3047,46],[3530,47,3047,47,"action"],[3530,53,3047,53],[3530,55,3047,55,"action"],[3530,61,3047,61],[3530,62,3047,62],[3531,8,3048,8],[3531,15,3048,15],[3531,19,3048,19],[3531,20,3048,20,"operations"],[3531,30,3048,30],[3532,6,3049,4],[3533,4,3049,5],[3534,6,3049,5,"key"],[3534,9,3049,5],[3535,6,3049,5,"get"],[3535,9,3049,5],[3535,11,3050,4],[3535,20,3050,4,"get"],[3535,21,3050,4],[3535,23,3050,30],[3536,8,3051,8,"_assert"],[3536,15,3051,15],[3536,16,3051,16],[3536,20,3051,20],[3536,21,3051,21,"persistenceManager"],[3536,39,3051,39],[3536,41,3051,41],[3536,45,3051,45],[3536,47,3051,47],[3536,63,3051,63],[3536,64,3051,64],[3536,98,3051,98],[3536,99,3051,99],[3537,8,3052,8],[3537,15,3052,15],[3537,19,3052,19],[3537,20,3052,20,"persistenceManager"],[3537,38,3052,38],[3538,6,3053,4],[3539,4,3053,5],[3540,6,3053,5,"key"],[3540,9,3053,5],[3541,6,3053,5,"value"],[3541,11,3053,5],[3541,13,3054,4],[3541,22,3054,4,"_logFramework"],[3541,35,3054,17,"_logFramework"],[3541,36,3054,18,"framework"],[3541,45,3054,27],[3541,47,3054,29],[3542,8,3055,8],[3542,12,3055,12],[3542,13,3055,13,"framework"],[3542,22,3055,22],[3542,26,3055,26],[3542,30,3055,30],[3542,31,3055,31,"frameworks"],[3542,41,3055,41],[3542,42,3055,42,"includes"],[3542,50,3055,50],[3542,51,3055,51,"framework"],[3542,60,3055,60],[3542,61,3055,61],[3542,63,3055,63],[3543,10,3056,12],[3544,8,3057,8],[3545,8,3058,8],[3545,12,3058,12],[3545,13,3058,13,"frameworks"],[3545,23,3058,23],[3545,24,3058,24,"push"],[3545,28,3058,28],[3545,29,3058,29,"framework"],[3545,38,3058,38],[3545,39,3058,39],[3546,8,3059,8],[3547,8,3060,8],[3548,8,3061,8],[3548,12,3061,12],[3548,13,3061,13,"frameworks"],[3548,23,3061,23],[3548,24,3061,24,"sort"],[3548,28,3061,28],[3548,29,3061,29],[3548,30,3061,30],[3549,8,3062,8],[3549,12,3062,12],[3549,13,3062,13,"clientVersion"],[3549,26,3062,26],[3549,29,3062,29,"_getClientVersion"],[3549,46,3062,46],[3549,47,3062,47],[3549,51,3062,51],[3549,52,3062,52,"config"],[3549,58,3062,58],[3549,59,3062,59,"clientPlatform"],[3549,73,3062,73],[3549,75,3062,75],[3549,79,3062,79],[3549,80,3062,80,"_getFrameworks"],[3549,94,3062,94],[3549,95,3062,95],[3549,96,3062,96],[3549,97,3062,97],[3550,6,3063,4],[3551,4,3063,5],[3552,6,3063,5,"key"],[3552,9,3063,5],[3553,6,3063,5,"value"],[3553,11,3063,5],[3553,13,3064,4],[3553,22,3064,4,"_getFrameworks"],[3553,36,3064,18,"_getFrameworks"],[3553,37,3064,18],[3553,39,3064,21],[3554,8,3065,8],[3554,15,3065,15],[3554,19,3065,19],[3554,20,3065,20,"frameworks"],[3554,30,3065,30],[3555,6,3066,4],[3556,4,3066,5],[3557,6,3066,5,"key"],[3557,9,3066,5],[3558,6,3066,5,"value"],[3558,11,3066,5],[3559,8,3066,5],[3559,12,3066,5,"_getAdditionalHeaders2"],[3559,34,3066,5],[3559,37,3066,5,"_asyncToGenerator"],[3559,54,3066,5],[3559,55,3067,4],[3559,68,3067,34],[3560,10,3068,8],[3561,10,3069,8],[3561,14,3069,14,"headers"],[3561,21,3069,21],[3561,24,3069,24],[3562,12,3070,12],[3562,13,3070,13],[3562,31,3070,31],[3562,32,3070,32],[3562,68,3070,68],[3562,72,3070,72],[3562,73,3070,73,"clientVersion"],[3563,10,3071,8],[3563,11,3071,9],[3564,10,3072,8],[3564,14,3072,12],[3564,18,3072,16],[3564,19,3072,17,"app"],[3564,22,3072,20],[3564,23,3072,21,"options"],[3564,30,3072,28],[3564,31,3072,29,"appId"],[3564,36,3072,34],[3564,38,3072,36],[3565,12,3073,12,"headers"],[3565,19,3073,19],[3565,20,3073,20],[3565,38,3073,38],[3565,39,3073,39],[3565,73,3073,73],[3565,76,3073,76],[3565,80,3073,80],[3565,81,3073,81,"app"],[3565,84,3073,84],[3565,85,3073,85,"options"],[3565,92,3073,92],[3565,93,3073,93,"appId"],[3565,98,3073,98],[3566,10,3074,8],[3567,10,3075,8],[3568,10,3076,8],[3568,14,3076,14,"heartbeatsHeader"],[3568,30,3076,30],[3568,39,3076,39],[3568,43,3076,43],[3568,44,3076,44,"heartbeatServiceProvider"],[3568,68,3076,68],[3568,69,3077,13,"getImmediate"],[3568,81,3077,25],[3568,82,3077,26],[3569,12,3078,12,"optional"],[3569,20,3078,20],[3569,22,3078,22],[3570,10,3079,8],[3570,11,3079,9],[3570,12,3079,10],[3570,14,3080,14,"getHeartbeatsHeader"],[3570,33,3080,33],[3570,34,3080,34],[3570,35,3080,35],[3571,10,3081,8],[3571,14,3081,12,"heartbeatsHeader"],[3571,30,3081,28],[3571,32,3081,30],[3572,12,3082,12,"headers"],[3572,19,3082,19],[3572,20,3082,20],[3572,39,3082,39],[3572,40,3082,40],[3572,75,3082,75],[3572,78,3082,78,"heartbeatsHeader"],[3572,94,3082,94],[3573,10,3083,8],[3574,10,3084,8],[3575,10,3085,8],[3575,14,3085,14,"appCheckToken"],[3575,27,3085,27],[3575,36,3085,36],[3575,40,3085,40],[3575,41,3085,41,"_getAppCheckToken"],[3575,58,3085,58],[3575,59,3085,59],[3575,60,3085,60],[3576,10,3086,8],[3576,14,3086,12,"appCheckToken"],[3576,27,3086,25],[3576,29,3086,27],[3577,12,3087,12,"headers"],[3577,19,3087,19],[3577,20,3087,20],[3577,41,3087,41],[3577,42,3087,42],[3577,80,3087,80],[3577,83,3087,83,"appCheckToken"],[3577,96,3087,96],[3578,10,3088,8],[3579,10,3089,8],[3579,17,3089,15,"headers"],[3579,24,3089,22],[3580,8,3090,4],[3580,9,3090,5],[3581,8,3090,5],[3581,17,3067,10,"_getAdditionalHeaders"],[3581,38,3067,31,"_getAdditionalHeaders"],[3581,39,3067,31],[3582,10,3067,31],[3582,17,3067,31,"_getAdditionalHeaders2"],[3582,39,3067,31],[3582,40,3067,31,"apply"],[3582,45,3067,31],[3582,52,3067,31,"arguments"],[3582,61,3067,31],[3583,8,3067,31],[3584,8,3067,31],[3584,15,3067,10,"_getAdditionalHeaders"],[3584,36,3067,31],[3585,6,3067,31],[3586,4,3067,31],[3587,6,3067,31,"key"],[3587,9,3067,31],[3588,6,3067,31,"value"],[3588,11,3067,31],[3589,8,3067,31],[3589,12,3067,31,"_getAppCheckToken2"],[3589,30,3067,31],[3589,33,3067,31,"_asyncToGenerator"],[3589,50,3067,31],[3589,51,3091,4],[3589,64,3091,30],[3590,10,3092,8],[3590,14,3092,12,"app"],[3590,17,3092,15],[3590,18,3092,16,"_isFirebaseServerApp"],[3590,38,3092,36],[3590,39,3092,37],[3590,43,3092,41],[3590,44,3092,42,"app"],[3590,47,3092,45],[3590,48,3092,46],[3590,52,3092,50],[3590,56,3092,54],[3590,57,3092,55,"app"],[3590,60,3092,58],[3590,61,3092,59,"settings"],[3590,69,3092,67],[3590,70,3092,68,"appCheckToken"],[3590,83,3092,81],[3590,85,3092,83],[3591,12,3093,12],[3591,19,3093,19],[3591,23,3093,23],[3591,24,3093,24,"app"],[3591,27,3093,27],[3591,28,3093,28,"settings"],[3591,36,3093,36],[3591,37,3093,37,"appCheckToken"],[3591,50,3093,50],[3592,10,3094,8],[3593,10,3095,8],[3593,14,3095,14,"appCheckTokenResult"],[3593,33,3095,33],[3593,42,3095,42],[3593,46,3095,46],[3593,47,3095,47,"appCheckServiceProvider"],[3593,70,3095,70],[3593,71,3096,13,"getImmediate"],[3593,83,3096,25],[3593,84,3096,26],[3594,12,3096,28,"optional"],[3594,20,3096,36],[3594,22,3096,38],[3595,10,3096,43],[3595,11,3096,44],[3595,12,3096,45],[3595,14,3097,14,"getToken"],[3595,22,3097,22],[3595,23,3097,23],[3595,24,3097,24],[3596,10,3098,8],[3596,14,3098,12,"appCheckTokenResult"],[3596,33,3098,31],[3596,35,3098,33,"error"],[3596,40,3098,38],[3596,42,3098,40],[3597,12,3099,12],[3598,12,3100,12],[3599,12,3101,12],[3600,12,3102,12],[3601,12,3103,12,"_logWarn"],[3601,20,3103,20],[3601,21,3103,21],[3601,64,3103,64,"appCheckTokenResult"],[3601,83,3103,83],[3601,84,3103,84,"error"],[3601,89,3103,89],[3601,91,3103,91],[3601,92,3103,92],[3602,10,3104,8],[3603,10,3105,8],[3603,17,3105,15,"appCheckTokenResult"],[3603,36,3105,34],[3603,38,3105,36,"token"],[3603,43,3105,41],[3604,8,3106,4],[3604,9,3106,5],[3605,8,3106,5],[3605,17,3091,10,"_getAppCheckToken"],[3605,34,3091,27,"_getAppCheckToken"],[3605,35,3091,27],[3606,10,3091,27],[3606,17,3091,27,"_getAppCheckToken2"],[3606,35,3091,27],[3606,36,3091,27,"apply"],[3606,41,3091,27],[3606,48,3091,27,"arguments"],[3606,57,3091,27],[3607,8,3091,27],[3608,8,3091,27],[3608,15,3091,10,"_getAppCheckToken"],[3608,32,3091,27],[3609,6,3091,27],[3610,4,3091,27],[3611,2,3091,27],[3612,2,3108,0],[3613,0,3109,0],[3614,0,3110,0],[3615,0,3111,0],[3616,0,3112,0],[3617,0,3113,0],[3618,2,3114,0],[3618,11,3114,9,"_castAuth"],[3618,20,3114,18,"_castAuth"],[3618,21,3114,19,"auth"],[3618,25,3114,23],[3618,27,3114,25],[3619,4,3115,4],[3619,11,3115,11,"util"],[3619,15,3115,15],[3619,16,3115,16,"getModularInstance"],[3619,34,3115,34],[3619,35,3115,35,"auth"],[3619,39,3115,39],[3619,40,3115,40],[3620,2,3116,0],[3621,2,3117,0],[3622,2,3117,0],[3622,6,3118,6,"Subscription"],[3622,18,3118,18],[3623,4,3119,4],[3623,13,3119,4,"Subscription"],[3623,26,3119,16,"auth"],[3623,30,3119,20],[3623,32,3119,22],[3624,6,3119,22,"_classCallCheck"],[3624,21,3119,22],[3624,28,3119,22,"Subscription"],[3624,40,3119,22],[3625,6,3120,8],[3625,10,3120,12],[3625,11,3120,13,"auth"],[3625,15,3120,17],[3625,18,3120,20,"auth"],[3625,22,3120,24],[3626,6,3121,8],[3626,10,3121,12],[3626,11,3121,13,"observer"],[3626,19,3121,21],[3626,22,3121,24],[3626,26,3121,28],[3627,6,3122,8],[3627,10,3122,12],[3627,11,3122,13,"addObserver"],[3627,22,3122,24],[3627,25,3122,27,"util"],[3627,29,3122,31],[3627,30,3122,32,"createSubscribe"],[3627,45,3122,47],[3627,46,3122,48,"observer"],[3627,54,3122,56],[3627,58,3122,61],[3627,62,3122,65],[3627,63,3122,66,"observer"],[3627,71,3122,74],[3627,74,3122,77,"observer"],[3627,82,3122,86],[3627,83,3122,87],[3628,4,3123,4],[3629,4,3123,5],[3629,11,3123,5,"_createClass"],[3629,23,3123,5],[3629,24,3123,5,"Subscription"],[3629,36,3123,5],[3630,6,3123,5,"key"],[3630,9,3123,5],[3631,6,3123,5,"get"],[3631,9,3123,5],[3631,11,3124,4],[3631,20,3124,4,"get"],[3631,21,3124,4],[3631,23,3124,15],[3632,8,3125,8,"_assert"],[3632,15,3125,15],[3632,16,3125,16],[3632,20,3125,20],[3632,21,3125,21,"observer"],[3632,29,3125,29],[3632,31,3125,31],[3632,35,3125,35],[3632,36,3125,36,"auth"],[3632,40,3125,40],[3632,42,3125,42],[3632,58,3125,58],[3632,59,3125,59],[3632,93,3125,93],[3632,94,3125,94],[3633,8,3126,8],[3633,15,3126,15],[3633,19,3126,19],[3633,20,3126,20,"observer"],[3633,28,3126,28],[3633,29,3126,29,"next"],[3633,33,3126,33],[3633,34,3126,34,"bind"],[3633,38,3126,38],[3633,39,3126,39],[3633,43,3126,43],[3633,44,3126,44,"observer"],[3633,52,3126,52],[3633,53,3126,53],[3634,6,3127,4],[3635,4,3127,5],[3636,2,3127,5],[3637,2,3130,0],[3638,0,3131,0],[3639,0,3132,0],[3640,0,3133,0],[3641,0,3134,0],[3642,0,3135,0],[3643,0,3136,0],[3644,0,3137,0],[3645,0,3138,0],[3646,0,3139,0],[3647,0,3140,0],[3648,0,3141,0],[3649,0,3142,0],[3650,0,3143,0],[3651,0,3144,0],[3652,0,3145,0],[3653,2,3146,0],[3653,6,3146,4,"externalJSProvider"],[3653,24,3146,22],[3653,27,3146,25],[3654,4,3147,10,"loadJS"],[3654,10,3147,16,"loadJS"],[3654,11,3147,16],[3654,13,3147,19],[3655,6,3147,19],[3655,13,3147,19,"_asyncToGenerator"],[3655,30,3147,19],[3656,8,3148,8],[3656,14,3148,14],[3656,18,3148,18,"Error"],[3656,23,3148,23],[3656,24,3148,24],[3656,57,3148,57],[3656,58,3148,58],[3657,6,3148,59],[3658,4,3149,4],[3658,5,3149,5],[3659,4,3150,4,"recaptchaV2Script"],[3659,21,3150,21],[3659,23,3150,23],[3659,25,3150,25],[3660,4,3151,4,"recaptchaEnterpriseScript"],[3660,29,3151,29],[3660,31,3151,31],[3660,33,3151,33],[3661,4,3152,4,"gapiScript"],[3661,14,3152,14],[3661,16,3152,16],[3662,2,3153,0],[3662,3,3153,1],[3663,2,3154,0],[3663,11,3154,9,"_setExternalJSProvider"],[3663,33,3154,31,"_setExternalJSProvider"],[3663,34,3154,32,"p"],[3663,35,3154,33],[3663,37,3154,35],[3664,4,3155,4,"externalJSProvider"],[3664,22,3155,22],[3664,25,3155,25,"p"],[3664,26,3155,26],[3665,2,3156,0],[3666,2,3157,0],[3666,11,3157,9,"_loadJS"],[3666,18,3157,16,"_loadJS"],[3666,19,3157,17,"url"],[3666,22,3157,20],[3666,24,3157,22],[3667,4,3158,4],[3667,11,3158,11,"externalJSProvider"],[3667,29,3158,29],[3667,30,3158,30,"loadJS"],[3667,36,3158,36],[3667,37,3158,37,"url"],[3667,40,3158,40],[3667,41,3158,41],[3668,2,3159,0],[3669,2,3160,0],[3669,11,3160,9,"_recaptchaV2ScriptUrl"],[3669,32,3160,30,"_recaptchaV2ScriptUrl"],[3669,33,3160,30],[3669,35,3160,33],[3670,4,3161,4],[3670,11,3161,11,"externalJSProvider"],[3670,29,3161,29],[3670,30,3161,30,"recaptchaV2Script"],[3670,47,3161,47],[3671,2,3162,0],[3672,2,3163,0],[3672,11,3163,9,"_recaptchaEnterpriseScriptUrl"],[3672,40,3163,38,"_recaptchaEnterpriseScriptUrl"],[3672,41,3163,38],[3672,43,3163,41],[3673,4,3164,4],[3673,11,3164,11,"externalJSProvider"],[3673,29,3164,29],[3673,30,3164,30,"recaptchaEnterpriseScript"],[3673,55,3164,55],[3674,2,3165,0],[3675,2,3166,0],[3675,11,3166,9,"_gapiScriptUrl"],[3675,25,3166,23,"_gapiScriptUrl"],[3675,26,3166,23],[3675,28,3166,26],[3676,4,3167,4],[3676,11,3167,11,"externalJSProvider"],[3676,29,3167,29],[3676,30,3167,30,"gapiScript"],[3676,40,3167,40],[3677,2,3168,0],[3678,2,3169,0],[3678,11,3169,9,"_generateCallbackName"],[3678,32,3169,30,"_generateCallbackName"],[3678,33,3169,31,"prefix"],[3678,39,3169,37],[3678,41,3169,39],[3679,4,3170,4],[3679,11,3170,11],[3679,16,3170,16,"prefix"],[3679,22,3170,22],[3679,25,3170,25,"Math"],[3679,29,3170,29],[3679,30,3170,30,"floor"],[3679,35,3170,35],[3679,36,3170,36,"Math"],[3679,40,3170,40],[3679,41,3170,41,"random"],[3679,47,3170,47],[3679,48,3170,48],[3679,49,3170,49],[3679,52,3170,52],[3679,59,3170,59],[3679,60,3170,60],[3679,62,3170,62],[3680,2,3171,0],[3682,2,3173,0],[3683,0,3174,0],[3684,0,3175,0],[3685,0,3176,0],[3686,0,3177,0],[3687,0,3178,0],[3688,0,3179,0],[3689,0,3180,0],[3690,0,3181,0],[3691,0,3182,0],[3692,0,3183,0],[3693,0,3184,0],[3694,0,3185,0],[3695,0,3186,0],[3696,0,3187,0],[3697,0,3188,0],[3698,2,3189,0],[3698,6,3189,6,"_SOLVE_TIME_MS"],[3698,20,3189,20],[3698,23,3189,23],[3698,26,3189,26],[3699,2,3190,0],[3699,6,3190,6,"_EXPIRATION_TIME_MS"],[3699,25,3190,25],[3699,28,3190,28],[3699,33,3190,33],[3700,2,3191,0],[3700,6,3191,6,"_WIDGET_ID_START"],[3700,22,3191,22],[3700,25,3191,25],[3700,38,3191,38],[3701,2,3191,39],[3701,6,3192,6,"MockReCaptcha"],[3701,19,3192,19],[3702,4,3193,4],[3702,13,3193,4,"MockReCaptcha"],[3702,27,3193,16,"auth"],[3702,31,3193,20],[3702,33,3193,22],[3703,6,3193,22,"_classCallCheck"],[3703,21,3193,22],[3703,28,3193,22,"MockReCaptcha"],[3703,41,3193,22],[3704,6,3194,8],[3704,10,3194,12],[3704,11,3194,13,"auth"],[3704,15,3194,17],[3704,18,3194,20,"auth"],[3704,22,3194,24],[3705,6,3195,8],[3705,10,3195,12],[3705,11,3195,13,"counter"],[3705,18,3195,20],[3705,21,3195,23,"_WIDGET_ID_START"],[3705,37,3195,39],[3706,6,3196,8],[3706,10,3196,12],[3706,11,3196,13,"_widgets"],[3706,19,3196,21],[3706,22,3196,24],[3706,26,3196,28,"Map"],[3706,29,3196,31],[3706,30,3196,32],[3706,31,3196,33],[3707,4,3197,4],[3708,4,3197,5],[3708,11,3197,5,"_createClass"],[3708,23,3197,5],[3708,24,3197,5,"MockReCaptcha"],[3708,37,3197,5],[3709,6,3197,5,"key"],[3709,9,3197,5],[3710,6,3197,5,"value"],[3710,11,3197,5],[3710,13,3198,4],[3710,22,3198,4,"render"],[3710,28,3198,10,"render"],[3710,29,3198,11,"container"],[3710,38,3198,20],[3710,40,3198,22,"parameters"],[3710,50,3198,32],[3710,52,3198,34],[3711,8,3199,8],[3711,12,3199,14,"id"],[3711,14,3199,16],[3711,17,3199,19],[3711,21,3199,23],[3711,22,3199,24,"counter"],[3711,29,3199,31],[3712,8,3200,8],[3712,12,3200,12],[3712,13,3200,13,"_widgets"],[3712,21,3200,21],[3712,22,3200,22,"set"],[3712,25,3200,25],[3712,26,3200,26,"id"],[3712,28,3200,28],[3712,30,3200,30],[3712,34,3200,34,"MockWidget"],[3712,44,3200,44],[3712,45,3200,45,"container"],[3712,54,3200,54],[3712,56,3200,56],[3712,60,3200,60],[3712,61,3200,61,"auth"],[3712,65,3200,65],[3712,66,3200,66,"name"],[3712,70,3200,70],[3712,72,3200,72,"parameters"],[3712,82,3200,82],[3712,86,3200,86],[3712,87,3200,87],[3712,88,3200,88],[3712,89,3200,89],[3712,90,3200,90],[3713,8,3201,8],[3713,12,3201,12],[3713,13,3201,13,"counter"],[3713,20,3201,20],[3713,22,3201,22],[3714,8,3202,8],[3714,15,3202,15,"id"],[3714,17,3202,17],[3715,6,3203,4],[3716,4,3203,5],[3717,6,3203,5,"key"],[3717,9,3203,5],[3718,6,3203,5,"value"],[3718,11,3203,5],[3718,13,3204,4],[3718,22,3204,4,"reset"],[3718,27,3204,9,"reset"],[3718,28,3204,10,"optWidgetId"],[3718,39,3204,21],[3718,41,3204,23],[3719,8,3205,8],[3719,12,3205,14,"id"],[3719,14,3205,16],[3719,17,3205,19,"optWidgetId"],[3719,28,3205,30],[3719,32,3205,34,"_WIDGET_ID_START"],[3719,48,3205,50],[3720,8,3206,8],[3720,13,3206,13],[3720,17,3206,17],[3720,18,3206,18,"_widgets"],[3720,26,3206,26],[3720,27,3206,27,"get"],[3720,30,3206,30],[3720,31,3206,31,"id"],[3720,33,3206,33],[3720,34,3206,34],[3720,36,3206,36,"delete"],[3720,42,3206,42],[3720,43,3206,43],[3720,44,3206,44],[3721,8,3207,8],[3721,12,3207,12],[3721,13,3207,13,"_widgets"],[3721,21,3207,21],[3721,22,3207,22,"delete"],[3721,28,3207,28],[3721,29,3207,29,"id"],[3721,31,3207,31],[3721,32,3207,32],[3722,6,3208,4],[3723,4,3208,5],[3724,6,3208,5,"key"],[3724,9,3208,5],[3725,6,3208,5,"value"],[3725,11,3208,5],[3725,13,3209,4],[3725,22,3209,4,"getResponse"],[3725,33,3209,15,"getResponse"],[3725,34,3209,16,"optWidgetId"],[3725,45,3209,27],[3725,47,3209,29],[3726,8,3210,8],[3726,12,3210,14,"id"],[3726,14,3210,16],[3726,17,3210,19,"optWidgetId"],[3726,28,3210,30],[3726,32,3210,34,"_WIDGET_ID_START"],[3726,48,3210,50],[3727,8,3211,8],[3727,15,3211,15],[3727,19,3211,19],[3727,20,3211,20,"_widgets"],[3727,28,3211,28],[3727,29,3211,29,"get"],[3727,32,3211,32],[3727,33,3211,33,"id"],[3727,35,3211,35],[3727,36,3211,36],[3727,38,3211,38,"getResponse"],[3727,49,3211,49],[3727,50,3211,50],[3727,51,3211,51],[3727,55,3211,55],[3727,57,3211,57],[3728,6,3212,4],[3729,4,3212,5],[3730,6,3212,5,"key"],[3730,9,3212,5],[3731,6,3212,5,"value"],[3731,11,3212,5],[3732,8,3212,5],[3732,12,3212,5,"_execute"],[3732,20,3212,5],[3732,23,3212,5,"_asyncToGenerator"],[3732,40,3212,5],[3732,41,3213,4],[3732,52,3213,18,"optWidgetId"],[3732,63,3213,29],[3732,65,3213,31],[3733,10,3214,8],[3733,14,3214,14,"id"],[3733,16,3214,16],[3733,19,3214,19,"optWidgetId"],[3733,30,3214,30],[3733,34,3214,34,"_WIDGET_ID_START"],[3733,50,3214,50],[3734,10,3215,8],[3734,15,3215,13],[3734,19,3215,17],[3734,20,3215,18,"_widgets"],[3734,28,3215,26],[3734,29,3215,27,"get"],[3734,32,3215,30],[3734,33,3215,31,"id"],[3734,35,3215,33],[3734,36,3215,34],[3734,38,3215,36,"execute"],[3734,45,3215,43],[3734,46,3215,44],[3734,47,3215,45],[3735,10,3216,8],[3735,17,3216,15],[3735,19,3216,17],[3736,8,3217,4],[3736,9,3217,5],[3737,8,3217,5],[3737,17,3213,10,"execute"],[3737,24,3213,17,"execute"],[3737,25,3213,17,"_x67"],[3737,29,3213,17],[3738,10,3213,17],[3738,17,3213,17,"_execute"],[3738,25,3213,17],[3738,26,3213,17,"apply"],[3738,31,3213,17],[3738,38,3213,17,"arguments"],[3738,47,3213,17],[3739,8,3213,17],[3740,8,3213,17],[3740,15,3213,10,"execute"],[3740,22,3213,17],[3741,6,3213,17],[3742,4,3213,17],[3743,2,3213,17],[3744,2,3213,17],[3744,6,3219,6,"MockGreCAPTCHATopLevel"],[3744,28,3219,28],[3745,4,3220,4],[3745,13,3220,4,"MockGreCAPTCHATopLevel"],[3745,36,3220,4],[3745,38,3220,18],[3746,6,3220,18,"_classCallCheck"],[3746,21,3220,18],[3746,28,3220,18,"MockGreCAPTCHATopLevel"],[3746,50,3220,18],[3747,6,3221,8],[3747,10,3221,12],[3747,11,3221,13,"enterprise"],[3747,21,3221,23],[3747,24,3221,26],[3747,28,3221,30,"MockGreCAPTCHA"],[3747,42,3221,44],[3747,43,3221,45],[3747,44,3221,46],[3748,4,3222,4],[3749,4,3222,5],[3749,11,3222,5,"_createClass"],[3749,23,3222,5],[3749,24,3222,5,"MockGreCAPTCHATopLevel"],[3749,46,3222,5],[3750,6,3222,5,"key"],[3750,9,3222,5],[3751,6,3222,5,"value"],[3751,11,3222,5],[3751,13,3223,4],[3751,22,3223,4,"ready"],[3751,27,3223,9,"ready"],[3751,28,3223,10,"callback"],[3751,36,3223,18],[3751,38,3223,20],[3752,8,3224,8,"callback"],[3752,16,3224,16],[3752,17,3224,17],[3752,18,3224,18],[3753,6,3225,4],[3754,4,3225,5],[3755,6,3225,5,"key"],[3755,9,3225,5],[3756,6,3225,5,"value"],[3756,11,3225,5],[3756,13,3226,4],[3756,22,3226,4,"execute"],[3756,29,3226,11,"execute"],[3757,6,3227,4],[3758,6,3228,4,"_siteKey"],[3758,14,3228,12],[3758,16,3228,14,"_options"],[3758,24,3228,22],[3758,26,3228,24],[3759,8,3229,8],[3759,15,3229,15,"Promise"],[3759,22,3229,22],[3759,23,3229,23,"resolve"],[3759,30,3229,30],[3759,31,3229,31],[3759,38,3229,38],[3759,39,3229,39],[3760,6,3230,4],[3761,4,3230,5],[3762,6,3230,5,"key"],[3762,9,3230,5],[3763,6,3230,5,"value"],[3763,11,3230,5],[3763,13,3231,4],[3763,22,3231,4,"render"],[3763,28,3231,10,"render"],[3764,6,3232,4],[3765,6,3233,4,"_container"],[3765,16,3233,14],[3765,18,3233,16,"_parameters"],[3765,29,3233,27],[3765,31,3233,29],[3766,8,3234,8],[3766,15,3234,15],[3766,17,3234,17],[3767,6,3235,4],[3768,4,3235,5],[3769,2,3235,5],[3770,2,3235,5],[3770,6,3237,6,"MockGreCAPTCHA"],[3770,20,3237,20],[3771,4,3237,20],[3771,13,3237,20,"MockGreCAPTCHA"],[3771,28,3237,20],[3772,6,3237,20,"_classCallCheck"],[3772,21,3237,20],[3772,28,3237,20,"MockGreCAPTCHA"],[3772,42,3237,20],[3773,4,3237,20],[3774,4,3237,20],[3774,11,3237,20,"_createClass"],[3774,23,3237,20],[3774,24,3237,20,"MockGreCAPTCHA"],[3774,38,3237,20],[3775,6,3237,20,"key"],[3775,9,3237,20],[3776,6,3237,20,"value"],[3776,11,3237,20],[3776,13,3238,4],[3776,22,3238,4,"ready"],[3776,27,3238,9,"ready"],[3776,28,3238,10,"callback"],[3776,36,3238,18],[3776,38,3238,20],[3777,8,3239,8,"callback"],[3777,16,3239,16],[3777,17,3239,17],[3777,18,3239,18],[3778,6,3240,4],[3779,4,3240,5],[3780,6,3240,5,"key"],[3780,9,3240,5],[3781,6,3240,5,"value"],[3781,11,3240,5],[3781,13,3241,4],[3781,22,3241,4,"execute"],[3781,29,3241,11,"execute"],[3782,6,3242,4],[3783,6,3243,4,"_siteKey"],[3783,14,3243,12],[3783,16,3243,14,"_options"],[3783,24,3243,22],[3783,26,3243,24],[3784,8,3244,8],[3784,15,3244,15,"Promise"],[3784,22,3244,22],[3784,23,3244,23,"resolve"],[3784,30,3244,30],[3784,31,3244,31],[3784,38,3244,38],[3784,39,3244,39],[3785,6,3245,4],[3786,4,3245,5],[3787,6,3245,5,"key"],[3787,9,3245,5],[3788,6,3245,5,"value"],[3788,11,3245,5],[3788,13,3246,4],[3788,22,3246,4,"render"],[3788,28,3246,10,"render"],[3789,6,3247,4],[3790,6,3248,4,"_container"],[3790,16,3248,14],[3790,18,3248,16,"_parameters"],[3790,29,3248,27],[3790,31,3248,29],[3791,8,3249,8],[3791,15,3249,15],[3791,17,3249,17],[3792,6,3250,4],[3793,4,3250,5],[3794,2,3250,5],[3795,2,3250,5],[3795,6,3252,6,"MockWidget"],[3795,16,3252,16],[3796,4,3253,4],[3796,13,3253,4,"MockWidget"],[3796,24,3253,16,"containerOrId"],[3796,37,3253,29],[3796,39,3253,31,"appName"],[3796,46,3253,38],[3796,48,3253,40,"params"],[3796,54,3253,46],[3796,56,3253,48],[3797,6,3253,48,"_classCallCheck"],[3797,21,3253,48],[3797,28,3253,48,"MockWidget"],[3797,38,3253,48],[3798,6,3254,8],[3798,10,3254,12],[3798,11,3254,13,"params"],[3798,17,3254,19],[3798,20,3254,22,"params"],[3798,26,3254,28],[3799,6,3255,8],[3799,10,3255,12],[3799,11,3255,13,"timerId"],[3799,18,3255,20],[3799,21,3255,23],[3799,25,3255,27],[3800,6,3256,8],[3800,10,3256,12],[3800,11,3256,13,"deleted"],[3800,18,3256,20],[3800,21,3256,23],[3800,26,3256,28],[3801,6,3257,8],[3801,10,3257,12],[3801,11,3257,13,"responseToken"],[3801,24,3257,26],[3801,27,3257,29],[3801,31,3257,33],[3802,6,3258,8],[3802,10,3258,12],[3802,11,3258,13,"clickHandler"],[3802,23,3258,25],[3802,26,3258,28],[3802,32,3258,34],[3803,8,3259,12],[3803,12,3259,16],[3803,13,3259,17,"execute"],[3803,20,3259,24],[3803,21,3259,25],[3803,22,3259,26],[3804,6,3260,8],[3804,7,3260,9],[3805,6,3261,8],[3805,10,3261,14,"container"],[3805,19,3261,23],[3805,22,3261,26],[3805,29,3261,33,"containerOrId"],[3805,42,3261,46],[3805,47,3261,51],[3805,55,3261,59],[3805,58,3262,14,"document"],[3805,66,3262,22],[3805,67,3262,23,"getElementById"],[3805,81,3262,37],[3805,82,3262,38,"containerOrId"],[3805,95,3262,51],[3805,96,3262,52],[3805,99,3263,14,"containerOrId"],[3805,112,3263,27],[3806,6,3264,8,"_assert"],[3806,13,3264,15],[3806,14,3264,16,"container"],[3806,23,3264,25],[3806,25,3264,27],[3806,41,3264,43],[3806,42,3264,44],[3806,78,3264,80],[3807,8,3264,82,"appName"],[3808,6,3264,90],[3808,7,3264,91],[3808,8,3264,92],[3809,6,3265,8],[3809,10,3265,12],[3809,11,3265,13,"container"],[3809,20,3265,22],[3809,23,3265,25,"container"],[3809,32,3265,34],[3810,6,3266,8],[3810,10,3266,12],[3810,11,3266,13,"isVisible"],[3810,20,3266,22],[3810,23,3266,25],[3810,27,3266,29],[3810,28,3266,30,"params"],[3810,34,3266,36],[3810,35,3266,37,"size"],[3810,39,3266,41],[3810,44,3266,46],[3810,55,3266,57],[3811,6,3267,8],[3811,10,3267,12],[3811,14,3267,16],[3811,15,3267,17,"isVisible"],[3811,24,3267,26],[3811,26,3267,28],[3812,8,3268,12],[3812,12,3268,16],[3812,13,3268,17,"execute"],[3812,20,3268,24],[3812,21,3268,25],[3812,22,3268,26],[3813,6,3269,8],[3813,7,3269,9],[3813,13,3270,13],[3814,8,3271,12],[3814,12,3271,16],[3814,13,3271,17,"container"],[3814,22,3271,26],[3814,23,3271,27,"addEventListener"],[3814,39,3271,43],[3814,40,3271,44],[3814,47,3271,51],[3814,49,3271,53],[3814,53,3271,57],[3814,54,3271,58,"clickHandler"],[3814,66,3271,70],[3814,67,3271,71],[3815,6,3272,8],[3816,4,3273,4],[3817,4,3273,5],[3817,11,3273,5,"_createClass"],[3817,23,3273,5],[3817,24,3273,5,"MockWidget"],[3817,34,3273,5],[3818,6,3273,5,"key"],[3818,9,3273,5],[3819,6,3273,5,"value"],[3819,11,3273,5],[3819,13,3274,4],[3819,22,3274,4,"getResponse"],[3819,33,3274,15,"getResponse"],[3819,34,3274,15],[3819,36,3274,18],[3820,8,3275,8],[3820,12,3275,12],[3820,13,3275,13,"checkIfDeleted"],[3820,27,3275,27],[3820,28,3275,28],[3820,29,3275,29],[3821,8,3276,8],[3821,15,3276,15],[3821,19,3276,19],[3821,20,3276,20,"responseToken"],[3821,33,3276,33],[3822,6,3277,4],[3823,4,3277,5],[3824,6,3277,5,"key"],[3824,9,3277,5],[3825,6,3277,5,"value"],[3825,11,3277,5],[3825,13,3278,4],[3825,22,3278,4,"delete"],[3825,29,3278,10,"delete"],[3825,30,3278,10],[3825,32,3278,13],[3826,8,3279,8],[3826,12,3279,12],[3826,13,3279,13,"checkIfDeleted"],[3826,27,3279,27],[3826,28,3279,28],[3826,29,3279,29],[3827,8,3280,8],[3827,12,3280,12],[3827,13,3280,13,"deleted"],[3827,20,3280,20],[3827,23,3280,23],[3827,27,3280,27],[3828,8,3281,8],[3828,12,3281,12],[3828,16,3281,16],[3828,17,3281,17,"timerId"],[3828,24,3281,24],[3828,26,3281,26],[3829,10,3282,12,"clearTimeout"],[3829,22,3282,24],[3829,23,3282,25],[3829,27,3282,29],[3829,28,3282,30,"timerId"],[3829,35,3282,37],[3829,36,3282,38],[3830,10,3283,12],[3830,14,3283,16],[3830,15,3283,17,"timerId"],[3830,22,3283,24],[3830,25,3283,27],[3830,29,3283,31],[3831,8,3284,8],[3832,8,3285,8],[3832,12,3285,12],[3832,13,3285,13,"container"],[3832,22,3285,22],[3832,23,3285,23,"removeEventListener"],[3832,42,3285,42],[3832,43,3285,43],[3832,50,3285,50],[3832,52,3285,52],[3832,56,3285,56],[3832,57,3285,57,"clickHandler"],[3832,69,3285,69],[3832,70,3285,70],[3833,6,3286,4],[3834,4,3286,5],[3835,6,3286,5,"key"],[3835,9,3286,5],[3836,6,3286,5,"value"],[3836,11,3286,5],[3836,13,3287,4],[3836,22,3287,4,"execute"],[3836,29,3287,11,"execute"],[3836,30,3287,11],[3836,32,3287,14],[3837,8,3288,8],[3837,12,3288,12],[3837,13,3288,13,"checkIfDeleted"],[3837,27,3288,27],[3837,28,3288,28],[3837,29,3288,29],[3838,8,3289,8],[3838,12,3289,12],[3838,16,3289,16],[3838,17,3289,17,"timerId"],[3838,24,3289,24],[3838,26,3289,26],[3839,10,3290,12],[3840,8,3291,8],[3841,8,3292,8],[3841,12,3292,12],[3841,13,3292,13,"timerId"],[3841,20,3292,20],[3841,23,3292,23,"window"],[3841,29,3292,29],[3841,30,3292,30,"setTimeout"],[3841,40,3292,40],[3841,41,3292,41],[3841,47,3292,47],[3842,10,3293,12],[3842,14,3293,16],[3842,15,3293,17,"responseToken"],[3842,28,3293,30],[3842,31,3293,33,"generateRandomAlphaNumericString"],[3842,63,3293,65],[3842,64,3293,66],[3842,66,3293,68],[3842,67,3293,69],[3843,10,3294,12],[3843,14,3294,12,"_this$params"],[3843,26,3294,12],[3843,29,3294,70],[3843,33,3294,74],[3843,34,3294,75,"params"],[3843,40,3294,81],[3844,12,3294,20,"callback"],[3844,20,3294,28],[3844,23,3294,28,"_this$params"],[3844,35,3294,28],[3844,36,3294,20,"callback"],[3844,44,3294,28],[3845,12,3294,50,"expiredCallback"],[3845,27,3294,65],[3845,30,3294,65,"_this$params"],[3845,42,3294,65],[3845,43,3294,30],[3845,61,3294,48],[3846,10,3295,12],[3846,14,3295,16,"callback"],[3846,22,3295,24],[3846,24,3295,26],[3847,12,3296,16],[3847,16,3296,20],[3848,14,3297,20,"callback"],[3848,22,3297,28],[3848,23,3297,29],[3848,27,3297,33],[3848,28,3297,34,"responseToken"],[3848,41,3297,47],[3848,42,3297,48],[3849,12,3298,16],[3849,13,3298,17],[3849,14,3299,16],[3849,21,3299,23,"e"],[3849,22,3299,24],[3849,24,3299,26],[3849,25,3299,28],[3850,10,3300,12],[3851,10,3301,12],[3851,14,3301,16],[3851,15,3301,17,"timerId"],[3851,22,3301,24],[3851,25,3301,27,"window"],[3851,31,3301,33],[3851,32,3301,34,"setTimeout"],[3851,42,3301,44],[3851,43,3301,45],[3851,49,3301,51],[3852,12,3302,16],[3852,16,3302,20],[3852,17,3302,21,"timerId"],[3852,24,3302,28],[3852,27,3302,31],[3852,31,3302,35],[3853,12,3303,16],[3853,16,3303,20],[3853,17,3303,21,"responseToken"],[3853,30,3303,34],[3853,33,3303,37],[3853,37,3303,41],[3854,12,3304,16],[3854,16,3304,20,"expiredCallback"],[3854,31,3304,35],[3854,33,3304,37],[3855,14,3305,20],[3855,18,3305,24],[3856,16,3306,24,"expiredCallback"],[3856,31,3306,39],[3856,32,3306,40],[3856,33,3306,41],[3857,14,3307,20],[3857,15,3307,21],[3857,16,3308,20],[3857,23,3308,27,"e"],[3857,24,3308,28],[3857,26,3308,30],[3857,27,3308,32],[3858,12,3309,16],[3859,12,3310,16],[3859,16,3310,20],[3859,20,3310,24],[3859,21,3310,25,"isVisible"],[3859,30,3310,34],[3859,32,3310,36],[3860,14,3311,20],[3860,18,3311,24],[3860,19,3311,25,"execute"],[3860,26,3311,32],[3860,27,3311,33],[3860,28,3311,34],[3861,12,3312,16],[3862,10,3313,12],[3862,11,3313,13],[3862,13,3313,15,"_EXPIRATION_TIME_MS"],[3862,32,3313,34],[3862,33,3313,35],[3863,8,3314,8],[3863,9,3314,9],[3863,11,3314,11,"_SOLVE_TIME_MS"],[3863,25,3314,25],[3863,26,3314,26],[3864,6,3315,4],[3865,4,3315,5],[3866,6,3315,5,"key"],[3866,9,3315,5],[3867,6,3315,5,"value"],[3867,11,3315,5],[3867,13,3316,4],[3867,22,3316,4,"checkIfDeleted"],[3867,36,3316,18,"checkIfDeleted"],[3867,37,3316,18],[3867,39,3316,21],[3868,8,3317,8],[3868,12,3317,12],[3868,16,3317,16],[3868,17,3317,17,"deleted"],[3868,24,3317,24],[3868,26,3317,26],[3869,10,3318,12],[3869,16,3318,18],[3869,20,3318,22,"Error"],[3869,25,3318,27],[3869,26,3318,28],[3869,63,3318,65],[3869,64,3318,66],[3870,8,3319,8],[3871,6,3320,4],[3872,4,3320,5],[3873,2,3320,5],[3874,2,3322,0],[3874,11,3322,9,"generateRandomAlphaNumericString"],[3874,43,3322,41,"generateRandomAlphaNumericString"],[3874,44,3322,42,"len"],[3874,47,3322,45],[3874,49,3322,47],[3875,4,3323,4],[3875,8,3323,10,"chars"],[3875,13,3323,15],[3875,16,3323,18],[3875,18,3323,20],[3876,4,3324,4],[3876,8,3324,10,"allowedChars"],[3876,20,3324,22],[3876,23,3324,25],[3876,87,3324,89],[3877,4,3325,4],[3877,9,3325,9],[3877,13,3325,13,"i"],[3877,14,3325,14],[3877,17,3325,17],[3877,18,3325,18],[3877,20,3325,20,"i"],[3877,21,3325,21],[3877,24,3325,24,"len"],[3877,27,3325,27],[3877,29,3325,29,"i"],[3877,30,3325,30],[3877,32,3325,32],[3877,34,3325,34],[3878,6,3326,8,"chars"],[3878,11,3326,13],[3878,12,3326,14,"push"],[3878,16,3326,18],[3878,17,3326,19,"allowedChars"],[3878,29,3326,31],[3878,30,3326,32,"charAt"],[3878,36,3326,38],[3878,37,3326,39,"Math"],[3878,41,3326,43],[3878,42,3326,44,"floor"],[3878,47,3326,49],[3878,48,3326,50,"Math"],[3878,52,3326,54],[3878,53,3326,55,"random"],[3878,59,3326,61],[3878,60,3326,62],[3878,61,3326,63],[3878,64,3326,66,"allowedChars"],[3878,76,3326,78],[3878,77,3326,79,"length"],[3878,83,3326,85],[3878,84,3326,86],[3878,85,3326,87],[3878,86,3326,88],[3879,4,3327,4],[3880,4,3328,4],[3880,11,3328,11,"chars"],[3880,16,3328,16],[3880,17,3328,17,"join"],[3880,21,3328,21],[3880,22,3328,22],[3880,24,3328,24],[3880,25,3328,25],[3881,2,3329,0],[3883,2,3331,0],[3884,2,3332,0],[3884,6,3332,6,"RECAPTCHA_ENTERPRISE_VERIFIER_TYPE"],[3884,40,3332,40],[3884,43,3332,43],[3884,65,3332,65],[3885,2,3333,0],[3885,6,3333,6,"FAKE_TOKEN"],[3885,16,3333,16],[3885,19,3333,19],[3885,33,3333,33],[3886,2,3333,34],[3886,6,3334,6,"RecaptchaEnterpriseVerifier"],[3886,33,3334,33],[3887,4,3335,4],[3888,0,3336,0],[3889,0,3337,0],[3890,0,3338,0],[3891,0,3339,0],[3892,4,3340,4],[3892,13,3340,4,"RecaptchaEnterpriseVerifier"],[3892,41,3340,16,"authExtern"],[3892,51,3340,26],[3892,53,3340,28],[3893,6,3340,28,"_classCallCheck"],[3893,21,3340,28],[3893,28,3340,28,"RecaptchaEnterpriseVerifier"],[3893,55,3340,28],[3894,6,3341,8],[3895,0,3342,0],[3896,0,3343,0],[3897,6,3344,8],[3897,10,3344,12],[3897,11,3344,13,"type"],[3897,15,3344,17],[3897,18,3344,20,"RECAPTCHA_ENTERPRISE_VERIFIER_TYPE"],[3897,52,3344,54],[3898,6,3345,8],[3898,10,3345,12],[3898,11,3345,13,"auth"],[3898,15,3345,17],[3898,18,3345,20,"_castAuth"],[3898,27,3345,29],[3898,28,3345,30,"authExtern"],[3898,38,3345,40],[3898,39,3345,41],[3899,4,3346,4],[3900,4,3347,4],[3901,0,3348,0],[3902,0,3349,0],[3903,0,3350,0],[3904,0,3351,0],[3905,4,3347,4],[3905,11,3347,4,"_createClass"],[3905,23,3347,4],[3905,24,3347,4,"RecaptchaEnterpriseVerifier"],[3905,51,3347,4],[3906,6,3347,4,"key"],[3906,9,3347,4],[3907,6,3347,4,"value"],[3907,11,3347,4],[3908,8,3347,4],[3908,12,3347,4,"_verify"],[3908,19,3347,4],[3908,22,3347,4,"_asyncToGenerator"],[3908,39,3347,4],[3908,40,3352,4],[3908,53,3352,58],[3909,10,3352,58],[3909,14,3352,17,"action"],[3909,20,3352,23],[3909,23,3352,23,"arguments"],[3909,32,3352,23],[3909,33,3352,23,"length"],[3909,39,3352,23],[3909,47,3352,23,"arguments"],[3909,56,3352,23],[3909,64,3352,23,"undefined"],[3909,73,3352,23],[3909,76,3352,23,"arguments"],[3909,85,3352,23],[3909,91,3352,26],[3909,99,3352,34],[3910,10,3352,34],[3910,14,3352,36,"forceRefresh"],[3910,26,3352,48],[3910,29,3352,48,"arguments"],[3910,38,3352,48],[3910,39,3352,48,"length"],[3910,45,3352,48],[3910,53,3352,48,"arguments"],[3910,62,3352,48],[3910,70,3352,48,"undefined"],[3910,79,3352,48],[3910,82,3352,48,"arguments"],[3910,91,3352,48],[3910,97,3352,51],[3910,102,3352,56],[3911,10,3352,56],[3911,19,3353,23,"retrieveSiteKey"],[3911,34,3353,38,"retrieveSiteKey"],[3911,35,3353,38,"_x68"],[3911,39,3353,38],[3912,12,3353,38],[3912,19,3353,38,"_retrieveSiteKey"],[3912,35,3353,38],[3912,36,3353,38,"apply"],[3912,41,3353,38],[3912,48,3353,38,"arguments"],[3912,57,3353,38],[3913,10,3353,38],[3914,10,3353,38],[3914,19,3353,38,"_retrieveSiteKey"],[3914,36,3353,38],[3915,12,3353,38,"_retrieveSiteKey"],[3915,28,3353,38],[3915,31,3353,38,"_asyncToGenerator"],[3915,48,3353,38],[3915,49,3353,8],[3915,60,3353,39,"auth"],[3915,64,3353,43],[3915,66,3353,45],[3916,14,3354,12],[3916,18,3354,16],[3916,19,3354,17,"forceRefresh"],[3916,31,3354,29],[3916,33,3354,31],[3917,16,3355,16],[3917,20,3355,20,"auth"],[3917,24,3355,24],[3917,25,3355,25,"tenantId"],[3917,33,3355,33],[3917,37,3355,37],[3917,41,3355,41],[3917,45,3355,45,"auth"],[3917,49,3355,49],[3917,50,3355,50,"_agentRecaptchaConfig"],[3917,71,3355,71],[3917,75,3355,75],[3917,79,3355,79],[3917,81,3355,81],[3918,18,3356,20],[3918,25,3356,27,"auth"],[3918,29,3356,31],[3918,30,3356,32,"_agentRecaptchaConfig"],[3918,51,3356,53],[3918,52,3356,54,"siteKey"],[3918,59,3356,61],[3919,16,3357,16],[3920,16,3358,16],[3920,20,3358,20,"auth"],[3920,24,3358,24],[3920,25,3358,25,"tenantId"],[3920,33,3358,33],[3920,37,3358,37],[3920,41,3358,41],[3920,45,3359,20,"auth"],[3920,49,3359,24],[3920,50,3359,25,"_tenantRecaptchaConfigs"],[3920,73,3359,48],[3920,74,3359,49,"auth"],[3920,78,3359,53],[3920,79,3359,54,"tenantId"],[3920,87,3359,62],[3920,88,3359,63],[3920,93,3359,68,"undefined"],[3920,102,3359,77],[3920,104,3359,79],[3921,18,3360,20],[3921,25,3360,27,"auth"],[3921,29,3360,31],[3921,30,3360,32,"_tenantRecaptchaConfigs"],[3921,53,3360,55],[3921,54,3360,56,"auth"],[3921,58,3360,60],[3921,59,3360,61,"tenantId"],[3921,67,3360,69],[3921,68,3360,70],[3921,69,3360,71,"siteKey"],[3921,76,3360,78],[3922,16,3361,16],[3923,14,3362,12],[3924,14,3363,12],[3924,21,3363,19],[3924,25,3363,23,"Promise"],[3924,32,3363,30],[3925,16,3363,30],[3925,20,3363,30,"_ref10"],[3925,26,3363,30],[3925,29,3363,30,"_asyncToGenerator"],[3925,46,3363,30],[3925,47,3363,31],[3925,58,3363,38,"resolve"],[3925,65,3363,45],[3925,67,3363,47,"reject"],[3925,73,3363,53],[3925,75,3363,58],[3926,18,3364,16,"getRecaptchaConfig"],[3926,36,3364,34],[3926,37,3364,35,"auth"],[3926,41,3364,39],[3926,43,3364,41],[3927,20,3365,20,"clientType"],[3927,30,3365,30],[3927,32,3365,32],[3927,49,3365,49],[3927,50,3365,50],[3928,20,3366,20,"version"],[3928,27,3366,27],[3928,29,3366,29],[3928,51,3366,51],[3928,52,3366,52],[3929,18,3367,16],[3929,19,3367,17],[3929,20,3367,18],[3929,21,3368,21,"then"],[3929,25,3368,25],[3929,26,3368,26,"response"],[3929,34,3368,34],[3929,38,3368,38],[3930,20,3369,20],[3930,24,3369,24,"response"],[3930,32,3369,32],[3930,33,3369,33,"recaptchaKey"],[3930,45,3369,45],[3930,50,3369,50,"undefined"],[3930,59,3369,59],[3930,61,3369,61],[3931,22,3370,24,"reject"],[3931,28,3370,30],[3931,29,3370,31],[3931,33,3370,35,"Error"],[3931,38,3370,40],[3931,39,3370,41],[3931,80,3370,82],[3931,81,3370,83],[3931,82,3370,84],[3932,20,3371,20],[3932,21,3371,21],[3932,27,3372,25],[3933,22,3373,24],[3933,26,3373,30,"config"],[3933,32,3373,36],[3933,35,3373,39],[3933,39,3373,43,"RecaptchaConfig"],[3933,54,3373,58],[3933,55,3373,59,"response"],[3933,63,3373,67],[3933,64,3373,68],[3934,22,3374,24],[3934,26,3374,28,"auth"],[3934,30,3374,32],[3934,31,3374,33,"tenantId"],[3934,39,3374,41],[3934,43,3374,45],[3934,47,3374,49],[3934,49,3374,51],[3935,24,3375,28,"auth"],[3935,28,3375,32],[3935,29,3375,33,"_agentRecaptchaConfig"],[3935,50,3375,54],[3935,53,3375,57,"config"],[3935,59,3375,63],[3936,22,3376,24],[3936,23,3376,25],[3936,29,3377,29],[3937,24,3378,28,"auth"],[3937,28,3378,32],[3937,29,3378,33,"_tenantRecaptchaConfigs"],[3937,52,3378,56],[3937,53,3378,57,"auth"],[3937,57,3378,61],[3937,58,3378,62,"tenantId"],[3937,66,3378,70],[3937,67,3378,71],[3937,70,3378,74,"config"],[3937,76,3378,80],[3938,22,3379,24],[3939,22,3380,24],[3939,29,3380,31,"resolve"],[3939,36,3380,38],[3939,37,3380,39,"config"],[3939,43,3380,45],[3939,44,3380,46,"siteKey"],[3939,51,3380,53],[3939,52,3380,54],[3940,20,3381,20],[3941,18,3382,16],[3941,19,3382,17],[3941,20,3382,18],[3941,21,3383,21,"catch"],[3941,26,3383,26],[3941,27,3383,27,"error"],[3941,32,3383,32],[3941,36,3383,36],[3942,20,3384,20,"reject"],[3942,26,3384,26],[3942,27,3384,27,"error"],[3942,32,3384,32],[3942,33,3384,33],[3943,18,3385,16],[3943,19,3385,17],[3943,20,3385,18],[3944,16,3386,12],[3944,17,3386,13],[3945,16,3386,13],[3945,33,3386,13,"_x69"],[3945,37,3386,13],[3945,39,3386,13,"_x70"],[3945,43,3386,13],[3946,18,3386,13],[3946,25,3386,13,"_ref10"],[3946,31,3386,13],[3946,32,3386,13,"apply"],[3946,37,3386,13],[3946,44,3386,13,"arguments"],[3946,53,3386,13],[3947,16,3386,13],[3948,14,3386,13],[3948,18,3386,14],[3949,12,3387,8],[3949,13,3387,9],[3950,12,3387,9],[3950,19,3387,9,"_retrieveSiteKey"],[3950,35,3387,9],[3950,36,3387,9,"apply"],[3950,41,3387,9],[3950,48,3387,9,"arguments"],[3950,57,3387,9],[3951,10,3387,9],[3952,10,3388,8],[3952,19,3388,17,"retrieveRecaptchaToken"],[3952,41,3388,39,"retrieveRecaptchaToken"],[3952,42,3388,40,"siteKey"],[3952,49,3388,47],[3952,51,3388,49,"resolve"],[3952,58,3388,56],[3952,60,3388,58,"reject"],[3952,66,3388,64],[3952,68,3388,66],[3953,12,3389,12],[3953,16,3389,18,"grecaptcha"],[3953,26,3389,28],[3953,29,3389,31,"window"],[3953,35,3389,37],[3953,36,3389,38,"grecaptcha"],[3953,46,3389,48],[3954,12,3390,12],[3954,16,3390,16,"isEnterprise"],[3954,28,3390,28],[3954,29,3390,29,"grecaptcha"],[3954,39,3390,39],[3954,40,3390,40],[3954,42,3390,42],[3955,14,3391,16,"grecaptcha"],[3955,24,3391,26],[3955,25,3391,27,"enterprise"],[3955,35,3391,37],[3955,36,3391,38,"ready"],[3955,41,3391,43],[3955,42,3391,44],[3955,48,3391,50],[3956,16,3392,20,"grecaptcha"],[3956,26,3392,30],[3956,27,3392,31,"enterprise"],[3956,37,3392,41],[3956,38,3393,25,"execute"],[3956,45,3393,32],[3956,46,3393,33,"siteKey"],[3956,53,3393,40],[3956,55,3393,42],[3957,18,3393,44,"action"],[3958,16,3393,51],[3958,17,3393,52],[3958,18,3393,53],[3958,19,3394,25,"then"],[3958,23,3394,29],[3958,24,3394,30,"token"],[3958,29,3394,35],[3958,33,3394,39],[3959,18,3395,24,"resolve"],[3959,25,3395,31],[3959,26,3395,32,"token"],[3959,31,3395,37],[3959,32,3395,38],[3960,16,3396,20],[3960,17,3396,21],[3960,18,3396,22],[3960,19,3397,25,"catch"],[3960,24,3397,30],[3960,25,3397,31],[3960,31,3397,37],[3961,18,3398,24,"resolve"],[3961,25,3398,31],[3961,26,3398,32,"FAKE_TOKEN"],[3961,36,3398,42],[3961,37,3398,43],[3962,16,3399,20],[3962,17,3399,21],[3962,18,3399,22],[3963,14,3400,16],[3963,15,3400,17],[3963,16,3400,18],[3964,12,3401,12],[3964,13,3401,13],[3964,19,3402,17],[3965,14,3403,16,"reject"],[3965,20,3403,22],[3965,21,3403,23,"Error"],[3965,26,3403,28],[3965,27,3403,29],[3965,67,3403,69],[3965,68,3403,70],[3965,69,3403,71],[3966,12,3404,12],[3967,10,3405,8],[3968,10,3406,8],[3969,10,3407,8],[3969,14,3407,12],[3969,18,3407,16],[3969,19,3407,17,"auth"],[3969,23,3407,21],[3969,24,3407,22,"settings"],[3969,32,3407,30],[3969,33,3407,31,"appVerificationDisabledForTesting"],[3969,66,3407,64],[3969,68,3407,66],[3970,12,3408,12],[3970,16,3408,18,"mockRecaptcha"],[3970,29,3408,31],[3970,32,3408,34],[3970,36,3408,38,"MockGreCAPTCHATopLevel"],[3970,58,3408,60],[3970,59,3408,61],[3970,60,3408,62],[3971,12,3409,12],[3971,19,3409,19,"mockRecaptcha"],[3971,32,3409,32],[3971,33,3409,33,"execute"],[3971,40,3409,40],[3971,41,3409,41],[3971,50,3409,50],[3971,52,3409,52],[3972,14,3409,54,"action"],[3972,20,3409,60],[3972,22,3409,62],[3973,12,3409,71],[3973,13,3409,72],[3973,14,3409,73],[3974,10,3410,8],[3975,10,3411,8],[3975,17,3411,15],[3975,21,3411,19,"Promise"],[3975,28,3411,26],[3975,29,3411,27],[3975,30,3411,28,"resolve"],[3975,37,3411,35],[3975,39,3411,37,"reject"],[3975,45,3411,43],[3975,50,3411,48],[3976,12,3412,12,"retrieveSiteKey"],[3976,27,3412,27],[3976,28,3412,28],[3976,32,3412,32],[3976,33,3412,33,"auth"],[3976,37,3412,37],[3976,38,3412,38],[3976,39,3413,17,"then"],[3976,43,3413,21],[3976,44,3413,22,"siteKey"],[3976,51,3413,29],[3976,55,3413,33],[3977,14,3414,16],[3977,18,3414,20],[3977,19,3414,21,"forceRefresh"],[3977,31,3414,33],[3977,35,3414,37,"isEnterprise"],[3977,47,3414,49],[3977,48,3414,50,"window"],[3977,54,3414,56],[3977,55,3414,57,"grecaptcha"],[3977,65,3414,67],[3977,66,3414,68],[3977,68,3414,70],[3978,16,3415,20,"retrieveRecaptchaToken"],[3978,38,3415,42],[3978,39,3415,43,"siteKey"],[3978,46,3415,50],[3978,48,3415,52,"resolve"],[3978,55,3415,59],[3978,57,3415,61,"reject"],[3978,63,3415,67],[3978,64,3415,68],[3979,14,3416,16],[3979,15,3416,17],[3979,21,3417,21],[3980,16,3418,20],[3980,20,3418,24],[3980,27,3418,31,"window"],[3980,33,3418,37],[3980,38,3418,42],[3980,49,3418,53],[3980,51,3418,55],[3981,18,3419,24,"reject"],[3981,24,3419,30],[3981,25,3419,31],[3981,29,3419,35,"Error"],[3981,34,3419,40],[3981,35,3419,41],[3981,83,3419,89],[3981,84,3419,90],[3981,85,3419,91],[3982,18,3420,24],[3983,16,3421,20],[3984,16,3422,20],[3984,20,3422,24,"url"],[3984,23,3422,27],[3984,26,3422,30,"_recaptchaEnterpriseScriptUrl"],[3984,55,3422,59],[3984,56,3422,60],[3984,57,3422,61],[3985,16,3423,20],[3985,20,3423,24,"url"],[3985,23,3423,27],[3985,24,3423,28,"length"],[3985,30,3423,34],[3985,35,3423,39],[3985,36,3423,40],[3985,38,3423,42],[3986,18,3424,24,"url"],[3986,21,3424,27],[3986,25,3424,31,"siteKey"],[3986,32,3424,38],[3987,16,3425,20],[3988,16,3426,20,"_loadJS"],[3988,23,3426,27],[3988,24,3426,28,"url"],[3988,27,3426,31],[3988,28,3426,32],[3988,29,3427,25,"then"],[3988,33,3427,29],[3988,34,3427,30],[3988,40,3427,36],[3989,18,3428,24,"retrieveRecaptchaToken"],[3989,40,3428,46],[3989,41,3428,47,"siteKey"],[3989,48,3428,54],[3989,50,3428,56,"resolve"],[3989,57,3428,63],[3989,59,3428,65,"reject"],[3989,65,3428,71],[3989,66,3428,72],[3990,16,3429,20],[3990,17,3429,21],[3990,18,3429,22],[3990,19,3430,25,"catch"],[3990,24,3430,30],[3990,25,3430,31,"error"],[3990,30,3430,36],[3990,34,3430,40],[3991,18,3431,24,"reject"],[3991,24,3431,30],[3991,25,3431,31,"error"],[3991,30,3431,36],[3991,31,3431,37],[3992,16,3432,20],[3992,17,3432,21],[3992,18,3432,22],[3993,14,3433,16],[3994,12,3434,12],[3994,13,3434,13],[3994,14,3434,14],[3994,15,3435,17,"catch"],[3994,20,3435,22],[3994,21,3435,23,"error"],[3994,26,3435,28],[3994,30,3435,32],[3995,14,3436,16,"reject"],[3995,20,3436,22],[3995,21,3436,23,"error"],[3995,26,3436,28],[3995,27,3436,29],[3996,12,3437,12],[3996,13,3437,13],[3996,14,3437,14],[3997,10,3438,8],[3997,11,3438,9],[3997,12,3438,10],[3998,8,3439,4],[3998,9,3439,5],[3999,8,3439,5],[3999,17,3352,10,"verify"],[3999,23,3352,16,"verify"],[3999,24,3352,16],[4000,10,3352,16],[4000,17,3352,16,"_verify"],[4000,24,3352,16],[4000,25,3352,16,"apply"],[4000,30,3352,16],[4000,37,3352,16,"arguments"],[4000,46,3352,16],[4001,8,3352,16],[4002,8,3352,16],[4002,15,3352,10,"verify"],[4002,21,3352,16],[4003,6,3352,16],[4004,4,3352,16],[4005,2,3352,16],[4006,2,3352,16],[4006,11,3441,15,"injectRecaptchaFields"],[4006,32,3441,36,"injectRecaptchaFields"],[4006,33,3441,36,"_x71"],[4006,37,3441,36],[4006,39,3441,36,"_x72"],[4006,43,3441,36],[4006,45,3441,36,"_x73"],[4006,49,3441,36],[4007,4,3441,36],[4007,11,3441,36,"_injectRecaptchaFields"],[4007,33,3441,36],[4007,34,3441,36,"apply"],[4007,39,3441,36],[4007,46,3441,36,"arguments"],[4007,55,3441,36],[4008,2,3441,36],[4009,2,3441,36],[4009,11,3441,36,"_injectRecaptchaFields"],[4009,34,3441,36],[4010,4,3441,36,"_injectRecaptchaFields"],[4010,26,3441,36],[4010,29,3441,36,"_asyncToGenerator"],[4010,46,3441,36],[4010,47,3441,0],[4010,58,3441,37,"auth"],[4010,62,3441,41],[4010,64,3441,43,"request"],[4010,71,3441,50],[4010,73,3441,52,"action"],[4010,79,3441,58],[4010,81,3441,104],[4011,6,3441,104],[4011,10,3441,60,"isCaptchaResp"],[4011,23,3441,73],[4011,26,3441,73,"arguments"],[4011,35,3441,73],[4011,36,3441,73,"length"],[4011,42,3441,73],[4011,50,3441,73,"arguments"],[4011,59,3441,73],[4011,67,3441,73,"undefined"],[4011,76,3441,73],[4011,79,3441,73,"arguments"],[4011,88,3441,73],[4011,94,3441,76],[4011,99,3441,81],[4012,6,3441,81],[4012,10,3441,83,"isFakeToken"],[4012,21,3441,94],[4012,24,3441,94,"arguments"],[4012,33,3441,94],[4012,34,3441,94,"length"],[4012,40,3441,94],[4012,48,3441,94,"arguments"],[4012,57,3441,94],[4012,65,3441,94,"undefined"],[4012,74,3441,94],[4012,77,3441,94,"arguments"],[4012,86,3441,94],[4012,92,3441,97],[4012,97,3441,102],[4013,6,3442,4],[4013,10,3442,10,"verifier"],[4013,18,3442,18],[4013,21,3442,21],[4013,25,3442,25,"RecaptchaEnterpriseVerifier"],[4013,52,3442,52],[4013,53,3442,53,"auth"],[4013,57,3442,57],[4013,58,3442,58],[4014,6,3443,4],[4014,10,3443,8,"captchaResponse"],[4014,25,3443,23],[4015,6,3444,4],[4015,10,3444,8,"isFakeToken"],[4015,21,3444,19],[4015,23,3444,21],[4016,8,3445,8,"captchaResponse"],[4016,23,3445,23],[4016,26,3445,26,"FAKE_TOKEN"],[4016,36,3445,36],[4017,6,3446,4],[4017,7,3446,5],[4017,13,3447,9],[4018,8,3448,8],[4018,12,3448,12],[4019,10,3449,12,"captchaResponse"],[4019,25,3449,27],[4019,34,3449,36,"verifier"],[4019,42,3449,44],[4019,43,3449,45,"verify"],[4019,49,3449,51],[4019,50,3449,52,"action"],[4019,56,3449,58],[4019,57,3449,59],[4020,8,3450,8],[4020,9,3450,9],[4020,10,3451,8],[4020,17,3451,15,"error"],[4020,22,3451,20],[4020,24,3451,22],[4021,10,3452,12,"captchaResponse"],[4021,25,3452,27],[4021,34,3452,36,"verifier"],[4021,42,3452,44],[4021,43,3452,45,"verify"],[4021,49,3452,51],[4021,50,3452,52,"action"],[4021,56,3452,58],[4021,58,3452,60],[4021,62,3452,64],[4021,63,3452,65],[4022,8,3453,8],[4023,6,3454,4],[4024,6,3455,4],[4024,10,3455,10,"newRequest"],[4024,20,3455,20],[4024,23,3455,23],[4025,8,3455,25],[4025,11,3455,28,"request"],[4026,6,3455,36],[4026,7,3455,37],[4027,6,3456,4],[4027,10,3456,8,"action"],[4027,16,3456,14],[4027,21,3456,19],[4027,39,3456,37],[4027,40,3456,38],[4027,88,3457,8,"action"],[4027,94,3457,14],[4027,99,3457,19],[4027,113,3457,33],[4027,114,3457,34],[4027,156,3457,76],[4028,8,3458,8],[4028,12,3458,12],[4028,33,3458,33],[4028,37,3458,37,"newRequest"],[4028,47,3458,47],[4028,49,3458,49],[4029,10,3459,12],[4029,14,3459,18,"phoneNumber"],[4029,25,3459,29],[4029,28,3459,32,"newRequest"],[4029,38,3459,42],[4029,39,3459,43,"phoneEnrollmentInfo"],[4029,58,3459,62],[4029,59,3459,63,"phoneNumber"],[4029,70,3459,74],[4030,10,3460,12],[4030,14,3460,18,"recaptchaToken"],[4030,28,3460,32],[4030,31,3460,35,"newRequest"],[4030,41,3460,45],[4030,42,3460,46,"phoneEnrollmentInfo"],[4030,61,3460,65],[4030,62,3460,66,"recaptchaToken"],[4030,76,3460,80],[4031,10,3461,12,"Object"],[4031,16,3461,18],[4031,17,3461,19,"assign"],[4031,23,3461,25],[4031,24,3461,26,"newRequest"],[4031,34,3461,36],[4031,36,3461,38],[4032,12,3462,16],[4032,33,3462,37],[4032,35,3462,39],[4033,14,3463,20,"phoneNumber"],[4033,25,3463,31],[4034,14,3464,20,"recaptchaToken"],[4034,28,3464,34],[4035,14,3465,20,"captchaResponse"],[4035,29,3465,35],[4036,14,3466,20],[4036,26,3466,32],[4036,28,3466,34],[4036,45,3466,51],[4036,46,3466,52],[4037,14,3467,20],[4037,32,3467,38],[4037,34,3467,40],[4037,56,3467,62],[4037,57,3467,63],[4038,12,3468,16],[4039,10,3469,12],[4039,11,3469,13],[4039,12,3469,14],[4040,8,3470,8],[4040,9,3470,9],[4040,15,3471,13],[4040,19,3471,17],[4040,36,3471,34],[4040,40,3471,38,"newRequest"],[4040,50,3471,48],[4040,52,3471,50],[4041,10,3472,12],[4041,14,3472,18,"recaptchaToken"],[4041,29,3472,32],[4041,32,3472,35,"newRequest"],[4041,42,3472,45],[4041,43,3472,46,"phoneSignInInfo"],[4041,58,3472,61],[4041,59,3472,62,"recaptchaToken"],[4041,73,3472,76],[4042,10,3473,12,"Object"],[4042,16,3473,18],[4042,17,3473,19,"assign"],[4042,23,3473,25],[4042,24,3473,26,"newRequest"],[4042,34,3473,36],[4042,36,3473,38],[4043,12,3474,16],[4043,29,3474,33],[4043,31,3474,35],[4044,14,3475,20,"recaptchaToken"],[4044,28,3475,34],[4044,30,3475,20,"recaptchaToken"],[4044,45,3475,34],[4045,14,3476,20,"captchaResponse"],[4045,29,3476,35],[4046,14,3477,20],[4046,26,3477,32],[4046,28,3477,34],[4046,45,3477,51],[4046,46,3477,52],[4047,14,3478,20],[4047,32,3478,38],[4047,34,3478,40],[4047,56,3478,62],[4047,57,3478,63],[4048,12,3479,16],[4049,10,3480,12],[4049,11,3480,13],[4049,12,3480,14],[4050,8,3481,8],[4051,8,3482,8],[4051,15,3482,15,"newRequest"],[4051,25,3482,25],[4052,6,3483,4],[4053,6,3484,4],[4053,10,3484,8],[4053,11,3484,9,"isCaptchaResp"],[4053,24,3484,22],[4053,26,3484,24],[4054,8,3485,8,"Object"],[4054,14,3485,14],[4054,15,3485,15,"assign"],[4054,21,3485,21],[4054,22,3485,22,"newRequest"],[4054,32,3485,32],[4054,34,3485,34],[4055,10,3485,36,"captchaResponse"],[4056,8,3485,52],[4056,9,3485,53],[4056,10,3485,54],[4057,6,3486,4],[4057,7,3486,5],[4057,13,3487,9],[4058,8,3488,8,"Object"],[4058,14,3488,14],[4058,15,3488,15,"assign"],[4058,21,3488,21],[4058,22,3488,22,"newRequest"],[4058,32,3488,32],[4058,34,3488,34],[4059,10,3488,36],[4059,23,3488,49],[4059,25,3488,51,"captchaResponse"],[4060,8,3488,67],[4060,9,3488,68],[4060,10,3488,69],[4061,6,3489,4],[4062,6,3490,4,"Object"],[4062,12,3490,10],[4062,13,3490,11,"assign"],[4062,19,3490,17],[4062,20,3490,18,"newRequest"],[4062,30,3490,28],[4062,32,3490,30],[4063,8,3490,32],[4063,20,3490,44],[4063,22,3490,46],[4063,39,3490,63],[4063,40,3490,64],[4064,6,3490,94],[4064,7,3490,95],[4064,8,3490,96],[4065,6,3491,4,"Object"],[4065,12,3491,10],[4065,13,3491,11,"assign"],[4065,19,3491,17],[4065,20,3491,18,"newRequest"],[4065,30,3491,28],[4065,32,3491,30],[4066,8,3492,8],[4066,26,3492,26],[4066,28,3492,28],[4066,50,3492,50],[4066,51,3492,51],[4067,6,3493,4],[4067,7,3493,5],[4067,8,3493,6],[4068,6,3494,4],[4068,13,3494,11,"newRequest"],[4068,23,3494,21],[4069,4,3495,0],[4069,5,3495,1],[4070,4,3495,1],[4070,11,3495,1,"_injectRecaptchaFields"],[4070,33,3495,1],[4070,34,3495,1,"apply"],[4070,39,3495,1],[4070,46,3495,1,"arguments"],[4070,55,3495,1],[4071,2,3495,1],[4072,2,3495,1],[4072,11,3496,15,"handleRecaptchaFlow"],[4072,30,3496,34,"handleRecaptchaFlow"],[4072,31,3496,34,"_x74"],[4072,35,3496,34],[4072,37,3496,34,"_x75"],[4072,41,3496,34],[4072,43,3496,34,"_x76"],[4072,47,3496,34],[4072,49,3496,34,"_x77"],[4072,53,3496,34],[4072,55,3496,34,"_x78"],[4072,59,3496,34],[4073,4,3496,34],[4073,11,3496,34,"_handleRecaptchaFlow"],[4073,31,3496,34],[4073,32,3496,34,"apply"],[4073,37,3496,34],[4073,44,3496,34,"arguments"],[4073,53,3496,34],[4074,2,3496,34],[4075,2,3496,34],[4075,11,3496,34,"_handleRecaptchaFlow"],[4075,32,3496,34],[4076,4,3496,34,"_handleRecaptchaFlow"],[4076,24,3496,34],[4076,27,3496,34,"_asyncToGenerator"],[4076,44,3496,34],[4076,45,3496,0],[4076,56,3496,35,"authInstance"],[4076,68,3496,47],[4076,70,3496,49,"request"],[4076,77,3496,56],[4076,79,3496,58,"actionName"],[4076,89,3496,68],[4076,91,3496,70,"actionMethod"],[4076,103,3496,82],[4076,105,3496,84,"recaptchaAuthProvider"],[4076,126,3496,105],[4076,128,3496,107],[4077,6,3497,4],[4077,10,3497,8,"recaptchaAuthProvider"],[4077,31,3497,29],[4077,36,3497,34],[4077,61,3497,59],[4077,62,3497,60],[4077,115,3497,113],[4078,8,3498,8],[4078,12,3498,12,"authInstance"],[4078,24,3498,24],[4078,25,3499,13,"_getRecaptchaConfig"],[4078,44,3499,32],[4078,45,3499,33],[4078,46,3499,34],[4078,48,3500,14,"isProviderEnabled"],[4078,65,3500,31],[4078,66,3500,32],[4078,91,3500,57],[4078,92,3500,58],[4078,143,3500,109],[4078,144,3500,110],[4078,146,3500,112],[4079,10,3501,12],[4079,14,3501,18,"requestWithRecaptcha"],[4079,34,3501,38],[4079,43,3501,47,"injectRecaptchaFields"],[4079,64,3501,68],[4079,65,3501,69,"authInstance"],[4079,77,3501,81],[4079,79,3501,83,"request"],[4079,86,3501,90],[4079,88,3501,92,"actionName"],[4079,98,3501,102],[4079,100,3501,104,"actionName"],[4079,110,3501,114],[4079,115,3501,119],[4079,127,3501,131],[4079,128,3501,132],[4079,166,3501,170],[4079,167,3501,171],[4080,10,3502,12],[4080,17,3502,19,"actionMethod"],[4080,29,3502,31],[4080,30,3502,32,"authInstance"],[4080,42,3502,44],[4080,44,3502,46,"requestWithRecaptcha"],[4080,64,3502,66],[4080,65,3502,67],[4081,8,3503,8],[4081,9,3503,9],[4081,15,3504,13],[4082,10,3505,12],[4082,17,3505,19,"actionMethod"],[4082,29,3505,31],[4082,30,3505,32,"authInstance"],[4082,42,3505,44],[4082,44,3505,46,"request"],[4082,51,3505,53],[4082,52,3505,54],[4082,53,3505,55,"catch"],[4082,58,3505,60],[4083,12,3505,60],[4083,16,3505,60,"_ref26"],[4083,22,3505,60],[4083,25,3505,60,"_asyncToGenerator"],[4083,42,3505,60],[4083,43,3505,61],[4083,54,3505,68,"error"],[4083,59,3505,73],[4083,61,3505,78],[4084,14,3506,16],[4084,18,3506,20,"error"],[4084,23,3506,25],[4084,24,3506,26,"code"],[4084,28,3506,30],[4084,33,3506,35],[4084,41,3506,43],[4084,66,3506,68],[4084,67,3506,69],[4084,112,3506,114],[4084,114,3506,116],[4085,16,3507,20,"console"],[4085,23,3507,27],[4085,24,3507,28,"log"],[4085,27,3507,31],[4085,28,3507,32],[4085,31,3507,35,"actionName"],[4085,41,3507,45],[4085,167,3507,171],[4085,168,3507,172],[4086,16,3508,20],[4086,20,3508,26,"requestWithRecaptcha"],[4086,41,3508,46],[4086,50,3508,55,"injectRecaptchaFields"],[4086,71,3508,76],[4086,72,3508,77,"authInstance"],[4086,84,3508,89],[4086,86,3508,91,"request"],[4086,93,3508,98],[4086,95,3508,100,"actionName"],[4086,105,3508,110],[4086,107,3508,112,"actionName"],[4086,117,3508,122],[4086,122,3508,127],[4086,134,3508,139],[4086,135,3508,140],[4086,173,3508,178],[4086,174,3508,179],[4087,16,3509,20],[4087,23,3509,27,"actionMethod"],[4087,35,3509,39],[4087,36,3509,40,"authInstance"],[4087,48,3509,52],[4087,50,3509,54,"requestWithRecaptcha"],[4087,71,3509,74],[4087,72,3509,75],[4088,14,3510,16],[4088,15,3510,17],[4088,21,3511,21],[4089,16,3512,20],[4089,23,3512,27,"Promise"],[4089,30,3512,34],[4089,31,3512,35,"reject"],[4089,37,3512,41],[4089,38,3512,42,"error"],[4089,43,3512,47],[4089,44,3512,48],[4090,14,3513,16],[4091,12,3514,12],[4091,13,3514,13],[4092,12,3514,13],[4092,29,3514,13,"_x219"],[4092,34,3514,13],[4093,14,3514,13],[4093,21,3514,13,"_ref26"],[4093,27,3514,13],[4093,28,3514,13,"apply"],[4093,33,3514,13],[4093,40,3514,13,"arguments"],[4093,49,3514,13],[4094,12,3514,13],[4095,10,3514,13],[4095,14,3514,14],[4096,8,3515,8],[4097,6,3516,4],[4097,7,3516,5],[4097,13,3517,9],[4097,17,3517,13,"recaptchaAuthProvider"],[4097,38,3517,34],[4097,43,3517,39],[4097,59,3517,55],[4097,60,3517,56],[4097,104,3517,100],[4098,8,3518,8],[4098,12,3518,12,"authInstance"],[4098,24,3518,24],[4098,25,3519,13,"_getRecaptchaConfig"],[4098,44,3519,32],[4098,45,3519,33],[4098,46,3519,34],[4098,48,3520,14,"isProviderEnabled"],[4098,65,3520,31],[4098,66,3520,32],[4098,82,3520,48],[4098,83,3520,49],[4098,125,3520,91],[4098,126,3520,92],[4098,128,3520,94],[4099,10,3521,12],[4099,14,3521,18,"requestWithRecaptcha"],[4099,36,3521,38],[4099,45,3521,47,"injectRecaptchaFields"],[4099,66,3521,68],[4099,67,3521,69,"authInstance"],[4099,79,3521,81],[4099,81,3521,83,"request"],[4099,88,3521,90],[4099,90,3521,92,"actionName"],[4099,100,3521,102],[4099,101,3521,103],[4100,10,3522,12],[4100,17,3522,19,"actionMethod"],[4100,29,3522,31],[4100,30,3522,32,"authInstance"],[4100,42,3522,44],[4100,44,3522,46,"requestWithRecaptcha"],[4100,66,3522,66],[4100,67,3522,67],[4100,68,3522,68,"catch"],[4100,73,3522,73],[4101,12,3522,73],[4101,16,3522,73,"_ref27"],[4101,22,3522,73],[4101,25,3522,73,"_asyncToGenerator"],[4101,42,3522,73],[4101,43,3522,74],[4101,54,3522,81,"error"],[4101,59,3522,86],[4101,61,3522,91],[4102,14,3523,16],[4102,18,3523,20,"authInstance"],[4102,30,3523,32],[4102,31,3524,21,"_getRecaptchaConfig"],[4102,50,3524,40],[4102,51,3524,41],[4102,52,3524,42],[4102,54,3525,22,"getProviderEnforcementState"],[4102,81,3525,49],[4102,82,3525,50],[4102,98,3525,66],[4102,99,3525,67],[4102,141,3525,109],[4102,142,3525,110],[4102,147,3525,115],[4102,154,3525,122],[4102,155,3525,123],[4102,185,3525,153],[4103,16,3526,20],[4104,16,3527,20],[4104,20,3527,24,"error"],[4104,25,3527,29],[4104,26,3527,30,"code"],[4104,30,3527,34],[4104,35,3527,39],[4104,43,3527,47],[4104,68,3527,72],[4104,69,3527,73],[4104,114,3527,118],[4104,118,3528,24,"error"],[4104,123,3528,29],[4104,124,3528,30,"code"],[4104,128,3528,34],[4104,133,3528,39],[4104,141,3528,47],[4104,165,3528,71],[4104,166,3528,72],[4104,210,3528,116],[4104,212,3528,118],[4105,18,3529,24,"console"],[4105,25,3529,31],[4105,26,3529,32,"log"],[4105,29,3529,35],[4105,30,3529,36],[4105,140,3529,146,"actionName"],[4105,150,3529,156],[4105,158,3529,164],[4105,159,3529,165],[4106,18,3530,24],[4107,18,3531,24],[4108,18,3532,24],[4109,18,3533,24],[4109,22,3533,30,"requestWithRecaptchaFields"],[4109,48,3533,56],[4109,57,3533,65,"injectRecaptchaFields"],[4109,78,3533,86],[4109,79,3533,87,"authInstance"],[4109,91,3533,99],[4109,93,3533,101,"request"],[4109,100,3533,108],[4109,102,3533,110,"actionName"],[4109,112,3533,120],[4109,114,3533,122],[4109,119,3533,127],[4110,18,3533,129],[4111,18,3534,24],[4111,22,3534,28],[4111,23,3534,29],[4112,18,3535,24],[4112,19,3535,25],[4113,18,3536,24],[4114,18,3537,24],[4114,25,3537,31,"actionMethod"],[4114,37,3537,43],[4114,38,3537,44,"authInstance"],[4114,50,3537,56],[4114,52,3537,58,"requestWithRecaptchaFields"],[4114,78,3537,84],[4114,79,3537,85],[4115,16,3538,20],[4116,14,3539,16],[4117,14,3540,16],[4118,14,3541,16],[4118,21,3541,23,"Promise"],[4118,28,3541,30],[4118,29,3541,31,"reject"],[4118,35,3541,37],[4118,36,3541,38,"error"],[4118,41,3541,43],[4118,42,3541,44],[4119,12,3542,12],[4119,13,3542,13],[4120,12,3542,13],[4120,29,3542,13,"_x220"],[4120,34,3542,13],[4121,14,3542,13],[4121,21,3542,13,"_ref27"],[4121,27,3542,13],[4121,28,3542,13,"apply"],[4121,33,3542,13],[4121,40,3542,13,"arguments"],[4121,49,3542,13],[4122,12,3542,13],[4123,10,3542,13],[4123,14,3542,14],[4124,8,3543,8],[4124,9,3543,9],[4124,15,3544,13],[4125,10,3545,12],[4126,10,3546,12],[4126,14,3546,18,"requestWithRecaptchaFields"],[4126,40,3546,44],[4126,49,3546,53,"injectRecaptchaFields"],[4126,70,3546,74],[4126,71,3546,75,"authInstance"],[4126,83,3546,87],[4126,85,3546,89,"request"],[4126,92,3546,96],[4126,94,3546,98,"actionName"],[4126,104,3546,108],[4126,106,3546,110],[4126,111,3546,115],[4127,10,3546,117],[4128,10,3547,12],[4128,14,3547,16],[4128,15,3547,17],[4129,10,3548,12],[4129,11,3548,13],[4130,10,3549,12],[4131,10,3550,12],[4131,17,3550,19,"actionMethod"],[4131,29,3550,31],[4131,30,3550,32,"authInstance"],[4131,42,3550,44],[4131,44,3550,46,"requestWithRecaptchaFields"],[4131,70,3550,72],[4131,71,3550,73],[4132,8,3551,8],[4133,6,3552,4],[4133,7,3552,5],[4133,13,3553,9],[4134,8,3554,8],[4134,15,3554,15,"Promise"],[4134,22,3554,22],[4134,23,3554,23,"reject"],[4134,29,3554,29],[4134,30,3554,30,"recaptchaAuthProvider"],[4134,51,3554,51],[4134,54,3554,54],[4134,83,3554,83],[4134,84,3554,84],[4135,6,3555,4],[4136,4,3556,0],[4136,5,3556,1],[4137,4,3556,1],[4137,11,3556,1,"_handleRecaptchaFlow"],[4137,31,3556,1],[4137,32,3556,1,"apply"],[4137,37,3556,1],[4137,44,3556,1,"arguments"],[4137,53,3556,1],[4138,2,3556,1],[4139,2,3556,1],[4139,11,3557,15,"_initializeRecaptchaConfig"],[4139,37,3557,41,"_initializeRecaptchaConfig"],[4139,38,3557,41,"_x79"],[4139,42,3557,41],[4140,4,3557,41],[4140,11,3557,41,"_initializeRecaptchaConfig2"],[4140,38,3557,41],[4140,39,3557,41,"apply"],[4140,44,3557,41],[4140,51,3557,41,"arguments"],[4140,60,3557,41],[4141,2,3557,41],[4142,2,3576,0],[4143,0,3577,0],[4144,0,3578,0],[4145,0,3579,0],[4146,0,3580,0],[4147,0,3581,0],[4148,0,3582,0],[4149,0,3583,0],[4150,0,3584,0],[4151,0,3585,0],[4152,0,3586,0],[4153,0,3587,0],[4154,0,3588,0],[4155,0,3589,0],[4156,0,3590,0],[4157,0,3591,0],[4158,2,3592,0],[4159,0,3593,0],[4160,0,3594,0],[4161,0,3595,0],[4162,0,3596,0],[4163,0,3597,0],[4164,0,3598,0],[4165,0,3599,0],[4166,0,3600,0],[4167,0,3601,0],[4168,0,3602,0],[4169,0,3603,0],[4170,0,3604,0],[4171,0,3605,0],[4172,0,3606,0],[4173,0,3607,0],[4174,0,3608,0],[4175,0,3609,0],[4176,0,3610,0],[4177,0,3611,0],[4178,0,3612,0],[4179,0,3613,0],[4180,0,3614,0],[4181,0,3615,0],[4182,0,3616,0],[4183,2,3592,0],[4183,11,3592,0,"_initializeRecaptchaConfig2"],[4183,39,3592,0],[4184,4,3592,0,"_initializeRecaptchaConfig2"],[4184,31,3592,0],[4184,34,3592,0,"_asyncToGenerator"],[4184,51,3592,0],[4184,52,3557,0],[4184,63,3557,42,"auth"],[4184,67,3557,46],[4184,69,3557,48],[4185,6,3558,4],[4185,10,3558,10,"authInternal"],[4185,22,3558,22],[4185,25,3558,25,"_castAuth"],[4185,34,3558,34],[4185,35,3558,35,"auth"],[4185,39,3558,39],[4185,40,3558,40],[4186,6,3559,4],[4186,10,3559,10,"response"],[4186,18,3559,18],[4186,27,3559,27,"getRecaptchaConfig"],[4186,45,3559,45],[4186,46,3559,46,"authInternal"],[4186,58,3559,58],[4186,60,3559,60],[4187,8,3560,8,"clientType"],[4187,18,3560,18],[4187,20,3560,20],[4187,37,3560,37],[4187,38,3560,38],[4188,8,3561,8,"version"],[4188,15,3561,15],[4188,17,3561,17],[4188,39,3561,39],[4188,40,3561,40],[4189,6,3562,4],[4189,7,3562,5],[4189,8,3562,6],[4190,6,3563,4],[4190,10,3563,10,"config"],[4190,16,3563,16],[4190,19,3563,19],[4190,23,3563,23,"RecaptchaConfig"],[4190,38,3563,38],[4190,39,3563,39,"response"],[4190,47,3563,47],[4190,48,3563,48],[4191,6,3564,4],[4191,10,3564,8,"authInternal"],[4191,22,3564,20],[4191,23,3564,21,"tenantId"],[4191,31,3564,29],[4191,35,3564,33],[4191,39,3564,37],[4191,41,3564,39],[4192,8,3565,8,"authInternal"],[4192,20,3565,20],[4192,21,3565,21,"_agentRecaptchaConfig"],[4192,42,3565,42],[4192,45,3565,45,"config"],[4192,51,3565,51],[4193,6,3566,4],[4193,7,3566,5],[4193,13,3567,9],[4194,8,3568,8,"authInternal"],[4194,20,3568,20],[4194,21,3568,21,"_tenantRecaptchaConfigs"],[4194,44,3568,44],[4194,45,3568,45,"authInternal"],[4194,57,3568,57],[4194,58,3568,58,"tenantId"],[4194,66,3568,66],[4194,67,3568,67],[4194,70,3568,70,"config"],[4194,76,3568,76],[4195,6,3569,4],[4196,6,3570,4],[4196,10,3570,8,"config"],[4196,16,3570,14],[4196,17,3570,15,"isAnyProviderEnabled"],[4196,37,3570,35],[4196,38,3570,36],[4196,39,3570,37],[4196,41,3570,39],[4197,8,3571,8],[4197,12,3571,14,"verifier"],[4197,20,3571,22],[4197,23,3571,25],[4197,27,3571,29,"RecaptchaEnterpriseVerifier"],[4197,54,3571,56],[4197,55,3571,57,"authInternal"],[4197,67,3571,69],[4197,68,3571,70],[4198,8,3572,8],[4198,13,3572,13,"verifier"],[4198,21,3572,21],[4198,22,3572,22,"verify"],[4198,28,3572,28],[4198,29,3572,29],[4198,30,3572,30],[4199,6,3573,4],[4200,4,3574,0],[4200,5,3574,1],[4201,4,3574,1],[4201,11,3574,1,"_initializeRecaptchaConfig2"],[4201,38,3574,1],[4201,39,3574,1,"apply"],[4201,44,3574,1],[4201,51,3574,1,"arguments"],[4201,60,3574,1],[4202,2,3574,1],[4203,2,3617,0],[4203,11,3617,9,"initializeAuth"],[4203,25,3617,23,"initializeAuth"],[4203,26,3617,24,"app$1"],[4203,31,3617,29],[4203,33,3617,31,"deps"],[4203,37,3617,35],[4203,39,3617,37],[4204,4,3618,4],[4204,8,3618,10,"provider"],[4204,16,3618,18],[4204,19,3618,21,"app"],[4204,22,3618,24],[4204,23,3618,25,"_getProvider"],[4204,35,3618,37],[4204,36,3618,38,"app$1"],[4204,41,3618,43],[4204,43,3618,45],[4204,49,3618,51],[4204,50,3618,52],[4205,4,3619,4],[4205,8,3619,8,"provider"],[4205,16,3619,16],[4205,17,3619,17,"isInitialized"],[4205,30,3619,30],[4205,31,3619,31],[4205,32,3619,32],[4205,34,3619,34],[4206,6,3620,8],[4206,10,3620,14,"auth"],[4206,16,3620,18],[4206,19,3620,21,"provider"],[4206,27,3620,29],[4206,28,3620,30,"getImmediate"],[4206,40,3620,42],[4206,41,3620,43],[4206,42,3620,44],[4207,6,3621,8],[4207,10,3621,14,"initialOptions"],[4207,24,3621,28],[4207,27,3621,31,"provider"],[4207,35,3621,39],[4207,36,3621,40,"getOptions"],[4207,46,3621,50],[4207,47,3621,51],[4207,48,3621,52],[4208,6,3622,8],[4208,10,3622,12,"util"],[4208,14,3622,16],[4208,15,3622,17,"deepEqual"],[4208,24,3622,26],[4208,25,3622,27,"initialOptions"],[4208,39,3622,41],[4208,41,3622,43,"deps"],[4208,45,3622,47],[4208,49,3622,51],[4208,50,3622,52],[4208,51,3622,53],[4208,52,3622,54],[4208,54,3622,56],[4209,8,3623,12],[4209,15,3623,19,"auth"],[4209,21,3623,23],[4210,6,3624,8],[4210,7,3624,9],[4210,13,3625,13],[4211,8,3626,12,"_fail"],[4211,13,3626,17],[4211,14,3626,18,"auth"],[4211,20,3626,22],[4211,22,3626,24],[4211,43,3626,45],[4211,44,3626,46],[4211,83,3626,85],[4211,84,3626,86],[4212,6,3627,8],[4213,4,3628,4],[4214,4,3629,4],[4214,8,3629,10,"auth"],[4214,12,3629,14],[4214,15,3629,17,"provider"],[4214,23,3629,25],[4214,24,3629,26,"initialize"],[4214,34,3629,36],[4214,35,3629,37],[4215,6,3629,39,"options"],[4215,13,3629,46],[4215,15,3629,48,"deps"],[4216,4,3629,53],[4216,5,3629,54],[4216,6,3629,55],[4217,4,3630,4],[4217,11,3630,11,"auth"],[4217,15,3630,15],[4218,2,3631,0],[4219,2,3632,0],[4219,11,3632,9,"_initializeAuthInstance"],[4219,34,3632,32,"_initializeAuthInstance"],[4219,35,3632,33,"auth"],[4219,39,3632,37],[4219,41,3632,39,"deps"],[4219,45,3632,43],[4219,47,3632,45],[4220,4,3633,4],[4220,8,3633,10,"persistence"],[4220,19,3633,21],[4220,22,3633,24,"deps"],[4220,26,3633,28],[4220,28,3633,30,"persistence"],[4220,39,3633,41],[4220,43,3633,45],[4220,45,3633,47],[4221,4,3634,4],[4221,8,3634,10,"hierarchy"],[4221,17,3634,19],[4221,20,3634,22],[4221,21,3634,23,"Array"],[4221,26,3634,28],[4221,27,3634,29,"isArray"],[4221,34,3634,36],[4221,35,3634,37,"persistence"],[4221,46,3634,48],[4221,47,3634,49],[4221,50,3634,52,"persistence"],[4221,61,3634,63],[4221,64,3634,66],[4221,65,3634,67,"persistence"],[4221,76,3634,78],[4221,77,3634,79],[4221,79,3634,81,"map"],[4221,82,3634,84],[4221,83,3634,85,"_getInstance"],[4221,95,3634,97],[4221,96,3634,98],[4222,4,3635,4],[4222,8,3635,8,"deps"],[4222,12,3635,12],[4222,14,3635,14,"errorMap"],[4222,22,3635,22],[4222,24,3635,24],[4223,6,3636,8,"auth"],[4223,10,3636,12],[4223,11,3636,13,"_updateErrorMap"],[4223,26,3636,28],[4223,27,3636,29,"deps"],[4223,31,3636,33],[4223,32,3636,34,"errorMap"],[4223,40,3636,42],[4223,41,3636,43],[4224,4,3637,4],[4225,4,3638,4],[4226,4,3639,4],[4227,4,3640,4],[4228,4,3641,4,"auth"],[4228,8,3641,8],[4228,9,3641,9,"_initializeWithPersistence"],[4228,35,3641,35],[4228,36,3641,36,"hierarchy"],[4228,45,3641,45],[4228,47,3641,47,"deps"],[4228,51,3641,51],[4228,53,3641,53,"popupRedirectResolver"],[4228,74,3641,74],[4228,75,3641,75],[4229,2,3642,0],[4231,2,3644,0],[4232,0,3645,0],[4233,0,3646,0],[4234,0,3647,0],[4235,0,3648,0],[4236,0,3649,0],[4237,0,3650,0],[4238,0,3651,0],[4239,0,3652,0],[4240,0,3653,0],[4241,0,3654,0],[4242,0,3655,0],[4243,0,3656,0],[4244,0,3657,0],[4245,0,3658,0],[4246,0,3659,0],[4247,0,3660,0],[4248,0,3661,0],[4249,0,3662,0],[4250,0,3663,0],[4251,0,3664,0],[4252,0,3665,0],[4253,2,3666,0],[4253,11,3666,9,"connectAuthEmulator"],[4253,30,3666,28,"connectAuthEmulator"],[4253,31,3666,29,"auth"],[4253,35,3666,33],[4253,37,3666,35,"url"],[4253,40,3666,38],[4253,42,3666,40,"options"],[4253,49,3666,47],[4253,51,3666,49],[4254,4,3667,4],[4254,8,3667,10,"authInternal"],[4254,20,3667,22],[4254,23,3667,25,"_castAuth"],[4254,32,3667,34],[4254,33,3667,35,"auth"],[4254,37,3667,39],[4254,38,3667,40],[4255,4,3668,4,"_assert"],[4255,11,3668,11],[4255,12,3668,12],[4255,26,3668,26],[4255,27,3668,27,"test"],[4255,31,3668,31],[4255,32,3668,32,"url"],[4255,35,3668,35],[4255,36,3668,36],[4255,38,3668,38,"authInternal"],[4255,50,3668,50],[4255,52,3668,52],[4255,77,3668,77],[4255,78,3668,78],[4255,121,3668,121],[4255,122,3668,122],[4256,4,3669,4],[4256,8,3669,10,"disableWarnings"],[4256,23,3669,25],[4256,26,3669,28],[4256,27,3669,29],[4256,28,3669,30,"options"],[4256,35,3669,37],[4256,37,3669,39,"disableWarnings"],[4256,52,3669,54],[4257,4,3670,4],[4257,8,3670,10,"protocol"],[4257,16,3670,18],[4257,19,3670,21,"extractProtocol"],[4257,34,3670,36],[4257,35,3670,37,"url"],[4257,38,3670,40],[4257,39,3670,41],[4258,4,3671,4],[4258,8,3671,4,"_extractHostAndPort"],[4258,27,3671,4],[4258,30,3671,27,"extractHostAndPort"],[4258,48,3671,45],[4258,49,3671,46,"url"],[4258,52,3671,49],[4258,53,3671,50],[4259,6,3671,12,"host"],[4259,10,3671,16],[4259,13,3671,16,"_extractHostAndPort"],[4259,32,3671,16],[4259,33,3671,12,"host"],[4259,37,3671,16],[4260,6,3671,18,"port"],[4260,10,3671,22],[4260,13,3671,22,"_extractHostAndPort"],[4260,32,3671,22],[4260,33,3671,18,"port"],[4260,37,3671,22],[4261,4,3672,4],[4261,8,3672,10,"portStr"],[4261,15,3672,17],[4261,18,3672,20,"port"],[4261,22,3672,24],[4261,27,3672,29],[4261,31,3672,33],[4261,34,3672,36],[4261,36,3672,38],[4261,39,3672,41],[4261,43,3672,45,"port"],[4261,47,3672,49],[4261,49,3672,51],[4262,4,3673,4],[4263,4,3674,4],[4263,8,3674,10,"emulator"],[4263,16,3674,18],[4263,19,3674,21],[4264,6,3674,23,"url"],[4264,9,3674,26],[4264,11,3674,28],[4264,14,3674,31,"protocol"],[4264,22,3674,39],[4264,27,3674,44,"host"],[4264,31,3674,48],[4264,34,3674,51,"portStr"],[4264,41,3674,58],[4265,4,3674,62],[4265,5,3674,63],[4266,4,3675,4],[4266,8,3675,10,"emulatorConfig"],[4266,22,3675,24],[4266,25,3675,27,"Object"],[4266,31,3675,33],[4266,32,3675,34,"freeze"],[4266,38,3675,40],[4266,39,3675,41],[4267,6,3676,8,"host"],[4267,10,3676,12],[4268,6,3677,8,"port"],[4268,10,3677,12],[4269,6,3678,8,"protocol"],[4269,14,3678,16],[4269,16,3678,18,"protocol"],[4269,24,3678,26],[4269,25,3678,27,"replace"],[4269,32,3678,34],[4269,33,3678,35],[4269,36,3678,38],[4269,38,3678,40],[4269,40,3678,42],[4269,41,3678,43],[4270,6,3679,8,"options"],[4270,13,3679,15],[4270,15,3679,17,"Object"],[4270,21,3679,23],[4270,22,3679,24,"freeze"],[4270,28,3679,30],[4270,29,3679,31],[4271,8,3679,33,"disableWarnings"],[4272,6,3679,49],[4272,7,3679,50],[4273,4,3680,4],[4273,5,3680,5],[4273,6,3680,6],[4274,4,3681,4],[4275,4,3682,4],[4275,8,3682,8],[4275,9,3682,9,"authInternal"],[4275,21,3682,21],[4275,22,3682,22,"_canInitEmulator"],[4275,38,3682,38],[4275,40,3682,40],[4276,6,3683,8],[4277,6,3684,8],[4278,6,3685,8,"_assert"],[4278,13,3685,15],[4278,14,3685,16,"authInternal"],[4278,26,3685,28],[4278,27,3685,29,"config"],[4278,33,3685,35],[4278,34,3685,36,"emulator"],[4278,42,3685,44],[4278,46,3685,48,"authInternal"],[4278,58,3685,60],[4278,59,3685,61,"emulatorConfig"],[4278,73,3685,75],[4278,75,3685,77,"authInternal"],[4278,87,3685,89],[4278,89,3685,91],[4278,113,3685,115],[4278,114,3685,116],[4278,156,3685,158],[4278,157,3685,159],[4279,6,3686,8],[4280,6,3687,8],[4281,6,3688,8,"_assert"],[4281,13,3688,15],[4281,14,3688,16,"util"],[4281,18,3688,20],[4281,19,3688,21,"deepEqual"],[4281,28,3688,30],[4281,29,3688,31,"emulator"],[4281,37,3688,39],[4281,39,3688,41,"authInternal"],[4281,51,3688,53],[4281,52,3688,54,"config"],[4281,58,3688,60],[4281,59,3688,61,"emulator"],[4281,67,3688,69],[4281,68,3688,70],[4281,72,3689,12,"util"],[4281,76,3689,16],[4281,77,3689,17,"deepEqual"],[4281,86,3689,26],[4281,87,3689,27,"emulatorConfig"],[4281,101,3689,41],[4281,103,3689,43,"authInternal"],[4281,115,3689,55],[4281,116,3689,56,"emulatorConfig"],[4281,130,3689,70],[4281,131,3689,71],[4281,133,3689,73,"authInternal"],[4281,145,3689,85],[4281,147,3689,87],[4281,171,3689,111],[4281,172,3689,112],[4281,214,3689,154],[4281,215,3689,155],[4282,6,3690,8],[4283,6,3691,8],[4284,6,3692,8],[4285,4,3693,4],[4286,4,3694,4,"authInternal"],[4286,16,3694,16],[4286,17,3694,17,"config"],[4286,23,3694,23],[4286,24,3694,24,"emulator"],[4286,32,3694,32],[4286,35,3694,35,"emulator"],[4286,43,3694,43],[4287,4,3695,4,"authInternal"],[4287,16,3695,16],[4287,17,3695,17,"emulatorConfig"],[4287,31,3695,31],[4287,34,3695,34,"emulatorConfig"],[4287,48,3695,48],[4288,4,3696,4,"authInternal"],[4288,16,3696,16],[4288,17,3696,17,"settings"],[4288,25,3696,25],[4288,26,3696,26,"appVerificationDisabledForTesting"],[4288,59,3696,59],[4288,62,3696,62],[4288,66,3696,66],[4289,4,3697,4],[4290,4,3698,4],[4290,8,3698,8,"util"],[4290,12,3698,12],[4290,13,3698,13,"isCloudWorkstation"],[4290,31,3698,31],[4290,32,3698,32,"host"],[4290,36,3698,36],[4290,37,3698,37],[4290,39,3698,39],[4291,6,3699,8],[4291,11,3699,13,"util"],[4291,15,3699,17],[4291,16,3699,18,"pingServer"],[4291,26,3699,28],[4291,27,3699,29],[4291,30,3699,32,"protocol"],[4291,38,3699,40],[4291,43,3699,45,"host"],[4291,47,3699,49],[4291,50,3699,52,"portStr"],[4291,57,3699,59],[4291,59,3699,61],[4291,60,3699,62],[4292,6,3700,8,"util"],[4292,10,3700,12],[4292,11,3700,13,"updateEmulatorBanner"],[4292,31,3700,33],[4292,32,3700,34],[4292,38,3700,40],[4292,40,3700,42],[4292,44,3700,46],[4292,45,3700,47],[4293,4,3701,4],[4293,5,3701,5],[4293,11,3702,9],[4293,15,3702,13],[4293,16,3702,14,"disableWarnings"],[4293,31,3702,29],[4293,33,3702,31],[4294,6,3703,8,"emitEmulatorWarning"],[4294,25,3703,27],[4294,26,3703,28],[4294,27,3703,29],[4295,4,3704,4],[4296,2,3705,0],[4297,2,3706,0],[4297,11,3706,9,"extractProtocol"],[4297,26,3706,24,"extractProtocol"],[4297,27,3706,25,"url"],[4297,30,3706,28],[4297,32,3706,30],[4298,4,3707,4],[4298,8,3707,10,"protocolEnd"],[4298,19,3707,21],[4298,22,3707,24,"url"],[4298,25,3707,27],[4298,26,3707,28,"indexOf"],[4298,33,3707,35],[4298,34,3707,36],[4298,37,3707,39],[4298,38,3707,40],[4299,4,3708,4],[4299,11,3708,11,"protocolEnd"],[4299,22,3708,22],[4299,25,3708,25],[4299,26,3708,26],[4299,29,3708,29],[4299,31,3708,31],[4299,34,3708,34,"url"],[4299,37,3708,37],[4299,38,3708,38,"substr"],[4299,44,3708,44],[4299,45,3708,45],[4299,46,3708,46],[4299,48,3708,48,"protocolEnd"],[4299,59,3708,59],[4299,62,3708,62],[4299,63,3708,63],[4299,64,3708,64],[4300,2,3709,0],[4301,2,3710,0],[4301,11,3710,9,"extractHostAndPort"],[4301,29,3710,27,"extractHostAndPort"],[4301,30,3710,28,"url"],[4301,33,3710,31],[4301,35,3710,33],[4302,4,3711,4],[4302,8,3711,10,"protocol"],[4302,16,3711,18],[4302,19,3711,21,"extractProtocol"],[4302,34,3711,36],[4302,35,3711,37,"url"],[4302,38,3711,40],[4302,39,3711,41],[4303,4,3712,4],[4303,8,3712,10,"authority"],[4303,17,3712,19],[4303,20,3712,22],[4303,38,3712,40],[4303,39,3712,41,"exec"],[4303,43,3712,45],[4303,44,3712,46,"url"],[4303,47,3712,49],[4303,48,3712,50,"substr"],[4303,54,3712,56],[4303,55,3712,57,"protocol"],[4303,63,3712,65],[4303,64,3712,66,"length"],[4303,70,3712,72],[4303,71,3712,73],[4303,72,3712,74],[4303,73,3712,75],[4303,74,3712,76],[4304,4,3713,4],[4304,8,3713,8],[4304,9,3713,9,"authority"],[4304,18,3713,18],[4304,20,3713,20],[4305,6,3714,8],[4305,13,3714,15],[4306,8,3714,17,"host"],[4306,12,3714,21],[4306,14,3714,23],[4306,16,3714,25],[4307,8,3714,27,"port"],[4307,12,3714,31],[4307,14,3714,33],[4308,6,3714,38],[4308,7,3714,39],[4309,4,3715,4],[4310,4,3716,4],[4310,8,3716,10,"hostAndPort"],[4310,19,3716,21],[4310,22,3716,24,"authority"],[4310,31,3716,33],[4310,32,3716,34],[4310,33,3716,35],[4310,34,3716,36],[4310,35,3716,37,"split"],[4310,40,3716,42],[4310,41,3716,43],[4310,44,3716,46],[4310,45,3716,47],[4310,46,3716,48,"pop"],[4310,49,3716,51],[4310,50,3716,52],[4310,51,3716,53],[4310,55,3716,57],[4310,57,3716,59],[4310,58,3716,60],[4310,59,3716,61],[4311,4,3717,4],[4311,8,3717,10,"bracketedIPv6"],[4311,21,3717,23],[4311,24,3717,26],[4311,44,3717,46],[4311,45,3717,47,"exec"],[4311,49,3717,51],[4311,50,3717,52,"hostAndPort"],[4311,61,3717,63],[4311,62,3717,64],[4312,4,3718,4],[4312,8,3718,8,"bracketedIPv6"],[4312,21,3718,21],[4312,23,3718,23],[4313,6,3719,8],[4313,10,3719,14,"host"],[4313,14,3719,18],[4313,17,3719,21,"bracketedIPv6"],[4313,30,3719,34],[4313,31,3719,35],[4313,32,3719,36],[4313,33,3719,37],[4314,6,3720,8],[4314,13,3720,15],[4315,8,3720,17,"host"],[4315,12,3720,21],[4316,8,3720,23,"port"],[4316,12,3720,27],[4316,14,3720,29,"parsePort"],[4316,23,3720,38],[4316,24,3720,39,"hostAndPort"],[4316,35,3720,50],[4316,36,3720,51,"substr"],[4316,42,3720,57],[4316,43,3720,58,"host"],[4316,47,3720,62],[4316,48,3720,63,"length"],[4316,54,3720,69],[4316,57,3720,72],[4316,58,3720,73],[4316,59,3720,74],[4317,6,3720,76],[4317,7,3720,77],[4318,4,3721,4],[4318,5,3721,5],[4318,11,3722,9],[4319,6,3723,8],[4319,10,3723,8,"_hostAndPort$split"],[4319,28,3723,8],[4319,31,3723,29,"hostAndPort"],[4319,42,3723,40],[4319,43,3723,41,"split"],[4319,48,3723,46],[4319,49,3723,47],[4319,52,3723,50],[4319,53,3723,51],[4320,8,3723,51,"_hostAndPort$split2"],[4320,27,3723,51],[4320,30,3723,51,"_slicedToArray"],[4320,44,3723,51],[4320,45,3723,51,"_hostAndPort$split"],[4320,63,3723,51],[4321,8,3723,15,"host"],[4321,13,3723,19],[4321,16,3723,19,"_hostAndPort$split2"],[4321,35,3723,19],[4322,8,3723,21,"port"],[4322,12,3723,25],[4322,15,3723,25,"_hostAndPort$split2"],[4322,34,3723,25],[4323,6,3724,8],[4323,13,3724,15],[4324,8,3724,17,"host"],[4324,12,3724,21],[4324,14,3724,17,"host"],[4324,19,3724,21],[4325,8,3724,23,"port"],[4325,12,3724,27],[4325,14,3724,29,"parsePort"],[4325,23,3724,38],[4325,24,3724,39,"port"],[4325,28,3724,43],[4326,6,3724,45],[4326,7,3724,46],[4327,4,3725,4],[4328,2,3726,0],[4329,2,3727,0],[4329,11,3727,9,"parsePort"],[4329,20,3727,18,"parsePort"],[4329,21,3727,19,"portStr"],[4329,28,3727,26],[4329,30,3727,28],[4330,4,3728,4],[4330,8,3728,8],[4330,9,3728,9,"portStr"],[4330,16,3728,16],[4330,18,3728,18],[4331,6,3729,8],[4331,13,3729,15],[4331,17,3729,19],[4332,4,3730,4],[4333,4,3731,4],[4333,8,3731,10,"port"],[4333,12,3731,14],[4333,15,3731,17,"Number"],[4333,21,3731,23],[4333,22,3731,24,"portStr"],[4333,29,3731,31],[4333,30,3731,32],[4334,4,3732,4],[4334,8,3732,8,"isNaN"],[4334,13,3732,13],[4334,14,3732,14,"port"],[4334,18,3732,18],[4334,19,3732,19],[4334,21,3732,21],[4335,6,3733,8],[4335,13,3733,15],[4335,17,3733,19],[4336,4,3734,4],[4337,4,3735,4],[4337,11,3735,11,"port"],[4337,15,3735,15],[4338,2,3736,0],[4339,2,3737,0],[4339,11,3737,9,"emitEmulatorWarning"],[4339,30,3737,28,"emitEmulatorWarning"],[4339,31,3737,28],[4339,33,3737,31],[4340,4,3738,4],[4340,13,3738,13,"attachBanner"],[4340,25,3738,25,"attachBanner"],[4340,26,3738,25],[4340,28,3738,28],[4341,6,3739,8],[4341,10,3739,14,"el"],[4341,12,3739,16],[4341,15,3739,19,"document"],[4341,23,3739,27],[4341,24,3739,28,"createElement"],[4341,37,3739,41],[4341,38,3739,42],[4341,41,3739,45],[4341,42,3739,46],[4342,6,3740,8],[4342,10,3740,14,"sty"],[4342,13,3740,17],[4342,16,3740,20,"el"],[4342,18,3740,22],[4342,19,3740,23,"style"],[4342,24,3740,28],[4343,6,3741,8,"el"],[4343,8,3741,10],[4343,9,3741,11,"innerText"],[4343,18,3741,20],[4343,21,3742,12],[4343,88,3742,79],[4344,6,3743,8,"sty"],[4344,9,3743,11],[4344,10,3743,12,"position"],[4344,18,3743,20],[4344,21,3743,23],[4344,28,3743,30],[4345,6,3744,8,"sty"],[4345,9,3744,11],[4345,10,3744,12,"width"],[4345,15,3744,17],[4345,18,3744,20],[4345,24,3744,26],[4346,6,3745,8,"sty"],[4346,9,3745,11],[4346,10,3745,12,"backgroundColor"],[4346,25,3745,27],[4346,28,3745,30],[4346,37,3745,39],[4347,6,3746,8,"sty"],[4347,9,3746,11],[4347,10,3746,12,"border"],[4347,16,3746,18],[4347,19,3746,21],[4347,39,3746,41],[4348,6,3747,8,"sty"],[4348,9,3747,11],[4348,10,3747,12,"color"],[4348,15,3747,17],[4348,18,3747,20],[4348,27,3747,29],[4349,6,3748,8,"sty"],[4349,9,3748,11],[4349,10,3748,12,"bottom"],[4349,16,3748,18],[4349,19,3748,21],[4349,24,3748,26],[4350,6,3749,8,"sty"],[4350,9,3749,11],[4350,10,3749,12,"left"],[4350,14,3749,16],[4350,17,3749,19],[4350,22,3749,24],[4351,6,3750,8,"sty"],[4351,9,3750,11],[4351,10,3750,12,"margin"],[4351,16,3750,18],[4351,19,3750,21],[4351,24,3750,26],[4352,6,3751,8,"sty"],[4352,9,3751,11],[4352,10,3751,12,"zIndex"],[4352,16,3751,18],[4352,19,3751,21],[4352,26,3751,28],[4353,6,3752,8,"sty"],[4353,9,3752,11],[4353,10,3752,12,"textAlign"],[4353,19,3752,21],[4353,22,3752,24],[4353,30,3752,32],[4354,6,3753,8,"el"],[4354,8,3753,10],[4354,9,3753,11,"classList"],[4354,18,3753,20],[4354,19,3753,21,"add"],[4354,22,3753,24],[4354,23,3753,25],[4354,50,3753,52],[4354,51,3753,53],[4355,6,3754,8,"document"],[4355,14,3754,16],[4355,15,3754,17,"body"],[4355,19,3754,21],[4355,20,3754,22,"appendChild"],[4355,31,3754,33],[4355,32,3754,34,"el"],[4355,34,3754,36],[4355,35,3754,37],[4356,4,3755,4],[4357,4,3756,4],[4357,8,3756,8],[4357,15,3756,15,"console"],[4357,22,3756,22],[4357,27,3756,27],[4357,38,3756,38],[4357,42,3756,42],[4357,49,3756,49,"console"],[4357,56,3756,56],[4357,57,3756,57,"info"],[4357,61,3756,61],[4357,66,3756,66],[4357,76,3756,76],[4357,78,3756,78],[4358,6,3757,8,"console"],[4358,13,3757,15],[4358,14,3757,16,"info"],[4358,18,3757,20],[4358,19,3757,21],[4358,62,3757,64],[4358,65,3758,12],[4358,126,3758,73],[4358,129,3759,12],[4358,155,3759,38],[4358,156,3759,39],[4359,4,3760,4],[4360,4,3761,4],[4360,8,3761,8],[4360,15,3761,15,"window"],[4360,21,3761,21],[4360,26,3761,26],[4360,37,3761,37],[4360,41,3761,41],[4360,48,3761,48,"document"],[4360,56,3761,56],[4360,61,3761,61],[4360,72,3761,72],[4360,74,3761,74],[4361,6,3762,8],[4361,10,3762,12,"document"],[4361,18,3762,20],[4361,19,3762,21,"readyState"],[4361,29,3762,31],[4361,34,3762,36],[4361,43,3762,45],[4361,45,3762,47],[4362,8,3763,12,"window"],[4362,14,3763,18],[4362,15,3763,19,"addEventListener"],[4362,31,3763,35],[4362,32,3763,36],[4362,50,3763,54],[4362,52,3763,56,"attachBanner"],[4362,64,3763,68],[4362,65,3763,69],[4363,6,3764,8],[4363,7,3764,9],[4363,13,3765,13],[4364,8,3766,12,"attachBanner"],[4364,20,3766,24],[4364,21,3766,25],[4364,22,3766,26],[4365,6,3767,8],[4366,4,3768,4],[4367,2,3769,0],[4369,2,3771,0],[4370,0,3772,0],[4371,0,3773,0],[4372,0,3774,0],[4373,0,3775,0],[4374,0,3776,0],[4375,0,3777,0],[4376,0,3778,0],[4377,0,3779,0],[4378,0,3780,0],[4379,0,3781,0],[4380,0,3782,0],[4381,0,3783,0],[4382,0,3784,0],[4383,0,3785,0],[4384,0,3786,0],[4385,2,3787,0],[4386,0,3788,0],[4387,0,3789,0],[4388,0,3790,0],[4389,0,3791,0],[4390,0,3792,0],[4391,0,3793,0],[4392,0,3794,0],[4393,2,3787,0],[4393,6,3795,6,"AuthCredential"],[4393,20,3795,20],[4394,4,3796,4],[4395,4,3797,4],[4395,13,3797,4,"AuthCredential"],[4396,4,3798,4],[4397,0,3799,0],[4398,0,3800,0],[4399,0,3801,0],[4400,0,3802,0],[4401,0,3803,0],[4402,4,3804,4,"providerId"],[4402,14,3804,14],[4403,4,3805,4],[4404,0,3806,0],[4405,0,3807,0],[4406,0,3808,0],[4407,0,3809,0],[4408,0,3810,0],[4409,0,3811,0],[4410,0,3812,0],[4411,4,3813,4,"signInMethod"],[4411,16,3813,16],[4411,18,3813,18],[4412,6,3813,18,"_classCallCheck"],[4412,21,3813,18],[4412,28,3813,18,"AuthCredential"],[4412,42,3813,18],[4413,6,3814,8],[4413,10,3814,12],[4413,11,3814,13,"providerId"],[4413,21,3814,23],[4413,24,3814,26,"providerId"],[4413,34,3814,36],[4414,6,3815,8],[4414,10,3815,12],[4414,11,3815,13,"signInMethod"],[4414,23,3815,25],[4414,26,3815,28,"signInMethod"],[4414,38,3815,40],[4415,4,3816,4],[4416,4,3817,4],[4417,0,3818,0],[4418,0,3819,0],[4419,0,3820,0],[4420,0,3821,0],[4421,4,3817,4],[4421,11,3817,4,"_createClass"],[4421,23,3817,4],[4421,24,3817,4,"AuthCredential"],[4421,38,3817,4],[4422,6,3817,4,"key"],[4422,9,3817,4],[4423,6,3817,4,"value"],[4423,11,3817,4],[4423,13,3822,4],[4423,22,3822,4,"toJSON"],[4423,28,3822,10,"toJSON"],[4423,29,3822,10],[4423,31,3822,13],[4424,8,3823,8],[4424,15,3823,15,"debugFail"],[4424,24,3823,24],[4424,25,3823,25],[4424,42,3823,42],[4424,43,3823,43],[4425,6,3824,4],[4426,6,3825,4],[4427,4,3825,4],[4428,6,3825,4,"key"],[4428,9,3825,4],[4429,6,3825,4,"value"],[4429,11,3825,4],[4429,13,3826,4],[4429,22,3826,4,"_getIdTokenResponse"],[4429,41,3826,23,"_getIdTokenResponse"],[4429,42,3826,24,"_auth"],[4429,47,3826,29],[4429,49,3826,31],[4430,8,3827,8],[4430,15,3827,15,"debugFail"],[4430,24,3827,24],[4430,25,3827,25],[4430,42,3827,42],[4430,43,3827,43],[4431,6,3828,4],[4432,6,3829,4],[4433,4,3829,4],[4434,6,3829,4,"key"],[4434,9,3829,4],[4435,6,3829,4,"value"],[4435,11,3829,4],[4435,13,3830,4],[4435,22,3830,4,"_linkToIdToken"],[4435,36,3830,18,"_linkToIdToken"],[4435,37,3830,19,"_auth"],[4435,42,3830,24],[4435,44,3830,26,"_idToken"],[4435,52,3830,34],[4435,54,3830,36],[4436,8,3831,8],[4436,15,3831,15,"debugFail"],[4436,24,3831,24],[4436,25,3831,25],[4436,42,3831,42],[4436,43,3831,43],[4437,6,3832,4],[4438,6,3833,4],[4439,4,3833,4],[4440,6,3833,4,"key"],[4440,9,3833,4],[4441,6,3833,4,"value"],[4441,11,3833,4],[4441,13,3834,4],[4441,22,3834,4,"_getReauthenticationResolver"],[4441,50,3834,32,"_getReauthenticationResolver"],[4441,51,3834,33,"_auth"],[4441,56,3834,38],[4441,58,3834,40],[4442,8,3835,8],[4442,15,3835,15,"debugFail"],[4442,24,3835,24],[4442,25,3835,25],[4442,42,3835,42],[4442,43,3835,43],[4443,6,3836,4],[4444,4,3836,5],[4445,2,3836,5],[4446,2,3839,0],[4447,0,3840,0],[4448,0,3841,0],[4449,0,3842,0],[4450,0,3843,0],[4451,0,3844,0],[4452,0,3845,0],[4453,0,3846,0],[4454,0,3847,0],[4455,0,3848,0],[4456,0,3849,0],[4457,0,3850,0],[4458,0,3851,0],[4459,0,3852,0],[4460,0,3853,0],[4461,0,3854,0],[4462,2,3839,0],[4462,11,3855,15,"resetPassword"],[4462,24,3855,28,"resetPassword"],[4462,25,3855,28,"_x80"],[4462,29,3855,28],[4462,31,3855,28,"_x81"],[4462,35,3855,28],[4463,4,3855,28],[4463,11,3855,28,"_resetPassword"],[4463,25,3855,28],[4463,26,3855,28,"apply"],[4463,31,3855,28],[4463,38,3855,28,"arguments"],[4463,47,3855,28],[4464,2,3855,28],[4465,2,3855,28],[4465,11,3855,28,"_resetPassword"],[4465,26,3855,28],[4466,4,3855,28,"_resetPassword"],[4466,18,3855,28],[4466,21,3855,28,"_asyncToGenerator"],[4466,38,3855,28],[4466,39,3855,0],[4466,50,3855,29,"auth"],[4466,54,3855,33],[4466,56,3855,35,"request"],[4466,63,3855,42],[4466,65,3855,44],[4467,6,3856,4],[4467,13,3856,11,"_performApiRequest"],[4467,31,3856,29],[4467,32,3856,30,"auth"],[4467,36,3856,34],[4467,38,3856,36],[4467,44,3856,42],[4467,45,3856,43],[4467,68,3856,66],[4467,96,3856,94],[4467,97,3856,95],[4467,128,3856,126,"_addTidIfNecessary"],[4467,146,3856,144],[4467,147,3856,145,"auth"],[4467,151,3856,149],[4467,153,3856,151,"request"],[4467,160,3856,158],[4467,161,3856,159],[4467,162,3856,160],[4468,4,3857,0],[4468,5,3857,1],[4469,4,3857,1],[4469,11,3857,1,"_resetPassword"],[4469,25,3857,1],[4469,26,3857,1,"apply"],[4469,31,3857,1],[4469,38,3857,1,"arguments"],[4469,47,3857,1],[4470,2,3857,1],[4471,2,3857,1],[4471,11,3858,15,"updateEmailPassword"],[4471,30,3858,34,"updateEmailPassword"],[4471,31,3858,34,"_x82"],[4471,35,3858,34],[4471,37,3858,34,"_x83"],[4471,41,3858,34],[4472,4,3858,34],[4472,11,3858,34,"_updateEmailPassword"],[4472,31,3858,34],[4472,32,3858,34,"apply"],[4472,37,3858,34],[4472,44,3858,34,"arguments"],[4472,53,3858,34],[4473,2,3858,34],[4473,4,3861,0],[4474,2,3862,0],[4475,2,3862,0],[4475,11,3862,0,"_updateEmailPassword"],[4475,32,3862,0],[4476,4,3862,0,"_updateEmailPassword"],[4476,24,3862,0],[4476,27,3862,0,"_asyncToGenerator"],[4476,44,3862,0],[4476,45,3858,0],[4476,56,3858,35,"auth"],[4476,60,3858,39],[4476,62,3858,41,"request"],[4476,69,3858,48],[4476,71,3858,50],[4477,6,3859,4],[4477,13,3859,11,"_performApiRequest"],[4477,31,3859,29],[4477,32,3859,30,"auth"],[4477,36,3859,34],[4477,38,3859,36],[4477,44,3859,42],[4477,45,3859,43],[4477,68,3859,66],[4477,89,3859,87],[4477,90,3859,88],[4477,123,3859,121,"request"],[4477,130,3859,128],[4477,131,3859,129],[4478,4,3860,0],[4478,5,3860,1],[4479,4,3860,1],[4479,11,3860,1,"_updateEmailPassword"],[4479,31,3860,1],[4479,32,3860,1,"apply"],[4479,37,3860,1],[4479,44,3860,1,"arguments"],[4479,53,3860,1],[4480,2,3860,1],[4481,2,3860,1],[4481,11,3863,15,"linkEmailPassword"],[4481,28,3863,32,"linkEmailPassword"],[4481,29,3863,32,"_x84"],[4481,33,3863,32],[4481,35,3863,32,"_x85"],[4481,39,3863,32],[4482,4,3863,32],[4482,11,3863,32,"_linkEmailPassword"],[4482,29,3863,32],[4482,30,3863,32,"apply"],[4482,35,3863,32],[4482,42,3863,32,"arguments"],[4482,51,3863,32],[4483,2,3863,32],[4484,2,3863,32],[4484,11,3863,32,"_linkEmailPassword"],[4484,30,3863,32],[4485,4,3863,32,"_linkEmailPassword"],[4485,22,3863,32],[4485,25,3863,32,"_asyncToGenerator"],[4485,42,3863,32],[4485,43,3863,0],[4485,54,3863,33,"auth"],[4485,58,3863,37],[4485,60,3863,39,"request"],[4485,67,3863,46],[4485,69,3863,48],[4486,6,3864,4],[4486,13,3864,11,"_performApiRequest"],[4486,31,3864,29],[4486,32,3864,30,"auth"],[4486,36,3864,34],[4486,38,3864,36],[4486,44,3864,42],[4486,45,3864,43],[4486,68,3864,66],[4486,89,3864,87],[4486,90,3864,88],[4486,114,3864,112,"request"],[4486,121,3864,119],[4486,122,3864,120],[4487,4,3865,0],[4487,5,3865,1],[4488,4,3865,1],[4488,11,3865,1,"_linkEmailPassword"],[4488,29,3865,1],[4488,30,3865,1,"apply"],[4488,35,3865,1],[4488,42,3865,1,"arguments"],[4488,51,3865,1],[4489,2,3865,1],[4490,2,3865,1],[4490,11,3866,15,"applyActionCode$1"],[4490,28,3866,32,"applyActionCode$1"],[4490,29,3866,32,"_x86"],[4490,33,3866,32],[4490,35,3866,32,"_x87"],[4490,39,3866,32],[4491,4,3866,32],[4491,11,3866,32,"_applyActionCode$"],[4491,28,3866,32],[4491,29,3866,32,"apply"],[4491,34,3866,32],[4491,41,3866,32,"arguments"],[4491,50,3866,32],[4492,2,3866,32],[4493,2,3870,0],[4494,0,3871,0],[4495,0,3872,0],[4496,0,3873,0],[4497,0,3874,0],[4498,0,3875,0],[4499,0,3876,0],[4500,0,3877,0],[4501,0,3878,0],[4502,0,3879,0],[4503,0,3880,0],[4504,0,3881,0],[4505,0,3882,0],[4506,0,3883,0],[4507,0,3884,0],[4508,0,3885,0],[4509,2,3870,0],[4509,11,3870,0,"_applyActionCode$"],[4509,29,3870,0],[4510,4,3870,0,"_applyActionCode$"],[4510,21,3870,0],[4510,24,3870,0,"_asyncToGenerator"],[4510,41,3870,0],[4510,42,3866,0],[4510,53,3866,33,"auth"],[4510,57,3866,37],[4510,59,3866,39,"request"],[4510,66,3866,46],[4510,68,3866,48],[4511,6,3867,4],[4511,13,3867,11,"_performApiRequest"],[4511,31,3867,29],[4511,32,3867,30,"auth"],[4511,36,3867,34],[4511,38,3867,36],[4511,44,3867,42],[4511,45,3867,43],[4511,68,3867,66],[4511,89,3867,87],[4511,90,3867,88],[4511,123,3867,121,"_addTidIfNecessary"],[4511,141,3867,139],[4511,142,3867,140,"auth"],[4511,146,3867,144],[4511,148,3867,146,"request"],[4511,155,3867,153],[4511,156,3867,154],[4511,157,3867,155],[4512,4,3868,0],[4512,5,3868,1],[4513,4,3868,1],[4513,11,3868,1,"_applyActionCode$"],[4513,28,3868,1],[4513,29,3868,1,"apply"],[4513,34,3868,1],[4513,41,3868,1,"arguments"],[4513,50,3868,1],[4514,2,3868,1],[4515,2,3868,1],[4515,11,3886,15,"signInWithPassword"],[4515,29,3886,33,"signInWithPassword"],[4515,30,3886,33,"_x88"],[4515,34,3886,33],[4515,36,3886,33,"_x89"],[4515,40,3886,33],[4516,4,3886,33],[4516,11,3886,33,"_signInWithPassword"],[4516,30,3886,33],[4516,31,3886,33,"apply"],[4516,36,3886,33],[4516,43,3886,33,"arguments"],[4516,52,3886,33],[4517,2,3886,33],[4518,2,3886,33],[4518,11,3886,33,"_signInWithPassword"],[4518,31,3886,33],[4519,4,3886,33,"_signInWithPassword"],[4519,23,3886,33],[4519,26,3886,33,"_asyncToGenerator"],[4519,43,3886,33],[4519,44,3886,0],[4519,55,3886,34,"auth"],[4519,59,3886,38],[4519,61,3886,40,"request"],[4519,68,3886,47],[4519,70,3886,49],[4520,6,3887,4],[4520,13,3887,11,"_performSignInRequest"],[4520,34,3887,32],[4520,35,3887,33,"auth"],[4520,39,3887,37],[4520,41,3887,39],[4520,47,3887,45],[4520,48,3887,46],[4520,71,3887,69],[4520,104,3887,102],[4520,105,3887,103],[4520,143,3887,141,"_addTidIfNecessary"],[4520,161,3887,159],[4520,162,3887,160,"auth"],[4520,166,3887,164],[4520,168,3887,166,"request"],[4520,175,3887,173],[4520,176,3887,174],[4520,177,3887,175],[4521,4,3888,0],[4521,5,3888,1],[4522,4,3888,1],[4522,11,3888,1,"_signInWithPassword"],[4522,30,3888,1],[4522,31,3888,1,"apply"],[4522,36,3888,1],[4522,43,3888,1,"arguments"],[4522,52,3888,1],[4523,2,3888,1],[4524,2,3888,1],[4524,11,3889,15,"sendOobCode"],[4524,22,3889,26,"sendOobCode"],[4524,23,3889,26,"_x90"],[4524,27,3889,26],[4524,29,3889,26,"_x91"],[4524,33,3889,26],[4525,4,3889,26],[4525,11,3889,26,"_sendOobCode"],[4525,23,3889,26],[4525,24,3889,26,"apply"],[4525,29,3889,26],[4525,36,3889,26,"arguments"],[4525,45,3889,26],[4526,2,3889,26],[4527,2,3889,26],[4527,11,3889,26,"_sendOobCode"],[4527,24,3889,26],[4528,4,3889,26,"_sendOobCode"],[4528,16,3889,26],[4528,19,3889,26,"_asyncToGenerator"],[4528,36,3889,26],[4528,37,3889,0],[4528,48,3889,27,"auth"],[4528,52,3889,31],[4528,54,3889,33,"request"],[4528,61,3889,40],[4528,63,3889,42],[4529,6,3890,4],[4529,13,3890,11,"_performApiRequest"],[4529,31,3890,29],[4529,32,3890,30,"auth"],[4529,36,3890,34],[4529,38,3890,36],[4529,44,3890,42],[4529,45,3890,43],[4529,68,3890,66],[4529,94,3890,92],[4529,95,3890,93],[4529,125,3890,123,"_addTidIfNecessary"],[4529,143,3890,141],[4529,144,3890,142,"auth"],[4529,148,3890,146],[4529,150,3890,148,"request"],[4529,157,3890,155],[4529,158,3890,156],[4529,159,3890,157],[4530,4,3891,0],[4530,5,3891,1],[4531,4,3891,1],[4531,11,3891,1,"_sendOobCode"],[4531,23,3891,1],[4531,24,3891,1,"apply"],[4531,29,3891,1],[4531,36,3891,1,"arguments"],[4531,45,3891,1],[4532,2,3891,1],[4533,2,3891,1],[4533,11,3892,15,"sendEmailVerification$1"],[4533,34,3892,38,"sendEmailVerification$1"],[4533,35,3892,38,"_x92"],[4533,39,3892,38],[4533,41,3892,38,"_x93"],[4533,45,3892,38],[4534,4,3892,38],[4534,11,3892,38,"_sendEmailVerification$"],[4534,34,3892,38],[4534,35,3892,38,"apply"],[4534,40,3892,38],[4534,47,3892,38,"arguments"],[4534,56,3892,38],[4535,2,3892,38],[4536,2,3892,38],[4536,11,3892,38,"_sendEmailVerification$"],[4536,35,3892,38],[4537,4,3892,38,"_sendEmailVerification$"],[4537,27,3892,38],[4537,30,3892,38,"_asyncToGenerator"],[4537,47,3892,38],[4537,48,3892,0],[4537,59,3892,39,"auth"],[4537,63,3892,43],[4537,65,3892,45,"request"],[4537,72,3892,52],[4537,74,3892,54],[4538,6,3893,4],[4538,13,3893,11,"sendOobCode"],[4538,24,3893,22],[4538,25,3893,23,"auth"],[4538,29,3893,27],[4538,31,3893,29,"request"],[4538,38,3893,36],[4538,39,3893,37],[4539,4,3894,0],[4539,5,3894,1],[4540,4,3894,1],[4540,11,3894,1,"_sendEmailVerification$"],[4540,34,3894,1],[4540,35,3894,1,"apply"],[4540,40,3894,1],[4540,47,3894,1,"arguments"],[4540,56,3894,1],[4541,2,3894,1],[4542,2,3894,1],[4542,11,3895,15,"sendPasswordResetEmail$1"],[4542,35,3895,39,"sendPasswordResetEmail$1"],[4542,36,3895,39,"_x94"],[4542,40,3895,39],[4542,42,3895,39,"_x95"],[4542,46,3895,39],[4543,4,3895,39],[4543,11,3895,39,"_sendPasswordResetEmail$"],[4543,35,3895,39],[4543,36,3895,39,"apply"],[4543,41,3895,39],[4543,48,3895,39,"arguments"],[4543,57,3895,39],[4544,2,3895,39],[4545,2,3895,39],[4545,11,3895,39,"_sendPasswordResetEmail$"],[4545,36,3895,39],[4546,4,3895,39,"_sendPasswordResetEmail$"],[4546,28,3895,39],[4546,31,3895,39,"_asyncToGenerator"],[4546,48,3895,39],[4546,49,3895,0],[4546,60,3895,40,"auth"],[4546,64,3895,44],[4546,66,3895,46,"request"],[4546,73,3895,53],[4546,75,3895,55],[4547,6,3896,4],[4547,13,3896,11,"sendOobCode"],[4547,24,3896,22],[4547,25,3896,23,"auth"],[4547,29,3896,27],[4547,31,3896,29,"request"],[4547,38,3896,36],[4547,39,3896,37],[4548,4,3897,0],[4548,5,3897,1],[4549,4,3897,1],[4549,11,3897,1,"_sendPasswordResetEmail$"],[4549,35,3897,1],[4549,36,3897,1,"apply"],[4549,41,3897,1],[4549,48,3897,1,"arguments"],[4549,57,3897,1],[4550,2,3897,1],[4551,2,3897,1],[4551,11,3898,15,"sendSignInLinkToEmail$1"],[4551,34,3898,38,"sendSignInLinkToEmail$1"],[4551,35,3898,38,"_x96"],[4551,39,3898,38],[4551,41,3898,38,"_x97"],[4551,45,3898,38],[4552,4,3898,38],[4552,11,3898,38,"_sendSignInLinkToEmail$"],[4552,34,3898,38],[4552,35,3898,38,"apply"],[4552,40,3898,38],[4552,47,3898,38,"arguments"],[4552,56,3898,38],[4553,2,3898,38],[4554,2,3898,38],[4554,11,3898,38,"_sendSignInLinkToEmail$"],[4554,35,3898,38],[4555,4,3898,38,"_sendSignInLinkToEmail$"],[4555,27,3898,38],[4555,30,3898,38,"_asyncToGenerator"],[4555,47,3898,38],[4555,48,3898,0],[4555,59,3898,39,"auth"],[4555,63,3898,43],[4555,65,3898,45,"request"],[4555,72,3898,52],[4555,74,3898,54],[4556,6,3899,4],[4556,13,3899,11,"sendOobCode"],[4556,24,3899,22],[4556,25,3899,23,"auth"],[4556,29,3899,27],[4556,31,3899,29,"request"],[4556,38,3899,36],[4556,39,3899,37],[4557,4,3900,0],[4557,5,3900,1],[4558,4,3900,1],[4558,11,3900,1,"_sendSignInLinkToEmail$"],[4558,34,3900,1],[4558,35,3900,1,"apply"],[4558,40,3900,1],[4558,47,3900,1,"arguments"],[4558,56,3900,1],[4559,2,3900,1],[4560,2,3900,1],[4560,11,3901,15,"verifyAndChangeEmail"],[4560,31,3901,35,"verifyAndChangeEmail"],[4560,32,3901,35,"_x98"],[4560,36,3901,35],[4560,38,3901,35,"_x99"],[4560,42,3901,35],[4561,4,3901,35],[4561,11,3901,35,"_verifyAndChangeEmail"],[4561,32,3901,35],[4561,33,3901,35,"apply"],[4561,38,3901,35],[4561,45,3901,35,"arguments"],[4561,54,3901,35],[4562,2,3901,35],[4563,2,3905,0],[4564,0,3906,0],[4565,0,3907,0],[4566,0,3908,0],[4567,0,3909,0],[4568,0,3910,0],[4569,0,3911,0],[4570,0,3912,0],[4571,0,3913,0],[4572,0,3914,0],[4573,0,3915,0],[4574,0,3916,0],[4575,0,3917,0],[4576,0,3918,0],[4577,0,3919,0],[4578,0,3920,0],[4579,2,3905,0],[4579,11,3905,0,"_verifyAndChangeEmail"],[4579,33,3905,0],[4580,4,3905,0,"_verifyAndChangeEmail"],[4580,25,3905,0],[4580,28,3905,0,"_asyncToGenerator"],[4580,45,3905,0],[4580,46,3901,0],[4580,57,3901,36,"auth"],[4580,61,3901,40],[4580,63,3901,42,"request"],[4580,70,3901,49],[4580,72,3901,51],[4581,6,3902,4],[4581,13,3902,11,"sendOobCode"],[4581,24,3902,22],[4581,25,3902,23,"auth"],[4581,29,3902,27],[4581,31,3902,29,"request"],[4581,38,3902,36],[4581,39,3902,37],[4582,4,3903,0],[4582,5,3903,1],[4583,4,3903,1],[4583,11,3903,1,"_verifyAndChangeEmail"],[4583,32,3903,1],[4583,33,3903,1,"apply"],[4583,38,3903,1],[4583,45,3903,1,"arguments"],[4583,54,3903,1],[4584,2,3903,1],[4585,2,3903,1],[4585,11,3921,15,"signInWithEmailLink$1"],[4585,32,3921,36,"signInWithEmailLink$1"],[4585,33,3921,36,"_x100"],[4585,38,3921,36],[4585,40,3921,36,"_x101"],[4585,45,3921,36],[4586,4,3921,36],[4586,11,3921,36,"_signInWithEmailLink$"],[4586,32,3921,36],[4586,33,3921,36,"apply"],[4586,38,3921,36],[4586,45,3921,36,"arguments"],[4586,54,3921,36],[4587,2,3921,36],[4588,2,3921,36],[4588,11,3921,36,"_signInWithEmailLink$"],[4588,33,3921,36],[4589,4,3921,36,"_signInWithEmailLink$"],[4589,25,3921,36],[4589,28,3921,36,"_asyncToGenerator"],[4589,45,3921,36],[4589,46,3921,0],[4589,57,3921,37,"auth"],[4589,61,3921,41],[4589,63,3921,43,"request"],[4589,70,3921,50],[4589,72,3921,52],[4590,6,3922,4],[4590,13,3922,11,"_performSignInRequest"],[4590,34,3922,32],[4590,35,3922,33,"auth"],[4590,39,3922,37],[4590,41,3922,39],[4590,47,3922,45],[4590,48,3922,46],[4590,71,3922,69],[4590,105,3922,103],[4590,106,3922,104],[4590,146,3922,144,"_addTidIfNecessary"],[4590,164,3922,162],[4590,165,3922,163,"auth"],[4590,169,3922,167],[4590,171,3922,169,"request"],[4590,178,3922,176],[4590,179,3922,177],[4590,180,3922,178],[4591,4,3923,0],[4591,5,3923,1],[4592,4,3923,1],[4592,11,3923,1,"_signInWithEmailLink$"],[4592,32,3923,1],[4592,33,3923,1,"apply"],[4592,38,3923,1],[4592,45,3923,1,"arguments"],[4592,54,3923,1],[4593,2,3923,1],[4594,2,3923,1],[4594,11,3924,15,"signInWithEmailLinkForLinking"],[4594,40,3924,44,"signInWithEmailLinkForLinking"],[4594,41,3924,44,"_x102"],[4594,46,3924,44],[4594,48,3924,44,"_x103"],[4594,53,3924,44],[4595,4,3924,44],[4595,11,3924,44,"_signInWithEmailLinkForLinking"],[4595,41,3924,44],[4595,42,3924,44,"apply"],[4595,47,3924,44],[4595,54,3924,44,"arguments"],[4595,63,3924,44],[4596,2,3924,44],[4597,2,3928,0],[4598,0,3929,0],[4599,0,3930,0],[4600,0,3931,0],[4601,0,3932,0],[4602,0,3933,0],[4603,0,3934,0],[4604,0,3935,0],[4605,0,3936,0],[4606,0,3937,0],[4607,0,3938,0],[4608,0,3939,0],[4609,0,3940,0],[4610,0,3941,0],[4611,0,3942,0],[4612,0,3943,0],[4613,2,3944,0],[4614,0,3945,0],[4615,0,3946,0],[4616,0,3947,0],[4617,0,3948,0],[4618,0,3949,0],[4619,0,3950,0],[4620,0,3951,0],[4621,0,3952,0],[4622,0,3953,0],[4623,2,3944,0],[4623,11,3944,0,"_signInWithEmailLinkForLinking"],[4623,42,3944,0],[4624,4,3944,0,"_signInWithEmailLinkForLinking"],[4624,34,3944,0],[4624,37,3944,0,"_asyncToGenerator"],[4624,54,3944,0],[4624,55,3924,0],[4624,66,3924,45,"auth"],[4624,70,3924,49],[4624,72,3924,51,"request"],[4624,79,3924,58],[4624,81,3924,60],[4625,6,3925,4],[4625,13,3925,11,"_performSignInRequest"],[4625,34,3925,32],[4625,35,3925,33,"auth"],[4625,39,3925,37],[4625,41,3925,39],[4625,47,3925,45],[4625,48,3925,46],[4625,71,3925,69],[4625,105,3925,103],[4625,106,3925,104],[4625,146,3925,144,"_addTidIfNecessary"],[4625,164,3925,162],[4625,165,3925,163,"auth"],[4625,169,3925,167],[4625,171,3925,169,"request"],[4625,178,3925,176],[4625,179,3925,177],[4625,180,3925,178],[4626,4,3926,0],[4626,5,3926,1],[4627,4,3926,1],[4627,11,3926,1,"_signInWithEmailLinkForLinking"],[4627,41,3926,1],[4627,42,3926,1,"apply"],[4627,47,3926,1],[4627,54,3926,1,"arguments"],[4627,63,3926,1],[4628,2,3926,1],[4629,2,3926,1],[4629,6,3954,6,"EmailAuthCredential"],[4629,25,3954,25],[4629,51,3954,25,"_AuthCredential"],[4629,66,3954,25],[4630,4,3955,4],[4631,4,3956,4],[4631,13,3956,4,"EmailAuthCredential"],[4631,33,3957,4],[4632,4,3958,4,"_email"],[4632,10,3958,10],[4632,12,3959,4],[4633,4,3960,4,"_password"],[4633,13,3960,13],[4633,15,3960,15,"signInMethod"],[4633,27,3960,27],[4633,29,3962,22],[4634,6,3962,22],[4634,10,3962,22,"_this6"],[4634,16,3962,22],[4635,6,3962,22],[4635,10,3962,4,"_tenantId"],[4635,19,3962,13],[4635,22,3962,13,"arguments"],[4635,31,3962,13],[4635,32,3962,13,"length"],[4635,38,3962,13],[4635,46,3962,13,"arguments"],[4635,55,3962,13],[4635,63,3962,13,"undefined"],[4635,72,3962,13],[4635,75,3962,13,"arguments"],[4635,84,3962,13],[4635,90,3962,16],[4635,94,3962,20],[4636,6,3962,20,"_classCallCheck"],[4636,21,3962,20],[4636,28,3962,20,"EmailAuthCredential"],[4636,47,3962,20],[4637,6,3963,8,"_this6"],[4637,12,3963,8],[4637,15,3963,8,"_callSuper"],[4637,25,3963,8],[4637,32,3963,8,"EmailAuthCredential"],[4637,51,3963,8],[4637,54,3963,14],[4637,64,3963,24],[4637,65,3963,25],[4637,92,3963,52,"signInMethod"],[4637,104,3963,64],[4638,6,3964,8,"_this6"],[4638,12,3964,8],[4638,13,3964,13,"_email"],[4638,19,3964,19],[4638,22,3964,22,"_email"],[4638,28,3964,28],[4639,6,3965,8,"_this6"],[4639,12,3965,8],[4639,13,3965,13,"_password"],[4639,22,3965,22],[4639,25,3965,25,"_password"],[4639,34,3965,34],[4640,6,3966,8,"_this6"],[4640,12,3966,8],[4640,13,3966,13,"_tenantId"],[4640,22,3966,22],[4640,25,3966,25,"_tenantId"],[4640,34,3966,34],[4641,6,3966,35],[4641,13,3966,35,"_this6"],[4641,19,3966,35],[4642,4,3967,4],[4643,4,3968,4],[4644,4,3968,4,"_inherits"],[4644,13,3968,4],[4644,14,3968,4,"EmailAuthCredential"],[4644,33,3968,4],[4644,35,3968,4,"_AuthCredential"],[4644,50,3968,4],[4645,4,3968,4],[4645,11,3968,4,"_createClass"],[4645,23,3968,4],[4645,24,3968,4,"EmailAuthCredential"],[4645,43,3968,4],[4646,6,3968,4,"key"],[4646,9,3968,4],[4647,6,3968,4,"value"],[4647,11,3968,4],[4647,13,3976,4],[4648,6,3977,4],[4648,15,3977,4,"toJSON"],[4648,21,3977,10,"toJSON"],[4648,22,3977,10],[4648,24,3977,13],[4649,8,3978,8],[4649,15,3978,15],[4650,10,3979,12,"email"],[4650,15,3979,17],[4650,17,3979,19],[4650,21,3979,23],[4650,22,3979,24,"_email"],[4650,28,3979,30],[4651,10,3980,12,"password"],[4651,18,3980,20],[4651,20,3980,22],[4651,24,3980,26],[4651,25,3980,27,"_password"],[4651,34,3980,36],[4652,10,3981,12,"signInMethod"],[4652,22,3981,24],[4652,24,3981,26],[4652,28,3981,30],[4652,29,3981,31,"signInMethod"],[4652,41,3981,43],[4653,10,3982,12,"tenantId"],[4653,18,3982,20],[4653,20,3982,22],[4653,24,3982,26],[4653,25,3982,27,"_tenantId"],[4654,8,3983,8],[4654,9,3983,9],[4655,6,3984,4],[4656,6,3985,4],[4657,0,3986,0],[4658,0,3987,0],[4659,0,3988,0],[4660,0,3989,0],[4661,0,3990,0],[4662,0,3991,0],[4663,0,3992,0],[4664,4,3985,4],[4665,6,3985,4,"key"],[4665,9,3985,4],[4666,6,3985,4,"value"],[4666,11,3985,4],[4666,14,4005,4],[4667,8,4005,4],[4667,12,4005,4,"_getIdTokenResponse2"],[4667,32,4005,4],[4667,35,4005,4,"_asyncToGenerator"],[4667,52,4005,4],[4667,53,4006,4],[4667,64,4006,30,"auth"],[4667,68,4006,34],[4667,70,4006,36],[4668,10,4007,8],[4668,18,4007,16],[4668,22,4007,20],[4668,23,4007,21,"signInMethod"],[4668,35,4007,33],[4669,12,4008,12],[4669,17,4008,17],[4669,27,4008,27],[4669,28,4008,28],[4670,14,4009,16],[4670,18,4009,22,"request"],[4670,25,4009,29],[4670,28,4009,32],[4671,16,4010,20,"returnSecureToken"],[4671,33,4010,37],[4671,35,4010,39],[4671,39,4010,43],[4672,16,4011,20,"email"],[4672,21,4011,25],[4672,23,4011,27],[4672,27,4011,31],[4672,28,4011,32,"_email"],[4672,34,4011,38],[4673,16,4012,20,"password"],[4673,24,4012,28],[4673,26,4012,30],[4673,30,4012,34],[4673,31,4012,35,"_password"],[4673,40,4012,44],[4674,16,4013,20,"clientType"],[4674,26,4013,30],[4674,28,4013,32],[4674,45,4013,49],[4674,46,4013,50],[4675,14,4014,16],[4675,15,4014,17],[4676,14,4015,16],[4676,21,4015,23,"handleRecaptchaFlow"],[4676,40,4015,42],[4676,41,4015,43,"auth"],[4676,45,4015,47],[4676,47,4015,49,"request"],[4676,54,4015,56],[4676,56,4015,58],[4676,76,4015,78],[4676,77,4015,79],[4676,126,4015,128,"signInWithPassword"],[4676,144,4015,146],[4676,146,4015,148],[4676,171,4015,173],[4676,172,4015,174],[4676,223,4015,225],[4676,224,4015,226],[4677,12,4016,12],[4677,17,4016,17],[4677,28,4016,28],[4677,29,4016,29],[4678,14,4017,16],[4678,21,4017,23,"signInWithEmailLink$1"],[4678,42,4017,44],[4678,43,4017,45,"auth"],[4678,47,4017,49],[4678,49,4017,51],[4679,16,4018,20,"email"],[4679,21,4018,25],[4679,23,4018,27],[4679,27,4018,31],[4679,28,4018,32,"_email"],[4679,34,4018,38],[4680,16,4019,20,"oobCode"],[4680,23,4019,27],[4680,25,4019,29],[4680,29,4019,33],[4680,30,4019,34,"_password"],[4681,14,4020,16],[4681,15,4020,17],[4681,16,4020,18],[4682,12,4021,12],[4683,14,4022,16,"_fail"],[4683,19,4022,21],[4683,20,4022,22,"auth"],[4683,24,4022,26],[4683,26,4022,28],[4683,42,4022,44],[4683,43,4022,45],[4683,77,4022,79],[4683,78,4022,80],[4684,10,4023,8],[4685,8,4024,4],[4685,9,4024,5],[4686,8,4024,5],[4686,17,4006,10,"_getIdTokenResponse"],[4686,36,4006,29,"_getIdTokenResponse"],[4686,37,4006,29,"_x104"],[4686,42,4006,29],[4687,10,4006,29],[4687,17,4006,29,"_getIdTokenResponse2"],[4687,37,4006,29],[4687,38,4006,29,"apply"],[4687,43,4006,29],[4687,50,4006,29,"arguments"],[4687,59,4006,29],[4688,8,4006,29],[4689,8,4006,29],[4689,15,4006,10,"_getIdTokenResponse"],[4689,34,4006,29],[4690,6,4006,29],[4690,10,4025,4],[4691,4,4025,4],[4692,6,4025,4,"key"],[4692,9,4025,4],[4693,6,4025,4,"value"],[4693,11,4025,4],[4694,8,4025,4],[4694,12,4025,4,"_linkToIdToken2"],[4694,27,4025,4],[4694,30,4025,4,"_asyncToGenerator"],[4694,47,4025,4],[4694,48,4026,4],[4694,59,4026,25,"auth"],[4694,63,4026,29],[4694,65,4026,31,"idToken"],[4694,72,4026,38],[4694,74,4026,40],[4695,10,4027,8],[4695,18,4027,16],[4695,22,4027,20],[4695,23,4027,21,"signInMethod"],[4695,35,4027,33],[4696,12,4028,12],[4696,17,4028,17],[4696,27,4028,27],[4696,28,4028,28],[4697,14,4029,16],[4697,18,4029,22,"request"],[4697,25,4029,29],[4697,28,4029,32],[4698,16,4030,20,"idToken"],[4698,23,4030,27],[4699,16,4031,20,"returnSecureToken"],[4699,33,4031,37],[4699,35,4031,39],[4699,39,4031,43],[4700,16,4032,20,"email"],[4700,21,4032,25],[4700,23,4032,27],[4700,27,4032,31],[4700,28,4032,32,"_email"],[4700,34,4032,38],[4701,16,4033,20,"password"],[4701,24,4033,28],[4701,26,4033,30],[4701,30,4033,34],[4701,31,4033,35,"_password"],[4701,40,4033,44],[4702,16,4034,20,"clientType"],[4702,26,4034,30],[4702,28,4034,32],[4702,45,4034,49],[4702,46,4034,50],[4703,14,4035,16],[4703,15,4035,17],[4704,14,4036,16],[4704,21,4036,23,"handleRecaptchaFlow"],[4704,40,4036,42],[4704,41,4036,43,"auth"],[4704,45,4036,47],[4704,47,4036,49,"request"],[4704,54,4036,56],[4704,56,4036,58],[4704,72,4036,74],[4704,73,4036,75],[4704,117,4036,119,"linkEmailPassword"],[4704,134,4036,136],[4704,136,4036,138],[4704,161,4036,163],[4704,162,4036,164],[4704,213,4036,215],[4704,214,4036,216],[4705,12,4037,12],[4705,17,4037,17],[4705,28,4037,28],[4705,29,4037,29],[4706,14,4038,16],[4706,21,4038,23,"signInWithEmailLinkForLinking"],[4706,50,4038,52],[4706,51,4038,53,"auth"],[4706,55,4038,57],[4706,57,4038,59],[4707,16,4039,20,"idToken"],[4707,23,4039,27],[4708,16,4040,20,"email"],[4708,21,4040,25],[4708,23,4040,27],[4708,27,4040,31],[4708,28,4040,32,"_email"],[4708,34,4040,38],[4709,16,4041,20,"oobCode"],[4709,23,4041,27],[4709,25,4041,29],[4709,29,4041,33],[4709,30,4041,34,"_password"],[4710,14,4042,16],[4710,15,4042,17],[4710,16,4042,18],[4711,12,4043,12],[4712,14,4044,16,"_fail"],[4712,19,4044,21],[4712,20,4044,22,"auth"],[4712,24,4044,26],[4712,26,4044,28],[4712,42,4044,44],[4712,43,4044,45],[4712,77,4044,79],[4712,78,4044,80],[4713,10,4045,8],[4714,8,4046,4],[4714,9,4046,5],[4715,8,4046,5],[4715,17,4026,10,"_linkToIdToken"],[4715,31,4026,24,"_linkToIdToken"],[4715,32,4026,24,"_x105"],[4715,37,4026,24],[4715,39,4026,24,"_x106"],[4715,44,4026,24],[4716,10,4026,24],[4716,17,4026,24,"_linkToIdToken2"],[4716,32,4026,24],[4716,33,4026,24,"apply"],[4716,38,4026,24],[4716,45,4026,24,"arguments"],[4716,54,4026,24],[4717,8,4026,24],[4718,8,4026,24],[4718,15,4026,10,"_linkToIdToken"],[4718,29,4026,24],[4719,6,4026,24],[4719,10,4047,4],[4720,4,4047,4],[4721,6,4047,4,"key"],[4721,9,4047,4],[4722,6,4047,4,"value"],[4722,11,4047,4],[4722,13,4048,4],[4722,22,4048,4,"_getReauthenticationResolver"],[4722,50,4048,32,"_getReauthenticationResolver"],[4722,51,4048,33,"auth"],[4722,55,4048,37],[4722,57,4048,39],[4723,8,4049,8],[4723,15,4049,15],[4723,19,4049,19],[4723,20,4049,20,"_getIdTokenResponse"],[4723,39,4049,39],[4723,40,4049,40,"auth"],[4723,44,4049,44],[4723,45,4049,45],[4724,6,4050,4],[4725,4,4050,5],[4726,6,4050,5,"key"],[4726,9,4050,5],[4727,6,4050,5,"value"],[4727,11,4050,5],[4727,13,3969,4],[4727,22,3969,11,"_fromEmailAndPassword"],[4727,43,3969,32,"_fromEmailAndPassword"],[4727,44,3969,33,"email"],[4727,49,3969,38],[4727,51,3969,40,"password"],[4727,59,3969,48],[4727,61,3969,50],[4728,8,3970,8],[4728,15,3970,15],[4728,19,3970,19,"EmailAuthCredential"],[4728,38,3970,38],[4728,39,3970,39,"email"],[4728,44,3970,44],[4728,46,3970,46,"password"],[4728,54,3970,54],[4728,56,3970,56],[4728,66,3970,66],[4728,67,3970,67],[4728,100,3970,100],[4728,101,3970,101],[4729,6,3971,4],[4730,6,3972,4],[4731,4,3972,4],[4732,6,3972,4,"key"],[4732,9,3972,4],[4733,6,3972,4,"value"],[4733,11,3972,4],[4733,13,3973,4],[4733,22,3973,11,"_fromEmailAndCode"],[4733,39,3973,28,"_fromEmailAndCode"],[4733,40,3973,29,"email"],[4733,45,3973,34],[4733,47,3973,36,"oobCode"],[4733,54,3973,43],[4733,56,3973,62],[4734,8,3973,62],[4734,12,3973,45,"tenantId"],[4734,20,3973,53],[4734,23,3973,53,"arguments"],[4734,32,3973,53],[4734,33,3973,53,"length"],[4734,39,3973,53],[4734,47,3973,53,"arguments"],[4734,56,3973,53],[4734,64,3973,53,"undefined"],[4734,73,3973,53],[4734,76,3973,53,"arguments"],[4734,85,3973,53],[4734,91,3973,56],[4734,95,3973,60],[4735,8,3974,8],[4735,15,3974,15],[4735,19,3974,19,"EmailAuthCredential"],[4735,38,3974,38],[4735,39,3974,39,"email"],[4735,44,3974,44],[4735,46,3974,46,"oobCode"],[4735,53,3974,53],[4735,55,3974,55],[4735,66,3974,66],[4735,67,3974,67],[4735,98,3974,98,"tenantId"],[4735,106,3974,106],[4735,107,3974,107],[4736,6,3975,4],[4737,4,3975,5],[4738,6,3975,5,"key"],[4738,9,3975,5],[4739,6,3975,5,"value"],[4739,11,3975,5],[4739,13,3993,4],[4739,22,3993,11,"fromJSON"],[4739,30,3993,19,"fromJSON"],[4739,31,3993,20,"json"],[4739,35,3993,24],[4739,37,3993,26],[4740,8,3994,8],[4740,12,3994,14,"obj"],[4740,15,3994,17],[4740,18,3994,20],[4740,25,3994,27,"json"],[4740,29,3994,31],[4740,34,3994,36],[4740,42,3994,44],[4740,45,3994,47,"JSON"],[4740,49,3994,51],[4740,50,3994,52,"parse"],[4740,55,3994,57],[4740,56,3994,58,"json"],[4740,60,3994,62],[4740,61,3994,63],[4740,64,3994,66,"json"],[4740,68,3994,70],[4741,8,3995,8],[4741,12,3995,12,"obj"],[4741,15,3995,15],[4741,17,3995,17,"email"],[4741,22,3995,22],[4741,26,3995,26,"obj"],[4741,29,3995,29],[4741,31,3995,31,"password"],[4741,39,3995,39],[4741,41,3995,41],[4742,10,3996,12],[4742,14,3996,16,"obj"],[4742,17,3996,19],[4742,18,3996,20,"signInMethod"],[4742,30,3996,32],[4742,35,3996,37],[4742,45,3996,47],[4742,46,3996,48],[4742,81,3996,83],[4743,12,3997,16],[4743,19,3997,23],[4743,23,3997,27],[4743,24,3997,28,"_fromEmailAndPassword"],[4743,45,3997,49],[4743,46,3997,50,"obj"],[4743,49,3997,53],[4743,50,3997,54,"email"],[4743,55,3997,59],[4743,57,3997,61,"obj"],[4743,60,3997,64],[4743,61,3997,65,"password"],[4743,69,3997,73],[4743,70,3997,74],[4744,10,3998,12],[4744,11,3998,13],[4744,17,3999,17],[4744,21,3999,21,"obj"],[4744,24,3999,24],[4744,25,3999,25,"signInMethod"],[4744,37,3999,37],[4744,42,3999,42],[4744,53,3999,53],[4744,54,3999,54],[4744,85,3999,85],[4745,12,4000,16],[4745,19,4000,23],[4745,23,4000,27],[4745,24,4000,28,"_fromEmailAndCode"],[4745,41,4000,45],[4745,42,4000,46,"obj"],[4745,45,4000,49],[4745,46,4000,50,"email"],[4745,51,4000,55],[4745,53,4000,57,"obj"],[4745,56,4000,60],[4745,57,4000,61,"password"],[4745,65,4000,69],[4745,67,4000,71,"obj"],[4745,70,4000,74],[4745,71,4000,75,"tenantId"],[4745,79,4000,83],[4745,80,4000,84],[4746,10,4001,12],[4747,8,4002,8],[4748,8,4003,8],[4748,15,4003,15],[4748,19,4003,19],[4749,6,4004,4],[4750,4,4004,5],[4751,2,4004,5],[4751,4,3954,34,"AuthCredential"],[4751,18,3954,48],[4752,2,4053,0],[4753,0,4054,0],[4754,0,4055,0],[4755,0,4056,0],[4756,0,4057,0],[4757,0,4058,0],[4758,0,4059,0],[4759,0,4060,0],[4760,0,4061,0],[4761,0,4062,0],[4762,0,4063,0],[4763,0,4064,0],[4764,0,4065,0],[4765,0,4066,0],[4766,0,4067,0],[4767,0,4068,0],[4768,2,4053,0],[4768,11,4069,15,"signInWithIdp"],[4768,24,4069,28,"signInWithIdp"],[4768,25,4069,28,"_x107"],[4768,30,4069,28],[4768,32,4069,28,"_x108"],[4768,37,4069,28],[4769,4,4069,28],[4769,11,4069,28,"_signInWithIdp"],[4769,25,4069,28],[4769,26,4069,28,"apply"],[4769,31,4069,28],[4769,38,4069,28,"arguments"],[4769,47,4069,28],[4770,2,4069,28],[4771,2,4073,0],[4772,0,4074,0],[4773,0,4075,0],[4774,0,4076,0],[4775,0,4077,0],[4776,0,4078,0],[4777,0,4079,0],[4778,0,4080,0],[4779,0,4081,0],[4780,0,4082,0],[4781,0,4083,0],[4782,0,4084,0],[4783,0,4085,0],[4784,0,4086,0],[4785,0,4087,0],[4786,0,4088,0],[4787,2,4073,0],[4787,11,4073,0,"_signInWithIdp"],[4787,26,4073,0],[4788,4,4073,0,"_signInWithIdp"],[4788,18,4073,0],[4788,21,4073,0,"_asyncToGenerator"],[4788,38,4073,0],[4788,39,4069,0],[4788,50,4069,29,"auth"],[4788,54,4069,33],[4788,56,4069,35,"request"],[4788,63,4069,42],[4788,65,4069,44],[4789,6,4070,4],[4789,13,4070,11,"_performSignInRequest"],[4789,34,4070,32],[4789,35,4070,33,"auth"],[4789,39,4070,37],[4789,41,4070,39],[4789,47,4070,45],[4789,48,4070,46],[4789,71,4070,69],[4789,99,4070,97],[4789,100,4070,98],[4789,133,4070,131,"_addTidIfNecessary"],[4789,151,4070,149],[4789,152,4070,150,"auth"],[4789,156,4070,154],[4789,158,4070,156,"request"],[4789,165,4070,163],[4789,166,4070,164],[4789,167,4070,165],[4790,4,4071,0],[4790,5,4071,1],[4791,4,4071,1],[4791,11,4071,1,"_signInWithIdp"],[4791,25,4071,1],[4791,26,4071,1,"apply"],[4791,31,4071,1],[4791,38,4071,1,"arguments"],[4791,47,4071,1],[4792,2,4071,1],[4793,2,4089,0],[4793,6,4089,6,"IDP_REQUEST_URI$1"],[4793,23,4089,23],[4793,26,4089,26],[4793,44,4089,44],[4794,2,4090,0],[4795,0,4091,0],[4796,0,4092,0],[4797,0,4093,0],[4798,0,4094,0],[4799,0,4095,0],[4800,0,4096,0],[4801,0,4097,0],[4802,2,4090,0],[4802,6,4098,6,"OAuthCredential"],[4802,21,4098,21],[4802,47,4098,21,"_AuthCredential2"],[4802,63,4098,21],[4803,4,4099,4],[4803,13,4099,4,"OAuthCredential"],[4803,29,4099,4],[4803,31,4099,18],[4804,6,4099,18],[4804,10,4099,18,"_this7"],[4804,16,4099,18],[4805,6,4099,18,"_classCallCheck"],[4805,21,4099,18],[4805,28,4099,18,"OAuthCredential"],[4805,43,4099,18],[4806,6,4100,8,"_this7"],[4806,12,4100,8],[4806,15,4100,8,"_callSuper"],[4806,25,4100,8],[4806,32,4100,8,"OAuthCredential"],[4806,47,4100,8],[4806,49,4100,17,"arguments"],[4806,58,4100,26],[4807,6,4101,8,"_this7"],[4807,12,4101,8],[4807,13,4101,13,"pendingToken"],[4807,25,4101,25],[4807,28,4101,28],[4807,32,4101,32],[4808,6,4101,33],[4808,13,4101,33,"_this7"],[4808,19,4101,33],[4809,4,4102,4],[4810,4,4103,4],[4811,4,4103,4,"_inherits"],[4811,13,4103,4],[4811,14,4103,4,"OAuthCredential"],[4811,29,4103,4],[4811,31,4103,4,"_AuthCredential2"],[4811,47,4103,4],[4812,4,4103,4],[4812,11,4103,4,"_createClass"],[4812,23,4103,4],[4812,24,4103,4,"OAuthCredential"],[4812,39,4103,4],[4813,6,4103,4,"key"],[4813,9,4103,4],[4814,6,4103,4,"value"],[4814,11,4103,4],[4814,13,4132,4],[4815,6,4133,4],[4815,15,4133,4,"toJSON"],[4815,21,4133,10,"toJSON"],[4815,22,4133,10],[4815,24,4133,13],[4816,8,4134,8],[4816,15,4134,15],[4817,10,4135,12,"idToken"],[4817,17,4135,19],[4817,19,4135,21],[4817,23,4135,25],[4817,24,4135,26,"idToken"],[4817,31,4135,33],[4818,10,4136,12,"accessToken"],[4818,21,4136,23],[4818,23,4136,25],[4818,27,4136,29],[4818,28,4136,30,"accessToken"],[4818,39,4136,41],[4819,10,4137,12,"secret"],[4819,16,4137,18],[4819,18,4137,20],[4819,22,4137,24],[4819,23,4137,25,"secret"],[4819,29,4137,31],[4820,10,4138,12,"nonce"],[4820,15,4138,17],[4820,17,4138,19],[4820,21,4138,23],[4820,22,4138,24,"nonce"],[4820,27,4138,29],[4821,10,4139,12,"pendingToken"],[4821,22,4139,24],[4821,24,4139,26],[4821,28,4139,30],[4821,29,4139,31,"pendingToken"],[4821,41,4139,43],[4822,10,4140,12,"providerId"],[4822,20,4140,22],[4822,22,4140,24],[4822,26,4140,28],[4822,27,4140,29,"providerId"],[4822,37,4140,39],[4823,10,4141,12,"signInMethod"],[4823,22,4141,24],[4823,24,4141,26],[4823,28,4141,30],[4823,29,4141,31,"signInMethod"],[4824,8,4142,8],[4824,9,4142,9],[4825,6,4143,4],[4826,6,4144,4],[4827,0,4145,0],[4828,0,4146,0],[4829,0,4147,0],[4830,0,4148,0],[4831,0,4149,0],[4832,0,4150,0],[4833,0,4151,0],[4834,0,4152,0],[4835,4,4144,4],[4836,6,4144,4,"key"],[4836,9,4144,4],[4837,6,4144,4,"value"],[4837,11,4144,4],[4837,13,4167,4],[4838,6,4168,4],[4838,15,4168,4,"_getIdTokenResponse"],[4838,34,4168,23,"_getIdTokenResponse"],[4838,35,4168,24,"auth"],[4838,39,4168,28],[4838,41,4168,30],[4839,8,4169,8],[4839,12,4169,14,"request"],[4839,19,4169,21],[4839,22,4169,24],[4839,26,4169,28],[4839,27,4169,29,"buildRequest"],[4839,39,4169,41],[4839,40,4169,42],[4839,41,4169,43],[4840,8,4170,8],[4840,15,4170,15,"signInWithIdp"],[4840,28,4170,28],[4840,29,4170,29,"auth"],[4840,33,4170,33],[4840,35,4170,35,"request"],[4840,42,4170,42],[4840,43,4170,43],[4841,6,4171,4],[4842,6,4172,4],[4843,4,4172,4],[4844,6,4172,4,"key"],[4844,9,4172,4],[4845,6,4172,4,"value"],[4845,11,4172,4],[4845,13,4173,4],[4845,22,4173,4,"_linkToIdToken"],[4845,36,4173,18,"_linkToIdToken"],[4845,37,4173,19,"auth"],[4845,41,4173,23],[4845,43,4173,25,"idToken"],[4845,50,4173,32],[4845,52,4173,34],[4846,8,4174,8],[4846,12,4174,14,"request"],[4846,19,4174,21],[4846,22,4174,24],[4846,26,4174,28],[4846,27,4174,29,"buildRequest"],[4846,39,4174,41],[4846,40,4174,42],[4846,41,4174,43],[4847,8,4175,8,"request"],[4847,15,4175,15],[4847,16,4175,16,"idToken"],[4847,23,4175,23],[4847,26,4175,26,"idToken"],[4847,33,4175,33],[4848,8,4176,8],[4848,15,4176,15,"signInWithIdp"],[4848,28,4176,28],[4848,29,4176,29,"auth"],[4848,33,4176,33],[4848,35,4176,35,"request"],[4848,42,4176,42],[4848,43,4176,43],[4849,6,4177,4],[4850,6,4178,4],[4851,4,4178,4],[4852,6,4178,4,"key"],[4852,9,4178,4],[4853,6,4178,4,"value"],[4853,11,4178,4],[4853,13,4179,4],[4853,22,4179,4,"_getReauthenticationResolver"],[4853,50,4179,32,"_getReauthenticationResolver"],[4853,51,4179,33,"auth"],[4853,55,4179,37],[4853,57,4179,39],[4854,8,4180,8],[4854,12,4180,14,"request"],[4854,19,4180,21],[4854,22,4180,24],[4854,26,4180,28],[4854,27,4180,29,"buildRequest"],[4854,39,4180,41],[4854,40,4180,42],[4854,41,4180,43],[4855,8,4181,8,"request"],[4855,15,4181,15],[4855,16,4181,16,"autoCreate"],[4855,26,4181,26],[4855,29,4181,29],[4855,34,4181,34],[4856,8,4182,8],[4856,15,4182,15,"signInWithIdp"],[4856,28,4182,28],[4856,29,4182,29,"auth"],[4856,33,4182,33],[4856,35,4182,35,"request"],[4856,42,4182,42],[4856,43,4182,43],[4857,6,4183,4],[4858,4,4183,5],[4859,6,4183,5,"key"],[4859,9,4183,5],[4860,6,4183,5,"value"],[4860,11,4183,5],[4860,13,4184,4],[4860,22,4184,4,"buildRequest"],[4860,34,4184,16,"buildRequest"],[4860,35,4184,16],[4860,37,4184,19],[4861,8,4185,8],[4861,12,4185,14,"request"],[4861,19,4185,21],[4861,22,4185,24],[4862,10,4186,12,"requestUri"],[4862,20,4186,22],[4862,22,4186,24,"IDP_REQUEST_URI$1"],[4862,39,4186,41],[4863,10,4187,12,"returnSecureToken"],[4863,27,4187,29],[4863,29,4187,31],[4864,8,4188,8],[4864,9,4188,9],[4865,8,4189,8],[4865,12,4189,12],[4865,16,4189,16],[4865,17,4189,17,"pendingToken"],[4865,29,4189,29],[4865,31,4189,31],[4866,10,4190,12,"request"],[4866,17,4190,19],[4866,18,4190,20,"pendingToken"],[4866,30,4190,32],[4866,33,4190,35],[4866,37,4190,39],[4866,38,4190,40,"pendingToken"],[4866,50,4190,52],[4867,8,4191,8],[4867,9,4191,9],[4867,15,4192,13],[4868,10,4193,12],[4868,14,4193,18,"postBody"],[4868,22,4193,26],[4868,25,4193,29],[4868,26,4193,30],[4868,27,4193,31],[4869,10,4194,12],[4869,14,4194,16],[4869,18,4194,20],[4869,19,4194,21,"idToken"],[4869,26,4194,28],[4869,28,4194,30],[4870,12,4195,16,"postBody"],[4870,20,4195,24],[4870,21,4195,25],[4870,31,4195,35],[4870,32,4195,36],[4870,35,4195,39],[4870,39,4195,43],[4870,40,4195,44,"idToken"],[4870,47,4195,51],[4871,10,4196,12],[4872,10,4197,12],[4872,14,4197,16],[4872,18,4197,20],[4872,19,4197,21,"accessToken"],[4872,30,4197,32],[4872,32,4197,34],[4873,12,4198,16,"postBody"],[4873,20,4198,24],[4873,21,4198,25],[4873,35,4198,39],[4873,36,4198,40],[4873,39,4198,43],[4873,43,4198,47],[4873,44,4198,48,"accessToken"],[4873,55,4198,59],[4874,10,4199,12],[4875,10,4200,12],[4875,14,4200,16],[4875,18,4200,20],[4875,19,4200,21,"secret"],[4875,25,4200,27],[4875,27,4200,29],[4876,12,4201,16,"postBody"],[4876,20,4201,24],[4876,21,4201,25],[4876,41,4201,45],[4876,42,4201,46],[4876,45,4201,49],[4876,49,4201,53],[4876,50,4201,54,"secret"],[4876,56,4201,60],[4877,10,4202,12],[4878,10,4203,12,"postBody"],[4878,18,4203,20],[4878,19,4203,21],[4878,31,4203,33],[4878,32,4203,34],[4878,35,4203,37],[4878,39,4203,41],[4878,40,4203,42,"providerId"],[4878,50,4203,52],[4879,10,4204,12],[4879,14,4204,16],[4879,18,4204,20],[4879,19,4204,21,"nonce"],[4879,24,4204,26],[4879,28,4204,30],[4879,29,4204,31],[4879,33,4204,35],[4879,34,4204,36,"pendingToken"],[4879,46,4204,48],[4879,48,4204,50],[4880,12,4205,16,"postBody"],[4880,20,4205,24],[4880,21,4205,25],[4880,28,4205,32],[4880,29,4205,33],[4880,32,4205,36],[4880,36,4205,40],[4880,37,4205,41,"nonce"],[4880,42,4205,46],[4881,10,4206,12],[4882,10,4207,12,"request"],[4882,17,4207,19],[4882,18,4207,20,"postBody"],[4882,26,4207,28],[4882,29,4207,31,"util"],[4882,33,4207,35],[4882,34,4207,36,"querystring"],[4882,45,4207,47],[4882,46,4207,48,"postBody"],[4882,54,4207,56],[4882,55,4207,57],[4883,8,4208,8],[4884,8,4209,8],[4884,15,4209,15,"request"],[4884,22,4209,22],[4885,6,4210,4],[4886,4,4210,5],[4887,6,4210,5,"key"],[4887,9,4210,5],[4888,6,4210,5,"value"],[4888,11,4210,5],[4888,13,4104,4],[4888,22,4104,11,"_fromParams"],[4888,33,4104,22,"_fromParams"],[4888,34,4104,23,"params"],[4888,40,4104,29],[4888,42,4104,31],[4889,8,4105,8],[4889,12,4105,14,"cred"],[4889,16,4105,18],[4889,19,4105,21],[4889,23,4105,25,"OAuthCredential"],[4889,38,4105,40],[4889,39,4105,41,"params"],[4889,45,4105,47],[4889,46,4105,48,"providerId"],[4889,56,4105,58],[4889,58,4105,60,"params"],[4889,64,4105,66],[4889,65,4105,67,"signInMethod"],[4889,77,4105,79],[4889,78,4105,80],[4890,8,4106,8],[4890,12,4106,12,"params"],[4890,18,4106,18],[4890,19,4106,19,"idToken"],[4890,26,4106,26],[4890,30,4106,30,"params"],[4890,36,4106,36],[4890,37,4106,37,"accessToken"],[4890,48,4106,48],[4890,50,4106,50],[4891,10,4107,12],[4892,10,4108,12],[4892,14,4108,16,"params"],[4892,20,4108,22],[4892,21,4108,23,"idToken"],[4892,28,4108,30],[4892,30,4108,32],[4893,12,4109,16,"cred"],[4893,16,4109,20],[4893,17,4109,21,"idToken"],[4893,24,4109,28],[4893,27,4109,31,"params"],[4893,33,4109,37],[4893,34,4109,38,"idToken"],[4893,41,4109,45],[4894,10,4110,12],[4895,10,4111,12],[4895,14,4111,16,"params"],[4895,20,4111,22],[4895,21,4111,23,"accessToken"],[4895,32,4111,34],[4895,34,4111,36],[4896,12,4112,16,"cred"],[4896,16,4112,20],[4896,17,4112,21,"accessToken"],[4896,28,4112,32],[4896,31,4112,35,"params"],[4896,37,4112,41],[4896,38,4112,42,"accessToken"],[4896,49,4112,53],[4897,10,4113,12],[4898,10,4114,12],[4899,10,4115,12],[4899,14,4115,16,"params"],[4899,20,4115,22],[4899,21,4115,23,"nonce"],[4899,26,4115,28],[4899,30,4115,32],[4899,31,4115,33,"params"],[4899,37,4115,39],[4899,38,4115,40,"pendingToken"],[4899,50,4115,52],[4899,52,4115,54],[4900,12,4116,16,"cred"],[4900,16,4116,20],[4900,17,4116,21,"nonce"],[4900,22,4116,26],[4900,25,4116,29,"params"],[4900,31,4116,35],[4900,32,4116,36,"nonce"],[4900,37,4116,41],[4901,10,4117,12],[4902,10,4118,12],[4902,14,4118,16,"params"],[4902,20,4118,22],[4902,21,4118,23,"pendingToken"],[4902,33,4118,35],[4902,35,4118,37],[4903,12,4119,16,"cred"],[4903,16,4119,20],[4903,17,4119,21,"pendingToken"],[4903,29,4119,33],[4903,32,4119,36,"params"],[4903,38,4119,42],[4903,39,4119,43,"pendingToken"],[4903,51,4119,55],[4904,10,4120,12],[4905,8,4121,8],[4905,9,4121,9],[4905,15,4122,13],[4905,19,4122,17,"params"],[4905,25,4122,23],[4905,26,4122,24,"oauthToken"],[4905,36,4122,34],[4905,40,4122,38,"params"],[4905,46,4122,44],[4905,47,4122,45,"oauthTokenSecret"],[4905,63,4122,61],[4905,65,4122,63],[4906,10,4123,12],[4907,10,4124,12,"cred"],[4907,14,4124,16],[4907,15,4124,17,"accessToken"],[4907,26,4124,28],[4907,29,4124,31,"params"],[4907,35,4124,37],[4907,36,4124,38,"oauthToken"],[4907,46,4124,48],[4908,10,4125,12,"cred"],[4908,14,4125,16],[4908,15,4125,17,"secret"],[4908,21,4125,23],[4908,24,4125,26,"params"],[4908,30,4125,32],[4908,31,4125,33,"oauthTokenSecret"],[4908,47,4125,49],[4909,8,4126,8],[4909,9,4126,9],[4909,15,4127,13],[4910,10,4128,12,"_fail"],[4910,15,4128,17],[4910,16,4128,18],[4910,32,4128,34],[4910,33,4128,35],[4910,67,4128,69],[4910,68,4128,70],[4911,8,4129,8],[4912,8,4130,8],[4912,15,4130,15,"cred"],[4912,19,4130,19],[4913,6,4131,4],[4914,4,4131,5],[4915,6,4131,5,"key"],[4915,9,4131,5],[4916,6,4131,5,"value"],[4916,11,4131,5],[4916,13,4153,4],[4916,22,4153,11,"fromJSON"],[4916,30,4153,19,"fromJSON"],[4916,31,4153,20,"json"],[4916,35,4153,24],[4916,37,4153,26],[4917,8,4154,8],[4917,12,4154,14,"obj"],[4917,15,4154,17],[4917,18,4154,20],[4917,25,4154,27,"json"],[4917,29,4154,31],[4917,34,4154,36],[4917,42,4154,44],[4917,45,4154,47,"JSON"],[4917,49,4154,51],[4917,50,4154,52,"parse"],[4917,55,4154,57],[4917,56,4154,58,"json"],[4917,60,4154,62],[4917,61,4154,63],[4917,64,4154,66,"json"],[4917,68,4154,70],[4918,8,4155,8],[4918,12,4155,16,"providerId"],[4918,22,4155,26],[4918,25,4155,54,"obj"],[4918,28,4155,57],[4918,29,4155,16,"providerId"],[4918,39,4155,26],[4919,10,4155,28,"signInMethod"],[4919,22,4155,40],[4919,25,4155,54,"obj"],[4919,28,4155,57],[4919,29,4155,28,"signInMethod"],[4919,41,4155,40],[4920,10,4155,45,"rest"],[4920,14,4155,49],[4920,17,4155,49,"_objectWithoutProperties"],[4920,41,4155,49],[4920,42,4155,54,"obj"],[4920,45,4155,57],[4920,47,4155,57,"_excluded3"],[4920,57,4155,57],[4921,8,4156,8],[4921,12,4156,12],[4921,13,4156,13,"providerId"],[4921,23,4156,23],[4921,27,4156,27],[4921,28,4156,28,"signInMethod"],[4921,40,4156,40],[4921,42,4156,42],[4922,10,4157,12],[4922,17,4157,19],[4922,21,4157,23],[4923,8,4158,8],[4924,8,4159,8],[4924,12,4159,14,"cred"],[4924,16,4159,18],[4924,19,4159,21],[4924,23,4159,25,"OAuthCredential"],[4924,38,4159,40],[4924,39,4159,41,"providerId"],[4924,49,4159,51],[4924,51,4159,53,"signInMethod"],[4924,63,4159,65],[4924,64,4159,66],[4925,8,4160,8,"cred"],[4925,12,4160,12],[4925,13,4160,13,"idToken"],[4925,20,4160,20],[4925,23,4160,23,"rest"],[4925,27,4160,27],[4925,28,4160,28,"idToken"],[4925,35,4160,35],[4925,39,4160,39,"undefined"],[4925,48,4160,48],[4926,8,4161,8,"cred"],[4926,12,4161,12],[4926,13,4161,13,"accessToken"],[4926,24,4161,24],[4926,27,4161,27,"rest"],[4926,31,4161,31],[4926,32,4161,32,"accessToken"],[4926,43,4161,43],[4926,47,4161,47,"undefined"],[4926,56,4161,56],[4927,8,4162,8,"cred"],[4927,12,4162,12],[4927,13,4162,13,"secret"],[4927,19,4162,19],[4927,22,4162,22,"rest"],[4927,26,4162,26],[4927,27,4162,27,"secret"],[4927,33,4162,33],[4928,8,4163,8,"cred"],[4928,12,4163,12],[4928,13,4163,13,"nonce"],[4928,18,4163,18],[4928,21,4163,21,"rest"],[4928,25,4163,25],[4928,26,4163,26,"nonce"],[4928,31,4163,31],[4929,8,4164,8,"cred"],[4929,12,4164,12],[4929,13,4164,13,"pendingToken"],[4929,25,4164,25],[4929,28,4164,28,"rest"],[4929,32,4164,32],[4929,33,4164,33,"pendingToken"],[4929,45,4164,45],[4929,49,4164,49],[4929,53,4164,53],[4930,8,4165,8],[4930,15,4165,15,"cred"],[4930,19,4165,19],[4931,6,4166,4],[4932,4,4166,5],[4933,2,4166,5],[4933,4,4098,30,"AuthCredential"],[4933,18,4098,44],[4934,2,4213,0],[4935,0,4214,0],[4936,0,4215,0],[4937,0,4216,0],[4938,0,4217,0],[4939,0,4218,0],[4940,0,4219,0],[4941,0,4220,0],[4942,0,4221,0],[4943,0,4222,0],[4944,0,4223,0],[4945,0,4224,0],[4946,0,4225,0],[4947,0,4226,0],[4948,0,4227,0],[4949,0,4228,0],[4950,2,4213,0],[4950,11,4229,15,"sendPhoneVerificationCode"],[4950,36,4229,40,"sendPhoneVerificationCode"],[4950,37,4229,40,"_x109"],[4950,42,4229,40],[4950,44,4229,40,"_x110"],[4950,49,4229,40],[4951,4,4229,40],[4951,11,4229,40,"_sendPhoneVerificationCode"],[4951,37,4229,40],[4951,38,4229,40,"apply"],[4951,43,4229,40],[4951,50,4229,40,"arguments"],[4951,59,4229,40],[4952,2,4229,40],[4953,2,4229,40],[4953,11,4229,40,"_sendPhoneVerificationCode"],[4953,38,4229,40],[4954,4,4229,40,"_sendPhoneVerificationCode"],[4954,30,4229,40],[4954,33,4229,40,"_asyncToGenerator"],[4954,50,4229,40],[4954,51,4229,0],[4954,62,4229,41,"auth"],[4954,66,4229,45],[4954,68,4229,47,"request"],[4954,75,4229,54],[4954,77,4229,56],[4955,6,4230,4],[4955,13,4230,11,"_performApiRequest"],[4955,31,4230,29],[4955,32,4230,30,"auth"],[4955,36,4230,34],[4955,38,4230,36],[4955,44,4230,42],[4955,45,4230,43],[4955,68,4230,66],[4955,103,4230,101],[4955,104,4230,102],[4955,143,4230,141,"_addTidIfNecessary"],[4955,161,4230,159],[4955,162,4230,160,"auth"],[4955,166,4230,164],[4955,168,4230,166,"request"],[4955,175,4230,173],[4955,176,4230,174],[4955,177,4230,175],[4956,4,4231,0],[4956,5,4231,1],[4957,4,4231,1],[4957,11,4231,1,"_sendPhoneVerificationCode"],[4957,37,4231,1],[4957,38,4231,1,"apply"],[4957,43,4231,1],[4957,50,4231,1,"arguments"],[4957,59,4231,1],[4958,2,4231,1],[4959,2,4231,1],[4959,11,4232,15,"signInWithPhoneNumber$1"],[4959,34,4232,38,"signInWithPhoneNumber$1"],[4959,35,4232,38,"_x111"],[4959,40,4232,38],[4959,42,4232,38,"_x112"],[4959,47,4232,38],[4960,4,4232,38],[4960,11,4232,38,"_signInWithPhoneNumber$"],[4960,34,4232,38],[4960,35,4232,38,"apply"],[4960,40,4232,38],[4960,47,4232,38,"arguments"],[4960,56,4232,38],[4961,2,4232,38],[4962,2,4232,38],[4962,11,4232,38,"_signInWithPhoneNumber$"],[4962,35,4232,38],[4963,4,4232,38,"_signInWithPhoneNumber$"],[4963,27,4232,38],[4963,30,4232,38,"_asyncToGenerator"],[4963,47,4232,38],[4963,48,4232,0],[4963,59,4232,39,"auth"],[4963,63,4232,43],[4963,65,4232,45,"request"],[4963,72,4232,52],[4963,74,4232,54],[4964,6,4233,4],[4964,13,4233,11,"_performSignInRequest"],[4964,34,4233,32],[4964,35,4233,33,"auth"],[4964,39,4233,37],[4964,41,4233,39],[4964,47,4233,45],[4964,48,4233,46],[4964,71,4233,69],[4964,107,4233,105],[4964,108,4233,106],[4964,150,4233,148,"_addTidIfNecessary"],[4964,168,4233,166],[4964,169,4233,167,"auth"],[4964,173,4233,171],[4964,175,4233,173,"request"],[4964,182,4233,180],[4964,183,4233,181],[4964,184,4233,182],[4965,4,4234,0],[4965,5,4234,1],[4966,4,4234,1],[4966,11,4234,1,"_signInWithPhoneNumber$"],[4966,34,4234,1],[4966,35,4234,1,"apply"],[4966,40,4234,1],[4966,47,4234,1,"arguments"],[4966,56,4234,1],[4967,2,4234,1],[4968,2,4234,1],[4968,11,4235,15,"linkWithPhoneNumber$1"],[4968,32,4235,36,"linkWithPhoneNumber$1"],[4968,33,4235,36,"_x113"],[4968,38,4235,36],[4968,40,4235,36,"_x114"],[4968,45,4235,36],[4969,4,4235,36],[4969,11,4235,36,"_linkWithPhoneNumber$"],[4969,32,4235,36],[4969,33,4235,36,"apply"],[4969,38,4235,36],[4969,45,4235,36,"arguments"],[4969,54,4235,36],[4970,2,4235,36],[4971,2,4235,36],[4971,11,4235,36,"_linkWithPhoneNumber$"],[4971,33,4235,36],[4972,4,4235,36,"_linkWithPhoneNumber$"],[4972,25,4235,36],[4972,28,4235,36,"_asyncToGenerator"],[4972,45,4235,36],[4972,46,4235,0],[4972,57,4235,37,"auth"],[4972,61,4235,41],[4972,63,4235,43,"request"],[4972,70,4235,50],[4972,72,4235,52],[4973,6,4236,4],[4973,10,4236,10,"response"],[4973,18,4236,18],[4973,27,4236,27,"_performSignInRequest"],[4973,48,4236,48],[4973,49,4236,49,"auth"],[4973,53,4236,53],[4973,55,4236,55],[4973,61,4236,61],[4973,62,4236,62],[4973,85,4236,85],[4973,121,4236,121],[4973,122,4236,122],[4973,164,4236,164,"_addTidIfNecessary"],[4973,182,4236,182],[4973,183,4236,183,"auth"],[4973,187,4236,187],[4973,189,4236,189,"request"],[4973,196,4236,196],[4973,197,4236,197],[4973,198,4236,198],[4974,6,4237,4],[4974,10,4237,8,"response"],[4974,18,4237,16],[4974,19,4237,17,"temporaryProof"],[4974,33,4237,31],[4974,35,4237,33],[4975,8,4238,8],[4975,14,4238,14,"_makeTaggedError"],[4975,30,4238,30],[4975,31,4238,31,"auth"],[4975,35,4238,35],[4975,37,4238,37],[4975,79,4238,79],[4975,80,4238,80],[4975,119,4238,119,"response"],[4975,127,4238,127],[4975,128,4238,128],[4976,6,4239,4],[4977,6,4240,4],[4977,13,4240,11,"response"],[4977,21,4240,19],[4978,4,4241,0],[4978,5,4241,1],[4979,4,4241,1],[4979,11,4241,1,"_linkWithPhoneNumber$"],[4979,32,4241,1],[4979,33,4241,1,"apply"],[4979,38,4241,1],[4979,45,4241,1,"arguments"],[4979,54,4241,1],[4980,2,4241,1],[4981,2,4242,0],[4981,6,4242,6,"VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_"],[4981,49,4242,49],[4981,52,4242,52],[4982,4,4243,4],[4982,5,4243,5],[4982,21,4243,21],[4982,22,4243,22],[4982,57,4243,57],[4982,73,4243,73],[4982,74,4243,74],[4983,2,4244,0],[4983,3,4244,1],[4984,2,4244,2],[4984,11,4245,15,"verifyPhoneNumberForExisting"],[4984,39,4245,43,"verifyPhoneNumberForExisting"],[4984,40,4245,43,"_x115"],[4984,45,4245,43],[4984,47,4245,43,"_x116"],[4984,52,4245,43],[4985,4,4245,43],[4985,11,4245,43,"_verifyPhoneNumberForExisting"],[4985,40,4245,43],[4985,41,4245,43,"apply"],[4985,46,4245,43],[4985,53,4245,43,"arguments"],[4985,62,4245,43],[4986,2,4245,43],[4987,2,4253,0],[4988,0,4254,0],[4989,0,4255,0],[4990,0,4256,0],[4991,0,4257,0],[4992,0,4258,0],[4993,0,4259,0],[4994,0,4260,0],[4995,0,4261,0],[4996,0,4262,0],[4997,0,4263,0],[4998,0,4264,0],[4999,0,4265,0],[5000,0,4266,0],[5001,0,4267,0],[5002,0,4268,0],[5003,2,4269,0],[5004,0,4270,0],[5005,0,4271,0],[5006,0,4272,0],[5007,0,4273,0],[5008,2,4269,0],[5008,11,4269,0,"_verifyPhoneNumberForExisting"],[5008,41,4269,0],[5009,4,4269,0,"_verifyPhoneNumberForExisting"],[5009,33,4269,0],[5009,36,4269,0,"_asyncToGenerator"],[5009,53,4269,0],[5009,54,4245,0],[5009,65,4245,44,"auth"],[5009,69,4245,48],[5009,71,4245,50,"request"],[5009,78,4245,57],[5009,80,4245,59],[5010,6,4246,4],[5010,10,4246,10,"apiRequest"],[5010,20,4246,20],[5010,23,4246,23],[5011,8,4247,8],[5011,11,4247,11,"request"],[5011,18,4247,18],[5012,8,4248,8,"operation"],[5012,17,4248,17],[5012,19,4248,19],[5013,6,4249,4],[5013,7,4249,5],[5014,6,4250,4],[5014,13,4250,11,"_performSignInRequest"],[5014,34,4250,32],[5014,35,4250,33,"auth"],[5014,39,4250,37],[5014,41,4250,39],[5014,47,4250,45],[5014,48,4250,46],[5014,71,4250,69],[5014,107,4250,105],[5014,108,4250,106],[5014,150,4250,148,"_addTidIfNecessary"],[5014,168,4250,166],[5014,169,4250,167,"auth"],[5014,173,4250,171],[5014,175,4250,173,"apiRequest"],[5014,185,4250,183],[5014,186,4250,184],[5014,188,4250,186,"VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_"],[5014,231,4250,229],[5014,232,4250,230],[5015,4,4251,0],[5015,5,4251,1],[5016,4,4251,1],[5016,11,4251,1,"_verifyPhoneNumberForExisting"],[5016,40,4251,1],[5016,41,4251,1,"apply"],[5016,46,4251,1],[5016,53,4251,1,"arguments"],[5016,62,4251,1],[5017,2,4251,1],[5018,2,4251,1],[5018,6,4274,6,"PhoneAuthCredential"],[5018,25,4274,25],[5018,51,4274,25,"_AuthCredential3"],[5018,67,4274,25],[5019,4,4275,4],[5019,13,4275,4,"PhoneAuthCredential"],[5019,33,4275,16,"params"],[5019,39,4275,22],[5019,41,4275,24],[5020,6,4275,24],[5020,10,4275,24,"_this8"],[5020,16,4275,24],[5021,6,4275,24,"_classCallCheck"],[5021,21,4275,24],[5021,28,4275,24,"PhoneAuthCredential"],[5021,47,4275,24],[5022,6,4276,8,"_this8"],[5022,12,4276,8],[5022,15,4276,8,"_callSuper"],[5022,25,4276,8],[5022,32,4276,8,"PhoneAuthCredential"],[5022,51,4276,8],[5022,54,4276,14],[5022,61,4276,21],[5022,62,4276,22],[5022,86,4276,46],[5022,93,4276,53],[5022,94,4276,54],[5023,6,4277,8,"_this8"],[5023,12,4277,8],[5023,13,4277,13,"params"],[5023,19,4277,19],[5023,22,4277,22,"params"],[5023,28,4277,28],[5024,6,4277,29],[5024,13,4277,29,"_this8"],[5024,19,4277,29],[5025,4,4278,4],[5026,4,4279,4],[5027,4,4279,4,"_inherits"],[5027,13,4279,4],[5027,14,4279,4,"PhoneAuthCredential"],[5027,33,4279,4],[5027,35,4279,4,"_AuthCredential3"],[5027,51,4279,4],[5028,4,4279,4],[5028,11,4279,4,"_createClass"],[5028,23,4279,4],[5028,24,4279,4,"PhoneAuthCredential"],[5028,43,4279,4],[5029,6,4279,4,"key"],[5029,9,4279,4],[5030,6,4279,4,"value"],[5030,11,4279,4],[5030,13,4287,4],[5031,6,4288,4],[5031,15,4288,4,"_getIdTokenResponse"],[5031,34,4288,23,"_getIdTokenResponse"],[5031,35,4288,24,"auth"],[5031,39,4288,28],[5031,41,4288,30],[5032,8,4289,8],[5032,15,4289,15,"signInWithPhoneNumber$1"],[5032,38,4289,38],[5032,39,4289,39,"auth"],[5032,43,4289,43],[5032,45,4289,45],[5032,49,4289,49],[5032,50,4289,50,"_makeVerificationRequest"],[5032,74,4289,74],[5032,75,4289,75],[5032,76,4289,76],[5032,77,4289,77],[5033,6,4290,4],[5034,6,4291,4],[5035,4,4291,4],[5036,6,4291,4,"key"],[5036,9,4291,4],[5037,6,4291,4,"value"],[5037,11,4291,4],[5037,13,4292,4],[5037,22,4292,4,"_linkToIdToken"],[5037,36,4292,18,"_linkToIdToken"],[5037,37,4292,19,"auth"],[5037,41,4292,23],[5037,43,4292,25,"idToken"],[5037,50,4292,32],[5037,52,4292,34],[5038,8,4293,8],[5038,15,4293,15,"linkWithPhoneNumber$1"],[5038,36,4293,36],[5038,37,4293,37,"auth"],[5038,41,4293,41],[5038,43,4293,43],[5039,10,4294,12,"idToken"],[5039,17,4294,19],[5040,10,4295,12],[5040,13,4295,15],[5040,17,4295,19],[5040,18,4295,20,"_makeVerificationRequest"],[5040,42,4295,44],[5040,43,4295,45],[5041,8,4296,8],[5041,9,4296,9],[5041,10,4296,10],[5042,6,4297,4],[5043,6,4298,4],[5044,4,4298,4],[5045,6,4298,4,"key"],[5045,9,4298,4],[5046,6,4298,4,"value"],[5046,11,4298,4],[5046,13,4299,4],[5046,22,4299,4,"_getReauthenticationResolver"],[5046,50,4299,32,"_getReauthenticationResolver"],[5046,51,4299,33,"auth"],[5046,55,4299,37],[5046,57,4299,39],[5047,8,4300,8],[5047,15,4300,15,"verifyPhoneNumberForExisting"],[5047,43,4300,43],[5047,44,4300,44,"auth"],[5047,48,4300,48],[5047,50,4300,50],[5047,54,4300,54],[5047,55,4300,55,"_makeVerificationRequest"],[5047,79,4300,79],[5047,80,4300,80],[5047,81,4300,81],[5047,82,4300,82],[5048,6,4301,4],[5049,6,4302,4],[5050,4,4302,4],[5051,6,4302,4,"key"],[5051,9,4302,4],[5052,6,4302,4,"value"],[5052,11,4302,4],[5052,13,4303,4],[5052,22,4303,4,"_makeVerificationRequest"],[5052,46,4303,28,"_makeVerificationRequest"],[5052,47,4303,28],[5052,49,4303,31],[5053,8,4304,8],[5053,12,4304,8,"_this$params2"],[5053,25,4304,8],[5053,28,4304,82],[5053,32,4304,86],[5053,33,4304,87,"params"],[5053,39,4304,93],[5054,10,4304,16,"temporaryProof"],[5054,24,4304,30],[5054,27,4304,30,"_this$params2"],[5054,40,4304,30],[5054,41,4304,16,"temporaryProof"],[5054,55,4304,30],[5055,10,4304,32,"phoneNumber"],[5055,21,4304,43],[5055,24,4304,43,"_this$params2"],[5055,37,4304,43],[5055,38,4304,32,"phoneNumber"],[5055,49,4304,43],[5056,10,4304,45,"verificationId"],[5056,24,4304,59],[5056,27,4304,59,"_this$params2"],[5056,40,4304,59],[5056,41,4304,45,"verificationId"],[5056,55,4304,59],[5057,10,4304,61,"verificationCode"],[5057,26,4304,77],[5057,29,4304,77,"_this$params2"],[5057,42,4304,77],[5057,43,4304,61,"verificationCode"],[5057,59,4304,77],[5058,8,4305,8],[5058,12,4305,12,"temporaryProof"],[5058,26,4305,26],[5058,30,4305,30,"phoneNumber"],[5058,41,4305,41],[5058,43,4305,43],[5059,10,4306,12],[5059,17,4306,19],[5060,12,4306,21,"temporaryProof"],[5060,26,4306,35],[5061,12,4306,37,"phoneNumber"],[5062,10,4306,49],[5062,11,4306,50],[5063,8,4307,8],[5064,8,4308,8],[5064,15,4308,15],[5065,10,4309,12,"sessionInfo"],[5065,21,4309,23],[5065,23,4309,25,"verificationId"],[5065,37,4309,39],[5066,10,4310,12,"code"],[5066,14,4310,16],[5066,16,4310,18,"verificationCode"],[5067,8,4311,8],[5067,9,4311,9],[5068,6,4312,4],[5069,6,4313,4],[5070,4,4313,4],[5071,6,4313,4,"key"],[5071,9,4313,4],[5072,6,4313,4,"value"],[5072,11,4313,4],[5072,13,4314,4],[5072,22,4314,4,"toJSON"],[5072,28,4314,10,"toJSON"],[5072,29,4314,10],[5072,31,4314,13],[5073,8,4315,8],[5073,12,4315,14,"obj"],[5073,15,4315,17],[5073,18,4315,20],[5074,10,4316,12,"providerId"],[5074,20,4316,22],[5074,22,4316,24],[5074,26,4316,28],[5074,27,4316,29,"providerId"],[5075,8,4317,8],[5075,9,4317,9],[5076,8,4318,8],[5076,12,4318,12],[5076,16,4318,16],[5076,17,4318,17,"params"],[5076,23,4318,23],[5076,24,4318,24,"phoneNumber"],[5076,35,4318,35],[5076,37,4318,37],[5077,10,4319,12,"obj"],[5077,13,4319,15],[5077,14,4319,16,"phoneNumber"],[5077,25,4319,27],[5077,28,4319,30],[5077,32,4319,34],[5077,33,4319,35,"params"],[5077,39,4319,41],[5077,40,4319,42,"phoneNumber"],[5077,51,4319,53],[5078,8,4320,8],[5079,8,4321,8],[5079,12,4321,12],[5079,16,4321,16],[5079,17,4321,17,"params"],[5079,23,4321,23],[5079,24,4321,24,"temporaryProof"],[5079,38,4321,38],[5079,40,4321,40],[5080,10,4322,12,"obj"],[5080,13,4322,15],[5080,14,4322,16,"temporaryProof"],[5080,28,4322,30],[5080,31,4322,33],[5080,35,4322,37],[5080,36,4322,38,"params"],[5080,42,4322,44],[5080,43,4322,45,"temporaryProof"],[5080,57,4322,59],[5081,8,4323,8],[5082,8,4324,8],[5082,12,4324,12],[5082,16,4324,16],[5082,17,4324,17,"params"],[5082,23,4324,23],[5082,24,4324,24,"verificationCode"],[5082,40,4324,40],[5082,42,4324,42],[5083,10,4325,12,"obj"],[5083,13,4325,15],[5083,14,4325,16,"verificationCode"],[5083,30,4325,32],[5083,33,4325,35],[5083,37,4325,39],[5083,38,4325,40,"params"],[5083,44,4325,46],[5083,45,4325,47,"verificationCode"],[5083,61,4325,63],[5084,8,4326,8],[5085,8,4327,8],[5085,12,4327,12],[5085,16,4327,16],[5085,17,4327,17,"params"],[5085,23,4327,23],[5085,24,4327,24,"verificationId"],[5085,38,4327,38],[5085,40,4327,40],[5086,10,4328,12,"obj"],[5086,13,4328,15],[5086,14,4328,16,"verificationId"],[5086,28,4328,30],[5086,31,4328,33],[5086,35,4328,37],[5086,36,4328,38,"params"],[5086,42,4328,44],[5086,43,4328,45,"verificationId"],[5086,57,4328,59],[5087,8,4329,8],[5088,8,4330,8],[5088,15,4330,15,"obj"],[5088,18,4330,18],[5089,6,4331,4],[5090,6,4332,4],[5091,4,4332,4],[5092,6,4332,4,"key"],[5092,9,4332,4],[5093,6,4332,4,"value"],[5093,11,4332,4],[5093,13,4280,4],[5093,22,4280,11,"_fromVerification"],[5093,39,4280,28,"_fromVerification"],[5093,40,4280,29,"verificationId"],[5093,54,4280,43],[5093,56,4280,45,"verificationCode"],[5093,72,4280,61],[5093,74,4280,63],[5094,8,4281,8],[5094,15,4281,15],[5094,19,4281,19,"PhoneAuthCredential"],[5094,38,4281,38],[5094,39,4281,39],[5095,10,4281,41,"verificationId"],[5095,24,4281,55],[5096,10,4281,57,"verificationCode"],[5097,8,4281,74],[5097,9,4281,75],[5097,10,4281,76],[5098,6,4282,4],[5099,6,4283,4],[5100,4,4283,4],[5101,6,4283,4,"key"],[5101,9,4283,4],[5102,6,4283,4,"value"],[5102,11,4283,4],[5102,13,4284,4],[5102,22,4284,11,"_fromTokenResponse"],[5102,40,4284,29,"_fromTokenResponse"],[5102,41,4284,30,"phoneNumber"],[5102,52,4284,41],[5102,54,4284,43,"temporaryProof"],[5102,68,4284,57],[5102,70,4284,59],[5103,8,4285,8],[5103,15,4285,15],[5103,19,4285,19,"PhoneAuthCredential"],[5103,38,4285,38],[5103,39,4285,39],[5104,10,4285,41,"phoneNumber"],[5104,21,4285,52],[5105,10,4285,54,"temporaryProof"],[5106,8,4285,69],[5106,9,4285,70],[5106,10,4285,71],[5107,6,4286,4],[5108,4,4286,5],[5109,6,4286,5,"key"],[5109,9,4286,5],[5110,6,4286,5,"value"],[5110,11,4286,5],[5110,13,4333,4],[5110,22,4333,11,"fromJSON"],[5110,30,4333,19,"fromJSON"],[5110,31,4333,20,"json"],[5110,35,4333,24],[5110,37,4333,26],[5111,8,4334,8],[5111,12,4334,12],[5111,19,4334,19,"json"],[5111,23,4334,23],[5111,28,4334,28],[5111,36,4334,36],[5111,38,4334,38],[5112,10,4335,12,"json"],[5112,14,4335,16],[5112,17,4335,19,"JSON"],[5112,21,4335,23],[5112,22,4335,24,"parse"],[5112,27,4335,29],[5112,28,4335,30,"json"],[5112,32,4335,34],[5112,33,4335,35],[5113,8,4336,8],[5114,8,4337,8],[5114,12,4337,8,"_json"],[5114,17,4337,8],[5114,20,4337,82,"json"],[5114,24,4337,86],[5115,10,4337,16,"verificationId"],[5115,24,4337,30],[5115,27,4337,30,"_json"],[5115,32,4337,30],[5115,33,4337,16,"verificationId"],[5115,47,4337,30],[5116,10,4337,32,"verificationCode"],[5116,26,4337,48],[5116,29,4337,48,"_json"],[5116,34,4337,48],[5116,35,4337,32,"verificationCode"],[5116,51,4337,48],[5117,10,4337,50,"phoneNumber"],[5117,21,4337,61],[5117,24,4337,61,"_json"],[5117,29,4337,61],[5117,30,4337,50,"phoneNumber"],[5117,41,4337,61],[5118,10,4337,63,"temporaryProof"],[5118,24,4337,77],[5118,27,4337,77,"_json"],[5118,32,4337,77],[5118,33,4337,63,"temporaryProof"],[5118,47,4337,77],[5119,8,4338,8],[5119,12,4338,12],[5119,13,4338,13,"verificationCode"],[5119,29,4338,29],[5119,33,4339,12],[5119,34,4339,13,"verificationId"],[5119,48,4339,27],[5119,52,4340,12],[5119,53,4340,13,"phoneNumber"],[5119,64,4340,24],[5119,68,4341,12],[5119,69,4341,13,"temporaryProof"],[5119,83,4341,27],[5119,85,4341,29],[5120,10,4342,12],[5120,17,4342,19],[5120,21,4342,23],[5121,8,4343,8],[5122,8,4344,8],[5122,15,4344,15],[5122,19,4344,19,"PhoneAuthCredential"],[5122,38,4344,38],[5122,39,4344,39],[5123,10,4345,12,"verificationId"],[5123,24,4345,26],[5124,10,4346,12,"verificationCode"],[5124,26,4346,28],[5125,10,4347,12,"phoneNumber"],[5125,21,4347,23],[5126,10,4348,12,"temporaryProof"],[5127,8,4349,8],[5127,9,4349,9],[5127,10,4349,10],[5128,6,4350,4],[5129,4,4350,5],[5130,2,4350,5],[5130,4,4274,34,"AuthCredential"],[5130,18,4274,48],[5131,2,4353,0],[5132,0,4354,0],[5133,0,4355,0],[5134,0,4356,0],[5135,0,4357,0],[5136,0,4358,0],[5137,0,4359,0],[5138,0,4360,0],[5139,0,4361,0],[5140,0,4362,0],[5141,0,4363,0],[5142,0,4364,0],[5143,0,4365,0],[5144,0,4366,0],[5145,0,4367,0],[5146,0,4368,0],[5147,2,4369,0],[5148,0,4370,0],[5149,0,4371,0],[5150,0,4372,0],[5151,0,4373,0],[5152,2,4374,0],[5152,11,4374,9,"parseMode"],[5152,20,4374,18,"parseMode"],[5152,21,4374,19,"mode"],[5152,25,4374,23],[5152,27,4374,25],[5153,4,4375,4],[5153,12,4375,12,"mode"],[5153,16,4375,16],[5154,6,4376,8],[5154,11,4376,13],[5154,25,4376,27],[5155,8,4377,12],[5155,15,4377,19],[5155,30,4377,34],[5155,31,4377,35],[5156,6,4378,8],[5156,11,4378,13],[5156,26,4378,28],[5157,8,4379,12],[5157,15,4379,19],[5157,31,4379,35],[5157,32,4379,36],[5158,6,4380,8],[5158,11,4380,13],[5158,19,4380,21],[5159,8,4381,12],[5159,15,4381,19],[5159,29,4381,33],[5159,30,4381,34],[5160,6,4382,8],[5160,11,4382,13],[5160,24,4382,26],[5161,8,4383,12],[5161,15,4383,19],[5161,29,4383,33],[5161,30,4383,34],[5162,6,4384,8],[5162,11,4384,13],[5162,33,4384,35],[5163,8,4385,12],[5163,15,4385,19],[5163,40,4385,44],[5163,41,4385,45],[5164,6,4386,8],[5164,11,4386,13],[5164,39,4386,41],[5165,8,4387,12],[5165,15,4387,19],[5165,46,4387,50],[5165,47,4387,51],[5166,6,4388,8],[5167,8,4389,12],[5167,15,4389,19],[5167,19,4389,23],[5168,4,4390,4],[5169,2,4391,0],[5170,2,4392,0],[5171,0,4393,0],[5172,0,4394,0],[5173,0,4395,0],[5174,0,4396,0],[5175,2,4397,0],[5175,11,4397,9,"parseDeepLink"],[5175,24,4397,22,"parseDeepLink"],[5175,25,4397,23,"url"],[5175,28,4397,26],[5175,30,4397,28],[5176,4,4398,4],[5176,8,4398,10,"link"],[5176,12,4398,14],[5176,15,4398,17,"util"],[5176,19,4398,21],[5176,20,4398,22,"querystringDecode"],[5176,37,4398,39],[5176,38,4398,40,"util"],[5176,42,4398,44],[5176,43,4398,45,"extractQuerystring"],[5176,61,4398,63],[5176,62,4398,64,"url"],[5176,65,4398,67],[5176,66,4398,68],[5176,67,4398,69],[5176,68,4398,70],[5176,74,4398,76],[5176,75,4398,77],[5177,4,4399,4],[5178,4,4400,4],[5178,8,4400,10,"doubleDeepLink"],[5178,22,4400,24],[5178,25,4400,27,"link"],[5178,29,4400,31],[5178,32,4401,10,"util"],[5178,36,4401,14],[5178,37,4401,15,"querystringDecode"],[5178,54,4401,32],[5178,55,4401,33,"util"],[5178,59,4401,37],[5178,60,4401,38,"extractQuerystring"],[5178,78,4401,56],[5178,79,4401,57,"link"],[5178,83,4401,61],[5178,84,4401,62],[5178,85,4401,63],[5178,86,4401,64],[5178,100,4401,78],[5178,101,4401,79],[5178,104,4402,10],[5178,108,4402,14],[5179,4,4403,4],[5180,4,4404,4],[5180,8,4404,10,"iOSDeepLink"],[5180,19,4404,21],[5180,22,4404,24,"util"],[5180,26,4404,28],[5180,27,4404,29,"querystringDecode"],[5180,44,4404,46],[5180,45,4404,47,"util"],[5180,49,4404,51],[5180,50,4404,52,"extractQuerystring"],[5180,68,4404,70],[5180,69,4404,71,"url"],[5180,72,4404,74],[5180,73,4404,75],[5180,74,4404,76],[5180,75,4404,77],[5180,89,4404,91],[5180,90,4404,92],[5181,4,4405,4],[5181,8,4405,10,"iOSDoubleDeepLink"],[5181,25,4405,27],[5181,28,4405,30,"iOSDeepLink"],[5181,39,4405,41],[5181,42,4406,10,"util"],[5181,46,4406,14],[5181,47,4406,15,"querystringDecode"],[5181,64,4406,32],[5181,65,4406,33,"util"],[5181,69,4406,37],[5181,70,4406,38,"extractQuerystring"],[5181,88,4406,56],[5181,89,4406,57,"iOSDeepLink"],[5181,100,4406,68],[5181,101,4406,69],[5181,102,4406,70],[5181,103,4406,71],[5181,109,4406,77],[5181,110,4406,78],[5181,113,4407,10],[5181,117,4407,14],[5182,4,4408,4],[5182,11,4408,11,"iOSDoubleDeepLink"],[5182,28,4408,28],[5182,32,4408,32,"iOSDeepLink"],[5182,43,4408,43],[5182,47,4408,47,"doubleDeepLink"],[5182,61,4408,61],[5182,65,4408,65,"link"],[5182,69,4408,69],[5182,73,4408,73,"url"],[5182,76,4408,76],[5183,2,4409,0],[5184,2,4410,0],[5185,0,4411,0],[5186,0,4412,0],[5187,0,4413,0],[5188,0,4414,0],[5189,0,4415,0],[5190,2,4410,0],[5190,6,4416,6,"ActionCodeURL"],[5190,19,4416,19],[5191,4,4417,4],[5192,0,4418,0],[5193,0,4419,0],[5194,0,4420,0],[5195,0,4421,0],[5196,0,4422,0],[5197,4,4423,4],[5197,13,4423,4,"ActionCodeURL"],[5197,27,4423,16,"actionLink"],[5197,37,4423,26],[5197,39,4423,28],[5198,6,4423,28,"_classCallCheck"],[5198,21,4423,28],[5198,28,4423,28,"ActionCodeURL"],[5198,41,4423,28],[5199,6,4424,8],[5199,10,4424,14,"searchParams"],[5199,22,4424,26],[5199,25,4424,29,"util"],[5199,29,4424,33],[5199,30,4424,34,"querystringDecode"],[5199,47,4424,51],[5199,48,4424,52,"util"],[5199,52,4424,56],[5199,53,4424,57,"extractQuerystring"],[5199,71,4424,75],[5199,72,4424,76,"actionLink"],[5199,82,4424,86],[5199,83,4424,87],[5199,84,4424,88],[5200,6,4425,8],[5200,10,4425,14,"apiKey"],[5200,16,4425,20],[5200,19,4425,23,"searchParams"],[5200,31,4425,35],[5200,32,4425,36],[5200,40,4425,44],[5200,41,4425,45],[5200,66,4425,70],[5200,70,4425,74],[5200,74,4425,78],[5201,6,4426,8],[5201,10,4426,14,"code"],[5201,14,4426,18],[5201,17,4426,21,"searchParams"],[5201,29,4426,33],[5201,30,4426,34],[5201,39,4426,43],[5201,40,4426,44],[5201,62,4426,66],[5201,66,4426,70],[5201,70,4426,74],[5202,6,4427,8],[5202,10,4427,14,"operation"],[5202,19,4427,23],[5202,22,4427,26,"parseMode"],[5202,31,4427,35],[5202,32,4427,36,"searchParams"],[5202,44,4427,48],[5202,45,4427,49],[5202,51,4427,55],[5202,52,4427,56],[5202,74,4427,78],[5202,78,4427,82],[5202,82,4427,86],[5202,83,4427,87],[5203,6,4428,8],[5204,6,4429,8,"_assert"],[5204,13,4429,15],[5204,14,4429,16,"apiKey"],[5204,20,4429,22],[5204,24,4429,26,"code"],[5204,28,4429,30],[5204,32,4429,34,"operation"],[5204,41,4429,43],[5204,43,4429,45],[5204,59,4429,61],[5204,60,4429,62],[5204,94,4429,96],[5204,95,4429,97],[5205,6,4430,8],[5205,10,4430,12],[5205,11,4430,13,"apiKey"],[5205,17,4430,19],[5205,20,4430,22,"apiKey"],[5205,26,4430,28],[5206,6,4431,8],[5206,10,4431,12],[5206,11,4431,13,"operation"],[5206,20,4431,22],[5206,23,4431,25,"operation"],[5206,32,4431,34],[5207,6,4432,8],[5207,10,4432,12],[5207,11,4432,13,"code"],[5207,15,4432,17],[5207,18,4432,20,"code"],[5207,22,4432,24],[5208,6,4433,8],[5208,10,4433,12],[5208,11,4433,13,"continueUrl"],[5208,22,4433,24],[5208,25,4433,27,"searchParams"],[5208,37,4433,39],[5208,38,4433,40],[5208,51,4433,53],[5208,52,4433,54],[5208,82,4433,84],[5208,86,4433,88],[5208,90,4433,92],[5209,6,4434,8],[5209,10,4434,12],[5209,11,4434,13,"languageCode"],[5209,23,4434,25],[5209,26,4434,28,"searchParams"],[5209,38,4434,40],[5209,39,4434,41],[5209,45,4434,47],[5209,46,4434,48],[5209,77,4434,79],[5209,81,4434,83],[5209,85,4434,87],[5210,6,4435,8],[5210,10,4435,12],[5210,11,4435,13,"tenantId"],[5210,19,4435,21],[5210,22,4435,24,"searchParams"],[5210,34,4435,36],[5210,35,4435,37],[5210,45,4435,47],[5210,46,4435,48],[5210,73,4435,75],[5210,77,4435,79],[5210,81,4435,83],[5211,4,4436,4],[5212,4,4437,4],[5213,0,4438,0],[5214,0,4439,0],[5215,0,4440,0],[5216,0,4441,0],[5217,0,4442,0],[5218,0,4443,0],[5219,0,4444,0],[5220,0,4445,0],[5221,4,4437,4],[5221,11,4437,4,"_createClass"],[5221,23,4437,4],[5221,24,4437,4,"ActionCodeURL"],[5221,37,4437,4],[5222,6,4437,4,"key"],[5222,9,4437,4],[5223,6,4437,4,"value"],[5223,11,4437,4],[5223,13,4446,4],[5223,22,4446,11,"parseLink"],[5223,31,4446,20,"parseLink"],[5223,32,4446,21,"link"],[5223,36,4446,25],[5223,38,4446,27],[5224,8,4447,8],[5224,12,4447,14,"actionLink"],[5224,22,4447,24],[5224,25,4447,27,"parseDeepLink"],[5224,38,4447,40],[5224,39,4447,41,"link"],[5224,43,4447,45],[5224,44,4447,46],[5225,8,4448,8],[5225,12,4448,12],[5226,10,4449,12],[5226,17,4449,19],[5226,21,4449,23,"ActionCodeURL"],[5226,34,4449,36],[5226,35,4449,37,"actionLink"],[5226,45,4449,47],[5226,46,4449,48],[5227,8,4450,8],[5227,9,4450,9],[5227,10,4451,8],[5227,16,4451,14],[5228,10,4452,12],[5228,17,4452,19],[5228,21,4452,23],[5229,8,4453,8],[5230,6,4454,4],[5231,4,4454,5],[5232,2,4454,5],[5233,2,4456,0],[5234,0,4457,0],[5235,0,4458,0],[5236,0,4459,0],[5237,0,4460,0],[5238,0,4461,0],[5239,2,4462,0],[5239,11,4462,9,"parseActionCodeURL"],[5239,29,4462,27,"parseActionCodeURL"],[5239,30,4462,28,"link"],[5239,34,4462,32],[5239,36,4462,34],[5240,4,4463,4],[5240,11,4463,11,"ActionCodeURL"],[5240,24,4463,24],[5240,25,4463,25,"parseLink"],[5240,34,4463,34],[5240,35,4463,35,"link"],[5240,39,4463,39],[5240,40,4463,40],[5241,2,4464,0],[5243,2,4466,0],[5244,0,4467,0],[5245,0,4468,0],[5246,0,4469,0],[5247,0,4470,0],[5248,0,4471,0],[5249,0,4472,0],[5250,0,4473,0],[5251,0,4474,0],[5252,0,4475,0],[5253,0,4476,0],[5254,0,4477,0],[5255,0,4478,0],[5256,0,4479,0],[5257,0,4480,0],[5258,0,4481,0],[5259,2,4482,0],[5260,0,4483,0],[5261,0,4484,0],[5262,0,4485,0],[5263,0,4486,0],[5264,2,4482,0],[5264,6,4487,6,"EmailAuthProvider"],[5264,23,4487,23],[5265,4,4488,4],[5265,13,4488,4,"EmailAuthProvider"],[5265,31,4488,4],[5265,33,4488,18],[5266,6,4488,18,"_classCallCheck"],[5266,21,4488,18],[5266,28,4488,18,"EmailAuthProvider"],[5266,45,4488,18],[5267,6,4489,8],[5268,0,4490,0],[5269,0,4491,0],[5270,6,4492,8],[5270,10,4492,12],[5270,11,4492,13,"providerId"],[5270,21,4492,23],[5270,24,4492,26,"EmailAuthProvider"],[5270,41,4492,43],[5270,42,4492,44,"PROVIDER_ID"],[5270,53,4492,55],[5271,4,4493,4],[5272,4,4494,4],[5273,0,4495,0],[5274,0,4496,0],[5275,0,4497,0],[5276,0,4498,0],[5277,0,4499,0],[5278,0,4500,0],[5279,0,4501,0],[5280,0,4502,0],[5281,0,4503,0],[5282,0,4504,0],[5283,0,4505,0],[5284,0,4506,0],[5285,0,4507,0],[5286,0,4508,0],[5287,0,4509,0],[5288,0,4510,0],[5289,0,4511,0],[5290,4,4494,4],[5290,11,4494,4,"_createClass"],[5290,23,4494,4],[5290,24,4494,4,"EmailAuthProvider"],[5290,41,4494,4],[5291,6,4494,4,"key"],[5291,9,4494,4],[5292,6,4494,4,"value"],[5292,11,4494,4],[5292,13,4512,4],[5292,22,4512,11,"credential"],[5292,32,4512,21,"credential"],[5292,33,4512,22,"email"],[5292,38,4512,27],[5292,40,4512,29,"password"],[5292,48,4512,37],[5292,50,4512,39],[5293,8,4513,8],[5293,15,4513,15,"EmailAuthCredential"],[5293,34,4513,34],[5293,35,4513,35,"_fromEmailAndPassword"],[5293,56,4513,56],[5293,57,4513,57,"email"],[5293,62,4513,62],[5293,64,4513,64,"password"],[5293,72,4513,72],[5293,73,4513,73],[5294,6,4514,4],[5295,6,4515,4],[5296,0,4516,0],[5297,0,4517,0],[5298,0,4518,0],[5299,0,4519,0],[5300,0,4520,0],[5301,0,4521,0],[5302,0,4522,0],[5303,0,4523,0],[5304,0,4524,0],[5305,0,4525,0],[5306,0,4526,0],[5307,0,4527,0],[5308,0,4528,0],[5309,0,4529,0],[5310,0,4530,0],[5311,0,4531,0],[5312,0,4532,0],[5313,0,4533,0],[5314,0,4534,0],[5315,0,4535,0],[5316,0,4536,0],[5317,4,4515,4],[5318,6,4515,4,"key"],[5318,9,4515,4],[5319,6,4515,4,"value"],[5319,11,4515,4],[5319,13,4537,4],[5319,22,4537,11,"credentialWithLink"],[5319,40,4537,29,"credentialWithLink"],[5319,41,4537,30,"email"],[5319,46,4537,35],[5319,48,4537,37,"emailLink"],[5319,57,4537,46],[5319,59,4537,48],[5320,8,4538,8],[5320,12,4538,14,"actionCodeUrl"],[5320,25,4538,27],[5320,28,4538,30,"ActionCodeURL"],[5320,41,4538,43],[5320,42,4538,44,"parseLink"],[5320,51,4538,53],[5320,52,4538,54,"emailLink"],[5320,61,4538,63],[5320,62,4538,64],[5321,8,4539,8,"_assert"],[5321,15,4539,15],[5321,16,4539,16,"actionCodeUrl"],[5321,29,4539,29],[5321,31,4539,31],[5321,47,4539,47],[5321,48,4539,48],[5321,82,4539,82],[5321,83,4539,83],[5322,8,4540,8],[5322,15,4540,15,"EmailAuthCredential"],[5322,34,4540,34],[5322,35,4540,35,"_fromEmailAndCode"],[5322,52,4540,52],[5322,53,4540,53,"email"],[5322,58,4540,58],[5322,60,4540,60,"actionCodeUrl"],[5322,73,4540,73],[5322,74,4540,74,"code"],[5322,78,4540,78],[5322,80,4540,80,"actionCodeUrl"],[5322,93,4540,93],[5322,94,4540,94,"tenantId"],[5322,102,4540,102],[5322,103,4540,103],[5323,6,4541,4],[5324,4,4541,5],[5325,2,4541,5],[5326,2,4543,0],[5327,0,4544,0],[5328,0,4545,0],[5329,2,4546,0,"EmailAuthProvider"],[5329,19,4546,17],[5329,20,4546,18,"PROVIDER_ID"],[5329,31,4546,29],[5329,34,4546,32],[5329,44,4546,42],[5329,45,4546,43],[5330,2,4547,0],[5331,0,4548,0],[5332,0,4549,0],[5333,2,4550,0,"EmailAuthProvider"],[5333,19,4550,17],[5333,20,4550,18,"EMAIL_PASSWORD_SIGN_IN_METHOD"],[5333,49,4550,47],[5333,52,4550,50],[5333,62,4550,60],[5333,63,4550,61],[5334,2,4551,0],[5335,0,4552,0],[5336,0,4553,0],[5337,2,4554,0,"EmailAuthProvider"],[5337,19,4554,17],[5337,20,4554,18,"EMAIL_LINK_SIGN_IN_METHOD"],[5337,45,4554,43],[5337,48,4554,46],[5337,59,4554,57],[5337,60,4554,58],[5339,2,4556,0],[5340,0,4557,0],[5341,0,4558,0],[5342,0,4559,0],[5343,0,4560,0],[5344,0,4561,0],[5345,0,4562,0],[5346,0,4563,0],[5347,0,4564,0],[5348,0,4565,0],[5349,0,4566,0],[5350,0,4567,0],[5351,0,4568,0],[5352,0,4569,0],[5353,0,4570,0],[5354,0,4571,0],[5355,2,4572,0],[5356,0,4573,0],[5357,0,4574,0],[5358,0,4575,0],[5359,0,4576,0],[5360,0,4577,0],[5361,0,4578,0],[5362,2,4572,0],[5362,6,4579,6,"FederatedAuthProvider"],[5362,27,4579,27],[5363,4,4580,4],[5364,0,4581,0],[5365,0,4582,0],[5366,0,4583,0],[5367,0,4584,0],[5368,4,4585,4],[5368,13,4585,4,"FederatedAuthProvider"],[5368,35,4585,16,"providerId"],[5368,45,4585,26],[5368,47,4585,28],[5369,6,4585,28,"_classCallCheck"],[5369,21,4585,28],[5369,28,4585,28,"FederatedAuthProvider"],[5369,49,4585,28],[5370,6,4586,8],[5370,10,4586,12],[5370,11,4586,13,"providerId"],[5370,21,4586,23],[5370,24,4586,26,"providerId"],[5370,34,4586,36],[5371,6,4587,8],[5372,6,4588,8],[5372,10,4588,12],[5372,11,4588,13,"defaultLanguageCode"],[5372,30,4588,32],[5372,33,4588,35],[5372,37,4588,39],[5373,6,4589,8],[5374,6,4590,8],[5374,10,4590,12],[5374,11,4590,13,"customParameters"],[5374,27,4590,29],[5374,30,4590,32],[5374,31,4590,33],[5374,32,4590,34],[5375,4,4591,4],[5376,4,4592,4],[5377,0,4593,0],[5378,0,4594,0],[5379,0,4595,0],[5380,0,4596,0],[5381,4,4592,4],[5381,11,4592,4,"_createClass"],[5381,23,4592,4],[5381,24,4592,4,"FederatedAuthProvider"],[5381,45,4592,4],[5382,6,4592,4,"key"],[5382,9,4592,4],[5383,6,4592,4,"value"],[5383,11,4592,4],[5383,13,4597,4],[5383,22,4597,4,"setDefaultLanguage"],[5383,40,4597,22,"setDefaultLanguage"],[5383,41,4597,23,"languageCode"],[5383,53,4597,35],[5383,55,4597,37],[5384,8,4598,8],[5384,12,4598,12],[5384,13,4598,13,"defaultLanguageCode"],[5384,32,4598,32],[5384,35,4598,35,"languageCode"],[5384,47,4598,47],[5385,6,4599,4],[5386,6,4600,4],[5387,0,4601,0],[5388,0,4602,0],[5389,0,4603,0],[5390,0,4604,0],[5391,0,4605,0],[5392,0,4606,0],[5393,0,4607,0],[5394,0,4608,0],[5395,0,4609,0],[5396,4,4600,4],[5397,6,4600,4,"key"],[5397,9,4600,4],[5398,6,4600,4,"value"],[5398,11,4600,4],[5398,13,4610,4],[5398,22,4610,4,"setCustomParameters"],[5398,41,4610,23,"setCustomParameters"],[5398,42,4610,24,"customOAuthParameters"],[5398,63,4610,45],[5398,65,4610,47],[5399,8,4611,8],[5399,12,4611,12],[5399,13,4611,13,"customParameters"],[5399,29,4611,29],[5399,32,4611,32,"customOAuthParameters"],[5399,53,4611,53],[5400,8,4612,8],[5400,15,4612,15],[5400,19,4612,19],[5401,6,4613,4],[5402,6,4614,4],[5403,0,4615,0],[5404,0,4616,0],[5405,4,4614,4],[5406,6,4614,4,"key"],[5406,9,4614,4],[5407,6,4614,4,"value"],[5407,11,4614,4],[5407,13,4617,4],[5407,22,4617,4,"getCustomParameters"],[5407,41,4617,23,"getCustomParameters"],[5407,42,4617,23],[5407,44,4617,26],[5408,8,4618,8],[5408,15,4618,15],[5408,19,4618,19],[5408,20,4618,20,"customParameters"],[5408,36,4618,36],[5409,6,4619,4],[5410,4,4619,5],[5411,2,4619,5],[5412,2,4622,0],[5413,0,4623,0],[5414,0,4624,0],[5415,0,4625,0],[5416,0,4626,0],[5417,0,4627,0],[5418,0,4628,0],[5419,0,4629,0],[5420,0,4630,0],[5421,0,4631,0],[5422,0,4632,0],[5423,0,4633,0],[5424,0,4634,0],[5425,0,4635,0],[5426,0,4636,0],[5427,0,4637,0],[5428,2,4638,0],[5429,0,4639,0],[5430,0,4640,0],[5431,0,4641,0],[5432,0,4642,0],[5433,0,4643,0],[5434,2,4638,0],[5434,6,4644,6,"BaseOAuthProvider"],[5434,23,4644,23],[5434,49,4644,23,"_FederatedAuthProvide"],[5434,70,4644,23],[5435,4,4645,4],[5435,13,4645,4,"BaseOAuthProvider"],[5435,31,4645,4],[5435,33,4645,18],[5436,6,4645,18],[5436,10,4645,18,"_this9"],[5436,16,4645,18],[5437,6,4645,18,"_classCallCheck"],[5437,21,4645,18],[5437,28,4645,18,"BaseOAuthProvider"],[5437,45,4645,18],[5438,6,4646,8,"_this9"],[5438,12,4646,8],[5438,15,4646,8,"_callSuper"],[5438,25,4646,8],[5438,32,4646,8,"BaseOAuthProvider"],[5438,49,4646,8],[5438,51,4646,17,"arguments"],[5438,60,4646,26],[5439,6,4647,8],[5440,6,4648,8,"_this9"],[5440,12,4648,8],[5440,13,4648,13,"scopes"],[5440,19,4648,19],[5440,22,4648,22],[5440,24,4648,24],[5441,6,4648,25],[5441,13,4648,25,"_this9"],[5441,19,4648,25],[5442,4,4649,4],[5443,4,4650,4],[5444,0,4651,0],[5445,0,4652,0],[5446,0,4653,0],[5447,0,4654,0],[5448,4,4650,4,"_inherits"],[5448,13,4650,4],[5448,14,4650,4,"BaseOAuthProvider"],[5448,31,4650,4],[5448,33,4650,4,"_FederatedAuthProvide"],[5448,54,4650,4],[5449,4,4650,4],[5449,11,4650,4,"_createClass"],[5449,23,4650,4],[5449,24,4650,4,"BaseOAuthProvider"],[5449,41,4650,4],[5450,6,4650,4,"key"],[5450,9,4650,4],[5451,6,4650,4,"value"],[5451,11,4650,4],[5451,13,4655,4],[5451,22,4655,4,"addScope"],[5451,30,4655,12,"addScope"],[5451,31,4655,13,"scope"],[5451,36,4655,18],[5451,38,4655,20],[5452,8,4656,8],[5453,8,4657,8],[5453,12,4657,12],[5453,13,4657,13],[5453,17,4657,17],[5453,18,4657,18,"scopes"],[5453,24,4657,24],[5453,25,4657,25,"includes"],[5453,33,4657,33],[5453,34,4657,34,"scope"],[5453,39,4657,39],[5453,40,4657,40],[5453,42,4657,42],[5454,10,4658,12],[5454,14,4658,16],[5454,15,4658,17,"scopes"],[5454,21,4658,23],[5454,22,4658,24,"push"],[5454,26,4658,28],[5454,27,4658,29,"scope"],[5454,32,4658,34],[5454,33,4658,35],[5455,8,4659,8],[5456,8,4660,8],[5456,15,4660,15],[5456,19,4660,19],[5457,6,4661,4],[5458,6,4662,4],[5459,0,4663,0],[5460,0,4664,0],[5461,4,4662,4],[5462,6,4662,4,"key"],[5462,9,4662,4],[5463,6,4662,4,"value"],[5463,11,4662,4],[5463,13,4665,4],[5463,22,4665,4,"getScopes"],[5463,31,4665,13,"getScopes"],[5463,32,4665,13],[5463,34,4665,16],[5464,8,4666,8],[5464,15,4666,15],[5464,16,4666,16],[5464,19,4666,19],[5464,23,4666,23],[5464,24,4666,24,"scopes"],[5464,30,4666,30],[5464,31,4666,31],[5465,6,4667,4],[5466,4,4667,5],[5467,2,4667,5],[5467,4,4644,32,"FederatedAuthProvider"],[5467,25,4644,53],[5468,2,4669,0],[5469,0,4670,0],[5470,0,4671,0],[5471,0,4672,0],[5472,0,4673,0],[5473,0,4674,0],[5474,0,4675,0],[5475,0,4676,0],[5476,0,4677,0],[5477,0,4678,0],[5478,0,4679,0],[5479,0,4680,0],[5480,0,4681,0],[5481,0,4682,0],[5482,0,4683,0],[5483,0,4684,0],[5484,0,4685,0],[5485,0,4686,0],[5486,0,4687,0],[5487,0,4688,0],[5488,0,4689,0],[5489,0,4690,0],[5490,0,4691,0],[5491,0,4692,0],[5492,0,4693,0],[5493,0,4694,0],[5494,0,4695,0],[5495,0,4696,0],[5496,0,4697,0],[5497,0,4698,0],[5498,0,4699,0],[5499,0,4700,0],[5500,0,4701,0],[5501,0,4702,0],[5502,0,4703,0],[5503,0,4704,0],[5504,0,4705,0],[5505,0,4706,0],[5506,0,4707,0],[5507,0,4708,0],[5508,2,4669,0],[5508,6,4709,6,"OAuthProvider"],[5508,19,4709,19],[5508,45,4709,19,"_BaseOAuthProvider"],[5508,63,4709,19],[5509,4,4709,19],[5509,13,4709,19,"OAuthProvider"],[5509,27,4709,19],[5510,6,4709,19,"_classCallCheck"],[5510,21,4709,19],[5510,28,4709,19,"OAuthProvider"],[5510,41,4709,19],[5511,6,4709,19],[5511,13,4709,19,"_callSuper"],[5511,23,4709,19],[5511,30,4709,19,"OAuthProvider"],[5511,43,4709,19],[5511,45,4709,19,"arguments"],[5511,54,4709,19],[5512,4,4709,19],[5513,4,4709,19,"_inherits"],[5513,13,4709,19],[5513,14,4709,19,"OAuthProvider"],[5513,27,4709,19],[5513,29,4709,19,"_BaseOAuthProvider"],[5513,47,4709,19],[5514,4,4709,19],[5514,11,4709,19,"_createClass"],[5514,23,4709,19],[5514,24,4709,19,"OAuthProvider"],[5514,37,4709,19],[5515,6,4709,19,"key"],[5515,9,4709,19],[5516,6,4709,19,"value"],[5516,11,4709,19],[5517,6,4719,4],[5518,0,4720,0],[5519,0,4721,0],[5520,0,4722,0],[5521,0,4723,0],[5522,0,4724,0],[5523,0,4725,0],[5524,0,4726,0],[5525,0,4727,0],[5526,0,4728,0],[5527,0,4729,0],[5528,0,4730,0],[5529,0,4731,0],[5530,0,4732,0],[5531,0,4733,0],[5532,0,4734,0],[5533,0,4735,0],[5534,0,4736,0],[5535,0,4737,0],[5536,0,4738,0],[5537,0,4739,0],[5538,6,4740,4],[5538,15,4740,4,"credential"],[5538,25,4740,14,"credential"],[5538,26,4740,15,"params"],[5538,32,4740,21],[5538,34,4740,23],[5539,8,4741,8],[5539,15,4741,15],[5539,19,4741,19],[5539,20,4741,20,"_credential"],[5539,31,4741,31],[5539,32,4741,32],[5540,10,4741,34],[5540,13,4741,37,"params"],[5540,19,4741,43],[5541,10,4741,45,"nonce"],[5541,15,4741,50],[5541,17,4741,52,"params"],[5541,23,4741,58],[5541,24,4741,59,"rawNonce"],[5542,8,4741,68],[5542,9,4741,69],[5542,10,4741,70],[5543,6,4742,4],[5544,6,4743,4],[5545,4,4743,4],[5546,6,4743,4,"key"],[5546,9,4743,4],[5547,6,4743,4,"value"],[5547,11,4743,4],[5547,13,4744,4],[5547,22,4744,4,"_credential"],[5547,33,4744,15,"_credential"],[5547,34,4744,16,"params"],[5547,40,4744,22],[5547,42,4744,24],[5548,8,4745,8,"_assert"],[5548,15,4745,15],[5548,16,4745,16,"params"],[5548,22,4745,22],[5548,23,4745,23,"idToken"],[5548,30,4745,30],[5548,34,4745,34,"params"],[5548,40,4745,40],[5548,41,4745,41,"accessToken"],[5548,52,4745,52],[5548,54,4745,54],[5548,70,4745,70],[5548,71,4745,71],[5548,105,4745,105],[5548,106,4745,106],[5549,8,4746,8],[5550,8,4747,8],[5550,15,4747,15,"OAuthCredential"],[5550,30,4747,30],[5550,31,4747,31,"_fromParams"],[5550,42,4747,42],[5550,43,4747,43],[5551,10,4748,12],[5551,13,4748,15,"params"],[5551,19,4748,21],[5552,10,4749,12,"providerId"],[5552,20,4749,22],[5552,22,4749,24],[5552,26,4749,28],[5552,27,4749,29,"providerId"],[5552,37,4749,39],[5553,10,4750,12,"signInMethod"],[5553,22,4750,24],[5553,24,4750,26],[5553,28,4750,30],[5553,29,4750,31,"providerId"],[5554,8,4751,8],[5554,9,4751,9],[5554,10,4751,10],[5555,6,4752,4],[5556,6,4753,4],[5557,0,4754,0],[5558,0,4755,0],[5559,0,4756,0],[5560,0,4757,0],[5561,4,4753,4],[5562,6,4753,4,"key"],[5562,9,4753,4],[5563,6,4753,4,"value"],[5563,11,4753,4],[5564,6,4710,4],[5565,0,4711,0],[5566,0,4712,0],[5567,0,4713,0],[5568,6,4714,4],[5568,15,4714,11,"credentialFromJSON"],[5568,33,4714,29,"credentialFromJSON"],[5568,34,4714,30,"json"],[5568,38,4714,34],[5568,40,4714,36],[5569,8,4715,8],[5569,12,4715,14,"obj"],[5569,15,4715,17],[5569,18,4715,20],[5569,25,4715,27,"json"],[5569,29,4715,31],[5569,34,4715,36],[5569,42,4715,44],[5569,45,4715,47,"JSON"],[5569,49,4715,51],[5569,50,4715,52,"parse"],[5569,55,4715,57],[5569,56,4715,58,"json"],[5569,60,4715,62],[5569,61,4715,63],[5569,64,4715,66,"json"],[5569,68,4715,70],[5570,8,4716,8,"_assert"],[5570,15,4716,15],[5570,16,4716,16],[5570,28,4716,28],[5570,32,4716,32,"obj"],[5570,35,4716,35],[5570,39,4716,39],[5570,53,4716,53],[5570,57,4716,57,"obj"],[5570,60,4716,60],[5570,62,4716,62],[5570,78,4716,78],[5570,79,4716,79],[5570,113,4716,113],[5570,114,4716,114],[5571,8,4717,8],[5571,15,4717,15,"OAuthCredential"],[5571,30,4717,30],[5571,31,4717,31,"_fromParams"],[5571,42,4717,42],[5571,43,4717,43,"obj"],[5571,46,4717,46],[5571,47,4717,47],[5572,6,4718,4],[5573,4,4718,5],[5574,6,4718,5,"key"],[5574,9,4718,5],[5575,6,4718,5,"value"],[5575,11,4718,5],[5575,13,4758,4],[5575,22,4758,11,"credentialFromResult"],[5575,42,4758,31,"credentialFromResult"],[5575,43,4758,32,"userCredential"],[5575,57,4758,46],[5575,59,4758,48],[5576,8,4759,8],[5576,15,4759,15,"OAuthProvider"],[5576,28,4759,28],[5576,29,4759,29,"oauthCredentialFromTaggedObject"],[5576,60,4759,60],[5576,61,4759,61,"userCredential"],[5576,75,4759,75],[5576,76,4759,76],[5577,6,4760,4],[5578,6,4761,4],[5579,0,4762,0],[5580,0,4763,0],[5581,0,4764,0],[5582,0,4765,0],[5583,0,4766,0],[5584,4,4761,4],[5585,6,4761,4,"key"],[5585,9,4761,4],[5586,6,4761,4,"value"],[5586,11,4761,4],[5586,13,4767,4],[5586,22,4767,11,"credentialFromError"],[5586,41,4767,30,"credentialFromError"],[5586,42,4767,31,"error"],[5586,47,4767,36],[5586,49,4767,38],[5587,8,4768,8],[5587,15,4768,15,"OAuthProvider"],[5587,28,4768,28],[5587,29,4768,29,"oauthCredentialFromTaggedObject"],[5587,60,4768,60],[5587,61,4768,62,"error"],[5587,66,4768,67],[5587,67,4768,68,"customData"],[5587,77,4768,78],[5587,81,4768,82],[5587,82,4768,83],[5587,83,4768,85],[5587,84,4768,86],[5588,6,4769,4],[5589,4,4769,5],[5590,6,4769,5,"key"],[5590,9,4769,5],[5591,6,4769,5,"value"],[5591,11,4769,5],[5591,13,4770,4],[5591,22,4770,11,"oauthCredentialFromTaggedObject"],[5591,53,4770,42,"oauthCredentialFromTaggedObject"],[5591,54,4770,42,"_ref11"],[5591,60,4770,42],[5591,62,4770,78],[5592,8,4770,78],[5592,12,4770,61,"tokenResponse"],[5592,25,4770,74],[5592,28,4770,74,"_ref11"],[5592,34,4770,74],[5592,35,4770,45,"_tokenResponse"],[5592,49,4770,59],[5593,8,4771,8],[5593,12,4771,12],[5593,13,4771,13,"tokenResponse"],[5593,26,4771,26],[5593,28,4771,28],[5594,10,4772,12],[5594,17,4772,19],[5594,21,4772,23],[5595,8,4773,8],[5596,8,4774,8],[5596,12,4774,16,"oauthIdToken"],[5596,24,4774,28],[5596,27,4774,102,"tokenResponse"],[5596,40,4774,115],[5596,41,4774,16,"oauthIdToken"],[5596,53,4774,28],[5597,10,4774,30,"oauthAccessToken"],[5597,26,4774,46],[5597,29,4774,102,"tokenResponse"],[5597,42,4774,115],[5597,43,4774,30,"oauthAccessToken"],[5597,59,4774,46],[5598,10,4774,48,"oauthTokenSecret"],[5598,26,4774,64],[5598,29,4774,102,"tokenResponse"],[5598,42,4774,115],[5598,43,4774,48,"oauthTokenSecret"],[5598,59,4774,64],[5599,10,4774,66,"pendingToken"],[5599,22,4774,78],[5599,25,4774,102,"tokenResponse"],[5599,38,4774,115],[5599,39,4774,66,"pendingToken"],[5599,51,4774,78],[5600,10,4774,80,"nonce"],[5600,15,4774,85],[5600,18,4774,102,"tokenResponse"],[5600,31,4774,115],[5600,32,4774,80,"nonce"],[5600,37,4774,85],[5601,10,4774,87,"providerId"],[5601,20,4774,97],[5601,23,4774,102,"tokenResponse"],[5601,36,4774,115],[5601,37,4774,87,"providerId"],[5601,47,4774,97],[5602,8,4775,8],[5602,12,4775,12],[5602,13,4775,13,"oauthAccessToken"],[5602,29,4775,29],[5602,33,4776,12],[5602,34,4776,13,"oauthTokenSecret"],[5602,50,4776,29],[5602,54,4777,12],[5602,55,4777,13,"oauthIdToken"],[5602,67,4777,25],[5602,71,4778,12],[5602,72,4778,13,"pendingToken"],[5602,84,4778,25],[5602,86,4778,27],[5603,10,4779,12],[5603,17,4779,19],[5603,21,4779,23],[5604,8,4780,8],[5605,8,4781,8],[5605,12,4781,12],[5605,13,4781,13,"providerId"],[5605,23,4781,23],[5605,25,4781,25],[5606,10,4782,12],[5606,17,4782,19],[5606,21,4782,23],[5607,8,4783,8],[5608,8,4784,8],[5608,12,4784,12],[5609,10,4785,12],[5609,17,4785,19],[5609,21,4785,23,"OAuthProvider"],[5609,34,4785,36],[5609,35,4785,37,"providerId"],[5609,45,4785,47],[5609,46,4785,48],[5609,47,4785,49,"_credential"],[5609,58,4785,60],[5609,59,4785,61],[5610,12,4786,16,"idToken"],[5610,19,4786,23],[5610,21,4786,25,"oauthIdToken"],[5610,33,4786,37],[5611,12,4787,16,"accessToken"],[5611,23,4787,27],[5611,25,4787,29,"oauthAccessToken"],[5611,41,4787,45],[5612,12,4788,16,"nonce"],[5612,17,4788,21],[5613,12,4789,16,"pendingToken"],[5614,10,4790,12],[5614,11,4790,13],[5614,12,4790,14],[5615,8,4791,8],[5615,9,4791,9],[5615,10,4792,8],[5615,17,4792,15,"e"],[5615,18,4792,16],[5615,20,4792,18],[5616,10,4793,12],[5616,17,4793,19],[5616,21,4793,23],[5617,8,4794,8],[5618,6,4795,4],[5619,4,4795,5],[5620,2,4795,5],[5620,4,4709,28,"BaseOAuthProvider"],[5620,21,4709,45],[5621,2,4798,0],[5622,0,4799,0],[5623,0,4800,0],[5624,0,4801,0],[5625,0,4802,0],[5626,0,4803,0],[5627,0,4804,0],[5628,0,4805,0],[5629,0,4806,0],[5630,0,4807,0],[5631,0,4808,0],[5632,0,4809,0],[5633,0,4810,0],[5634,0,4811,0],[5635,0,4812,0],[5636,0,4813,0],[5637,2,4814,0],[5638,0,4815,0],[5639,0,4816,0],[5640,0,4817,0],[5641,0,4818,0],[5642,0,4819,0],[5643,0,4820,0],[5644,0,4821,0],[5645,0,4822,0],[5646,0,4823,0],[5647,0,4824,0],[5648,0,4825,0],[5649,0,4826,0],[5650,0,4827,0],[5651,0,4828,0],[5652,0,4829,0],[5653,0,4830,0],[5654,0,4831,0],[5655,0,4832,0],[5656,0,4833,0],[5657,0,4834,0],[5658,0,4835,0],[5659,0,4836,0],[5660,0,4837,0],[5661,0,4838,0],[5662,0,4839,0],[5663,0,4840,0],[5664,0,4841,0],[5665,0,4842,0],[5666,0,4843,0],[5667,0,4844,0],[5668,0,4845,0],[5669,0,4846,0],[5670,0,4847,0],[5671,0,4848,0],[5672,0,4849,0],[5673,0,4850,0],[5674,0,4851,0],[5675,0,4852,0],[5676,2,4814,0],[5676,6,4853,6,"FacebookAuthProvider"],[5676,26,4853,26],[5676,52,4853,26,"_BaseOAuthProvider2"],[5676,71,4853,26],[5677,4,4854,4],[5677,13,4854,4,"FacebookAuthProvider"],[5677,34,4854,4],[5677,36,4854,18],[5678,6,4854,18,"_classCallCheck"],[5678,21,4854,18],[5678,28,4854,18,"FacebookAuthProvider"],[5678,48,4854,18],[5679,6,4854,18],[5679,13,4854,18,"_callSuper"],[5679,23,4854,18],[5679,30,4854,18,"FacebookAuthProvider"],[5679,50,4854,18],[5679,53,4855,14],[5679,67,4855,28],[5679,68,4855,29],[5680,4,4856,4],[5681,4,4857,4],[5682,0,4858,0],[5683,0,4859,0],[5684,0,4860,0],[5685,0,4861,0],[5686,0,4862,0],[5687,0,4863,0],[5688,0,4864,0],[5689,0,4865,0],[5690,0,4866,0],[5691,0,4867,0],[5692,0,4868,0],[5693,4,4857,4,"_inherits"],[5693,13,4857,4],[5693,14,4857,4,"FacebookAuthProvider"],[5693,34,4857,4],[5693,36,4857,4,"_BaseOAuthProvider2"],[5693,55,4857,4],[5694,4,4857,4],[5694,11,4857,4,"_createClass"],[5694,23,4857,4],[5694,24,4857,4,"FacebookAuthProvider"],[5694,44,4857,4],[5695,6,4857,4,"key"],[5695,9,4857,4],[5696,6,4857,4,"value"],[5696,11,4857,4],[5696,13,4869,4],[5696,22,4869,11,"credential"],[5696,32,4869,21,"credential"],[5696,33,4869,22,"accessToken"],[5696,44,4869,33],[5696,46,4869,35],[5697,8,4870,8],[5697,15,4870,15,"OAuthCredential"],[5697,30,4870,30],[5697,31,4870,31,"_fromParams"],[5697,42,4870,42],[5697,43,4870,43],[5698,10,4871,12,"providerId"],[5698,20,4871,22],[5698,22,4871,24,"FacebookAuthProvider"],[5698,42,4871,44],[5698,43,4871,45,"PROVIDER_ID"],[5698,54,4871,56],[5699,10,4872,12,"signInMethod"],[5699,22,4872,24],[5699,24,4872,26,"FacebookAuthProvider"],[5699,44,4872,46],[5699,45,4872,47,"FACEBOOK_SIGN_IN_METHOD"],[5699,68,4872,70],[5700,10,4873,12,"accessToken"],[5701,8,4874,8],[5701,9,4874,9],[5701,10,4874,10],[5702,6,4875,4],[5703,6,4876,4],[5704,0,4877,0],[5705,0,4878,0],[5706,0,4879,0],[5707,0,4880,0],[5708,4,4876,4],[5709,6,4876,4,"key"],[5709,9,4876,4],[5710,6,4876,4,"value"],[5710,11,4876,4],[5710,13,4881,4],[5710,22,4881,11,"credentialFromResult"],[5710,42,4881,31,"credentialFromResult"],[5710,43,4881,32,"userCredential"],[5710,57,4881,46],[5710,59,4881,48],[5711,8,4882,8],[5711,15,4882,15,"FacebookAuthProvider"],[5711,35,4882,35],[5711,36,4882,36,"credentialFromTaggedObject"],[5711,62,4882,62],[5711,63,4882,63,"userCredential"],[5711,77,4882,77],[5711,78,4882,78],[5712,6,4883,4],[5713,6,4884,4],[5714,0,4885,0],[5715,0,4886,0],[5716,0,4887,0],[5717,0,4888,0],[5718,0,4889,0],[5719,4,4884,4],[5720,6,4884,4,"key"],[5720,9,4884,4],[5721,6,4884,4,"value"],[5721,11,4884,4],[5721,13,4890,4],[5721,22,4890,11,"credentialFromError"],[5721,41,4890,30,"credentialFromError"],[5721,42,4890,31,"error"],[5721,47,4890,36],[5721,49,4890,38],[5722,8,4891,8],[5722,15,4891,15,"FacebookAuthProvider"],[5722,35,4891,35],[5722,36,4891,36,"credentialFromTaggedObject"],[5722,62,4891,62],[5722,63,4891,64,"error"],[5722,68,4891,69],[5722,69,4891,70,"customData"],[5722,79,4891,80],[5722,83,4891,84],[5722,84,4891,85],[5722,85,4891,87],[5722,86,4891,88],[5723,6,4892,4],[5724,4,4892,5],[5725,6,4892,5,"key"],[5725,9,4892,5],[5726,6,4892,5,"value"],[5726,11,4892,5],[5726,13,4893,4],[5726,22,4893,11,"credentialFromTaggedObject"],[5726,48,4893,37,"credentialFromTaggedObject"],[5726,49,4893,37,"_ref12"],[5726,55,4893,37],[5726,57,4893,73],[5727,8,4893,73],[5727,12,4893,56,"tokenResponse"],[5727,25,4893,69],[5727,28,4893,69,"_ref12"],[5727,34,4893,69],[5727,35,4893,40,"_tokenResponse"],[5727,49,4893,54],[5728,8,4894,8],[5728,12,4894,12],[5728,13,4894,13,"tokenResponse"],[5728,26,4894,26],[5728,30,4894,30],[5728,32,4894,32],[5728,50,4894,50],[5728,54,4894,54,"tokenResponse"],[5728,67,4894,67],[5728,68,4894,68],[5728,70,4894,70],[5729,10,4895,12],[5729,17,4895,19],[5729,21,4895,23],[5730,8,4896,8],[5731,8,4897,8],[5731,12,4897,12],[5731,13,4897,13,"tokenResponse"],[5731,26,4897,26],[5731,27,4897,27,"oauthAccessToken"],[5731,43,4897,43],[5731,45,4897,45],[5732,10,4898,12],[5732,17,4898,19],[5732,21,4898,23],[5733,8,4899,8],[5734,8,4900,8],[5734,12,4900,12],[5735,10,4901,12],[5735,17,4901,19,"FacebookAuthProvider"],[5735,37,4901,39],[5735,38,4901,40,"credential"],[5735,48,4901,50],[5735,49,4901,51,"tokenResponse"],[5735,62,4901,64],[5735,63,4901,65,"oauthAccessToken"],[5735,79,4901,81],[5735,80,4901,82],[5736,8,4902,8],[5736,9,4902,9],[5736,10,4903,8],[5736,16,4903,14],[5737,10,4904,12],[5737,17,4904,19],[5737,21,4904,23],[5738,8,4905,8],[5739,6,4906,4],[5740,4,4906,5],[5741,2,4906,5],[5741,4,4853,35,"BaseOAuthProvider"],[5741,21,4853,52],[5742,2,4908,0],[5743,2,4909,0,"FacebookAuthProvider"],[5743,22,4909,20],[5743,23,4909,21,"FACEBOOK_SIGN_IN_METHOD"],[5743,46,4909,44],[5743,49,4909,47],[5743,63,4909,61],[5743,64,4909,62],[5744,2,4910,0],[5745,2,4911,0,"FacebookAuthProvider"],[5745,22,4911,20],[5745,23,4911,21,"PROVIDER_ID"],[5745,34,4911,32],[5745,37,4911,35],[5745,51,4911,49],[5745,52,4911,50],[5747,2,4913,0],[5748,0,4914,0],[5749,0,4915,0],[5750,0,4916,0],[5751,0,4917,0],[5752,0,4918,0],[5753,0,4919,0],[5754,0,4920,0],[5755,0,4921,0],[5756,0,4922,0],[5757,0,4923,0],[5758,0,4924,0],[5759,0,4925,0],[5760,0,4926,0],[5761,0,4927,0],[5762,0,4928,0],[5763,2,4929,0],[5764,0,4930,0],[5765,0,4931,0],[5766,0,4932,0],[5767,0,4933,0],[5768,0,4934,0],[5769,0,4935,0],[5770,0,4936,0],[5771,0,4937,0],[5772,0,4938,0],[5773,0,4939,0],[5774,0,4940,0],[5775,0,4941,0],[5776,0,4942,0],[5777,0,4943,0],[5778,0,4944,0],[5779,0,4945,0],[5780,0,4946,0],[5781,0,4947,0],[5782,0,4948,0],[5783,0,4949,0],[5784,0,4950,0],[5785,0,4951,0],[5786,0,4952,0],[5787,0,4953,0],[5788,0,4954,0],[5789,0,4955,0],[5790,0,4956,0],[5791,0,4957,0],[5792,0,4958,0],[5793,0,4959,0],[5794,0,4960,0],[5795,0,4961,0],[5796,0,4962,0],[5797,0,4963,0],[5798,0,4964,0],[5799,0,4965,0],[5800,0,4966,0],[5801,0,4967,0],[5802,0,4968,0],[5803,0,4969,0],[5804,2,4929,0],[5804,6,4970,6,"GoogleAuthProvider"],[5804,24,4970,24],[5804,50,4970,24,"_BaseOAuthProvider3"],[5804,69,4970,24],[5805,4,4971,4],[5805,13,4971,4,"GoogleAuthProvider"],[5805,32,4971,4],[5805,34,4971,18],[5806,6,4971,18],[5806,10,4971,18,"_this0"],[5806,16,4971,18],[5807,6,4971,18,"_classCallCheck"],[5807,21,4971,18],[5807,28,4971,18,"GoogleAuthProvider"],[5807,46,4971,18],[5808,6,4972,8,"_this0"],[5808,12,4972,8],[5808,15,4972,8,"_callSuper"],[5808,25,4972,8],[5808,32,4972,8,"GoogleAuthProvider"],[5808,50,4972,8],[5808,53,4972,14],[5808,65,4972,26],[5808,66,4972,27],[5809,6,4973,8,"_this0"],[5809,12,4973,8],[5809,13,4973,13,"addScope"],[5809,21,4973,21],[5809,22,4973,22],[5809,31,4973,31],[5809,32,4973,32],[5810,6,4973,33],[5810,13,4973,33,"_this0"],[5810,19,4973,33],[5811,4,4974,4],[5812,4,4975,4],[5813,0,4976,0],[5814,0,4977,0],[5815,0,4978,0],[5816,0,4979,0],[5817,0,4980,0],[5818,0,4981,0],[5819,0,4982,0],[5820,0,4983,0],[5821,0,4984,0],[5822,0,4985,0],[5823,0,4986,0],[5824,0,4987,0],[5825,4,4975,4,"_inherits"],[5825,13,4975,4],[5825,14,4975,4,"GoogleAuthProvider"],[5825,32,4975,4],[5825,34,4975,4,"_BaseOAuthProvider3"],[5825,53,4975,4],[5826,4,4975,4],[5826,11,4975,4,"_createClass"],[5826,23,4975,4],[5826,24,4975,4,"GoogleAuthProvider"],[5826,42,4975,4],[5827,6,4975,4,"key"],[5827,9,4975,4],[5828,6,4975,4,"value"],[5828,11,4975,4],[5828,13,4988,4],[5828,22,4988,11,"credential"],[5828,32,4988,21,"credential"],[5828,33,4988,22,"idToken"],[5828,40,4988,29],[5828,42,4988,31,"accessToken"],[5828,53,4988,42],[5828,55,4988,44],[5829,8,4989,8],[5829,15,4989,15,"OAuthCredential"],[5829,30,4989,30],[5829,31,4989,31,"_fromParams"],[5829,42,4989,42],[5829,43,4989,43],[5830,10,4990,12,"providerId"],[5830,20,4990,22],[5830,22,4990,24,"GoogleAuthProvider"],[5830,40,4990,42],[5830,41,4990,43,"PROVIDER_ID"],[5830,52,4990,54],[5831,10,4991,12,"signInMethod"],[5831,22,4991,24],[5831,24,4991,26,"GoogleAuthProvider"],[5831,42,4991,44],[5831,43,4991,45,"GOOGLE_SIGN_IN_METHOD"],[5831,64,4991,66],[5832,10,4992,12,"idToken"],[5832,17,4992,19],[5833,10,4993,12,"accessToken"],[5834,8,4994,8],[5834,9,4994,9],[5834,10,4994,10],[5835,6,4995,4],[5836,6,4996,4],[5837,0,4997,0],[5838,0,4998,0],[5839,0,4999,0],[5840,0,5000,0],[5841,4,4996,4],[5842,6,4996,4,"key"],[5842,9,4996,4],[5843,6,4996,4,"value"],[5843,11,4996,4],[5843,13,5001,4],[5843,22,5001,11,"credentialFromResult"],[5843,42,5001,31,"credentialFromResult"],[5843,43,5001,32,"userCredential"],[5843,57,5001,46],[5843,59,5001,48],[5844,8,5002,8],[5844,15,5002,15,"GoogleAuthProvider"],[5844,33,5002,33],[5844,34,5002,34,"credentialFromTaggedObject"],[5844,60,5002,60],[5844,61,5002,61,"userCredential"],[5844,75,5002,75],[5844,76,5002,76],[5845,6,5003,4],[5846,6,5004,4],[5847,0,5005,0],[5848,0,5006,0],[5849,0,5007,0],[5850,0,5008,0],[5851,0,5009,0],[5852,4,5004,4],[5853,6,5004,4,"key"],[5853,9,5004,4],[5854,6,5004,4,"value"],[5854,11,5004,4],[5854,13,5010,4],[5854,22,5010,11,"credentialFromError"],[5854,41,5010,30,"credentialFromError"],[5854,42,5010,31,"error"],[5854,47,5010,36],[5854,49,5010,38],[5855,8,5011,8],[5855,15,5011,15,"GoogleAuthProvider"],[5855,33,5011,33],[5855,34,5011,34,"credentialFromTaggedObject"],[5855,60,5011,60],[5855,61,5011,62,"error"],[5855,66,5011,67],[5855,67,5011,68,"customData"],[5855,77,5011,78],[5855,81,5011,82],[5855,82,5011,83],[5855,83,5011,85],[5855,84,5011,86],[5856,6,5012,4],[5857,4,5012,5],[5858,6,5012,5,"key"],[5858,9,5012,5],[5859,6,5012,5,"value"],[5859,11,5012,5],[5859,13,5013,4],[5859,22,5013,11,"credentialFromTaggedObject"],[5859,48,5013,37,"credentialFromTaggedObject"],[5859,49,5013,37,"_ref13"],[5859,55,5013,37],[5859,57,5013,73],[5860,8,5013,73],[5860,12,5013,56,"tokenResponse"],[5860,25,5013,69],[5860,28,5013,69,"_ref13"],[5860,34,5013,69],[5860,35,5013,40,"_tokenResponse"],[5860,49,5013,54],[5861,8,5014,8],[5861,12,5014,12],[5861,13,5014,13,"tokenResponse"],[5861,26,5014,26],[5861,28,5014,28],[5862,10,5015,12],[5862,17,5015,19],[5862,21,5015,23],[5863,8,5016,8],[5864,8,5017,8],[5864,12,5017,16,"oauthIdToken"],[5864,24,5017,28],[5864,27,5017,51,"tokenResponse"],[5864,40,5017,64],[5864,41,5017,16,"oauthIdToken"],[5864,53,5017,28],[5865,10,5017,30,"oauthAccessToken"],[5865,26,5017,46],[5865,29,5017,51,"tokenResponse"],[5865,42,5017,64],[5865,43,5017,30,"oauthAccessToken"],[5865,59,5017,46],[5866,8,5018,8],[5866,12,5018,12],[5866,13,5018,13,"oauthIdToken"],[5866,25,5018,25],[5866,29,5018,29],[5866,30,5018,30,"oauthAccessToken"],[5866,46,5018,46],[5866,48,5018,48],[5867,10,5019,12],[5868,10,5020,12],[5868,17,5020,19],[5868,21,5020,23],[5869,8,5021,8],[5870,8,5022,8],[5870,12,5022,12],[5871,10,5023,12],[5871,17,5023,19,"GoogleAuthProvider"],[5871,35,5023,37],[5871,36,5023,38,"credential"],[5871,46,5023,48],[5871,47,5023,49,"oauthIdToken"],[5871,59,5023,61],[5871,61,5023,63,"oauthAccessToken"],[5871,77,5023,79],[5871,78,5023,80],[5872,8,5024,8],[5872,9,5024,9],[5872,10,5025,8],[5872,16,5025,14],[5873,10,5026,12],[5873,17,5026,19],[5873,21,5026,23],[5874,8,5027,8],[5875,6,5028,4],[5876,4,5028,5],[5877,2,5028,5],[5877,4,4970,33,"BaseOAuthProvider"],[5877,21,4970,50],[5878,2,5030,0],[5879,2,5031,0,"GoogleAuthProvider"],[5879,20,5031,18],[5879,21,5031,19,"GOOGLE_SIGN_IN_METHOD"],[5879,42,5031,40],[5879,45,5031,43],[5879,57,5031,55],[5879,58,5031,56],[5880,2,5032,0],[5881,2,5033,0,"GoogleAuthProvider"],[5881,20,5033,18],[5881,21,5033,19,"PROVIDER_ID"],[5881,32,5033,30],[5881,35,5033,33],[5881,47,5033,45],[5881,48,5033,46],[5883,2,5035,0],[5884,0,5036,0],[5885,0,5037,0],[5886,0,5038,0],[5887,0,5039,0],[5888,0,5040,0],[5889,0,5041,0],[5890,0,5042,0],[5891,0,5043,0],[5892,0,5044,0],[5893,0,5045,0],[5894,0,5046,0],[5895,0,5047,0],[5896,0,5048,0],[5897,0,5049,0],[5898,0,5050,0],[5899,2,5051,0],[5900,0,5052,0],[5901,0,5053,0],[5902,0,5054,0],[5903,0,5055,0],[5904,0,5056,0],[5905,0,5057,0],[5906,0,5058,0],[5907,0,5059,0],[5908,0,5060,0],[5909,0,5061,0],[5910,0,5062,0],[5911,0,5063,0],[5912,0,5064,0],[5913,0,5065,0],[5914,0,5066,0],[5915,0,5067,0],[5916,0,5068,0],[5917,0,5069,0],[5918,0,5070,0],[5919,0,5071,0],[5920,0,5072,0],[5921,0,5073,0],[5922,0,5074,0],[5923,0,5075,0],[5924,0,5076,0],[5925,0,5077,0],[5926,0,5078,0],[5927,0,5079,0],[5928,0,5080,0],[5929,0,5081,0],[5930,0,5082,0],[5931,0,5083,0],[5932,0,5084,0],[5933,0,5085,0],[5934,0,5086,0],[5935,0,5087,0],[5936,0,5088,0],[5937,0,5089,0],[5938,0,5090,0],[5939,0,5091,0],[5940,0,5092,0],[5941,2,5051,0],[5941,6,5093,6,"GithubAuthProvider"],[5941,24,5093,24],[5941,50,5093,24,"_BaseOAuthProvider4"],[5941,69,5093,24],[5942,4,5094,4],[5942,13,5094,4,"GithubAuthProvider"],[5942,32,5094,4],[5942,34,5094,18],[5943,6,5094,18,"_classCallCheck"],[5943,21,5094,18],[5943,28,5094,18,"GithubAuthProvider"],[5943,46,5094,18],[5944,6,5094,18],[5944,13,5094,18,"_callSuper"],[5944,23,5094,18],[5944,30,5094,18,"GithubAuthProvider"],[5944,48,5094,18],[5944,51,5095,14],[5944,63,5095,26],[5944,64,5095,27],[5945,4,5096,4],[5946,4,5097,4],[5947,0,5098,0],[5948,0,5099,0],[5949,0,5100,0],[5950,0,5101,0],[5951,4,5097,4,"_inherits"],[5951,13,5097,4],[5951,14,5097,4,"GithubAuthProvider"],[5951,32,5097,4],[5951,34,5097,4,"_BaseOAuthProvider4"],[5951,53,5097,4],[5952,4,5097,4],[5952,11,5097,4,"_createClass"],[5952,23,5097,4],[5952,24,5097,4,"GithubAuthProvider"],[5952,42,5097,4],[5953,6,5097,4,"key"],[5953,9,5097,4],[5954,6,5097,4,"value"],[5954,11,5097,4],[5954,13,5102,4],[5954,22,5102,11,"credential"],[5954,32,5102,21,"credential"],[5954,33,5102,22,"accessToken"],[5954,44,5102,33],[5954,46,5102,35],[5955,8,5103,8],[5955,15,5103,15,"OAuthCredential"],[5955,30,5103,30],[5955,31,5103,31,"_fromParams"],[5955,42,5103,42],[5955,43,5103,43],[5956,10,5104,12,"providerId"],[5956,20,5104,22],[5956,22,5104,24,"GithubAuthProvider"],[5956,40,5104,42],[5956,41,5104,43,"PROVIDER_ID"],[5956,52,5104,54],[5957,10,5105,12,"signInMethod"],[5957,22,5105,24],[5957,24,5105,26,"GithubAuthProvider"],[5957,42,5105,44],[5957,43,5105,45,"GITHUB_SIGN_IN_METHOD"],[5957,64,5105,66],[5958,10,5106,12,"accessToken"],[5959,8,5107,8],[5959,9,5107,9],[5959,10,5107,10],[5960,6,5108,4],[5961,6,5109,4],[5962,0,5110,0],[5963,0,5111,0],[5964,0,5112,0],[5965,0,5113,0],[5966,4,5109,4],[5967,6,5109,4,"key"],[5967,9,5109,4],[5968,6,5109,4,"value"],[5968,11,5109,4],[5968,13,5114,4],[5968,22,5114,11,"credentialFromResult"],[5968,42,5114,31,"credentialFromResult"],[5968,43,5114,32,"userCredential"],[5968,57,5114,46],[5968,59,5114,48],[5969,8,5115,8],[5969,15,5115,15,"GithubAuthProvider"],[5969,33,5115,33],[5969,34,5115,34,"credentialFromTaggedObject"],[5969,60,5115,60],[5969,61,5115,61,"userCredential"],[5969,75,5115,75],[5969,76,5115,76],[5970,6,5116,4],[5971,6,5117,4],[5972,0,5118,0],[5973,0,5119,0],[5974,0,5120,0],[5975,0,5121,0],[5976,0,5122,0],[5977,4,5117,4],[5978,6,5117,4,"key"],[5978,9,5117,4],[5979,6,5117,4,"value"],[5979,11,5117,4],[5979,13,5123,4],[5979,22,5123,11,"credentialFromError"],[5979,41,5123,30,"credentialFromError"],[5979,42,5123,31,"error"],[5979,47,5123,36],[5979,49,5123,38],[5980,8,5124,8],[5980,15,5124,15,"GithubAuthProvider"],[5980,33,5124,33],[5980,34,5124,34,"credentialFromTaggedObject"],[5980,60,5124,60],[5980,61,5124,62,"error"],[5980,66,5124,67],[5980,67,5124,68,"customData"],[5980,77,5124,78],[5980,81,5124,82],[5980,82,5124,83],[5980,83,5124,85],[5980,84,5124,86],[5981,6,5125,4],[5982,4,5125,5],[5983,6,5125,5,"key"],[5983,9,5125,5],[5984,6,5125,5,"value"],[5984,11,5125,5],[5984,13,5126,4],[5984,22,5126,11,"credentialFromTaggedObject"],[5984,48,5126,37,"credentialFromTaggedObject"],[5984,49,5126,37,"_ref14"],[5984,55,5126,37],[5984,57,5126,73],[5985,8,5126,73],[5985,12,5126,56,"tokenResponse"],[5985,25,5126,69],[5985,28,5126,69,"_ref14"],[5985,34,5126,69],[5985,35,5126,40,"_tokenResponse"],[5985,49,5126,54],[5986,8,5127,8],[5986,12,5127,12],[5986,13,5127,13,"tokenResponse"],[5986,26,5127,26],[5986,30,5127,30],[5986,32,5127,32],[5986,50,5127,50],[5986,54,5127,54,"tokenResponse"],[5986,67,5127,67],[5986,68,5127,68],[5986,70,5127,70],[5987,10,5128,12],[5987,17,5128,19],[5987,21,5128,23],[5988,8,5129,8],[5989,8,5130,8],[5989,12,5130,12],[5989,13,5130,13,"tokenResponse"],[5989,26,5130,26],[5989,27,5130,27,"oauthAccessToken"],[5989,43,5130,43],[5989,45,5130,45],[5990,10,5131,12],[5990,17,5131,19],[5990,21,5131,23],[5991,8,5132,8],[5992,8,5133,8],[5992,12,5133,12],[5993,10,5134,12],[5993,17,5134,19,"GithubAuthProvider"],[5993,35,5134,37],[5993,36,5134,38,"credential"],[5993,46,5134,48],[5993,47,5134,49,"tokenResponse"],[5993,60,5134,62],[5993,61,5134,63,"oauthAccessToken"],[5993,77,5134,79],[5993,78,5134,80],[5994,8,5135,8],[5994,9,5135,9],[5994,10,5136,8],[5994,16,5136,14],[5995,10,5137,12],[5995,17,5137,19],[5995,21,5137,23],[5996,8,5138,8],[5997,6,5139,4],[5998,4,5139,5],[5999,2,5139,5],[5999,4,5093,33,"BaseOAuthProvider"],[5999,21,5093,50],[6000,2,5141,0],[6001,2,5142,0,"GithubAuthProvider"],[6001,20,5142,18],[6001,21,5142,19,"GITHUB_SIGN_IN_METHOD"],[6001,42,5142,40],[6001,45,5142,43],[6001,57,5142,55],[6001,58,5142,56],[6002,2,5143,0],[6003,2,5144,0,"GithubAuthProvider"],[6003,20,5144,18],[6003,21,5144,19,"PROVIDER_ID"],[6003,32,5144,30],[6003,35,5144,33],[6003,47,5144,45],[6003,48,5144,46],[6005,2,5146,0],[6006,0,5147,0],[6007,0,5148,0],[6008,0,5149,0],[6009,0,5150,0],[6010,0,5151,0],[6011,0,5152,0],[6012,0,5153,0],[6013,0,5154,0],[6014,0,5155,0],[6015,0,5156,0],[6016,0,5157,0],[6017,0,5158,0],[6018,0,5159,0],[6019,0,5160,0],[6020,0,5161,0],[6021,2,5162,0],[6021,6,5162,6,"IDP_REQUEST_URI"],[6021,21,5162,21],[6021,24,5162,24],[6021,42,5162,42],[6022,2,5163,0],[6023,0,5164,0],[6024,0,5165,0],[6025,2,5163,0],[6025,6,5166,6,"SAMLAuthCredential"],[6025,24,5166,24],[6025,50,5166,24,"_AuthCredential4"],[6025,66,5166,24],[6026,4,5167,4],[6027,4,5168,4],[6027,13,5168,4,"SAMLAuthCredential"],[6027,32,5168,16,"providerId"],[6027,42,5168,26],[6027,44,5168,28,"pendingToken"],[6027,56,5168,40],[6027,58,5168,42],[6028,6,5168,42],[6028,10,5168,42,"_this1"],[6028,16,5168,42],[6029,6,5168,42,"_classCallCheck"],[6029,21,5168,42],[6029,28,5168,42,"SAMLAuthCredential"],[6029,46,5168,42],[6030,6,5169,8,"_this1"],[6030,12,5169,8],[6030,15,5169,8,"_callSuper"],[6030,25,5169,8],[6030,32,5169,8,"SAMLAuthCredential"],[6030,50,5169,8],[6030,53,5169,14,"providerId"],[6030,63,5169,24],[6030,65,5169,26,"providerId"],[6030,75,5169,36],[6031,6,5170,8,"_this1"],[6031,12,5170,8],[6031,13,5170,13,"pendingToken"],[6031,25,5170,25],[6031,28,5170,28,"pendingToken"],[6031,40,5170,40],[6032,6,5170,41],[6032,13,5170,41,"_this1"],[6032,19,5170,41],[6033,4,5171,4],[6034,4,5172,4],[6035,4,5172,4,"_inherits"],[6035,13,5172,4],[6035,14,5172,4,"SAMLAuthCredential"],[6035,32,5172,4],[6035,34,5172,4,"_AuthCredential4"],[6035,50,5172,4],[6036,4,5172,4],[6036,11,5172,4,"_createClass"],[6036,23,5172,4],[6036,24,5172,4,"SAMLAuthCredential"],[6036,42,5172,4],[6037,6,5172,4,"key"],[6037,9,5172,4],[6038,6,5172,4,"value"],[6038,11,5172,4],[6038,13,5173,4],[6038,22,5173,4,"_getIdTokenResponse"],[6038,41,5173,23,"_getIdTokenResponse"],[6038,42,5173,24,"auth"],[6038,46,5173,28],[6038,48,5173,30],[6039,8,5174,8],[6039,12,5174,14,"request"],[6039,19,5174,21],[6039,22,5174,24],[6039,26,5174,28],[6039,27,5174,29,"buildRequest"],[6039,39,5174,41],[6039,40,5174,42],[6039,41,5174,43],[6040,8,5175,8],[6040,15,5175,15,"signInWithIdp"],[6040,28,5175,28],[6040,29,5175,29,"auth"],[6040,33,5175,33],[6040,35,5175,35,"request"],[6040,42,5175,42],[6040,43,5175,43],[6041,6,5176,4],[6042,6,5177,4],[6043,4,5177,4],[6044,6,5177,4,"key"],[6044,9,5177,4],[6045,6,5177,4,"value"],[6045,11,5177,4],[6045,13,5178,4],[6045,22,5178,4,"_linkToIdToken"],[6045,36,5178,18,"_linkToIdToken"],[6045,37,5178,19,"auth"],[6045,41,5178,23],[6045,43,5178,25,"idToken"],[6045,50,5178,32],[6045,52,5178,34],[6046,8,5179,8],[6046,12,5179,14,"request"],[6046,19,5179,21],[6046,22,5179,24],[6046,26,5179,28],[6046,27,5179,29,"buildRequest"],[6046,39,5179,41],[6046,40,5179,42],[6046,41,5179,43],[6047,8,5180,8,"request"],[6047,15,5180,15],[6047,16,5180,16,"idToken"],[6047,23,5180,23],[6047,26,5180,26,"idToken"],[6047,33,5180,33],[6048,8,5181,8],[6048,15,5181,15,"signInWithIdp"],[6048,28,5181,28],[6048,29,5181,29,"auth"],[6048,33,5181,33],[6048,35,5181,35,"request"],[6048,42,5181,42],[6048,43,5181,43],[6049,6,5182,4],[6050,6,5183,4],[6051,4,5183,4],[6052,6,5183,4,"key"],[6052,9,5183,4],[6053,6,5183,4,"value"],[6053,11,5183,4],[6053,13,5184,4],[6053,22,5184,4,"_getReauthenticationResolver"],[6053,50,5184,32,"_getReauthenticationResolver"],[6053,51,5184,33,"auth"],[6053,55,5184,37],[6053,57,5184,39],[6054,8,5185,8],[6054,12,5185,14,"request"],[6054,19,5185,21],[6054,22,5185,24],[6054,26,5185,28],[6054,27,5185,29,"buildRequest"],[6054,39,5185,41],[6054,40,5185,42],[6054,41,5185,43],[6055,8,5186,8,"request"],[6055,15,5186,15],[6055,16,5186,16,"autoCreate"],[6055,26,5186,26],[6055,29,5186,29],[6055,34,5186,34],[6056,8,5187,8],[6056,15,5187,15,"signInWithIdp"],[6056,28,5187,28],[6056,29,5187,29,"auth"],[6056,33,5187,33],[6056,35,5187,35,"request"],[6056,42,5187,42],[6056,43,5187,43],[6057,6,5188,4],[6058,6,5189,4],[6059,4,5189,4],[6060,6,5189,4,"key"],[6060,9,5189,4],[6061,6,5189,4,"value"],[6061,11,5189,4],[6061,13,5190,4],[6061,22,5190,4,"toJSON"],[6061,28,5190,10,"toJSON"],[6061,29,5190,10],[6061,31,5190,13],[6062,8,5191,8],[6062,15,5191,15],[6063,10,5192,12,"signInMethod"],[6063,22,5192,24],[6063,24,5192,26],[6063,28,5192,30],[6063,29,5192,31,"signInMethod"],[6063,41,5192,43],[6064,10,5193,12,"providerId"],[6064,20,5193,22],[6064,22,5193,24],[6064,26,5193,28],[6064,27,5193,29,"providerId"],[6064,37,5193,39],[6065,10,5194,12,"pendingToken"],[6065,22,5194,24],[6065,24,5194,26],[6065,28,5194,30],[6065,29,5194,31,"pendingToken"],[6066,8,5195,8],[6066,9,5195,9],[6067,6,5196,4],[6068,6,5197,4],[6069,0,5198,0],[6070,0,5199,0],[6071,0,5200,0],[6072,0,5201,0],[6073,0,5202,0],[6074,0,5203,0],[6075,0,5204,0],[6076,0,5205,0],[6077,4,5197,4],[6078,6,5197,4,"key"],[6078,9,5197,4],[6079,6,5197,4,"value"],[6079,11,5197,4],[6079,13,5225,4],[6079,22,5225,4,"buildRequest"],[6079,34,5225,16,"buildRequest"],[6079,35,5225,16],[6079,37,5225,19],[6080,8,5226,8],[6080,15,5226,15],[6081,10,5227,12,"requestUri"],[6081,20,5227,22],[6081,22,5227,24,"IDP_REQUEST_URI"],[6081,37,5227,39],[6082,10,5228,12,"returnSecureToken"],[6082,27,5228,29],[6082,29,5228,31],[6082,33,5228,35],[6083,10,5229,12,"pendingToken"],[6083,22,5229,24],[6083,24,5229,26],[6083,28,5229,30],[6083,29,5229,31,"pendingToken"],[6084,8,5230,8],[6084,9,5230,9],[6085,6,5231,4],[6086,4,5231,5],[6087,6,5231,5,"key"],[6087,9,5231,5],[6088,6,5231,5,"value"],[6088,11,5231,5],[6088,13,5206,4],[6088,22,5206,11,"fromJSON"],[6088,30,5206,19,"fromJSON"],[6088,31,5206,20,"json"],[6088,35,5206,24],[6088,37,5206,26],[6089,8,5207,8],[6089,12,5207,14,"obj"],[6089,15,5207,17],[6089,18,5207,20],[6089,25,5207,27,"json"],[6089,29,5207,31],[6089,34,5207,36],[6089,42,5207,44],[6089,45,5207,47,"JSON"],[6089,49,5207,51],[6089,50,5207,52,"parse"],[6089,55,5207,57],[6089,56,5207,58,"json"],[6089,60,5207,62],[6089,61,5207,63],[6089,64,5207,66,"json"],[6089,68,5207,70],[6090,8,5208,8],[6090,12,5208,16,"providerId"],[6090,22,5208,26],[6090,25,5208,59,"obj"],[6090,28,5208,62],[6090,29,5208,16,"providerId"],[6090,39,5208,26],[6091,10,5208,28,"signInMethod"],[6091,22,5208,40],[6091,25,5208,59,"obj"],[6091,28,5208,62],[6091,29,5208,28,"signInMethod"],[6091,41,5208,40],[6092,10,5208,42,"pendingToken"],[6092,22,5208,54],[6092,25,5208,59,"obj"],[6092,28,5208,62],[6092,29,5208,42,"pendingToken"],[6092,41,5208,54],[6093,8,5209,8],[6093,12,5209,12],[6093,13,5209,13,"providerId"],[6093,23,5209,23],[6093,27,5210,12],[6093,28,5210,13,"signInMethod"],[6093,40,5210,25],[6093,44,5211,12],[6093,45,5211,13,"pendingToken"],[6093,57,5211,25],[6093,61,5212,12,"providerId"],[6093,71,5212,22],[6093,76,5212,27,"signInMethod"],[6093,88,5212,39],[6093,90,5212,41],[6094,10,5213,12],[6094,17,5213,19],[6094,21,5213,23],[6095,8,5214,8],[6096,8,5215,8],[6096,15,5215,15],[6096,19,5215,19,"SAMLAuthCredential"],[6096,37,5215,37],[6096,38,5215,38,"providerId"],[6096,48,5215,48],[6096,50,5215,50,"pendingToken"],[6096,62,5215,62],[6096,63,5215,63],[6097,6,5216,4],[6098,6,5217,4],[6099,0,5218,0],[6100,0,5219,0],[6101,0,5220,0],[6102,0,5221,0],[6103,4,5217,4],[6104,6,5217,4,"key"],[6104,9,5217,4],[6105,6,5217,4,"value"],[6105,11,5217,4],[6105,13,5222,4],[6105,22,5222,11,"_create"],[6105,29,5222,18,"_create"],[6105,30,5222,19,"providerId"],[6105,40,5222,29],[6105,42,5222,31,"pendingToken"],[6105,54,5222,43],[6105,56,5222,45],[6106,8,5223,8],[6106,15,5223,15],[6106,19,5223,19,"SAMLAuthCredential"],[6106,37,5223,37],[6106,38,5223,38,"providerId"],[6106,48,5223,48],[6106,50,5223,50,"pendingToken"],[6106,62,5223,62],[6106,63,5223,63],[6107,6,5224,4],[6108,4,5224,5],[6109,2,5224,5],[6109,4,5166,33,"AuthCredential"],[6109,18,5166,47],[6110,2,5234,0],[6111,0,5235,0],[6112,0,5236,0],[6113,0,5237,0],[6114,0,5238,0],[6115,0,5239,0],[6116,0,5240,0],[6117,0,5241,0],[6118,0,5242,0],[6119,0,5243,0],[6120,0,5244,0],[6121,0,5245,0],[6122,0,5246,0],[6123,0,5247,0],[6124,0,5248,0],[6125,0,5249,0],[6126,2,5250,0],[6126,6,5250,6,"SAML_PROVIDER_PREFIX"],[6126,26,5250,26],[6126,29,5250,29],[6126,36,5250,36],[6127,2,5251,0],[6128,0,5252,0],[6129,0,5253,0],[6130,0,5254,0],[6131,0,5255,0],[6132,2,5251,0],[6132,6,5256,6,"SAMLAuthProvider"],[6132,22,5256,22],[6132,48,5256,22,"_FederatedAuthProvide2"],[6132,70,5256,22],[6133,4,5257,4],[6134,0,5258,0],[6135,0,5259,0],[6136,0,5260,0],[6137,4,5261,4],[6137,13,5261,4,"SAMLAuthProvider"],[6137,30,5261,16,"providerId"],[6137,40,5261,26],[6137,42,5261,28],[6138,6,5261,28,"_classCallCheck"],[6138,21,5261,28],[6138,28,5261,28,"SAMLAuthProvider"],[6138,44,5261,28],[6139,6,5262,8,"_assert"],[6139,13,5262,15],[6139,14,5262,16,"providerId"],[6139,24,5262,26],[6139,25,5262,27,"startsWith"],[6139,35,5262,37],[6139,36,5262,38,"SAML_PROVIDER_PREFIX"],[6139,56,5262,58],[6139,57,5262,59],[6139,59,5262,61],[6139,75,5262,77],[6139,76,5262,78],[6139,110,5262,112],[6139,111,5262,113],[6140,6,5262,114],[6140,13,5262,114,"_callSuper"],[6140,23,5262,114],[6140,30,5262,114,"SAMLAuthProvider"],[6140,46,5262,114],[6140,49,5263,14,"providerId"],[6140,59,5263,24],[6141,4,5264,4],[6142,4,5265,4],[6143,0,5266,0],[6144,0,5267,0],[6145,0,5268,0],[6146,0,5269,0],[6147,0,5270,0],[6148,0,5271,0],[6149,0,5272,0],[6150,0,5273,0],[6151,0,5274,0],[6152,0,5275,0],[6153,0,5276,0],[6154,0,5277,0],[6155,0,5278,0],[6156,0,5279,0],[6157,0,5280,0],[6158,4,5265,4,"_inherits"],[6158,13,5265,4],[6158,14,5265,4,"SAMLAuthProvider"],[6158,30,5265,4],[6158,32,5265,4,"_FederatedAuthProvide2"],[6158,54,5265,4],[6159,4,5265,4],[6159,11,5265,4,"_createClass"],[6159,23,5265,4],[6159,24,5265,4,"SAMLAuthProvider"],[6159,40,5265,4],[6160,6,5265,4,"key"],[6160,9,5265,4],[6161,6,5265,4,"value"],[6161,11,5265,4],[6161,13,5281,4],[6161,22,5281,11,"credentialFromResult"],[6161,42,5281,31,"credentialFromResult"],[6161,43,5281,32,"userCredential"],[6161,57,5281,46],[6161,59,5281,48],[6162,8,5282,8],[6162,15,5282,15,"SAMLAuthProvider"],[6162,31,5282,31],[6162,32,5282,32,"samlCredentialFromTaggedObject"],[6162,62,5282,62],[6162,63,5282,63,"userCredential"],[6162,77,5282,77],[6162,78,5282,78],[6163,6,5283,4],[6164,6,5284,4],[6165,0,5285,0],[6166,0,5286,0],[6167,0,5287,0],[6168,0,5288,0],[6169,0,5289,0],[6170,4,5284,4],[6171,6,5284,4,"key"],[6171,9,5284,4],[6172,6,5284,4,"value"],[6172,11,5284,4],[6172,13,5290,4],[6172,22,5290,11,"credentialFromError"],[6172,41,5290,30,"credentialFromError"],[6172,42,5290,31,"error"],[6172,47,5290,36],[6172,49,5290,38],[6173,8,5291,8],[6173,15,5291,15,"SAMLAuthProvider"],[6173,31,5291,31],[6173,32,5291,32,"samlCredentialFromTaggedObject"],[6173,62,5291,62],[6173,63,5291,64,"error"],[6173,68,5291,69],[6173,69,5291,70,"customData"],[6173,79,5291,80],[6173,83,5291,84],[6173,84,5291,85],[6173,85,5291,87],[6173,86,5291,88],[6174,6,5292,4],[6175,6,5293,4],[6176,0,5294,0],[6177,0,5295,0],[6178,0,5296,0],[6179,4,5293,4],[6180,6,5293,4,"key"],[6180,9,5293,4],[6181,6,5293,4,"value"],[6181,11,5293,4],[6181,13,5297,4],[6181,22,5297,11,"credentialFromJSON"],[6181,40,5297,29,"credentialFromJSON"],[6181,41,5297,30,"json"],[6181,45,5297,34],[6181,47,5297,36],[6182,8,5298,8],[6182,12,5298,14,"credential"],[6182,22,5298,24],[6182,25,5298,27,"SAMLAuthCredential"],[6182,43,5298,45],[6182,44,5298,46,"fromJSON"],[6182,52,5298,54],[6182,53,5298,55,"json"],[6182,57,5298,59],[6182,58,5298,60],[6183,8,5299,8,"_assert"],[6183,15,5299,15],[6183,16,5299,16,"credential"],[6183,26,5299,26],[6183,28,5299,28],[6183,44,5299,44],[6183,45,5299,45],[6183,79,5299,79],[6183,80,5299,80],[6184,8,5300,8],[6184,15,5300,15,"credential"],[6184,25,5300,25],[6185,6,5301,4],[6186,4,5301,5],[6187,6,5301,5,"key"],[6187,9,5301,5],[6188,6,5301,5,"value"],[6188,11,5301,5],[6188,13,5302,4],[6188,22,5302,11,"samlCredentialFromTaggedObject"],[6188,52,5302,41,"samlCredentialFromTaggedObject"],[6188,53,5302,41,"_ref15"],[6188,59,5302,41],[6188,61,5302,77],[6189,8,5302,77],[6189,12,5302,60,"tokenResponse"],[6189,25,5302,73],[6189,28,5302,73,"_ref15"],[6189,34,5302,73],[6189,35,5302,44,"_tokenResponse"],[6189,49,5302,58],[6190,8,5303,8],[6190,12,5303,12],[6190,13,5303,13,"tokenResponse"],[6190,26,5303,26],[6190,28,5303,28],[6191,10,5304,12],[6191,17,5304,19],[6191,21,5304,23],[6192,8,5305,8],[6193,8,5306,8],[6193,12,5306,16,"pendingToken"],[6193,24,5306,28],[6193,27,5306,45,"tokenResponse"],[6193,40,5306,58],[6193,41,5306,16,"pendingToken"],[6193,53,5306,28],[6194,10,5306,30,"providerId"],[6194,20,5306,40],[6194,23,5306,45,"tokenResponse"],[6194,36,5306,58],[6194,37,5306,30,"providerId"],[6194,47,5306,40],[6195,8,5307,8],[6195,12,5307,12],[6195,13,5307,13,"pendingToken"],[6195,25,5307,25],[6195,29,5307,29],[6195,30,5307,30,"providerId"],[6195,40,5307,40],[6195,42,5307,42],[6196,10,5308,12],[6196,17,5308,19],[6196,21,5308,23],[6197,8,5309,8],[6198,8,5310,8],[6198,12,5310,12],[6199,10,5311,12],[6199,17,5311,19,"SAMLAuthCredential"],[6199,35,5311,37],[6199,36,5311,38,"_create"],[6199,43,5311,45],[6199,44,5311,46,"providerId"],[6199,54,5311,56],[6199,56,5311,58,"pendingToken"],[6199,68,5311,70],[6199,69,5311,71],[6200,8,5312,8],[6200,9,5312,9],[6200,10,5313,8],[6200,17,5313,15,"e"],[6200,18,5313,16],[6200,20,5313,18],[6201,10,5314,12],[6201,17,5314,19],[6201,21,5314,23],[6202,8,5315,8],[6203,6,5316,4],[6204,4,5316,5],[6205,2,5316,5],[6205,4,5256,31,"FederatedAuthProvider"],[6205,25,5256,52],[6206,2,5319,0],[6207,0,5320,0],[6208,0,5321,0],[6209,0,5322,0],[6210,0,5323,0],[6211,0,5324,0],[6212,0,5325,0],[6213,0,5326,0],[6214,0,5327,0],[6215,0,5328,0],[6216,0,5329,0],[6217,0,5330,0],[6218,0,5331,0],[6219,0,5332,0],[6220,0,5333,0],[6221,0,5334,0],[6222,2,5335,0],[6223,0,5336,0],[6224,0,5337,0],[6225,0,5338,0],[6226,0,5339,0],[6227,0,5340,0],[6228,0,5341,0],[6229,0,5342,0],[6230,0,5343,0],[6231,0,5344,0],[6232,0,5345,0],[6233,0,5346,0],[6234,0,5347,0],[6235,0,5348,0],[6236,0,5349,0],[6237,0,5350,0],[6238,0,5351,0],[6239,0,5352,0],[6240,0,5353,0],[6241,0,5354,0],[6242,0,5355,0],[6243,0,5356,0],[6244,0,5357,0],[6245,0,5358,0],[6246,0,5359,0],[6247,0,5360,0],[6248,0,5361,0],[6249,0,5362,0],[6250,0,5363,0],[6251,0,5364,0],[6252,0,5365,0],[6253,0,5366,0],[6254,0,5367,0],[6255,0,5368,0],[6256,0,5369,0],[6257,0,5370,0],[6258,0,5371,0],[6259,0,5372,0],[6260,0,5373,0],[6261,2,5335,0],[6261,6,5374,6,"TwitterAuthProvider"],[6261,25,5374,25],[6261,51,5374,25,"_BaseOAuthProvider5"],[6261,70,5374,25],[6262,4,5375,4],[6262,13,5375,4,"TwitterAuthProvider"],[6262,33,5375,4],[6262,35,5375,18],[6263,6,5375,18,"_classCallCheck"],[6263,21,5375,18],[6263,28,5375,18,"TwitterAuthProvider"],[6263,47,5375,18],[6264,6,5375,18],[6264,13,5375,18,"_callSuper"],[6264,23,5375,18],[6264,30,5375,18,"TwitterAuthProvider"],[6264,49,5375,18],[6264,52,5376,14],[6264,65,5376,27],[6264,66,5376,28],[6265,4,5377,4],[6266,4,5378,4],[6267,0,5379,0],[6268,0,5380,0],[6269,0,5381,0],[6270,0,5382,0],[6271,0,5383,0],[6272,4,5378,4,"_inherits"],[6272,13,5378,4],[6272,14,5378,4,"TwitterAuthProvider"],[6272,33,5378,4],[6272,35,5378,4,"_BaseOAuthProvider5"],[6272,54,5378,4],[6273,4,5378,4],[6273,11,5378,4,"_createClass"],[6273,23,5378,4],[6273,24,5378,4,"TwitterAuthProvider"],[6273,43,5378,4],[6274,6,5378,4,"key"],[6274,9,5378,4],[6275,6,5378,4,"value"],[6275,11,5378,4],[6275,13,5384,4],[6275,22,5384,11,"credential"],[6275,32,5384,21,"credential"],[6275,33,5384,22,"token"],[6275,38,5384,27],[6275,40,5384,29,"secret"],[6275,46,5384,35],[6275,48,5384,37],[6276,8,5385,8],[6276,15,5385,15,"OAuthCredential"],[6276,30,5385,30],[6276,31,5385,31,"_fromParams"],[6276,42,5385,42],[6276,43,5385,43],[6277,10,5386,12,"providerId"],[6277,20,5386,22],[6277,22,5386,24,"TwitterAuthProvider"],[6277,41,5386,43],[6277,42,5386,44,"PROVIDER_ID"],[6277,53,5386,55],[6278,10,5387,12,"signInMethod"],[6278,22,5387,24],[6278,24,5387,26,"TwitterAuthProvider"],[6278,43,5387,45],[6278,44,5387,46,"TWITTER_SIGN_IN_METHOD"],[6278,66,5387,68],[6279,10,5388,12,"oauthToken"],[6279,20,5388,22],[6279,22,5388,24,"token"],[6279,27,5388,29],[6280,10,5389,12,"oauthTokenSecret"],[6280,26,5389,28],[6280,28,5389,30,"secret"],[6281,8,5390,8],[6281,9,5390,9],[6281,10,5390,10],[6282,6,5391,4],[6283,6,5392,4],[6284,0,5393,0],[6285,0,5394,0],[6286,0,5395,0],[6287,0,5396,0],[6288,4,5392,4],[6289,6,5392,4,"key"],[6289,9,5392,4],[6290,6,5392,4,"value"],[6290,11,5392,4],[6290,13,5397,4],[6290,22,5397,11,"credentialFromResult"],[6290,42,5397,31,"credentialFromResult"],[6290,43,5397,32,"userCredential"],[6290,57,5397,46],[6290,59,5397,48],[6291,8,5398,8],[6291,15,5398,15,"TwitterAuthProvider"],[6291,34,5398,34],[6291,35,5398,35,"credentialFromTaggedObject"],[6291,61,5398,61],[6291,62,5398,62,"userCredential"],[6291,76,5398,76],[6291,77,5398,77],[6292,6,5399,4],[6293,6,5400,4],[6294,0,5401,0],[6295,0,5402,0],[6296,0,5403,0],[6297,0,5404,0],[6298,0,5405,0],[6299,4,5400,4],[6300,6,5400,4,"key"],[6300,9,5400,4],[6301,6,5400,4,"value"],[6301,11,5400,4],[6301,13,5406,4],[6301,22,5406,11,"credentialFromError"],[6301,41,5406,30,"credentialFromError"],[6301,42,5406,31,"error"],[6301,47,5406,36],[6301,49,5406,38],[6302,8,5407,8],[6302,15,5407,15,"TwitterAuthProvider"],[6302,34,5407,34],[6302,35,5407,35,"credentialFromTaggedObject"],[6302,61,5407,61],[6302,62,5407,63,"error"],[6302,67,5407,68],[6302,68,5407,69,"customData"],[6302,78,5407,79],[6302,82,5407,83],[6302,83,5407,84],[6302,84,5407,86],[6302,85,5407,87],[6303,6,5408,4],[6304,4,5408,5],[6305,6,5408,5,"key"],[6305,9,5408,5],[6306,6,5408,5,"value"],[6306,11,5408,5],[6306,13,5409,4],[6306,22,5409,11,"credentialFromTaggedObject"],[6306,48,5409,37,"credentialFromTaggedObject"],[6306,49,5409,37,"_ref16"],[6306,55,5409,37],[6306,57,5409,73],[6307,8,5409,73],[6307,12,5409,56,"tokenResponse"],[6307,25,5409,69],[6307,28,5409,69,"_ref16"],[6307,34,5409,69],[6307,35,5409,40,"_tokenResponse"],[6307,49,5409,54],[6308,8,5410,8],[6308,12,5410,12],[6308,13,5410,13,"tokenResponse"],[6308,26,5410,26],[6308,28,5410,28],[6309,10,5411,12],[6309,17,5411,19],[6309,21,5411,23],[6310,8,5412,8],[6311,8,5413,8],[6311,12,5413,16,"oauthAccessToken"],[6311,28,5413,32],[6311,31,5413,55,"tokenResponse"],[6311,44,5413,68],[6311,45,5413,16,"oauthAccessToken"],[6311,61,5413,32],[6312,10,5413,34,"oauthTokenSecret"],[6312,26,5413,50],[6312,29,5413,55,"tokenResponse"],[6312,42,5413,68],[6312,43,5413,34,"oauthTokenSecret"],[6312,59,5413,50],[6313,8,5414,8],[6313,12,5414,12],[6313,13,5414,13,"oauthAccessToken"],[6313,29,5414,29],[6313,33,5414,33],[6313,34,5414,34,"oauthTokenSecret"],[6313,50,5414,50],[6313,52,5414,52],[6314,10,5415,12],[6314,17,5415,19],[6314,21,5415,23],[6315,8,5416,8],[6316,8,5417,8],[6316,12,5417,12],[6317,10,5418,12],[6317,17,5418,19,"TwitterAuthProvider"],[6317,36,5418,38],[6317,37,5418,39,"credential"],[6317,47,5418,49],[6317,48,5418,50,"oauthAccessToken"],[6317,64,5418,66],[6317,66,5418,68,"oauthTokenSecret"],[6317,82,5418,84],[6317,83,5418,85],[6318,8,5419,8],[6318,9,5419,9],[6318,10,5420,8],[6318,16,5420,14],[6319,10,5421,12],[6319,17,5421,19],[6319,21,5421,23],[6320,8,5422,8],[6321,6,5423,4],[6322,4,5423,5],[6323,2,5423,5],[6323,4,5374,34,"BaseOAuthProvider"],[6323,21,5374,51],[6324,2,5425,0],[6325,2,5426,0,"TwitterAuthProvider"],[6325,21,5426,19],[6325,22,5426,20,"TWITTER_SIGN_IN_METHOD"],[6325,44,5426,42],[6325,47,5426,45],[6325,60,5426,58],[6325,61,5426,59],[6326,2,5427,0],[6327,2,5428,0,"TwitterAuthProvider"],[6327,21,5428,19],[6327,22,5428,20,"PROVIDER_ID"],[6327,33,5428,31],[6327,36,5428,34],[6327,49,5428,47],[6327,50,5428,48],[6329,2,5430,0],[6330,0,5431,0],[6331,0,5432,0],[6332,0,5433,0],[6333,0,5434,0],[6334,0,5435,0],[6335,0,5436,0],[6336,0,5437,0],[6337,0,5438,0],[6338,0,5439,0],[6339,0,5440,0],[6340,0,5441,0],[6341,0,5442,0],[6342,0,5443,0],[6343,0,5444,0],[6344,0,5445,0],[6345,2,5430,0],[6345,11,5446,15,"signUp"],[6345,17,5446,21,"signUp"],[6345,18,5446,21,"_x117"],[6345,23,5446,21],[6345,25,5446,21,"_x118"],[6345,30,5446,21],[6346,4,5446,21],[6346,11,5446,21,"_signUp"],[6346,18,5446,21],[6346,19,5446,21,"apply"],[6346,24,5446,21],[6346,31,5446,21,"arguments"],[6346,40,5446,21],[6347,2,5446,21],[6348,2,5450,0],[6349,0,5451,0],[6350,0,5452,0],[6351,0,5453,0],[6352,0,5454,0],[6353,0,5455,0],[6354,0,5456,0],[6355,0,5457,0],[6356,0,5458,0],[6357,0,5459,0],[6358,0,5460,0],[6359,0,5461,0],[6360,0,5462,0],[6361,0,5463,0],[6362,0,5464,0],[6363,0,5465,0],[6364,2,5450,0],[6364,11,5450,0,"_signUp"],[6364,19,5450,0],[6365,4,5450,0,"_signUp"],[6365,11,5450,0],[6365,14,5450,0,"_asyncToGenerator"],[6365,31,5450,0],[6365,32,5446,0],[6365,43,5446,22,"auth"],[6365,47,5446,26],[6365,49,5446,28,"request"],[6365,56,5446,35],[6365,58,5446,37],[6366,6,5447,4],[6366,13,5447,11,"_performSignInRequest"],[6366,34,5447,32],[6366,35,5447,33,"auth"],[6366,39,5447,37],[6366,41,5447,39],[6366,47,5447,45],[6366,48,5447,46],[6366,71,5447,69],[6366,92,5447,90],[6366,93,5447,91],[6366,117,5447,115,"_addTidIfNecessary"],[6366,135,5447,133],[6366,136,5447,134,"auth"],[6366,140,5447,138],[6366,142,5447,140,"request"],[6366,149,5447,147],[6366,150,5447,148],[6366,151,5447,149],[6367,4,5448,0],[6367,5,5448,1],[6368,4,5448,1],[6368,11,5448,1,"_signUp"],[6368,18,5448,1],[6368,19,5448,1,"apply"],[6368,24,5448,1],[6368,31,5448,1,"arguments"],[6368,40,5448,1],[6369,2,5448,1],[6370,2,5448,1],[6370,6,5466,6,"UserCredentialImpl"],[6370,24,5466,24],[6371,4,5467,4],[6371,13,5467,4,"UserCredentialImpl"],[6371,32,5467,16,"params"],[6371,38,5467,22],[6371,40,5467,24],[6372,6,5467,24,"_classCallCheck"],[6372,21,5467,24],[6372,28,5467,24,"UserCredentialImpl"],[6372,46,5467,24],[6373,6,5468,8],[6373,10,5468,12],[6373,11,5468,13,"user"],[6373,15,5468,17],[6373,18,5468,20,"params"],[6373,24,5468,26],[6373,25,5468,27,"user"],[6373,29,5468,31],[6374,6,5469,8],[6374,10,5469,12],[6374,11,5469,13,"providerId"],[6374,21,5469,23],[6374,24,5469,26,"params"],[6374,30,5469,32],[6374,31,5469,33,"providerId"],[6374,41,5469,43],[6375,6,5470,8],[6375,10,5470,12],[6375,11,5470,13,"_tokenResponse"],[6375,25,5470,27],[6375,28,5470,30,"params"],[6375,34,5470,36],[6375,35,5470,37,"_tokenResponse"],[6375,49,5470,51],[6376,6,5471,8],[6376,10,5471,12],[6376,11,5471,13,"operationType"],[6376,24,5471,26],[6376,27,5471,29,"params"],[6376,33,5471,35],[6376,34,5471,36,"operationType"],[6376,47,5471,49],[6377,4,5472,4],[6378,4,5472,5],[6378,11,5472,5,"_createClass"],[6378,23,5472,5],[6378,24,5472,5,"UserCredentialImpl"],[6378,42,5472,5],[6379,6,5472,5,"key"],[6379,9,5472,5],[6380,6,5472,5,"value"],[6380,11,5472,5],[6381,8,5472,5],[6381,12,5472,5,"_fromIdTokenResponse3"],[6381,33,5472,5],[6381,36,5472,5,"_asyncToGenerator"],[6381,53,5472,5],[6381,54,5473,4],[6381,65,5473,38,"auth"],[6381,69,5473,42],[6381,71,5473,44,"operationType"],[6381,84,5473,57],[6381,86,5473,59,"idTokenResponse"],[6381,101,5473,74],[6381,103,5473,97],[6382,10,5473,97],[6382,14,5473,76,"isAnonymous"],[6382,25,5473,87],[6382,28,5473,87,"arguments"],[6382,37,5473,87],[6382,38,5473,87,"length"],[6382,44,5473,87],[6382,52,5473,87,"arguments"],[6382,61,5473,87],[6382,69,5473,87,"undefined"],[6382,78,5473,87],[6382,81,5473,87,"arguments"],[6382,90,5473,87],[6382,96,5473,90],[6382,101,5473,95],[6383,10,5474,8],[6383,14,5474,14,"user"],[6383,18,5474,18],[6383,27,5474,27,"UserImpl"],[6383,35,5474,35],[6383,36,5474,36,"_fromIdTokenResponse"],[6383,56,5474,56],[6383,57,5474,57,"auth"],[6383,61,5474,61],[6383,63,5474,63,"idTokenResponse"],[6383,78,5474,78],[6383,80,5474,80,"isAnonymous"],[6383,91,5474,91],[6383,92,5474,92],[6384,10,5475,8],[6384,14,5475,14,"providerId"],[6384,24,5475,24],[6384,27,5475,27,"providerIdForResponse"],[6384,48,5475,48],[6384,49,5475,49,"idTokenResponse"],[6384,64,5475,64],[6384,65,5475,65],[6385,10,5476,8],[6385,14,5476,14,"userCred"],[6385,22,5476,22],[6385,25,5476,25],[6385,29,5476,29,"UserCredentialImpl"],[6385,47,5476,47],[6385,48,5476,48],[6386,12,5477,12,"user"],[6386,16,5477,16],[6387,12,5478,12,"providerId"],[6387,22,5478,22],[6388,12,5479,12,"_tokenResponse"],[6388,26,5479,26],[6388,28,5479,28,"idTokenResponse"],[6388,43,5479,43],[6389,12,5480,12,"operationType"],[6390,10,5481,8],[6390,11,5481,9],[6390,12,5481,10],[6391,10,5482,8],[6391,17,5482,15,"userCred"],[6391,25,5482,23],[6392,8,5483,4],[6392,9,5483,5],[6393,8,5483,5],[6393,17,5473,17,"_fromIdTokenResponse"],[6393,37,5473,37,"_fromIdTokenResponse"],[6393,38,5473,37,"_x119"],[6393,43,5473,37],[6393,45,5473,37,"_x120"],[6393,50,5473,37],[6393,52,5473,37,"_x121"],[6393,57,5473,37],[6394,10,5473,37],[6394,17,5473,37,"_fromIdTokenResponse3"],[6394,38,5473,37],[6394,39,5473,37,"apply"],[6394,44,5473,37],[6394,51,5473,37,"arguments"],[6394,60,5473,37],[6395,8,5473,37],[6396,8,5473,37],[6396,15,5473,17,"_fromIdTokenResponse"],[6396,35,5473,37],[6397,6,5473,37],[6398,4,5473,37],[6399,6,5473,37,"key"],[6399,9,5473,37],[6400,6,5473,37,"value"],[6400,11,5473,37],[6401,8,5473,37],[6401,12,5473,37,"_forOperation2"],[6401,26,5473,37],[6401,29,5473,37,"_asyncToGenerator"],[6401,46,5473,37],[6401,47,5484,4],[6401,58,5484,31,"user"],[6401,62,5484,35],[6401,64,5484,37,"operationType"],[6401,77,5484,50],[6401,79,5484,52,"response"],[6401,87,5484,60],[6401,89,5484,62],[6402,10,5485,8],[6402,16,5485,14,"user"],[6402,20,5485,18],[6402,21,5485,19,"_updateTokensIfNecessary"],[6402,45,5485,43],[6402,46,5485,44,"response"],[6402,54,5485,52],[6402,56,5485,54],[6402,68,5485,67],[6402,72,5485,71],[6402,73,5485,72],[6403,10,5486,8],[6403,14,5486,14,"providerId"],[6403,24,5486,24],[6403,27,5486,27,"providerIdForResponse"],[6403,48,5486,48],[6403,49,5486,49,"response"],[6403,57,5486,57],[6403,58,5486,58],[6404,10,5487,8],[6404,17,5487,15],[6404,21,5487,19,"UserCredentialImpl"],[6404,39,5487,37],[6404,40,5487,38],[6405,12,5488,12,"user"],[6405,16,5488,16],[6406,12,5489,12,"providerId"],[6406,22,5489,22],[6407,12,5490,12,"_tokenResponse"],[6407,26,5490,26],[6407,28,5490,28,"response"],[6407,36,5490,36],[6408,12,5491,12,"operationType"],[6409,10,5492,8],[6409,11,5492,9],[6409,12,5492,10],[6410,8,5493,4],[6410,9,5493,5],[6411,8,5493,5],[6411,17,5484,17,"_forOperation"],[6411,30,5484,30,"_forOperation"],[6411,31,5484,30,"_x122"],[6411,36,5484,30],[6411,38,5484,30,"_x123"],[6411,43,5484,30],[6411,45,5484,30,"_x124"],[6411,50,5484,30],[6412,10,5484,30],[6412,17,5484,30,"_forOperation2"],[6412,31,5484,30],[6412,32,5484,30,"apply"],[6412,37,5484,30],[6412,44,5484,30,"arguments"],[6412,53,5484,30],[6413,8,5484,30],[6414,8,5484,30],[6414,15,5484,17,"_forOperation"],[6414,28,5484,30],[6415,6,5484,30],[6416,4,5484,30],[6417,2,5484,30],[6418,2,5495,0],[6418,11,5495,9,"providerIdForResponse"],[6418,32,5495,30,"providerIdForResponse"],[6418,33,5495,31,"response"],[6418,41,5495,39],[6418,43,5495,41],[6419,4,5496,4],[6419,8,5496,8,"response"],[6419,16,5496,16],[6419,17,5496,17,"providerId"],[6419,27,5496,27],[6419,29,5496,29],[6420,6,5497,8],[6420,13,5497,15,"response"],[6420,21,5497,23],[6420,22,5497,24,"providerId"],[6420,32,5497,34],[6421,4,5498,4],[6422,4,5499,4],[6422,8,5499,8],[6422,21,5499,21],[6422,25,5499,25,"response"],[6422,33,5499,33],[6422,35,5499,35],[6423,6,5500,8],[6423,13,5500,15],[6423,20,5500,22],[6423,21,5500,23],[6424,4,5501,4],[6425,4,5502,4],[6425,11,5502,11],[6425,15,5502,15],[6426,2,5503,0],[6428,2,5505,0],[6429,0,5506,0],[6430,0,5507,0],[6431,0,5508,0],[6432,0,5509,0],[6433,0,5510,0],[6434,0,5511,0],[6435,0,5512,0],[6436,0,5513,0],[6437,0,5514,0],[6438,0,5515,0],[6439,0,5516,0],[6440,0,5517,0],[6441,0,5518,0],[6442,0,5519,0],[6443,0,5520,0],[6444,2,5521,0],[6445,0,5522,0],[6446,0,5523,0],[6447,0,5524,0],[6448,0,5525,0],[6449,0,5526,0],[6450,0,5527,0],[6451,0,5528,0],[6452,0,5529,0],[6453,0,5530,0],[6454,0,5531,0],[6455,0,5532,0],[6456,0,5533,0],[6457,0,5534,0],[6458,2,5521,0],[6458,11,5535,15,"signInAnonymously"],[6458,28,5535,32,"signInAnonymously"],[6458,29,5535,32,"_x125"],[6458,34,5535,32],[6459,4,5535,32],[6459,11,5535,32,"_signInAnonymously"],[6459,29,5535,32],[6459,30,5535,32,"apply"],[6459,35,5535,32],[6459,42,5535,32,"arguments"],[6459,51,5535,32],[6460,2,5535,32],[6461,2,5557,0],[6462,0,5558,0],[6463,0,5559,0],[6464,0,5560,0],[6465,0,5561,0],[6466,0,5562,0],[6467,0,5563,0],[6468,0,5564,0],[6469,0,5565,0],[6470,0,5566,0],[6471,0,5567,0],[6472,0,5568,0],[6473,0,5569,0],[6474,0,5570,0],[6475,0,5571,0],[6476,0,5572,0],[6477,2,5557,0],[6477,11,5557,0,"_signInAnonymously"],[6477,30,5557,0],[6478,4,5557,0,"_signInAnonymously"],[6478,22,5557,0],[6478,25,5557,0,"_asyncToGenerator"],[6478,42,5557,0],[6478,43,5535,0],[6478,54,5535,33,"auth"],[6478,58,5535,37],[6478,60,5535,39],[6479,6,5536,4],[6479,10,5536,8,"app"],[6479,13,5536,11],[6479,14,5536,12,"_isFirebaseServerApp"],[6479,34,5536,32],[6479,35,5536,33,"auth"],[6479,39,5536,37],[6479,40,5536,38,"app"],[6479,43,5536,41],[6479,44,5536,42],[6479,46,5536,44],[6480,8,5537,8],[6480,15,5537,15,"Promise"],[6480,22,5537,22],[6480,23,5537,23,"reject"],[6480,29,5537,29],[6480,30,5537,30,"_serverAppCurrentUserOperationNotSupportedError"],[6480,77,5537,77],[6480,78,5537,78,"auth"],[6480,82,5537,82],[6480,83,5537,83],[6480,84,5537,84],[6481,6,5538,4],[6482,6,5539,4],[6482,10,5539,10,"authInternal"],[6482,22,5539,22],[6482,25,5539,25,"_castAuth"],[6482,34,5539,34],[6482,35,5539,35,"auth"],[6482,39,5539,39],[6482,40,5539,40],[6483,6,5540,4],[6483,12,5540,10,"authInternal"],[6483,24,5540,22],[6483,25,5540,23,"_initializationPromise"],[6483,47,5540,45],[6484,6,5541,4],[6484,10,5541,8,"authInternal"],[6484,22,5541,20],[6484,23,5541,21,"currentUser"],[6484,34,5541,32],[6484,36,5541,34,"isAnonymous"],[6484,47,5541,45],[6484,49,5541,47],[6485,8,5542,8],[6486,8,5543,8],[6486,15,5543,15],[6486,19,5543,19,"UserCredentialImpl"],[6486,37,5543,37],[6486,38,5543,38],[6487,10,5544,12,"user"],[6487,14,5544,16],[6487,16,5544,18,"authInternal"],[6487,28,5544,30],[6487,29,5544,31,"currentUser"],[6487,40,5544,42],[6488,10,5545,12,"providerId"],[6488,20,5545,22],[6488,22,5545,24],[6488,26,5545,28],[6489,10,5546,12,"operationType"],[6489,23,5546,25],[6489,25,5546,27],[6489,33,5546,35],[6489,34,5546,36],[6490,8,5547,8],[6490,9,5547,9],[6490,10,5547,10],[6491,6,5548,4],[6492,6,5549,4],[6492,10,5549,10,"response"],[6492,18,5549,18],[6492,27,5549,27,"signUp"],[6492,33,5549,33],[6492,34,5549,34,"authInternal"],[6492,46,5549,46],[6492,48,5549,48],[6493,8,5550,8,"returnSecureToken"],[6493,25,5550,25],[6493,27,5550,27],[6494,6,5551,4],[6494,7,5551,5],[6494,8,5551,6],[6495,6,5552,4],[6495,10,5552,10,"userCredential"],[6495,24,5552,24],[6495,33,5552,33,"UserCredentialImpl"],[6495,51,5552,51],[6495,52,5552,52,"_fromIdTokenResponse"],[6495,72,5552,72],[6495,73,5552,73,"authInternal"],[6495,85,5552,85],[6495,87,5552,87],[6495,95,5552,95],[6495,96,5552,96],[6495,125,5552,125,"response"],[6495,133,5552,133],[6495,135,5552,135],[6495,139,5552,139],[6495,140,5552,140],[6496,6,5553,4],[6496,12,5553,10,"authInternal"],[6496,24,5553,22],[6496,25,5553,23,"_updateCurrentUser"],[6496,43,5553,41],[6496,44,5553,42,"userCredential"],[6496,58,5553,56],[6496,59,5553,57,"user"],[6496,63,5553,61],[6496,64,5553,62],[6497,6,5554,4],[6497,13,5554,11,"userCredential"],[6497,27,5554,25],[6498,4,5555,0],[6498,5,5555,1],[6499,4,5555,1],[6499,11,5555,1,"_signInAnonymously"],[6499,29,5555,1],[6499,30,5555,1,"apply"],[6499,35,5555,1],[6499,42,5555,1,"arguments"],[6499,51,5555,1],[6500,2,5555,1],[6501,2,5555,1],[6501,6,5573,6,"MultiFactorError"],[6501,22,5573,22],[6501,48,5573,22,"_util$FirebaseError"],[6501,67,5573,22],[6502,4,5574,4],[6502,13,5574,4,"MultiFactorError"],[6502,30,5574,16,"auth"],[6502,34,5574,20],[6502,36,5574,22,"error"],[6502,41,5574,27],[6502,43,5574,29,"operationType"],[6502,56,5574,42],[6502,58,5574,44,"user"],[6502,62,5574,48],[6502,64,5574,50],[6503,6,5574,50],[6503,10,5574,50,"_this10"],[6503,17,5574,50],[6504,6,5574,50,"_classCallCheck"],[6504,21,5574,50],[6504,28,5574,50,"MultiFactorError"],[6504,44,5574,50],[6505,6,5575,8,"_this10"],[6505,13,5575,8],[6505,16,5575,8,"_callSuper"],[6505,26,5575,8],[6505,33,5575,8,"MultiFactorError"],[6505,49,5575,8],[6505,52,5575,14,"error"],[6505,57,5575,19],[6505,58,5575,20,"code"],[6505,62,5575,24],[6505,64,5575,26,"error"],[6505,69,5575,31],[6505,70,5575,32,"message"],[6505,77,5575,39],[6506,6,5576,8,"_this10"],[6506,13,5576,8],[6506,14,5576,13,"operationType"],[6506,27,5576,26],[6506,30,5576,29,"operationType"],[6506,43,5576,42],[6507,6,5577,8,"_this10"],[6507,13,5577,8],[6507,14,5577,13,"user"],[6507,18,5577,17],[6507,21,5577,20,"user"],[6507,25,5577,24],[6508,6,5578,8],[6509,6,5579,8,"Object"],[6509,12,5579,14],[6509,13,5579,15,"setPrototypeOf"],[6509,27,5579,29],[6509,28,5579,29,"_this10"],[6509,35,5579,29],[6509,37,5579,36,"MultiFactorError"],[6509,53,5579,52],[6509,54,5579,53,"prototype"],[6509,63,5579,62],[6509,64,5579,63],[6510,6,5580,8,"_this10"],[6510,13,5580,8],[6510,14,5580,13,"customData"],[6510,24,5580,23],[6510,27,5580,26],[6511,8,5581,12,"appName"],[6511,15,5581,19],[6511,17,5581,21,"auth"],[6511,21,5581,25],[6511,22,5581,26,"name"],[6511,26,5581,30],[6512,8,5582,12,"tenantId"],[6512,16,5582,20],[6512,18,5582,22,"auth"],[6512,22,5582,26],[6512,23,5582,27,"tenantId"],[6512,31,5582,35],[6512,35,5582,39,"undefined"],[6512,44,5582,48],[6513,8,5583,12,"_serverResponse"],[6513,23,5583,27],[6513,25,5583,29,"error"],[6513,30,5583,34],[6513,31,5583,35,"customData"],[6513,41,5583,45],[6513,42,5583,46,"_serverResponse"],[6513,57,5583,61],[6514,8,5584,12,"operationType"],[6515,6,5585,8],[6515,7,5585,9],[6516,6,5585,10],[6516,13,5585,10,"_this10"],[6516,20,5585,10],[6517,4,5586,4],[6518,4,5586,5,"_inherits"],[6518,13,5586,5],[6518,14,5586,5,"MultiFactorError"],[6518,30,5586,5],[6518,32,5586,5,"_util$FirebaseError"],[6518,51,5586,5],[6519,4,5586,5],[6519,11,5586,5,"_createClass"],[6519,23,5586,5],[6519,24,5586,5,"MultiFactorError"],[6519,40,5586,5],[6520,6,5586,5,"key"],[6520,9,5586,5],[6521,6,5586,5,"value"],[6521,11,5586,5],[6521,13,5587,4],[6521,22,5587,11,"_fromErrorAndOperation"],[6521,44,5587,33,"_fromErrorAndOperation"],[6521,45,5587,34,"auth"],[6521,49,5587,38],[6521,51,5587,40,"error"],[6521,56,5587,45],[6521,58,5587,47,"operationType"],[6521,71,5587,60],[6521,73,5587,62,"user"],[6521,77,5587,66],[6521,79,5587,68],[6522,8,5588,8],[6522,15,5588,15],[6522,19,5588,19,"MultiFactorError"],[6522,35,5588,35],[6522,36,5588,36,"auth"],[6522,40,5588,40],[6522,42,5588,42,"error"],[6522,47,5588,47],[6522,49,5588,49,"operationType"],[6522,62,5588,62],[6522,64,5588,64,"user"],[6522,68,5588,68],[6522,69,5588,69],[6523,6,5589,4],[6524,4,5589,5],[6525,2,5589,5],[6525,4,5573,31,"util"],[6525,8,5573,35],[6525,9,5573,36,"FirebaseError"],[6525,22,5573,49],[6526,2,5591,0],[6526,11,5591,9,"_processCredentialSavingMfaContextIfNecessary"],[6526,56,5591,54,"_processCredentialSavingMfaContextIfNecessary"],[6526,57,5591,55,"auth"],[6526,61,5591,59],[6526,63,5591,61,"operationType"],[6526,76,5591,74],[6526,78,5591,76,"credential"],[6526,88,5591,86],[6526,90,5591,88,"user"],[6526,94,5591,92],[6526,96,5591,94],[6527,4,5592,4],[6527,8,5592,10,"idTokenProvider"],[6527,23,5592,25],[6527,26,5592,28,"operationType"],[6527,39,5592,41],[6527,44,5592,46],[6527,60,5592,62],[6527,61,5592,63],[6527,98,5593,10,"credential"],[6527,108,5593,20],[6527,109,5593,21,"_getReauthenticationResolver"],[6527,137,5593,49],[6527,138,5593,50,"auth"],[6527,142,5593,54],[6527,143,5593,55],[6527,146,5594,10,"credential"],[6527,156,5594,20],[6527,157,5594,21,"_getIdTokenResponse"],[6527,176,5594,40],[6527,177,5594,41,"auth"],[6527,181,5594,45],[6527,182,5594,46],[6528,4,5595,4],[6528,11,5595,11,"idTokenProvider"],[6528,26,5595,26],[6528,27,5595,27,"catch"],[6528,32,5595,32],[6528,33,5595,33,"error"],[6528,38,5595,38],[6528,42,5595,42],[6529,6,5596,8],[6529,10,5596,12,"error"],[6529,15,5596,17],[6529,16,5596,18,"code"],[6529,20,5596,22],[6529,25,5596,27],[6529,33,5596,35],[6529,61,5596,63],[6529,62,5596,64],[6529,96,5596,98],[6529,98,5596,100],[6530,8,5597,12],[6530,14,5597,18,"MultiFactorError"],[6530,30,5597,34],[6530,31,5597,35,"_fromErrorAndOperation"],[6530,53,5597,57],[6530,54,5597,58,"auth"],[6530,58,5597,62],[6530,60,5597,64,"error"],[6530,65,5597,69],[6530,67,5597,71,"operationType"],[6530,80,5597,84],[6530,82,5597,86,"user"],[6530,86,5597,90],[6530,87,5597,91],[6531,6,5598,8],[6532,6,5599,8],[6532,12,5599,14,"error"],[6532,17,5599,19],[6533,4,5600,4],[6533,5,5600,5],[6533,6,5600,6],[6534,2,5601,0],[6536,2,5603,0],[6537,0,5604,0],[6538,0,5605,0],[6539,0,5606,0],[6540,0,5607,0],[6541,0,5608,0],[6542,0,5609,0],[6543,0,5610,0],[6544,0,5611,0],[6545,0,5612,0],[6546,0,5613,0],[6547,0,5614,0],[6548,0,5615,0],[6549,0,5616,0],[6550,0,5617,0],[6551,0,5618,0],[6552,2,5619,0],[6553,0,5620,0],[6554,0,5621,0],[6555,2,5622,0],[6555,11,5622,9,"providerDataAsNames"],[6555,30,5622,28,"providerDataAsNames"],[6555,31,5622,29,"providerData"],[6555,43,5622,41],[6555,45,5622,43],[6556,4,5623,4],[6556,11,5623,11],[6556,15,5623,15,"Set"],[6556,18,5623,18],[6556,19,5623,19,"providerData"],[6556,31,5623,31],[6556,32,5624,9,"map"],[6556,35,5624,12],[6556,36,5624,13,"_ref17"],[6556,42,5624,13],[6557,6,5624,13],[6557,10,5624,16,"providerId"],[6557,20,5624,26],[6557,23,5624,26,"_ref17"],[6557,29,5624,26],[6557,30,5624,16,"providerId"],[6557,40,5624,26],[6558,6,5624,26],[6558,13,5624,33,"providerId"],[6558,23,5624,43],[6559,4,5624,43],[6559,6,5624,44],[6559,7,5625,9,"filter"],[6559,13,5625,15],[6559,14,5625,16,"pid"],[6559,17,5625,19],[6559,21,5625,23],[6559,22,5625,24],[6559,23,5625,25,"pid"],[6559,26,5625,28],[6559,27,5625,29],[6559,28,5625,30],[6560,2,5626,0],[6562,2,5628,0],[6563,0,5629,0],[6564,0,5630,0],[6565,0,5631,0],[6566,0,5632,0],[6567,0,5633,0],[6568,0,5634,0],[6569,0,5635,0],[6570,0,5636,0],[6571,0,5637,0],[6572,0,5638,0],[6573,0,5639,0],[6574,0,5640,0],[6575,0,5641,0],[6576,0,5642,0],[6577,0,5643,0],[6578,2,5644,0],[6579,0,5645,0],[6580,0,5646,0],[6581,0,5647,0],[6582,0,5648,0],[6583,0,5649,0],[6584,0,5650,0],[6585,0,5651,0],[6586,2,5644,0],[6586,11,5652,15,"unlink"],[6586,17,5652,21,"unlink"],[6586,18,5652,21,"_x126"],[6586,23,5652,21],[6586,25,5652,21,"_x127"],[6586,30,5652,21],[6587,4,5652,21],[6587,11,5652,21,"_unlink"],[6587,18,5652,21],[6587,19,5652,21,"apply"],[6587,24,5652,21],[6587,31,5652,21,"arguments"],[6587,40,5652,21],[6588,2,5652,21],[6589,2,5652,21],[6589,11,5652,21,"_unlink"],[6589,19,5652,21],[6590,4,5652,21,"_unlink"],[6590,11,5652,21],[6590,14,5652,21,"_asyncToGenerator"],[6590,31,5652,21],[6590,32,5652,0],[6590,43,5652,22,"user"],[6590,47,5652,26],[6590,49,5652,28,"providerId"],[6590,59,5652,38],[6590,61,5652,40],[6591,6,5653,4],[6591,10,5653,10,"userInternal"],[6591,22,5653,22],[6591,25,5653,25,"util"],[6591,29,5653,29],[6591,30,5653,30,"getModularInstance"],[6591,48,5653,48],[6591,49,5653,49,"user"],[6591,53,5653,53],[6591,54,5653,54],[6592,6,5654,4],[6592,12,5654,10,"_assertLinkedStatus"],[6592,31,5654,29],[6592,32,5654,30],[6592,36,5654,34],[6592,38,5654,36,"userInternal"],[6592,50,5654,48],[6592,52,5654,50,"providerId"],[6592,62,5654,60],[6592,63,5654,61],[6593,6,5655,4],[6593,10,5655,4,"_yield$deleteLinkedAc"],[6593,31,5655,4],[6593,40,5655,39,"deleteLinkedAccounts"],[6593,60,5655,59],[6593,61,5655,60,"userInternal"],[6593,73,5655,72],[6593,74,5655,73,"auth"],[6593,78,5655,77],[6593,80,5655,79],[6594,10,5656,8,"idToken"],[6594,17,5656,15],[6594,25,5656,23,"userInternal"],[6594,37,5656,35],[6594,38,5656,36,"getIdToken"],[6594,48,5656,46],[6594,49,5656,47],[6594,50,5656,48],[6595,10,5657,8,"deleteProvider"],[6595,24,5657,22],[6595,26,5657,24],[6595,27,5657,25,"providerId"],[6595,37,5657,35],[6596,8,5658,4],[6596,9,5658,5],[6596,10,5658,6],[6597,8,5655,12,"providerUserInfo"],[6597,24,5655,28],[6597,27,5655,28,"_yield$deleteLinkedAc"],[6597,48,5655,28],[6597,49,5655,12,"providerUserInfo"],[6597,65,5655,28],[6598,6,5659,4],[6598,10,5659,10,"providersLeft"],[6598,23,5659,23],[6598,26,5659,26,"providerDataAsNames"],[6598,45,5659,45],[6598,46,5659,46,"providerUserInfo"],[6598,62,5659,62],[6598,66,5659,66],[6598,68,5659,68],[6598,69,5659,69],[6599,6,5660,4,"userInternal"],[6599,18,5660,16],[6599,19,5660,17,"providerData"],[6599,31,5660,29],[6599,34,5660,32,"userInternal"],[6599,46,5660,44],[6599,47,5660,45,"providerData"],[6599,59,5660,57],[6599,60,5660,58,"filter"],[6599,66,5660,64],[6599,67,5660,65,"pd"],[6599,69,5660,67],[6599,73,5660,71,"providersLeft"],[6599,86,5660,84],[6599,87,5660,85,"has"],[6599,90,5660,88],[6599,91,5660,89,"pd"],[6599,93,5660,91],[6599,94,5660,92,"providerId"],[6599,104,5660,102],[6599,105,5660,103],[6599,106,5660,104],[6600,6,5661,4],[6600,10,5661,8],[6600,11,5661,9,"providersLeft"],[6600,24,5661,22],[6600,25,5661,23,"has"],[6600,28,5661,26],[6600,29,5661,27],[6600,36,5661,34],[6600,37,5661,35],[6600,59,5661,57],[6600,60,5661,58],[6600,62,5661,60],[6601,8,5662,8,"userInternal"],[6601,20,5662,20],[6601,21,5662,21,"phoneNumber"],[6601,32,5662,32],[6601,35,5662,35],[6601,39,5662,39],[6602,6,5663,4],[6603,6,5664,4],[6603,12,5664,10,"userInternal"],[6603,24,5664,22],[6603,25,5664,23,"auth"],[6603,29,5664,27],[6603,30,5664,28,"_persistUserIfCurrent"],[6603,51,5664,49],[6603,52,5664,50,"userInternal"],[6603,64,5664,62],[6603,65,5664,63],[6604,6,5665,4],[6604,13,5665,11,"userInternal"],[6604,25,5665,23],[6605,4,5666,0],[6605,5,5666,1],[6606,4,5666,1],[6606,11,5666,1,"_unlink"],[6606,18,5666,1],[6606,19,5666,1,"apply"],[6606,24,5666,1],[6606,31,5666,1,"arguments"],[6606,40,5666,1],[6607,2,5666,1],[6608,2,5666,1],[6608,11,5667,15,"_link"],[6608,16,5667,20,"_link"],[6608,17,5667,20,"_x128"],[6608,22,5667,20],[6608,24,5667,20,"_x129"],[6608,29,5667,20],[6609,4,5667,20],[6609,11,5667,20,"_link2"],[6609,17,5667,20],[6609,18,5667,20,"apply"],[6609,23,5667,20],[6609,30,5667,20,"arguments"],[6609,39,5667,20],[6610,2,5667,20],[6611,2,5667,20],[6611,11,5667,20,"_link2"],[6611,18,5667,20],[6612,4,5667,20,"_link2"],[6612,10,5667,20],[6612,13,5667,20,"_asyncToGenerator"],[6612,30,5667,20],[6612,31,5667,0],[6612,42,5667,21,"user"],[6612,46,5667,25],[6612,48,5667,27,"credential"],[6612,58,5667,37],[6612,60,5667,64],[6613,6,5667,64],[6613,10,5667,39,"bypassAuthState"],[6613,25,5667,54],[6613,28,5667,54,"arguments"],[6613,37,5667,54],[6613,38,5667,54,"length"],[6613,44,5667,54],[6613,52,5667,54,"arguments"],[6613,61,5667,54],[6613,69,5667,54,"undefined"],[6613,78,5667,54],[6613,81,5667,54,"arguments"],[6613,90,5667,54],[6613,96,5667,57],[6613,101,5667,62],[6614,6,5668,4],[6614,10,5668,10,"response"],[6614,18,5668,18],[6614,27,5668,27,"_logoutIfInvalidated"],[6614,47,5668,47],[6614,48,5668,48,"user"],[6614,52,5668,52],[6614,54,5668,54,"credential"],[6614,64,5668,64],[6614,65,5668,65,"_linkToIdToken"],[6614,79,5668,79],[6614,80,5668,80,"user"],[6614,84,5668,84],[6614,85,5668,85,"auth"],[6614,89,5668,89],[6614,97,5668,97,"user"],[6614,101,5668,101],[6614,102,5668,102,"getIdToken"],[6614,112,5668,112],[6614,113,5668,113],[6614,114,5668,114],[6614,115,5668,115],[6614,117,5668,117,"bypassAuthState"],[6614,132,5668,132],[6614,133,5668,133],[6615,6,5669,4],[6615,13,5669,11,"UserCredentialImpl"],[6615,31,5669,29],[6615,32,5669,30,"_forOperation"],[6615,45,5669,43],[6615,46,5669,44,"user"],[6615,50,5669,48],[6615,52,5669,50],[6615,58,5669,56],[6615,59,5669,57],[6615,85,5669,83,"response"],[6615,93,5669,91],[6615,94,5669,92],[6616,4,5670,0],[6616,5,5670,1],[6617,4,5670,1],[6617,11,5670,1,"_link2"],[6617,17,5670,1],[6617,18,5670,1,"apply"],[6617,23,5670,1],[6617,30,5670,1,"arguments"],[6617,39,5670,1],[6618,2,5670,1],[6619,2,5670,1],[6619,11,5671,15,"_assertLinkedStatus"],[6619,30,5671,34,"_assertLinkedStatus"],[6619,31,5671,34,"_x130"],[6619,36,5671,34],[6619,38,5671,34,"_x131"],[6619,43,5671,34],[6619,45,5671,34,"_x132"],[6619,50,5671,34],[6620,4,5671,34],[6620,11,5671,34,"_assertLinkedStatus2"],[6620,31,5671,34],[6620,32,5671,34,"apply"],[6620,37,5671,34],[6620,44,5671,34,"arguments"],[6620,53,5671,34],[6621,2,5671,34],[6622,2,5680,0],[6623,0,5681,0],[6624,0,5682,0],[6625,0,5683,0],[6626,0,5684,0],[6627,0,5685,0],[6628,0,5686,0],[6629,0,5687,0],[6630,0,5688,0],[6631,0,5689,0],[6632,0,5690,0],[6633,0,5691,0],[6634,0,5692,0],[6635,0,5693,0],[6636,0,5694,0],[6637,0,5695,0],[6638,2,5680,0],[6638,11,5680,0,"_assertLinkedStatus2"],[6638,32,5680,0],[6639,4,5680,0,"_assertLinkedStatus2"],[6639,24,5680,0],[6639,27,5680,0,"_asyncToGenerator"],[6639,44,5680,0],[6639,45,5671,0],[6639,56,5671,35,"expected"],[6639,64,5671,43],[6639,66,5671,45,"user"],[6639,70,5671,49],[6639,72,5671,51,"provider"],[6639,80,5671,59],[6639,82,5671,61],[6640,6,5672,4],[6640,12,5672,10,"_reloadWithoutSaving"],[6640,32,5672,30],[6640,33,5672,31,"user"],[6640,37,5672,35],[6640,38,5672,36],[6641,6,5673,4],[6641,10,5673,10,"providerIds"],[6641,21,5673,21],[6641,24,5673,24,"providerDataAsNames"],[6641,43,5673,43],[6641,44,5673,44,"user"],[6641,48,5673,48],[6641,49,5673,49,"providerData"],[6641,61,5673,61],[6641,62,5673,62],[6642,6,5674,4],[6642,10,5674,10,"code"],[6642,14,5674,14],[6642,17,5674,17,"expected"],[6642,25,5674,25],[6642,30,5674,30],[6642,35,5674,35],[6642,38,5675,10],[6642,63,5675,35],[6642,64,5675,36],[6642,110,5676,10],[6642,128,5676,28],[6642,129,5676,29],[6643,6,5677,4,"_assert"],[6643,13,5677,11],[6643,14,5677,12,"providerIds"],[6643,25,5677,23],[6643,26,5677,24,"has"],[6643,29,5677,27],[6643,30,5677,28,"provider"],[6643,38,5677,36],[6643,39,5677,37],[6643,44,5677,42,"expected"],[6643,52,5677,50],[6643,54,5677,52,"user"],[6643,58,5677,56],[6643,59,5677,57,"auth"],[6643,63,5677,61],[6643,65,5677,63,"code"],[6643,69,5677,67],[6643,70,5677,68],[6644,4,5678,0],[6644,5,5678,1],[6645,4,5678,1],[6645,11,5678,1,"_assertLinkedStatus2"],[6645,31,5678,1],[6645,32,5678,1,"apply"],[6645,37,5678,1],[6645,44,5678,1,"arguments"],[6645,53,5678,1],[6646,2,5678,1],[6647,2,5678,1],[6647,11,5696,15,"_reauthenticate"],[6647,26,5696,30,"_reauthenticate"],[6647,27,5696,30,"_x133"],[6647,32,5696,30],[6647,34,5696,30,"_x134"],[6647,39,5696,30],[6648,4,5696,30],[6648,11,5696,30,"_reauthenticate2"],[6648,27,5696,30],[6648,28,5696,30,"apply"],[6648,33,5696,30],[6648,40,5696,30,"arguments"],[6648,49,5696,30],[6649,2,5696,30],[6650,2,5720,0],[6651,0,5721,0],[6652,0,5722,0],[6653,0,5723,0],[6654,0,5724,0],[6655,0,5725,0],[6656,0,5726,0],[6657,0,5727,0],[6658,0,5728,0],[6659,0,5729,0],[6660,0,5730,0],[6661,0,5731,0],[6662,0,5732,0],[6663,0,5733,0],[6664,0,5734,0],[6665,0,5735,0],[6666,2,5720,0],[6666,11,5720,0,"_reauthenticate2"],[6666,28,5720,0],[6667,4,5720,0,"_reauthenticate2"],[6667,20,5720,0],[6667,23,5720,0,"_asyncToGenerator"],[6667,40,5720,0],[6667,41,5696,0],[6667,52,5696,31,"user"],[6667,56,5696,35],[6667,58,5696,37,"credential"],[6667,68,5696,47],[6667,70,5696,74],[6668,6,5696,74],[6668,10,5696,49,"bypassAuthState"],[6668,25,5696,64],[6668,28,5696,64,"arguments"],[6668,37,5696,64],[6668,38,5696,64,"length"],[6668,44,5696,64],[6668,52,5696,64,"arguments"],[6668,61,5696,64],[6668,69,5696,64,"undefined"],[6668,78,5696,64],[6668,81,5696,64,"arguments"],[6668,90,5696,64],[6668,96,5696,67],[6668,101,5696,72],[6669,6,5697,4],[6669,10,5697,12,"auth"],[6669,14,5697,16],[6669,17,5697,21,"user"],[6669,21,5697,25],[6669,22,5697,12,"auth"],[6669,26,5697,16],[6670,6,5698,4],[6670,10,5698,8,"app"],[6670,13,5698,11],[6670,14,5698,12,"_isFirebaseServerApp"],[6670,34,5698,32],[6670,35,5698,33,"auth"],[6670,39,5698,37],[6670,40,5698,38,"app"],[6670,43,5698,41],[6670,44,5698,42],[6670,46,5698,44],[6671,8,5699,8],[6671,15,5699,15,"Promise"],[6671,22,5699,22],[6671,23,5699,23,"reject"],[6671,29,5699,29],[6671,30,5699,30,"_serverAppCurrentUserOperationNotSupportedError"],[6671,77,5699,77],[6671,78,5699,78,"auth"],[6671,82,5699,82],[6671,83,5699,83],[6671,84,5699,84],[6672,6,5700,4],[6673,6,5701,4],[6673,10,5701,10,"operationType"],[6673,23,5701,23],[6673,26,5701,26],[6673,42,5701,42],[6673,43,5701,43],[6674,6,5702,4],[6674,10,5702,8],[6675,8,5703,8],[6675,12,5703,14,"response"],[6675,20,5703,22],[6675,29,5703,31,"_logoutIfInvalidated"],[6675,49,5703,51],[6675,50,5703,52,"user"],[6675,54,5703,56],[6675,56,5703,58,"_processCredentialSavingMfaContextIfNecessary"],[6675,101,5703,103],[6675,102,5703,104,"auth"],[6675,106,5703,108],[6675,108,5703,110,"operationType"],[6675,121,5703,123],[6675,123,5703,125,"credential"],[6675,133,5703,135],[6675,135,5703,137,"user"],[6675,139,5703,141],[6675,140,5703,142],[6675,142,5703,144,"bypassAuthState"],[6675,157,5703,159],[6675,158,5703,160],[6676,8,5704,8,"_assert"],[6676,15,5704,15],[6676,16,5704,16,"response"],[6676,24,5704,24],[6676,25,5704,25,"idToken"],[6676,32,5704,32],[6676,34,5704,34,"auth"],[6676,38,5704,38],[6676,40,5704,40],[6676,56,5704,56],[6676,57,5704,57],[6676,91,5704,91],[6676,92,5704,92],[6677,8,5705,8],[6677,12,5705,14,"parsed"],[6677,18,5705,20],[6677,21,5705,23,"_parseToken"],[6677,32,5705,34],[6677,33,5705,35,"response"],[6677,41,5705,43],[6677,42,5705,44,"idToken"],[6677,49,5705,51],[6677,50,5705,52],[6678,8,5706,8,"_assert"],[6678,15,5706,15],[6678,16,5706,16,"parsed"],[6678,22,5706,22],[6678,24,5706,24,"auth"],[6678,28,5706,28],[6678,30,5706,30],[6678,46,5706,46],[6678,47,5706,47],[6678,81,5706,81],[6678,82,5706,82],[6679,8,5707,8],[6679,12,5707,21,"localId"],[6679,19,5707,28],[6679,22,5707,33,"parsed"],[6679,28,5707,39],[6679,29,5707,16,"sub"],[6679,32,5707,19],[6680,8,5708,8,"_assert"],[6680,15,5708,15],[6680,16,5708,16,"user"],[6680,20,5708,20],[6680,21,5708,21,"uid"],[6680,24,5708,24],[6680,29,5708,29,"localId"],[6680,36,5708,36],[6680,38,5708,38,"auth"],[6680,42,5708,42],[6680,44,5708,44],[6680,59,5708,59],[6680,60,5708,60],[6680,93,5708,93],[6680,94,5708,94],[6681,8,5709,8],[6681,15,5709,15,"UserCredentialImpl"],[6681,33,5709,33],[6681,34,5709,34,"_forOperation"],[6681,47,5709,47],[6681,48,5709,48,"user"],[6681,52,5709,52],[6681,54,5709,54,"operationType"],[6681,67,5709,67],[6681,69,5709,69,"response"],[6681,77,5709,77],[6681,78,5709,78],[6682,6,5710,4],[6682,7,5710,5],[6682,8,5711,4],[6682,15,5711,11,"e"],[6682,16,5711,12],[6682,18,5711,14],[6683,8,5712,8],[6684,8,5713,8],[6684,12,5713,12,"e"],[6684,13,5713,13],[6684,15,5713,15,"code"],[6684,19,5713,19],[6684,24,5713,24],[6684,32,5713,32],[6684,48,5713,48],[6684,49,5713,49],[6684,83,5713,83],[6684,85,5713,85],[6685,10,5714,12,"_fail"],[6685,15,5714,17],[6685,16,5714,18,"auth"],[6685,20,5714,22],[6685,22,5714,24],[6685,37,5714,39],[6685,38,5714,40],[6685,71,5714,73],[6685,72,5714,74],[6686,8,5715,8],[6687,8,5716,8],[6687,14,5716,14,"e"],[6687,15,5716,15],[6688,6,5717,4],[6689,4,5718,0],[6689,5,5718,1],[6690,4,5718,1],[6690,11,5718,1,"_reauthenticate2"],[6690,27,5718,1],[6690,28,5718,1,"apply"],[6690,33,5718,1],[6690,40,5718,1,"arguments"],[6690,49,5718,1],[6691,2,5718,1],[6692,2,5718,1],[6692,11,5736,15,"_signInWithCredential"],[6692,32,5736,36,"_signInWithCredential"],[6692,33,5736,36,"_x135"],[6692,38,5736,36],[6692,40,5736,36,"_x136"],[6692,45,5736,36],[6693,4,5736,36],[6693,11,5736,36,"_signInWithCredential2"],[6693,33,5736,36],[6693,34,5736,36,"apply"],[6693,39,5736,36],[6693,46,5736,36,"arguments"],[6693,55,5736,36],[6694,2,5736,36],[6695,2,5748,0],[6696,0,5749,0],[6697,0,5750,0],[6698,0,5751,0],[6699,0,5752,0],[6700,0,5753,0],[6701,0,5754,0],[6702,0,5755,0],[6703,0,5756,0],[6704,0,5757,0],[6705,0,5758,0],[6706,0,5759,0],[6707,0,5760,0],[6708,0,5761,0],[6709,2,5748,0],[6709,11,5748,0,"_signInWithCredential2"],[6709,34,5748,0],[6710,4,5748,0,"_signInWithCredential2"],[6710,26,5748,0],[6710,29,5748,0,"_asyncToGenerator"],[6710,46,5748,0],[6710,47,5736,0],[6710,58,5736,37,"auth"],[6710,62,5736,41],[6710,64,5736,43,"credential"],[6710,74,5736,53],[6710,76,5736,80],[6711,6,5736,80],[6711,10,5736,55,"bypassAuthState"],[6711,25,5736,70],[6711,28,5736,70,"arguments"],[6711,37,5736,70],[6711,38,5736,70,"length"],[6711,44,5736,70],[6711,52,5736,70,"arguments"],[6711,61,5736,70],[6711,69,5736,70,"undefined"],[6711,78,5736,70],[6711,81,5736,70,"arguments"],[6711,90,5736,70],[6711,96,5736,73],[6711,101,5736,78],[6712,6,5737,4],[6712,10,5737,8,"app"],[6712,13,5737,11],[6712,14,5737,12,"_isFirebaseServerApp"],[6712,34,5737,32],[6712,35,5737,33,"auth"],[6712,39,5737,37],[6712,40,5737,38,"app"],[6712,43,5737,41],[6712,44,5737,42],[6712,46,5737,44],[6713,8,5738,8],[6713,15,5738,15,"Promise"],[6713,22,5738,22],[6713,23,5738,23,"reject"],[6713,29,5738,29],[6713,30,5738,30,"_serverAppCurrentUserOperationNotSupportedError"],[6713,77,5738,77],[6713,78,5738,78,"auth"],[6713,82,5738,82],[6713,83,5738,83],[6713,84,5738,84],[6714,6,5739,4],[6715,6,5740,4],[6715,10,5740,10,"operationType"],[6715,23,5740,23],[6715,26,5740,26],[6715,34,5740,34],[6715,35,5740,35],[6716,6,5741,4],[6716,10,5741,10,"response"],[6716,18,5741,18],[6716,27,5741,27,"_processCredentialSavingMfaContextIfNecessary"],[6716,72,5741,72],[6716,73,5741,73,"auth"],[6716,77,5741,77],[6716,79,5741,79,"operationType"],[6716,92,5741,92],[6716,94,5741,94,"credential"],[6716,104,5741,104],[6716,105,5741,105],[6717,6,5742,4],[6717,10,5742,10,"userCredential"],[6717,24,5742,24],[6717,33,5742,33,"UserCredentialImpl"],[6717,51,5742,51],[6717,52,5742,52,"_fromIdTokenResponse"],[6717,72,5742,72],[6717,73,5742,73,"auth"],[6717,77,5742,77],[6717,79,5742,79,"operationType"],[6717,92,5742,92],[6717,94,5742,94,"response"],[6717,102,5742,102],[6717,103,5742,103],[6718,6,5743,4],[6718,10,5743,8],[6718,11,5743,9,"bypassAuthState"],[6718,26,5743,24],[6718,28,5743,26],[6719,8,5744,8],[6719,14,5744,14,"auth"],[6719,18,5744,18],[6719,19,5744,19,"_updateCurrentUser"],[6719,37,5744,37],[6719,38,5744,38,"userCredential"],[6719,52,5744,52],[6719,53,5744,53,"user"],[6719,57,5744,57],[6719,58,5744,58],[6720,6,5745,4],[6721,6,5746,4],[6721,13,5746,11,"userCredential"],[6721,27,5746,25],[6722,4,5747,0],[6722,5,5747,1],[6723,4,5747,1],[6723,11,5747,1,"_signInWithCredential2"],[6723,33,5747,1],[6723,34,5747,1,"apply"],[6723,39,5747,1],[6723,46,5747,1,"arguments"],[6723,55,5747,1],[6724,2,5747,1],[6725,2,5747,1],[6725,11,5762,15,"signInWithCredential"],[6725,31,5762,35,"signInWithCredential"],[6725,32,5762,35,"_x137"],[6725,37,5762,35],[6725,39,5762,35,"_x138"],[6725,44,5762,35],[6726,4,5762,35],[6726,11,5762,35,"_signInWithCredential3"],[6726,33,5762,35],[6726,34,5762,35,"apply"],[6726,39,5762,35],[6726,46,5762,35,"arguments"],[6726,55,5762,35],[6727,2,5762,35],[6728,2,5765,0],[6729,0,5766,0],[6730,0,5767,0],[6731,0,5768,0],[6732,0,5769,0],[6733,0,5770,0],[6734,0,5771,0],[6735,0,5772,0],[6736,0,5773,0],[6737,0,5774,0],[6738,0,5775,0],[6739,2,5765,0],[6739,11,5765,0,"_signInWithCredential3"],[6739,34,5765,0],[6740,4,5765,0,"_signInWithCredential3"],[6740,26,5765,0],[6740,29,5765,0,"_asyncToGenerator"],[6740,46,5765,0],[6740,47,5762,0],[6740,58,5762,36,"auth"],[6740,62,5762,40],[6740,64,5762,42,"credential"],[6740,74,5762,52],[6740,76,5762,54],[6741,6,5763,4],[6741,13,5763,11,"_signInWithCredential"],[6741,34,5763,32],[6741,35,5763,33,"_castAuth"],[6741,44,5763,42],[6741,45,5763,43,"auth"],[6741,49,5763,47],[6741,50,5763,48],[6741,52,5763,50,"credential"],[6741,62,5763,60],[6741,63,5763,61],[6742,4,5764,0],[6742,5,5764,1],[6743,4,5764,1],[6743,11,5764,1,"_signInWithCredential3"],[6743,33,5764,1],[6743,34,5764,1,"apply"],[6743,39,5764,1],[6743,46,5764,1,"arguments"],[6743,55,5764,1],[6744,2,5764,1],[6745,2,5764,1],[6745,11,5776,15,"linkWithCredential"],[6745,29,5776,33,"linkWithCredential"],[6745,30,5776,33,"_x139"],[6745,35,5776,33],[6745,37,5776,33,"_x140"],[6745,42,5776,33],[6746,4,5776,33],[6746,11,5776,33,"_linkWithCredential"],[6746,30,5776,33],[6746,31,5776,33,"apply"],[6746,36,5776,33],[6746,43,5776,33,"arguments"],[6746,52,5776,33],[6747,2,5776,33],[6748,2,5781,0],[6749,0,5782,0],[6750,0,5783,0],[6751,0,5784,0],[6752,0,5785,0],[6753,0,5786,0],[6754,0,5787,0],[6755,0,5788,0],[6756,0,5789,0],[6757,0,5790,0],[6758,0,5791,0],[6759,0,5792,0],[6760,0,5793,0],[6761,0,5794,0],[6762,0,5795,0],[6763,0,5796,0],[6764,2,5781,0],[6764,11,5781,0,"_linkWithCredential"],[6764,31,5781,0],[6765,4,5781,0,"_linkWithCredential"],[6765,23,5781,0],[6765,26,5781,0,"_asyncToGenerator"],[6765,43,5781,0],[6765,44,5776,0],[6765,55,5776,34,"user"],[6765,59,5776,38],[6765,61,5776,40,"credential"],[6765,71,5776,50],[6765,73,5776,52],[6766,6,5777,4],[6766,10,5777,10,"userInternal"],[6766,22,5777,22],[6766,25,5777,25,"util"],[6766,29,5777,29],[6766,30,5777,30,"getModularInstance"],[6766,48,5777,48],[6766,49,5777,49,"user"],[6766,53,5777,53],[6766,54,5777,54],[6767,6,5778,4],[6767,12,5778,10,"_assertLinkedStatus"],[6767,31,5778,29],[6767,32,5778,30],[6767,37,5778,35],[6767,39,5778,37,"userInternal"],[6767,51,5778,49],[6767,53,5778,51,"credential"],[6767,63,5778,61],[6767,64,5778,62,"providerId"],[6767,74,5778,72],[6767,75,5778,73],[6768,6,5779,4],[6768,13,5779,11,"_link"],[6768,18,5779,16],[6768,19,5779,17,"userInternal"],[6768,31,5779,29],[6768,33,5779,31,"credential"],[6768,43,5779,41],[6768,44,5779,42],[6769,4,5780,0],[6769,5,5780,1],[6770,4,5780,1],[6770,11,5780,1,"_linkWithCredential"],[6770,30,5780,1],[6770,31,5780,1,"apply"],[6770,36,5780,1],[6770,43,5780,1,"arguments"],[6770,52,5780,1],[6771,2,5780,1],[6772,2,5780,1],[6772,11,5797,15,"reauthenticateWithCredential"],[6772,39,5797,43,"reauthenticateWithCredential"],[6772,40,5797,43,"_x141"],[6772,45,5797,43],[6772,47,5797,43,"_x142"],[6772,52,5797,43],[6773,4,5797,43],[6773,11,5797,43,"_reauthenticateWithCredential"],[6773,40,5797,43],[6773,41,5797,43,"apply"],[6773,46,5797,43],[6773,53,5797,43,"arguments"],[6773,62,5797,43],[6774,2,5797,43],[6775,2,5801,0],[6776,0,5802,0],[6777,0,5803,0],[6778,0,5804,0],[6779,0,5805,0],[6780,0,5806,0],[6781,0,5807,0],[6782,0,5808,0],[6783,0,5809,0],[6784,0,5810,0],[6785,0,5811,0],[6786,0,5812,0],[6787,0,5813,0],[6788,0,5814,0],[6789,0,5815,0],[6790,0,5816,0],[6791,2,5801,0],[6791,11,5801,0,"_reauthenticateWithCredential"],[6791,41,5801,0],[6792,4,5801,0,"_reauthenticateWithCredential"],[6792,33,5801,0],[6792,36,5801,0,"_asyncToGenerator"],[6792,53,5801,0],[6792,54,5797,0],[6792,65,5797,44,"user"],[6792,69,5797,48],[6792,71,5797,50,"credential"],[6792,81,5797,60],[6792,83,5797,62],[6793,6,5798,4],[6793,13,5798,11,"_reauthenticate"],[6793,28,5798,26],[6793,29,5798,27,"util"],[6793,33,5798,31],[6793,34,5798,32,"getModularInstance"],[6793,52,5798,50],[6793,53,5798,51,"user"],[6793,57,5798,55],[6793,58,5798,56],[6793,60,5798,58,"credential"],[6793,70,5798,68],[6793,71,5798,69],[6794,4,5799,0],[6794,5,5799,1],[6795,4,5799,1],[6795,11,5799,1,"_reauthenticateWithCredential"],[6795,40,5799,1],[6795,41,5799,1,"apply"],[6795,46,5799,1],[6795,53,5799,1,"arguments"],[6795,62,5799,1],[6796,2,5799,1],[6797,2,5799,1],[6797,11,5817,15,"signInWithCustomToken$1"],[6797,34,5817,38,"signInWithCustomToken$1"],[6797,35,5817,38,"_x143"],[6797,40,5817,38],[6797,42,5817,38,"_x144"],[6797,47,5817,38],[6798,4,5817,38],[6798,11,5817,38,"_signInWithCustomToken$"],[6798,34,5817,38],[6798,35,5817,38,"apply"],[6798,40,5817,38],[6798,47,5817,38,"arguments"],[6798,56,5817,38],[6799,2,5817,38],[6800,2,5821,0],[6801,0,5822,0],[6802,0,5823,0],[6803,0,5824,0],[6804,0,5825,0],[6805,0,5826,0],[6806,0,5827,0],[6807,0,5828,0],[6808,0,5829,0],[6809,0,5830,0],[6810,0,5831,0],[6811,0,5832,0],[6812,0,5833,0],[6813,0,5834,0],[6814,0,5835,0],[6815,0,5836,0],[6816,2,5837,0],[6817,0,5838,0],[6818,0,5839,0],[6819,0,5840,0],[6820,0,5841,0],[6821,0,5842,0],[6822,0,5843,0],[6823,0,5844,0],[6824,0,5845,0],[6825,0,5846,0],[6826,0,5847,0],[6827,0,5848,0],[6828,0,5849,0],[6829,0,5850,0],[6830,0,5851,0],[6831,0,5852,0],[6832,0,5853,0],[6833,0,5854,0],[6834,0,5855,0],[6835,2,5837,0],[6835,11,5837,0,"_signInWithCustomToken$"],[6835,35,5837,0],[6836,4,5837,0,"_signInWithCustomToken$"],[6836,27,5837,0],[6836,30,5837,0,"_asyncToGenerator"],[6836,47,5837,0],[6836,48,5817,0],[6836,59,5817,39,"auth"],[6836,63,5817,43],[6836,65,5817,45,"request"],[6836,72,5817,52],[6836,74,5817,54],[6837,6,5818,4],[6837,13,5818,11,"_performSignInRequest"],[6837,34,5818,32],[6837,35,5818,33,"auth"],[6837,39,5818,37],[6837,41,5818,39],[6837,47,5818,45],[6837,48,5818,46],[6837,71,5818,69],[6837,107,5818,105],[6837,108,5818,106],[6837,150,5818,148,"_addTidIfNecessary"],[6837,168,5818,166],[6837,169,5818,167,"auth"],[6837,173,5818,171],[6837,175,5818,173,"request"],[6837,182,5818,180],[6837,183,5818,181],[6837,184,5818,182],[6838,4,5819,0],[6838,5,5819,1],[6839,4,5819,1],[6839,11,5819,1,"_signInWithCustomToken$"],[6839,34,5819,1],[6839,35,5819,1,"apply"],[6839,40,5819,1],[6839,47,5819,1,"arguments"],[6839,56,5819,1],[6840,2,5819,1],[6841,2,5819,1],[6841,11,5856,15,"signInWithCustomToken"],[6841,32,5856,36,"signInWithCustomToken"],[6841,33,5856,36,"_x145"],[6841,38,5856,36],[6841,40,5856,36,"_x146"],[6841,45,5856,36],[6842,4,5856,36],[6842,11,5856,36,"_signInWithCustomToken"],[6842,33,5856,36],[6842,34,5856,36,"apply"],[6842,39,5856,36],[6842,46,5856,36,"arguments"],[6842,55,5856,36],[6843,2,5856,36],[6844,2,5870,0],[6845,0,5871,0],[6846,0,5872,0],[6847,0,5873,0],[6848,0,5874,0],[6849,0,5875,0],[6850,0,5876,0],[6851,0,5877,0],[6852,0,5878,0],[6853,0,5879,0],[6854,0,5880,0],[6855,0,5881,0],[6856,0,5882,0],[6857,0,5883,0],[6858,0,5884,0],[6859,0,5885,0],[6860,2,5870,0],[6860,11,5870,0,"_signInWithCustomToken"],[6860,34,5870,0],[6861,4,5870,0,"_signInWithCustomToken"],[6861,26,5870,0],[6861,29,5870,0,"_asyncToGenerator"],[6861,46,5870,0],[6861,47,5856,0],[6861,58,5856,37,"auth"],[6861,62,5856,41],[6861,64,5856,43,"customToken"],[6861,75,5856,54],[6861,77,5856,56],[6862,6,5857,4],[6862,10,5857,8,"app"],[6862,13,5857,11],[6862,14,5857,12,"_isFirebaseServerApp"],[6862,34,5857,32],[6862,35,5857,33,"auth"],[6862,39,5857,37],[6862,40,5857,38,"app"],[6862,43,5857,41],[6862,44,5857,42],[6862,46,5857,44],[6863,8,5858,8],[6863,15,5858,15,"Promise"],[6863,22,5858,22],[6863,23,5858,23,"reject"],[6863,29,5858,29],[6863,30,5858,30,"_serverAppCurrentUserOperationNotSupportedError"],[6863,77,5858,77],[6863,78,5858,78,"auth"],[6863,82,5858,82],[6863,83,5858,83],[6863,84,5858,84],[6864,6,5859,4],[6865,6,5860,4],[6865,10,5860,10,"authInternal"],[6865,22,5860,22],[6865,25,5860,25,"_castAuth"],[6865,34,5860,34],[6865,35,5860,35,"auth"],[6865,39,5860,39],[6865,40,5860,40],[6866,6,5861,4],[6866,10,5861,10,"response"],[6866,18,5861,18],[6866,27,5861,27,"signInWithCustomToken$1"],[6866,50,5861,50],[6866,51,5861,51,"authInternal"],[6866,63,5861,63],[6866,65,5861,65],[6867,8,5862,8,"token"],[6867,13,5862,13],[6867,15,5862,15,"customToken"],[6867,26,5862,26],[6868,8,5863,8,"returnSecureToken"],[6868,25,5863,25],[6868,27,5863,27],[6869,6,5864,4],[6869,7,5864,5],[6869,8,5864,6],[6870,6,5865,4],[6870,10,5865,10,"cred"],[6870,14,5865,14],[6870,23,5865,23,"UserCredentialImpl"],[6870,41,5865,41],[6870,42,5865,42,"_fromIdTokenResponse"],[6870,62,5865,62],[6870,63,5865,63,"authInternal"],[6870,75,5865,75],[6870,77,5865,77],[6870,85,5865,85],[6870,86,5865,86],[6870,115,5865,115,"response"],[6870,123,5865,123],[6870,124,5865,124],[6871,6,5866,4],[6871,12,5866,10,"authInternal"],[6871,24,5866,22],[6871,25,5866,23,"_updateCurrentUser"],[6871,43,5866,41],[6871,44,5866,42,"cred"],[6871,48,5866,46],[6871,49,5866,47,"user"],[6871,53,5866,51],[6871,54,5866,52],[6872,6,5867,4],[6872,13,5867,11,"cred"],[6872,17,5867,15],[6873,4,5868,0],[6873,5,5868,1],[6874,4,5868,1],[6874,11,5868,1,"_signInWithCustomToken"],[6874,33,5868,1],[6874,34,5868,1,"apply"],[6874,39,5868,1],[6874,46,5868,1,"arguments"],[6874,55,5868,1],[6875,2,5868,1],[6876,2,5868,1],[6876,6,5886,6,"MultiFactorInfoImpl"],[6876,25,5886,25],[6877,4,5887,4],[6877,13,5887,4,"MultiFactorInfoImpl"],[6877,33,5887,16,"factorId"],[6877,41,5887,24],[6877,43,5887,26,"response"],[6877,51,5887,34],[6877,53,5887,36],[6878,6,5887,36,"_classCallCheck"],[6878,21,5887,36],[6878,28,5887,36,"MultiFactorInfoImpl"],[6878,47,5887,36],[6879,6,5888,8],[6879,10,5888,12],[6879,11,5888,13,"factorId"],[6879,19,5888,21],[6879,22,5888,24,"factorId"],[6879,30,5888,32],[6880,6,5889,8],[6880,10,5889,12],[6880,11,5889,13,"uid"],[6880,14,5889,16],[6880,17,5889,19,"response"],[6880,25,5889,27],[6880,26,5889,28,"mfaEnrollmentId"],[6880,41,5889,43],[6881,6,5890,8],[6881,10,5890,12],[6881,11,5890,13,"enrollmentTime"],[6881,25,5890,27],[6881,28,5890,30],[6881,32,5890,34,"Date"],[6881,36,5890,38],[6881,37,5890,39,"response"],[6881,45,5890,47],[6881,46,5890,48,"enrolledAt"],[6881,56,5890,58],[6881,57,5890,59],[6881,58,5890,60,"toUTCString"],[6881,69,5890,71],[6881,70,5890,72],[6881,71,5890,73],[6882,6,5891,8],[6882,10,5891,12],[6882,11,5891,13,"displayName"],[6882,22,5891,24],[6882,25,5891,27,"response"],[6882,33,5891,35],[6882,34,5891,36,"displayName"],[6882,45,5891,47],[6883,4,5892,4],[6884,4,5892,5],[6884,11,5892,5,"_createClass"],[6884,23,5892,5],[6884,24,5892,5,"MultiFactorInfoImpl"],[6884,43,5892,5],[6885,6,5892,5,"key"],[6885,9,5892,5],[6886,6,5892,5,"value"],[6886,11,5892,5],[6886,13,5893,4],[6886,22,5893,11,"_fromServerResponse"],[6886,41,5893,30,"_fromServerResponse"],[6886,42,5893,31,"auth"],[6886,46,5893,35],[6886,48,5893,37,"enrollment"],[6886,58,5893,47],[6886,60,5893,49],[6887,8,5894,8],[6887,12,5894,12],[6887,23,5894,23],[6887,27,5894,27,"enrollment"],[6887,37,5894,37],[6887,39,5894,39],[6888,10,5895,12],[6888,17,5895,19,"PhoneMultiFactorInfoImpl"],[6888,41,5895,43],[6888,42,5895,44,"_fromServerResponse"],[6888,61,5895,63],[6888,62,5895,64,"auth"],[6888,66,5895,68],[6888,68,5895,70,"enrollment"],[6888,78,5895,80],[6888,79,5895,81],[6889,8,5896,8],[6889,9,5896,9],[6889,15,5897,13],[6889,19,5897,17],[6889,29,5897,27],[6889,33,5897,31,"enrollment"],[6889,43,5897,41],[6889,45,5897,43],[6890,10,5898,12],[6890,17,5898,19,"TotpMultiFactorInfoImpl"],[6890,40,5898,42],[6890,41,5898,43,"_fromServerResponse"],[6890,60,5898,62],[6890,61,5898,63,"auth"],[6890,65,5898,67],[6890,67,5898,69,"enrollment"],[6890,77,5898,79],[6890,78,5898,80],[6891,8,5899,8],[6892,8,5900,8],[6892,15,5900,15,"_fail"],[6892,20,5900,20],[6892,21,5900,21,"auth"],[6892,25,5900,25],[6892,27,5900,27],[6892,43,5900,43],[6892,44,5900,44],[6892,78,5900,78],[6892,79,5900,79],[6893,6,5901,4],[6894,4,5901,5],[6895,2,5901,5],[6896,2,5901,5],[6896,6,5903,6,"PhoneMultiFactorInfoImpl"],[6896,30,5903,30],[6896,56,5903,30,"_MultiFactorInfoImpl"],[6896,76,5903,30],[6897,4,5904,4],[6897,13,5904,4,"PhoneMultiFactorInfoImpl"],[6897,38,5904,16,"response"],[6897,46,5904,24],[6897,48,5904,26],[6898,6,5904,26],[6898,10,5904,26,"_this11"],[6898,17,5904,26],[6899,6,5904,26,"_classCallCheck"],[6899,21,5904,26],[6899,28,5904,26,"PhoneMultiFactorInfoImpl"],[6899,52,5904,26],[6900,6,5905,8,"_this11"],[6900,13,5905,8],[6900,16,5905,8,"_callSuper"],[6900,26,5905,8],[6900,33,5905,8,"PhoneMultiFactorInfoImpl"],[6900,57,5905,8],[6900,60,5905,14],[6900,67,5905,21],[6900,68,5905,22],[6900,90,5905,44,"response"],[6900,98,5905,52],[6901,6,5906,8,"_this11"],[6901,13,5906,8],[6901,14,5906,13,"phoneNumber"],[6901,25,5906,24],[6901,28,5906,27,"response"],[6901,36,5906,35],[6901,37,5906,36,"phoneInfo"],[6901,46,5906,45],[6902,6,5906,46],[6902,13,5906,46,"_this11"],[6902,20,5906,46],[6903,4,5907,4],[6904,4,5907,5,"_inherits"],[6904,13,5907,5],[6904,14,5907,5,"PhoneMultiFactorInfoImpl"],[6904,38,5907,5],[6904,40,5907,5,"_MultiFactorInfoImpl"],[6904,60,5907,5],[6905,4,5907,5],[6905,11,5907,5,"_createClass"],[6905,23,5907,5],[6905,24,5907,5,"PhoneMultiFactorInfoImpl"],[6905,48,5907,5],[6906,6,5907,5,"key"],[6906,9,5907,5],[6907,6,5907,5,"value"],[6907,11,5907,5],[6907,13,5908,4],[6907,22,5908,11,"_fromServerResponse"],[6907,41,5908,30,"_fromServerResponse"],[6907,42,5908,31,"_auth"],[6907,47,5908,36],[6907,49,5908,38,"enrollment"],[6907,59,5908,48],[6907,61,5908,50],[6908,8,5909,8],[6908,15,5909,15],[6908,19,5909,19,"PhoneMultiFactorInfoImpl"],[6908,43,5909,43],[6908,44,5909,44,"enrollment"],[6908,54,5909,54],[6908,55,5909,55],[6909,6,5910,4],[6910,4,5910,5],[6911,2,5910,5],[6911,4,5903,39,"MultiFactorInfoImpl"],[6911,23,5903,58],[6912,2,5903,58],[6912,6,5912,6,"TotpMultiFactorInfoImpl"],[6912,29,5912,29],[6912,55,5912,29,"_MultiFactorInfoImpl2"],[6912,76,5912,29],[6913,4,5913,4],[6913,13,5913,4,"TotpMultiFactorInfoImpl"],[6913,37,5913,16,"response"],[6913,45,5913,24],[6913,47,5913,26],[6914,6,5913,26,"_classCallCheck"],[6914,21,5913,26],[6914,28,5913,26,"TotpMultiFactorInfoImpl"],[6914,51,5913,26],[6915,6,5913,26],[6915,13,5913,26,"_callSuper"],[6915,23,5913,26],[6915,30,5913,26,"TotpMultiFactorInfoImpl"],[6915,53,5913,26],[6915,56,5914,14],[6915,62,5914,20],[6915,63,5914,21],[6915,84,5914,42,"response"],[6915,92,5914,50],[6916,4,5915,4],[6917,4,5915,5,"_inherits"],[6917,13,5915,5],[6917,14,5915,5,"TotpMultiFactorInfoImpl"],[6917,37,5915,5],[6917,39,5915,5,"_MultiFactorInfoImpl2"],[6917,60,5915,5],[6918,4,5915,5],[6918,11,5915,5,"_createClass"],[6918,23,5915,5],[6918,24,5915,5,"TotpMultiFactorInfoImpl"],[6918,47,5915,5],[6919,6,5915,5,"key"],[6919,9,5915,5],[6920,6,5915,5,"value"],[6920,11,5915,5],[6920,13,5916,4],[6920,22,5916,11,"_fromServerResponse"],[6920,41,5916,30,"_fromServerResponse"],[6920,42,5916,31,"_auth"],[6920,47,5916,36],[6920,49,5916,38,"enrollment"],[6920,59,5916,48],[6920,61,5916,50],[6921,8,5917,8],[6921,15,5917,15],[6921,19,5917,19,"TotpMultiFactorInfoImpl"],[6921,42,5917,42],[6921,43,5917,43,"enrollment"],[6921,53,5917,53],[6921,54,5917,54],[6922,6,5918,4],[6923,4,5918,5],[6924,2,5918,5],[6924,4,5912,38,"MultiFactorInfoImpl"],[6924,23,5912,57],[6925,2,5921,0],[6926,0,5922,0],[6927,0,5923,0],[6928,0,5924,0],[6929,0,5925,0],[6930,0,5926,0],[6931,0,5927,0],[6932,0,5928,0],[6933,0,5929,0],[6934,0,5930,0],[6935,0,5931,0],[6936,0,5932,0],[6937,0,5933,0],[6938,0,5934,0],[6939,0,5935,0],[6940,0,5936,0],[6941,2,5937,0],[6941,11,5937,9,"_setActionCodeSettingsOnRequest"],[6941,42,5937,40,"_setActionCodeSettingsOnRequest"],[6941,43,5937,41,"auth"],[6941,47,5937,45],[6941,49,5937,47,"request"],[6941,56,5937,54],[6941,58,5937,56,"actionCodeSettings"],[6941,76,5937,74],[6941,78,5937,76],[6942,4,5938,4,"_assert"],[6942,11,5938,11],[6942,12,5938,12,"actionCodeSettings"],[6942,30,5938,30],[6942,31,5938,31,"url"],[6942,34,5938,34],[6942,36,5938,36,"length"],[6942,42,5938,42],[6942,45,5938,45],[6942,46,5938,46],[6942,48,5938,48,"auth"],[6942,52,5938,52],[6942,54,5938,54],[6942,76,5938,76],[6942,77,5938,77],[6942,117,5938,117],[6942,118,5938,118],[6943,4,5939,4,"_assert"],[6943,11,5939,11],[6943,12,5939,12],[6943,19,5939,19,"actionCodeSettings"],[6943,37,5939,37],[6943,38,5939,38,"dynamicLinkDomain"],[6943,55,5939,55],[6943,60,5939,60],[6943,71,5939,71],[6943,75,5940,8,"actionCodeSettings"],[6943,93,5940,26],[6943,94,5940,27,"dynamicLinkDomain"],[6943,111,5940,44],[6943,112,5940,45,"length"],[6943,118,5940,51],[6943,121,5940,54],[6943,122,5940,55],[6943,124,5940,57,"auth"],[6943,128,5940,61],[6943,130,5940,63],[6943,159,5940,92],[6943,160,5940,93],[6943,207,5940,140],[6943,208,5940,141],[6944,4,5941,4,"_assert"],[6944,11,5941,11],[6944,12,5941,12],[6944,19,5941,19,"actionCodeSettings"],[6944,37,5941,37],[6944,38,5941,38,"linkDomain"],[6944,48,5941,48],[6944,53,5941,53],[6944,64,5941,64],[6944,68,5942,8,"actionCodeSettings"],[6944,86,5942,26],[6944,87,5942,27,"linkDomain"],[6944,97,5942,37],[6944,98,5942,38,"length"],[6944,104,5942,44],[6944,107,5942,47],[6944,108,5942,48],[6944,110,5942,50,"auth"],[6944,114,5942,54],[6944,116,5942,56],[6944,145,5942,85],[6944,146,5942,86],[6944,193,5942,133],[6944,194,5942,134],[6945,4,5943,4,"request"],[6945,11,5943,11],[6945,12,5943,12,"continueUrl"],[6945,23,5943,23],[6945,26,5943,26,"actionCodeSettings"],[6945,44,5943,44],[6945,45,5943,45,"url"],[6945,48,5943,48],[6946,4,5944,4,"request"],[6946,11,5944,11],[6946,12,5944,12,"dynamicLinkDomain"],[6946,29,5944,29],[6946,32,5944,32,"actionCodeSettings"],[6946,50,5944,50],[6946,51,5944,51,"dynamicLinkDomain"],[6946,68,5944,68],[6947,4,5945,4,"request"],[6947,11,5945,11],[6947,12,5945,12,"linkDomain"],[6947,22,5945,22],[6947,25,5945,25,"actionCodeSettings"],[6947,43,5945,43],[6947,44,5945,44,"linkDomain"],[6947,54,5945,54],[6948,4,5946,4,"request"],[6948,11,5946,11],[6948,12,5946,12,"canHandleCodeInApp"],[6948,30,5946,30],[6948,33,5946,33,"actionCodeSettings"],[6948,51,5946,51],[6948,52,5946,52,"handleCodeInApp"],[6948,67,5946,67],[6949,4,5947,4],[6949,8,5947,8,"actionCodeSettings"],[6949,26,5947,26],[6949,27,5947,27,"iOS"],[6949,30,5947,30],[6949,32,5947,32],[6950,6,5948,8,"_assert"],[6950,13,5948,15],[6950,14,5948,16,"actionCodeSettings"],[6950,32,5948,34],[6950,33,5948,35,"iOS"],[6950,36,5948,38],[6950,37,5948,39,"bundleId"],[6950,45,5948,47],[6950,46,5948,48,"length"],[6950,52,5948,54],[6950,55,5948,57],[6950,56,5948,58],[6950,58,5948,60,"auth"],[6950,62,5948,64],[6950,64,5948,66],[6950,87,5948,89],[6950,88,5948,90],[6950,129,5948,131],[6950,130,5948,132],[6951,6,5949,8,"request"],[6951,13,5949,15],[6951,14,5949,16,"iOSBundleId"],[6951,25,5949,27],[6951,28,5949,30,"actionCodeSettings"],[6951,46,5949,48],[6951,47,5949,49,"iOS"],[6951,50,5949,52],[6951,51,5949,53,"bundleId"],[6951,59,5949,61],[6952,4,5950,4],[6953,4,5951,4],[6953,8,5951,8,"actionCodeSettings"],[6953,26,5951,26],[6953,27,5951,27,"android"],[6953,34,5951,34],[6953,36,5951,36],[6954,6,5952,8,"_assert"],[6954,13,5952,15],[6954,14,5952,16,"actionCodeSettings"],[6954,32,5952,34],[6954,33,5952,35,"android"],[6954,40,5952,42],[6954,41,5952,43,"packageName"],[6954,52,5952,54],[6954,53,5952,55,"length"],[6954,59,5952,61],[6954,62,5952,64],[6954,63,5952,65],[6954,65,5952,67,"auth"],[6954,69,5952,71],[6954,71,5952,73],[6954,97,5952,99],[6954,98,5952,100],[6954,146,5952,148],[6954,147,5952,149],[6955,6,5953,8,"request"],[6955,13,5953,15],[6955,14,5953,16,"androidInstallApp"],[6955,31,5953,33],[6955,34,5953,36,"actionCodeSettings"],[6955,52,5953,54],[6955,53,5953,55,"android"],[6955,60,5953,62],[6955,61,5953,63,"installApp"],[6955,71,5953,73],[6956,6,5954,8,"request"],[6956,13,5954,15],[6956,14,5954,16,"androidMinimumVersionCode"],[6956,39,5954,41],[6956,42,5955,12,"actionCodeSettings"],[6956,60,5955,30],[6956,61,5955,31,"android"],[6956,68,5955,38],[6956,69,5955,39,"minimumVersion"],[6956,83,5955,53],[6957,6,5956,8,"request"],[6957,13,5956,15],[6957,14,5956,16,"androidPackageName"],[6957,32,5956,34],[6957,35,5956,37,"actionCodeSettings"],[6957,53,5956,55],[6957,54,5956,56,"android"],[6957,61,5956,63],[6957,62,5956,64,"packageName"],[6957,73,5956,75],[6958,4,5957,4],[6959,2,5958,0],[6961,2,5960,0],[6962,0,5961,0],[6963,0,5962,0],[6964,0,5963,0],[6965,0,5964,0],[6966,0,5965,0],[6967,0,5966,0],[6968,0,5967,0],[6969,0,5968,0],[6970,0,5969,0],[6971,0,5970,0],[6972,0,5971,0],[6973,0,5972,0],[6974,0,5973,0],[6975,0,5974,0],[6976,0,5975,0],[6977,2,5976,0],[6978,0,5977,0],[6979,0,5978,0],[6980,0,5979,0],[6981,0,5980,0],[6982,0,5981,0],[6983,0,5982,0],[6984,0,5983,0],[6985,0,5984,0],[6986,0,5985,0],[6987,0,5986,0],[6988,0,5987,0],[6989,0,5988,0],[6990,2,5976,0],[6990,11,5989,15,"recachePasswordPolicy"],[6990,32,5989,36,"recachePasswordPolicy"],[6990,33,5989,36,"_x147"],[6990,38,5989,36],[6991,4,5989,36],[6991,11,5989,36,"_recachePasswordPolicy"],[6991,33,5989,36],[6991,34,5989,36,"apply"],[6991,39,5989,36],[6991,46,5989,36,"arguments"],[6991,55,5989,36],[6992,2,5989,36],[6993,2,5995,0],[6994,0,5996,0],[6995,0,5997,0],[6996,0,5998,0],[6997,0,5999,0],[6998,0,6000,0],[6999,0,6001,0],[7000,0,6002,0],[7001,0,6003,0],[7002,0,6004,0],[7003,0,6005,0],[7004,0,6006,0],[7005,0,6007,0],[7006,0,6008,0],[7007,0,6009,0],[7008,0,6010,0],[7009,0,6011,0],[7010,0,6012,0],[7011,0,6013,0],[7012,0,6014,0],[7013,0,6015,0],[7014,0,6016,0],[7015,0,6017,0],[7016,0,6018,0],[7017,0,6019,0],[7018,0,6020,0],[7019,0,6021,0],[7020,0,6022,0],[7021,0,6023,0],[7022,0,6024,0],[7023,0,6025,0],[7024,0,6026,0],[7025,0,6027,0],[7026,0,6028,0],[7027,0,6029,0],[7028,2,5995,0],[7028,11,5995,0,"_recachePasswordPolicy"],[7028,34,5995,0],[7029,4,5995,0,"_recachePasswordPolicy"],[7029,26,5995,0],[7029,29,5995,0,"_asyncToGenerator"],[7029,46,5995,0],[7029,47,5989,0],[7029,58,5989,37,"auth"],[7029,62,5989,41],[7029,64,5989,43],[7030,6,5990,4],[7030,10,5990,10,"authInternal"],[7030,22,5990,22],[7030,25,5990,25,"_castAuth"],[7030,34,5990,34],[7030,35,5990,35,"auth"],[7030,39,5990,39],[7030,40,5990,40],[7031,6,5991,4],[7031,10,5991,8,"authInternal"],[7031,22,5991,20],[7031,23,5991,21,"_getPasswordPolicyInternal"],[7031,49,5991,47],[7031,50,5991,48],[7031,51,5991,49],[7031,53,5991,51],[7032,8,5992,8],[7032,14,5992,14,"authInternal"],[7032,26,5992,26],[7032,27,5992,27,"_updatePasswordPolicy"],[7032,48,5992,48],[7032,49,5992,49],[7032,50,5992,50],[7033,6,5993,4],[7034,4,5994,0],[7034,5,5994,1],[7035,4,5994,1],[7035,11,5994,1,"_recachePasswordPolicy"],[7035,33,5994,1],[7035,34,5994,1,"apply"],[7035,39,5994,1],[7035,46,5994,1,"arguments"],[7035,55,5994,1],[7036,2,5994,1],[7037,2,5994,1],[7037,11,6030,15,"sendPasswordResetEmail"],[7037,33,6030,37,"sendPasswordResetEmail"],[7037,34,6030,37,"_x148"],[7037,39,6030,37],[7037,41,6030,37,"_x149"],[7037,46,6030,37],[7037,48,6030,37,"_x150"],[7037,53,6030,37],[7038,4,6030,37],[7038,11,6030,37,"_sendPasswordResetEmail"],[7038,34,6030,37],[7038,35,6030,37,"apply"],[7038,40,6030,37],[7038,47,6030,37,"arguments"],[7038,56,6030,37],[7039,2,6030,37],[7040,2,6042,0],[7041,0,6043,0],[7042,0,6044,0],[7043,0,6045,0],[7044,0,6046,0],[7045,0,6047,0],[7046,0,6048,0],[7047,0,6049,0],[7048,0,6050,0],[7049,2,6042,0],[7049,11,6042,0,"_sendPasswordResetEmail"],[7049,35,6042,0],[7050,4,6042,0,"_sendPasswordResetEmail"],[7050,27,6042,0],[7050,30,6042,0,"_asyncToGenerator"],[7050,47,6042,0],[7050,48,6030,0],[7050,59,6030,38,"auth"],[7050,63,6030,42],[7050,65,6030,44,"email"],[7050,70,6030,49],[7050,72,6030,51,"actionCodeSettings"],[7050,90,6030,69],[7050,92,6030,71],[7051,6,6031,4],[7051,10,6031,10,"authInternal"],[7051,22,6031,22],[7051,25,6031,25,"_castAuth"],[7051,34,6031,34],[7051,35,6031,35,"auth"],[7051,39,6031,39],[7051,40,6031,40],[7052,6,6032,4],[7052,10,6032,10,"request"],[7052,17,6032,17],[7052,20,6032,20],[7053,8,6033,8,"requestType"],[7053,19,6033,19],[7053,21,6033,21],[7053,37,6033,37],[7053,38,6033,38],[7054,8,6034,8,"email"],[7054,13,6034,13],[7055,8,6035,8,"clientType"],[7055,18,6035,18],[7055,20,6035,20],[7055,37,6035,37],[7055,38,6035,38],[7056,6,6036,4],[7056,7,6036,5],[7057,6,6037,4],[7057,10,6037,8,"actionCodeSettings"],[7057,28,6037,26],[7057,30,6037,28],[7058,8,6038,8,"_setActionCodeSettingsOnRequest"],[7058,39,6038,39],[7058,40,6038,40,"authInternal"],[7058,52,6038,52],[7058,54,6038,54,"request"],[7058,61,6038,61],[7058,63,6038,63,"actionCodeSettings"],[7058,81,6038,81],[7058,82,6038,82],[7059,6,6039,4],[7060,6,6040,4],[7060,12,6040,10,"handleRecaptchaFlow"],[7060,31,6040,29],[7060,32,6040,30,"authInternal"],[7060,44,6040,42],[7060,46,6040,44,"request"],[7060,53,6040,51],[7060,55,6040,53],[7060,67,6040,65],[7060,68,6040,66],[7060,108,6040,106,"sendPasswordResetEmail$1"],[7060,132,6040,130],[7060,134,6040,132],[7060,159,6040,157],[7060,160,6040,158],[7060,211,6040,209],[7060,212,6040,210],[7061,4,6041,0],[7061,5,6041,1],[7062,4,6041,1],[7062,11,6041,1,"_sendPasswordResetEmail"],[7062,34,6041,1],[7062,35,6041,1,"apply"],[7062,40,6041,1],[7062,47,6041,1,"arguments"],[7062,56,6041,1],[7063,2,6041,1],[7064,2,6041,1],[7064,11,6051,15,"confirmPasswordReset"],[7064,31,6051,35,"confirmPasswordReset"],[7064,32,6051,35,"_x151"],[7064,37,6051,35],[7064,39,6051,35,"_x152"],[7064,44,6051,35],[7064,46,6051,35,"_x153"],[7064,51,6051,35],[7065,4,6051,35],[7065,11,6051,35,"_confirmPasswordReset"],[7065,32,6051,35],[7065,33,6051,35,"apply"],[7065,38,6051,35],[7065,45,6051,35,"arguments"],[7065,54,6051,35],[7066,2,6051,35],[7067,2,6065,0],[7068,0,6066,0],[7069,0,6067,0],[7070,0,6068,0],[7071,0,6069,0],[7072,0,6070,0],[7073,0,6071,0],[7074,0,6072,0],[7075,2,6065,0],[7075,11,6065,0,"_confirmPasswordReset"],[7075,33,6065,0],[7076,4,6065,0,"_confirmPasswordReset"],[7076,25,6065,0],[7076,28,6065,0,"_asyncToGenerator"],[7076,45,6065,0],[7076,46,6051,0],[7076,57,6051,36,"auth"],[7076,61,6051,40],[7076,63,6051,42,"oobCode"],[7076,70,6051,49],[7076,72,6051,51,"newPassword"],[7076,83,6051,62],[7076,85,6051,64],[7077,6,6052,4],[7077,12,6052,10,"resetPassword"],[7077,25,6052,23],[7077,26,6052,24,"util"],[7077,30,6052,28],[7077,31,6052,29,"getModularInstance"],[7077,49,6052,47],[7077,50,6052,48,"auth"],[7077,54,6052,52],[7077,55,6052,53],[7077,57,6052,55],[7078,8,6053,8,"oobCode"],[7078,15,6053,15],[7079,8,6054,8,"newPassword"],[7080,6,6055,4],[7080,7,6055,5],[7080,8,6055,6],[7080,9,6056,9,"catch"],[7080,14,6056,14],[7081,8,6056,14],[7081,12,6056,14,"_ref28"],[7081,18,6056,14],[7081,21,6056,14,"_asyncToGenerator"],[7081,38,6056,14],[7081,39,6056,15],[7081,50,6056,22,"error"],[7081,55,6056,27],[7081,57,6056,32],[7082,10,6057,8],[7082,14,6057,12,"error"],[7082,19,6057,17],[7082,20,6057,18,"code"],[7082,24,6057,22],[7082,29,6058,12],[7082,37,6058,20],[7082,74,6058,57],[7082,75,6058,58],[7082,132,6058,115],[7082,134,6058,117],[7083,12,6059,12],[7083,17,6059,17,"recachePasswordPolicy"],[7083,38,6059,38],[7083,39,6059,39,"auth"],[7083,43,6059,43],[7083,44,6059,44],[7084,10,6060,8],[7085,10,6061,8],[7085,16,6061,14,"error"],[7085,21,6061,19],[7086,8,6062,4],[7086,9,6062,5],[7087,8,6062,5],[7087,25,6062,5,"_x221"],[7087,30,6062,5],[7088,10,6062,5],[7088,17,6062,5,"_ref28"],[7088,23,6062,5],[7088,24,6062,5,"apply"],[7088,29,6062,5],[7088,36,6062,5,"arguments"],[7088,45,6062,5],[7089,8,6062,5],[7090,6,6062,5],[7090,10,6062,6],[7091,6,6063,4],[7092,4,6064,0],[7092,5,6064,1],[7093,4,6064,1],[7093,11,6064,1,"_confirmPasswordReset"],[7093,32,6064,1],[7093,33,6064,1,"apply"],[7093,38,6064,1],[7093,45,6064,1,"arguments"],[7093,54,6064,1],[7094,2,6064,1],[7095,2,6064,1],[7095,11,6073,15,"applyActionCode"],[7095,26,6073,30,"applyActionCode"],[7095,27,6073,30,"_x154"],[7095,32,6073,30],[7095,34,6073,30,"_x155"],[7095,39,6073,30],[7096,4,6073,30],[7096,11,6073,30,"_applyActionCode"],[7096,27,6073,30],[7096,28,6073,30,"apply"],[7096,33,6073,30],[7096,40,6073,30,"arguments"],[7096,49,6073,30],[7097,2,6073,30],[7098,2,6076,0],[7099,0,6077,0],[7100,0,6078,0],[7101,0,6079,0],[7102,0,6080,0],[7103,0,6081,0],[7104,0,6082,0],[7105,0,6083,0],[7106,0,6084,0],[7107,0,6085,0],[7108,2,6076,0],[7108,11,6076,0,"_applyActionCode"],[7108,28,6076,0],[7109,4,6076,0,"_applyActionCode"],[7109,20,6076,0],[7109,23,6076,0,"_asyncToGenerator"],[7109,40,6076,0],[7109,41,6073,0],[7109,52,6073,31,"auth"],[7109,56,6073,35],[7109,58,6073,37,"oobCode"],[7109,65,6073,44],[7109,67,6073,46],[7110,6,6074,4],[7110,12,6074,10,"applyActionCode$1"],[7110,29,6074,27],[7110,30,6074,28,"util"],[7110,34,6074,32],[7110,35,6074,33,"getModularInstance"],[7110,53,6074,51],[7110,54,6074,52,"auth"],[7110,58,6074,56],[7110,59,6074,57],[7110,61,6074,59],[7111,8,6074,61,"oobCode"],[7112,6,6074,69],[7112,7,6074,70],[7112,8,6074,71],[7113,4,6075,0],[7113,5,6075,1],[7114,4,6075,1],[7114,11,6075,1,"_applyActionCode"],[7114,27,6075,1],[7114,28,6075,1,"apply"],[7114,33,6075,1],[7114,40,6075,1,"arguments"],[7114,49,6075,1],[7115,2,6075,1],[7116,2,6075,1],[7116,11,6086,15,"checkActionCode"],[7116,26,6086,30,"checkActionCode"],[7116,27,6086,30,"_x156"],[7116,32,6086,30],[7116,34,6086,30,"_x157"],[7116,39,6086,30],[7117,4,6086,30],[7117,11,6086,30,"_checkActionCode"],[7117,27,6086,30],[7117,28,6086,30,"apply"],[7117,33,6086,30],[7117,40,6086,30,"arguments"],[7117,49,6086,30],[7118,2,6086,30],[7119,2,6127,0],[7120,0,6128,0],[7121,0,6129,0],[7122,0,6130,0],[7123,0,6131,0],[7124,0,6132,0],[7125,0,6133,0],[7126,0,6134,0],[7127,0,6135,0],[7128,0,6136,0],[7129,2,6127,0],[7129,11,6127,0,"_checkActionCode"],[7129,28,6127,0],[7130,4,6127,0,"_checkActionCode"],[7130,20,6127,0],[7130,23,6127,0,"_asyncToGenerator"],[7130,40,6127,0],[7130,41,6086,0],[7130,52,6086,31,"auth"],[7130,56,6086,35],[7130,58,6086,37,"oobCode"],[7130,65,6086,44],[7130,67,6086,46],[7131,6,6087,4],[7131,10,6087,10,"authModular"],[7131,21,6087,21],[7131,24,6087,24,"util"],[7131,28,6087,28],[7131,29,6087,29,"getModularInstance"],[7131,47,6087,47],[7131,48,6087,48,"auth"],[7131,52,6087,52],[7131,53,6087,53],[7132,6,6088,4],[7132,10,6088,10,"response"],[7132,18,6088,18],[7132,27,6088,27,"resetPassword"],[7132,40,6088,40],[7132,41,6088,41,"authModular"],[7132,52,6088,52],[7132,54,6088,54],[7133,8,6088,56,"oobCode"],[7134,6,6088,64],[7134,7,6088,65],[7134,8,6088,66],[7135,6,6089,4],[7136,6,6090,4],[7137,6,6091,4],[7138,6,6092,4],[7139,6,6093,4],[7140,6,6094,4],[7141,6,6095,4],[7141,10,6095,10,"operation"],[7141,19,6095,19],[7141,22,6095,22,"response"],[7141,30,6095,30],[7141,31,6095,31,"requestType"],[7141,42,6095,42],[7142,6,6096,4,"_assert"],[7142,13,6096,11],[7142,14,6096,12,"operation"],[7142,23,6096,21],[7142,25,6096,23,"authModular"],[7142,36,6096,34],[7142,38,6096,36],[7142,54,6096,52],[7142,55,6096,53],[7142,89,6096,87],[7142,90,6096,88],[7143,6,6097,4],[7143,14,6097,12,"operation"],[7143,23,6097,21],[7144,8,6098,8],[7144,13,6098,13],[7144,27,6098,27],[7144,28,6098,28],[7145,10,6099,12],[7146,8,6100,8],[7146,13,6100,13],[7146,38,6100,38],[7146,39,6100,39],[7147,10,6101,12,"_assert"],[7147,17,6101,19],[7147,18,6101,20,"response"],[7147,26,6101,28],[7147,27,6101,29,"newEmail"],[7147,35,6101,37],[7147,37,6101,39,"authModular"],[7147,48,6101,50],[7147,50,6101,52],[7147,66,6101,68],[7147,67,6101,69],[7147,101,6101,103],[7147,102,6101,104],[7148,10,6102,12],[7149,8,6103,8],[7149,13,6103,13],[7149,44,6103,44],[7149,45,6103,45],[7150,10,6104,12,"_assert"],[7150,17,6104,19],[7150,18,6104,20,"response"],[7150,26,6104,28],[7150,27,6104,29,"mfaInfo"],[7150,34,6104,36],[7150,36,6104,38,"authModular"],[7150,47,6104,49],[7150,49,6104,51],[7150,65,6104,67],[7150,66,6104,68],[7150,100,6104,102],[7150,101,6104,103],[7151,8,6105,8],[7152,8,6106,8],[7153,10,6107,12,"_assert"],[7153,17,6107,19],[7153,18,6107,20,"response"],[7153,26,6107,28],[7153,27,6107,29,"email"],[7153,32,6107,34],[7153,34,6107,36,"authModular"],[7153,45,6107,47],[7153,47,6107,49],[7153,63,6107,65],[7153,64,6107,66],[7153,98,6107,100],[7153,99,6107,101],[7154,6,6108,4],[7155,6,6109,4],[7156,6,6110,4],[7156,10,6110,8,"multiFactorInfo"],[7156,25,6110,23],[7156,28,6110,26],[7156,32,6110,30],[7157,6,6111,4],[7157,10,6111,8,"response"],[7157,18,6111,16],[7157,19,6111,17,"mfaInfo"],[7157,26,6111,24],[7157,28,6111,26],[7158,8,6112,8,"multiFactorInfo"],[7158,23,6112,23],[7158,26,6112,26,"MultiFactorInfoImpl"],[7158,45,6112,45],[7158,46,6112,46,"_fromServerResponse"],[7158,65,6112,65],[7158,66,6112,66,"_castAuth"],[7158,75,6112,75],[7158,76,6112,76,"authModular"],[7158,87,6112,87],[7158,88,6112,88],[7158,90,6112,90,"response"],[7158,98,6112,98],[7158,99,6112,99,"mfaInfo"],[7158,106,6112,106],[7158,107,6112,107],[7159,6,6113,4],[7160,6,6114,4],[7160,13,6114,11],[7161,8,6115,8,"data"],[7161,12,6115,12],[7161,14,6115,14],[7162,10,6116,12,"email"],[7162,15,6116,17],[7162,17,6116,19],[7162,18,6116,20,"response"],[7162,26,6116,28],[7162,27,6116,29,"requestType"],[7162,38,6116,40],[7162,43,6116,45],[7162,68,6116,70],[7162,69,6116,71],[7162,121,6117,18,"response"],[7162,129,6117,26],[7162,130,6117,27,"newEmail"],[7162,138,6117,35],[7162,141,6118,18,"response"],[7162,149,6118,26],[7162,150,6118,27,"email"],[7162,155,6118,32],[7162,160,6118,37],[7162,164,6118,41],[7163,10,6119,12,"previousEmail"],[7163,23,6119,25],[7163,25,6119,27],[7163,26,6119,28,"response"],[7163,34,6119,36],[7163,35,6119,37,"requestType"],[7163,46,6119,48],[7163,51,6119,53],[7163,76,6119,78],[7163,77,6119,79],[7163,129,6120,18,"response"],[7163,137,6120,26],[7163,138,6120,27,"email"],[7163,143,6120,32],[7163,146,6121,18,"response"],[7163,154,6121,26],[7163,155,6121,27,"newEmail"],[7163,163,6121,35],[7163,168,6121,40],[7163,172,6121,44],[7164,10,6122,12,"multiFactorInfo"],[7165,8,6123,8],[7165,9,6123,9],[7166,8,6124,8,"operation"],[7167,6,6125,4],[7167,7,6125,5],[7168,4,6126,0],[7168,5,6126,1],[7169,4,6126,1],[7169,11,6126,1,"_checkActionCode"],[7169,27,6126,1],[7169,28,6126,1,"apply"],[7169,33,6126,1],[7169,40,6126,1,"arguments"],[7169,49,6126,1],[7170,2,6126,1],[7171,2,6126,1],[7171,11,6137,15,"verifyPasswordResetCode"],[7171,34,6137,38,"verifyPasswordResetCode"],[7171,35,6137,38,"_x158"],[7171,40,6137,38],[7171,42,6137,38,"_x159"],[7171,47,6137,38],[7172,4,6137,38],[7172,11,6137,38,"_verifyPasswordResetCode"],[7172,35,6137,38],[7172,36,6137,38,"apply"],[7172,41,6137,38],[7172,48,6137,38,"arguments"],[7172,57,6137,38],[7173,2,6137,38],[7174,2,6142,0],[7175,0,6143,0],[7176,0,6144,0],[7177,0,6145,0],[7178,0,6146,0],[7179,0,6147,0],[7180,0,6148,0],[7181,0,6149,0],[7182,0,6150,0],[7183,0,6151,0],[7184,0,6152,0],[7185,0,6153,0],[7186,0,6154,0],[7187,0,6155,0],[7188,0,6156,0],[7189,0,6157,0],[7190,0,6158,0],[7191,0,6159,0],[7192,0,6160,0],[7193,0,6161,0],[7194,2,6142,0],[7194,11,6142,0,"_verifyPasswordResetCode"],[7194,36,6142,0],[7195,4,6142,0,"_verifyPasswordResetCode"],[7195,28,6142,0],[7195,31,6142,0,"_asyncToGenerator"],[7195,48,6142,0],[7195,49,6137,0],[7195,60,6137,39,"auth"],[7195,64,6137,43],[7195,66,6137,45,"code"],[7195,70,6137,49],[7195,72,6137,51],[7196,6,6138,4],[7196,10,6138,4,"_yield$checkActionCod"],[7196,31,6138,4],[7196,40,6138,27,"checkActionCode"],[7196,55,6138,42],[7196,56,6138,43,"util"],[7196,60,6138,47],[7196,61,6138,48,"getModularInstance"],[7196,79,6138,66],[7196,80,6138,67,"auth"],[7196,84,6138,71],[7196,85,6138,72],[7196,87,6138,74,"code"],[7196,91,6138,78],[7196,92,6138,79],[7197,8,6138,12,"data"],[7197,12,6138,16],[7197,15,6138,16,"_yield$checkActionCod"],[7197,36,6138,16],[7197,37,6138,12,"data"],[7197,41,6138,16],[7198,6,6139,4],[7199,6,6140,4],[7199,13,6140,11,"data"],[7199,17,6140,15],[7199,18,6140,16,"email"],[7199,23,6140,21],[7200,4,6141,0],[7200,5,6141,1],[7201,4,6141,1],[7201,11,6141,1,"_verifyPasswordResetCode"],[7201,35,6141,1],[7201,36,6141,1,"apply"],[7201,41,6141,1],[7201,48,6141,1,"arguments"],[7201,57,6141,1],[7202,2,6141,1],[7203,2,6141,1],[7203,11,6162,15,"createUserWithEmailAndPassword"],[7203,41,6162,45,"createUserWithEmailAndPassword"],[7203,42,6162,45,"_x160"],[7203,47,6162,45],[7203,49,6162,45,"_x161"],[7203,54,6162,45],[7203,56,6162,45,"_x162"],[7203,61,6162,45],[7204,4,6162,45],[7204,11,6162,45,"_createUserWithEmailAndPassword"],[7204,42,6162,45],[7204,43,6162,45,"apply"],[7204,48,6162,45],[7204,55,6162,45,"arguments"],[7204,64,6162,45],[7205,2,6162,45],[7206,2,6184,0],[7207,0,6185,0],[7208,0,6186,0],[7209,0,6187,0],[7210,0,6188,0],[7211,0,6189,0],[7212,0,6190,0],[7213,0,6191,0],[7214,0,6192,0],[7215,0,6193,0],[7216,0,6194,0],[7217,0,6195,0],[7218,0,6196,0],[7219,0,6197,0],[7220,0,6198,0],[7221,0,6199,0],[7222,0,6200,0],[7223,0,6201,0],[7224,0,6202,0],[7225,0,6203,0],[7226,0,6204,0],[7227,0,6205,0],[7228,0,6206,0],[7229,2,6184,0],[7229,11,6184,0,"_createUserWithEmailAndPassword"],[7229,43,6184,0],[7230,4,6184,0,"_createUserWithEmailAndPassword"],[7230,35,6184,0],[7230,38,6184,0,"_asyncToGenerator"],[7230,55,6184,0],[7230,56,6162,0],[7230,67,6162,46,"auth"],[7230,71,6162,50],[7230,73,6162,52,"email"],[7230,78,6162,57],[7230,80,6162,59,"password"],[7230,88,6162,67],[7230,90,6162,69],[7231,6,6163,4],[7231,10,6163,8,"app"],[7231,13,6163,11],[7231,14,6163,12,"_isFirebaseServerApp"],[7231,34,6163,32],[7231,35,6163,33,"auth"],[7231,39,6163,37],[7231,40,6163,38,"app"],[7231,43,6163,41],[7231,44,6163,42],[7231,46,6163,44],[7232,8,6164,8],[7232,15,6164,15,"Promise"],[7232,22,6164,22],[7232,23,6164,23,"reject"],[7232,29,6164,29],[7232,30,6164,30,"_serverAppCurrentUserOperationNotSupportedError"],[7232,77,6164,77],[7232,78,6164,78,"auth"],[7232,82,6164,82],[7232,83,6164,83],[7232,84,6164,84],[7233,6,6165,4],[7234,6,6166,4],[7234,10,6166,10,"authInternal"],[7234,22,6166,22],[7234,25,6166,25,"_castAuth"],[7234,34,6166,34],[7234,35,6166,35,"auth"],[7234,39,6166,39],[7234,40,6166,40],[7235,6,6167,4],[7235,10,6167,10,"request"],[7235,17,6167,17],[7235,20,6167,20],[7236,8,6168,8,"returnSecureToken"],[7236,25,6168,25],[7236,27,6168,27],[7236,31,6168,31],[7237,8,6169,8,"email"],[7237,13,6169,13],[7238,8,6170,8,"password"],[7238,16,6170,16],[7239,8,6171,8,"clientType"],[7239,18,6171,18],[7239,20,6171,20],[7239,37,6171,37],[7239,38,6171,38],[7240,6,6172,4],[7240,7,6172,5],[7241,6,6173,4],[7241,10,6173,10,"signUpResponse"],[7241,24,6173,24],[7241,27,6173,27,"handleRecaptchaFlow"],[7241,46,6173,46],[7241,47,6173,47,"authInternal"],[7241,59,6173,59],[7241,61,6173,61,"request"],[7241,68,6173,68],[7241,70,6173,70],[7241,86,6173,86],[7241,87,6173,87],[7241,131,6173,131,"signUp"],[7241,137,6173,137],[7241,139,6173,139],[7241,164,6173,164],[7241,165,6173,165],[7241,216,6173,216],[7241,217,6173,217],[7242,6,6174,4],[7242,10,6174,10,"response"],[7242,18,6174,18],[7242,27,6174,27,"signUpResponse"],[7242,41,6174,41],[7242,42,6174,42,"catch"],[7242,47,6174,47],[7242,48,6174,48,"error"],[7242,53,6174,53],[7242,57,6174,57],[7243,8,6175,8],[7243,12,6175,12,"error"],[7243,17,6175,17],[7243,18,6175,18,"code"],[7243,22,6175,22],[7243,27,6175,27],[7243,35,6175,35],[7243,72,6175,72],[7243,73,6175,73],[7243,130,6175,130],[7243,132,6175,132],[7244,10,6176,12],[7244,15,6176,17,"recachePasswordPolicy"],[7244,36,6176,38],[7244,37,6176,39,"auth"],[7244,41,6176,43],[7244,42,6176,44],[7245,8,6177,8],[7246,8,6178,8],[7246,14,6178,14,"error"],[7246,19,6178,19],[7247,6,6179,4],[7247,7,6179,5],[7247,8,6179,6],[7248,6,6180,4],[7248,10,6180,10,"userCredential"],[7248,24,6180,24],[7248,33,6180,33,"UserCredentialImpl"],[7248,51,6180,51],[7248,52,6180,52,"_fromIdTokenResponse"],[7248,72,6180,72],[7248,73,6180,73,"authInternal"],[7248,85,6180,85],[7248,87,6180,87],[7248,95,6180,95],[7248,96,6180,96],[7248,125,6180,125,"response"],[7248,133,6180,133],[7248,134,6180,134],[7249,6,6181,4],[7249,12,6181,10,"authInternal"],[7249,24,6181,22],[7249,25,6181,23,"_updateCurrentUser"],[7249,43,6181,41],[7249,44,6181,42,"userCredential"],[7249,58,6181,56],[7249,59,6181,57,"user"],[7249,63,6181,61],[7249,64,6181,62],[7250,6,6182,4],[7250,13,6182,11,"userCredential"],[7250,27,6182,25],[7251,4,6183,0],[7251,5,6183,1],[7252,4,6183,1],[7252,11,6183,1,"_createUserWithEmailAndPassword"],[7252,42,6183,1],[7252,43,6183,1,"apply"],[7252,48,6183,1],[7252,55,6183,1,"arguments"],[7252,64,6183,1],[7253,2,6183,1],[7254,2,6207,0],[7254,11,6207,9,"signInWithEmailAndPassword"],[7254,37,6207,35,"signInWithEmailAndPassword"],[7254,38,6207,36,"auth"],[7254,42,6207,40],[7254,44,6207,42,"email"],[7254,49,6207,47],[7254,51,6207,49,"password"],[7254,59,6207,57],[7254,61,6207,59],[7255,4,6208,4],[7255,8,6208,8,"app"],[7255,11,6208,11],[7255,12,6208,12,"_isFirebaseServerApp"],[7255,32,6208,32],[7255,33,6208,33,"auth"],[7255,37,6208,37],[7255,38,6208,38,"app"],[7255,41,6208,41],[7255,42,6208,42],[7255,44,6208,44],[7256,6,6209,8],[7256,13,6209,15,"Promise"],[7256,20,6209,22],[7256,21,6209,23,"reject"],[7256,27,6209,29],[7256,28,6209,30,"_serverAppCurrentUserOperationNotSupportedError"],[7256,75,6209,77],[7256,76,6209,78,"auth"],[7256,80,6209,82],[7256,81,6209,83],[7256,82,6209,84],[7257,4,6210,4],[7258,4,6211,4],[7258,11,6211,11,"signInWithCredential"],[7258,31,6211,31],[7258,32,6211,32,"util"],[7258,36,6211,36],[7258,37,6211,37,"getModularInstance"],[7258,55,6211,55],[7258,56,6211,56,"auth"],[7258,60,6211,60],[7258,61,6211,61],[7258,63,6211,63,"EmailAuthProvider"],[7258,80,6211,80],[7258,81,6211,81,"credential"],[7258,91,6211,91],[7258,92,6211,92,"email"],[7258,97,6211,97],[7258,99,6211,99,"password"],[7258,107,6211,107],[7258,108,6211,108],[7258,109,6211,109],[7258,110,6211,110,"catch"],[7258,115,6211,115],[7259,6,6211,115],[7259,10,6211,115,"_ref18"],[7259,16,6211,115],[7259,19,6211,115,"_asyncToGenerator"],[7259,36,6211,115],[7259,37,6211,116],[7259,48,6211,123,"error"],[7259,53,6211,128],[7259,55,6211,133],[7260,8,6212,8],[7260,12,6212,12,"error"],[7260,17,6212,17],[7260,18,6212,18,"code"],[7260,22,6212,22],[7260,27,6212,27],[7260,35,6212,35],[7260,72,6212,72],[7260,73,6212,73],[7260,130,6212,130],[7260,132,6212,132],[7261,10,6213,12],[7261,15,6213,17,"recachePasswordPolicy"],[7261,36,6213,38],[7261,37,6213,39,"auth"],[7261,41,6213,43],[7261,42,6213,44],[7262,8,6214,8],[7263,8,6215,8],[7263,14,6215,14,"error"],[7263,19,6215,19],[7264,6,6216,4],[7264,7,6216,5],[7265,6,6216,5],[7265,23,6216,5,"_x163"],[7265,28,6216,5],[7266,8,6216,5],[7266,15,6216,5,"_ref18"],[7266,21,6216,5],[7266,22,6216,5,"apply"],[7266,27,6216,5],[7266,34,6216,5,"arguments"],[7266,43,6216,5],[7267,6,6216,5],[7268,4,6216,5],[7268,8,6216,6],[7269,2,6217,0],[7271,2,6219,0],[7272,0,6220,0],[7273,0,6221,0],[7274,0,6222,0],[7275,0,6223,0],[7276,0,6224,0],[7277,0,6225,0],[7278,0,6226,0],[7279,0,6227,0],[7280,0,6228,0],[7281,0,6229,0],[7282,0,6230,0],[7283,0,6231,0],[7284,0,6232,0],[7285,0,6233,0],[7286,0,6234,0],[7287,2,6235,0],[7288,0,6236,0],[7289,0,6237,0],[7290,0,6238,0],[7291,0,6239,0],[7292,0,6240,0],[7293,0,6241,0],[7294,0,6242,0],[7295,0,6243,0],[7296,0,6244,0],[7297,0,6245,0],[7298,0,6246,0],[7299,0,6247,0],[7300,0,6248,0],[7301,0,6249,0],[7302,0,6250,0],[7303,0,6251,0],[7304,0,6252,0],[7305,0,6253,0],[7306,0,6254,0],[7307,0,6255,0],[7308,0,6256,0],[7309,0,6257,0],[7310,0,6258,0],[7311,0,6259,0],[7312,0,6260,0],[7313,0,6261,0],[7314,0,6262,0],[7315,0,6263,0],[7316,0,6264,0],[7317,0,6265,0],[7318,0,6266,0],[7319,0,6267,0],[7320,0,6268,0],[7321,0,6269,0],[7322,0,6270,0],[7323,0,6271,0],[7324,0,6272,0],[7325,2,6235,0],[7325,11,6273,15,"sendSignInLinkToEmail"],[7325,32,6273,36,"sendSignInLinkToEmail"],[7325,33,6273,36,"_x164"],[7325,38,6273,36],[7325,40,6273,36,"_x165"],[7325,45,6273,36],[7325,47,6273,36,"_x166"],[7325,52,6273,36],[7326,4,6273,36],[7326,11,6273,36,"_sendSignInLinkToEmail"],[7326,33,6273,36],[7326,34,6273,36,"apply"],[7326,39,6273,36],[7326,46,6273,36,"arguments"],[7326,55,6273,36],[7327,2,6273,36],[7328,2,6289,0],[7329,0,6290,0],[7330,0,6291,0],[7331,0,6292,0],[7332,0,6293,0],[7333,0,6294,0],[7334,0,6295,0],[7335,0,6296,0],[7336,2,6289,0],[7336,11,6289,0,"_sendSignInLinkToEmail"],[7336,34,6289,0],[7337,4,6289,0,"_sendSignInLinkToEmail"],[7337,26,6289,0],[7337,29,6289,0,"_asyncToGenerator"],[7337,46,6289,0],[7337,47,6273,0],[7337,58,6273,37,"auth"],[7337,62,6273,41],[7337,64,6273,43,"email"],[7337,69,6273,48],[7337,71,6273,50,"actionCodeSettings"],[7337,89,6273,68],[7337,91,6273,70],[7338,6,6274,4],[7338,10,6274,10,"authInternal"],[7338,22,6274,22],[7338,25,6274,25,"_castAuth"],[7338,34,6274,34],[7338,35,6274,35,"auth"],[7338,39,6274,39],[7338,40,6274,40],[7339,6,6275,4],[7339,10,6275,10,"request"],[7339,17,6275,17],[7339,20,6275,20],[7340,8,6276,8,"requestType"],[7340,19,6276,19],[7340,21,6276,21],[7340,35,6276,35],[7340,36,6276,36],[7341,8,6277,8,"email"],[7341,13,6277,13],[7342,8,6278,8,"clientType"],[7342,18,6278,18],[7342,20,6278,20],[7342,37,6278,37],[7342,38,6278,38],[7343,6,6279,4],[7343,7,6279,5],[7344,6,6280,4],[7344,15,6280,13,"setActionCodeSettings"],[7344,36,6280,34,"setActionCodeSettings"],[7344,37,6280,35,"request"],[7344,44,6280,42],[7344,46,6280,44,"actionCodeSettings"],[7344,64,6280,62],[7344,66,6280,64],[7345,8,6281,8,"_assert"],[7345,15,6281,15],[7345,16,6281,16,"actionCodeSettings"],[7345,34,6281,34],[7345,35,6281,35,"handleCodeInApp"],[7345,50,6281,50],[7345,52,6281,52,"authInternal"],[7345,64,6281,64],[7345,66,6281,66],[7345,82,6281,82],[7345,83,6281,83],[7345,117,6281,117],[7345,118,6281,118],[7346,8,6282,8],[7346,12,6282,12,"actionCodeSettings"],[7346,30,6282,30],[7346,32,6282,32],[7347,10,6283,12,"_setActionCodeSettingsOnRequest"],[7347,41,6283,43],[7347,42,6283,44,"authInternal"],[7347,54,6283,56],[7347,56,6283,58,"request"],[7347,63,6283,65],[7347,65,6283,67,"actionCodeSettings"],[7347,83,6283,85],[7347,84,6283,86],[7348,8,6284,8],[7349,6,6285,4],[7350,6,6286,4,"setActionCodeSettings"],[7350,27,6286,25],[7350,28,6286,26,"request"],[7350,35,6286,33],[7350,37,6286,35,"actionCodeSettings"],[7350,55,6286,53],[7350,56,6286,54],[7351,6,6287,4],[7351,12,6287,10,"handleRecaptchaFlow"],[7351,31,6287,29],[7351,32,6287,30,"authInternal"],[7351,44,6287,42],[7351,46,6287,44,"request"],[7351,53,6287,51],[7351,55,6287,53],[7351,67,6287,65],[7351,68,6287,66],[7351,108,6287,106,"sendSignInLinkToEmail$1"],[7351,131,6287,129],[7351,133,6287,131],[7351,158,6287,156],[7351,159,6287,157],[7351,210,6287,208],[7351,211,6287,209],[7352,4,6288,0],[7352,5,6288,1],[7353,4,6288,1],[7353,11,6288,1,"_sendSignInLinkToEmail"],[7353,33,6288,1],[7353,34,6288,1,"apply"],[7353,39,6288,1],[7353,46,6288,1,"arguments"],[7353,55,6288,1],[7354,2,6288,1],[7355,2,6297,0],[7355,11,6297,9,"isSignInWithEmailLink"],[7355,32,6297,30,"isSignInWithEmailLink"],[7355,33,6297,31,"auth"],[7355,37,6297,35],[7355,39,6297,37,"emailLink"],[7355,48,6297,46],[7355,50,6297,48],[7356,4,6298,4],[7356,8,6298,10,"actionCodeUrl"],[7356,21,6298,23],[7356,24,6298,26,"ActionCodeURL"],[7356,37,6298,39],[7356,38,6298,40,"parseLink"],[7356,47,6298,49],[7356,48,6298,50,"emailLink"],[7356,57,6298,59],[7356,58,6298,60],[7357,4,6299,4],[7357,11,6299,11,"actionCodeUrl"],[7357,24,6299,24],[7357,26,6299,26,"operation"],[7357,35,6299,35],[7357,40,6299,40],[7357,54,6299,54],[7357,55,6299,55],[7358,2,6300,0],[7359,2,6301,0],[7360,0,6302,0],[7361,0,6303,0],[7362,0,6304,0],[7363,0,6305,0],[7364,0,6306,0],[7365,0,6307,0],[7366,0,6308,0],[7367,0,6309,0],[7368,0,6310,0],[7369,0,6311,0],[7370,0,6312,0],[7371,0,6313,0],[7372,0,6314,0],[7373,0,6315,0],[7374,0,6316,0],[7375,0,6317,0],[7376,0,6318,0],[7377,0,6319,0],[7378,0,6320,0],[7379,0,6321,0],[7380,0,6322,0],[7381,0,6323,0],[7382,0,6324,0],[7383,0,6325,0],[7384,0,6326,0],[7385,0,6327,0],[7386,0,6328,0],[7387,0,6329,0],[7388,0,6330,0],[7389,0,6331,0],[7390,0,6332,0],[7391,0,6333,0],[7392,0,6334,0],[7393,0,6335,0],[7394,0,6336,0],[7395,0,6337,0],[7396,0,6338,0],[7397,0,6339,0],[7398,0,6340,0],[7399,0,6341,0],[7400,2,6301,0],[7400,11,6342,15,"signInWithEmailLink"],[7400,30,6342,34,"signInWithEmailLink"],[7400,31,6342,34,"_x167"],[7400,36,6342,34],[7400,38,6342,34,"_x168"],[7400,43,6342,34],[7400,45,6342,34,"_x169"],[7400,50,6342,34],[7401,4,6342,34],[7401,11,6342,34,"_signInWithEmailLink"],[7401,31,6342,34],[7401,32,6342,34,"apply"],[7401,37,6342,34],[7401,44,6342,34,"arguments"],[7401,53,6342,34],[7402,2,6342,34],[7403,2,6354,0],[7404,0,6355,0],[7405,0,6356,0],[7406,0,6357,0],[7407,0,6358,0],[7408,0,6359,0],[7409,0,6360,0],[7410,0,6361,0],[7411,0,6362,0],[7412,0,6363,0],[7413,0,6364,0],[7414,0,6365,0],[7415,0,6366,0],[7416,0,6367,0],[7417,0,6368,0],[7418,0,6369,0],[7419,2,6354,0],[7419,11,6354,0,"_signInWithEmailLink"],[7419,32,6354,0],[7420,4,6354,0,"_signInWithEmailLink"],[7420,24,6354,0],[7420,27,6354,0,"_asyncToGenerator"],[7420,44,6354,0],[7420,45,6342,0],[7420,56,6342,35,"auth"],[7420,60,6342,39],[7420,62,6342,41,"email"],[7420,67,6342,46],[7420,69,6342,48,"emailLink"],[7420,78,6342,57],[7420,80,6342,59],[7421,6,6343,4],[7421,10,6343,8,"app"],[7421,13,6343,11],[7421,14,6343,12,"_isFirebaseServerApp"],[7421,34,6343,32],[7421,35,6343,33,"auth"],[7421,39,6343,37],[7421,40,6343,38,"app"],[7421,43,6343,41],[7421,44,6343,42],[7421,46,6343,44],[7422,8,6344,8],[7422,15,6344,15,"Promise"],[7422,22,6344,22],[7422,23,6344,23,"reject"],[7422,29,6344,29],[7422,30,6344,30,"_serverAppCurrentUserOperationNotSupportedError"],[7422,77,6344,77],[7422,78,6344,78,"auth"],[7422,82,6344,82],[7422,83,6344,83],[7422,84,6344,84],[7423,6,6345,4],[7424,6,6346,4],[7424,10,6346,10,"authModular"],[7424,21,6346,21],[7424,24,6346,24,"util"],[7424,28,6346,28],[7424,29,6346,29,"getModularInstance"],[7424,47,6346,47],[7424,48,6346,48,"auth"],[7424,52,6346,52],[7424,53,6346,53],[7425,6,6347,4],[7425,10,6347,10,"credential"],[7425,20,6347,20],[7425,23,6347,23,"EmailAuthProvider"],[7425,40,6347,40],[7425,41,6347,41,"credentialWithLink"],[7425,59,6347,59],[7425,60,6347,60,"email"],[7425,65,6347,65],[7425,67,6347,67,"emailLink"],[7425,76,6347,76],[7425,80,6347,80,"_getCurrentUrl"],[7425,94,6347,94],[7425,95,6347,95],[7425,96,6347,96],[7425,97,6347,97],[7426,6,6348,4],[7427,6,6349,4],[7428,6,6350,4,"_assert"],[7428,13,6350,11],[7428,14,6350,12,"credential"],[7428,24,6350,22],[7428,25,6350,23,"_tenantId"],[7428,34,6350,32],[7428,40,6350,38,"authModular"],[7428,51,6350,49],[7428,52,6350,50,"tenantId"],[7428,60,6350,58],[7428,64,6350,62],[7428,68,6350,66],[7428,69,6350,67],[7428,71,6350,69,"authModular"],[7428,82,6350,80],[7428,84,6350,82],[7428,104,6350,102],[7428,105,6350,103],[7428,143,6350,141],[7428,144,6350,142],[7429,6,6351,4],[7429,13,6351,11,"signInWithCredential"],[7429,33,6351,31],[7429,34,6351,32,"authModular"],[7429,45,6351,43],[7429,47,6351,45,"credential"],[7429,57,6351,55],[7429,58,6351,56],[7430,4,6352,0],[7430,5,6352,1],[7431,4,6352,1],[7431,11,6352,1,"_signInWithEmailLink"],[7431,31,6352,1],[7431,32,6352,1,"apply"],[7431,37,6352,1],[7431,44,6352,1,"arguments"],[7431,53,6352,1],[7432,2,6352,1],[7433,2,6352,1],[7433,11,6370,15,"createAuthUri"],[7433,24,6370,28,"createAuthUri"],[7433,25,6370,28,"_x170"],[7433,30,6370,28],[7433,32,6370,28,"_x171"],[7433,37,6370,28],[7434,4,6370,28],[7434,11,6370,28,"_createAuthUri"],[7434,25,6370,28],[7434,26,6370,28,"apply"],[7434,31,6370,28],[7434,38,6370,28,"arguments"],[7434,47,6370,28],[7435,2,6370,28],[7436,2,6374,0],[7437,0,6375,0],[7438,0,6376,0],[7439,0,6377,0],[7440,0,6378,0],[7441,0,6379,0],[7442,0,6380,0],[7443,0,6381,0],[7444,0,6382,0],[7445,0,6383,0],[7446,0,6384,0],[7447,0,6385,0],[7448,0,6386,0],[7449,0,6387,0],[7450,0,6388,0],[7451,0,6389,0],[7452,2,6390,0],[7453,0,6391,0],[7454,0,6392,0],[7455,0,6393,0],[7456,0,6394,0],[7457,0,6395,0],[7458,0,6396,0],[7459,0,6397,0],[7460,0,6398,0],[7461,0,6399,0],[7462,0,6400,0],[7463,0,6401,0],[7464,0,6402,0],[7465,0,6403,0],[7466,0,6404,0],[7467,0,6405,0],[7468,0,6406,0],[7469,0,6407,0],[7470,0,6408,0],[7471,0,6409,0],[7472,2,6390,0],[7472,11,6390,0,"_createAuthUri"],[7472,26,6390,0],[7473,4,6390,0,"_createAuthUri"],[7473,18,6390,0],[7473,21,6390,0,"_asyncToGenerator"],[7473,38,6390,0],[7473,39,6370,0],[7473,50,6370,29,"auth"],[7473,54,6370,33],[7473,56,6370,35,"request"],[7473,63,6370,42],[7473,65,6370,44],[7474,6,6371,4],[7474,13,6371,11,"_performApiRequest"],[7474,31,6371,29],[7474,32,6371,30,"auth"],[7474,36,6371,34],[7474,38,6371,36],[7474,44,6371,42],[7474,45,6371,43],[7474,68,6371,66],[7474,96,6371,94],[7474,97,6371,95],[7474,129,6371,127,"_addTidIfNecessary"],[7474,147,6371,145],[7474,148,6371,146,"auth"],[7474,152,6371,150],[7474,154,6371,152,"request"],[7474,161,6371,159],[7474,162,6371,160],[7474,163,6371,161],[7475,4,6372,0],[7475,5,6372,1],[7476,4,6372,1],[7476,11,6372,1,"_createAuthUri"],[7476,25,6372,1],[7476,26,6372,1,"apply"],[7476,31,6372,1],[7476,38,6372,1,"arguments"],[7476,47,6372,1],[7477,2,6372,1],[7478,2,6372,1],[7478,11,6410,15,"fetchSignInMethodsForEmail"],[7478,37,6410,41,"fetchSignInMethodsForEmail"],[7478,38,6410,41,"_x172"],[7478,43,6410,41],[7478,45,6410,41,"_x173"],[7478,50,6410,41],[7479,4,6410,41],[7479,11,6410,41,"_fetchSignInMethodsForEmail"],[7479,38,6410,41],[7479,39,6410,41,"apply"],[7479,44,6410,41],[7479,51,6410,41,"arguments"],[7479,60,6410,41],[7480,2,6410,41],[7481,2,6422,0],[7482,0,6423,0],[7483,0,6424,0],[7484,0,6425,0],[7485,0,6426,0],[7486,0,6427,0],[7487,0,6428,0],[7488,0,6429,0],[7489,0,6430,0],[7490,0,6431,0],[7491,0,6432,0],[7492,0,6433,0],[7493,0,6434,0],[7494,0,6435,0],[7495,0,6436,0],[7496,0,6437,0],[7497,0,6438,0],[7498,0,6439,0],[7499,0,6440,0],[7500,0,6441,0],[7501,0,6442,0],[7502,0,6443,0],[7503,0,6444,0],[7504,0,6445,0],[7505,0,6446,0],[7506,0,6447,0],[7507,0,6448,0],[7508,0,6449,0],[7509,0,6450,0],[7510,0,6451,0],[7511,2,6422,0],[7511,11,6422,0,"_fetchSignInMethodsForEmail"],[7511,39,6422,0],[7512,4,6422,0,"_fetchSignInMethodsForEmail"],[7512,31,6422,0],[7512,34,6422,0,"_asyncToGenerator"],[7512,51,6422,0],[7512,52,6410,0],[7512,63,6410,42,"auth"],[7512,67,6410,46],[7512,69,6410,48,"email"],[7512,74,6410,53],[7512,76,6410,55],[7513,6,6411,4],[7514,6,6412,4],[7515,6,6413,4],[7516,6,6414,4],[7516,10,6414,10,"continueUri"],[7516,21,6414,21],[7516,24,6414,24,"_isHttpOrHttps"],[7516,38,6414,38],[7516,39,6414,39],[7516,40,6414,40],[7516,43,6414,43,"_getCurrentUrl"],[7516,57,6414,57],[7516,58,6414,58],[7516,59,6414,59],[7516,62,6414,62],[7516,80,6414,80],[7517,6,6415,4],[7517,10,6415,10,"request"],[7517,17,6415,17],[7517,20,6415,20],[7518,8,6416,8,"identifier"],[7518,18,6416,18],[7518,20,6416,20,"email"],[7518,25,6416,25],[7519,8,6417,8,"continueUri"],[7520,6,6418,4],[7520,7,6418,5],[7521,6,6419,4],[7521,10,6419,4,"_yield$createAuthUri"],[7521,30,6419,4],[7521,39,6419,36,"createAuthUri"],[7521,52,6419,49],[7521,53,6419,50,"util"],[7521,57,6419,54],[7521,58,6419,55,"getModularInstance"],[7521,76,6419,73],[7521,77,6419,74,"auth"],[7521,81,6419,78],[7521,82,6419,79],[7521,84,6419,81,"request"],[7521,91,6419,88],[7521,92,6419,89],[7522,8,6419,12,"signinMethods"],[7522,21,6419,25],[7522,24,6419,25,"_yield$createAuthUri"],[7522,44,6419,25],[7522,45,6419,12,"signinMethods"],[7522,58,6419,25],[7523,6,6420,4],[7523,13,6420,11,"signinMethods"],[7523,26,6420,24],[7523,30,6420,28],[7523,32,6420,30],[7524,4,6421,0],[7524,5,6421,1],[7525,4,6421,1],[7525,11,6421,1,"_fetchSignInMethodsForEmail"],[7525,38,6421,1],[7525,39,6421,1,"apply"],[7525,44,6421,1],[7525,51,6421,1,"arguments"],[7525,60,6421,1],[7526,2,6421,1],[7527,2,6421,1],[7527,11,6452,15,"sendEmailVerification"],[7527,32,6452,36,"sendEmailVerification"],[7527,33,6452,36,"_x174"],[7527,38,6452,36],[7527,40,6452,36,"_x175"],[7527,45,6452,36],[7528,4,6452,36],[7528,11,6452,36,"_sendEmailVerification"],[7528,33,6452,36],[7528,34,6452,36,"apply"],[7528,39,6452,36],[7528,46,6452,36,"arguments"],[7528,55,6452,36],[7529,2,6452,36],[7530,2,6467,0],[7531,0,6468,0],[7532,0,6469,0],[7533,0,6470,0],[7534,0,6471,0],[7535,0,6472,0],[7536,0,6473,0],[7537,0,6474,0],[7538,0,6475,0],[7539,0,6476,0],[7540,0,6477,0],[7541,0,6478,0],[7542,0,6479,0],[7543,0,6480,0],[7544,0,6481,0],[7545,0,6482,0],[7546,0,6483,0],[7547,0,6484,0],[7548,0,6485,0],[7549,0,6486,0],[7550,0,6487,0],[7551,0,6488,0],[7552,0,6489,0],[7553,0,6490,0],[7554,0,6491,0],[7555,0,6492,0],[7556,0,6493,0],[7557,0,6494,0],[7558,0,6495,0],[7559,0,6496,0],[7560,0,6497,0],[7561,0,6498,0],[7562,0,6499,0],[7563,0,6500,0],[7564,2,6467,0],[7564,11,6467,0,"_sendEmailVerification"],[7564,34,6467,0],[7565,4,6467,0,"_sendEmailVerification"],[7565,26,6467,0],[7565,29,6467,0,"_asyncToGenerator"],[7565,46,6467,0],[7565,47,6452,0],[7565,58,6452,37,"user"],[7565,62,6452,41],[7565,64,6452,43,"actionCodeSettings"],[7565,82,6452,61],[7565,84,6452,63],[7566,6,6453,4],[7566,10,6453,10,"userInternal"],[7566,22,6453,22],[7566,25,6453,25,"util"],[7566,29,6453,29],[7566,30,6453,30,"getModularInstance"],[7566,48,6453,48],[7566,49,6453,49,"user"],[7566,53,6453,53],[7566,54,6453,54],[7567,6,6454,4],[7567,10,6454,10,"idToken"],[7567,17,6454,17],[7567,26,6454,26,"user"],[7567,30,6454,30],[7567,31,6454,31,"getIdToken"],[7567,41,6454,41],[7567,42,6454,42],[7567,43,6454,43],[7568,6,6455,4],[7568,10,6455,10,"request"],[7568,17,6455,17],[7568,20,6455,20],[7569,8,6456,8,"requestType"],[7569,19,6456,19],[7569,21,6456,21],[7569,35,6456,35],[7569,36,6456,36],[7570,8,6457,8,"idToken"],[7571,6,6458,4],[7571,7,6458,5],[7572,6,6459,4],[7572,10,6459,8,"actionCodeSettings"],[7572,28,6459,26],[7572,30,6459,28],[7573,8,6460,8,"_setActionCodeSettingsOnRequest"],[7573,39,6460,39],[7573,40,6460,40,"userInternal"],[7573,52,6460,52],[7573,53,6460,53,"auth"],[7573,57,6460,57],[7573,59,6460,59,"request"],[7573,66,6460,66],[7573,68,6460,68,"actionCodeSettings"],[7573,86,6460,86],[7573,87,6460,87],[7574,6,6461,4],[7575,6,6462,4],[7575,10,6462,4,"_yield$sendEmailVerif"],[7575,31,6462,4],[7575,40,6462,28,"sendEmailVerification$1"],[7575,63,6462,51],[7575,64,6462,52,"userInternal"],[7575,76,6462,64],[7575,77,6462,65,"auth"],[7575,81,6462,69],[7575,83,6462,71,"request"],[7575,90,6462,78],[7575,91,6462,79],[7576,8,6462,12,"email"],[7576,13,6462,17],[7576,16,6462,17,"_yield$sendEmailVerif"],[7576,37,6462,17],[7576,38,6462,12,"email"],[7576,43,6462,17],[7577,6,6463,4],[7577,10,6463,8,"email"],[7577,15,6463,13],[7577,20,6463,18,"user"],[7577,24,6463,22],[7577,25,6463,23,"email"],[7577,30,6463,28],[7577,32,6463,30],[7578,8,6464,8],[7578,14,6464,14,"user"],[7578,18,6464,18],[7578,19,6464,19,"reload"],[7578,25,6464,25],[7578,26,6464,26],[7578,27,6464,27],[7579,6,6465,4],[7580,4,6466,0],[7580,5,6466,1],[7581,4,6466,1],[7581,11,6466,1,"_sendEmailVerification"],[7581,33,6466,1],[7581,34,6466,1,"apply"],[7581,39,6466,1],[7581,46,6466,1,"arguments"],[7581,55,6466,1],[7582,2,6466,1],[7583,2,6466,1],[7583,11,6501,15,"verifyBeforeUpdateEmail"],[7583,34,6501,38,"verifyBeforeUpdateEmail"],[7583,35,6501,38,"_x176"],[7583,40,6501,38],[7583,42,6501,38,"_x177"],[7583,47,6501,38],[7583,49,6501,38,"_x178"],[7583,54,6501,38],[7584,4,6501,38],[7584,11,6501,38,"_verifyBeforeUpdateEmail"],[7584,35,6501,38],[7584,36,6501,38,"apply"],[7584,41,6501,38],[7584,48,6501,38,"arguments"],[7584,57,6501,38],[7585,2,6501,38],[7586,2,6520,0],[7587,0,6521,0],[7588,0,6522,0],[7589,0,6523,0],[7590,0,6524,0],[7591,0,6525,0],[7592,0,6526,0],[7593,0,6527,0],[7594,0,6528,0],[7595,0,6529,0],[7596,0,6530,0],[7597,0,6531,0],[7598,0,6532,0],[7599,0,6533,0],[7600,0,6534,0],[7601,0,6535,0],[7602,2,6520,0],[7602,11,6520,0,"_verifyBeforeUpdateEmail"],[7602,36,6520,0],[7603,4,6520,0,"_verifyBeforeUpdateEmail"],[7603,28,6520,0],[7603,31,6520,0,"_asyncToGenerator"],[7603,48,6520,0],[7603,49,6501,0],[7603,60,6501,39,"user"],[7603,64,6501,43],[7603,66,6501,45,"newEmail"],[7603,74,6501,53],[7603,76,6501,55,"actionCodeSettings"],[7603,94,6501,73],[7603,96,6501,75],[7604,6,6502,4],[7604,10,6502,10,"userInternal"],[7604,22,6502,22],[7604,25,6502,25,"util"],[7604,29,6502,29],[7604,30,6502,30,"getModularInstance"],[7604,48,6502,48],[7604,49,6502,49,"user"],[7604,53,6502,53],[7604,54,6502,54],[7605,6,6503,4],[7605,10,6503,10,"idToken"],[7605,17,6503,17],[7605,26,6503,26,"user"],[7605,30,6503,30],[7605,31,6503,31,"getIdToken"],[7605,41,6503,41],[7605,42,6503,42],[7605,43,6503,43],[7606,6,6504,4],[7606,10,6504,10,"request"],[7606,17,6504,17],[7606,20,6504,20],[7607,8,6505,8,"requestType"],[7607,19,6505,19],[7607,21,6505,21],[7607,46,6505,46],[7607,47,6505,47],[7608,8,6506,8,"idToken"],[7608,15,6506,15],[7609,8,6507,8,"newEmail"],[7610,6,6508,4],[7610,7,6508,5],[7611,6,6509,4],[7611,10,6509,8,"actionCodeSettings"],[7611,28,6509,26],[7611,30,6509,28],[7612,8,6510,8,"_setActionCodeSettingsOnRequest"],[7612,39,6510,39],[7612,40,6510,40,"userInternal"],[7612,52,6510,52],[7612,53,6510,53,"auth"],[7612,57,6510,57],[7612,59,6510,59,"request"],[7612,66,6510,66],[7612,68,6510,68,"actionCodeSettings"],[7612,86,6510,86],[7612,87,6510,87],[7613,6,6511,4],[7614,6,6512,4],[7614,10,6512,4,"_yield$verifyAndChang"],[7614,31,6512,4],[7614,40,6512,28,"verifyAndChangeEmail"],[7614,60,6512,48],[7614,61,6512,49,"userInternal"],[7614,73,6512,61],[7614,74,6512,62,"auth"],[7614,78,6512,66],[7614,80,6512,68,"request"],[7614,87,6512,75],[7614,88,6512,76],[7615,8,6512,12,"email"],[7615,13,6512,17],[7615,16,6512,17,"_yield$verifyAndChang"],[7615,37,6512,17],[7615,38,6512,12,"email"],[7615,43,6512,17],[7616,6,6513,4],[7616,10,6513,8,"email"],[7616,15,6513,13],[7616,20,6513,18,"user"],[7616,24,6513,22],[7616,25,6513,23,"email"],[7616,30,6513,28],[7616,32,6513,30],[7617,8,6514,8],[7618,8,6515,8],[7619,8,6516,8],[7619,14,6516,14,"user"],[7619,18,6516,18],[7619,19,6516,19,"reload"],[7619,25,6516,25],[7619,26,6516,26],[7619,27,6516,27],[7620,6,6517,4],[7621,4,6518,0],[7621,5,6518,1],[7622,4,6518,1],[7622,11,6518,1,"_verifyBeforeUpdateEmail"],[7622,35,6518,1],[7622,36,6518,1,"apply"],[7622,41,6518,1],[7622,48,6518,1,"arguments"],[7622,57,6518,1],[7623,2,6518,1],[7624,2,6518,1],[7624,11,6536,15,"updateProfile$1"],[7624,26,6536,30,"updateProfile$1"],[7624,27,6536,30,"_x179"],[7624,32,6536,30],[7624,34,6536,30,"_x180"],[7624,39,6536,30],[7625,4,6536,30],[7625,11,6536,30,"_updateProfile$"],[7625,26,6536,30],[7625,27,6536,30,"apply"],[7625,32,6536,30],[7625,39,6536,30,"arguments"],[7625,48,6536,30],[7626,2,6536,30],[7627,2,6540,0],[7628,0,6541,0],[7629,0,6542,0],[7630,0,6543,0],[7631,0,6544,0],[7632,0,6545,0],[7633,0,6546,0],[7634,0,6547,0],[7635,0,6548,0],[7636,0,6549,0],[7637,0,6550,0],[7638,0,6551,0],[7639,0,6552,0],[7640,0,6553,0],[7641,0,6554,0],[7642,0,6555,0],[7643,2,6556,0],[7644,0,6557,0],[7645,0,6558,0],[7646,0,6559,0],[7647,0,6560,0],[7648,0,6561,0],[7649,0,6562,0],[7650,0,6563,0],[7651,2,6556,0],[7651,11,6556,0,"_updateProfile$"],[7651,27,6556,0],[7652,4,6556,0,"_updateProfile$"],[7652,19,6556,0],[7652,22,6556,0,"_asyncToGenerator"],[7652,39,6556,0],[7652,40,6536,0],[7652,51,6536,31,"auth"],[7652,55,6536,35],[7652,57,6536,37,"request"],[7652,64,6536,44],[7652,66,6536,46],[7653,6,6537,4],[7653,13,6537,11,"_performApiRequest"],[7653,31,6537,29],[7653,32,6537,30,"auth"],[7653,36,6537,34],[7653,38,6537,36],[7653,44,6537,42],[7653,45,6537,43],[7653,68,6537,66],[7653,89,6537,87],[7653,90,6537,88],[7653,123,6537,121,"request"],[7653,130,6537,128],[7653,131,6537,129],[7654,4,6538,0],[7654,5,6538,1],[7655,4,6538,1],[7655,11,6538,1,"_updateProfile$"],[7655,26,6538,1],[7655,27,6538,1,"apply"],[7655,32,6538,1],[7655,39,6538,1,"arguments"],[7655,48,6538,1],[7656,2,6538,1],[7657,2,6538,1],[7657,11,6564,15,"updateProfile"],[7657,24,6564,28,"updateProfile"],[7657,25,6564,28,"_x181"],[7657,30,6564,28],[7657,32,6564,28,"_x182"],[7657,37,6564,28],[7658,4,6564,28],[7658,11,6564,28,"_updateProfile"],[7658,25,6564,28],[7658,26,6564,28,"apply"],[7658,31,6564,28],[7658,38,6564,28,"arguments"],[7658,47,6564,28],[7659,2,6564,28],[7660,2,6587,0],[7661,0,6588,0],[7662,0,6589,0],[7663,0,6590,0],[7664,0,6591,0],[7665,0,6592,0],[7666,0,6593,0],[7667,0,6594,0],[7668,0,6595,0],[7669,0,6596,0],[7670,0,6597,0],[7671,0,6598,0],[7672,0,6599,0],[7673,0,6600,0],[7674,0,6601,0],[7675,0,6602,0],[7676,0,6603,0],[7677,0,6604,0],[7678,0,6605,0],[7679,0,6606,0],[7680,0,6607,0],[7681,0,6608,0],[7682,0,6609,0],[7683,0,6610,0],[7684,2,6587,0],[7684,11,6587,0,"_updateProfile"],[7684,26,6587,0],[7685,4,6587,0,"_updateProfile"],[7685,18,6587,0],[7685,21,6587,0,"_asyncToGenerator"],[7685,38,6587,0],[7685,39,6564,0],[7685,50,6564,29,"user"],[7685,54,6564,33],[7685,56,6564,33,"_ref19"],[7685,62,6564,33],[7685,64,6564,72],[7686,6,6564,72],[7686,10,6564,37,"displayName"],[7686,21,6564,48],[7686,24,6564,48,"_ref19"],[7686,30,6564,48],[7686,31,6564,37,"displayName"],[7686,42,6564,48],[7687,8,6564,60,"photoUrl"],[7687,16,6564,68],[7687,19,6564,68,"_ref19"],[7687,25,6564,68],[7687,26,6564,50,"photoURL"],[7687,34,6564,58],[7688,6,6565,4],[7688,10,6565,8,"displayName"],[7688,21,6565,19],[7688,26,6565,24,"undefined"],[7688,35,6565,33],[7688,39,6565,37,"photoUrl"],[7688,47,6565,45],[7688,52,6565,50,"undefined"],[7688,61,6565,59],[7688,63,6565,61],[7689,8,6566,8],[7690,6,6567,4],[7691,6,6568,4],[7691,10,6568,10,"userInternal"],[7691,22,6568,22],[7691,25,6568,25,"util"],[7691,29,6568,29],[7691,30,6568,30,"getModularInstance"],[7691,48,6568,48],[7691,49,6568,49,"user"],[7691,53,6568,53],[7691,54,6568,54],[7692,6,6569,4],[7692,10,6569,10,"idToken"],[7692,17,6569,17],[7692,26,6569,26,"userInternal"],[7692,38,6569,38],[7692,39,6569,39,"getIdToken"],[7692,49,6569,49],[7692,50,6569,50],[7692,51,6569,51],[7693,6,6570,4],[7693,10,6570,10,"profileRequest"],[7693,24,6570,24],[7693,27,6570,27],[7694,8,6571,8,"idToken"],[7694,15,6571,15],[7695,8,6572,8,"displayName"],[7695,19,6572,19],[7696,8,6573,8,"photoUrl"],[7696,16,6573,16],[7697,8,6574,8,"returnSecureToken"],[7697,25,6574,25],[7697,27,6574,27],[7698,6,6575,4],[7698,7,6575,5],[7699,6,6576,4],[7699,10,6576,10,"response"],[7699,18,6576,18],[7699,27,6576,27,"_logoutIfInvalidated"],[7699,47,6576,47],[7699,48,6576,48,"userInternal"],[7699,60,6576,60],[7699,62,6576,62,"updateProfile$1"],[7699,77,6576,77],[7699,78,6576,78,"userInternal"],[7699,90,6576,90],[7699,91,6576,91,"auth"],[7699,95,6576,95],[7699,97,6576,97,"profileRequest"],[7699,111,6576,111],[7699,112,6576,112],[7699,113,6576,113],[7700,6,6577,4,"userInternal"],[7700,18,6577,16],[7700,19,6577,17,"displayName"],[7700,30,6577,28],[7700,33,6577,31,"response"],[7700,41,6577,39],[7700,42,6577,40,"displayName"],[7700,53,6577,51],[7700,57,6577,55],[7700,61,6577,59],[7701,6,6578,4,"userInternal"],[7701,18,6578,16],[7701,19,6578,17,"photoURL"],[7701,27,6578,25],[7701,30,6578,28,"response"],[7701,38,6578,36],[7701,39,6578,37,"photoUrl"],[7701,47,6578,45],[7701,51,6578,49],[7701,55,6578,53],[7702,6,6579,4],[7703,6,6580,4],[7703,10,6580,10,"passwordProvider"],[7703,26,6580,26],[7703,29,6580,29,"userInternal"],[7703,41,6580,41],[7703,42,6580,42,"providerData"],[7703,54,6580,54],[7703,55,6580,55,"find"],[7703,59,6580,59],[7703,60,6580,60,"_ref29"],[7703,66,6580,60],[7704,8,6580,60],[7704,12,6580,63,"providerId"],[7704,22,6580,73],[7704,25,6580,73,"_ref29"],[7704,31,6580,73],[7704,32,6580,63,"providerId"],[7704,42,6580,73],[7705,8,6580,73],[7705,15,6580,80,"providerId"],[7705,25,6580,90],[7705,30,6580,95],[7705,40,6580,105],[7706,6,6580,105],[7706,8,6580,106],[7706,33,6580,131],[7706,34,6580,132],[7707,6,6581,4],[7707,10,6581,8,"passwordProvider"],[7707,26,6581,24],[7707,28,6581,26],[7708,8,6582,8,"passwordProvider"],[7708,24,6582,24],[7708,25,6582,25,"displayName"],[7708,36,6582,36],[7708,39,6582,39,"userInternal"],[7708,51,6582,51],[7708,52,6582,52,"displayName"],[7708,63,6582,63],[7709,8,6583,8,"passwordProvider"],[7709,24,6583,24],[7709,25,6583,25,"photoURL"],[7709,33,6583,33],[7709,36,6583,36,"userInternal"],[7709,48,6583,48],[7709,49,6583,49,"photoURL"],[7709,57,6583,57],[7710,6,6584,4],[7711,6,6585,4],[7711,12,6585,10,"userInternal"],[7711,24,6585,22],[7711,25,6585,23,"_updateTokensIfNecessary"],[7711,49,6585,47],[7711,50,6585,48,"response"],[7711,58,6585,56],[7711,59,6585,57],[7712,4,6586,0],[7712,5,6586,1],[7713,4,6586,1],[7713,11,6586,1,"_updateProfile"],[7713,25,6586,1],[7713,26,6586,1,"apply"],[7713,31,6586,1],[7713,38,6586,1,"arguments"],[7713,47,6586,1],[7714,2,6586,1],[7715,2,6611,0],[7715,11,6611,9,"updateEmail"],[7715,22,6611,20,"updateEmail"],[7715,23,6611,21,"user"],[7715,27,6611,25],[7715,29,6611,27,"newEmail"],[7715,37,6611,35],[7715,39,6611,37],[7716,4,6612,4],[7716,8,6612,10,"userInternal"],[7716,20,6612,22],[7716,23,6612,25,"util"],[7716,27,6612,29],[7716,28,6612,30,"getModularInstance"],[7716,46,6612,48],[7716,47,6612,49,"user"],[7716,51,6612,53],[7716,52,6612,54],[7717,4,6613,4],[7717,8,6613,8,"app"],[7717,11,6613,11],[7717,12,6613,12,"_isFirebaseServerApp"],[7717,32,6613,32],[7717,33,6613,33,"userInternal"],[7717,45,6613,45],[7717,46,6613,46,"auth"],[7717,50,6613,50],[7717,51,6613,51,"app"],[7717,54,6613,54],[7717,55,6613,55],[7717,57,6613,57],[7718,6,6614,8],[7718,13,6614,15,"Promise"],[7718,20,6614,22],[7718,21,6614,23,"reject"],[7718,27,6614,29],[7718,28,6614,30,"_serverAppCurrentUserOperationNotSupportedError"],[7718,75,6614,77],[7718,76,6614,78,"userInternal"],[7718,88,6614,90],[7718,89,6614,91,"auth"],[7718,93,6614,95],[7718,94,6614,96],[7718,95,6614,97],[7719,4,6615,4],[7720,4,6616,4],[7720,11,6616,11,"updateEmailOrPassword"],[7720,32,6616,32],[7720,33,6616,33,"userInternal"],[7720,45,6616,45],[7720,47,6616,47,"newEmail"],[7720,55,6616,55],[7720,57,6616,57],[7720,61,6616,61],[7720,62,6616,62],[7721,2,6617,0],[7722,2,6618,0],[7723,0,6619,0],[7724,0,6620,0],[7725,0,6621,0],[7726,0,6622,0],[7727,0,6623,0],[7728,0,6624,0],[7729,0,6625,0],[7730,0,6626,0],[7731,0,6627,0],[7732,0,6628,0],[7733,0,6629,0],[7734,0,6630,0],[7735,2,6631,0],[7735,11,6631,9,"updatePassword"],[7735,25,6631,23,"updatePassword"],[7735,26,6631,24,"user"],[7735,30,6631,28],[7735,32,6631,30,"newPassword"],[7735,43,6631,41],[7735,45,6631,43],[7736,4,6632,4],[7736,11,6632,11,"updateEmailOrPassword"],[7736,32,6632,32],[7736,33,6632,33,"util"],[7736,37,6632,37],[7736,38,6632,38,"getModularInstance"],[7736,56,6632,56],[7736,57,6632,57,"user"],[7736,61,6632,61],[7736,62,6632,62],[7736,64,6632,64],[7736,68,6632,68],[7736,70,6632,70,"newPassword"],[7736,81,6632,81],[7736,82,6632,82],[7737,2,6633,0],[7738,2,6633,1],[7738,11,6634,15,"updateEmailOrPassword"],[7738,32,6634,36,"updateEmailOrPassword"],[7738,33,6634,36,"_x183"],[7738,38,6634,36],[7738,40,6634,36,"_x184"],[7738,45,6634,36],[7738,47,6634,36,"_x185"],[7738,52,6634,36],[7739,4,6634,36],[7739,11,6634,36,"_updateEmailOrPassword"],[7739,33,6634,36],[7739,34,6634,36,"apply"],[7739,39,6634,36],[7739,46,6634,36,"arguments"],[7739,55,6634,36],[7740,2,6634,36],[7741,2,6651,0],[7742,0,6652,0],[7743,0,6653,0],[7744,0,6654,0],[7745,0,6655,0],[7746,0,6656,0],[7747,0,6657,0],[7748,0,6658,0],[7749,0,6659,0],[7750,0,6660,0],[7751,0,6661,0],[7752,0,6662,0],[7753,0,6663,0],[7754,0,6664,0],[7755,0,6665,0],[7756,0,6666,0],[7757,2,6667,0],[7758,0,6668,0],[7759,0,6669,0],[7760,0,6670,0],[7761,2,6667,0],[7761,11,6667,0,"_updateEmailOrPassword"],[7761,34,6667,0],[7762,4,6667,0,"_updateEmailOrPassword"],[7762,26,6667,0],[7762,29,6667,0,"_asyncToGenerator"],[7762,46,6667,0],[7762,47,6634,0],[7762,58,6634,37,"user"],[7762,62,6634,41],[7762,64,6634,43,"email"],[7762,69,6634,48],[7762,71,6634,50,"password"],[7762,79,6634,58],[7762,81,6634,60],[7763,6,6635,4],[7763,10,6635,12,"auth"],[7763,14,6635,16],[7763,17,6635,21,"user"],[7763,21,6635,25],[7763,22,6635,12,"auth"],[7763,26,6635,16],[7764,6,6636,4],[7764,10,6636,10,"idToken"],[7764,17,6636,17],[7764,26,6636,26,"user"],[7764,30,6636,30],[7764,31,6636,31,"getIdToken"],[7764,41,6636,41],[7764,42,6636,42],[7764,43,6636,43],[7765,6,6637,4],[7765,10,6637,10,"request"],[7765,17,6637,17],[7765,20,6637,20],[7766,8,6638,8,"idToken"],[7766,15,6638,15],[7767,8,6639,8,"returnSecureToken"],[7767,25,6639,25],[7767,27,6639,27],[7768,6,6640,4],[7768,7,6640,5],[7769,6,6641,4],[7769,10,6641,8,"email"],[7769,15,6641,13],[7769,17,6641,15],[7770,8,6642,8,"request"],[7770,15,6642,15],[7770,16,6642,16,"email"],[7770,21,6642,21],[7770,24,6642,24,"email"],[7770,29,6642,29],[7771,6,6643,4],[7772,6,6644,4],[7772,10,6644,8,"password"],[7772,18,6644,16],[7772,20,6644,18],[7773,8,6645,8,"request"],[7773,15,6645,15],[7773,16,6645,16,"password"],[7773,24,6645,24],[7773,27,6645,27,"password"],[7773,35,6645,35],[7774,6,6646,4],[7775,6,6647,4],[7775,10,6647,10,"response"],[7775,18,6647,18],[7775,27,6647,27,"_logoutIfInvalidated"],[7775,47,6647,47],[7775,48,6647,48,"user"],[7775,52,6647,52],[7775,54,6647,54,"updateEmailPassword"],[7775,73,6647,73],[7775,74,6647,74,"auth"],[7775,78,6647,78],[7775,80,6647,80,"request"],[7775,87,6647,87],[7775,88,6647,88],[7775,89,6647,89],[7776,6,6648,4],[7776,12,6648,10,"user"],[7776,16,6648,14],[7776,17,6648,15,"_updateTokensIfNecessary"],[7776,41,6648,39],[7776,42,6648,40,"response"],[7776,50,6648,48],[7776,52,6648,50],[7776,64,6648,63],[7776,68,6648,67],[7776,69,6648,68],[7777,4,6649,0],[7777,5,6649,1],[7778,4,6649,1],[7778,11,6649,1,"_updateEmailOrPassword"],[7778,33,6649,1],[7778,34,6649,1,"apply"],[7778,39,6649,1],[7778,46,6649,1,"arguments"],[7778,55,6649,1],[7779,2,6649,1],[7780,2,6671,0],[7780,11,6671,9,"_fromIdTokenResponse"],[7780,31,6671,29,"_fromIdTokenResponse"],[7780,32,6671,30,"idTokenResponse"],[7780,47,6671,45],[7780,49,6671,47],[7781,4,6672,4],[7781,8,6672,8],[7781,9,6672,9,"idTokenResponse"],[7781,24,6672,24],[7781,26,6672,26],[7782,6,6673,8],[7782,13,6673,15],[7782,17,6673,19],[7783,4,6674,4],[7784,4,6675,4],[7784,8,6675,12,"providerId"],[7784,18,6675,22],[7784,21,6675,27,"idTokenResponse"],[7784,36,6675,42],[7784,37,6675,12,"providerId"],[7784,47,6675,22],[7785,4,6676,4],[7785,8,6676,10,"profile"],[7785,15,6676,17],[7785,18,6676,20,"idTokenResponse"],[7785,33,6676,35],[7785,34,6676,36,"rawUserInfo"],[7785,45,6676,47],[7785,48,6677,10,"JSON"],[7785,52,6677,14],[7785,53,6677,15,"parse"],[7785,58,6677,20],[7785,59,6677,21,"idTokenResponse"],[7785,74,6677,36],[7785,75,6677,37,"rawUserInfo"],[7785,86,6677,48],[7785,87,6677,49],[7785,90,6678,10],[7785,91,6678,11],[7785,92,6678,12],[7786,4,6679,4],[7786,8,6679,10,"isNewUser"],[7786,17,6679,19],[7786,20,6679,22,"idTokenResponse"],[7786,35,6679,37],[7786,36,6679,38,"isNewUser"],[7786,45,6679,47],[7786,49,6680,8,"idTokenResponse"],[7786,64,6680,23],[7786,65,6680,24,"kind"],[7786,69,6680,28],[7786,74,6680,33],[7786,113,6680,72],[7786,114,6680,73],[7787,4,6681,4],[7787,8,6681,8],[7787,9,6681,9,"providerId"],[7787,19,6681,19],[7787,23,6681,23,"idTokenResponse"],[7787,38,6681,38],[7787,40,6681,40,"idToken"],[7787,47,6681,47],[7787,49,6681,49],[7788,6,6682,8],[7788,10,6682,14,"signInProvider"],[7788,24,6682,28],[7788,27,6682,31,"_parseToken"],[7788,38,6682,42],[7788,39,6682,43,"idTokenResponse"],[7788,54,6682,58],[7788,55,6682,59,"idToken"],[7788,62,6682,66],[7788,63,6682,67],[7788,65,6682,69,"firebase"],[7788,73,6682,77],[7788,76,6682,80],[7788,94,6682,98],[7788,95,6682,99],[7789,6,6683,8],[7789,10,6683,12,"signInProvider"],[7789,24,6683,26],[7789,26,6683,28],[7790,8,6684,12],[7790,12,6684,18,"filteredProviderId"],[7790,30,6684,36],[7790,33,6684,39,"signInProvider"],[7790,47,6684,53],[7790,52,6684,58],[7790,63,6684,69],[7790,64,6684,70],[7790,94,6685,16,"signInProvider"],[7790,108,6685,30],[7790,113,6685,35],[7790,121,6685,43],[7790,122,6685,44],[7790,148,6686,18,"signInProvider"],[7790,162,6686,32],[7790,165,6687,18],[7790,169,6687,22],[7791,8,6688,12],[7792,8,6689,12],[7792,15,6689,19],[7792,19,6689,23,"GenericAdditionalUserInfo"],[7792,44,6689,48],[7792,45,6689,49,"isNewUser"],[7792,54,6689,58],[7792,56,6689,60,"filteredProviderId"],[7792,74,6689,78],[7792,75,6689,79],[7793,6,6690,8],[7794,4,6691,4],[7795,4,6692,4],[7795,8,6692,8],[7795,9,6692,9,"providerId"],[7795,19,6692,19],[7795,21,6692,21],[7796,6,6693,8],[7796,13,6693,15],[7796,17,6693,19],[7797,4,6694,4],[7798,4,6695,4],[7798,12,6695,12,"providerId"],[7798,22,6695,22],[7799,6,6696,8],[7799,11,6696,13],[7799,25,6696,27],[7799,26,6696,28],[7800,8,6697,12],[7800,15,6697,19],[7800,19,6697,23,"FacebookAdditionalUserInfo"],[7800,45,6697,49],[7800,46,6697,50,"isNewUser"],[7800,55,6697,59],[7800,57,6697,61,"profile"],[7800,64,6697,68],[7800,65,6697,69],[7801,6,6698,8],[7801,11,6698,13],[7801,23,6698,25],[7801,24,6698,26],[7802,8,6699,12],[7802,15,6699,19],[7802,19,6699,23,"GithubAdditionalUserInfo"],[7802,43,6699,47],[7802,44,6699,48,"isNewUser"],[7802,53,6699,57],[7802,55,6699,59,"profile"],[7802,62,6699,66],[7802,63,6699,67],[7803,6,6700,8],[7803,11,6700,13],[7803,23,6700,25],[7803,24,6700,26],[7804,8,6701,12],[7804,15,6701,19],[7804,19,6701,23,"GoogleAdditionalUserInfo"],[7804,43,6701,47],[7804,44,6701,48,"isNewUser"],[7804,53,6701,57],[7804,55,6701,59,"profile"],[7804,62,6701,66],[7804,63,6701,67],[7805,6,6702,8],[7805,11,6702,13],[7805,24,6702,26],[7805,25,6702,27],[7806,8,6703,12],[7806,15,6703,19],[7806,19,6703,23,"TwitterAdditionalUserInfo"],[7806,44,6703,48],[7806,45,6703,49,"isNewUser"],[7806,54,6703,58],[7806,56,6703,60,"profile"],[7806,63,6703,67],[7806,65,6703,69,"idTokenResponse"],[7806,80,6703,84],[7806,81,6703,85,"screenName"],[7806,91,6703,95],[7806,95,6703,99],[7806,99,6703,103],[7806,100,6703,104],[7807,6,6704,8],[7807,11,6704,13],[7807,19,6704,21],[7807,20,6704,22],[7808,6,6705,8],[7808,11,6705,13],[7808,22,6705,24],[7808,23,6705,25],[7809,8,6706,12],[7809,15,6706,19],[7809,19,6706,23,"GenericAdditionalUserInfo"],[7809,44,6706,48],[7809,45,6706,49,"isNewUser"],[7809,54,6706,58],[7809,56,6706,60],[7809,60,6706,64],[7809,61,6706,65],[7810,6,6707,8],[7811,8,6708,12],[7811,15,6708,19],[7811,19,6708,23,"GenericAdditionalUserInfo"],[7811,44,6708,48],[7811,45,6708,49,"isNewUser"],[7811,54,6708,58],[7811,56,6708,60,"providerId"],[7811,66,6708,70],[7811,68,6708,72,"profile"],[7811,75,6708,79],[7811,76,6708,80],[7812,4,6709,4],[7813,2,6710,0],[7814,2,6710,1],[7814,6,6711,6,"GenericAdditionalUserInfo"],[7814,31,6711,31],[7814,47,6711,31,"_createClass"],[7814,59,6711,31],[7814,60,6712,4],[7814,69,6712,4,"GenericAdditionalUserInfo"],[7814,95,6712,16,"isNewUser"],[7814,104,6712,25],[7814,106,6712,27,"providerId"],[7814,116,6712,37],[7814,118,6712,53],[7815,4,6712,53],[7815,8,6712,39,"profile"],[7815,15,6712,46],[7815,18,6712,46,"arguments"],[7815,27,6712,46],[7815,28,6712,46,"length"],[7815,34,6712,46],[7815,42,6712,46,"arguments"],[7815,51,6712,46],[7815,59,6712,46,"undefined"],[7815,68,6712,46],[7815,71,6712,46,"arguments"],[7815,80,6712,46],[7815,86,6712,49],[7815,87,6712,50],[7815,88,6712,51],[7816,4,6712,51,"_classCallCheck"],[7816,19,6712,51],[7816,26,6712,51,"GenericAdditionalUserInfo"],[7816,51,6712,51],[7817,4,6713,8],[7817,8,6713,12],[7817,9,6713,13,"isNewUser"],[7817,18,6713,22],[7817,21,6713,25,"isNewUser"],[7817,30,6713,34],[7818,4,6714,8],[7818,8,6714,12],[7818,9,6714,13,"providerId"],[7818,19,6714,23],[7818,22,6714,26,"providerId"],[7818,32,6714,36],[7819,4,6715,8],[7819,8,6715,12],[7819,9,6715,13,"profile"],[7819,16,6715,20],[7819,19,6715,23,"profile"],[7819,26,6715,30],[7820,2,6716,4],[7820,3,6716,5],[7821,2,6716,5],[7821,6,6718,6,"FederatedAdditionalUserInfoWithUsername"],[7821,45,6718,45],[7821,71,6718,45,"_GenericAdditionalUse"],[7821,92,6718,45],[7822,4,6719,4],[7822,13,6719,4,"FederatedAdditionalUserInfoWithUsername"],[7822,53,6719,16,"isNewUser"],[7822,62,6719,25],[7822,64,6719,27,"providerId"],[7822,74,6719,37],[7822,76,6719,39,"profile"],[7822,83,6719,46],[7822,85,6719,48,"username"],[7822,93,6719,56],[7822,95,6719,58],[7823,6,6719,58],[7823,10,6719,58,"_this12"],[7823,17,6719,58],[7824,6,6719,58,"_classCallCheck"],[7824,21,6719,58],[7824,28,6719,58,"FederatedAdditionalUserInfoWithUsername"],[7824,67,6719,58],[7825,6,6720,8,"_this12"],[7825,13,6720,8],[7825,16,6720,8,"_callSuper"],[7825,26,6720,8],[7825,33,6720,8,"FederatedAdditionalUserInfoWithUsername"],[7825,72,6720,8],[7825,75,6720,14,"isNewUser"],[7825,84,6720,23],[7825,86,6720,25,"providerId"],[7825,96,6720,35],[7825,98,6720,37,"profile"],[7825,105,6720,44],[7826,6,6721,8,"_this12"],[7826,13,6721,8],[7826,14,6721,13,"username"],[7826,22,6721,21],[7826,25,6721,24,"username"],[7826,33,6721,32],[7827,6,6721,33],[7827,13,6721,33,"_this12"],[7827,20,6721,33],[7828,4,6722,4],[7829,4,6722,5,"_inherits"],[7829,13,6722,5],[7829,14,6722,5,"FederatedAdditionalUserInfoWithUsername"],[7829,53,6722,5],[7829,55,6722,5,"_GenericAdditionalUse"],[7829,76,6722,5],[7830,4,6722,5],[7830,11,6722,5,"_createClass"],[7830,23,6722,5],[7830,24,6722,5,"FederatedAdditionalUserInfoWithUsername"],[7830,63,6722,5],[7831,2,6722,5],[7831,4,6718,54,"GenericAdditionalUserInfo"],[7831,29,6718,79],[7832,2,6718,79],[7832,6,6724,6,"FacebookAdditionalUserInfo"],[7832,32,6724,32],[7832,58,6724,32,"_GenericAdditionalUse2"],[7832,80,6724,32],[7833,4,6725,4],[7833,13,6725,4,"FacebookAdditionalUserInfo"],[7833,40,6725,16,"isNewUser"],[7833,49,6725,25],[7833,51,6725,27,"profile"],[7833,58,6725,34],[7833,60,6725,36],[7834,6,6725,36,"_classCallCheck"],[7834,21,6725,36],[7834,28,6725,36,"FacebookAdditionalUserInfo"],[7834,54,6725,36],[7835,6,6725,36],[7835,13,6725,36,"_callSuper"],[7835,23,6725,36],[7835,30,6725,36,"FacebookAdditionalUserInfo"],[7835,56,6725,36],[7835,59,6726,14,"isNewUser"],[7835,68,6726,23],[7835,70,6726,25],[7835,84,6726,39],[7835,85,6726,40],[7835,112,6726,67,"profile"],[7835,119,6726,74],[7836,4,6727,4],[7837,4,6727,5,"_inherits"],[7837,13,6727,5],[7837,14,6727,5,"FacebookAdditionalUserInfo"],[7837,40,6727,5],[7837,42,6727,5,"_GenericAdditionalUse2"],[7837,64,6727,5],[7838,4,6727,5],[7838,11,6727,5,"_createClass"],[7838,23,6727,5],[7838,24,6727,5,"FacebookAdditionalUserInfo"],[7838,50,6727,5],[7839,2,6727,5],[7839,4,6724,41,"GenericAdditionalUserInfo"],[7839,29,6724,66],[7840,2,6724,66],[7840,6,6729,6,"GithubAdditionalUserInfo"],[7840,30,6729,30],[7840,56,6729,30,"_FederatedAdditionalU"],[7840,77,6729,30],[7841,4,6730,4],[7841,13,6730,4,"GithubAdditionalUserInfo"],[7841,38,6730,16,"isNewUser"],[7841,47,6730,25],[7841,49,6730,27,"profile"],[7841,56,6730,34],[7841,58,6730,36],[7842,6,6730,36,"_classCallCheck"],[7842,21,6730,36],[7842,28,6730,36,"GithubAdditionalUserInfo"],[7842,52,6730,36],[7843,6,6730,36],[7843,13,6730,36,"_callSuper"],[7843,23,6730,36],[7843,30,6730,36,"GithubAdditionalUserInfo"],[7843,54,6730,36],[7843,57,6731,14,"isNewUser"],[7843,66,6731,23],[7843,68,6731,25],[7843,80,6731,37],[7843,81,6731,38],[7843,106,6731,63,"profile"],[7843,113,6731,70],[7843,115,6731,72],[7843,122,6731,79,"profile"],[7843,129,6731,86],[7843,131,6731,88,"login"],[7843,136,6731,93],[7843,141,6731,98],[7843,149,6731,106],[7843,152,6731,109,"profile"],[7843,159,6731,116],[7843,161,6731,118,"login"],[7843,166,6731,123],[7843,169,6731,126],[7843,173,6731,130],[7844,4,6732,4],[7845,4,6732,5,"_inherits"],[7845,13,6732,5],[7845,14,6732,5,"GithubAdditionalUserInfo"],[7845,38,6732,5],[7845,40,6732,5,"_FederatedAdditionalU"],[7845,61,6732,5],[7846,4,6732,5],[7846,11,6732,5,"_createClass"],[7846,23,6732,5],[7846,24,6732,5,"GithubAdditionalUserInfo"],[7846,48,6732,5],[7847,2,6732,5],[7847,4,6729,39,"FederatedAdditionalUserInfoWithUsername"],[7847,43,6729,78],[7848,2,6729,78],[7848,6,6734,6,"GoogleAdditionalUserInfo"],[7848,30,6734,30],[7848,56,6734,30,"_GenericAdditionalUse3"],[7848,78,6734,30],[7849,4,6735,4],[7849,13,6735,4,"GoogleAdditionalUserInfo"],[7849,38,6735,16,"isNewUser"],[7849,47,6735,25],[7849,49,6735,27,"profile"],[7849,56,6735,34],[7849,58,6735,36],[7850,6,6735,36,"_classCallCheck"],[7850,21,6735,36],[7850,28,6735,36,"GoogleAdditionalUserInfo"],[7850,52,6735,36],[7851,6,6735,36],[7851,13,6735,36,"_callSuper"],[7851,23,6735,36],[7851,30,6735,36,"GoogleAdditionalUserInfo"],[7851,54,6735,36],[7851,57,6736,14,"isNewUser"],[7851,66,6736,23],[7851,68,6736,25],[7851,80,6736,37],[7851,81,6736,38],[7851,106,6736,63,"profile"],[7851,113,6736,70],[7852,4,6737,4],[7853,4,6737,5,"_inherits"],[7853,13,6737,5],[7853,14,6737,5,"GoogleAdditionalUserInfo"],[7853,38,6737,5],[7853,40,6737,5,"_GenericAdditionalUse3"],[7853,62,6737,5],[7854,4,6737,5],[7854,11,6737,5,"_createClass"],[7854,23,6737,5],[7854,24,6737,5,"GoogleAdditionalUserInfo"],[7854,48,6737,5],[7855,2,6737,5],[7855,4,6734,39,"GenericAdditionalUserInfo"],[7855,29,6734,64],[7856,2,6734,64],[7856,6,6739,6,"TwitterAdditionalUserInfo"],[7856,31,6739,31],[7856,57,6739,31,"_FederatedAdditionalU2"],[7856,79,6739,31],[7857,4,6740,4],[7857,13,6740,4,"TwitterAdditionalUserInfo"],[7857,39,6740,16,"isNewUser"],[7857,48,6740,25],[7857,50,6740,27,"profile"],[7857,57,6740,34],[7857,59,6740,36,"screenName"],[7857,69,6740,46],[7857,71,6740,48],[7858,6,6740,48,"_classCallCheck"],[7858,21,6740,48],[7858,28,6740,48,"TwitterAdditionalUserInfo"],[7858,53,6740,48],[7859,6,6740,48],[7859,13,6740,48,"_callSuper"],[7859,23,6740,48],[7859,30,6740,48,"TwitterAdditionalUserInfo"],[7859,55,6740,48],[7859,58,6741,14,"isNewUser"],[7859,67,6741,23],[7859,69,6741,25],[7859,82,6741,38],[7859,83,6741,39],[7859,109,6741,65,"profile"],[7859,116,6741,72],[7859,118,6741,74,"screenName"],[7859,128,6741,84],[7860,4,6742,4],[7861,4,6742,5,"_inherits"],[7861,13,6742,5],[7861,14,6742,5,"TwitterAdditionalUserInfo"],[7861,39,6742,5],[7861,41,6742,5,"_FederatedAdditionalU2"],[7861,63,6742,5],[7862,4,6742,5],[7862,11,6742,5,"_createClass"],[7862,23,6742,5],[7862,24,6742,5,"TwitterAdditionalUserInfo"],[7862,49,6742,5],[7863,2,6742,5],[7863,4,6739,40,"FederatedAdditionalUserInfoWithUsername"],[7863,43,6739,79],[7864,2,6744,0],[7865,0,6745,0],[7866,0,6746,0],[7867,0,6747,0],[7868,0,6748,0],[7869,0,6749,0],[7870,0,6750,0],[7871,2,6751,0],[7871,11,6751,9,"getAdditionalUserInfo"],[7871,32,6751,30,"getAdditionalUserInfo"],[7871,33,6751,31,"userCredential"],[7871,47,6751,45],[7871,49,6751,47],[7872,4,6752,4],[7872,8,6752,12,"user"],[7872,12,6752,16],[7872,15,6752,37,"userCredential"],[7872,29,6752,51],[7872,30,6752,12,"user"],[7872,34,6752,16],[7873,6,6752,18,"_tokenResponse"],[7873,20,6752,32],[7873,23,6752,37,"userCredential"],[7873,37,6752,51],[7873,38,6752,18,"_tokenResponse"],[7873,52,6752,32],[7874,4,6753,4],[7874,8,6753,8,"user"],[7874,12,6753,12],[7874,13,6753,13,"isAnonymous"],[7874,24,6753,24],[7874,28,6753,28],[7874,29,6753,29,"_tokenResponse"],[7874,43,6753,43],[7874,45,6753,45],[7875,6,6754,8],[7876,6,6755,8],[7877,6,6756,8],[7877,13,6756,15],[7878,8,6757,12,"providerId"],[7878,18,6757,22],[7878,20,6757,24],[7878,24,6757,28],[7879,8,6758,12,"isNewUser"],[7879,17,6758,21],[7879,19,6758,23],[7879,24,6758,28],[7880,8,6759,12,"profile"],[7880,15,6759,19],[7880,17,6759,21],[7881,6,6760,8],[7881,7,6760,9],[7882,4,6761,4],[7883,4,6762,4],[7883,11,6762,11,"_fromIdTokenResponse"],[7883,31,6762,31],[7883,32,6762,32,"_tokenResponse"],[7883,46,6762,46],[7883,47,6762,47],[7884,2,6763,0],[7886,2,6765,0],[7887,0,6766,0],[7888,0,6767,0],[7889,0,6768,0],[7890,0,6769,0],[7891,0,6770,0],[7892,0,6771,0],[7893,0,6772,0],[7894,0,6773,0],[7895,0,6774,0],[7896,0,6775,0],[7897,0,6776,0],[7898,0,6777,0],[7899,0,6778,0],[7900,0,6779,0],[7901,0,6780,0],[7902,2,6781,0],[7903,2,6782,0],[7904,0,6783,0],[7905,0,6784,0],[7906,0,6785,0],[7907,0,6786,0],[7908,0,6787,0],[7909,0,6788,0],[7910,0,6789,0],[7911,0,6790,0],[7912,0,6791,0],[7913,0,6792,0],[7914,0,6793,0],[7915,0,6794,0],[7916,0,6795,0],[7917,0,6796,0],[7918,0,6797,0],[7919,0,6798,0],[7920,0,6799,0],[7921,0,6800,0],[7922,0,6801,0],[7923,0,6802,0],[7924,0,6803,0],[7925,0,6804,0],[7926,0,6805,0],[7927,2,6806,0],[7927,11,6806,9,"setPersistence"],[7927,25,6806,23,"setPersistence"],[7927,26,6806,24,"auth"],[7927,30,6806,28],[7927,32,6806,30,"persistence"],[7927,43,6806,41],[7927,45,6806,43],[7928,4,6807,4],[7928,11,6807,11,"util"],[7928,15,6807,15],[7928,16,6807,16,"getModularInstance"],[7928,34,6807,34],[7928,35,6807,35,"auth"],[7928,39,6807,39],[7928,40,6807,40],[7928,41,6807,41,"setPersistence"],[7928,55,6807,55],[7928,56,6807,56,"persistence"],[7928,67,6807,67],[7928,68,6807,68],[7929,2,6808,0],[7930,2,6809,0],[7931,0,6810,0],[7932,0,6811,0],[7933,0,6812,0],[7934,0,6813,0],[7935,0,6814,0],[7936,0,6815,0],[7937,0,6816,0],[7938,0,6817,0],[7939,0,6818,0],[7940,0,6819,0],[7941,0,6820,0],[7942,0,6821,0],[7943,0,6822,0],[7944,0,6823,0],[7945,0,6824,0],[7946,0,6825,0],[7947,0,6826,0],[7948,0,6827,0],[7949,0,6828,0],[7950,0,6829,0],[7951,0,6830,0],[7952,0,6831,0],[7953,0,6832,0],[7954,0,6833,0],[7955,0,6834,0],[7956,0,6835,0],[7957,2,6836,0],[7957,11,6836,9,"initializeRecaptchaConfig"],[7957,36,6836,34,"initializeRecaptchaConfig"],[7957,37,6836,35,"auth"],[7957,41,6836,39],[7957,43,6836,41],[7958,4,6837,4],[7958,11,6837,11,"_initializeRecaptchaConfig"],[7958,37,6837,37],[7958,38,6837,38,"auth"],[7958,42,6837,42],[7958,43,6837,43],[7959,2,6838,0],[7960,2,6839,0],[7961,0,6840,0],[7962,0,6841,0],[7963,0,6842,0],[7964,0,6843,0],[7965,0,6844,0],[7966,0,6845,0],[7967,0,6846,0],[7968,0,6847,0],[7969,0,6848,0],[7970,0,6849,0],[7971,0,6850,0],[7972,0,6851,0],[7973,0,6852,0],[7974,0,6853,0],[7975,0,6854,0],[7976,0,6855,0],[7977,0,6856,0],[7978,0,6857,0],[7979,0,6858,0],[7980,0,6859,0],[7981,0,6860,0],[7982,0,6861,0],[7983,2,6839,0],[7983,11,6862,15,"validatePassword"],[7983,27,6862,31,"validatePassword"],[7983,28,6862,31,"_x186"],[7983,33,6862,31],[7983,35,6862,31,"_x187"],[7983,40,6862,31],[7984,4,6862,31],[7984,11,6862,31,"_validatePassword2"],[7984,29,6862,31],[7984,30,6862,31,"apply"],[7984,35,6862,31],[7984,42,6862,31,"arguments"],[7984,51,6862,31],[7985,2,6862,31],[7986,2,6866,0],[7987,0,6867,0],[7988,0,6868,0],[7989,0,6869,0],[7990,0,6870,0],[7991,0,6871,0],[7992,0,6872,0],[7993,0,6873,0],[7994,0,6874,0],[7995,0,6875,0],[7996,0,6876,0],[7997,0,6877,0],[7998,0,6878,0],[7999,0,6879,0],[8000,0,6880,0],[8001,0,6881,0],[8002,2,6866,0],[8002,11,6866,0,"_validatePassword2"],[8002,30,6866,0],[8003,4,6866,0,"_validatePassword2"],[8003,22,6866,0],[8003,25,6866,0,"_asyncToGenerator"],[8003,42,6866,0],[8003,43,6862,0],[8003,54,6862,32,"auth"],[8003,58,6862,36],[8003,60,6862,38,"password"],[8003,68,6862,46],[8003,70,6862,48],[8004,6,6863,4],[8004,10,6863,10,"authInternal"],[8004,22,6863,22],[8004,25,6863,25,"_castAuth"],[8004,34,6863,34],[8004,35,6863,35,"auth"],[8004,39,6863,39],[8004,40,6863,40],[8005,6,6864,4],[8005,13,6864,11,"authInternal"],[8005,25,6864,23],[8005,26,6864,24,"validatePassword"],[8005,42,6864,40],[8005,43,6864,41,"password"],[8005,51,6864,49],[8005,52,6864,50],[8006,4,6865,0],[8006,5,6865,1],[8007,4,6865,1],[8007,11,6865,1,"_validatePassword2"],[8007,29,6865,1],[8007,30,6865,1,"apply"],[8007,35,6865,1],[8007,42,6865,1,"arguments"],[8007,51,6865,1],[8008,2,6865,1],[8009,2,6882,0],[8009,11,6882,9,"onIdTokenChanged"],[8009,27,6882,25,"onIdTokenChanged"],[8009,28,6882,26,"auth"],[8009,32,6882,30],[8009,34,6882,32,"nextOrObserver"],[8009,48,6882,46],[8009,50,6882,48,"error"],[8009,55,6882,53],[8009,57,6882,55,"completed"],[8009,66,6882,64],[8009,68,6882,66],[8010,4,6883,4],[8010,11,6883,11,"util"],[8010,15,6883,15],[8010,16,6883,16,"getModularInstance"],[8010,34,6883,34],[8010,35,6883,35,"auth"],[8010,39,6883,39],[8010,40,6883,40],[8010,41,6883,41,"onIdTokenChanged"],[8010,57,6883,57],[8010,58,6883,58,"nextOrObserver"],[8010,72,6883,72],[8010,74,6883,74,"error"],[8010,79,6883,79],[8010,81,6883,81,"completed"],[8010,90,6883,90],[8010,91,6883,91],[8011,2,6884,0],[8012,2,6885,0],[8013,0,6886,0],[8014,0,6887,0],[8015,0,6888,0],[8016,0,6889,0],[8017,0,6890,0],[8018,0,6891,0],[8019,0,6892,0],[8020,0,6893,0],[8021,0,6894,0],[8022,2,6895,0],[8022,11,6895,9,"beforeAuthStateChanged"],[8022,33,6895,31,"beforeAuthStateChanged"],[8022,34,6895,32,"auth"],[8022,38,6895,36],[8022,40,6895,38,"callback"],[8022,48,6895,46],[8022,50,6895,48,"onAbort"],[8022,57,6895,55],[8022,59,6895,57],[8023,4,6896,4],[8023,11,6896,11,"util"],[8023,15,6896,15],[8023,16,6896,16,"getModularInstance"],[8023,34,6896,34],[8023,35,6896,35,"auth"],[8023,39,6896,39],[8023,40,6896,40],[8023,41,6896,41,"beforeAuthStateChanged"],[8023,63,6896,63],[8023,64,6896,64,"callback"],[8023,72,6896,72],[8023,74,6896,74,"onAbort"],[8023,81,6896,81],[8023,82,6896,82],[8024,2,6897,0],[8025,2,6898,0],[8026,0,6899,0],[8027,0,6900,0],[8028,0,6901,0],[8029,0,6902,0],[8030,0,6903,0],[8031,0,6904,0],[8032,0,6905,0],[8033,0,6906,0],[8034,0,6907,0],[8035,0,6908,0],[8036,0,6909,0],[8037,0,6910,0],[8038,0,6911,0],[8039,0,6912,0],[8040,2,6913,0],[8040,11,6913,9,"onAuthStateChanged"],[8040,29,6913,27,"onAuthStateChanged"],[8040,30,6913,28,"auth"],[8040,34,6913,32],[8040,36,6913,34,"nextOrObserver"],[8040,50,6913,48],[8040,52,6913,50,"error"],[8040,57,6913,55],[8040,59,6913,57,"completed"],[8040,68,6913,66],[8040,70,6913,68],[8041,4,6914,4],[8041,11,6914,11,"util"],[8041,15,6914,15],[8041,16,6914,16,"getModularInstance"],[8041,34,6914,34],[8041,35,6914,35,"auth"],[8041,39,6914,39],[8041,40,6914,40],[8041,41,6914,41,"onAuthStateChanged"],[8041,59,6914,59],[8041,60,6914,60,"nextOrObserver"],[8041,74,6914,74],[8041,76,6914,76,"error"],[8041,81,6914,81],[8041,83,6914,83,"completed"],[8041,92,6914,92],[8041,93,6914,93],[8042,2,6915,0],[8043,2,6916,0],[8044,0,6917,0],[8045,0,6918,0],[8046,0,6919,0],[8047,0,6920,0],[8048,0,6921,0],[8049,0,6922,0],[8050,2,6923,0],[8050,11,6923,9,"useDeviceLanguage"],[8050,28,6923,26,"useDeviceLanguage"],[8050,29,6923,27,"auth"],[8050,33,6923,31],[8050,35,6923,33],[8051,4,6924,4,"util"],[8051,8,6924,8],[8051,9,6924,9,"getModularInstance"],[8051,27,6924,27],[8051,28,6924,28,"auth"],[8051,32,6924,32],[8051,33,6924,33],[8051,34,6924,34,"useDeviceLanguage"],[8051,51,6924,51],[8051,52,6924,52],[8051,53,6924,53],[8052,2,6925,0],[8053,2,6926,0],[8054,0,6927,0],[8055,0,6928,0],[8056,0,6929,0],[8057,0,6930,0],[8058,0,6931,0],[8059,0,6932,0],[8060,0,6933,0],[8061,0,6934,0],[8062,0,6935,0],[8063,0,6936,0],[8064,0,6937,0],[8065,0,6938,0],[8066,0,6939,0],[8067,0,6940,0],[8068,0,6941,0],[8069,0,6942,0],[8070,0,6943,0],[8071,0,6944,0],[8072,0,6945,0],[8073,0,6946,0],[8074,2,6947,0],[8074,11,6947,9,"updateCurrentUser"],[8074,28,6947,26,"updateCurrentUser"],[8074,29,6947,27,"auth"],[8074,33,6947,31],[8074,35,6947,33,"user"],[8074,39,6947,37],[8074,41,6947,39],[8075,4,6948,4],[8075,11,6948,11,"util"],[8075,15,6948,15],[8075,16,6948,16,"getModularInstance"],[8075,34,6948,34],[8075,35,6948,35,"auth"],[8075,39,6948,39],[8075,40,6948,40],[8075,41,6948,41,"updateCurrentUser"],[8075,58,6948,58],[8075,59,6948,59,"user"],[8075,63,6948,63],[8075,64,6948,64],[8076,2,6949,0],[8077,2,6950,0],[8078,0,6951,0],[8079,0,6952,0],[8080,0,6953,0],[8081,0,6954,0],[8082,0,6955,0],[8083,0,6956,0],[8084,0,6957,0],[8085,0,6958,0],[8086,0,6959,0],[8087,0,6960,0],[8088,2,6961,0],[8088,11,6961,9,"signOut"],[8088,18,6961,16,"signOut"],[8088,19,6961,17,"auth"],[8088,23,6961,21],[8088,25,6961,23],[8089,4,6962,4],[8089,11,6962,11,"util"],[8089,15,6962,15],[8089,16,6962,16,"getModularInstance"],[8089,34,6962,34],[8089,35,6962,35,"auth"],[8089,39,6962,39],[8089,40,6962,40],[8089,41,6962,41,"signOut"],[8089,48,6962,48],[8089,49,6962,49],[8089,50,6962,50],[8090,2,6963,0],[8091,2,6964,0],[8092,0,6965,0],[8093,0,6966,0],[8094,0,6967,0],[8095,0,6968,0],[8096,0,6969,0],[8097,0,6970,0],[8098,0,6971,0],[8099,2,6972,0],[8099,11,6972,9,"revokeAccessToken"],[8099,28,6972,26,"revokeAccessToken"],[8099,29,6972,27,"auth"],[8099,33,6972,31],[8099,35,6972,33,"token"],[8099,40,6972,38],[8099,42,6972,40],[8100,4,6973,4],[8100,8,6973,10,"authInternal"],[8100,20,6973,22],[8100,23,6973,25,"_castAuth"],[8100,32,6973,34],[8100,33,6973,35,"auth"],[8100,37,6973,39],[8100,38,6973,40],[8101,4,6974,4],[8101,11,6974,11,"authInternal"],[8101,23,6974,23],[8101,24,6974,24,"revokeAccessToken"],[8101,41,6974,41],[8101,42,6974,42,"token"],[8101,47,6974,47],[8101,48,6974,48],[8102,2,6975,0],[8103,2,6976,0],[8104,0,6977,0],[8105,0,6978,0],[8106,0,6979,0],[8107,0,6980,0],[8108,0,6981,0],[8109,0,6982,0],[8110,0,6983,0],[8111,0,6984,0],[8112,0,6985,0],[8113,0,6986,0],[8114,0,6987,0],[8115,2,6976,0],[8115,11,6988,15,"deleteUser"],[8115,21,6988,25,"deleteUser"],[8115,22,6988,25,"_x188"],[8115,27,6988,25],[8116,4,6988,25],[8116,11,6988,25,"_deleteUser"],[8116,22,6988,25],[8116,23,6988,25,"apply"],[8116,28,6988,25],[8116,35,6988,25,"arguments"],[8116,44,6988,25],[8117,2,6988,25],[8118,2,6992,0],[8119,0,6993,0],[8120,0,6994,0],[8121,0,6995,0],[8122,0,6996,0],[8123,0,6997,0],[8124,0,6998,0],[8125,0,6999,0],[8126,0,7000,0],[8127,0,7001,0],[8128,0,7002,0],[8129,0,7003,0],[8130,0,7004,0],[8131,0,7005,0],[8132,0,7006,0],[8133,0,7007,0],[8134,2,6992,0],[8134,11,6992,0,"_deleteUser"],[8134,23,6992,0],[8135,4,6992,0,"_deleteUser"],[8135,15,6992,0],[8135,18,6992,0,"_asyncToGenerator"],[8135,35,6992,0],[8135,36,6988,0],[8135,47,6988,26,"user"],[8135,51,6988,30],[8135,53,6988,32],[8136,6,6989,4],[8136,13,6989,11,"util"],[8136,17,6989,15],[8136,18,6989,16,"getModularInstance"],[8136,36,6989,34],[8136,37,6989,35,"user"],[8136,41,6989,39],[8136,42,6989,40],[8136,43,6989,41,"delete"],[8136,49,6989,47],[8136,50,6989,48],[8136,51,6989,49],[8137,4,6990,0],[8137,5,6990,1],[8138,4,6990,1],[8138,11,6990,1,"_deleteUser"],[8138,22,6990,1],[8138,23,6990,1,"apply"],[8138,28,6990,1],[8138,35,6990,1,"arguments"],[8138,44,6990,1],[8139,2,6990,1],[8140,2,6990,1],[8140,6,7008,6,"MultiFactorSessionImpl"],[8140,28,7008,28],[8141,4,7009,4],[8141,13,7009,4,"MultiFactorSessionImpl"],[8141,36,7009,16,"type"],[8141,40,7009,20],[8141,42,7009,22,"credential"],[8141,52,7009,32],[8141,54,7009,34,"user"],[8141,58,7009,38],[8141,60,7009,40],[8142,6,7009,40,"_classCallCheck"],[8142,21,7009,40],[8142,28,7009,40,"MultiFactorSessionImpl"],[8142,50,7009,40],[8143,6,7010,8],[8143,10,7010,12],[8143,11,7010,13,"type"],[8143,15,7010,17],[8143,18,7010,20,"type"],[8143,22,7010,24],[8144,6,7011,8],[8144,10,7011,12],[8144,11,7011,13,"credential"],[8144,21,7011,23],[8144,24,7011,26,"credential"],[8144,34,7011,36],[8145,6,7012,8],[8145,10,7012,12],[8145,11,7012,13,"user"],[8145,15,7012,17],[8145,18,7012,20,"user"],[8145,22,7012,24],[8146,4,7013,4],[8147,4,7013,5],[8147,11,7013,5,"_createClass"],[8147,23,7013,5],[8147,24,7013,5,"MultiFactorSessionImpl"],[8147,46,7013,5],[8148,6,7013,5,"key"],[8148,9,7013,5],[8149,6,7013,5,"value"],[8149,11,7013,5],[8149,13,7020,4],[8149,22,7020,4,"toJSON"],[8149,28,7020,10,"toJSON"],[8149,29,7020,10],[8149,31,7020,13],[8150,8,7021,8],[8150,12,7021,14,"key"],[8150,15,7021,17],[8150,18,7021,20],[8150,22,7021,24],[8150,23,7021,25,"type"],[8150,27,7021,29],[8150,32,7021,34],[8150,40,7021,42],[8150,41,7021,43],[8150,79,7022,14],[8150,88,7022,23],[8150,91,7023,14],[8150,110,7023,33],[8151,8,7024,8],[8151,15,7024,15],[8152,10,7025,12,"multiFactorSession"],[8152,28,7025,30],[8152,30,7025,32],[8153,12,7026,16],[8153,13,7026,17,"key"],[8153,16,7026,20],[8153,19,7026,23],[8153,23,7026,27],[8153,24,7026,28,"credential"],[8154,10,7027,12],[8155,8,7028,8],[8155,9,7028,9],[8156,6,7029,4],[8157,4,7029,5],[8158,6,7029,5,"key"],[8158,9,7029,5],[8159,6,7029,5,"value"],[8159,11,7029,5],[8159,13,7014,4],[8159,22,7014,11,"_fromIdtoken"],[8159,34,7014,23,"_fromIdtoken"],[8159,35,7014,24,"idToken"],[8159,42,7014,31],[8159,44,7014,33,"user"],[8159,48,7014,37],[8159,50,7014,39],[8160,8,7015,8],[8160,15,7015,15],[8160,19,7015,19,"MultiFactorSessionImpl"],[8160,41,7015,41],[8160,42,7015,42],[8160,50,7015,50],[8160,51,7015,51],[8160,88,7015,88,"idToken"],[8160,95,7015,95],[8160,97,7015,97,"user"],[8160,101,7015,101],[8160,102,7015,102],[8161,6,7016,4],[8162,4,7016,5],[8163,6,7016,5,"key"],[8163,9,7016,5],[8164,6,7016,5,"value"],[8164,11,7016,5],[8164,13,7017,4],[8164,22,7017,11,"_fromMfaPendingCredential"],[8164,47,7017,36,"_fromMfaPendingCredential"],[8164,48,7017,37,"mfaPendingCredential"],[8164,68,7017,57],[8164,70,7017,59],[8165,8,7018,8],[8165,15,7018,15],[8165,19,7018,19,"MultiFactorSessionImpl"],[8165,41,7018,41],[8165,42,7018,42],[8165,50,7018,50],[8165,51,7018,51],[8165,89,7018,89,"mfaPendingCredential"],[8165,109,7018,109],[8165,110,7018,110],[8166,6,7019,4],[8167,4,7019,5],[8168,6,7019,5,"key"],[8168,9,7019,5],[8169,6,7019,5,"value"],[8169,11,7019,5],[8169,13,7030,4],[8169,22,7030,11,"fromJSON"],[8169,30,7030,19,"fromJSON"],[8169,31,7030,20,"obj"],[8169,34,7030,23],[8169,36,7030,25],[8170,8,7031,8],[8170,12,7031,12,"obj"],[8170,15,7031,15],[8170,17,7031,17,"multiFactorSession"],[8170,35,7031,35],[8170,37,7031,37],[8171,10,7032,12],[8171,14,7032,16,"obj"],[8171,17,7032,19],[8171,18,7032,20,"multiFactorSession"],[8171,36,7032,38],[8171,38,7032,40,"pendingCredential"],[8171,55,7032,57],[8171,57,7032,59],[8172,12,7033,16],[8172,19,7033,23,"MultiFactorSessionImpl"],[8172,41,7033,45],[8172,42,7033,46,"_fromMfaPendingCredential"],[8172,67,7033,71],[8172,68,7033,72,"obj"],[8172,71,7033,75],[8172,72,7033,76,"multiFactorSession"],[8172,90,7033,94],[8172,91,7033,95,"pendingCredential"],[8172,108,7033,112],[8172,109,7033,113],[8173,10,7034,12],[8173,11,7034,13],[8173,17,7035,17],[8173,21,7035,21,"obj"],[8173,24,7035,24],[8173,25,7035,25,"multiFactorSession"],[8173,43,7035,43],[8173,45,7035,45,"idToken"],[8173,52,7035,52],[8173,54,7035,54],[8174,12,7036,16],[8174,19,7036,23,"MultiFactorSessionImpl"],[8174,41,7036,45],[8174,42,7036,46,"_fromIdtoken"],[8174,54,7036,58],[8174,55,7036,59,"obj"],[8174,58,7036,62],[8174,59,7036,63,"multiFactorSession"],[8174,77,7036,81],[8174,78,7036,82,"idToken"],[8174,85,7036,89],[8174,86,7036,90],[8175,10,7037,12],[8176,8,7038,8],[8177,8,7039,8],[8177,15,7039,15],[8177,19,7039,19],[8178,6,7040,4],[8179,4,7040,5],[8180,2,7040,5],[8181,2,7043,0],[8182,0,7044,0],[8183,0,7045,0],[8184,0,7046,0],[8185,0,7047,0],[8186,0,7048,0],[8187,0,7049,0],[8188,0,7050,0],[8189,0,7051,0],[8190,0,7052,0],[8191,0,7053,0],[8192,0,7054,0],[8193,0,7055,0],[8194,0,7056,0],[8195,0,7057,0],[8196,0,7058,0],[8197,2,7043,0],[8197,6,7059,6,"MultiFactorResolverImpl"],[8197,29,7059,29],[8198,4,7060,4],[8198,13,7060,4,"MultiFactorResolverImpl"],[8198,37,7060,16,"session"],[8198,44,7060,23],[8198,46,7060,25,"hints"],[8198,51,7060,30],[8198,53,7060,32,"signInResolver"],[8198,67,7060,46],[8198,69,7060,48],[8199,6,7060,48,"_classCallCheck"],[8199,21,7060,48],[8199,28,7060,48,"MultiFactorResolverImpl"],[8199,51,7060,48],[8200,6,7061,8],[8200,10,7061,12],[8200,11,7061,13,"session"],[8200,18,7061,20],[8200,21,7061,23,"session"],[8200,28,7061,30],[8201,6,7062,8],[8201,10,7062,12],[8201,11,7062,13,"hints"],[8201,16,7062,18],[8201,19,7062,21,"hints"],[8201,24,7062,26],[8202,6,7063,8],[8202,10,7063,12],[8202,11,7063,13,"signInResolver"],[8202,25,7063,27],[8202,28,7063,30,"signInResolver"],[8202,42,7063,44],[8203,4,7064,4],[8204,4,7065,4],[8205,4,7065,4],[8205,11,7065,4,"_createClass"],[8205,23,7065,4],[8205,24,7065,4,"MultiFactorResolverImpl"],[8205,47,7065,4],[8206,6,7065,4,"key"],[8206,9,7065,4],[8207,6,7065,4,"value"],[8207,11,7065,4],[8208,8,7065,4],[8208,12,7065,4,"_resolveSignIn"],[8208,26,7065,4],[8208,29,7065,4,"_asyncToGenerator"],[8208,46,7065,4],[8208,47,7097,4],[8208,58,7097,24,"assertionExtern"],[8208,73,7097,39],[8208,75,7097,41],[8209,10,7098,8],[8209,14,7098,14,"assertion"],[8209,23,7098,23],[8209,26,7098,26,"assertionExtern"],[8209,41,7098,41],[8210,10,7099,8],[8210,17,7099,15],[8210,21,7099,19],[8210,22,7099,20,"signInResolver"],[8210,36,7099,34],[8210,37,7099,35,"assertion"],[8210,46,7099,44],[8210,47,7099,45],[8211,8,7100,4],[8211,9,7100,5],[8212,8,7100,5],[8212,17,7097,10,"resolveSignIn"],[8212,30,7097,23,"resolveSignIn"],[8212,31,7097,23,"_x189"],[8212,36,7097,23],[8213,10,7097,23],[8213,17,7097,23,"_resolveSignIn"],[8213,31,7097,23],[8213,32,7097,23,"apply"],[8213,37,7097,23],[8213,44,7097,23,"arguments"],[8213,53,7097,23],[8214,8,7097,23],[8215,8,7097,23],[8215,15,7097,10,"resolveSignIn"],[8215,28,7097,23],[8216,6,7097,23],[8217,4,7097,23],[8218,6,7097,23,"key"],[8218,9,7097,23],[8219,6,7097,23,"value"],[8219,11,7097,23],[8219,13,7066,4],[8219,22,7066,11,"_fromError"],[8219,32,7066,21,"_fromError"],[8219,33,7066,22,"authExtern"],[8219,43,7066,32],[8219,45,7066,34,"error"],[8219,50,7066,39],[8219,52,7066,41],[8220,8,7067,8],[8220,12,7067,14,"auth"],[8220,16,7067,18],[8220,19,7067,21,"_castAuth"],[8220,28,7067,30],[8220,29,7067,31,"authExtern"],[8220,39,7067,41],[8220,40,7067,42],[8221,8,7068,8],[8221,12,7068,14,"serverResponse"],[8221,26,7068,28],[8221,29,7068,31,"error"],[8221,34,7068,36],[8221,35,7068,37,"customData"],[8221,45,7068,47],[8221,46,7068,48,"_serverResponse"],[8221,61,7068,63],[8222,8,7069,8],[8222,12,7069,14,"hints"],[8222,17,7069,19],[8222,20,7069,22],[8222,21,7069,23,"serverResponse"],[8222,35,7069,37],[8222,36,7069,38,"mfaInfo"],[8222,43,7069,45],[8222,47,7069,49],[8222,49,7069,51],[8222,51,7069,53,"map"],[8222,54,7069,56],[8222,55,7069,57,"enrollment"],[8222,65,7069,67],[8222,69,7069,71,"MultiFactorInfoImpl"],[8222,88,7069,90],[8222,89,7069,91,"_fromServerResponse"],[8222,108,7069,110],[8222,109,7069,111,"auth"],[8222,113,7069,115],[8222,115,7069,117,"enrollment"],[8222,125,7069,127],[8222,126,7069,128],[8222,127,7069,129],[8223,8,7070,8,"_assert"],[8223,15,7070,15],[8223,16,7070,16,"serverResponse"],[8223,30,7070,30],[8223,31,7070,31,"mfaPendingCredential"],[8223,51,7070,51],[8223,53,7070,53,"auth"],[8223,57,7070,57],[8223,59,7070,59],[8223,75,7070,75],[8223,76,7070,76],[8223,110,7070,110],[8223,111,7070,111],[8224,8,7071,8],[8224,12,7071,14,"session"],[8224,19,7071,21],[8224,22,7071,24,"MultiFactorSessionImpl"],[8224,44,7071,46],[8224,45,7071,47,"_fromMfaPendingCredential"],[8224,70,7071,72],[8224,71,7071,73,"serverResponse"],[8224,85,7071,87],[8224,86,7071,88,"mfaPendingCredential"],[8224,106,7071,108],[8224,107,7071,109],[8225,8,7072,8],[8225,15,7072,15],[8225,19,7072,19,"MultiFactorResolverImpl"],[8225,42,7072,42],[8225,43,7072,43,"session"],[8225,50,7072,50],[8225,52,7072,52,"hints"],[8225,57,7072,57],[8226,10,7072,57],[8226,14,7072,57,"_ref20"],[8226,20,7072,57],[8226,23,7072,57,"_asyncToGenerator"],[8226,40,7072,57],[8226,41,7072,59],[8226,52,7072,66,"assertion"],[8226,61,7072,75],[8226,63,7072,80],[8227,12,7073,12],[8227,16,7073,18,"mfaResponse"],[8227,27,7073,29],[8227,36,7073,38,"assertion"],[8227,45,7073,47],[8227,46,7073,48,"_process"],[8227,54,7073,56],[8227,55,7073,57,"auth"],[8227,59,7073,61],[8227,61,7073,63,"session"],[8227,68,7073,70],[8227,69,7073,71],[8228,12,7074,12],[8229,12,7075,12],[8229,19,7075,19,"serverResponse"],[8229,33,7075,33],[8229,34,7075,34,"mfaInfo"],[8229,41,7075,41],[8230,12,7076,12],[8230,19,7076,19,"serverResponse"],[8230,33,7076,33],[8230,34,7076,34,"mfaPendingCredential"],[8230,54,7076,54],[8231,12,7077,12],[8232,12,7078,12],[8232,16,7078,18,"idTokenResponse"],[8232,31,7078,33],[8232,34,7078,36],[8233,14,7079,16],[8233,17,7079,19,"serverResponse"],[8233,31,7079,33],[8234,14,7080,16,"idToken"],[8234,21,7080,23],[8234,23,7080,25,"mfaResponse"],[8234,34,7080,36],[8234,35,7080,37,"idToken"],[8234,42,7080,44],[8235,14,7081,16,"refreshToken"],[8235,26,7081,28],[8235,28,7081,30,"mfaResponse"],[8235,39,7081,41],[8235,40,7081,42,"refreshToken"],[8236,12,7082,12],[8236,13,7082,13],[8237,12,7083,12],[8238,12,7084,12],[8238,20,7084,20,"error"],[8238,25,7084,25],[8238,26,7084,26,"operationType"],[8238,39,7084,39],[8239,14,7085,16],[8239,19,7085,21],[8239,27,7085,29],[8239,28,7085,30],[8240,16,7086,20],[8240,20,7086,26,"userCredential"],[8240,34,7086,40],[8240,43,7086,49,"UserCredentialImpl"],[8240,61,7086,67],[8240,62,7086,68,"_fromIdTokenResponse"],[8240,82,7086,88],[8240,83,7086,89,"auth"],[8240,87,7086,93],[8240,89,7086,95,"error"],[8240,94,7086,100],[8240,95,7086,101,"operationType"],[8240,108,7086,114],[8240,110,7086,116,"idTokenResponse"],[8240,125,7086,131],[8240,126,7086,132],[8241,16,7087,20],[8241,22,7087,26,"auth"],[8241,26,7087,30],[8241,27,7087,31,"_updateCurrentUser"],[8241,45,7087,49],[8241,46,7087,50,"userCredential"],[8241,60,7087,64],[8241,61,7087,65,"user"],[8241,65,7087,69],[8241,66,7087,70],[8242,16,7088,20],[8242,23,7088,27,"userCredential"],[8242,37,7088,41],[8243,14,7089,16],[8243,19,7089,21],[8243,35,7089,37],[8243,36,7089,38],[8244,16,7090,20,"_assert"],[8244,23,7090,27],[8244,24,7090,28,"error"],[8244,29,7090,33],[8244,30,7090,34,"user"],[8244,34,7090,38],[8244,36,7090,40,"auth"],[8244,40,7090,44],[8244,42,7090,46],[8244,58,7090,62],[8244,59,7090,63],[8244,93,7090,97],[8244,94,7090,98],[8245,16,7091,20],[8245,23,7091,27,"UserCredentialImpl"],[8245,41,7091,45],[8245,42,7091,46,"_forOperation"],[8245,55,7091,59],[8245,56,7091,60,"error"],[8245,61,7091,65],[8245,62,7091,66,"user"],[8245,66,7091,70],[8245,68,7091,72,"error"],[8245,73,7091,77],[8245,74,7091,78,"operationType"],[8245,87,7091,91],[8245,89,7091,93,"idTokenResponse"],[8245,104,7091,108],[8245,105,7091,109],[8246,14,7092,16],[8247,16,7093,20,"_fail"],[8247,21,7093,25],[8247,22,7093,26,"auth"],[8247,26,7093,30],[8247,28,7093,32],[8247,44,7093,48],[8247,45,7093,49],[8247,79,7093,83],[8247,80,7093,84],[8248,12,7094,12],[8249,10,7095,8],[8249,11,7095,9],[8250,10,7095,9],[8250,27,7095,9,"_x190"],[8250,32,7095,9],[8251,12,7095,9],[8251,19,7095,9,"_ref20"],[8251,25,7095,9],[8251,26,7095,9,"apply"],[8251,31,7095,9],[8251,38,7095,9,"arguments"],[8251,47,7095,9],[8252,10,7095,9],[8253,8,7095,9],[8253,12,7095,10],[8254,6,7096,4],[8255,4,7096,5],[8256,2,7096,5],[8257,2,7102,0],[8258,0,7103,0],[8259,0,7104,0],[8260,0,7105,0],[8261,0,7106,0],[8262,0,7107,0],[8263,0,7108,0],[8264,0,7109,0],[8265,0,7110,0],[8266,0,7111,0],[8267,2,7112,0],[8267,11,7112,9,"getMultiFactorResolver"],[8267,33,7112,31,"getMultiFactorResolver"],[8267,34,7112,32,"auth"],[8267,38,7112,36],[8267,40,7112,38,"error"],[8267,45,7112,43],[8267,47,7112,45],[8268,4,7113,4],[8268,8,7113,10,"authModular"],[8268,19,7113,21],[8268,22,7113,24,"util"],[8268,26,7113,28],[8268,27,7113,29,"getModularInstance"],[8268,45,7113,47],[8268,46,7113,48,"auth"],[8268,50,7113,52],[8268,51,7113,53],[8269,4,7114,4],[8269,8,7114,10,"errorInternal"],[8269,21,7114,23],[8269,24,7114,26,"error"],[8269,29,7114,31],[8270,4,7115,4,"_assert"],[8270,11,7115,11],[8270,12,7115,12,"error"],[8270,17,7115,17],[8270,18,7115,18,"customData"],[8270,28,7115,28],[8270,29,7115,29,"operationType"],[8270,42,7115,42],[8270,44,7115,44,"authModular"],[8270,55,7115,55],[8270,57,7115,57],[8270,73,7115,73],[8270,74,7115,74],[8270,108,7115,108],[8270,109,7115,109],[8271,4,7116,4,"_assert"],[8271,11,7116,11],[8271,12,7116,12,"errorInternal"],[8271,25,7116,25],[8271,26,7116,26,"customData"],[8271,36,7116,36],[8271,37,7116,37,"_serverResponse"],[8271,52,7116,52],[8271,54,7116,54,"mfaPendingCredential"],[8271,74,7116,74],[8271,76,7116,76,"authModular"],[8271,87,7116,87],[8271,89,7116,89],[8271,105,7116,105],[8271,106,7116,106],[8271,140,7116,140],[8271,141,7116,141],[8272,4,7117,4],[8272,11,7117,11,"MultiFactorResolverImpl"],[8272,34,7117,34],[8272,35,7117,35,"_fromError"],[8272,45,7117,45],[8272,46,7117,46,"authModular"],[8272,57,7117,57],[8272,59,7117,59,"errorInternal"],[8272,72,7117,72],[8272,73,7117,73],[8273,2,7118,0],[8275,2,7120,0],[8276,0,7121,0],[8277,0,7122,0],[8278,0,7123,0],[8279,0,7124,0],[8280,0,7125,0],[8281,0,7126,0],[8282,0,7127,0],[8283,0,7128,0],[8284,0,7129,0],[8285,0,7130,0],[8286,0,7131,0],[8287,0,7132,0],[8288,0,7133,0],[8289,0,7134,0],[8290,0,7135,0],[8291,2,7136,0],[8291,11,7136,9,"startEnrollPhoneMfa"],[8291,30,7136,28,"startEnrollPhoneMfa"],[8291,31,7136,29,"auth"],[8291,35,7136,33],[8291,37,7136,35,"request"],[8291,44,7136,42],[8291,46,7136,44],[8292,4,7137,4],[8292,11,7137,11,"_performApiRequest"],[8292,29,7137,29],[8292,30,7137,30,"auth"],[8292,34,7137,34],[8292,36,7137,36],[8292,42,7137,42],[8292,43,7137,43],[8292,66,7137,66],[8292,100,7137,100],[8292,101,7137,101],[8292,138,7137,138,"_addTidIfNecessary"],[8292,156,7137,156],[8292,157,7137,157,"auth"],[8292,161,7137,161],[8292,163,7137,163,"request"],[8292,170,7137,170],[8292,171,7137,171],[8292,172,7137,172],[8293,2,7138,0],[8294,2,7139,0],[8294,11,7139,9,"finalizeEnrollPhoneMfa"],[8294,33,7139,31,"finalizeEnrollPhoneMfa"],[8294,34,7139,32,"auth"],[8294,38,7139,36],[8294,40,7139,38,"request"],[8294,47,7139,45],[8294,49,7139,47],[8295,4,7140,4],[8295,11,7140,11,"_performApiRequest"],[8295,29,7140,29],[8295,30,7140,30,"auth"],[8295,34,7140,34],[8295,36,7140,36],[8295,42,7140,42],[8295,43,7140,43],[8295,66,7140,66],[8295,103,7140,103],[8295,104,7140,104],[8295,144,7140,144,"_addTidIfNecessary"],[8295,162,7140,162],[8295,163,7140,163,"auth"],[8295,167,7140,167],[8295,169,7140,169,"request"],[8295,176,7140,176],[8295,177,7140,177],[8295,178,7140,178],[8296,2,7141,0],[8297,2,7142,0],[8297,11,7142,9,"startEnrollTotpMfa"],[8297,29,7142,27,"startEnrollTotpMfa"],[8297,30,7142,28,"auth"],[8297,34,7142,32],[8297,36,7142,34,"request"],[8297,43,7142,41],[8297,45,7142,43],[8298,4,7143,4],[8298,11,7143,11,"_performApiRequest"],[8298,29,7143,29],[8298,30,7143,30,"auth"],[8298,34,7143,34],[8298,36,7143,36],[8298,42,7143,42],[8298,43,7143,43],[8298,66,7143,66],[8298,100,7143,100],[8298,101,7143,101],[8298,138,7143,138,"_addTidIfNecessary"],[8298,156,7143,156],[8298,157,7143,157,"auth"],[8298,161,7143,161],[8298,163,7143,163,"request"],[8298,170,7143,170],[8298,171,7143,171],[8298,172,7143,172],[8299,2,7144,0],[8300,2,7145,0],[8300,11,7145,9,"finalizeEnrollTotpMfa"],[8300,32,7145,30,"finalizeEnrollTotpMfa"],[8300,33,7145,31,"auth"],[8300,37,7145,35],[8300,39,7145,37,"request"],[8300,46,7145,44],[8300,48,7145,46],[8301,4,7146,4],[8301,11,7146,11,"_performApiRequest"],[8301,29,7146,29],[8301,30,7146,30,"auth"],[8301,34,7146,34],[8301,36,7146,36],[8301,42,7146,42],[8301,43,7146,43],[8301,66,7146,66],[8301,103,7146,103],[8301,104,7146,104],[8301,144,7146,144,"_addTidIfNecessary"],[8301,162,7146,162],[8301,163,7146,163,"auth"],[8301,167,7146,167],[8301,169,7146,169,"request"],[8301,176,7146,176],[8301,177,7146,177],[8301,178,7146,178],[8302,2,7147,0],[8303,2,7148,0],[8303,11,7148,9,"withdrawMfa"],[8303,22,7148,20,"withdrawMfa"],[8303,23,7148,21,"auth"],[8303,27,7148,25],[8303,29,7148,27,"request"],[8303,36,7148,34],[8303,38,7148,36],[8304,4,7149,4],[8304,11,7149,11,"_performApiRequest"],[8304,29,7149,29],[8304,30,7149,30,"auth"],[8304,34,7149,34],[8304,36,7149,36],[8304,42,7149,42],[8304,43,7149,43],[8304,66,7149,66],[8304,103,7149,103],[8304,104,7149,104],[8304,133,7149,133,"_addTidIfNecessary"],[8304,151,7149,151],[8304,152,7149,152,"auth"],[8304,156,7149,156],[8304,158,7149,158,"request"],[8304,165,7149,165],[8304,166,7149,166],[8304,167,7149,167],[8305,2,7150,0],[8306,2,7150,1],[8306,6,7152,6,"MultiFactorUserImpl"],[8306,25,7152,25],[8307,4,7153,4],[8307,13,7153,4,"MultiFactorUserImpl"],[8307,33,7153,16,"user"],[8307,37,7153,20],[8307,39,7153,22],[8308,6,7153,22,"_classCallCheck"],[8308,21,7153,22],[8308,28,7153,22,"MultiFactorUserImpl"],[8308,47,7153,22],[8309,6,7154,8],[8309,10,7154,12],[8309,11,7154,13,"user"],[8309,15,7154,17],[8309,18,7154,20,"user"],[8309,22,7154,24],[8310,6,7155,8],[8310,10,7155,12],[8310,11,7155,13,"enrolledFactors"],[8310,26,7155,28],[8310,29,7155,31],[8310,31,7155,33],[8311,6,7156,8,"user"],[8311,10,7156,12],[8311,11,7156,13,"_onReload"],[8311,20,7156,22],[8311,21,7156,23,"userInfo"],[8311,29,7156,31],[8311,33,7156,35],[8312,8,7157,12],[8312,12,7157,16,"userInfo"],[8312,20,7157,24],[8312,21,7157,25,"mfaInfo"],[8312,28,7157,32],[8312,30,7157,34],[8313,10,7158,16],[8313,14,7158,20],[8313,15,7158,21,"enrolledFactors"],[8313,30,7158,36],[8313,33,7158,39,"userInfo"],[8313,41,7158,47],[8313,42,7158,48,"mfaInfo"],[8313,49,7158,55],[8313,50,7158,56,"map"],[8313,53,7158,59],[8313,54,7158,60,"enrollment"],[8313,64,7158,70],[8313,68,7158,74,"MultiFactorInfoImpl"],[8313,87,7158,93],[8313,88,7158,94,"_fromServerResponse"],[8313,107,7158,113],[8313,108,7158,114,"user"],[8313,112,7158,118],[8313,113,7158,119,"auth"],[8313,117,7158,123],[8313,119,7158,125,"enrollment"],[8313,129,7158,135],[8313,130,7158,136],[8313,131,7158,137],[8314,8,7159,12],[8315,6,7160,8],[8315,7,7160,9],[8315,8,7160,10],[8316,4,7161,4],[8317,4,7161,5],[8317,11,7161,5,"_createClass"],[8317,23,7161,5],[8317,24,7161,5,"MultiFactorUserImpl"],[8317,43,7161,5],[8318,6,7161,5,"key"],[8318,9,7161,5],[8319,6,7161,5,"value"],[8319,11,7161,5],[8320,8,7161,5],[8320,12,7161,5,"_getSession"],[8320,23,7161,5],[8320,26,7161,5,"_asyncToGenerator"],[8320,43,7161,5],[8320,44,7165,4],[8320,57,7165,23],[8321,10,7166,8],[8321,17,7166,15,"MultiFactorSessionImpl"],[8321,39,7166,37],[8321,40,7166,38,"_fromIdtoken"],[8321,52,7166,50],[8321,59,7166,57],[8321,63,7166,61],[8321,64,7166,62,"user"],[8321,68,7166,66],[8321,69,7166,67,"getIdToken"],[8321,79,7166,77],[8321,80,7166,78],[8321,81,7166,79],[8321,83,7166,81],[8321,87,7166,85],[8321,88,7166,86,"user"],[8321,92,7166,90],[8321,93,7166,91],[8322,8,7167,4],[8322,9,7167,5],[8323,8,7167,5],[8323,17,7165,10,"getSession"],[8323,27,7165,20,"getSession"],[8323,28,7165,20],[8324,10,7165,20],[8324,17,7165,20,"_getSession"],[8324,28,7165,20],[8324,29,7165,20,"apply"],[8324,34,7165,20],[8324,41,7165,20,"arguments"],[8324,50,7165,20],[8325,8,7165,20],[8326,8,7165,20],[8326,15,7165,10,"getSession"],[8326,25,7165,20],[8327,6,7165,20],[8328,4,7165,20],[8329,6,7165,20,"key"],[8329,9,7165,20],[8330,6,7165,20,"value"],[8330,11,7165,20],[8331,8,7165,20],[8331,12,7165,20,"_enroll"],[8331,19,7165,20],[8331,22,7165,20,"_asyncToGenerator"],[8331,39,7165,20],[8331,40,7168,4],[8331,51,7168,17,"assertionExtern"],[8331,66,7168,32],[8331,68,7168,34,"displayName"],[8331,79,7168,45],[8331,81,7168,47],[8332,10,7169,8],[8332,14,7169,14,"assertion"],[8332,23,7169,23],[8332,26,7169,26,"assertionExtern"],[8332,41,7169,41],[8333,10,7170,8],[8333,14,7170,14,"session"],[8333,21,7170,21],[8333,30,7170,31],[8333,34,7170,35],[8333,35,7170,36,"getSession"],[8333,45,7170,46],[8333,46,7170,47],[8333,47,7170,49],[8334,10,7171,8],[8334,14,7171,14,"finalizeMfaResponse"],[8334,33,7171,33],[8334,42,7171,42,"_logoutIfInvalidated"],[8334,62,7171,62],[8334,63,7171,63],[8334,67,7171,67],[8334,68,7171,68,"user"],[8334,72,7171,72],[8334,74,7171,74,"assertion"],[8334,83,7171,83],[8334,84,7171,84,"_process"],[8334,92,7171,92],[8334,93,7171,93],[8334,97,7171,97],[8334,98,7171,98,"user"],[8334,102,7171,102],[8334,103,7171,103,"auth"],[8334,107,7171,107],[8334,109,7171,109,"session"],[8334,116,7171,116],[8334,118,7171,118,"displayName"],[8334,129,7171,129],[8334,130,7171,130],[8334,131,7171,131],[8335,10,7172,8],[8336,10,7173,8],[8337,10,7174,8],[8337,16,7174,14],[8337,20,7174,18],[8337,21,7174,19,"user"],[8337,25,7174,23],[8337,26,7174,24,"_updateTokensIfNecessary"],[8337,50,7174,48],[8337,51,7174,49,"finalizeMfaResponse"],[8337,70,7174,68],[8337,71,7174,69],[8338,10,7175,8],[8339,10,7176,8],[8340,10,7177,8],[8341,10,7178,8],[8341,17,7178,15],[8341,21,7178,19],[8341,22,7178,20,"user"],[8341,26,7178,24],[8341,27,7178,25,"reload"],[8341,33,7178,31],[8341,34,7178,32],[8341,35,7178,33],[8342,8,7179,4],[8342,9,7179,5],[8343,8,7179,5],[8343,17,7168,10,"enroll"],[8343,23,7168,16,"enroll"],[8343,24,7168,16,"_x191"],[8343,29,7168,16],[8343,31,7168,16,"_x192"],[8343,36,7168,16],[8344,10,7168,16],[8344,17,7168,16,"_enroll"],[8344,24,7168,16],[8344,25,7168,16,"apply"],[8344,30,7168,16],[8344,37,7168,16,"arguments"],[8344,46,7168,16],[8345,8,7168,16],[8346,8,7168,16],[8346,15,7168,10,"enroll"],[8346,21,7168,16],[8347,6,7168,16],[8348,4,7168,16],[8349,6,7168,16,"key"],[8349,9,7168,16],[8350,6,7168,16,"value"],[8350,11,7168,16],[8351,8,7168,16],[8351,12,7168,16,"_unenroll"],[8351,21,7168,16],[8351,24,7168,16,"_asyncToGenerator"],[8351,41,7168,16],[8351,42,7180,4],[8351,53,7180,19,"infoOrUid"],[8351,62,7180,28],[8351,64,7180,30],[8352,10,7181,8],[8352,14,7181,14,"mfaEnrollmentId"],[8352,29,7181,29],[8352,32,7181,32],[8352,39,7181,39,"infoOrUid"],[8352,48,7181,48],[8352,53,7181,53],[8352,61,7181,61],[8352,64,7181,64,"infoOrUid"],[8352,73,7181,73],[8352,76,7181,76,"infoOrUid"],[8352,85,7181,85],[8352,86,7181,86,"uid"],[8352,89,7181,89],[8353,10,7182,8],[8353,14,7182,14,"idToken"],[8353,21,7182,21],[8353,30,7182,30],[8353,34,7182,34],[8353,35,7182,35,"user"],[8353,39,7182,39],[8353,40,7182,40,"getIdToken"],[8353,50,7182,50],[8353,51,7182,51],[8353,52,7182,52],[8354,10,7183,8],[8354,14,7183,12],[8355,12,7184,12],[8355,16,7184,18,"idTokenResponse"],[8355,31,7184,33],[8355,40,7184,42,"_logoutIfInvalidated"],[8355,60,7184,62],[8355,61,7184,63],[8355,65,7184,67],[8355,66,7184,68,"user"],[8355,70,7184,72],[8355,72,7184,74,"withdrawMfa"],[8355,83,7184,85],[8355,84,7184,86],[8355,88,7184,90],[8355,89,7184,91,"user"],[8355,93,7184,95],[8355,94,7184,96,"auth"],[8355,98,7184,100],[8355,100,7184,102],[8356,14,7185,16,"idToken"],[8356,21,7185,23],[8357,14,7186,16,"mfaEnrollmentId"],[8358,12,7187,12],[8358,13,7187,13],[8358,14,7187,14],[8358,15,7187,15],[8359,12,7188,12],[8360,12,7189,12],[8360,16,7189,16],[8360,17,7189,17,"enrolledFactors"],[8360,32,7189,32],[8360,35,7189,35],[8360,39,7189,39],[8360,40,7189,40,"enrolledFactors"],[8360,55,7189,55],[8360,56,7189,56,"filter"],[8360,62,7189,62],[8360,63,7189,63,"_ref21"],[8360,69,7189,63],[8361,14,7189,63],[8361,18,7189,66,"uid"],[8361,21,7189,69],[8361,24,7189,69,"_ref21"],[8361,30,7189,69],[8361,31,7189,66,"uid"],[8361,34,7189,69],[8362,14,7189,69],[8362,21,7189,76,"uid"],[8362,24,7189,79],[8362,29,7189,84,"mfaEnrollmentId"],[8362,44,7189,99],[8363,12,7189,99],[8363,14,7189,100],[8364,12,7190,12],[8365,12,7191,12],[8366,12,7192,12],[8367,12,7193,12],[8368,12,7194,12],[8368,18,7194,18],[8368,22,7194,22],[8368,23,7194,23,"user"],[8368,27,7194,27],[8368,28,7194,28,"_updateTokensIfNecessary"],[8368,52,7194,52],[8368,53,7194,53,"idTokenResponse"],[8368,68,7194,68],[8368,69,7194,69],[8369,12,7195,12],[8369,18,7195,18],[8369,22,7195,22],[8369,23,7195,23,"user"],[8369,27,7195,27],[8369,28,7195,28,"reload"],[8369,34,7195,34],[8369,35,7195,35],[8369,36,7195,36],[8370,10,7196,8],[8370,11,7196,9],[8370,12,7197,8],[8370,19,7197,15,"e"],[8370,20,7197,16],[8370,22,7197,18],[8371,12,7198,12],[8371,18,7198,18,"e"],[8371,19,7198,19],[8372,10,7199,8],[8373,8,7200,4],[8373,9,7200,5],[8374,8,7200,5],[8374,17,7180,10,"unenroll"],[8374,25,7180,18,"unenroll"],[8374,26,7180,18,"_x193"],[8374,31,7180,18],[8375,10,7180,18],[8375,17,7180,18,"_unenroll"],[8375,26,7180,18],[8375,27,7180,18,"apply"],[8375,32,7180,18],[8375,39,7180,18,"arguments"],[8375,48,7180,18],[8376,8,7180,18],[8377,8,7180,18],[8377,15,7180,10,"unenroll"],[8377,23,7180,18],[8378,6,7180,18],[8379,4,7180,18],[8380,6,7180,18,"key"],[8380,9,7180,18],[8381,6,7180,18,"value"],[8381,11,7180,18],[8381,13,7162,4],[8381,22,7162,11,"_fromUser"],[8381,31,7162,20,"_fromUser"],[8381,32,7162,21,"user"],[8381,36,7162,25],[8381,38,7162,27],[8382,8,7163,8],[8382,15,7163,15],[8382,19,7163,19,"MultiFactorUserImpl"],[8382,38,7163,38],[8382,39,7163,39,"user"],[8382,43,7163,43],[8382,44,7163,44],[8383,6,7164,4],[8384,4,7164,5],[8385,2,7164,5],[8386,2,7202,0],[8386,6,7202,6,"multiFactorUserCache"],[8386,26,7202,26],[8386,29,7202,29],[8386,33,7202,33,"WeakMap"],[8386,40,7202,40],[8386,41,7202,41],[8386,42,7202,42],[8387,2,7203,0],[8388,0,7204,0],[8389,0,7205,0],[8390,0,7206,0],[8391,0,7207,0],[8392,0,7208,0],[8393,0,7209,0],[8394,0,7210,0],[8395,0,7211,0],[8396,0,7212,0],[8397,2,7213,0],[8397,11,7213,9,"multiFactor"],[8397,22,7213,20,"multiFactor"],[8397,23,7213,21,"user"],[8397,27,7213,25],[8397,29,7213,27],[8398,4,7214,4],[8398,8,7214,10,"userModular"],[8398,19,7214,21],[8398,22,7214,24,"util"],[8398,26,7214,28],[8398,27,7214,29,"getModularInstance"],[8398,45,7214,47],[8398,46,7214,48,"user"],[8398,50,7214,52],[8398,51,7214,53],[8399,4,7215,4],[8399,8,7215,8],[8399,9,7215,9,"multiFactorUserCache"],[8399,29,7215,29],[8399,30,7215,30,"has"],[8399,33,7215,33],[8399,34,7215,34,"userModular"],[8399,45,7215,45],[8399,46,7215,46],[8399,48,7215,48],[8400,6,7216,8,"multiFactorUserCache"],[8400,26,7216,28],[8400,27,7216,29,"set"],[8400,30,7216,32],[8400,31,7216,33,"userModular"],[8400,42,7216,44],[8400,44,7216,46,"MultiFactorUserImpl"],[8400,63,7216,65],[8400,64,7216,66,"_fromUser"],[8400,73,7216,75],[8400,74,7216,76,"userModular"],[8400,85,7216,87],[8400,86,7216,88],[8400,87,7216,89],[8401,4,7217,4],[8402,4,7218,4],[8402,11,7218,11,"multiFactorUserCache"],[8402,31,7218,31],[8402,32,7218,32,"get"],[8402,35,7218,35],[8402,36,7218,36,"userModular"],[8402,47,7218,47],[8402,48,7218,48],[8403,2,7219,0],[8404,2,7221,0],[8404,6,7221,4,"name"],[8404,10,7221,8],[8404,13,7221,11],[8404,29,7221,27],[8405,2,7222,0],[8405,6,7222,4,"version"],[8405,13,7222,11],[8405,16,7222,14],[8405,24,7222,22],[8407,2,7224,0],[8408,0,7225,0],[8409,0,7226,0],[8410,0,7227,0],[8411,0,7228,0],[8412,0,7229,0],[8413,0,7230,0],[8414,0,7231,0],[8415,0,7232,0],[8416,0,7233,0],[8417,0,7234,0],[8418,0,7235,0],[8419,0,7236,0],[8420,0,7237,0],[8421,0,7238,0],[8422,0,7239,0],[8423,2,7224,0],[8423,6,7240,6,"AuthInterop"],[8423,17,7240,17],[8424,4,7241,4],[8424,13,7241,4,"AuthInterop"],[8424,25,7241,16,"auth"],[8424,29,7241,20],[8424,31,7241,22],[8425,6,7241,22,"_classCallCheck"],[8425,21,7241,22],[8425,28,7241,22,"AuthInterop"],[8425,39,7241,22],[8426,6,7242,8],[8426,10,7242,12],[8426,11,7242,13,"auth"],[8426,15,7242,17],[8426,18,7242,20,"auth"],[8426,22,7242,24],[8427,6,7243,8],[8427,10,7243,12],[8427,11,7243,13,"internalListeners"],[8427,28,7243,30],[8427,31,7243,33],[8427,35,7243,37,"Map"],[8427,38,7243,40],[8427,39,7243,41],[8427,40,7243,42],[8428,4,7244,4],[8429,4,7244,5],[8429,11,7244,5,"_createClass"],[8429,23,7244,5],[8429,24,7244,5,"AuthInterop"],[8429,35,7244,5],[8430,6,7244,5,"key"],[8430,9,7244,5],[8431,6,7244,5,"value"],[8431,11,7244,5],[8431,13,7245,4],[8431,22,7245,4,"getUid"],[8431,28,7245,10,"getUid"],[8431,29,7245,10],[8431,31,7245,13],[8432,8,7246,8],[8432,12,7246,12],[8432,13,7246,13,"assertAuthConfigured"],[8432,33,7246,33],[8432,34,7246,34],[8432,35,7246,35],[8433,8,7247,8],[8433,15,7247,15],[8433,19,7247,19],[8433,20,7247,20,"auth"],[8433,24,7247,24],[8433,25,7247,25,"currentUser"],[8433,36,7247,36],[8433,38,7247,38,"uid"],[8433,41,7247,41],[8433,45,7247,45],[8433,49,7247,49],[8434,6,7248,4],[8435,4,7248,5],[8436,6,7248,5,"key"],[8436,9,7248,5],[8437,6,7248,5,"value"],[8437,11,7248,5],[8438,8,7248,5],[8438,12,7248,5,"_getToken2"],[8438,22,7248,5],[8438,25,7248,5,"_asyncToGenerator"],[8438,42,7248,5],[8438,43,7249,4],[8438,54,7249,19,"forceRefresh"],[8438,66,7249,31],[8438,68,7249,33],[8439,10,7250,8],[8439,14,7250,12],[8439,15,7250,13,"assertAuthConfigured"],[8439,35,7250,33],[8439,36,7250,34],[8439,37,7250,35],[8440,10,7251,8],[8440,16,7251,14],[8440,20,7251,18],[8440,21,7251,19,"auth"],[8440,25,7251,23],[8440,26,7251,24,"_initializationPromise"],[8440,48,7251,46],[8441,10,7252,8],[8441,14,7252,12],[8441,15,7252,13],[8441,19,7252,17],[8441,20,7252,18,"auth"],[8441,24,7252,22],[8441,25,7252,23,"currentUser"],[8441,36,7252,34],[8441,38,7252,36],[8442,12,7253,12],[8442,19,7253,19],[8442,23,7253,23],[8443,10,7254,8],[8444,10,7255,8],[8444,14,7255,14,"accessToken"],[8444,25,7255,25],[8444,34,7255,34],[8444,38,7255,38],[8444,39,7255,39,"auth"],[8444,43,7255,43],[8444,44,7255,44,"currentUser"],[8444,55,7255,55],[8444,56,7255,56,"getIdToken"],[8444,66,7255,66],[8444,67,7255,67,"forceRefresh"],[8444,79,7255,79],[8444,80,7255,80],[8445,10,7256,8],[8445,17,7256,15],[8446,12,7256,17,"accessToken"],[8447,10,7256,29],[8447,11,7256,30],[8448,8,7257,4],[8448,9,7257,5],[8449,8,7257,5],[8449,17,7249,10,"getToken"],[8449,25,7249,18,"getToken"],[8449,26,7249,18,"_x194"],[8449,31,7249,18],[8450,10,7249,18],[8450,17,7249,18,"_getToken2"],[8450,27,7249,18],[8450,28,7249,18,"apply"],[8450,33,7249,18],[8450,40,7249,18,"arguments"],[8450,49,7249,18],[8451,8,7249,18],[8452,8,7249,18],[8452,15,7249,10,"getToken"],[8452,23,7249,18],[8453,6,7249,18],[8454,4,7249,18],[8455,6,7249,18,"key"],[8455,9,7249,18],[8456,6,7249,18,"value"],[8456,11,7249,18],[8456,13,7258,4],[8456,22,7258,4,"addAuthTokenListener"],[8456,42,7258,24,"addAuthTokenListener"],[8456,43,7258,25,"listener"],[8456,51,7258,33],[8456,53,7258,35],[8457,8,7259,8],[8457,12,7259,12],[8457,13,7259,13,"assertAuthConfigured"],[8457,33,7259,33],[8457,34,7259,34],[8457,35,7259,35],[8458,8,7260,8],[8458,12,7260,12],[8458,16,7260,16],[8458,17,7260,17,"internalListeners"],[8458,34,7260,34],[8458,35,7260,35,"has"],[8458,38,7260,38],[8458,39,7260,39,"listener"],[8458,47,7260,47],[8458,48,7260,48],[8458,50,7260,50],[8459,10,7261,12],[8460,8,7262,8],[8461,8,7263,8],[8461,12,7263,14,"unsubscribe"],[8461,23,7263,25],[8461,26,7263,28],[8461,30,7263,32],[8461,31,7263,33,"auth"],[8461,35,7263,37],[8461,36,7263,38,"onIdTokenChanged"],[8461,52,7263,54],[8461,53,7263,55,"user"],[8461,57,7263,59],[8461,61,7263,63],[8462,10,7264,12,"listener"],[8462,18,7264,20],[8462,19,7264,21,"user"],[8462,23,7264,25],[8462,25,7264,27,"stsTokenManager"],[8462,40,7264,42],[8462,41,7264,43,"accessToken"],[8462,52,7264,54],[8462,56,7264,58],[8462,60,7264,62],[8462,61,7264,63],[8463,8,7265,8],[8463,9,7265,9],[8463,10,7265,10],[8464,8,7266,8],[8464,12,7266,12],[8464,13,7266,13,"internalListeners"],[8464,30,7266,30],[8464,31,7266,31,"set"],[8464,34,7266,34],[8464,35,7266,35,"listener"],[8464,43,7266,43],[8464,45,7266,45,"unsubscribe"],[8464,56,7266,56],[8464,57,7266,57],[8465,8,7267,8],[8465,12,7267,12],[8465,13,7267,13,"updateProactiveRefresh"],[8465,35,7267,35],[8465,36,7267,36],[8465,37,7267,37],[8466,6,7268,4],[8467,4,7268,5],[8468,6,7268,5,"key"],[8468,9,7268,5],[8469,6,7268,5,"value"],[8469,11,7268,5],[8469,13,7269,4],[8469,22,7269,4,"removeAuthTokenListener"],[8469,45,7269,27,"removeAuthTokenListener"],[8469,46,7269,28,"listener"],[8469,54,7269,36],[8469,56,7269,38],[8470,8,7270,8],[8470,12,7270,12],[8470,13,7270,13,"assertAuthConfigured"],[8470,33,7270,33],[8470,34,7270,34],[8470,35,7270,35],[8471,8,7271,8],[8471,12,7271,14,"unsubscribe"],[8471,23,7271,25],[8471,26,7271,28],[8471,30,7271,32],[8471,31,7271,33,"internalListeners"],[8471,48,7271,50],[8471,49,7271,51,"get"],[8471,52,7271,54],[8471,53,7271,55,"listener"],[8471,61,7271,63],[8471,62,7271,64],[8472,8,7272,8],[8472,12,7272,12],[8472,13,7272,13,"unsubscribe"],[8472,24,7272,24],[8472,26,7272,26],[8473,10,7273,12],[8474,8,7274,8],[8475,8,7275,8],[8475,12,7275,12],[8475,13,7275,13,"internalListeners"],[8475,30,7275,30],[8475,31,7275,31,"delete"],[8475,37,7275,37],[8475,38,7275,38,"listener"],[8475,46,7275,46],[8475,47,7275,47],[8476,8,7276,8,"unsubscribe"],[8476,19,7276,19],[8476,20,7276,20],[8476,21,7276,21],[8477,8,7277,8],[8477,12,7277,12],[8477,13,7277,13,"updateProactiveRefresh"],[8477,35,7277,35],[8477,36,7277,36],[8477,37,7277,37],[8478,6,7278,4],[8479,4,7278,5],[8480,6,7278,5,"key"],[8480,9,7278,5],[8481,6,7278,5,"value"],[8481,11,7278,5],[8481,13,7279,4],[8481,22,7279,4,"assertAuthConfigured"],[8481,42,7279,24,"assertAuthConfigured"],[8481,43,7279,24],[8481,45,7279,27],[8482,8,7280,8,"_assert"],[8482,15,7280,15],[8482,16,7280,16],[8482,20,7280,20],[8482,21,7280,21,"auth"],[8482,25,7280,25],[8482,26,7280,26,"_initializationPromise"],[8482,48,7280,48],[8482,50,7280,50],[8482,89,7280,89],[8482,90,7280,90],[8482,140,7280,140],[8482,141,7280,141],[8483,6,7281,4],[8484,4,7281,5],[8485,6,7281,5,"key"],[8485,9,7281,5],[8486,6,7281,5,"value"],[8486,11,7281,5],[8486,13,7282,4],[8486,22,7282,4,"updateProactiveRefresh"],[8486,44,7282,26,"updateProactiveRefresh"],[8486,45,7282,26],[8486,47,7282,29],[8487,8,7283,8],[8487,12,7283,12],[8487,16,7283,16],[8487,17,7283,17,"internalListeners"],[8487,34,7283,34],[8487,35,7283,35,"size"],[8487,39,7283,39],[8487,42,7283,42],[8487,43,7283,43],[8487,45,7283,45],[8488,10,7284,12],[8488,14,7284,16],[8488,15,7284,17,"auth"],[8488,19,7284,21],[8488,20,7284,22,"_startProactiveRefresh"],[8488,42,7284,44],[8488,43,7284,45],[8488,44,7284,46],[8489,8,7285,8],[8489,9,7285,9],[8489,15,7286,13],[8490,10,7287,12],[8490,14,7287,16],[8490,15,7287,17,"auth"],[8490,19,7287,21],[8490,20,7287,22,"_stopProactiveRefresh"],[8490,41,7287,43],[8490,42,7287,44],[8490,43,7287,45],[8491,8,7288,8],[8492,6,7289,4],[8493,4,7289,5],[8494,2,7289,5],[8495,2,7292,0],[8496,0,7293,0],[8497,0,7294,0],[8498,0,7295,0],[8499,0,7296,0],[8500,0,7297,0],[8501,0,7298,0],[8502,0,7299,0],[8503,0,7300,0],[8504,0,7301,0],[8505,0,7302,0],[8506,0,7303,0],[8507,0,7304,0],[8508,0,7305,0],[8509,0,7306,0],[8510,0,7307,0],[8511,2,7308,0],[8511,11,7308,9,"getVersionForPlatform"],[8511,32,7308,30,"getVersionForPlatform"],[8511,33,7308,31,"clientPlatform"],[8511,47,7308,45],[8511,49,7308,47],[8512,4,7309,4],[8512,12,7309,12,"clientPlatform"],[8512,26,7309,26],[8513,6,7310,8],[8513,11,7310,13],[8513,17,7310,19],[8513,18,7310,20],[8514,8,7311,12],[8514,15,7311,19],[8514,21,7311,25],[8515,6,7312,8],[8515,11,7312,13],[8515,24,7312,26],[8515,25,7312,27],[8516,8,7313,12],[8516,15,7313,19],[8516,19,7313,23],[8517,6,7314,8],[8517,11,7314,13],[8517,19,7314,21],[8517,20,7314,22],[8518,8,7315,12],[8518,15,7315,19],[8518,26,7315,30],[8519,6,7316,8],[8519,11,7316,13],[8519,20,7316,22],[8519,21,7316,23],[8520,8,7317,12],[8520,15,7317,19],[8520,24,7317,28],[8521,6,7318,8],[8521,11,7318,13],[8521,25,7318,27],[8521,26,7318,28],[8522,8,7319,12],[8522,15,7319,19],[8522,30,7319,34],[8523,6,7320,8],[8524,8,7321,12],[8524,15,7321,19,"undefined"],[8524,24,7321,28],[8525,4,7322,4],[8526,2,7323,0],[8527,2,7324,0],[8528,2,7325,0],[8528,11,7325,9,"registerAuth"],[8528,23,7325,21,"registerAuth"],[8528,24,7325,22,"clientPlatform"],[8528,38,7325,36],[8528,40,7325,38],[8529,4,7326,4,"app"],[8529,7,7326,7],[8529,8,7326,8,"_registerComponent"],[8529,26,7326,26],[8529,27,7326,27],[8529,31,7326,31,"component"],[8529,40,7326,40],[8529,41,7326,41,"Component"],[8529,50,7326,50],[8529,51,7326,51],[8529,57,7326,57],[8529,58,7326,58],[8529,85,7326,85],[8529,86,7326,86,"container"],[8529,95,7326,95],[8529,97,7326,95,"_ref22"],[8529,103,7326,95],[8529,108,7326,119],[8530,6,7326,119],[8530,10,7326,108,"deps"],[8530,14,7326,112],[8530,17,7326,112,"_ref22"],[8530,23,7326,112],[8530,24,7326,99,"options"],[8530,31,7326,106],[8531,6,7327,8],[8531,10,7327,14,"app"],[8531,13,7327,17],[8531,16,7327,20,"container"],[8531,25,7327,29],[8531,26,7327,30,"getProvider"],[8531,37,7327,41],[8531,38,7327,42],[8531,43,7327,47],[8531,44,7327,48],[8531,45,7327,49,"getImmediate"],[8531,57,7327,61],[8531,58,7327,62],[8531,59,7327,63],[8532,6,7328,8],[8532,10,7328,14,"heartbeatServiceProvider"],[8532,34,7328,38],[8532,37,7328,41,"container"],[8532,46,7328,50],[8532,47,7328,51,"getProvider"],[8532,58,7328,62],[8532,59,7328,63],[8532,70,7328,74],[8532,71,7328,75],[8533,6,7329,8],[8533,10,7329,14,"appCheckServiceProvider"],[8533,33,7329,37],[8533,36,7329,40,"container"],[8533,45,7329,49],[8533,46,7329,50,"getProvider"],[8533,57,7329,61],[8533,58,7329,62],[8533,78,7329,82],[8533,79,7329,83],[8534,6,7330,8],[8534,10,7330,8,"_app$options"],[8534,22,7330,8],[8534,25,7330,39,"app"],[8534,28,7330,42],[8534,29,7330,43,"options"],[8534,36,7330,50],[8535,8,7330,16,"apiKey"],[8535,14,7330,22],[8535,17,7330,22,"_app$options"],[8535,29,7330,22],[8535,30,7330,16,"apiKey"],[8535,36,7330,22],[8536,8,7330,24,"authDomain"],[8536,18,7330,34],[8536,21,7330,34,"_app$options"],[8536,33,7330,34],[8536,34,7330,24,"authDomain"],[8536,44,7330,34],[8537,6,7331,8,"_assert"],[8537,13,7331,15],[8537,14,7331,16,"apiKey"],[8537,20,7331,22],[8537,24,7331,26],[8537,25,7331,27,"apiKey"],[8537,31,7331,33],[8537,32,7331,34,"includes"],[8537,40,7331,42],[8537,41,7331,43],[8537,44,7331,46],[8537,45,7331,47],[8537,47,7331,49],[8537,64,7331,66],[8537,65,7331,67],[8537,102,7331,104],[8538,8,7331,106,"appName"],[8538,15,7331,113],[8538,17,7331,115,"app"],[8538,20,7331,118],[8538,21,7331,119,"name"],[8539,6,7331,124],[8539,7,7331,125],[8539,8,7331,126],[8540,6,7332,8],[8540,10,7332,14,"config"],[8540,16,7332,20],[8540,19,7332,23],[8541,8,7333,12,"apiKey"],[8541,14,7333,18],[8542,8,7334,12,"authDomain"],[8542,18,7334,22],[8543,8,7335,12,"clientPlatform"],[8543,22,7335,26],[8544,8,7336,12,"apiHost"],[8544,15,7336,19],[8544,17,7336,21],[8544,49,7336,53],[8544,50,7336,54],[8545,8,7337,12,"tokenApiHost"],[8545,20,7337,24],[8545,22,7337,26],[8545,50,7337,54],[8545,51,7337,55],[8546,8,7338,12,"apiScheme"],[8546,17,7338,21],[8546,19,7338,23],[8546,26,7338,30],[8546,27,7338,31],[8547,8,7339,12,"sdkClientVersion"],[8547,24,7339,28],[8547,26,7339,30,"_getClientVersion"],[8547,43,7339,47],[8547,44,7339,48,"clientPlatform"],[8547,58,7339,62],[8548,6,7340,8],[8548,7,7340,9],[8549,6,7341,8],[8549,10,7341,14,"authInstance"],[8549,22,7341,26],[8549,25,7341,29],[8549,29,7341,33,"AuthImpl"],[8549,37,7341,41],[8549,38,7341,42,"app"],[8549,41,7341,45],[8549,43,7341,47,"heartbeatServiceProvider"],[8549,67,7341,71],[8549,69,7341,73,"appCheckServiceProvider"],[8549,92,7341,96],[8549,94,7341,98,"config"],[8549,100,7341,104],[8549,101,7341,105],[8550,6,7342,8,"_initializeAuthInstance"],[8550,29,7342,31],[8550,30,7342,32,"authInstance"],[8550,42,7342,44],[8550,44,7342,46,"deps"],[8550,48,7342,50],[8550,49,7342,51],[8551,6,7343,8],[8551,13,7343,15,"authInstance"],[8551,25,7343,27],[8552,4,7344,4],[8552,5,7344,5],[8552,7,7344,7],[8552,15,7344,15],[8552,16,7344,16],[8552,42,7344,42],[8553,4,7345,8],[8554,0,7346,0],[8555,0,7347,0],[8556,0,7348,0],[8556,7,7345,8],[8556,8,7349,9,"setInstantiationMode"],[8556,28,7349,29],[8556,29,7349,30],[8556,39,7349,40],[8556,40,7349,41],[8556,72,7349,73],[8557,4,7350,8],[8558,0,7351,0],[8559,0,7352,0],[8560,0,7353,0],[8560,7,7350,8],[8560,8,7354,9,"setInstanceCreatedCallback"],[8560,34,7354,35],[8560,35,7354,36],[8560,36,7354,37,"container"],[8560,45,7354,46],[8560,47,7354,48,"_instanceIdentifier"],[8560,66,7354,67],[8560,68,7354,69,"_instance"],[8560,77,7354,78],[8560,82,7354,83],[8561,6,7355,8],[8561,10,7355,14,"authInternalProvider"],[8561,30,7355,34],[8561,33,7355,37,"container"],[8561,42,7355,46],[8561,43,7355,47,"getProvider"],[8561,54,7355,58],[8561,55,7355,59],[8561,70,7355,74],[8561,71,7355,75],[8561,105,7355,109],[8561,106,7355,110],[8562,6,7356,8,"authInternalProvider"],[8562,26,7356,28],[8562,27,7356,29,"initialize"],[8562,37,7356,39],[8562,38,7356,40],[8562,39,7356,41],[8563,4,7357,4],[8563,5,7357,5],[8563,6,7357,6],[8563,7,7357,7],[8564,4,7358,4,"app"],[8564,7,7358,7],[8564,8,7358,8,"_registerComponent"],[8564,26,7358,26],[8564,27,7358,27],[8564,31,7358,31,"component"],[8564,40,7358,40],[8564,41,7358,41,"Component"],[8564,50,7358,50],[8564,51,7358,51],[8564,66,7358,66],[8564,67,7358,67],[8564,103,7358,103,"container"],[8564,112,7358,112],[8564,116,7358,116],[8565,6,7359,8],[8565,10,7359,14,"auth"],[8565,14,7359,18],[8565,17,7359,21,"_castAuth"],[8565,26,7359,30],[8565,27,7359,31,"container"],[8565,36,7359,40],[8565,37,7359,41,"getProvider"],[8565,48,7359,52],[8565,49,7359,53],[8565,55,7359,59],[8565,56,7359,60],[8565,81,7359,85],[8565,82,7359,86],[8565,83,7359,87,"getImmediate"],[8565,95,7359,99],[8565,96,7359,100],[8565,97,7359,101],[8565,98,7359,102],[8566,6,7360,8],[8566,13,7360,15],[8566,14,7360,16,"auth"],[8566,18,7360,20],[8566,22,7360,24],[8566,26,7360,28,"AuthInterop"],[8566,37,7360,39],[8566,38,7360,40,"auth"],[8566,42,7360,44],[8566,43,7360,45],[8566,45,7360,47,"auth"],[8566,49,7360,51],[8566,50,7360,52],[8567,4,7361,4],[8567,5,7361,5],[8567,7,7361,7],[8567,16,7361,16],[8567,17,7361,17],[8567,44,7361,44],[8567,45,7361,45],[8567,46,7361,46,"setInstantiationMode"],[8567,66,7361,66],[8567,67,7361,67],[8567,77,7361,77],[8567,78,7361,78],[8567,110,7361,110],[8567,111,7361,111],[8567,112,7361,112],[8568,4,7362,4,"app"],[8568,7,7362,7],[8568,8,7362,8,"registerVersion"],[8568,23,7362,23],[8568,24,7362,24,"name"],[8568,28,7362,28],[8568,30,7362,30,"version"],[8568,37,7362,37],[8568,39,7362,39,"getVersionForPlatform"],[8568,60,7362,60],[8568,61,7362,61,"clientPlatform"],[8568,75,7362,75],[8568,76,7362,76],[8568,77,7362,77],[8569,4,7363,4],[8570,4,7364,4,"app"],[8570,7,7364,7],[8570,8,7364,8,"registerVersion"],[8570,23,7364,23],[8570,24,7364,24,"name"],[8570,28,7364,28],[8570,30,7364,30,"version"],[8570,37,7364,37],[8570,39,7364,39],[8570,48,7364,48],[8570,49,7364,49],[8571,2,7365,0],[8573,2,7367,0],[8574,0,7368,0],[8575,0,7369,0],[8576,0,7370,0],[8577,0,7371,0],[8578,0,7372,0],[8579,0,7373,0],[8580,0,7374,0],[8581,0,7375,0],[8582,0,7376,0],[8583,0,7377,0],[8584,0,7378,0],[8585,0,7379,0],[8586,0,7380,0],[8587,0,7381,0],[8588,0,7382,0],[8589,2,7383,0],[8590,0,7384,0],[8591,0,7385,0],[8592,0,7386,0],[8593,0,7387,0],[8594,2,7388,0],[8594,6,7388,6,"FactorId"],[8594,14,7388,14],[8594,17,7388,17],[8595,4,7389,4],[8596,4,7390,4,"PHONE"],[8596,9,7390,9],[8596,11,7390,11],[8596,18,7390,18],[8597,4,7391,4,"TOTP"],[8597,8,7391,8],[8597,10,7391,10],[8598,2,7392,0],[8598,3,7392,1],[8599,2,7393,0],[8600,0,7394,0],[8601,0,7395,0],[8602,0,7396,0],[8603,0,7397,0],[8604,2,7398,0],[8604,6,7398,6,"ProviderId"],[8604,16,7398,16],[8604,19,7398,19],[8605,4,7399,4],[8606,4,7400,4,"FACEBOOK"],[8606,12,7400,12],[8606,14,7400,14],[8606,28,7400,28],[8607,4,7401,4],[8608,4,7402,4,"GITHUB"],[8608,10,7402,10],[8608,12,7402,12],[8608,24,7402,24],[8609,4,7403,4],[8610,4,7404,4,"GOOGLE"],[8610,10,7404,10],[8610,12,7404,12],[8610,24,7404,24],[8611,4,7405,4],[8612,4,7406,4,"PASSWORD"],[8612,12,7406,12],[8612,14,7406,14],[8612,24,7406,24],[8613,4,7407,4],[8614,4,7408,4,"PHONE"],[8614,9,7408,9],[8614,11,7408,11],[8614,18,7408,18],[8615,4,7409,4],[8616,4,7410,4,"TWITTER"],[8616,11,7410,11],[8616,13,7410,13],[8617,2,7411,0],[8617,3,7411,1],[8618,2,7412,0],[8619,0,7413,0],[8620,0,7414,0],[8621,0,7415,0],[8622,0,7416,0],[8623,2,7417,0],[8623,6,7417,6,"SignInMethod"],[8623,18,7417,18],[8623,21,7417,21],[8624,4,7418,4],[8625,4,7419,4,"EMAIL_LINK"],[8625,14,7419,14],[8625,16,7419,16],[8625,27,7419,27],[8626,4,7420,4],[8627,4,7421,4,"EMAIL_PASSWORD"],[8627,18,7421,18],[8627,20,7421,20],[8627,30,7421,30],[8628,4,7422,4],[8629,4,7423,4,"FACEBOOK"],[8629,12,7423,12],[8629,14,7423,14],[8629,28,7423,28],[8630,4,7424,4],[8631,4,7425,4,"GITHUB"],[8631,10,7425,10],[8631,12,7425,12],[8631,24,7425,24],[8632,4,7426,4],[8633,4,7427,4,"GOOGLE"],[8633,10,7427,10],[8633,12,7427,12],[8633,24,7427,24],[8634,4,7428,4],[8635,4,7429,4,"PHONE"],[8635,9,7429,9],[8635,11,7429,11],[8635,18,7429,18],[8636,4,7430,4],[8637,4,7431,4,"TWITTER"],[8637,11,7431,11],[8637,13,7431,13],[8638,2,7432,0],[8638,3,7432,1],[8639,2,7433,0],[8640,0,7434,0],[8641,0,7435,0],[8642,0,7436,0],[8643,0,7437,0],[8644,2,7438,0],[8644,6,7438,6,"OperationType"],[8644,19,7438,19],[8644,22,7438,22],[8645,4,7439,4],[8646,4,7440,4,"LINK"],[8646,8,7440,8],[8646,10,7440,10],[8646,16,7440,16],[8647,4,7441,4],[8648,4,7442,4,"REAUTHENTICATE"],[8648,18,7442,18],[8648,20,7442,20],[8648,36,7442,36],[8649,4,7443,4],[8650,4,7444,4,"SIGN_IN"],[8650,11,7444,11],[8650,13,7444,13],[8651,2,7445,0],[8651,3,7445,1],[8652,2,7446,0],[8653,0,7447,0],[8654,0,7448,0],[8655,0,7449,0],[8656,0,7450,0],[8657,2,7451,0],[8657,6,7451,6,"ActionCodeOperation"],[8657,25,7451,25],[8657,28,7451,28],[8658,4,7452,4],[8659,4,7453,4,"EMAIL_SIGNIN"],[8659,16,7453,16],[8659,18,7453,18],[8659,32,7453,32],[8660,4,7454,4],[8661,4,7455,4,"PASSWORD_RESET"],[8661,18,7455,18],[8661,20,7455,20],[8661,36,7455,36],[8662,4,7456,4],[8663,4,7457,4,"RECOVER_EMAIL"],[8663,17,7457,17],[8663,19,7457,19],[8663,34,7457,34],[8664,4,7458,4],[8665,4,7459,4,"REVERT_SECOND_FACTOR_ADDITION"],[8665,33,7459,33],[8665,35,7459,35],[8665,66,7459,66],[8666,4,7460,4],[8667,4,7461,4,"VERIFY_AND_CHANGE_EMAIL"],[8667,27,7461,27],[8667,29,7461,29],[8667,54,7461,54],[8668,4,7462,4],[8669,4,7463,4,"VERIFY_EMAIL"],[8669,16,7463,16],[8669,18,7463,18],[8670,2,7464,0],[8670,3,7464,1],[8672,2,7466,0],[8673,0,7467,0],[8674,0,7468,0],[8675,0,7469,0],[8676,0,7470,0],[8677,0,7471,0],[8678,0,7472,0],[8679,0,7473,0],[8680,0,7474,0],[8681,0,7475,0],[8682,0,7476,0],[8683,0,7477,0],[8684,0,7478,0],[8685,0,7479,0],[8686,0,7480,0],[8687,0,7481,0],[8688,2,7482,0],[8688,11,7482,9,"startSignInPhoneMfa"],[8688,30,7482,28,"startSignInPhoneMfa"],[8688,31,7482,29,"auth"],[8688,35,7482,33],[8688,37,7482,35,"request"],[8688,44,7482,42],[8688,46,7482,44],[8689,4,7483,4],[8689,11,7483,11,"_performApiRequest"],[8689,29,7483,29],[8689,30,7483,30,"auth"],[8689,34,7483,34],[8689,36,7483,36],[8689,42,7483,42],[8689,43,7483,43],[8689,66,7483,66],[8689,96,7483,96],[8689,97,7483,97],[8689,131,7483,131,"_addTidIfNecessary"],[8689,149,7483,149],[8689,150,7483,150,"auth"],[8689,154,7483,154],[8689,156,7483,156,"request"],[8689,163,7483,163],[8689,164,7483,164],[8689,165,7483,165],[8690,2,7484,0],[8691,2,7485,0],[8691,11,7485,9,"finalizeSignInPhoneMfa"],[8691,33,7485,31,"finalizeSignInPhoneMfa"],[8691,34,7485,32,"auth"],[8691,38,7485,36],[8691,40,7485,38,"request"],[8691,47,7485,45],[8691,49,7485,47],[8692,4,7486,4],[8692,11,7486,11,"_performApiRequest"],[8692,29,7486,29],[8692,30,7486,30,"auth"],[8692,34,7486,34],[8692,36,7486,36],[8692,42,7486,42],[8692,43,7486,43],[8692,66,7486,66],[8692,99,7486,99],[8692,100,7486,100],[8692,137,7486,137,"_addTidIfNecessary"],[8692,155,7486,155],[8692,156,7486,156,"auth"],[8692,160,7486,160],[8692,162,7486,162,"request"],[8692,169,7486,169],[8692,170,7486,170],[8692,171,7486,171],[8693,2,7487,0],[8694,2,7488,0],[8694,11,7488,9,"finalizeSignInTotpMfa"],[8694,32,7488,30,"finalizeSignInTotpMfa"],[8694,33,7488,31,"auth"],[8694,37,7488,35],[8694,39,7488,37,"request"],[8694,46,7488,44],[8694,48,7488,46],[8695,4,7489,4],[8695,11,7489,11,"_performApiRequest"],[8695,29,7489,29],[8695,30,7489,30,"auth"],[8695,34,7489,34],[8695,36,7489,36],[8695,42,7489,42],[8695,43,7489,43],[8695,66,7489,66],[8695,99,7489,99],[8695,100,7489,100],[8695,137,7489,137,"_addTidIfNecessary"],[8695,155,7489,155],[8695,156,7489,156,"auth"],[8695,160,7489,160],[8695,162,7489,162,"request"],[8695,169,7489,169],[8695,170,7489,170],[8695,171,7489,171],[8696,2,7490,0],[8698,2,7492,0],[8699,0,7493,0],[8700,0,7494,0],[8701,0,7495,0],[8702,0,7496,0],[8703,0,7497,0],[8704,0,7498,0],[8705,0,7499,0],[8706,0,7500,0],[8707,0,7501,0],[8708,0,7502,0],[8709,0,7503,0],[8710,0,7504,0],[8711,0,7505,0],[8712,0,7506,0],[8713,0,7507,0],[8714,2,7508,0],[8715,0,7509,0],[8716,0,7510,0],[8717,0,7511,0],[8718,2,7512,0],[8718,11,7512,9,"_window"],[8718,18,7512,16,"_window"],[8718,19,7512,16],[8718,21,7512,19],[8719,4,7513,4],[8719,11,7513,11,"window"],[8719,17,7513,17],[8720,2,7514,0],[8721,2,7515,0],[8721,11,7515,9,"_setWindowLocation"],[8721,29,7515,27,"_setWindowLocation"],[8721,30,7515,28,"url"],[8721,33,7515,31],[8721,35,7515,33],[8722,4,7516,4,"_window"],[8722,11,7516,11],[8722,12,7516,12],[8722,13,7516,13],[8722,14,7516,14,"location"],[8722,22,7516,22],[8722,23,7516,23,"href"],[8722,27,7516,27],[8722,30,7516,30,"url"],[8722,33,7516,33],[8723,2,7517,0],[8725,2,7519,0],[8726,0,7520,0],[8727,0,7521,0],[8728,0,7522,0],[8729,0,7523,0],[8730,0,7524,0],[8731,0,7525,0],[8732,0,7526,0],[8733,0,7527,0],[8734,0,7528,0],[8735,0,7529,0],[8736,0,7530,0],[8737,0,7531,0],[8738,0,7532,0],[8739,0,7533,0],[8740,0,7534,0],[8741,2,7535,0],[8741,11,7535,9,"_isWorker"],[8741,20,7535,18,"_isWorker"],[8741,21,7535,18],[8741,23,7535,21],[8742,4,7536,4],[8742,11,7536,12],[8742,18,7536,19,"_window"],[8742,25,7536,26],[8742,26,7536,27],[8742,27,7536,28],[8742,28,7536,29],[8742,47,7536,48],[8742,48,7536,49],[8742,53,7536,54],[8742,64,7536,65],[8742,68,7537,8],[8742,75,7537,15,"_window"],[8742,82,7537,22],[8742,83,7537,23],[8742,84,7537,24],[8742,85,7537,25],[8742,100,7537,40],[8742,101,7537,41],[8742,106,7537,46],[8742,116,7537,56],[8743,2,7538,0],[8744,2,7538,1],[8744,11,7539,15,"_getActiveServiceWorker"],[8744,34,7539,38,"_getActiveServiceWorker"],[8744,35,7539,38],[8745,4,7539,38],[8745,11,7539,38,"_getActiveServiceWorker2"],[8745,35,7539,38],[8745,36,7539,38,"apply"],[8745,41,7539,38],[8745,48,7539,38,"arguments"],[8745,57,7539,38],[8746,2,7539,38],[8747,2,7539,38],[8747,11,7539,38,"_getActiveServiceWorker2"],[8747,36,7539,38],[8748,4,7539,38,"_getActiveServiceWorker2"],[8748,28,7539,38],[8748,31,7539,38,"_asyncToGenerator"],[8748,48,7539,38],[8748,49,7539,0],[8748,62,7539,41],[8749,6,7540,4],[8749,10,7540,8],[8749,11,7540,9,"navigator"],[8749,20,7540,18],[8749,22,7540,20,"serviceWorker"],[8749,35,7540,33],[8749,37,7540,35],[8750,8,7541,8],[8750,15,7541,15],[8750,19,7541,19],[8751,6,7542,4],[8752,6,7543,4],[8752,10,7543,8],[8753,8,7544,8],[8753,12,7544,14,"registration"],[8753,24,7544,26],[8753,33,7544,35,"navigator"],[8753,42,7544,44],[8753,43,7544,45,"serviceWorker"],[8753,56,7544,58],[8753,57,7544,59,"ready"],[8753,62,7544,64],[8754,8,7545,8],[8754,15,7545,15,"registration"],[8754,27,7545,27],[8754,28,7545,28,"active"],[8754,34,7545,34],[8755,6,7546,4],[8755,7,7546,5],[8755,8,7547,4],[8755,14,7547,10],[8756,8,7548,8],[8756,15,7548,15],[8756,19,7548,19],[8757,6,7549,4],[8758,4,7550,0],[8758,5,7550,1],[8759,4,7550,1],[8759,11,7550,1,"_getActiveServiceWorker2"],[8759,35,7550,1],[8759,36,7550,1,"apply"],[8759,41,7550,1],[8759,48,7550,1,"arguments"],[8759,57,7550,1],[8760,2,7550,1],[8761,2,7551,0],[8761,11,7551,9,"_getServiceWorkerController"],[8761,38,7551,36,"_getServiceWorkerController"],[8761,39,7551,36],[8761,41,7551,39],[8762,4,7552,4],[8762,11,7552,11,"navigator"],[8762,20,7552,20],[8762,22,7552,22,"serviceWorker"],[8762,35,7552,35],[8762,37,7552,37,"controller"],[8762,47,7552,47],[8762,51,7552,51],[8762,55,7552,55],[8763,2,7553,0],[8764,2,7554,0],[8764,11,7554,9,"_getWorkerGlobalScope"],[8764,32,7554,30,"_getWorkerGlobalScope"],[8764,33,7554,30],[8764,35,7554,33],[8765,4,7555,4],[8765,11,7555,11,"_isWorker"],[8765,20,7555,20],[8765,21,7555,21],[8765,22,7555,22],[8765,25,7555,25,"self"],[8765,29,7555,29],[8765,32,7555,32],[8765,36,7555,36],[8766,2,7556,0],[8768,2,7558,0],[8769,0,7559,0],[8770,0,7560,0],[8771,0,7561,0],[8772,0,7562,0],[8773,0,7563,0],[8774,0,7564,0],[8775,0,7565,0],[8776,0,7566,0],[8777,0,7567,0],[8778,0,7568,0],[8779,0,7569,0],[8780,0,7570,0],[8781,0,7571,0],[8782,0,7572,0],[8783,0,7573,0],[8784,2,7574,0],[8785,2,7575,0],[8786,2,7576,0],[8786,6,7576,6,"_JSLOAD_CALLBACK"],[8786,22,7576,22],[8786,25,7576,25,"_generateCallbackName"],[8786,46,7576,46],[8786,47,7576,47],[8786,52,7576,52],[8786,53,7576,53],[8787,2,7577,0],[8787,6,7577,6,"NETWORK_TIMEOUT_DELAY"],[8787,27,7577,27],[8787,30,7577,30],[8787,34,7577,34,"Delay"],[8787,39,7577,39],[8787,40,7577,40],[8787,45,7577,45],[8787,47,7577,47],[8787,52,7577,52],[8787,53,7577,53],[8788,2,7578,0],[8789,0,7579,0],[8790,0,7580,0],[8791,2,7578,0],[8791,6,7581,6,"ReCaptchaLoaderImpl"],[8791,25,7581,25],[8792,4,7582,4],[8792,13,7582,4,"ReCaptchaLoaderImpl"],[8792,33,7582,4],[8792,35,7582,18],[8793,6,7582,18,"_classCallCheck"],[8793,21,7582,18],[8793,28,7582,18,"ReCaptchaLoaderImpl"],[8793,47,7582,18],[8794,6,7583,8],[8794,10,7583,12],[8794,11,7583,13,"hostLanguage"],[8794,23,7583,25],[8794,26,7583,28],[8794,28,7583,30],[8795,6,7584,8],[8795,10,7584,12],[8795,11,7584,13,"counter"],[8795,18,7584,20],[8795,21,7584,23],[8795,22,7584,24],[8796,6,7585,8],[8797,0,7586,0],[8798,0,7587,0],[8799,0,7588,0],[8800,0,7589,0],[8801,6,7590,8],[8801,10,7590,12],[8801,11,7590,13,"librarySeparatelyLoaded"],[8801,34,7590,36],[8801,37,7590,39],[8801,38,7590,40],[8801,39,7590,41,"_window"],[8801,46,7590,48],[8801,47,7590,49],[8801,48,7590,50],[8801,49,7590,51,"grecaptcha"],[8801,59,7590,61],[8801,61,7590,63,"render"],[8801,67,7590,69],[8802,4,7591,4],[8803,4,7591,5],[8803,11,7591,5,"_createClass"],[8803,23,7591,5],[8803,24,7591,5,"ReCaptchaLoaderImpl"],[8803,43,7591,5],[8804,6,7591,5,"key"],[8804,9,7591,5],[8805,6,7591,5,"value"],[8805,11,7591,5],[8805,13,7592,4],[8805,22,7592,4,"load"],[8805,26,7592,8,"load"],[8805,27,7592,9,"auth"],[8805,31,7592,13],[8805,33,7592,24],[8806,8,7592,24],[8806,12,7592,15,"hl"],[8806,14,7592,17],[8806,17,7592,17,"arguments"],[8806,26,7592,17],[8806,27,7592,17,"length"],[8806,33,7592,17],[8806,41,7592,17,"arguments"],[8806,50,7592,17],[8806,58,7592,17,"undefined"],[8806,67,7592,17],[8806,70,7592,17,"arguments"],[8806,79,7592,17],[8806,85,7592,20],[8806,87,7592,22],[8807,8,7593,8,"_assert"],[8807,15,7593,15],[8807,16,7593,16,"isHostLanguageValid"],[8807,35,7593,35],[8807,36,7593,36,"hl"],[8807,38,7593,38],[8807,39,7593,39],[8807,41,7593,41,"auth"],[8807,45,7593,45],[8807,47,7593,47],[8807,63,7593,63],[8807,64,7593,64],[8807,98,7593,98],[8807,99,7593,99],[8808,8,7594,8],[8808,12,7594,12],[8808,16,7594,16],[8808,17,7594,17,"shouldResolveImmediately"],[8808,41,7594,41],[8808,42,7594,42,"hl"],[8808,44,7594,44],[8808,45,7594,45],[8808,49,7594,49,"isV2"],[8808,53,7594,53],[8808,54,7594,54,"_window"],[8808,61,7594,61],[8808,62,7594,62],[8808,63,7594,63],[8808,64,7594,64,"grecaptcha"],[8808,74,7594,74],[8808,75,7594,75],[8808,77,7594,77],[8809,10,7595,12],[8809,17,7595,19,"Promise"],[8809,24,7595,26],[8809,25,7595,27,"resolve"],[8809,32,7595,34],[8809,33,7595,35,"_window"],[8809,40,7595,42],[8809,41,7595,43],[8809,42,7595,44],[8809,43,7595,45,"grecaptcha"],[8809,53,7595,55],[8809,54,7595,56],[8810,8,7596,8],[8811,8,7597,8],[8811,15,7597,15],[8811,19,7597,19,"Promise"],[8811,26,7597,26],[8811,27,7597,27],[8811,28,7597,28,"resolve"],[8811,35,7597,35],[8811,37,7597,37,"reject"],[8811,43,7597,43],[8811,48,7597,48],[8812,10,7598,12],[8812,14,7598,18,"networkTimeout"],[8812,28,7598,32],[8812,31,7598,35,"_window"],[8812,38,7598,42],[8812,39,7598,43],[8812,40,7598,44],[8812,41,7598,45,"setTimeout"],[8812,51,7598,55],[8812,52,7598,56],[8812,58,7598,62],[8813,12,7599,16,"reject"],[8813,18,7599,22],[8813,19,7599,23,"_createError"],[8813,31,7599,35],[8813,32,7599,36,"auth"],[8813,36,7599,40],[8813,38,7599,42],[8813,62,7599,66],[8813,63,7599,67],[8813,105,7599,109],[8813,106,7599,110],[8813,107,7599,111],[8814,10,7600,12],[8814,11,7600,13],[8814,13,7600,15,"NETWORK_TIMEOUT_DELAY"],[8814,34,7600,36],[8814,35,7600,37,"get"],[8814,38,7600,40],[8814,39,7600,41],[8814,40,7600,42],[8814,41,7600,43],[8815,10,7601,12,"_window"],[8815,17,7601,19],[8815,18,7601,20],[8815,19,7601,21],[8815,20,7601,22,"_JSLOAD_CALLBACK"],[8815,36,7601,38],[8815,37,7601,39],[8815,40,7601,42],[8815,46,7601,48],[8816,12,7602,16,"_window"],[8816,19,7602,23],[8816,20,7602,24],[8816,21,7602,25],[8816,22,7602,26,"clearTimeout"],[8816,34,7602,38],[8816,35,7602,39,"networkTimeout"],[8816,49,7602,53],[8816,50,7602,54],[8817,12,7603,16],[8817,19,7603,23,"_window"],[8817,26,7603,30],[8817,27,7603,31],[8817,28,7603,32],[8817,29,7603,33,"_JSLOAD_CALLBACK"],[8817,45,7603,49],[8817,46,7603,50],[8818,12,7604,16],[8818,16,7604,22,"recaptcha"],[8818,25,7604,31],[8818,28,7604,34,"_window"],[8818,35,7604,41],[8818,36,7604,42],[8818,37,7604,43],[8818,38,7604,44,"grecaptcha"],[8818,48,7604,54],[8819,12,7605,16],[8819,16,7605,20],[8819,17,7605,21,"recaptcha"],[8819,26,7605,30],[8819,30,7605,34],[8819,31,7605,35,"isV2"],[8819,35,7605,39],[8819,36,7605,40,"recaptcha"],[8819,45,7605,49],[8819,46,7605,50],[8819,48,7605,52],[8820,14,7606,20,"reject"],[8820,20,7606,26],[8820,21,7606,27,"_createError"],[8820,33,7606,39],[8820,34,7606,40,"auth"],[8820,38,7606,44],[8820,40,7606,46],[8820,56,7606,62],[8820,57,7606,63],[8820,91,7606,97],[8820,92,7606,98],[8820,93,7606,99],[8821,14,7607,20],[8822,12,7608,16],[8823,12,7609,16],[8824,12,7610,16],[8825,12,7611,16],[8825,16,7611,22,"render"],[8825,22,7611,28],[8825,25,7611,31,"recaptcha"],[8825,34,7611,40],[8825,35,7611,41,"render"],[8825,41,7611,47],[8826,12,7612,16,"recaptcha"],[8826,21,7612,25],[8826,22,7612,26,"render"],[8826,28,7612,32],[8826,31,7612,35],[8826,32,7612,36,"container"],[8826,41,7612,45],[8826,43,7612,47,"params"],[8826,49,7612,53],[8826,54,7612,58],[8827,14,7613,20],[8827,18,7613,26,"widgetId"],[8827,26,7613,34],[8827,29,7613,37,"render"],[8827,35,7613,43],[8827,36,7613,44,"container"],[8827,45,7613,53],[8827,47,7613,55,"params"],[8827,53,7613,61],[8827,54,7613,62],[8828,14,7614,20],[8828,18,7614,24],[8828,19,7614,25,"counter"],[8828,26,7614,32],[8828,28,7614,34],[8829,14,7615,20],[8829,21,7615,27,"widgetId"],[8829,29,7615,35],[8830,12,7616,16],[8830,13,7616,17],[8831,12,7617,16],[8831,16,7617,20],[8831,17,7617,21,"hostLanguage"],[8831,29,7617,33],[8831,32,7617,36,"hl"],[8831,34,7617,38],[8832,12,7618,16,"resolve"],[8832,19,7618,23],[8832,20,7618,24,"recaptcha"],[8832,29,7618,33],[8832,30,7618,34],[8833,10,7619,12],[8833,11,7619,13],[8834,10,7620,12],[8834,14,7620,18,"url"],[8834,17,7620,21],[8834,20,7620,24],[8834,23,7620,27,"_recaptchaV2ScriptUrl"],[8834,44,7620,48],[8834,45,7620,49],[8834,46,7620,50],[8834,50,7620,54,"util"],[8834,54,7620,58],[8834,55,7620,59,"querystring"],[8834,66,7620,70],[8834,67,7620,71],[8835,12,7621,16,"onload"],[8835,18,7621,22],[8835,20,7621,24,"_JSLOAD_CALLBACK"],[8835,36,7621,40],[8836,12,7622,16,"render"],[8836,18,7622,22],[8836,20,7622,24],[8836,30,7622,34],[8837,12,7623,16,"hl"],[8838,10,7624,12],[8838,11,7624,13],[8838,12,7624,14],[8838,14,7624,16],[8839,10,7625,12,"_loadJS"],[8839,17,7625,19],[8839,18,7625,20,"url"],[8839,21,7625,23],[8839,22,7625,24],[8839,23,7625,25,"catch"],[8839,28,7625,30],[8839,29,7625,31],[8839,35,7625,37],[8840,12,7626,16,"clearTimeout"],[8840,24,7626,28],[8840,25,7626,29,"networkTimeout"],[8840,39,7626,43],[8840,40,7626,44],[8841,12,7627,16,"reject"],[8841,18,7627,22],[8841,19,7627,23,"_createError"],[8841,31,7627,35],[8841,32,7627,36,"auth"],[8841,36,7627,40],[8841,38,7627,42],[8841,54,7627,58],[8841,55,7627,59],[8841,89,7627,93],[8841,90,7627,94],[8841,91,7627,95],[8842,10,7628,12],[8842,11,7628,13],[8842,12,7628,14],[8843,8,7629,8],[8843,9,7629,9],[8843,10,7629,10],[8844,6,7630,4],[8845,4,7630,5],[8846,6,7630,5,"key"],[8846,9,7630,5],[8847,6,7630,5,"value"],[8847,11,7630,5],[8847,13,7631,4],[8847,22,7631,4,"clearedOneInstance"],[8847,40,7631,22,"clearedOneInstance"],[8847,41,7631,22],[8847,43,7631,25],[8848,8,7632,8],[8848,12,7632,12],[8848,13,7632,13,"counter"],[8848,20,7632,20],[8848,22,7632,22],[8849,6,7633,4],[8850,4,7633,5],[8851,6,7633,5,"key"],[8851,9,7633,5],[8852,6,7633,5,"value"],[8852,11,7633,5],[8852,13,7634,4],[8852,22,7634,4,"shouldResolveImmediately"],[8852,46,7634,28,"shouldResolveImmediately"],[8852,47,7634,29,"hl"],[8852,49,7634,31],[8852,51,7634,33],[8853,8,7635,8],[8854,8,7636,8],[8855,8,7637,8],[8856,8,7638,8],[8857,8,7639,8],[8858,8,7640,8],[8859,8,7641,8],[8860,8,7642,8],[8860,15,7642,16],[8860,16,7642,17],[8860,17,7642,18,"_window"],[8860,24,7642,25],[8860,25,7642,26],[8860,26,7642,27],[8860,27,7642,28,"grecaptcha"],[8860,37,7642,38],[8860,39,7642,40,"render"],[8860,45,7642,46],[8860,50,7643,13,"hl"],[8860,52,7643,15],[8860,57,7643,20],[8860,61,7643,24],[8860,62,7643,25,"hostLanguage"],[8860,74,7643,37],[8860,78,7644,16],[8860,82,7644,20],[8860,83,7644,21,"counter"],[8860,90,7644,28],[8860,93,7644,31],[8860,94,7644,32],[8860,98,7645,16],[8860,102,7645,20],[8860,103,7645,21,"librarySeparatelyLoaded"],[8860,126,7645,44],[8860,127,7645,45],[8861,6,7646,4],[8862,4,7646,5],[8863,2,7646,5],[8864,2,7648,0],[8864,11,7648,9,"isHostLanguageValid"],[8864,30,7648,28,"isHostLanguageValid"],[8864,31,7648,29,"hl"],[8864,33,7648,31],[8864,35,7648,33],[8865,4,7649,4],[8865,11,7649,11,"hl"],[8865,13,7649,13],[8865,14,7649,14,"length"],[8865,20,7649,20],[8865,24,7649,24],[8865,25,7649,25],[8865,29,7649,29],[8865,53,7649,53],[8865,54,7649,54,"test"],[8865,58,7649,58],[8865,59,7649,59,"hl"],[8865,61,7649,61],[8865,62,7649,62],[8866,2,7650,0],[8867,2,7650,1],[8867,6,7651,6,"MockReCaptchaLoaderImpl"],[8867,29,7651,29],[8868,4,7651,29],[8868,13,7651,29,"MockReCaptchaLoaderImpl"],[8868,37,7651,29],[8869,6,7651,29,"_classCallCheck"],[8869,21,7651,29],[8869,28,7651,29,"MockReCaptchaLoaderImpl"],[8869,51,7651,29],[8870,4,7651,29],[8871,4,7651,29],[8871,11,7651,29,"_createClass"],[8871,23,7651,29],[8871,24,7651,29,"MockReCaptchaLoaderImpl"],[8871,47,7651,29],[8872,6,7651,29,"key"],[8872,9,7651,29],[8873,6,7651,29,"value"],[8873,11,7651,29],[8874,8,7651,29],[8874,12,7651,29,"_load"],[8874,17,7651,29],[8874,20,7651,29,"_asyncToGenerator"],[8874,37,7651,29],[8874,38,7652,4],[8874,49,7652,15,"auth"],[8874,53,7652,19],[8874,55,7652,21],[8875,10,7653,8],[8875,17,7653,15],[8875,21,7653,19,"MockReCaptcha"],[8875,34,7653,32],[8875,35,7653,33,"auth"],[8875,39,7653,37],[8875,40,7653,38],[8876,8,7654,4],[8876,9,7654,5],[8877,8,7654,5],[8877,17,7652,10,"load"],[8877,21,7652,14,"load"],[8877,22,7652,14,"_x195"],[8877,27,7652,14],[8878,10,7652,14],[8878,17,7652,14,"_load"],[8878,22,7652,14],[8878,23,7652,14,"apply"],[8878,28,7652,14],[8878,35,7652,14,"arguments"],[8878,44,7652,14],[8879,8,7652,14],[8880,8,7652,14],[8880,15,7652,10,"load"],[8880,19,7652,14],[8881,6,7652,14],[8882,4,7652,14],[8883,6,7652,14,"key"],[8883,9,7652,14],[8884,6,7652,14,"value"],[8884,11,7652,14],[8884,13,7655,4],[8884,22,7655,4,"clearedOneInstance"],[8884,40,7655,22,"clearedOneInstance"],[8884,41,7655,22],[8884,43,7655,25],[8884,44,7655,27],[8885,4,7655,28],[8886,2,7655,28],[8887,2,7658,0],[8888,0,7659,0],[8889,0,7660,0],[8890,0,7661,0],[8891,0,7662,0],[8892,0,7663,0],[8893,0,7664,0],[8894,0,7665,0],[8895,0,7666,0],[8896,0,7667,0],[8897,0,7668,0],[8898,0,7669,0],[8899,0,7670,0],[8900,0,7671,0],[8901,0,7672,0],[8902,0,7673,0],[8903,2,7674,0],[8903,6,7674,6,"RECAPTCHA_VERIFIER_TYPE"],[8903,29,7674,29],[8903,32,7674,32],[8903,43,7674,43],[8904,2,7675,0],[8904,6,7675,6,"DEFAULT_PARAMS"],[8904,20,7675,20],[8904,23,7675,23],[8905,4,7676,4,"theme"],[8905,9,7676,9],[8905,11,7676,11],[8905,18,7676,18],[8906,4,7677,4,"type"],[8906,8,7677,8],[8906,10,7677,10],[8907,2,7678,0],[8907,3,7678,1],[8908,2,7679,0],[8909,0,7680,0],[8910,0,7681,0],[8911,0,7682,0],[8912,0,7683,0],[8913,0,7684,0],[8914,0,7685,0],[8915,0,7686,0],[8916,2,7679,0],[8916,6,7687,6,"RecaptchaVerifier"],[8916,23,7687,23],[8917,4,7688,4],[8918,0,7689,0],[8919,0,7690,0],[8920,0,7691,0],[8921,0,7692,0],[8922,0,7693,0],[8923,0,7694,0],[8924,0,7695,0],[8925,0,7696,0],[8926,0,7697,0],[8927,0,7698,0],[8928,0,7699,0],[8929,0,7700,0],[8930,0,7701,0],[8931,0,7702,0],[8932,0,7703,0],[8933,0,7704,0],[8934,0,7705,0],[8935,0,7706,0],[8936,4,7707,4],[8936,13,7707,4,"RecaptchaVerifier"],[8936,31,7707,16,"authExtern"],[8936,41,7707,26],[8936,43,7707,28,"containerOrId"],[8936,56,7707,41],[8936,58,7709,7],[8937,6,7709,7],[8937,10,7707,43,"parameters"],[8937,20,7707,53],[8937,23,7707,53,"arguments"],[8937,32,7707,53],[8937,33,7707,53,"length"],[8937,39,7707,53],[8937,47,7707,53,"arguments"],[8937,56,7707,53],[8937,64,7707,53,"undefined"],[8937,73,7707,53],[8937,76,7707,53,"arguments"],[8937,85,7707,53],[8937,91,7707,56],[8938,8,7708,8],[8938,11,7708,11,"DEFAULT_PARAMS"],[8939,6,7709,4],[8939,7,7709,5],[8940,6,7709,5,"_classCallCheck"],[8940,21,7709,5],[8940,28,7709,5,"RecaptchaVerifier"],[8940,45,7709,5],[8941,6,7710,8],[8941,10,7710,12],[8941,11,7710,13,"parameters"],[8941,21,7710,23],[8941,24,7710,26,"parameters"],[8941,34,7710,36],[8942,6,7711,8],[8943,0,7712,0],[8944,0,7713,0],[8945,0,7714,0],[8946,0,7715,0],[8947,0,7716,0],[8948,6,7717,8],[8948,10,7717,12],[8948,11,7717,13,"type"],[8948,15,7717,17],[8948,18,7717,20,"RECAPTCHA_VERIFIER_TYPE"],[8948,41,7717,43],[8949,6,7718,8],[8949,10,7718,12],[8949,11,7718,13,"destroyed"],[8949,20,7718,22],[8949,23,7718,25],[8949,28,7718,30],[8950,6,7719,8],[8950,10,7719,12],[8950,11,7719,13,"widgetId"],[8950,19,7719,21],[8950,22,7719,24],[8950,26,7719,28],[8951,6,7720,8],[8951,10,7720,12],[8951,11,7720,13,"tokenChangeListeners"],[8951,31,7720,33],[8951,34,7720,36],[8951,38,7720,40,"Set"],[8951,41,7720,43],[8951,42,7720,44],[8951,43,7720,45],[8952,6,7721,8],[8952,10,7721,12],[8952,11,7721,13,"renderPromise"],[8952,24,7721,26],[8952,27,7721,29],[8952,31,7721,33],[8953,6,7722,8],[8953,10,7722,12],[8953,11,7722,13,"recaptcha"],[8953,20,7722,22],[8953,23,7722,25],[8953,27,7722,29],[8954,6,7723,8],[8954,10,7723,12],[8954,11,7723,13,"auth"],[8954,15,7723,17],[8954,18,7723,20,"_castAuth"],[8954,27,7723,29],[8954,28,7723,30,"authExtern"],[8954,38,7723,40],[8954,39,7723,41],[8955,6,7724,8],[8955,10,7724,12],[8955,11,7724,13,"isInvisible"],[8955,22,7724,24],[8955,25,7724,27],[8955,29,7724,31],[8955,30,7724,32,"parameters"],[8955,40,7724,42],[8955,41,7724,43,"size"],[8955,45,7724,47],[8955,50,7724,52],[8955,61,7724,63],[8956,6,7725,8,"_assert"],[8956,13,7725,15],[8956,14,7725,16],[8956,21,7725,23,"document"],[8956,29,7725,31],[8956,34,7725,36],[8956,45,7725,47],[8956,47,7725,49],[8956,51,7725,53],[8956,52,7725,54,"auth"],[8956,56,7725,58],[8956,58,7725,60],[8956,103,7725,105],[8956,104,7725,106],[8956,147,7725,149],[8956,148,7725,150],[8957,6,7726,8],[8957,10,7726,14,"container"],[8957,19,7726,23],[8957,22,7726,26],[8957,29,7726,33,"containerOrId"],[8957,42,7726,46],[8957,47,7726,51],[8957,55,7726,59],[8957,58,7727,14,"document"],[8957,66,7727,22],[8957,67,7727,23,"getElementById"],[8957,81,7727,37],[8957,82,7727,38,"containerOrId"],[8957,95,7727,51],[8957,96,7727,52],[8957,99,7728,14,"containerOrId"],[8957,112,7728,27],[8958,6,7729,8,"_assert"],[8958,13,7729,15],[8958,14,7729,16,"container"],[8958,23,7729,25],[8958,25,7729,27],[8958,29,7729,31],[8958,30,7729,32,"auth"],[8958,34,7729,36],[8958,36,7729,38],[8958,52,7729,54],[8958,53,7729,55],[8958,87,7729,89],[8958,88,7729,90],[8959,6,7730,8],[8959,10,7730,12],[8959,11,7730,13,"container"],[8959,20,7730,22],[8959,23,7730,25,"container"],[8959,32,7730,34],[8960,6,7731,8],[8960,10,7731,12],[8960,11,7731,13,"parameters"],[8960,21,7731,23],[8960,22,7731,24,"callback"],[8960,30,7731,32],[8960,33,7731,35],[8960,37,7731,39],[8960,38,7731,40,"makeTokenCallback"],[8960,55,7731,57],[8960,56,7731,58],[8960,60,7731,62],[8960,61,7731,63,"parameters"],[8960,71,7731,73],[8960,72,7731,74,"callback"],[8960,80,7731,82],[8960,81,7731,83],[8961,6,7732,8],[8961,10,7732,12],[8961,11,7732,13,"_recaptchaLoader"],[8961,27,7732,29],[8961,30,7732,32],[8961,34,7732,36],[8961,35,7732,37,"auth"],[8961,39,7732,41],[8961,40,7732,42,"settings"],[8961,48,7732,50],[8961,49,7732,51,"appVerificationDisabledForTesting"],[8961,82,7732,84],[8961,85,7733,14],[8961,89,7733,18,"MockReCaptchaLoaderImpl"],[8961,112,7733,41],[8961,113,7733,42],[8961,114,7733,43],[8961,117,7734,14],[8961,121,7734,18,"ReCaptchaLoaderImpl"],[8961,140,7734,37],[8961,141,7734,38],[8961,142,7734,39],[8962,6,7735,8],[8962,10,7735,12],[8962,11,7735,13,"validateStartingState"],[8962,32,7735,34],[8962,33,7735,35],[8962,34,7735,36],[8963,6,7736,8],[8964,4,7737,4],[8965,4,7738,4],[8966,0,7739,0],[8967,0,7740,0],[8968,0,7741,0],[8969,0,7742,0],[8970,4,7738,4],[8970,11,7738,4,"_createClass"],[8970,23,7738,4],[8970,24,7738,4,"RecaptchaVerifier"],[8970,41,7738,4],[8971,6,7738,4,"key"],[8971,9,7738,4],[8972,6,7738,4,"value"],[8972,11,7738,4],[8973,8,7738,4],[8973,12,7738,4,"_verify2"],[8973,20,7738,4],[8973,23,7738,4,"_asyncToGenerator"],[8973,40,7738,4],[8973,41,7743,4],[8973,54,7743,19],[8974,10,7744,8],[8974,14,7744,12],[8974,15,7744,13,"assertNotDestroyed"],[8974,33,7744,31],[8974,34,7744,32],[8974,35,7744,33],[8975,10,7745,8],[8975,14,7745,14,"id"],[8975,16,7745,16],[8975,25,7745,25],[8975,29,7745,29],[8975,30,7745,30,"render"],[8975,36,7745,36],[8975,37,7745,37],[8975,38,7745,38],[8976,10,7746,8],[8976,14,7746,14,"recaptcha"],[8976,23,7746,23],[8976,26,7746,26],[8976,30,7746,30],[8976,31,7746,31,"getAssertedRecaptcha"],[8976,51,7746,51],[8976,52,7746,52],[8976,53,7746,53],[8977,10,7747,8],[8977,14,7747,14,"response"],[8977,22,7747,22],[8977,25,7747,25,"recaptcha"],[8977,34,7747,34],[8977,35,7747,35,"getResponse"],[8977,46,7747,46],[8977,47,7747,47,"id"],[8977,49,7747,49],[8977,50,7747,50],[8978,10,7748,8],[8978,14,7748,12,"response"],[8978,22,7748,20],[8978,24,7748,22],[8979,12,7749,12],[8979,19,7749,19,"response"],[8979,27,7749,27],[8980,10,7750,8],[8981,10,7751,8],[8981,17,7751,15],[8981,21,7751,19,"Promise"],[8981,28,7751,26],[8981,29,7751,27,"resolve"],[8981,36,7751,34],[8981,40,7751,38],[8982,12,7752,12],[8982,16,7752,18,"tokenChange"],[8982,27,7752,29],[8982,30,7752,33,"token"],[8982,35,7752,38],[8982,39,7752,43],[8983,14,7753,16],[8983,18,7753,20],[8983,19,7753,21,"token"],[8983,24,7753,26],[8983,26,7753,28],[8984,16,7754,20],[8984,23,7754,27],[8984,24,7754,28],[8985,14,7755,16],[8986,14,7756,16],[8986,18,7756,20],[8986,19,7756,21,"tokenChangeListeners"],[8986,39,7756,41],[8986,40,7756,42,"delete"],[8986,46,7756,48],[8986,47,7756,49,"tokenChange"],[8986,58,7756,60],[8986,59,7756,61],[8987,14,7757,16,"resolve"],[8987,21,7757,23],[8987,22,7757,24,"token"],[8987,27,7757,29],[8987,28,7757,30],[8988,12,7758,12],[8988,13,7758,13],[8989,12,7759,12],[8989,16,7759,16],[8989,17,7759,17,"tokenChangeListeners"],[8989,37,7759,37],[8989,38,7759,38,"add"],[8989,41,7759,41],[8989,42,7759,42,"tokenChange"],[8989,53,7759,53],[8989,54,7759,54],[8990,12,7760,12],[8990,16,7760,16],[8990,20,7760,20],[8990,21,7760,21,"isInvisible"],[8990,32,7760,32],[8990,34,7760,34],[8991,14,7761,16,"recaptcha"],[8991,23,7761,25],[8991,24,7761,26,"execute"],[8991,31,7761,33],[8991,32,7761,34,"id"],[8991,34,7761,36],[8991,35,7761,37],[8992,12,7762,12],[8993,10,7763,8],[8993,11,7763,9],[8993,12,7763,10],[8994,8,7764,4],[8994,9,7764,5],[8995,8,7764,5],[8995,17,7743,10,"verify"],[8995,23,7743,16,"verify"],[8995,24,7743,16],[8996,10,7743,16],[8996,17,7743,16,"_verify2"],[8996,25,7743,16],[8996,26,7743,16,"apply"],[8996,31,7743,16],[8996,38,7743,16,"arguments"],[8996,47,7743,16],[8997,8,7743,16],[8998,8,7743,16],[8998,15,7743,10,"verify"],[8998,21,7743,16],[8999,6,7743,16],[9000,6,7765,4],[9001,0,7766,0],[9002,0,7767,0],[9003,0,7768,0],[9004,0,7769,0],[9005,6,7765,4],[9006,4,7765,4],[9007,6,7765,4,"key"],[9007,9,7765,4],[9008,6,7765,4,"value"],[9008,11,7765,4],[9008,13,7770,4],[9008,22,7770,4,"render"],[9008,28,7770,10,"render"],[9008,29,7770,10],[9008,31,7770,13],[9009,8,7771,8],[9009,12,7771,12],[9010,10,7772,12],[9010,14,7772,16],[9010,15,7772,17,"assertNotDestroyed"],[9010,33,7772,35],[9010,34,7772,36],[9010,35,7772,37],[9011,8,7773,8],[9011,9,7773,9],[9011,10,7774,8],[9011,17,7774,15,"e"],[9011,18,7774,16],[9011,20,7774,18],[9012,10,7775,12],[9013,10,7776,12],[9014,10,7777,12],[9015,10,7778,12],[9015,17,7778,19,"Promise"],[9015,24,7778,26],[9015,25,7778,27,"reject"],[9015,31,7778,33],[9015,32,7778,34,"e"],[9015,33,7778,35],[9015,34,7778,36],[9016,8,7779,8],[9017,8,7780,8],[9017,12,7780,12],[9017,16,7780,16],[9017,17,7780,17,"renderPromise"],[9017,30,7780,30],[9017,32,7780,32],[9018,10,7781,12],[9018,17,7781,19],[9018,21,7781,23],[9018,22,7781,24,"renderPromise"],[9018,35,7781,37],[9019,8,7782,8],[9020,8,7783,8],[9020,12,7783,12],[9020,13,7783,13,"renderPromise"],[9020,26,7783,26],[9020,29,7783,29],[9020,33,7783,33],[9020,34,7783,34,"makeRenderPromise"],[9020,51,7783,51],[9020,52,7783,52],[9020,53,7783,53],[9020,54,7783,54,"catch"],[9020,59,7783,59],[9020,60,7783,60,"e"],[9020,61,7783,61],[9020,65,7783,65],[9021,10,7784,12],[9021,14,7784,16],[9021,15,7784,17,"renderPromise"],[9021,28,7784,30],[9021,31,7784,33],[9021,35,7784,37],[9022,10,7785,12],[9022,16,7785,18,"e"],[9022,17,7785,19],[9023,8,7786,8],[9023,9,7786,9],[9023,10,7786,10],[9024,8,7787,8],[9024,15,7787,15],[9024,19,7787,19],[9024,20,7787,20,"renderPromise"],[9024,33,7787,33],[9025,6,7788,4],[9026,6,7789,4],[9027,4,7789,4],[9028,6,7789,4,"key"],[9028,9,7789,4],[9029,6,7789,4,"value"],[9029,11,7789,4],[9029,13,7790,4],[9029,22,7790,4,"_reset"],[9029,28,7790,10,"_reset"],[9029,29,7790,10],[9029,31,7790,13],[9030,8,7791,8],[9030,12,7791,12],[9030,13,7791,13,"assertNotDestroyed"],[9030,31,7791,31],[9030,32,7791,32],[9030,33,7791,33],[9031,8,7792,8],[9031,12,7792,12],[9031,16,7792,16],[9031,17,7792,17,"widgetId"],[9031,25,7792,25],[9031,30,7792,30],[9031,34,7792,34],[9031,36,7792,36],[9032,10,7793,12],[9032,14,7793,16],[9032,15,7793,17,"getAssertedRecaptcha"],[9032,35,7793,37],[9032,36,7793,38],[9032,37,7793,39],[9032,38,7793,40,"reset"],[9032,43,7793,45],[9032,44,7793,46],[9032,48,7793,50],[9032,49,7793,51,"widgetId"],[9032,57,7793,59],[9032,58,7793,60],[9033,8,7794,8],[9034,6,7795,4],[9035,6,7796,4],[9036,0,7797,0],[9037,0,7798,0],[9038,4,7796,4],[9039,6,7796,4,"key"],[9039,9,7796,4],[9040,6,7796,4,"value"],[9040,11,7796,4],[9040,13,7799,4],[9040,22,7799,4,"clear"],[9040,27,7799,9,"clear"],[9040,28,7799,9],[9040,30,7799,12],[9041,8,7800,8],[9041,12,7800,12],[9041,13,7800,13,"assertNotDestroyed"],[9041,31,7800,31],[9041,32,7800,32],[9041,33,7800,33],[9042,8,7801,8],[9042,12,7801,12],[9042,13,7801,13,"destroyed"],[9042,22,7801,22],[9042,25,7801,25],[9042,29,7801,29],[9043,8,7802,8],[9043,12,7802,12],[9043,13,7802,13,"_recaptchaLoader"],[9043,29,7802,29],[9043,30,7802,30,"clearedOneInstance"],[9043,48,7802,48],[9043,49,7802,49],[9043,50,7802,50],[9044,8,7803,8],[9044,12,7803,12],[9044,13,7803,13],[9044,17,7803,17],[9044,18,7803,18,"isInvisible"],[9044,29,7803,29],[9044,31,7803,31],[9045,10,7804,12],[9045,14,7804,16],[9045,15,7804,17,"container"],[9045,24,7804,26],[9045,25,7804,27,"childNodes"],[9045,35,7804,37],[9045,36,7804,38,"forEach"],[9045,43,7804,45],[9045,44,7804,46,"node"],[9045,48,7804,50],[9045,52,7804,54],[9046,12,7805,16],[9046,16,7805,20],[9046,17,7805,21,"container"],[9046,26,7805,30],[9046,27,7805,31,"removeChild"],[9046,38,7805,42],[9046,39,7805,43,"node"],[9046,43,7805,47],[9046,44,7805,48],[9047,10,7806,12],[9047,11,7806,13],[9047,12,7806,14],[9048,8,7807,8],[9049,6,7808,4],[9050,4,7808,5],[9051,6,7808,5,"key"],[9051,9,7808,5],[9052,6,7808,5,"value"],[9052,11,7808,5],[9052,13,7809,4],[9052,22,7809,4,"validateStartingState"],[9052,43,7809,25,"validateStartingState"],[9052,44,7809,25],[9052,46,7809,28],[9053,8,7810,8,"_assert"],[9053,15,7810,15],[9053,16,7810,16],[9053,17,7810,17],[9053,21,7810,21],[9053,22,7810,22,"parameters"],[9053,32,7810,32],[9053,33,7810,33,"sitekey"],[9053,40,7810,40],[9053,42,7810,42],[9053,46,7810,46],[9053,47,7810,47,"auth"],[9053,51,7810,51],[9053,53,7810,53],[9053,69,7810,69],[9053,70,7810,70],[9053,104,7810,104],[9053,105,7810,105],[9054,8,7811,8,"_assert"],[9054,15,7811,15],[9054,16,7811,16],[9054,20,7811,20],[9054,21,7811,21,"isInvisible"],[9054,32,7811,32],[9054,36,7811,36],[9054,37,7811,37],[9054,41,7811,41],[9054,42,7811,42,"container"],[9054,51,7811,51],[9054,52,7811,52,"hasChildNodes"],[9054,65,7811,65],[9054,66,7811,66],[9054,67,7811,67],[9054,69,7811,69],[9054,73,7811,73],[9054,74,7811,74,"auth"],[9054,78,7811,78],[9054,80,7811,80],[9054,96,7811,96],[9054,97,7811,97],[9054,131,7811,131],[9054,132,7811,132],[9055,8,7812,8,"_assert"],[9055,15,7812,15],[9055,16,7812,16],[9055,23,7812,23,"document"],[9055,31,7812,31],[9055,36,7812,36],[9055,47,7812,47],[9055,49,7812,49],[9055,53,7812,53],[9055,54,7812,54,"auth"],[9055,58,7812,58],[9055,60,7812,60],[9055,105,7812,105],[9055,106,7812,106],[9055,149,7812,149],[9055,150,7812,150],[9056,6,7813,4],[9057,4,7813,5],[9058,6,7813,5,"key"],[9058,9,7813,5],[9059,6,7813,5,"value"],[9059,11,7813,5],[9059,13,7814,4],[9059,22,7814,4,"makeTokenCallback"],[9059,39,7814,21,"makeTokenCallback"],[9059,40,7814,22,"existing"],[9059,48,7814,30],[9059,50,7814,32],[9060,8,7815,8],[9060,15,7815,15,"token"],[9060,20,7815,20],[9060,24,7815,24],[9061,10,7816,12],[9061,14,7816,16],[9061,15,7816,17,"tokenChangeListeners"],[9061,35,7816,37],[9061,36,7816,38,"forEach"],[9061,43,7816,45],[9061,44,7816,46,"listener"],[9061,52,7816,54],[9061,56,7816,58,"listener"],[9061,64,7816,66],[9061,65,7816,67,"token"],[9061,70,7816,72],[9061,71,7816,73],[9061,72,7816,74],[9062,10,7817,12],[9062,14,7817,16],[9062,21,7817,23,"existing"],[9062,29,7817,31],[9062,34,7817,36],[9062,44,7817,46],[9062,46,7817,48],[9063,12,7818,16,"existing"],[9063,20,7818,24],[9063,21,7818,25,"token"],[9063,26,7818,30],[9063,27,7818,31],[9064,10,7819,12],[9064,11,7819,13],[9064,17,7820,17],[9064,21,7820,21],[9064,28,7820,28,"existing"],[9064,36,7820,36],[9064,41,7820,41],[9064,49,7820,49],[9064,51,7820,51],[9065,12,7821,16],[9065,16,7821,22,"globalFunc"],[9065,26,7821,32],[9065,29,7821,35,"_window"],[9065,36,7821,42],[9065,37,7821,43],[9065,38,7821,44],[9065,39,7821,45,"existing"],[9065,47,7821,53],[9065,48,7821,54],[9066,12,7822,16],[9066,16,7822,20],[9066,23,7822,27,"globalFunc"],[9066,33,7822,37],[9066,38,7822,42],[9066,48,7822,52],[9066,50,7822,54],[9067,14,7823,20,"globalFunc"],[9067,24,7823,30],[9067,25,7823,31,"token"],[9067,30,7823,36],[9067,31,7823,37],[9068,12,7824,16],[9069,10,7825,12],[9070,8,7826,8],[9070,9,7826,9],[9071,6,7827,4],[9072,4,7827,5],[9073,6,7827,5,"key"],[9073,9,7827,5],[9074,6,7827,5,"value"],[9074,11,7827,5],[9074,13,7828,4],[9074,22,7828,4,"assertNotDestroyed"],[9074,40,7828,22,"assertNotDestroyed"],[9074,41,7828,22],[9074,43,7828,25],[9075,8,7829,8,"_assert"],[9075,15,7829,15],[9075,16,7829,16],[9075,17,7829,17],[9075,21,7829,21],[9075,22,7829,22,"destroyed"],[9075,31,7829,31],[9075,33,7829,33],[9075,37,7829,37],[9075,38,7829,38,"auth"],[9075,42,7829,42],[9075,44,7829,44],[9075,60,7829,60],[9075,61,7829,61],[9075,95,7829,95],[9075,96,7829,96],[9076,6,7830,4],[9077,4,7830,5],[9078,6,7830,5,"key"],[9078,9,7830,5],[9079,6,7830,5,"value"],[9079,11,7830,5],[9080,8,7830,5],[9080,12,7830,5,"_makeRenderPromise"],[9080,30,7830,5],[9080,33,7830,5,"_asyncToGenerator"],[9080,50,7830,5],[9080,51,7831,4],[9080,64,7831,30],[9081,10,7832,8],[9081,16,7832,14],[9081,20,7832,18],[9081,21,7832,19,"init"],[9081,25,7832,23],[9081,26,7832,24],[9081,27,7832,25],[9082,10,7833,8],[9082,14,7833,12],[9082,15,7833,13],[9082,19,7833,17],[9082,20,7833,18,"widgetId"],[9082,28,7833,26],[9082,30,7833,28],[9083,12,7834,12],[9083,16,7834,16,"container"],[9083,25,7834,25],[9083,28,7834,28],[9083,32,7834,32],[9083,33,7834,33,"container"],[9083,42,7834,42],[9084,12,7835,12],[9084,16,7835,16],[9084,17,7835,17],[9084,21,7835,21],[9084,22,7835,22,"isInvisible"],[9084,33,7835,33],[9084,35,7835,35],[9085,14,7836,16],[9085,18,7836,22,"guaranteedEmpty"],[9085,33,7836,37],[9085,36,7836,40,"document"],[9085,44,7836,48],[9085,45,7836,49,"createElement"],[9085,58,7836,62],[9085,59,7836,63],[9085,64,7836,68],[9085,65,7836,69],[9086,14,7837,16,"container"],[9086,23,7837,25],[9086,24,7837,26,"appendChild"],[9086,35,7837,37],[9086,36,7837,38,"guaranteedEmpty"],[9086,51,7837,53],[9086,52,7837,54],[9087,14,7838,16,"container"],[9087,23,7838,25],[9087,26,7838,28,"guaranteedEmpty"],[9087,41,7838,43],[9088,12,7839,12],[9089,12,7840,12],[9089,16,7840,16],[9089,17,7840,17,"widgetId"],[9089,25,7840,25],[9089,28,7840,28],[9089,32,7840,32],[9089,33,7840,33,"getAssertedRecaptcha"],[9089,53,7840,53],[9089,54,7840,54],[9089,55,7840,55],[9089,56,7840,56,"render"],[9089,62,7840,62],[9089,63,7840,63,"container"],[9089,72,7840,72],[9089,74,7840,74],[9089,78,7840,78],[9089,79,7840,79,"parameters"],[9089,89,7840,89],[9089,90,7840,90],[9090,10,7841,8],[9091,10,7842,8],[9091,17,7842,15],[9091,21,7842,19],[9091,22,7842,20,"widgetId"],[9091,30,7842,28],[9092,8,7843,4],[9092,9,7843,5],[9093,8,7843,5],[9093,17,7831,10,"makeRenderPromise"],[9093,34,7831,27,"makeRenderPromise"],[9093,35,7831,27],[9094,10,7831,27],[9094,17,7831,27,"_makeRenderPromise"],[9094,35,7831,27],[9094,36,7831,27,"apply"],[9094,41,7831,27],[9094,48,7831,27,"arguments"],[9094,57,7831,27],[9095,8,7831,27],[9096,8,7831,27],[9096,15,7831,10,"makeRenderPromise"],[9096,32,7831,27],[9097,6,7831,27],[9098,4,7831,27],[9099,6,7831,27,"key"],[9099,9,7831,27],[9100,6,7831,27,"value"],[9100,11,7831,27],[9101,8,7831,27],[9101,12,7831,27,"_init"],[9101,17,7831,27],[9101,20,7831,27,"_asyncToGenerator"],[9101,37,7831,27],[9101,38,7844,4],[9101,51,7844,17],[9102,10,7845,8,"_assert"],[9102,17,7845,15],[9102,18,7845,16,"_isHttpOrHttps"],[9102,32,7845,30],[9102,33,7845,31],[9102,34,7845,32],[9102,38,7845,36],[9102,39,7845,37,"_isWorker"],[9102,48,7845,46],[9102,49,7845,47],[9102,50,7845,48],[9102,52,7845,50],[9102,56,7845,54],[9102,57,7845,55,"auth"],[9102,61,7845,59],[9102,63,7845,61],[9102,79,7845,77],[9102,80,7845,78],[9102,114,7845,112],[9102,115,7845,113],[9103,10,7846,8],[9103,16,7846,14,"domReady"],[9103,24,7846,22],[9103,25,7846,23],[9103,26,7846,24],[9104,10,7847,8],[9104,14,7847,12],[9104,15,7847,13,"recaptcha"],[9104,24,7847,22],[9104,33,7847,31],[9104,37,7847,35],[9104,38,7847,36,"_recaptchaLoader"],[9104,54,7847,52],[9104,55,7847,53,"load"],[9104,59,7847,57],[9104,60,7847,58],[9104,64,7847,62],[9104,65,7847,63,"auth"],[9104,69,7847,67],[9104,71,7847,69],[9104,75,7847,73],[9104,76,7847,74,"auth"],[9104,80,7847,78],[9104,81,7847,79,"languageCode"],[9104,93,7847,91],[9104,97,7847,95,"undefined"],[9104,106,7847,104],[9104,107,7847,105],[9105,10,7848,8],[9105,14,7848,14,"siteKey"],[9105,21,7848,21],[9105,30,7848,30,"getRecaptchaParams"],[9105,48,7848,48],[9105,49,7848,49],[9105,53,7848,53],[9105,54,7848,54,"auth"],[9105,58,7848,58],[9105,59,7848,59],[9106,10,7849,8,"_assert"],[9106,17,7849,15],[9106,18,7849,16,"siteKey"],[9106,25,7849,23],[9106,27,7849,25],[9106,31,7849,29],[9106,32,7849,30,"auth"],[9106,36,7849,34],[9106,38,7849,36],[9106,54,7849,52],[9106,55,7849,53],[9106,89,7849,87],[9106,90,7849,88],[9107,10,7850,8],[9107,14,7850,12],[9107,15,7850,13,"parameters"],[9107,25,7850,23],[9107,26,7850,24,"sitekey"],[9107,33,7850,31],[9107,36,7850,34,"siteKey"],[9107,43,7850,41],[9108,8,7851,4],[9108,9,7851,5],[9109,8,7851,5],[9109,17,7844,10,"init"],[9109,21,7844,14,"init"],[9109,22,7844,14],[9110,10,7844,14],[9110,17,7844,14,"_init"],[9110,22,7844,14],[9110,23,7844,14,"apply"],[9110,28,7844,14],[9110,35,7844,14,"arguments"],[9110,44,7844,14],[9111,8,7844,14],[9112,8,7844,14],[9112,15,7844,10,"init"],[9112,19,7844,14],[9113,6,7844,14],[9114,4,7844,14],[9115,6,7844,14,"key"],[9115,9,7844,14],[9116,6,7844,14,"value"],[9116,11,7844,14],[9116,13,7852,4],[9116,22,7852,4,"getAssertedRecaptcha"],[9116,42,7852,24,"getAssertedRecaptcha"],[9116,43,7852,24],[9116,45,7852,27],[9117,8,7853,8,"_assert"],[9117,15,7853,15],[9117,16,7853,16],[9117,20,7853,20],[9117,21,7853,21,"recaptcha"],[9117,30,7853,30],[9117,32,7853,32],[9117,36,7853,36],[9117,37,7853,37,"auth"],[9117,41,7853,41],[9117,43,7853,43],[9117,59,7853,59],[9117,60,7853,60],[9117,94,7853,94],[9117,95,7853,95],[9118,8,7854,8],[9118,15,7854,15],[9118,19,7854,19],[9118,20,7854,20,"recaptcha"],[9118,29,7854,29],[9119,6,7855,4],[9120,4,7855,5],[9121,2,7855,5],[9122,2,7857,0],[9122,11,7857,9,"domReady"],[9122,19,7857,17,"domReady"],[9122,20,7857,17],[9122,22,7857,20],[9123,4,7858,4],[9123,8,7858,8,"resolver"],[9123,16,7858,16],[9123,19,7858,19],[9123,23,7858,23],[9124,4,7859,4],[9124,11,7859,11],[9124,15,7859,15,"Promise"],[9124,22,7859,22],[9124,23,7859,23,"resolve"],[9124,30,7859,30],[9124,34,7859,34],[9125,6,7860,8],[9125,10,7860,12,"document"],[9125,18,7860,20],[9125,19,7860,21,"readyState"],[9125,29,7860,31],[9125,34,7860,36],[9125,44,7860,46],[9125,46,7860,48],[9126,8,7861,12,"resolve"],[9126,15,7861,19],[9126,16,7861,20],[9126,17,7861,21],[9127,8,7862,12],[9128,6,7863,8],[9129,6,7864,8],[9130,6,7865,8],[9131,6,7866,8],[9132,6,7867,8,"resolver"],[9132,14,7867,16],[9132,17,7867,19,"resolver"],[9132,18,7867,19],[9132,23,7867,25,"resolve"],[9132,30,7867,32],[9132,31,7867,33],[9132,32,7867,34],[9133,6,7868,8,"window"],[9133,12,7868,14],[9133,13,7868,15,"addEventListener"],[9133,29,7868,31],[9133,30,7868,32],[9133,36,7868,38],[9133,38,7868,40,"resolver"],[9133,46,7868,48],[9133,47,7868,49],[9134,4,7869,4],[9134,5,7869,5],[9134,6,7869,6],[9134,7,7869,7,"catch"],[9134,12,7869,12],[9134,13,7869,13,"e"],[9134,14,7869,14],[9134,18,7869,18],[9135,6,7870,8],[9135,10,7870,12,"resolver"],[9135,18,7870,20],[9135,20,7870,22],[9136,8,7871,12,"window"],[9136,14,7871,18],[9136,15,7871,19,"removeEventListener"],[9136,34,7871,38],[9136,35,7871,39],[9136,41,7871,45],[9136,43,7871,47,"resolver"],[9136,51,7871,55],[9136,52,7871,56],[9137,6,7872,8],[9138,6,7873,8],[9138,12,7873,14,"e"],[9138,13,7873,15],[9139,4,7874,4],[9139,5,7874,5],[9139,6,7874,6],[9140,2,7875,0],[9142,2,7877,0],[9143,0,7878,0],[9144,0,7879,0],[9145,0,7880,0],[9146,0,7881,0],[9147,0,7882,0],[9148,0,7883,0],[9149,0,7884,0],[9150,0,7885,0],[9151,0,7886,0],[9152,0,7887,0],[9153,0,7888,0],[9154,0,7889,0],[9155,0,7890,0],[9156,0,7891,0],[9157,0,7892,0],[9158,2,7877,0],[9158,6,7893,6,"ConfirmationResultImpl"],[9158,28,7893,28],[9159,4,7894,4],[9159,13,7894,4,"ConfirmationResultImpl"],[9159,36,7894,16,"verificationId"],[9159,50,7894,30],[9159,52,7894,32,"onConfirmation"],[9159,66,7894,46],[9159,68,7894,48],[9160,6,7894,48,"_classCallCheck"],[9160,21,7894,48],[9160,28,7894,48,"ConfirmationResultImpl"],[9160,50,7894,48],[9161,6,7895,8],[9161,10,7895,12],[9161,11,7895,13,"verificationId"],[9161,25,7895,27],[9161,28,7895,30,"verificationId"],[9161,42,7895,44],[9162,6,7896,8],[9162,10,7896,12],[9162,11,7896,13,"onConfirmation"],[9162,25,7896,27],[9162,28,7896,30,"onConfirmation"],[9162,42,7896,44],[9163,4,7897,4],[9164,4,7897,5],[9164,11,7897,5,"_createClass"],[9164,23,7897,5],[9164,24,7897,5,"ConfirmationResultImpl"],[9164,46,7897,5],[9165,6,7897,5,"key"],[9165,9,7897,5],[9166,6,7897,5,"value"],[9166,11,7897,5],[9166,13,7898,4],[9166,22,7898,4,"confirm"],[9166,29,7898,11,"confirm"],[9166,30,7898,12,"verificationCode"],[9166,46,7898,28],[9166,48,7898,30],[9167,8,7899,8],[9167,12,7899,14,"authCredential"],[9167,26,7899,28],[9167,29,7899,31,"PhoneAuthCredential"],[9167,48,7899,50],[9167,49,7899,51,"_fromVerification"],[9167,66,7899,68],[9167,67,7899,69],[9167,71,7899,73],[9167,72,7899,74,"verificationId"],[9167,86,7899,88],[9167,88,7899,90,"verificationCode"],[9167,104,7899,106],[9167,105,7899,107],[9168,8,7900,8],[9168,15,7900,15],[9168,19,7900,19],[9168,20,7900,20,"onConfirmation"],[9168,34,7900,34],[9168,35,7900,35,"authCredential"],[9168,49,7900,49],[9168,50,7900,50],[9169,6,7901,4],[9170,4,7901,5],[9171,2,7901,5],[9172,2,7903,0],[9173,0,7904,0],[9174,0,7905,0],[9175,0,7906,0],[9176,0,7907,0],[9177,0,7908,0],[9178,0,7909,0],[9179,0,7910,0],[9180,0,7911,0],[9181,0,7912,0],[9182,0,7913,0],[9183,0,7914,0],[9184,0,7915,0],[9185,0,7916,0],[9186,0,7917,0],[9187,0,7918,0],[9188,0,7919,0],[9189,0,7920,0],[9190,0,7921,0],[9191,0,7922,0],[9192,0,7923,0],[9193,0,7924,0],[9194,0,7925,0],[9195,0,7926,0],[9196,0,7927,0],[9197,0,7928,0],[9198,0,7929,0],[9199,0,7930,0],[9200,0,7931,0],[9201,0,7932,0],[9202,0,7933,0],[9203,0,7934,0],[9204,0,7935,0],[9205,0,7936,0],[9206,0,7937,0],[9207,0,7938,0],[9208,2,7903,0],[9208,11,7939,15,"signInWithPhoneNumber"],[9208,32,7939,36,"signInWithPhoneNumber"],[9208,33,7939,36,"_x196"],[9208,38,7939,36],[9208,40,7939,36,"_x197"],[9208,45,7939,36],[9208,47,7939,36,"_x198"],[9208,52,7939,36],[9209,4,7939,36],[9209,11,7939,36,"_signInWithPhoneNumber"],[9209,33,7939,36],[9209,34,7939,36,"apply"],[9209,39,7939,36],[9209,46,7939,36,"arguments"],[9209,55,7939,36],[9210,2,7939,36],[9211,2,7947,0],[9212,0,7948,0],[9213,0,7949,0],[9214,0,7950,0],[9215,0,7951,0],[9216,0,7952,0],[9217,0,7953,0],[9218,0,7954,0],[9219,0,7955,0],[9220,0,7956,0],[9221,0,7957,0],[9222,0,7958,0],[9223,2,7947,0],[9223,11,7947,0,"_signInWithPhoneNumber"],[9223,34,7947,0],[9224,4,7947,0,"_signInWithPhoneNumber"],[9224,26,7947,0],[9224,29,7947,0,"_asyncToGenerator"],[9224,46,7947,0],[9224,47,7939,0],[9224,58,7939,37,"auth"],[9224,62,7939,41],[9224,64,7939,43,"phoneNumber"],[9224,75,7939,54],[9224,77,7939,56,"appVerifier"],[9224,88,7939,67],[9224,90,7939,69],[9225,6,7940,4],[9225,10,7940,8,"app"],[9225,13,7940,11],[9225,14,7940,12,"_isFirebaseServerApp"],[9225,34,7940,32],[9225,35,7940,33,"auth"],[9225,39,7940,37],[9225,40,7940,38,"app"],[9225,43,7940,41],[9225,44,7940,42],[9225,46,7940,44],[9226,8,7941,8],[9226,15,7941,15,"Promise"],[9226,22,7941,22],[9226,23,7941,23,"reject"],[9226,29,7941,29],[9226,30,7941,30,"_serverAppCurrentUserOperationNotSupportedError"],[9226,77,7941,77],[9226,78,7941,78,"auth"],[9226,82,7941,82],[9226,83,7941,83],[9226,84,7941,84],[9227,6,7942,4],[9228,6,7943,4],[9228,10,7943,10,"authInternal"],[9228,22,7943,22],[9228,25,7943,25,"_castAuth"],[9228,34,7943,34],[9228,35,7943,35,"auth"],[9228,39,7943,39],[9228,40,7943,40],[9229,6,7944,4],[9229,10,7944,10,"verificationId"],[9229,24,7944,24],[9229,33,7944,33,"_verifyPhoneNumber"],[9229,51,7944,51],[9229,52,7944,52,"authInternal"],[9229,64,7944,64],[9229,66,7944,66,"phoneNumber"],[9229,77,7944,77],[9229,79,7944,79,"util"],[9229,83,7944,83],[9229,84,7944,84,"getModularInstance"],[9229,102,7944,102],[9229,103,7944,103,"appVerifier"],[9229,114,7944,114],[9229,115,7944,115],[9229,116,7944,116],[9230,6,7945,4],[9230,13,7945,11],[9230,17,7945,15,"ConfirmationResultImpl"],[9230,39,7945,37],[9230,40,7945,38,"verificationId"],[9230,54,7945,52],[9230,56,7945,54,"cred"],[9230,60,7945,58],[9230,64,7945,62,"signInWithCredential"],[9230,84,7945,82],[9230,85,7945,83,"authInternal"],[9230,97,7945,95],[9230,99,7945,97,"cred"],[9230,103,7945,101],[9230,104,7945,102],[9230,105,7945,103],[9231,4,7946,0],[9231,5,7946,1],[9232,4,7946,1],[9232,11,7946,1,"_signInWithPhoneNumber"],[9232,33,7946,1],[9232,34,7946,1,"apply"],[9232,39,7946,1],[9232,46,7946,1,"arguments"],[9232,55,7946,1],[9233,2,7946,1],[9234,2,7946,1],[9234,11,7959,15,"linkWithPhoneNumber"],[9234,30,7959,34,"linkWithPhoneNumber"],[9234,31,7959,34,"_x199"],[9234,36,7959,34],[9234,38,7959,34,"_x200"],[9234,43,7959,34],[9234,45,7959,34,"_x201"],[9234,50,7959,34],[9235,4,7959,34],[9235,11,7959,34,"_linkWithPhoneNumber"],[9235,31,7959,34],[9235,32,7959,34,"apply"],[9235,37,7959,34],[9235,44,7959,34,"arguments"],[9235,53,7959,34],[9236,2,7959,34],[9237,2,7965,0],[9238,0,7966,0],[9239,0,7967,0],[9240,0,7968,0],[9241,0,7969,0],[9242,0,7970,0],[9243,0,7971,0],[9244,0,7972,0],[9245,0,7973,0],[9246,0,7974,0],[9247,0,7975,0],[9248,0,7976,0],[9249,0,7977,0],[9250,0,7978,0],[9251,0,7979,0],[9252,2,7965,0],[9252,11,7965,0,"_linkWithPhoneNumber"],[9252,32,7965,0],[9253,4,7965,0,"_linkWithPhoneNumber"],[9253,24,7965,0],[9253,27,7965,0,"_asyncToGenerator"],[9253,44,7965,0],[9253,45,7959,0],[9253,56,7959,35,"user"],[9253,60,7959,39],[9253,62,7959,41,"phoneNumber"],[9253,73,7959,52],[9253,75,7959,54,"appVerifier"],[9253,86,7959,65],[9253,88,7959,67],[9254,6,7960,4],[9254,10,7960,10,"userInternal"],[9254,22,7960,22],[9254,25,7960,25,"util"],[9254,29,7960,29],[9254,30,7960,30,"getModularInstance"],[9254,48,7960,48],[9254,49,7960,49,"user"],[9254,53,7960,53],[9254,54,7960,54],[9255,6,7961,4],[9255,12,7961,10,"_assertLinkedStatus"],[9255,31,7961,29],[9255,32,7961,30],[9255,37,7961,35],[9255,39,7961,37,"userInternal"],[9255,51,7961,49],[9255,53,7961,51],[9255,60,7961,58],[9255,61,7961,59],[9255,83,7961,81],[9255,84,7961,82],[9256,6,7962,4],[9256,10,7962,10,"verificationId"],[9256,24,7962,24],[9256,33,7962,33,"_verifyPhoneNumber"],[9256,51,7962,51],[9256,52,7962,52,"userInternal"],[9256,64,7962,64],[9256,65,7962,65,"auth"],[9256,69,7962,69],[9256,71,7962,71,"phoneNumber"],[9256,82,7962,82],[9256,84,7962,84,"util"],[9256,88,7962,88],[9256,89,7962,89,"getModularInstance"],[9256,107,7962,107],[9256,108,7962,108,"appVerifier"],[9256,119,7962,119],[9256,120,7962,120],[9256,121,7962,121],[9257,6,7963,4],[9257,13,7963,11],[9257,17,7963,15,"ConfirmationResultImpl"],[9257,39,7963,37],[9257,40,7963,38,"verificationId"],[9257,54,7963,52],[9257,56,7963,54,"cred"],[9257,60,7963,58],[9257,64,7963,62,"linkWithCredential"],[9257,82,7963,80],[9257,83,7963,81,"userInternal"],[9257,95,7963,93],[9257,97,7963,95,"cred"],[9257,101,7963,99],[9257,102,7963,100],[9257,103,7963,101],[9258,4,7964,0],[9258,5,7964,1],[9259,4,7964,1],[9259,11,7964,1,"_linkWithPhoneNumber"],[9259,31,7964,1],[9259,32,7964,1,"apply"],[9259,37,7964,1],[9259,44,7964,1,"arguments"],[9259,53,7964,1],[9260,2,7964,1],[9261,2,7964,1],[9261,11,7980,15,"reauthenticateWithPhoneNumber"],[9261,40,7980,44,"reauthenticateWithPhoneNumber"],[9261,41,7980,44,"_x202"],[9261,46,7980,44],[9261,48,7980,44,"_x203"],[9261,53,7980,44],[9261,55,7980,44,"_x204"],[9261,60,7980,44],[9262,4,7980,44],[9262,11,7980,44,"_reauthenticateWithPhoneNumber"],[9262,41,7980,44],[9262,42,7980,44,"apply"],[9262,47,7980,44],[9262,54,7980,44,"arguments"],[9262,63,7980,44],[9263,2,7980,44],[9264,2,7988,0],[9265,0,7989,0],[9266,0,7990,0],[9267,0,7991,0],[9268,2,7988,0],[9268,11,7988,0,"_reauthenticateWithPhoneNumber"],[9268,42,7988,0],[9269,4,7988,0,"_reauthenticateWithPhoneNumber"],[9269,34,7988,0],[9269,37,7988,0,"_asyncToGenerator"],[9269,54,7988,0],[9269,55,7980,0],[9269,66,7980,45,"user"],[9269,70,7980,49],[9269,72,7980,51,"phoneNumber"],[9269,83,7980,62],[9269,85,7980,64,"appVerifier"],[9269,96,7980,75],[9269,98,7980,77],[9270,6,7981,4],[9270,10,7981,10,"userInternal"],[9270,22,7981,22],[9270,25,7981,25,"util"],[9270,29,7981,29],[9270,30,7981,30,"getModularInstance"],[9270,48,7981,48],[9270,49,7981,49,"user"],[9270,53,7981,53],[9270,54,7981,54],[9271,6,7982,4],[9271,10,7982,8,"app"],[9271,13,7982,11],[9271,14,7982,12,"_isFirebaseServerApp"],[9271,34,7982,32],[9271,35,7982,33,"userInternal"],[9271,47,7982,45],[9271,48,7982,46,"auth"],[9271,52,7982,50],[9271,53,7982,51,"app"],[9271,56,7982,54],[9271,57,7982,55],[9271,59,7982,57],[9272,8,7983,8],[9272,15,7983,15,"Promise"],[9272,22,7983,22],[9272,23,7983,23,"reject"],[9272,29,7983,29],[9272,30,7983,30,"_serverAppCurrentUserOperationNotSupportedError"],[9272,77,7983,77],[9272,78,7983,78,"userInternal"],[9272,90,7983,90],[9272,91,7983,91,"auth"],[9272,95,7983,95],[9272,96,7983,96],[9272,97,7983,97],[9273,6,7984,4],[9274,6,7985,4],[9274,10,7985,10,"verificationId"],[9274,24,7985,24],[9274,33,7985,33,"_verifyPhoneNumber"],[9274,51,7985,51],[9274,52,7985,52,"userInternal"],[9274,64,7985,64],[9274,65,7985,65,"auth"],[9274,69,7985,69],[9274,71,7985,71,"phoneNumber"],[9274,82,7985,82],[9274,84,7985,84,"util"],[9274,88,7985,88],[9274,89,7985,89,"getModularInstance"],[9274,107,7985,107],[9274,108,7985,108,"appVerifier"],[9274,119,7985,119],[9274,120,7985,120],[9274,121,7985,121],[9275,6,7986,4],[9275,13,7986,11],[9275,17,7986,15,"ConfirmationResultImpl"],[9275,39,7986,37],[9275,40,7986,38,"verificationId"],[9275,54,7986,52],[9275,56,7986,54,"cred"],[9275,60,7986,58],[9275,64,7986,62,"reauthenticateWithCredential"],[9275,92,7986,90],[9275,93,7986,91,"userInternal"],[9275,105,7986,103],[9275,107,7986,105,"cred"],[9275,111,7986,109],[9275,112,7986,110],[9275,113,7986,111],[9276,4,7987,0],[9276,5,7987,1],[9277,4,7987,1],[9277,11,7987,1,"_reauthenticateWithPhoneNumber"],[9277,41,7987,1],[9277,42,7987,1,"apply"],[9277,47,7987,1],[9277,54,7987,1,"arguments"],[9277,63,7987,1],[9278,2,7987,1],[9279,2,7987,1],[9279,11,7992,15,"_verifyPhoneNumber"],[9279,29,7992,33,"_verifyPhoneNumber"],[9279,30,7992,33,"_x205"],[9279,35,7992,33],[9279,37,7992,33,"_x206"],[9279,42,7992,33],[9279,44,7992,33,"_x207"],[9279,49,7992,33],[9280,4,7992,33],[9280,11,7992,33,"_verifyPhoneNumber2"],[9280,30,7992,33],[9280,31,7992,33,"apply"],[9280,36,7992,33],[9280,43,7992,33,"arguments"],[9280,52,7992,33],[9281,2,7992,33],[9282,2,8094,0],[9283,0,8095,0],[9284,0,8096,0],[9285,0,8097,0],[9286,0,8098,0],[9287,0,8099,0],[9288,0,8100,0],[9289,0,8101,0],[9290,0,8102,0],[9291,0,8103,0],[9292,0,8104,0],[9293,0,8105,0],[9294,0,8106,0],[9295,0,8107,0],[9296,0,8108,0],[9297,0,8109,0],[9298,0,8110,0],[9299,0,8111,0],[9300,0,8112,0],[9301,0,8113,0],[9302,0,8114,0],[9303,0,8115,0],[9304,0,8116,0],[9305,2,8094,0],[9305,11,8094,0,"_verifyPhoneNumber2"],[9305,31,8094,0],[9306,4,8094,0,"_verifyPhoneNumber2"],[9306,23,8094,0],[9306,26,8094,0,"_asyncToGenerator"],[9306,43,8094,0],[9306,44,7992,0],[9306,55,7992,34,"auth"],[9306,59,7992,38],[9306,61,7992,40,"options"],[9306,68,7992,47],[9306,70,7992,49,"verifier"],[9306,78,7992,57],[9306,80,7992,59],[9307,6,7993,4],[9307,10,7993,8],[9307,11,7993,9,"auth"],[9307,15,7993,13],[9307,16,7993,14,"_getRecaptchaConfig"],[9307,35,7993,33],[9307,36,7993,34],[9307,37,7993,35],[9307,39,7993,37],[9308,8,7994,8],[9308,12,7994,12],[9309,10,7995,12],[9309,16,7995,18,"_initializeRecaptchaConfig"],[9309,42,7995,44],[9309,43,7995,45,"auth"],[9309,47,7995,49],[9309,48,7995,50],[9310,8,7996,8],[9310,9,7996,9],[9310,10,7997,8],[9310,17,7997,15,"error"],[9310,22,7997,20],[9310,24,7997,22],[9311,10,7998,12],[9312,10,7999,12],[9313,10,8000,12],[9314,10,8001,12],[9315,10,8002,12,"console"],[9315,17,8002,19],[9315,18,8002,20,"log"],[9315,21,8002,23],[9315,22,8002,24],[9315,115,8002,117],[9315,116,8002,118],[9316,8,8003,8],[9317,6,8004,4],[9318,6,8005,4],[9318,10,8005,8],[9319,8,8006,8],[9319,12,8006,12,"phoneInfoOptions"],[9319,28,8006,28],[9320,8,8007,8],[9320,12,8007,12],[9320,19,8007,19,"options"],[9320,26,8007,26],[9320,31,8007,31],[9320,39,8007,39],[9320,41,8007,41],[9321,10,8008,12,"phoneInfoOptions"],[9321,26,8008,28],[9321,29,8008,31],[9322,12,8009,16,"phoneNumber"],[9322,23,8009,27],[9322,25,8009,29,"options"],[9323,10,8010,12],[9323,11,8010,13],[9324,8,8011,8],[9324,9,8011,9],[9324,15,8012,13],[9325,10,8013,12,"phoneInfoOptions"],[9325,26,8013,28],[9325,29,8013,31,"options"],[9325,36,8013,38],[9326,8,8014,8],[9327,8,8015,8],[9327,12,8015,12],[9327,21,8015,21],[9327,25,8015,25,"phoneInfoOptions"],[9327,41,8015,41],[9327,43,8015,43],[9328,10,8016,12],[9328,14,8016,18,"session"],[9328,21,8016,25],[9328,24,8016,28,"phoneInfoOptions"],[9328,40,8016,44],[9328,41,8016,45,"session"],[9328,48,8016,52],[9329,10,8017,12],[9329,14,8017,16],[9329,27,8017,29],[9329,31,8017,33,"phoneInfoOptions"],[9329,47,8017,49],[9329,49,8017,51],[9330,12,8018,16,"_assert"],[9330,19,8018,23],[9330,20,8018,24,"session"],[9330,27,8018,31],[9330,28,8018,32,"type"],[9330,32,8018,36],[9330,37,8018,41],[9330,45,8018,49],[9330,46,8018,50],[9330,83,8018,87,"auth"],[9330,87,8018,91],[9330,89,8018,93],[9330,105,8018,109],[9330,106,8018,110],[9330,140,8018,144],[9330,141,8018,145],[9331,12,8019,16],[9331,16,8019,22,"startPhoneMfaEnrollmentRequest"],[9331,46,8019,52],[9331,49,8019,55],[9332,14,8020,20,"idToken"],[9332,21,8020,27],[9332,23,8020,29,"session"],[9332,30,8020,36],[9332,31,8020,37,"credential"],[9332,41,8020,47],[9333,14,8021,20,"phoneEnrollmentInfo"],[9333,33,8021,39],[9333,35,8021,41],[9334,16,8022,24,"phoneNumber"],[9334,27,8022,35],[9334,29,8022,37,"phoneInfoOptions"],[9334,45,8022,53],[9334,46,8022,54,"phoneNumber"],[9334,57,8022,65],[9335,16,8023,24,"clientType"],[9335,26,8023,34],[9335,28,8023,36],[9335,45,8023,53],[9335,46,8023,54],[9336,14,8024,20],[9337,12,8025,16],[9337,13,8025,17],[9338,12,8026,16],[9338,16,8026,22,"startEnrollPhoneMfaActionCallback"],[9338,49,8026,55],[9339,14,8026,55],[9339,18,8026,55,"_ref30"],[9339,24,8026,55],[9339,27,8026,55,"_asyncToGenerator"],[9339,44,8026,55],[9339,45,8026,58],[9339,56,8026,65,"authInstance"],[9339,68,8026,77],[9339,70,8026,79,"request"],[9339,77,8026,86],[9339,79,8026,91],[9340,16,8027,20],[9341,16,8028,20],[9341,20,8028,24,"request"],[9341,27,8028,31],[9341,28,8028,32,"phoneEnrollmentInfo"],[9341,47,8028,51],[9341,48,8028,52,"captchaResponse"],[9341,63,8028,67],[9341,68,8028,72,"FAKE_TOKEN"],[9341,78,8028,82],[9341,80,8028,84],[9342,18,8029,24,"_assert"],[9342,25,8029,31],[9342,26,8029,32,"verifier"],[9342,34,8029,40],[9342,36,8029,42,"type"],[9342,40,8029,46],[9342,45,8029,51,"RECAPTCHA_VERIFIER_TYPE"],[9342,68,8029,74],[9342,70,8029,76,"authInstance"],[9342,82,8029,88],[9342,84,8029,90],[9342,100,8029,106],[9342,101,8029,107],[9342,135,8029,141],[9342,136,8029,142],[9343,18,8030,24],[9343,22,8030,30,"requestWithRecaptchaV2"],[9343,44,8030,52],[9343,53,8030,61,"injectRecaptchaV2Token"],[9343,75,8030,83],[9343,76,8030,84,"authInstance"],[9343,88,8030,96],[9343,90,8030,98,"request"],[9343,97,8030,105],[9343,99,8030,107,"verifier"],[9343,107,8030,115],[9343,108,8030,116],[9344,18,8031,24],[9344,25,8031,31,"startEnrollPhoneMfa"],[9344,44,8031,50],[9344,45,8031,51,"authInstance"],[9344,57,8031,63],[9344,59,8031,65,"requestWithRecaptchaV2"],[9344,81,8031,87],[9344,82,8031,88],[9345,16,8032,20],[9346,16,8033,20],[9346,23,8033,27,"startEnrollPhoneMfa"],[9346,42,8033,46],[9346,43,8033,47,"authInstance"],[9346,55,8033,59],[9346,57,8033,61,"request"],[9346,64,8033,68],[9346,65,8033,69],[9347,14,8034,16],[9347,15,8034,17],[9348,14,8034,17],[9348,30,8026,22,"startEnrollPhoneMfaActionCallback"],[9348,63,8026,55,"startEnrollPhoneMfaActionCallback"],[9348,64,8026,55,"_x222"],[9348,69,8026,55],[9348,71,8026,55,"_x223"],[9348,76,8026,55],[9349,16,8026,55],[9349,23,8026,55,"_ref30"],[9349,29,8026,55],[9349,30,8026,55,"apply"],[9349,35,8026,55],[9349,42,8026,55,"arguments"],[9349,51,8026,55],[9350,14,8026,55],[9351,12,8026,55],[9351,15,8034,17],[9352,12,8035,16],[9352,16,8035,22,"startPhoneMfaEnrollmentResponse"],[9352,47,8035,53],[9352,50,8035,56,"handleRecaptchaFlow"],[9352,69,8035,75],[9352,70,8035,76,"auth"],[9352,74,8035,80],[9352,76,8035,82,"startPhoneMfaEnrollmentRequest"],[9352,106,8035,112],[9352,108,8035,114],[9352,126,8035,132],[9352,127,8035,133],[9352,173,8035,179,"startEnrollPhoneMfaActionCallback"],[9352,206,8035,212],[9352,208,8035,214],[9352,224,8035,230],[9352,225,8035,231],[9352,267,8035,273],[9352,268,8035,274],[9353,12,8036,16],[9353,16,8036,22,"response"],[9353,24,8036,30],[9353,33,8036,39,"startPhoneMfaEnrollmentResponse"],[9353,64,8036,70],[9353,65,8036,71,"catch"],[9353,70,8036,76],[9353,71,8036,77,"error"],[9353,76,8036,82],[9353,80,8036,86],[9354,14,8037,20],[9354,21,8037,27,"Promise"],[9354,28,8037,34],[9354,29,8037,35,"reject"],[9354,35,8037,41],[9354,36,8037,42,"error"],[9354,41,8037,47],[9354,42,8037,48],[9355,12,8038,16],[9355,13,8038,17],[9355,14,8038,18],[9356,12,8039,16],[9356,19,8039,23,"response"],[9356,27,8039,31],[9356,28,8039,32,"phoneSessionInfo"],[9356,44,8039,48],[9356,45,8039,49,"sessionInfo"],[9356,56,8039,60],[9357,10,8040,12],[9357,11,8040,13],[9357,17,8041,17],[9358,12,8042,16,"_assert"],[9358,19,8042,23],[9358,20,8042,24,"session"],[9358,27,8042,31],[9358,28,8042,32,"type"],[9358,32,8042,36],[9358,37,8042,41],[9358,45,8042,49],[9358,46,8042,50],[9358,84,8042,88,"auth"],[9358,88,8042,92],[9358,90,8042,94],[9358,106,8042,110],[9358,107,8042,111],[9358,141,8042,145],[9358,142,8042,146],[9359,12,8043,16],[9359,16,8043,22,"mfaEnrollmentId"],[9359,31,8043,37],[9359,34,8043,40,"phoneInfoOptions"],[9359,50,8043,56],[9359,51,8043,57,"multiFactorHint"],[9359,66,8043,72],[9359,68,8043,74,"uid"],[9359,71,8043,77],[9359,75,8044,20,"phoneInfoOptions"],[9359,91,8044,36],[9359,92,8044,37,"multiFactorUid"],[9359,106,8044,51],[9360,12,8045,16,"_assert"],[9360,19,8045,23],[9360,20,8045,24,"mfaEnrollmentId"],[9360,35,8045,39],[9360,37,8045,41,"auth"],[9360,41,8045,45],[9360,43,8045,47],[9360,70,8045,74],[9360,71,8045,75],[9360,107,8045,111],[9360,108,8045,112],[9361,12,8046,16],[9361,16,8046,22,"startPhoneMfaSignInRequest"],[9361,42,8046,48],[9361,45,8046,51],[9362,14,8047,20,"mfaPendingCredential"],[9362,34,8047,40],[9362,36,8047,42,"session"],[9362,43,8047,49],[9362,44,8047,50,"credential"],[9362,54,8047,60],[9363,14,8048,20,"mfaEnrollmentId"],[9363,29,8048,35],[9364,14,8049,20,"phoneSignInInfo"],[9364,29,8049,35],[9364,31,8049,37],[9365,16,8050,24,"clientType"],[9365,26,8050,34],[9365,28,8050,36],[9365,45,8050,53],[9365,46,8050,54],[9366,14,8051,20],[9367,12,8052,16],[9367,13,8052,17],[9368,12,8053,16],[9368,16,8053,22,"startSignInPhoneMfaActionCallback"],[9368,49,8053,55],[9369,14,8053,55],[9369,18,8053,55,"_ref31"],[9369,24,8053,55],[9369,27,8053,55,"_asyncToGenerator"],[9369,44,8053,55],[9369,45,8053,58],[9369,56,8053,65,"authInstance"],[9369,68,8053,77],[9369,70,8053,79,"request"],[9369,77,8053,86],[9369,79,8053,91],[9370,16,8054,20],[9371,16,8055,20],[9371,20,8055,24,"request"],[9371,27,8055,31],[9371,28,8055,32,"phoneSignInInfo"],[9371,43,8055,47],[9371,44,8055,48,"captchaResponse"],[9371,59,8055,63],[9371,64,8055,68,"FAKE_TOKEN"],[9371,74,8055,78],[9371,76,8055,80],[9372,18,8056,24,"_assert"],[9372,25,8056,31],[9372,26,8056,32,"verifier"],[9372,34,8056,40],[9372,36,8056,42,"type"],[9372,40,8056,46],[9372,45,8056,51,"RECAPTCHA_VERIFIER_TYPE"],[9372,68,8056,74],[9372,70,8056,76,"authInstance"],[9372,82,8056,88],[9372,84,8056,90],[9372,100,8056,106],[9372,101,8056,107],[9372,135,8056,141],[9372,136,8056,142],[9373,18,8057,24],[9373,22,8057,30,"requestWithRecaptchaV2"],[9373,44,8057,52],[9373,53,8057,61,"injectRecaptchaV2Token"],[9373,75,8057,83],[9373,76,8057,84,"authInstance"],[9373,88,8057,96],[9373,90,8057,98,"request"],[9373,97,8057,105],[9373,99,8057,107,"verifier"],[9373,107,8057,115],[9373,108,8057,116],[9374,18,8058,24],[9374,25,8058,31,"startSignInPhoneMfa"],[9374,44,8058,50],[9374,45,8058,51,"authInstance"],[9374,57,8058,63],[9374,59,8058,65,"requestWithRecaptchaV2"],[9374,81,8058,87],[9374,82,8058,88],[9375,16,8059,20],[9376,16,8060,20],[9376,23,8060,27,"startSignInPhoneMfa"],[9376,42,8060,46],[9376,43,8060,47,"authInstance"],[9376,55,8060,59],[9376,57,8060,61,"request"],[9376,64,8060,68],[9376,65,8060,69],[9377,14,8061,16],[9377,15,8061,17],[9378,14,8061,17],[9378,30,8053,22,"startSignInPhoneMfaActionCallback"],[9378,63,8053,55,"startSignInPhoneMfaActionCallback"],[9378,64,8053,55,"_x224"],[9378,69,8053,55],[9378,71,8053,55,"_x225"],[9378,76,8053,55],[9379,16,8053,55],[9379,23,8053,55,"_ref31"],[9379,29,8053,55],[9379,30,8053,55,"apply"],[9379,35,8053,55],[9379,42,8053,55,"arguments"],[9379,51,8053,55],[9380,14,8053,55],[9381,12,8053,55],[9381,15,8061,17],[9382,12,8062,16],[9382,16,8062,22,"startPhoneMfaSignInResponse"],[9382,43,8062,49],[9382,46,8062,52,"handleRecaptchaFlow"],[9382,65,8062,71],[9382,66,8062,72,"auth"],[9382,70,8062,76],[9382,72,8062,78,"startPhoneMfaSignInRequest"],[9382,98,8062,104],[9382,100,8062,106],[9382,114,8062,120],[9382,115,8062,121],[9382,157,8062,163,"startSignInPhoneMfaActionCallback"],[9382,190,8062,196],[9382,192,8062,198],[9382,208,8062,214],[9382,209,8062,215],[9382,251,8062,257],[9382,252,8062,258],[9383,12,8063,16],[9383,16,8063,22,"response"],[9383,25,8063,30],[9383,34,8063,39,"startPhoneMfaSignInResponse"],[9383,61,8063,66],[9383,62,8063,67,"catch"],[9383,67,8063,72],[9383,68,8063,73,"error"],[9383,73,8063,78],[9383,77,8063,82],[9384,14,8064,20],[9384,21,8064,27,"Promise"],[9384,28,8064,34],[9384,29,8064,35,"reject"],[9384,35,8064,41],[9384,36,8064,42,"error"],[9384,41,8064,47],[9384,42,8064,48],[9385,12,8065,16],[9385,13,8065,17],[9385,14,8065,18],[9386,12,8066,16],[9386,19,8066,23,"response"],[9386,28,8066,31],[9386,29,8066,32,"phoneResponseInfo"],[9386,46,8066,49],[9386,47,8066,50,"sessionInfo"],[9386,58,8066,61],[9387,10,8067,12],[9388,8,8068,8],[9388,9,8068,9],[9388,15,8069,13],[9389,10,8070,12],[9389,14,8070,18,"sendPhoneVerificationCodeRequest"],[9389,46,8070,50],[9389,49,8070,53],[9390,12,8071,16,"phoneNumber"],[9390,23,8071,27],[9390,25,8071,29,"phoneInfoOptions"],[9390,41,8071,45],[9390,42,8071,46,"phoneNumber"],[9390,53,8071,57],[9391,12,8072,16,"clientType"],[9391,22,8072,26],[9391,24,8072,28],[9391,41,8072,45],[9391,42,8072,46],[9392,10,8073,12],[9392,11,8073,13],[9393,10,8074,12],[9393,14,8074,18,"sendPhoneVerificationCodeActionCallback"],[9393,53,8074,57],[9394,12,8074,57],[9394,16,8074,57,"_ref32"],[9394,22,8074,57],[9394,25,8074,57,"_asyncToGenerator"],[9394,42,8074,57],[9394,43,8074,60],[9394,54,8074,67,"authInstance"],[9394,66,8074,79],[9394,68,8074,81,"request"],[9394,75,8074,88],[9394,77,8074,93],[9395,14,8075,16],[9396,14,8076,16],[9396,18,8076,20,"request"],[9396,25,8076,27],[9396,26,8076,28,"captchaResponse"],[9396,41,8076,43],[9396,46,8076,48,"FAKE_TOKEN"],[9396,56,8076,58],[9396,58,8076,60],[9397,16,8077,20,"_assert"],[9397,23,8077,27],[9397,24,8077,28,"verifier"],[9397,32,8077,36],[9397,34,8077,38,"type"],[9397,38,8077,42],[9397,43,8077,47,"RECAPTCHA_VERIFIER_TYPE"],[9397,66,8077,70],[9397,68,8077,72,"authInstance"],[9397,80,8077,84],[9397,82,8077,86],[9397,98,8077,102],[9397,99,8077,103],[9397,133,8077,137],[9397,134,8077,138],[9398,16,8078,20],[9398,20,8078,26,"requestWithRecaptchaV2"],[9398,42,8078,48],[9398,51,8078,57,"injectRecaptchaV2Token"],[9398,73,8078,79],[9398,74,8078,80,"authInstance"],[9398,86,8078,92],[9398,88,8078,94,"request"],[9398,95,8078,101],[9398,97,8078,103,"verifier"],[9398,105,8078,111],[9398,106,8078,112],[9399,16,8079,20],[9399,23,8079,27,"sendPhoneVerificationCode"],[9399,48,8079,52],[9399,49,8079,53,"authInstance"],[9399,61,8079,65],[9399,63,8079,67,"requestWithRecaptchaV2"],[9399,85,8079,89],[9399,86,8079,90],[9400,14,8080,16],[9401,14,8081,16],[9401,21,8081,23,"sendPhoneVerificationCode"],[9401,46,8081,48],[9401,47,8081,49,"authInstance"],[9401,59,8081,61],[9401,61,8081,63,"request"],[9401,68,8081,70],[9401,69,8081,71],[9402,12,8082,12],[9402,13,8082,13],[9403,12,8082,13],[9403,28,8074,18,"sendPhoneVerificationCodeActionCallback"],[9403,67,8074,57,"sendPhoneVerificationCodeActionCallback"],[9403,68,8074,57,"_x226"],[9403,73,8074,57],[9403,75,8074,57,"_x227"],[9403,80,8074,57],[9404,14,8074,57],[9404,21,8074,57,"_ref32"],[9404,27,8074,57],[9404,28,8074,57,"apply"],[9404,33,8074,57],[9404,40,8074,57,"arguments"],[9404,49,8074,57],[9405,12,8074,57],[9406,10,8074,57],[9406,13,8082,13],[9407,10,8083,12],[9407,14,8083,18,"sendPhoneVerificationCodeResponse"],[9407,47,8083,51],[9407,50,8083,54,"handleRecaptchaFlow"],[9407,69,8083,73],[9407,70,8083,74,"auth"],[9407,74,8083,78],[9407,76,8083,80,"sendPhoneVerificationCodeRequest"],[9407,108,8083,112],[9407,110,8083,114],[9407,132,8083,136],[9407,133,8083,137],[9407,183,8083,187,"sendPhoneVerificationCodeActionCallback"],[9407,222,8083,226],[9407,224,8083,228],[9407,240,8083,244],[9407,241,8083,245],[9407,283,8083,287],[9407,284,8083,288],[9408,10,8084,12],[9408,14,8084,18,"response"],[9408,24,8084,26],[9408,33,8084,35,"sendPhoneVerificationCodeResponse"],[9408,66,8084,68],[9408,67,8084,69,"catch"],[9408,72,8084,74],[9408,73,8084,75,"error"],[9408,78,8084,80],[9408,82,8084,84],[9409,12,8085,16],[9409,19,8085,23,"Promise"],[9409,26,8085,30],[9409,27,8085,31,"reject"],[9409,33,8085,37],[9409,34,8085,38,"error"],[9409,39,8085,43],[9409,40,8085,44],[9410,10,8086,12],[9410,11,8086,13],[9410,12,8086,14],[9411,10,8087,12],[9411,17,8087,19,"response"],[9411,27,8087,27],[9411,28,8087,28,"sessionInfo"],[9411,39,8087,39],[9412,8,8088,8],[9413,6,8089,4],[9413,7,8089,5],[9413,16,8090,12],[9414,8,8091,8,"verifier"],[9414,16,8091,16],[9414,18,8091,18,"_reset"],[9414,24,8091,24],[9414,25,8091,25],[9414,26,8091,26],[9415,6,8092,4],[9416,4,8093,0],[9416,5,8093,1],[9417,4,8093,1],[9417,11,8093,1,"_verifyPhoneNumber2"],[9417,30,8093,1],[9417,31,8093,1,"apply"],[9417,36,8093,1],[9417,43,8093,1,"arguments"],[9417,52,8093,1],[9418,2,8093,1],[9419,2,8093,1],[9419,11,8117,15,"updatePhoneNumber"],[9419,28,8117,32,"updatePhoneNumber"],[9419,29,8117,32,"_x208"],[9419,34,8117,32],[9419,36,8117,32,"_x209"],[9419,41,8117,32],[9420,4,8117,32],[9420,11,8117,32,"_updatePhoneNumber"],[9420,29,8117,32],[9420,30,8117,32,"apply"],[9420,35,8117,32],[9420,42,8117,32,"arguments"],[9420,51,8117,32],[9421,2,8117,32],[9421,4,8124,0],[9422,2,8124,0],[9422,11,8124,0,"_updatePhoneNumber"],[9422,30,8124,0],[9423,4,8124,0,"_updatePhoneNumber"],[9423,22,8124,0],[9423,25,8124,0,"_asyncToGenerator"],[9423,42,8124,0],[9423,43,8117,0],[9423,54,8117,33,"user"],[9423,58,8117,37],[9423,60,8117,39,"credential"],[9423,70,8117,49],[9423,72,8117,51],[9424,6,8118,4],[9424,10,8118,10,"userInternal"],[9424,22,8118,22],[9424,25,8118,25,"util"],[9424,29,8118,29],[9424,30,8118,30,"getModularInstance"],[9424,48,8118,48],[9424,49,8118,49,"user"],[9424,53,8118,53],[9424,54,8118,54],[9425,6,8119,4],[9425,10,8119,8,"app"],[9425,13,8119,11],[9425,14,8119,12,"_isFirebaseServerApp"],[9425,34,8119,32],[9425,35,8119,33,"userInternal"],[9425,47,8119,45],[9425,48,8119,46,"auth"],[9425,52,8119,50],[9425,53,8119,51,"app"],[9425,56,8119,54],[9425,57,8119,55],[9425,59,8119,57],[9426,8,8120,8],[9426,15,8120,15,"Promise"],[9426,22,8120,22],[9426,23,8120,23,"reject"],[9426,29,8120,29],[9426,30,8120,30,"_serverAppCurrentUserOperationNotSupportedError"],[9426,77,8120,77],[9426,78,8120,78,"userInternal"],[9426,90,8120,90],[9426,91,8120,91,"auth"],[9426,95,8120,95],[9426,96,8120,96],[9426,97,8120,97],[9427,6,8121,4],[9428,6,8122,4],[9428,12,8122,10,"_link"],[9428,17,8122,15],[9428,18,8122,16,"userInternal"],[9428,30,8122,28],[9428,32,8122,30,"credential"],[9428,42,8122,40],[9428,43,8122,41],[9429,4,8123,0],[9429,5,8123,1],[9430,4,8123,1],[9430,11,8123,1,"_updatePhoneNumber"],[9430,29,8123,1],[9430,30,8123,1,"apply"],[9430,35,8123,1],[9430,42,8123,1,"arguments"],[9430,51,8123,1],[9431,2,8123,1],[9432,2,8123,1],[9432,11,8125,15,"injectRecaptchaV2Token"],[9432,33,8125,37,"injectRecaptchaV2Token"],[9432,34,8125,37,"_x210"],[9432,39,8125,37],[9432,41,8125,37,"_x211"],[9432,46,8125,37],[9432,48,8125,37,"_x212"],[9432,53,8125,37],[9433,4,8125,37],[9433,11,8125,37,"_injectRecaptchaV2Token"],[9433,34,8125,37],[9433,35,8125,37,"apply"],[9433,40,8125,37],[9433,47,8125,37,"arguments"],[9433,56,8125,37],[9434,2,8125,37],[9435,2,8168,0],[9436,0,8169,0],[9437,0,8170,0],[9438,0,8171,0],[9439,0,8172,0],[9440,0,8173,0],[9441,0,8174,0],[9442,0,8175,0],[9443,0,8176,0],[9444,0,8177,0],[9445,0,8178,0],[9446,0,8179,0],[9447,0,8180,0],[9448,0,8181,0],[9449,0,8182,0],[9450,0,8183,0],[9451,2,8184,0],[9452,0,8185,0],[9453,0,8186,0],[9454,0,8187,0],[9455,0,8188,0],[9456,0,8189,0],[9457,0,8190,0],[9458,0,8191,0],[9459,0,8192,0],[9460,0,8193,0],[9461,0,8194,0],[9462,0,8195,0],[9463,0,8196,0],[9464,0,8197,0],[9465,0,8198,0],[9466,0,8199,0],[9467,0,8200,0],[9468,0,8201,0],[9469,0,8202,0],[9470,2,8184,0],[9470,11,8184,0,"_injectRecaptchaV2Token"],[9470,35,8184,0],[9471,4,8184,0,"_injectRecaptchaV2Token"],[9471,27,8184,0],[9471,30,8184,0,"_asyncToGenerator"],[9471,47,8184,0],[9471,48,8125,0],[9471,59,8125,38,"auth"],[9471,63,8125,42],[9471,65,8125,44,"request"],[9471,72,8125,51],[9471,74,8125,53,"recaptchaV2Verifier"],[9471,93,8125,72],[9471,95,8125,74],[9472,6,8126,4,"_assert"],[9472,13,8126,11],[9472,14,8126,12,"recaptchaV2Verifier"],[9472,33,8126,31],[9472,34,8126,32,"type"],[9472,38,8126,36],[9472,43,8126,41,"RECAPTCHA_VERIFIER_TYPE"],[9472,66,8126,64],[9472,68,8126,66,"auth"],[9472,72,8126,70],[9472,74,8126,72],[9472,90,8126,88],[9472,91,8126,89],[9472,125,8126,123],[9472,126,8126,124],[9473,6,8127,4],[9473,10,8127,10,"recaptchaV2Token"],[9473,26,8127,26],[9473,35,8127,35,"recaptchaV2Verifier"],[9473,54,8127,54],[9473,55,8127,55,"verify"],[9473,61,8127,61],[9473,62,8127,62],[9473,63,8127,63],[9474,6,8128,4,"_assert"],[9474,13,8128,11],[9474,14,8128,12],[9474,21,8128,19,"recaptchaV2Token"],[9474,37,8128,35],[9474,42,8128,40],[9474,50,8128,48],[9474,52,8128,50,"auth"],[9474,56,8128,54],[9474,58,8128,56],[9474,74,8128,72],[9474,75,8128,73],[9474,109,8128,107],[9474,110,8128,108],[9475,6,8129,4],[9475,10,8129,10,"newRequest"],[9475,20,8129,20],[9475,23,8129,23],[9476,8,8129,25],[9476,11,8129,28,"request"],[9477,6,8129,36],[9477,7,8129,37],[9478,6,8130,4],[9478,10,8130,8],[9478,31,8130,29],[9478,35,8130,33,"newRequest"],[9478,45,8130,43],[9478,47,8130,45],[9479,8,8131,8],[9479,12,8131,14,"phoneNumber"],[9479,23,8131,25],[9479,26,8131,28,"newRequest"],[9479,36,8131,38],[9479,37,8131,39,"phoneEnrollmentInfo"],[9479,56,8131,58],[9479,57,8131,59,"phoneNumber"],[9479,68,8131,70],[9480,8,8132,8],[9480,12,8132,14,"captchaResponse"],[9480,27,8132,29],[9480,30,8132,32,"newRequest"],[9480,40,8132,42],[9480,41,8132,43,"phoneEnrollmentInfo"],[9480,60,8132,62],[9480,61,8132,63,"captchaResponse"],[9480,76,8132,78],[9481,8,8133,8],[9481,12,8133,14,"clientType"],[9481,22,8133,24],[9481,25,8133,27,"newRequest"],[9481,35,8133,37],[9481,36,8134,13,"phoneEnrollmentInfo"],[9481,55,8134,32],[9481,56,8134,33,"clientType"],[9481,66,8134,43],[9482,8,8135,8],[9482,12,8135,14,"recaptchaVersion"],[9482,28,8135,30],[9482,31,8135,33,"newRequest"],[9482,41,8135,43],[9482,42,8135,44,"phoneEnrollmentInfo"],[9482,61,8135,63],[9482,62,8135,64,"recaptchaVersion"],[9482,78,8135,80],[9483,8,8136,8,"Object"],[9483,14,8136,14],[9483,15,8136,15,"assign"],[9483,21,8136,21],[9483,22,8136,22,"newRequest"],[9483,32,8136,32],[9483,34,8136,34],[9484,10,8137,12],[9484,31,8137,33],[9484,33,8137,35],[9485,12,8138,16,"phoneNumber"],[9485,23,8138,27],[9486,12,8139,16,"recaptchaToken"],[9486,26,8139,30],[9486,28,8139,32,"recaptchaV2Token"],[9486,44,8139,48],[9487,12,8140,16,"captchaResponse"],[9487,27,8140,31],[9488,12,8141,16,"clientType"],[9488,22,8141,26],[9489,12,8142,16,"recaptchaVersion"],[9490,10,8143,12],[9491,8,8144,8],[9491,9,8144,9],[9491,10,8144,10],[9492,8,8145,8],[9492,15,8145,15,"newRequest"],[9492,25,8145,25],[9493,6,8146,4],[9493,7,8146,5],[9493,13,8147,9],[9493,17,8147,13],[9493,34,8147,30],[9493,38,8147,34,"newRequest"],[9493,48,8147,44],[9493,50,8147,46],[9494,8,8148,8],[9494,12,8148,14,"captchaResponse"],[9494,28,8148,29],[9494,31,8148,32,"newRequest"],[9494,41,8148,42],[9494,42,8148,43,"phoneSignInInfo"],[9494,57,8148,58],[9494,58,8148,59,"captchaResponse"],[9494,73,8148,74],[9495,8,8149,8],[9495,12,8149,14,"clientType"],[9495,23,8149,24],[9495,26,8149,27,"newRequest"],[9495,36,8149,37],[9495,37,8150,13,"phoneSignInInfo"],[9495,52,8150,28],[9495,53,8150,29,"clientType"],[9495,63,8150,39],[9496,8,8151,8],[9496,12,8151,14,"recaptchaVersion"],[9496,29,8151,30],[9496,32,8151,33,"newRequest"],[9496,42,8151,43],[9496,43,8151,44,"phoneSignInInfo"],[9496,58,8151,59],[9496,59,8151,60,"recaptchaVersion"],[9496,75,8151,76],[9497,8,8152,8,"Object"],[9497,14,8152,14],[9497,15,8152,15,"assign"],[9497,21,8152,21],[9497,22,8152,22,"newRequest"],[9497,32,8152,32],[9497,34,8152,34],[9498,10,8153,12],[9498,27,8153,29],[9498,29,8153,31],[9499,12,8154,16,"recaptchaToken"],[9499,26,8154,30],[9499,28,8154,32,"recaptchaV2Token"],[9499,44,8154,48],[9500,12,8155,16,"captchaResponse"],[9500,27,8155,31],[9500,29,8155,16,"captchaResponse"],[9500,45,8155,31],[9501,12,8156,16,"clientType"],[9501,22,8156,26],[9501,24,8156,16,"clientType"],[9501,35,8156,26],[9502,12,8157,16,"recaptchaVersion"],[9502,28,8157,32],[9502,30,8157,16,"recaptchaVersion"],[9503,10,8158,12],[9504,8,8159,8],[9504,9,8159,9],[9504,10,8159,10],[9505,8,8160,8],[9505,15,8160,15,"newRequest"],[9505,25,8160,25],[9506,6,8161,4],[9506,7,8161,5],[9506,13,8162,9],[9507,8,8163,8,"Object"],[9507,14,8163,14],[9507,15,8163,15,"assign"],[9507,21,8163,21],[9507,22,8163,22,"newRequest"],[9507,32,8163,32],[9507,34,8163,34],[9508,10,8163,36],[9508,26,8163,52],[9508,28,8163,54,"recaptchaV2Token"],[9509,8,8163,71],[9509,9,8163,72],[9509,10,8163,73],[9510,8,8164,8],[9510,15,8164,15,"newRequest"],[9510,25,8164,25],[9511,6,8165,4],[9512,4,8166,0],[9512,5,8166,1],[9513,4,8166,1],[9513,11,8166,1,"_injectRecaptchaV2Token"],[9513,34,8166,1],[9513,35,8166,1,"apply"],[9513,40,8166,1],[9513,47,8166,1,"arguments"],[9513,56,8166,1],[9514,2,8166,1],[9515,2,8166,1],[9515,6,8203,6,"PhoneAuthProvider"],[9515,23,8203,23],[9516,4,8204,4],[9517,0,8205,0],[9518,0,8206,0],[9519,0,8207,0],[9520,4,8208,4],[9520,13,8208,4,"PhoneAuthProvider"],[9520,31,8208,16,"auth"],[9520,35,8208,20],[9520,37,8208,22],[9521,6,8208,22,"_classCallCheck"],[9521,21,8208,22],[9521,28,8208,22,"PhoneAuthProvider"],[9521,45,8208,22],[9522,6,8209,8],[9523,6,8210,8],[9523,10,8210,12],[9523,11,8210,13,"providerId"],[9523,21,8210,23],[9523,24,8210,26,"PhoneAuthProvider"],[9523,41,8210,43],[9523,42,8210,44,"PROVIDER_ID"],[9523,53,8210,55],[9524,6,8211,8],[9524,10,8211,12],[9524,11,8211,13,"auth"],[9524,15,8211,17],[9524,18,8211,20,"_castAuth"],[9524,27,8211,29],[9524,28,8211,30,"auth"],[9524,32,8211,34],[9524,33,8211,35],[9525,4,8212,4],[9526,4,8213,4],[9527,0,8214,0],[9528,0,8215,0],[9529,0,8216,0],[9530,0,8217,0],[9531,0,8218,0],[9532,0,8219,0],[9533,0,8220,0],[9534,0,8221,0],[9535,0,8222,0],[9536,0,8223,0],[9537,0,8224,0],[9538,0,8225,0],[9539,0,8226,0],[9540,0,8227,0],[9541,0,8228,0],[9542,0,8229,0],[9543,0,8230,0],[9544,0,8231,0],[9545,0,8232,0],[9546,0,8233,0],[9547,0,8234,0],[9548,0,8235,0],[9549,0,8236,0],[9550,0,8237,0],[9551,0,8238,0],[9552,0,8239,0],[9553,0,8240,0],[9554,0,8241,0],[9555,0,8242,0],[9556,0,8243,0],[9557,0,8244,0],[9558,0,8245,0],[9559,4,8213,4],[9559,11,8213,4,"_createClass"],[9559,23,8213,4],[9559,24,8213,4,"PhoneAuthProvider"],[9559,41,8213,4],[9560,6,8213,4,"key"],[9560,9,8213,4],[9561,6,8213,4,"value"],[9561,11,8213,4],[9561,13,8246,4],[9561,22,8246,4,"verifyPhoneNumber"],[9561,39,8246,21,"verifyPhoneNumber"],[9561,40,8246,22,"phoneOptions"],[9561,52,8246,34],[9561,54,8246,36,"applicationVerifier"],[9561,73,8246,55],[9561,75,8246,57],[9562,8,8247,8],[9562,15,8247,15,"_verifyPhoneNumber"],[9562,33,8247,33],[9562,34,8247,34],[9562,38,8247,38],[9562,39,8247,39,"auth"],[9562,43,8247,43],[9562,45,8247,45,"phoneOptions"],[9562,57,8247,57],[9562,59,8247,59,"util"],[9562,63,8247,63],[9562,64,8247,64,"getModularInstance"],[9562,82,8247,82],[9562,83,8247,83,"applicationVerifier"],[9562,102,8247,102],[9562,103,8247,103],[9562,104,8247,104],[9563,6,8248,4],[9564,6,8249,4],[9565,0,8250,0],[9566,0,8251,0],[9567,0,8252,0],[9568,0,8253,0],[9569,0,8254,0],[9570,0,8255,0],[9571,0,8256,0],[9572,0,8257,0],[9573,0,8258,0],[9574,0,8259,0],[9575,0,8260,0],[9576,0,8261,0],[9577,0,8262,0],[9578,0,8263,0],[9579,0,8264,0],[9580,0,8265,0],[9581,0,8266,0],[9582,0,8267,0],[9583,0,8268,0],[9584,0,8269,0],[9585,0,8270,0],[9586,0,8271,0],[9587,0,8272,0],[9588,0,8273,0],[9589,0,8274,0],[9590,0,8275,0],[9591,4,8249,4],[9592,6,8249,4,"key"],[9592,9,8249,4],[9593,6,8249,4,"value"],[9593,11,8249,4],[9593,13,8276,4],[9593,22,8276,11,"credential"],[9593,32,8276,21,"credential"],[9593,33,8276,22,"verificationId"],[9593,47,8276,36],[9593,49,8276,38,"verificationCode"],[9593,65,8276,54],[9593,67,8276,56],[9594,8,8277,8],[9594,15,8277,15,"PhoneAuthCredential"],[9594,34,8277,34],[9594,35,8277,35,"_fromVerification"],[9594,52,8277,52],[9594,53,8277,53,"verificationId"],[9594,67,8277,67],[9594,69,8277,69,"verificationCode"],[9594,85,8277,85],[9594,86,8277,86],[9595,6,8278,4],[9596,6,8279,4],[9597,0,8280,0],[9598,0,8281,0],[9599,0,8282,0],[9600,4,8279,4],[9601,6,8279,4,"key"],[9601,9,8279,4],[9602,6,8279,4,"value"],[9602,11,8279,4],[9602,13,8283,4],[9602,22,8283,11,"credentialFromResult"],[9602,42,8283,31,"credentialFromResult"],[9602,43,8283,32,"userCredential"],[9602,57,8283,46],[9602,59,8283,48],[9603,8,8284,8],[9603,12,8284,14,"credential"],[9603,22,8284,24],[9603,25,8284,27,"userCredential"],[9603,39,8284,41],[9604,8,8285,8],[9604,15,8285,15,"PhoneAuthProvider"],[9604,32,8285,32],[9604,33,8285,33,"credentialFromTaggedObject"],[9604,59,8285,59],[9604,60,8285,60,"credential"],[9604,70,8285,70],[9604,71,8285,71],[9605,6,8286,4],[9606,6,8287,4],[9607,0,8288,0],[9608,0,8289,0],[9609,0,8290,0],[9610,0,8291,0],[9611,0,8292,0],[9612,0,8293,0],[9613,0,8294,0],[9614,0,8295,0],[9615,0,8296,0],[9616,0,8297,0],[9617,0,8298,0],[9618,0,8299,0],[9619,0,8300,0],[9620,0,8301,0],[9621,0,8302,0],[9622,0,8303,0],[9623,0,8304,0],[9624,0,8305,0],[9625,0,8306,0],[9626,0,8307,0],[9627,0,8308,0],[9628,0,8309,0],[9629,0,8310,0],[9630,0,8311,0],[9631,0,8312,0],[9632,0,8313,0],[9633,0,8314,0],[9634,0,8315,0],[9635,0,8316,0],[9636,0,8317,0],[9637,0,8318,0],[9638,4,8287,4],[9639,6,8287,4,"key"],[9639,9,8287,4],[9640,6,8287,4,"value"],[9640,11,8287,4],[9640,13,8319,4],[9640,22,8319,11,"credentialFromError"],[9640,41,8319,30,"credentialFromError"],[9640,42,8319,31,"error"],[9640,47,8319,36],[9640,49,8319,38],[9641,8,8320,8],[9641,15,8320,15,"PhoneAuthProvider"],[9641,32,8320,32],[9641,33,8320,33,"credentialFromTaggedObject"],[9641,59,8320,59],[9641,60,8320,61,"error"],[9641,65,8320,66],[9641,66,8320,67,"customData"],[9641,76,8320,77],[9641,80,8320,81],[9641,81,8320,82],[9641,82,8320,84],[9641,83,8320,85],[9642,6,8321,4],[9643,4,8321,5],[9644,6,8321,5,"key"],[9644,9,8321,5],[9645,6,8321,5,"value"],[9645,11,8321,5],[9645,13,8322,4],[9645,22,8322,11,"credentialFromTaggedObject"],[9645,48,8322,37,"credentialFromTaggedObject"],[9645,49,8322,37,"_ref23"],[9645,55,8322,37],[9645,57,8322,73],[9646,8,8322,73],[9646,12,8322,56,"tokenResponse"],[9646,25,8322,69],[9646,28,8322,69,"_ref23"],[9646,34,8322,69],[9646,35,8322,40,"_tokenResponse"],[9646,49,8322,54],[9647,8,8323,8],[9647,12,8323,12],[9647,13,8323,13,"tokenResponse"],[9647,26,8323,26],[9647,28,8323,28],[9648,10,8324,12],[9648,17,8324,19],[9648,21,8324,23],[9649,8,8325,8],[9650,8,8326,8],[9650,12,8326,16,"phoneNumber"],[9650,23,8326,27],[9650,26,8326,48,"tokenResponse"],[9650,39,8326,61],[9650,40,8326,16,"phoneNumber"],[9650,51,8326,27],[9651,10,8326,29,"temporaryProof"],[9651,24,8326,43],[9651,27,8326,48,"tokenResponse"],[9651,40,8326,61],[9651,41,8326,29,"temporaryProof"],[9651,55,8326,43],[9652,8,8327,8],[9652,12,8327,12,"phoneNumber"],[9652,23,8327,23],[9652,27,8327,27,"temporaryProof"],[9652,41,8327,41],[9652,43,8327,43],[9653,10,8328,12],[9653,17,8328,19,"PhoneAuthCredential"],[9653,36,8328,38],[9653,37,8328,39,"_fromTokenResponse"],[9653,55,8328,57],[9653,56,8328,58,"phoneNumber"],[9653,67,8328,69],[9653,69,8328,71,"temporaryProof"],[9653,83,8328,85],[9653,84,8328,86],[9654,8,8329,8],[9655,8,8330,8],[9655,15,8330,15],[9655,19,8330,19],[9656,6,8331,4],[9657,4,8331,5],[9658,2,8331,5],[9659,2,8333,0],[9660,2,8334,0,"PhoneAuthProvider"],[9660,19,8334,17],[9660,20,8334,18,"PROVIDER_ID"],[9660,31,8334,29],[9660,34,8334,32],[9660,41,8334,39],[9660,42,8334,40],[9661,2,8335,0],[9662,2,8336,0,"PhoneAuthProvider"],[9662,19,8336,17],[9662,20,8336,18,"PHONE_SIGN_IN_METHOD"],[9662,40,8336,38],[9662,43,8336,41],[9662,50,8336,48],[9662,51,8336,49],[9663,2,8336,74],[9663,6,8338,6,"MultiFactorAssertionImpl"],[9663,30,8338,30],[9664,4,8339,4],[9664,13,8339,4,"MultiFactorAssertionImpl"],[9664,38,8339,16,"factorId"],[9664,46,8339,24],[9664,48,8339,26],[9665,6,8339,26,"_classCallCheck"],[9665,21,8339,26],[9665,28,8339,26,"MultiFactorAssertionImpl"],[9665,52,8339,26],[9666,6,8340,8],[9666,10,8340,12],[9666,11,8340,13,"factorId"],[9666,19,8340,21],[9666,22,8340,24,"factorId"],[9666,30,8340,32],[9667,4,8341,4],[9668,4,8341,5],[9668,11,8341,5,"_createClass"],[9668,23,8341,5],[9668,24,8341,5,"MultiFactorAssertionImpl"],[9668,48,8341,5],[9669,6,8341,5,"key"],[9669,9,8341,5],[9670,6,8341,5,"value"],[9670,11,8341,5],[9670,13,8342,4],[9670,22,8342,4,"_process"],[9670,30,8342,12,"_process"],[9670,31,8342,13,"auth"],[9670,35,8342,17],[9670,37,8342,19,"session"],[9670,44,8342,26],[9670,46,8342,28,"displayName"],[9670,57,8342,39],[9670,59,8342,41],[9671,8,8343,8],[9671,16,8343,16,"session"],[9671,23,8343,23],[9671,24,8343,24,"type"],[9671,28,8343,28],[9672,10,8344,12],[9672,15,8344,17],[9672,23,8344,25],[9672,24,8344,26],[9673,12,8345,16],[9673,19,8345,23],[9673,23,8345,27],[9673,24,8345,28,"_finalizeEnroll"],[9673,39,8345,43],[9673,40,8345,44,"auth"],[9673,44,8345,48],[9673,46,8345,50,"session"],[9673,53,8345,57],[9673,54,8345,58,"credential"],[9673,64,8345,68],[9673,66,8345,70,"displayName"],[9673,77,8345,81],[9673,78,8345,82],[9674,10,8346,12],[9674,15,8346,17],[9674,23,8346,25],[9674,24,8346,26],[9675,12,8347,16],[9675,19,8347,23],[9675,23,8347,27],[9675,24,8347,28,"_finalizeSignIn"],[9675,39,8347,43],[9675,40,8347,44,"auth"],[9675,44,8347,48],[9675,46,8347,50,"session"],[9675,53,8347,57],[9675,54,8347,58,"credential"],[9675,64,8347,68],[9675,65,8347,69],[9676,10,8348,12],[9677,12,8349,16],[9677,19,8349,23,"debugFail"],[9677,28,8349,32],[9677,29,8349,33],[9677,64,8349,68],[9677,65,8349,69],[9678,8,8350,8],[9679,6,8351,4],[9680,4,8351,5],[9681,2,8351,5],[9682,2,8354,0],[9683,0,8355,0],[9684,0,8356,0],[9685,0,8357,0],[9686,0,8358,0],[9687,2,8354,0],[9687,6,8359,6,"PhoneMultiFactorAssertionImpl"],[9687,35,8359,35],[9687,61,8359,35,"_MultiFactorAssertion"],[9687,82,8359,35],[9688,4,8360,4],[9688,13,8360,4,"PhoneMultiFactorAssertionImpl"],[9688,43,8360,16,"credential"],[9688,53,8360,26],[9688,55,8360,28],[9689,6,8360,28],[9689,10,8360,28,"_this13"],[9689,17,8360,28],[9690,6,8360,28,"_classCallCheck"],[9690,21,8360,28],[9690,28,8360,28,"PhoneMultiFactorAssertionImpl"],[9690,57,8360,28],[9691,6,8361,8,"_this13"],[9691,13,8361,8],[9691,16,8361,8,"_callSuper"],[9691,26,8361,8],[9691,33,8361,8,"PhoneMultiFactorAssertionImpl"],[9691,62,8361,8],[9691,65,8361,14],[9691,72,8361,21],[9691,73,8361,22],[9692,6,8362,8,"_this13"],[9692,13,8362,8],[9692,14,8362,13,"credential"],[9692,24,8362,23],[9692,27,8362,26,"credential"],[9692,37,8362,36],[9693,6,8362,37],[9693,13,8362,37,"_this13"],[9693,20,8362,37],[9694,4,8363,4],[9695,4,8364,4],[9696,4,8364,4,"_inherits"],[9696,13,8364,4],[9696,14,8364,4,"PhoneMultiFactorAssertionImpl"],[9696,43,8364,4],[9696,45,8364,4,"_MultiFactorAssertion"],[9696,66,8364,4],[9697,4,8364,4],[9697,11,8364,4,"_createClass"],[9697,23,8364,4],[9697,24,8364,4,"PhoneMultiFactorAssertionImpl"],[9697,53,8364,4],[9698,6,8364,4,"key"],[9698,9,8364,4],[9699,6,8364,4,"value"],[9699,11,8364,4],[9699,13,8368,4],[9700,6,8369,4],[9700,15,8369,4,"_finalizeEnroll"],[9700,30,8369,19,"_finalizeEnroll"],[9700,31,8369,20,"auth"],[9700,35,8369,24],[9700,37,8369,26,"idToken"],[9700,44,8369,33],[9700,46,8369,35,"displayName"],[9700,57,8369,46],[9700,59,8369,48],[9701,8,8370,8],[9701,15,8370,15,"finalizeEnrollPhoneMfa"],[9701,37,8370,37],[9701,38,8370,38,"auth"],[9701,42,8370,42],[9701,44,8370,44],[9702,10,8371,12,"idToken"],[9702,17,8371,19],[9703,10,8372,12,"displayName"],[9703,21,8372,23],[9704,10,8373,12,"phoneVerificationInfo"],[9704,31,8373,33],[9704,33,8373,35],[9704,37,8373,39],[9704,38,8373,40,"credential"],[9704,48,8373,50],[9704,49,8373,51,"_makeVerificationRequest"],[9704,73,8373,75],[9704,74,8373,76],[9705,8,8374,8],[9705,9,8374,9],[9705,10,8374,10],[9706,6,8375,4],[9707,6,8376,4],[9708,4,8376,4],[9709,6,8376,4,"key"],[9709,9,8376,4],[9710,6,8376,4,"value"],[9710,11,8376,4],[9710,13,8377,4],[9710,22,8377,4,"_finalizeSignIn"],[9710,37,8377,19,"_finalizeSignIn"],[9710,38,8377,20,"auth"],[9710,42,8377,24],[9710,44,8377,26,"mfaPendingCredential"],[9710,64,8377,46],[9710,66,8377,48],[9711,8,8378,8],[9711,15,8378,15,"finalizeSignInPhoneMfa"],[9711,37,8378,37],[9711,38,8378,38,"auth"],[9711,42,8378,42],[9711,44,8378,44],[9712,10,8379,12,"mfaPendingCredential"],[9712,30,8379,32],[9713,10,8380,12,"phoneVerificationInfo"],[9713,31,8380,33],[9713,33,8380,35],[9713,37,8380,39],[9713,38,8380,40,"credential"],[9713,48,8380,50],[9713,49,8380,51,"_makeVerificationRequest"],[9713,73,8380,75],[9713,74,8380,76],[9714,8,8381,8],[9714,9,8381,9],[9714,10,8381,10],[9715,6,8382,4],[9716,4,8382,5],[9717,6,8382,5,"key"],[9717,9,8382,5],[9718,6,8382,5,"value"],[9718,11,8382,5],[9718,13,8365,4],[9718,22,8365,11,"_fromCredential"],[9718,37,8365,26,"_fromCredential"],[9718,38,8365,27,"credential"],[9718,48,8365,37],[9718,50,8365,39],[9719,8,8366,8],[9719,15,8366,15],[9719,19,8366,19,"PhoneMultiFactorAssertionImpl"],[9719,48,8366,48],[9719,49,8366,49,"credential"],[9719,59,8366,59],[9719,60,8366,60],[9720,6,8367,4],[9721,4,8367,5],[9722,2,8367,5],[9722,4,8359,44,"MultiFactorAssertionImpl"],[9722,28,8359,68],[9723,2,8384,0],[9724,0,8385,0],[9725,0,8386,0],[9726,0,8387,0],[9727,0,8388,0],[9728,2,8384,0],[9728,6,8389,6,"PhoneMultiFactorGenerator"],[9728,31,8389,31],[9729,4,8390,4],[9729,13,8390,4,"PhoneMultiFactorGenerator"],[9729,39,8390,4],[9729,41,8390,18],[9730,6,8390,18,"_classCallCheck"],[9730,21,8390,18],[9730,28,8390,18,"PhoneMultiFactorGenerator"],[9730,53,8390,18],[9731,4,8390,20],[9732,4,8391,4],[9733,0,8392,0],[9734,0,8393,0],[9735,0,8394,0],[9736,0,8395,0],[9737,0,8396,0],[9738,0,8397,0],[9739,0,8398,0],[9740,0,8399,0],[9741,0,8400,0],[9742,4,8391,4],[9742,11,8391,4,"_createClass"],[9742,23,8391,4],[9742,24,8391,4,"PhoneMultiFactorGenerator"],[9742,49,8391,4],[9743,6,8391,4,"key"],[9743,9,8391,4],[9744,6,8391,4,"value"],[9744,11,8391,4],[9744,13,8401,4],[9744,22,8401,11,"assertion"],[9744,31,8401,20,"assertion"],[9744,32,8401,21,"credential"],[9744,42,8401,31],[9744,44,8401,33],[9745,8,8402,8],[9745,15,8402,15,"PhoneMultiFactorAssertionImpl"],[9745,44,8402,44],[9745,45,8402,45,"_fromCredential"],[9745,60,8402,60],[9745,61,8402,61,"credential"],[9745,71,8402,71],[9745,72,8402,72],[9746,6,8403,4],[9747,4,8403,5],[9748,2,8403,5],[9749,2,8405,0],[9750,0,8406,0],[9751,0,8407,0],[9752,2,8408,0,"PhoneMultiFactorGenerator"],[9752,27,8408,25],[9752,28,8408,26,"FACTOR_ID"],[9752,37,8408,35],[9752,40,8408,38],[9752,47,8408,45],[9754,2,8410,0],[9755,0,8411,0],[9756,0,8412,0],[9757,0,8413,0],[9758,0,8414,0],[9759,2,8410,0],[9759,6,8415,6,"TotpMultiFactorGenerator"],[9759,30,8415,30],[9760,4,8415,30],[9760,13,8415,30,"TotpMultiFactorGenerator"],[9760,38,8415,30],[9761,6,8415,30,"_classCallCheck"],[9761,21,8415,30],[9761,28,8415,30,"TotpMultiFactorGenerator"],[9761,52,8415,30],[9762,4,8415,30],[9763,4,8415,30],[9763,11,8415,30,"_createClass"],[9763,23,8415,30],[9763,24,8415,30,"TotpMultiFactorGenerator"],[9763,48,8415,30],[9764,6,8415,30,"key"],[9764,9,8415,30],[9765,6,8415,30,"value"],[9765,11,8415,30],[9766,6,8416,4],[9767,0,8417,0],[9768,0,8418,0],[9769,0,8419,0],[9770,0,8420,0],[9771,0,8421,0],[9772,0,8422,0],[9773,0,8423,0],[9774,0,8424,0],[9775,0,8425,0],[9776,6,8426,4],[9776,15,8426,11,"assertionForEnrollment"],[9776,37,8426,33,"assertionForEnrollment"],[9776,38,8426,34,"secret"],[9776,44,8426,40],[9776,46,8426,42,"oneTimePassword"],[9776,61,8426,57],[9776,63,8426,59],[9777,8,8427,8],[9777,15,8427,15,"TotpMultiFactorAssertionImpl"],[9777,43,8427,43],[9777,44,8427,44,"_fromSecret"],[9777,55,8427,55],[9777,56,8427,56,"secret"],[9777,62,8427,62],[9777,64,8427,64,"oneTimePassword"],[9777,79,8427,79],[9777,80,8427,80],[9778,6,8428,4],[9779,6,8429,4],[9780,0,8430,0],[9781,0,8431,0],[9782,0,8432,0],[9783,0,8433,0],[9784,0,8434,0],[9785,0,8435,0],[9786,0,8436,0],[9787,0,8437,0],[9788,4,8429,4],[9789,6,8429,4,"key"],[9789,9,8429,4],[9790,6,8429,4,"value"],[9790,11,8429,4],[9790,13,8438,4],[9790,22,8438,11,"assertionForSignIn"],[9790,40,8438,29,"assertionForSignIn"],[9790,41,8438,30,"enrollmentId"],[9790,53,8438,42],[9790,55,8438,44,"oneTimePassword"],[9790,70,8438,59],[9790,72,8438,61],[9791,8,8439,8],[9791,15,8439,15,"TotpMultiFactorAssertionImpl"],[9791,43,8439,43],[9791,44,8439,44,"_fromEnrollmentId"],[9791,61,8439,61],[9791,62,8439,62,"enrollmentId"],[9791,74,8439,74],[9791,76,8439,76,"oneTimePassword"],[9791,91,8439,91],[9791,92,8439,92],[9792,6,8440,4],[9793,6,8441,4],[9794,0,8442,0],[9795,0,8443,0],[9796,0,8444,0],[9797,0,8445,0],[9798,0,8446,0],[9799,0,8447,0],[9800,0,8448,0],[9801,0,8449,0],[9802,4,8441,4],[9803,6,8441,4,"key"],[9803,9,8441,4],[9804,6,8441,4,"value"],[9804,11,8441,4],[9805,8,8441,4],[9805,12,8441,4,"_generateSecret"],[9805,27,8441,4],[9805,30,8441,4,"_asyncToGenerator"],[9805,47,8441,4],[9805,48,8450,4],[9805,59,8450,32,"session"],[9805,66,8450,39],[9805,68,8450,41],[9806,10,8451,8],[9806,14,8451,14,"mfaSession"],[9806,24,8451,24],[9806,27,8451,27,"session"],[9806,34,8451,34],[9807,10,8452,8,"_assert"],[9807,17,8452,15],[9807,18,8452,16],[9807,25,8452,23,"mfaSession"],[9807,35,8452,33],[9807,36,8452,34,"user"],[9807,40,8452,38],[9807,42,8452,40,"auth"],[9807,46,8452,44],[9807,51,8452,49],[9807,62,8452,60],[9807,64,8452,62],[9807,80,8452,78],[9807,81,8452,79],[9807,115,8452,113],[9807,116,8452,114],[9808,10,8453,8],[9808,14,8453,14,"response"],[9808,22,8453,22],[9808,31,8453,31,"startEnrollTotpMfa"],[9808,49,8453,49],[9808,50,8453,50,"mfaSession"],[9808,60,8453,60],[9808,61,8453,61,"user"],[9808,65,8453,65],[9808,66,8453,66,"auth"],[9808,70,8453,70],[9808,72,8453,72],[9809,12,8454,12,"idToken"],[9809,19,8454,19],[9809,21,8454,21,"mfaSession"],[9809,31,8454,31],[9809,32,8454,32,"credential"],[9809,42,8454,42],[9810,12,8455,12,"totpEnrollmentInfo"],[9810,30,8455,30],[9810,32,8455,32],[9810,33,8455,33],[9811,10,8456,8],[9811,11,8456,9],[9811,12,8456,10],[9812,10,8457,8],[9812,17,8457,15,"TotpSecret"],[9812,27,8457,25],[9812,28,8457,26,"_fromStartTotpMfaEnrollmentResponse"],[9812,63,8457,61],[9812,64,8457,62,"response"],[9812,72,8457,70],[9812,74,8457,72,"mfaSession"],[9812,84,8457,82],[9812,85,8457,83,"user"],[9812,89,8457,87],[9812,90,8457,88,"auth"],[9812,94,8457,92],[9812,95,8457,93],[9813,8,8458,4],[9813,9,8458,5],[9814,8,8458,5],[9814,17,8450,17,"generateSecret"],[9814,31,8450,31,"generateSecret"],[9814,32,8450,31,"_x213"],[9814,37,8450,31],[9815,10,8450,31],[9815,17,8450,31,"_generateSecret"],[9815,32,8450,31],[9815,33,8450,31,"apply"],[9815,38,8450,31],[9815,45,8450,31,"arguments"],[9815,54,8450,31],[9816,8,8450,31],[9817,8,8450,31],[9817,15,8450,17,"generateSecret"],[9817,29,8450,31],[9818,6,8450,31],[9819,4,8450,31],[9820,2,8450,31],[9821,2,8460,0],[9822,0,8461,0],[9823,0,8462,0],[9824,2,8463,0,"TotpMultiFactorGenerator"],[9824,26,8463,24],[9824,27,8463,25,"FACTOR_ID"],[9824,36,8463,34],[9824,39,8463,37],[9824,45,8463,43],[9824,46,8463,44],[9825,2,8463,64],[9825,6,8464,6,"TotpMultiFactorAssertionImpl"],[9825,34,8464,34],[9825,60,8464,34,"_MultiFactorAssertion2"],[9825,82,8464,34],[9826,4,8465,4],[9826,13,8465,4,"TotpMultiFactorAssertionImpl"],[9826,42,8465,16,"otp"],[9826,45,8465,19],[9826,47,8465,21,"enrollmentId"],[9826,59,8465,33],[9826,61,8465,35,"secret"],[9826,67,8465,41],[9826,69,8465,43],[9827,6,8465,43],[9827,10,8465,43,"_this14"],[9827,17,8465,43],[9828,6,8465,43,"_classCallCheck"],[9828,21,8465,43],[9828,28,8465,43,"TotpMultiFactorAssertionImpl"],[9828,56,8465,43],[9829,6,8466,8,"_this14"],[9829,13,8466,8],[9829,16,8466,8,"_callSuper"],[9829,26,8466,8],[9829,33,8466,8,"TotpMultiFactorAssertionImpl"],[9829,61,8466,8],[9829,64,8466,14],[9829,70,8466,20],[9829,71,8466,21],[9830,6,8467,8,"_this14"],[9830,13,8467,8],[9830,14,8467,13,"otp"],[9830,17,8467,16],[9830,20,8467,19,"otp"],[9830,23,8467,22],[9831,6,8468,8,"_this14"],[9831,13,8468,8],[9831,14,8468,13,"enrollmentId"],[9831,26,8468,25],[9831,29,8468,28,"enrollmentId"],[9831,41,8468,40],[9832,6,8469,8,"_this14"],[9832,13,8469,8],[9832,14,8469,13,"secret"],[9832,20,8469,19],[9832,23,8469,22,"secret"],[9832,29,8469,28],[9833,6,8469,29],[9833,13,8469,29,"_this14"],[9833,20,8469,29],[9834,4,8470,4],[9835,4,8471,4],[9836,4,8471,4,"_inherits"],[9836,13,8471,4],[9836,14,8471,4,"TotpMultiFactorAssertionImpl"],[9836,42,8471,4],[9836,44,8471,4,"_MultiFactorAssertion2"],[9836,66,8471,4],[9837,4,8471,4],[9837,11,8471,4,"_createClass"],[9837,23,8471,4],[9837,24,8471,4,"TotpMultiFactorAssertionImpl"],[9837,52,8471,4],[9838,6,8471,4,"key"],[9838,9,8471,4],[9839,6,8471,4,"value"],[9839,11,8471,4],[9839,14,8479,4],[9840,8,8479,4],[9840,12,8479,4,"_finalizeEnroll2"],[9840,28,8479,4],[9840,31,8479,4,"_asyncToGenerator"],[9840,48,8479,4],[9840,49,8480,4],[9840,60,8480,26,"auth"],[9840,64,8480,30],[9840,66,8480,32,"idToken"],[9840,73,8480,39],[9840,75,8480,41,"displayName"],[9840,86,8480,52],[9840,88,8480,54],[9841,10,8481,8,"_assert"],[9841,17,8481,15],[9841,18,8481,16],[9841,25,8481,23],[9841,29,8481,27],[9841,30,8481,28,"secret"],[9841,36,8481,34],[9841,41,8481,39],[9841,52,8481,50],[9841,54,8481,52,"auth"],[9841,58,8481,56],[9841,60,8481,58],[9841,76,8481,74],[9841,77,8481,75],[9841,111,8481,109],[9841,112,8481,110],[9842,10,8482,8],[9842,17,8482,15,"finalizeEnrollTotpMfa"],[9842,38,8482,36],[9842,39,8482,37,"auth"],[9842,43,8482,41],[9842,45,8482,43],[9843,12,8483,12,"idToken"],[9843,19,8483,19],[9844,12,8484,12,"displayName"],[9844,23,8484,23],[9845,12,8485,12,"totpVerificationInfo"],[9845,32,8485,32],[9845,34,8485,34],[9845,38,8485,38],[9845,39,8485,39,"secret"],[9845,45,8485,45],[9845,46,8485,46,"_makeTotpVerificationInfo"],[9845,71,8485,71],[9845,72,8485,72],[9845,76,8485,76],[9845,77,8485,77,"otp"],[9845,80,8485,80],[9846,10,8486,8],[9846,11,8486,9],[9846,12,8486,10],[9847,8,8487,4],[9847,9,8487,5],[9848,8,8487,5],[9848,17,8480,10,"_finalizeEnroll"],[9848,32,8480,25,"_finalizeEnroll"],[9848,33,8480,25,"_x214"],[9848,38,8480,25],[9848,40,8480,25,"_x215"],[9848,45,8480,25],[9848,47,8480,25,"_x216"],[9848,52,8480,25],[9849,10,8480,25],[9849,17,8480,25,"_finalizeEnroll2"],[9849,33,8480,25],[9849,34,8480,25,"apply"],[9849,39,8480,25],[9849,46,8480,25,"arguments"],[9849,55,8480,25],[9850,8,8480,25],[9851,8,8480,25],[9851,15,8480,10,"_finalizeEnroll"],[9851,30,8480,25],[9852,6,8480,25],[9852,10,8488,4],[9853,4,8488,4],[9854,6,8488,4,"key"],[9854,9,8488,4],[9855,6,8488,4,"value"],[9855,11,8488,4],[9856,8,8488,4],[9856,12,8488,4,"_finalizeSignIn2"],[9856,28,8488,4],[9856,31,8488,4,"_asyncToGenerator"],[9856,48,8488,4],[9856,49,8489,4],[9856,60,8489,26,"auth"],[9856,64,8489,30],[9856,66,8489,32,"mfaPendingCredential"],[9856,86,8489,52],[9856,88,8489,54],[9857,10,8490,8,"_assert"],[9857,17,8490,15],[9857,18,8490,16],[9857,22,8490,20],[9857,23,8490,21,"enrollmentId"],[9857,35,8490,33],[9857,40,8490,38,"undefined"],[9857,49,8490,47],[9857,53,8490,51],[9857,57,8490,55],[9857,58,8490,56,"otp"],[9857,61,8490,59],[9857,66,8490,64,"undefined"],[9857,75,8490,73],[9857,77,8490,75,"auth"],[9857,81,8490,79],[9857,83,8490,81],[9857,99,8490,97],[9857,100,8490,98],[9857,134,8490,132],[9857,135,8490,133],[9858,10,8491,8],[9858,14,8491,14,"totpVerificationInfo"],[9858,34,8491,34],[9858,37,8491,37],[9859,12,8491,39,"verificationCode"],[9859,28,8491,55],[9859,30,8491,57],[9859,34,8491,61],[9859,35,8491,62,"otp"],[9860,10,8491,66],[9860,11,8491,67],[9861,10,8492,8],[9861,17,8492,15,"finalizeSignInTotpMfa"],[9861,38,8492,36],[9861,39,8492,37,"auth"],[9861,43,8492,41],[9861,45,8492,43],[9862,12,8493,12,"mfaPendingCredential"],[9862,32,8493,32],[9863,12,8494,12,"mfaEnrollmentId"],[9863,27,8494,27],[9863,29,8494,29],[9863,33,8494,33],[9863,34,8494,34,"enrollmentId"],[9863,46,8494,46],[9864,12,8495,12,"totpVerificationInfo"],[9865,10,8496,8],[9865,11,8496,9],[9865,12,8496,10],[9866,8,8497,4],[9866,9,8497,5],[9867,8,8497,5],[9867,17,8489,10,"_finalizeSignIn"],[9867,32,8489,25,"_finalizeSignIn"],[9867,33,8489,25,"_x217"],[9867,38,8489,25],[9867,40,8489,25,"_x218"],[9867,45,8489,25],[9868,10,8489,25],[9868,17,8489,25,"_finalizeSignIn2"],[9868,33,8489,25],[9868,34,8489,25,"apply"],[9868,39,8489,25],[9868,46,8489,25,"arguments"],[9868,55,8489,25],[9869,8,8489,25],[9870,8,8489,25],[9870,15,8489,10,"_finalizeSignIn"],[9870,30,8489,25],[9871,6,8489,25],[9872,4,8489,25],[9873,6,8489,25,"key"],[9873,9,8489,25],[9874,6,8489,25,"value"],[9874,11,8489,25],[9874,13,8472,4],[9874,22,8472,11,"_fromSecret"],[9874,33,8472,22,"_fromSecret"],[9874,34,8472,23,"secret"],[9874,40,8472,29],[9874,42,8472,31,"otp"],[9874,45,8472,34],[9874,47,8472,36],[9875,8,8473,8],[9875,15,8473,15],[9875,19,8473,19,"TotpMultiFactorAssertionImpl"],[9875,47,8473,47],[9875,48,8473,48,"otp"],[9875,51,8473,51],[9875,53,8473,53,"undefined"],[9875,62,8473,62],[9875,64,8473,64,"secret"],[9875,70,8473,70],[9875,71,8473,71],[9876,6,8474,4],[9877,6,8475,4],[9878,4,8475,4],[9879,6,8475,4,"key"],[9879,9,8475,4],[9880,6,8475,4,"value"],[9880,11,8475,4],[9880,13,8476,4],[9880,22,8476,11,"_fromEnrollmentId"],[9880,39,8476,28,"_fromEnrollmentId"],[9880,40,8476,29,"enrollmentId"],[9880,52,8476,41],[9880,54,8476,43,"otp"],[9880,57,8476,46],[9880,59,8476,48],[9881,8,8477,8],[9881,15,8477,15],[9881,19,8477,19,"TotpMultiFactorAssertionImpl"],[9881,47,8477,47],[9881,48,8477,48,"otp"],[9881,51,8477,51],[9881,53,8477,53,"enrollmentId"],[9881,65,8477,65],[9881,66,8477,66],[9882,6,8478,4],[9883,4,8478,5],[9884,2,8478,5],[9884,4,8464,43,"MultiFactorAssertionImpl"],[9884,28,8464,67],[9885,2,8499,0],[9886,0,8500,0],[9887,0,8501,0],[9888,0,8502,0],[9889,0,8503,0],[9890,0,8504,0],[9891,0,8505,0],[9892,2,8499,0],[9892,6,8506,6,"TotpSecret"],[9892,16,8506,16],[9893,4,8507,4],[9894,4,8508,4],[9894,13,8508,4,"TotpSecret"],[9894,24,8508,16,"secretKey"],[9894,33,8508,25],[9894,35,8508,27,"hashingAlgorithm"],[9894,51,8508,43],[9894,53,8508,45,"codeLength"],[9894,63,8508,55],[9894,65,8508,57,"codeIntervalSeconds"],[9894,84,8508,76],[9894,86,8508,78,"enrollmentCompletionDeadline"],[9894,114,8508,106],[9894,116,8508,108,"sessionInfo"],[9894,127,8508,119],[9894,129,8508,121,"auth"],[9894,133,8508,125],[9894,135,8508,127],[9895,6,8508,127,"_classCallCheck"],[9895,21,8508,127],[9895,28,8508,127,"TotpSecret"],[9895,38,8508,127],[9896,6,8509,8],[9896,10,8509,12],[9896,11,8509,13,"sessionInfo"],[9896,22,8509,24],[9896,25,8509,27,"sessionInfo"],[9896,36,8509,38],[9897,6,8510,8],[9897,10,8510,12],[9897,11,8510,13,"auth"],[9897,15,8510,17],[9897,18,8510,20,"auth"],[9897,22,8510,24],[9898,6,8511,8],[9898,10,8511,12],[9898,11,8511,13,"secretKey"],[9898,20,8511,22],[9898,23,8511,25,"secretKey"],[9898,32,8511,34],[9899,6,8512,8],[9899,10,8512,12],[9899,11,8512,13,"hashingAlgorithm"],[9899,27,8512,29],[9899,30,8512,32,"hashingAlgorithm"],[9899,46,8512,48],[9900,6,8513,8],[9900,10,8513,12],[9900,11,8513,13,"codeLength"],[9900,21,8513,23],[9900,24,8513,26,"codeLength"],[9900,34,8513,36],[9901,6,8514,8],[9901,10,8514,12],[9901,11,8514,13,"codeIntervalSeconds"],[9901,30,8514,32],[9901,33,8514,35,"codeIntervalSeconds"],[9901,52,8514,54],[9902,6,8515,8],[9902,10,8515,12],[9902,11,8515,13,"enrollmentCompletionDeadline"],[9902,39,8515,41],[9902,42,8515,44,"enrollmentCompletionDeadline"],[9902,70,8515,72],[9903,4,8516,4],[9904,4,8517,4],[9905,4,8517,4],[9905,11,8517,4,"_createClass"],[9905,23,8517,4],[9905,24,8517,4,"TotpSecret"],[9905,34,8517,4],[9906,6,8517,4,"key"],[9906,9,8517,4],[9907,6,8517,4,"value"],[9907,11,8517,4],[9907,13,8521,4],[9908,6,8522,4],[9908,15,8522,4,"_makeTotpVerificationInfo"],[9908,40,8522,29,"_makeTotpVerificationInfo"],[9908,41,8522,30,"otp"],[9908,44,8522,33],[9908,46,8522,35],[9909,8,8523,8],[9909,15,8523,15],[9910,10,8523,17,"sessionInfo"],[9910,21,8523,28],[9910,23,8523,30],[9910,27,8523,34],[9910,28,8523,35,"sessionInfo"],[9910,39,8523,46],[9911,10,8523,48,"verificationCode"],[9911,26,8523,64],[9911,28,8523,66,"otp"],[9912,8,8523,70],[9912,9,8523,71],[9913,6,8524,4],[9914,6,8525,4],[9915,0,8526,0],[9916,0,8527,0],[9917,0,8528,0],[9918,0,8529,0],[9919,0,8530,0],[9920,0,8531,0],[9921,0,8532,0],[9922,0,8533,0],[9923,0,8534,0],[9924,4,8525,4],[9925,6,8525,4,"key"],[9925,9,8525,4],[9926,6,8525,4,"value"],[9926,11,8525,4],[9926,13,8535,4],[9926,22,8535,4,"generateQrCodeUrl"],[9926,39,8535,21,"generateQrCodeUrl"],[9926,40,8535,22,"accountName"],[9926,51,8535,33],[9926,53,8535,35,"issuer"],[9926,59,8535,41],[9926,61,8535,43],[9927,8,8536,8],[9927,12,8536,12,"useDefaults"],[9927,23,8536,23],[9927,26,8536,26],[9927,31,8536,31],[9928,8,8537,8],[9928,12,8537,12,"_isEmptyString"],[9928,26,8537,26],[9928,27,8537,27,"accountName"],[9928,38,8537,38],[9928,39,8537,39],[9928,43,8537,43,"_isEmptyString"],[9928,57,8537,57],[9928,58,8537,58,"issuer"],[9928,64,8537,64],[9928,65,8537,65],[9928,67,8537,67],[9929,10,8538,12,"useDefaults"],[9929,21,8538,23],[9929,24,8538,26],[9929,28,8538,30],[9930,8,8539,8],[9931,8,8540,8],[9931,12,8540,12,"useDefaults"],[9931,23,8540,23],[9931,25,8540,25],[9932,10,8541,12],[9932,14,8541,16,"_isEmptyString"],[9932,28,8541,30],[9932,29,8541,31,"accountName"],[9932,40,8541,42],[9932,41,8541,43],[9932,43,8541,45],[9933,12,8542,16,"accountName"],[9933,23,8542,27],[9933,26,8542,30],[9933,30,8542,34],[9933,31,8542,35,"auth"],[9933,35,8542,39],[9933,36,8542,40,"currentUser"],[9933,47,8542,51],[9933,49,8542,53,"email"],[9933,54,8542,58],[9933,58,8542,62],[9933,71,8542,75],[9934,10,8543,12],[9935,10,8544,12],[9935,14,8544,16,"_isEmptyString"],[9935,28,8544,30],[9935,29,8544,31,"issuer"],[9935,35,8544,37],[9935,36,8544,38],[9935,38,8544,40],[9936,12,8545,16,"issuer"],[9936,18,8545,22],[9936,21,8545,25],[9936,25,8545,29],[9936,26,8545,30,"auth"],[9936,30,8545,34],[9936,31,8545,35,"name"],[9936,35,8545,39],[9937,10,8546,12],[9938,8,8547,8],[9939,8,8548,8],[9939,15,8548,15],[9939,33,8548,33,"issuer"],[9939,39,8548,39],[9939,43,8548,43,"accountName"],[9939,54,8548,54],[9939,65,8548,65],[9939,69,8548,69],[9939,70,8548,70,"secretKey"],[9939,79,8548,79],[9939,90,8548,90,"issuer"],[9939,96,8548,96],[9939,110,8548,110],[9939,114,8548,114],[9939,115,8548,115,"hashingAlgorithm"],[9939,131,8548,131],[9939,142,8548,142],[9939,146,8548,146],[9939,147,8548,147,"codeLength"],[9939,157,8548,157],[9939,159,8548,159],[9940,6,8549,4],[9941,4,8549,5],[9942,6,8549,5,"key"],[9942,9,8549,5],[9943,6,8549,5,"value"],[9943,11,8549,5],[9943,13,8518,4],[9943,22,8518,11,"_fromStartTotpMfaEnrollmentResponse"],[9943,57,8518,46,"_fromStartTotpMfaEnrollmentResponse"],[9943,58,8518,47,"response"],[9943,66,8518,55],[9943,68,8518,57,"auth"],[9943,72,8518,61],[9943,74,8518,63],[9944,8,8519,8],[9944,15,8519,15],[9944,19,8519,19,"TotpSecret"],[9944,29,8519,29],[9944,30,8519,30,"response"],[9944,38,8519,38],[9944,39,8519,39,"totpSessionInfo"],[9944,54,8519,54],[9944,55,8519,55,"sharedSecretKey"],[9944,70,8519,70],[9944,72,8519,72,"response"],[9944,80,8519,80],[9944,81,8519,81,"totpSessionInfo"],[9944,96,8519,96],[9944,97,8519,97,"hashingAlgorithm"],[9944,113,8519,113],[9944,115,8519,115,"response"],[9944,123,8519,123],[9944,124,8519,124,"totpSessionInfo"],[9944,139,8519,139],[9944,140,8519,140,"verificationCodeLength"],[9944,162,8519,162],[9944,164,8519,164,"response"],[9944,172,8519,172],[9944,173,8519,173,"totpSessionInfo"],[9944,188,8519,188],[9944,189,8519,189,"periodSec"],[9944,198,8519,198],[9944,200,8519,200],[9944,204,8519,204,"Date"],[9944,208,8519,208],[9944,209,8519,209,"response"],[9944,217,8519,217],[9944,218,8519,218,"totpSessionInfo"],[9944,233,8519,233],[9944,234,8519,234,"finalizeEnrollmentTime"],[9944,256,8519,256],[9944,257,8519,257],[9944,258,8519,258,"toUTCString"],[9944,269,8519,269],[9944,270,8519,270],[9944,271,8519,271],[9944,273,8519,273,"response"],[9944,281,8519,281],[9944,282,8519,282,"totpSessionInfo"],[9944,297,8519,297],[9944,298,8519,298,"sessionInfo"],[9944,309,8519,309],[9944,311,8519,311,"auth"],[9944,315,8519,315],[9944,316,8519,316],[9945,6,8520,4],[9946,4,8520,5],[9947,2,8520,5],[9948,2,8551,0],[9949,2,8552,0],[9949,11,8552,9,"_isEmptyString"],[9949,25,8552,23,"_isEmptyString"],[9949,26,8552,24,"input"],[9949,31,8552,29],[9949,33,8552,31],[9950,4,8553,4],[9950,11,8553,11],[9950,18,8553,18,"input"],[9950,23,8553,23],[9950,28,8553,28],[9950,39,8553,39],[9950,43,8553,43,"input"],[9950,48,8553,48],[9950,50,8553,50,"length"],[9950,56,8553,56],[9950,61,8553,61],[9950,62,8553,62],[9951,2,8554,0],[9952,2,8556,0],[9952,6,8556,6,"STORAGE_AVAILABLE_KEY"],[9952,27,8556,27],[9952,30,8556,30],[9952,37,8556,37],[9953,2,8558,0,"exports"],[9953,9,8558,7],[9953,10,8558,8,"AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY"],[9953,52,8558,50],[9953,55,8558,53,"AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY"],[9953,97,8558,95],[9954,2,8559,0,"exports"],[9954,9,8559,7],[9954,10,8559,8,"ActionCodeOperation"],[9954,29,8559,27],[9954,32,8559,30,"ActionCodeOperation"],[9954,51,8559,49],[9955,2,8560,0,"exports"],[9955,9,8560,7],[9955,10,8560,8,"ActionCodeURL"],[9955,23,8560,21],[9955,26,8560,24,"ActionCodeURL"],[9955,39,8560,37],[9956,2,8561,0,"exports"],[9956,9,8561,7],[9956,10,8561,8,"AuthCredential"],[9956,24,8561,22],[9956,27,8561,25,"AuthCredential"],[9956,41,8561,39],[9957,2,8562,0,"exports"],[9957,9,8562,7],[9957,10,8562,8,"AuthImpl"],[9957,18,8562,16],[9957,21,8562,19,"AuthImpl"],[9957,29,8562,27],[9958,2,8563,0,"exports"],[9958,9,8563,7],[9958,10,8563,8,"BaseOAuthProvider"],[9958,27,8563,25],[9958,30,8563,28,"BaseOAuthProvider"],[9958,47,8563,45],[9959,2,8564,0,"exports"],[9959,9,8564,7],[9959,10,8564,8,"Delay"],[9959,15,8564,13],[9959,18,8564,16,"Delay"],[9959,23,8564,21],[9960,2,8565,0,"exports"],[9960,9,8565,7],[9960,10,8565,8,"EmailAuthCredential"],[9960,29,8565,27],[9960,32,8565,30,"EmailAuthCredential"],[9960,51,8565,49],[9961,2,8566,0,"exports"],[9961,9,8566,7],[9961,10,8566,8,"EmailAuthProvider"],[9961,27,8566,25],[9961,30,8566,28,"EmailAuthProvider"],[9961,47,8566,45],[9962,2,8567,0,"exports"],[9962,9,8567,7],[9962,10,8567,8,"FacebookAuthProvider"],[9962,30,8567,28],[9962,33,8567,31,"FacebookAuthProvider"],[9962,53,8567,51],[9963,2,8568,0,"exports"],[9963,9,8568,7],[9963,10,8568,8,"FactorId"],[9963,18,8568,16],[9963,21,8568,19,"FactorId"],[9963,29,8568,27],[9964,2,8569,0,"exports"],[9964,9,8569,7],[9964,10,8569,8,"FederatedAuthProvider"],[9964,31,8569,29],[9964,34,8569,32,"FederatedAuthProvider"],[9964,55,8569,53],[9965,2,8570,0,"exports"],[9965,9,8570,7],[9965,10,8570,8,"FetchProvider"],[9965,23,8570,21],[9965,26,8570,24,"FetchProvider"],[9965,39,8570,37],[9966,2,8571,0,"exports"],[9966,9,8571,7],[9966,10,8571,8,"GithubAuthProvider"],[9966,28,8571,26],[9966,31,8571,29,"GithubAuthProvider"],[9966,49,8571,47],[9967,2,8572,0,"exports"],[9967,9,8572,7],[9967,10,8572,8,"GoogleAuthProvider"],[9967,28,8572,26],[9967,31,8572,29,"GoogleAuthProvider"],[9967,49,8572,47],[9968,2,8573,0,"exports"],[9968,9,8573,7],[9968,10,8573,8,"OAuthCredential"],[9968,25,8573,23],[9968,28,8573,26,"OAuthCredential"],[9968,43,8573,41],[9969,2,8574,0,"exports"],[9969,9,8574,7],[9969,10,8574,8,"OAuthProvider"],[9969,23,8574,21],[9969,26,8574,24,"OAuthProvider"],[9969,39,8574,37],[9970,2,8575,0,"exports"],[9970,9,8575,7],[9970,10,8575,8,"OperationType"],[9970,23,8575,21],[9970,26,8575,24,"OperationType"],[9970,39,8575,37],[9971,2,8576,0,"exports"],[9971,9,8576,7],[9971,10,8576,8,"PhoneAuthCredential"],[9971,29,8576,27],[9971,32,8576,30,"PhoneAuthCredential"],[9971,51,8576,49],[9972,2,8577,0,"exports"],[9972,9,8577,7],[9972,10,8577,8,"PhoneAuthProvider"],[9972,27,8577,25],[9972,30,8577,28,"PhoneAuthProvider"],[9972,47,8577,45],[9973,2,8578,0,"exports"],[9973,9,8578,7],[9973,10,8578,8,"PhoneMultiFactorGenerator"],[9973,35,8578,33],[9973,38,8578,36,"PhoneMultiFactorGenerator"],[9973,63,8578,61],[9974,2,8579,0,"exports"],[9974,9,8579,7],[9974,10,8579,8,"ProviderId"],[9974,20,8579,18],[9974,23,8579,21,"ProviderId"],[9974,33,8579,31],[9975,2,8580,0,"exports"],[9975,9,8580,7],[9975,10,8580,8,"RecaptchaVerifier"],[9975,27,8580,25],[9975,30,8580,28,"RecaptchaVerifier"],[9975,47,8580,45],[9976,2,8581,0,"exports"],[9976,9,8581,7],[9976,10,8581,8,"SAMLAuthCredential"],[9976,28,8581,26],[9976,31,8581,29,"SAMLAuthCredential"],[9976,49,8581,47],[9977,2,8582,0,"exports"],[9977,9,8582,7],[9977,10,8582,8,"SAMLAuthProvider"],[9977,26,8582,24],[9977,29,8582,27,"SAMLAuthProvider"],[9977,45,8582,43],[9978,2,8583,0,"exports"],[9978,9,8583,7],[9978,10,8583,8,"STORAGE_AVAILABLE_KEY"],[9978,31,8583,29],[9978,34,8583,32,"STORAGE_AVAILABLE_KEY"],[9978,55,8583,53],[9979,2,8584,0,"exports"],[9979,9,8584,7],[9979,10,8584,8,"SignInMethod"],[9979,22,8584,20],[9979,25,8584,23,"SignInMethod"],[9979,37,8584,35],[9980,2,8585,0,"exports"],[9980,9,8585,7],[9980,10,8585,8,"TotpMultiFactorGenerator"],[9980,34,8585,32],[9980,37,8585,35,"TotpMultiFactorGenerator"],[9980,61,8585,59],[9981,2,8586,0,"exports"],[9981,9,8586,7],[9981,10,8586,8,"TotpSecret"],[9981,20,8586,18],[9981,23,8586,21,"TotpSecret"],[9981,33,8586,31],[9982,2,8587,0,"exports"],[9982,9,8587,7],[9982,10,8587,8,"TwitterAuthProvider"],[9982,29,8587,27],[9982,32,8587,30,"TwitterAuthProvider"],[9982,51,8587,49],[9983,2,8588,0,"exports"],[9983,9,8588,7],[9983,10,8588,8,"UserImpl"],[9983,18,8588,16],[9983,21,8588,19,"UserImpl"],[9983,29,8588,27],[9984,2,8589,0,"exports"],[9984,9,8589,7],[9984,10,8589,8,"_assert"],[9984,17,8589,15],[9984,20,8589,18,"_assert"],[9984,27,8589,25],[9985,2,8590,0,"exports"],[9985,9,8590,7],[9985,10,8590,8,"_assertInstanceOf"],[9985,27,8590,25],[9985,30,8590,28,"_assertInstanceOf"],[9985,47,8590,45],[9986,2,8591,0,"exports"],[9986,9,8591,7],[9986,10,8591,8,"_assertLinkedStatus"],[9986,29,8591,27],[9986,32,8591,30,"_assertLinkedStatus"],[9986,51,8591,49],[9987,2,8592,0,"exports"],[9987,9,8592,7],[9987,10,8592,8,"_castAuth"],[9987,19,8592,17],[9987,22,8592,20,"_castAuth"],[9987,31,8592,29],[9988,2,8593,0,"exports"],[9988,9,8593,7],[9988,10,8593,8,"_createError"],[9988,22,8593,20],[9988,25,8593,23,"_createError"],[9988,37,8593,35],[9989,2,8594,0,"exports"],[9989,9,8594,7],[9989,10,8594,8,"_emulatorUrl"],[9989,22,8594,20],[9989,25,8594,23,"_emulatorUrl"],[9989,37,8594,35],[9990,2,8595,0,"exports"],[9990,9,8595,7],[9990,10,8595,8,"_fail"],[9990,15,8595,13],[9990,18,8595,16,"_fail"],[9990,23,8595,21],[9991,2,8596,0,"exports"],[9991,9,8596,7],[9991,10,8596,8,"_gapiScriptUrl"],[9991,24,8596,22],[9991,27,8596,25,"_gapiScriptUrl"],[9991,41,8596,39],[9992,2,8597,0,"exports"],[9992,9,8597,7],[9992,10,8597,8,"_generateCallbackName"],[9992,31,8597,29],[9992,34,8597,32,"_generateCallbackName"],[9992,55,8597,53],[9993,2,8598,0,"exports"],[9993,9,8598,7],[9993,10,8598,8,"_getActiveServiceWorker"],[9993,33,8598,31],[9993,36,8598,34,"_getActiveServiceWorker"],[9993,59,8598,57],[9994,2,8599,0,"exports"],[9994,9,8599,7],[9994,10,8599,8,"_getClientVersion"],[9994,27,8599,25],[9994,30,8599,28,"_getClientVersion"],[9994,47,8599,45],[9995,2,8600,0,"exports"],[9995,9,8600,7],[9995,10,8600,8,"_getCurrentUrl"],[9995,24,8600,22],[9995,27,8600,25,"_getCurrentUrl"],[9995,41,8600,39],[9996,2,8601,0,"exports"],[9996,9,8601,7],[9996,10,8601,8,"_getInstance"],[9996,22,8601,20],[9996,25,8601,23,"_getInstance"],[9996,37,8601,35],[9997,2,8602,0,"exports"],[9997,9,8602,7],[9997,10,8602,8,"_getServiceWorkerController"],[9997,37,8602,35],[9997,40,8602,38,"_getServiceWorkerController"],[9997,67,8602,65],[9998,2,8603,0,"exports"],[9998,9,8603,7],[9998,10,8603,8,"_getWorkerGlobalScope"],[9998,31,8603,29],[9998,34,8603,32,"_getWorkerGlobalScope"],[9998,55,8603,53],[9999,2,8604,0,"exports"],[9999,9,8604,7],[9999,10,8604,8,"_isAndroid"],[9999,20,8604,18],[9999,23,8604,21,"_isAndroid"],[9999,33,8604,31],[10000,2,8605,0,"exports"],[10000,9,8605,7],[10000,10,8605,8,"_isChromeIOS"],[10000,22,8605,20],[10000,25,8605,23,"_isChromeIOS"],[10000,37,8605,35],[10001,2,8606,0,"exports"],[10001,9,8606,7],[10001,10,8606,8,"_isFirefox"],[10001,20,8606,18],[10001,23,8606,21,"_isFirefox"],[10001,33,8606,31],[10002,2,8607,0,"exports"],[10002,9,8607,7],[10002,10,8607,8,"_isIE10"],[10002,17,8607,15],[10002,20,8607,18,"_isIE10"],[10002,27,8607,25],[10003,2,8608,0,"exports"],[10003,9,8608,7],[10003,10,8608,8,"_isIOS"],[10003,16,8608,14],[10003,19,8608,17,"_isIOS"],[10003,25,8608,23],[10004,2,8609,0,"exports"],[10004,9,8609,7],[10004,10,8609,8,"_isIOS7Or8"],[10004,20,8609,18],[10004,23,8609,21,"_isIOS7Or8"],[10004,33,8609,31],[10005,2,8610,0,"exports"],[10005,9,8610,7],[10005,10,8610,8,"_isIOSStandalone"],[10005,26,8610,24],[10005,29,8610,27,"_isIOSStandalone"],[10005,45,8610,43],[10006,2,8611,0,"exports"],[10006,9,8611,7],[10006,10,8611,8,"_isMobileBrowser"],[10006,26,8611,24],[10006,29,8611,27,"_isMobileBrowser"],[10006,45,8611,43],[10007,2,8612,0,"exports"],[10007,9,8612,7],[10007,10,8612,8,"_isSafari"],[10007,19,8612,17],[10007,22,8612,20,"_isSafari"],[10007,31,8612,29],[10008,2,8613,0,"exports"],[10008,9,8613,7],[10008,10,8613,8,"_isWorker"],[10008,19,8613,17],[10008,22,8613,20,"_isWorker"],[10008,31,8613,29],[10009,2,8614,0,"exports"],[10009,9,8614,7],[10009,10,8614,8,"_link"],[10009,15,8614,13],[10009,18,8614,16,"_link"],[10009,23,8614,21],[10010,2,8615,0,"exports"],[10010,9,8615,7],[10010,10,8615,8,"_loadJS"],[10010,17,8615,15],[10010,20,8615,18,"_loadJS"],[10010,27,8615,25],[10011,2,8616,0,"exports"],[10011,9,8616,7],[10011,10,8616,8,"_logWarn"],[10011,18,8616,16],[10011,21,8616,19,"_logWarn"],[10011,29,8616,27],[10012,2,8617,0,"exports"],[10012,9,8617,7],[10012,10,8617,8,"_performApiRequest"],[10012,28,8617,26],[10012,31,8617,29,"_performApiRequest"],[10012,49,8617,47],[10013,2,8618,0,"exports"],[10013,9,8618,7],[10013,10,8618,8,"_persistenceKeyName"],[10013,29,8618,27],[10013,32,8618,30,"_persistenceKeyName"],[10013,51,8618,49],[10014,2,8619,0,"exports"],[10014,9,8619,7],[10014,10,8619,8,"_reauthenticate"],[10014,25,8619,23],[10014,28,8619,26,"_reauthenticate"],[10014,43,8619,41],[10015,2,8620,0,"exports"],[10015,9,8620,7],[10015,10,8620,8,"_serverAppCurrentUserOperationNotSupportedError"],[10015,57,8620,55],[10015,60,8620,58,"_serverAppCurrentUserOperationNotSupportedError"],[10015,107,8620,105],[10016,2,8621,0,"exports"],[10016,9,8621,7],[10016,10,8621,8,"_setExternalJSProvider"],[10016,32,8621,30],[10016,35,8621,33,"_setExternalJSProvider"],[10016,57,8621,55],[10017,2,8622,0,"exports"],[10017,9,8622,7],[10017,10,8622,8,"_setWindowLocation"],[10017,28,8622,26],[10017,31,8622,29,"_setWindowLocation"],[10017,49,8622,47],[10018,2,8623,0,"exports"],[10018,9,8623,7],[10018,10,8623,8,"_signInWithCredential"],[10018,31,8623,29],[10018,34,8623,32,"_signInWithCredential"],[10018,55,8623,53],[10019,2,8624,0,"exports"],[10019,9,8624,7],[10019,10,8624,8,"_window"],[10019,17,8624,15],[10019,20,8624,18,"_window"],[10019,27,8624,25],[10020,2,8625,0,"exports"],[10020,9,8625,7],[10020,10,8625,8,"applyActionCode"],[10020,25,8625,23],[10020,28,8625,26,"applyActionCode"],[10020,43,8625,41],[10021,2,8626,0,"exports"],[10021,9,8626,7],[10021,10,8626,8,"beforeAuthStateChanged"],[10021,32,8626,30],[10021,35,8626,33,"beforeAuthStateChanged"],[10021,57,8626,55],[10022,2,8627,0,"exports"],[10022,9,8627,7],[10022,10,8627,8,"checkActionCode"],[10022,25,8627,23],[10022,28,8627,26,"checkActionCode"],[10022,43,8627,41],[10023,2,8628,0,"exports"],[10023,9,8628,7],[10023,10,8628,8,"confirmPasswordReset"],[10023,30,8628,28],[10023,33,8628,31,"confirmPasswordReset"],[10023,53,8628,51],[10024,2,8629,0,"exports"],[10024,9,8629,7],[10024,10,8629,8,"connectAuthEmulator"],[10024,29,8629,27],[10024,32,8629,30,"connectAuthEmulator"],[10024,51,8629,49],[10025,2,8630,0,"exports"],[10025,9,8630,7],[10025,10,8630,8,"createUserWithEmailAndPassword"],[10025,40,8630,38],[10025,43,8630,41,"createUserWithEmailAndPassword"],[10025,73,8630,71],[10026,2,8631,0,"exports"],[10026,9,8631,7],[10026,10,8631,8,"debugAssert"],[10026,21,8631,19],[10026,24,8631,22,"debugAssert"],[10026,35,8631,33],[10027,2,8632,0,"exports"],[10027,9,8632,7],[10027,10,8632,8,"debugErrorMap"],[10027,23,8632,21],[10027,26,8632,24,"debugErrorMap"],[10027,39,8632,37],[10028,2,8633,0,"exports"],[10028,9,8633,7],[10028,10,8633,8,"deleteUser"],[10028,20,8633,18],[10028,23,8633,21,"deleteUser"],[10028,33,8633,31],[10029,2,8634,0,"exports"],[10029,9,8634,7],[10029,10,8634,8,"fetchSignInMethodsForEmail"],[10029,36,8634,34],[10029,39,8634,37,"fetchSignInMethodsForEmail"],[10029,65,8634,63],[10030,2,8635,0,"exports"],[10030,9,8635,7],[10030,10,8635,8,"getAdditionalUserInfo"],[10030,31,8635,29],[10030,34,8635,32,"getAdditionalUserInfo"],[10030,55,8635,53],[10031,2,8636,0,"exports"],[10031,9,8636,7],[10031,10,8636,8,"getIdToken"],[10031,20,8636,18],[10031,23,8636,21,"getIdToken"],[10031,33,8636,31],[10032,2,8637,0,"exports"],[10032,9,8637,7],[10032,10,8637,8,"getIdTokenResult"],[10032,26,8637,24],[10032,29,8637,27,"getIdTokenResult"],[10032,47,8637,43],[10033,2,8638,0,"exports"],[10033,9,8638,7],[10033,10,8638,8,"getMultiFactorResolver"],[10033,32,8638,30],[10033,35,8638,33,"getMultiFactorResolver"],[10033,57,8638,55],[10034,2,8639,0,"exports"],[10034,9,8639,7],[10034,10,8639,8,"inMemoryPersistence"],[10034,29,8639,27],[10034,32,8639,30,"inMemoryPersistence"],[10034,51,8639,49],[10035,2,8640,0,"exports"],[10035,9,8640,7],[10035,10,8640,8,"initializeAuth"],[10035,24,8640,22],[10035,27,8640,25,"initializeAuth"],[10035,41,8640,39],[10036,2,8641,0,"exports"],[10036,9,8641,7],[10036,10,8641,8,"initializeRecaptchaConfig"],[10036,35,8641,33],[10036,38,8641,36,"initializeRecaptchaConfig"],[10036,63,8641,61],[10037,2,8642,0,"exports"],[10037,9,8642,7],[10037,10,8642,8,"isSignInWithEmailLink"],[10037,31,8642,29],[10037,34,8642,32,"isSignInWithEmailLink"],[10037,55,8642,53],[10038,2,8643,0,"exports"],[10038,9,8643,7],[10038,10,8643,8,"linkWithCredential"],[10038,28,8643,26],[10038,31,8643,29,"linkWithCredential"],[10038,49,8643,47],[10039,2,8644,0,"exports"],[10039,9,8644,7],[10039,10,8644,8,"linkWithPhoneNumber"],[10039,29,8644,27],[10039,32,8644,30,"linkWithPhoneNumber"],[10039,51,8644,49],[10040,2,8645,0,"exports"],[10040,9,8645,7],[10040,10,8645,8,"multiFactor"],[10040,21,8645,19],[10040,24,8645,22,"multiFactor"],[10040,35,8645,33],[10041,2,8646,0,"exports"],[10041,9,8646,7],[10041,10,8646,8,"onAuthStateChanged"],[10041,28,8646,26],[10041,31,8646,29,"onAuthStateChanged"],[10041,49,8646,47],[10042,2,8647,0,"exports"],[10042,9,8647,7],[10042,10,8647,8,"onIdTokenChanged"],[10042,26,8647,24],[10042,29,8647,27,"onIdTokenChanged"],[10042,45,8647,43],[10043,2,8648,0,"exports"],[10043,9,8648,7],[10043,10,8648,8,"parseActionCodeURL"],[10043,28,8648,26],[10043,31,8648,29,"parseActionCodeURL"],[10043,49,8648,47],[10044,2,8649,0,"exports"],[10044,9,8649,7],[10044,10,8649,8,"prodErrorMap"],[10044,22,8649,20],[10044,25,8649,23,"prodErrorMap"],[10044,37,8649,35],[10045,2,8650,0,"exports"],[10045,9,8650,7],[10045,10,8650,8,"reauthenticateWithCredential"],[10045,38,8650,36],[10045,41,8650,39,"reauthenticateWithCredential"],[10045,69,8650,67],[10046,2,8651,0,"exports"],[10046,9,8651,7],[10046,10,8651,8,"reauthenticateWithPhoneNumber"],[10046,39,8651,37],[10046,42,8651,40,"reauthenticateWithPhoneNumber"],[10046,71,8651,69],[10047,2,8652,0,"exports"],[10047,9,8652,7],[10047,10,8652,8,"registerAuth"],[10047,22,8652,20],[10047,25,8652,23,"registerAuth"],[10047,37,8652,35],[10048,2,8653,0,"exports"],[10048,9,8653,7],[10048,10,8653,8,"reload"],[10048,16,8653,14],[10048,19,8653,17,"reload"],[10048,27,8653,23],[10049,2,8654,0,"exports"],[10049,9,8654,7],[10049,10,8654,8,"revokeAccessToken"],[10049,27,8654,25],[10049,30,8654,28,"revokeAccessToken"],[10049,47,8654,45],[10050,2,8655,0,"exports"],[10050,9,8655,7],[10050,10,8655,8,"sendEmailVerification"],[10050,31,8655,29],[10050,34,8655,32,"sendEmailVerification"],[10050,55,8655,53],[10051,2,8656,0,"exports"],[10051,9,8656,7],[10051,10,8656,8,"sendPasswordResetEmail"],[10051,32,8656,30],[10051,35,8656,33,"sendPasswordResetEmail"],[10051,57,8656,55],[10052,2,8657,0,"exports"],[10052,9,8657,7],[10052,10,8657,8,"sendSignInLinkToEmail"],[10052,31,8657,29],[10052,34,8657,32,"sendSignInLinkToEmail"],[10052,55,8657,53],[10053,2,8658,0,"exports"],[10053,9,8658,7],[10053,10,8658,8,"setPersistence"],[10053,24,8658,22],[10053,27,8658,25,"setPersistence"],[10053,41,8658,39],[10054,2,8659,0,"exports"],[10054,9,8659,7],[10054,10,8659,8,"signInAnonymously"],[10054,27,8659,25],[10054,30,8659,28,"signInAnonymously"],[10054,47,8659,45],[10055,2,8660,0,"exports"],[10055,9,8660,7],[10055,10,8660,8,"signInWithCredential"],[10055,30,8660,28],[10055,33,8660,31,"signInWithCredential"],[10055,53,8660,51],[10056,2,8661,0,"exports"],[10056,9,8661,7],[10056,10,8661,8,"signInWithCustomToken"],[10056,31,8661,29],[10056,34,8661,32,"signInWithCustomToken"],[10056,55,8661,53],[10057,2,8662,0,"exports"],[10057,9,8662,7],[10057,10,8662,8,"signInWithEmailAndPassword"],[10057,36,8662,34],[10057,39,8662,37,"signInWithEmailAndPassword"],[10057,65,8662,63],[10058,2,8663,0,"exports"],[10058,9,8663,7],[10058,10,8663,8,"signInWithEmailLink"],[10058,29,8663,27],[10058,32,8663,30,"signInWithEmailLink"],[10058,51,8663,49],[10059,2,8664,0,"exports"],[10059,9,8664,7],[10059,10,8664,8,"signInWithIdp"],[10059,23,8664,21],[10059,26,8664,24,"signInWithIdp"],[10059,39,8664,37],[10060,2,8665,0,"exports"],[10060,9,8665,7],[10060,10,8665,8,"signInWithPhoneNumber"],[10060,31,8665,29],[10060,34,8665,32,"signInWithPhoneNumber"],[10060,55,8665,53],[10061,2,8666,0,"exports"],[10061,9,8666,7],[10061,10,8666,8,"signOut"],[10061,17,8666,15],[10061,20,8666,18,"signOut"],[10061,27,8666,25],[10062,2,8667,0,"exports"],[10062,9,8667,7],[10062,10,8667,8,"unlink"],[10062,16,8667,14],[10062,19,8667,17,"unlink"],[10062,25,8667,23],[10063,2,8668,0,"exports"],[10063,9,8668,7],[10063,10,8668,8,"updateCurrentUser"],[10063,27,8668,25],[10063,30,8668,28,"updateCurrentUser"],[10063,47,8668,45],[10064,2,8669,0,"exports"],[10064,9,8669,7],[10064,10,8669,8,"updateEmail"],[10064,21,8669,19],[10064,24,8669,22,"updateEmail"],[10064,35,8669,33],[10065,2,8670,0,"exports"],[10065,9,8670,7],[10065,10,8670,8,"updatePassword"],[10065,24,8670,22],[10065,27,8670,25,"updatePassword"],[10065,41,8670,39],[10066,2,8671,0,"exports"],[10066,9,8671,7],[10066,10,8671,8,"updatePhoneNumber"],[10066,27,8671,25],[10066,30,8671,28,"updatePhoneNumber"],[10066,47,8671,45],[10067,2,8672,0,"exports"],[10067,9,8672,7],[10067,10,8672,8,"updateProfile"],[10067,23,8672,21],[10067,26,8672,24,"updateProfile"],[10067,39,8672,37],[10068,2,8673,0,"exports"],[10068,9,8673,7],[10068,10,8673,8,"useDeviceLanguage"],[10068,27,8673,25],[10068,30,8673,28,"useDeviceLanguage"],[10068,47,8673,45],[10069,2,8674,0,"exports"],[10069,9,8674,7],[10069,10,8674,8,"validatePassword"],[10069,26,8674,24],[10069,29,8674,27,"validatePassword"],[10069,45,8674,43],[10070,2,8675,0,"exports"],[10070,9,8675,7],[10070,10,8675,8,"verifyBeforeUpdateEmail"],[10070,33,8675,31],[10070,36,8675,34,"verifyBeforeUpdateEmail"],[10070,59,8675,57],[10071,2,8676,0,"exports"],[10071,9,8676,7],[10071,10,8676,8,"verifyPasswordResetCode"],[10071,33,8676,31],[10071,36,8676,34,"verifyPasswordResetCode"],[10071,59,8676,57],[10072,0,8676,58],[10072,3]],"functionMap":{"names":["<global>","_debugErrorMap","_prodErrorMap","_logWarn","_logError","_fail","_createError","_errorWithCustomMessage","_serverAppCurrentUserOperationNotSupportedError","_assertInstanceOf","createErrorInternal","_assert","debugFail","debugAssert","_getCurrentUrl","_isHttpOrHttps","_getCurrentScheme","_isOnline","_getUserLanguage","Delay","Delay#constructor","Delay#get","_emulatorUrl","FetchProvider","FetchProvider.initialize","FetchProvider.fetch","FetchProvider.headers","FetchProvider.response","_addTidIfNecessary","_performApiRequest","_performFetchWithErrorHandling$argument_2","_performFetchWithErrorHandling","_performSignInRequest","_getFinalTarget","_parseEnforcementState","NetworkTimeout","NetworkTimeout#clearNetworkTimeout","NetworkTimeout#constructor","Promise$argument_0","setTimeout$argument_0","_makeTaggedError","isV2","isEnterprise","RecaptchaConfig","RecaptchaConfig#constructor","RecaptchaConfig#getProviderEnforcementState","RecaptchaConfig#isProviderEnabled","RecaptchaConfig#isAnyProviderEnabled","getRecaptchaParams","getRecaptchaConfig","deleteAccount","deleteLinkedAccounts","getAccountInfo","utcTimestampToDateString","getIdToken","getIdTokenResult","secondsStringToMilliseconds","_parseToken","_tokenExpiresIn","_logoutIfInvalidated","isUserInvalidated","ProactiveRefresh","ProactiveRefresh#constructor","ProactiveRefresh#_start","ProactiveRefresh#_stop","ProactiveRefresh#getInterval","ProactiveRefresh#schedule","ProactiveRefresh#iteration","UserMetadata","UserMetadata#constructor","UserMetadata#_initializeTime","UserMetadata#_copy","UserMetadata#toJSON","_reloadWithoutSaving","reload","mergeProviderData","original.filter$argument_0","newData.some$argument_0","extractProviderData","providers.map$argument_0","requestStsToken","revokeToken","StsTokenManager","StsTokenManager#constructor","StsTokenManager#get__isExpired","StsTokenManager#updateFromServerResponse","StsTokenManager#updateFromIdToken","StsTokenManager#getToken","StsTokenManager#clearRefreshToken","StsTokenManager#refresh","StsTokenManager#updateTokensAndExpiration","StsTokenManager.fromJSON","StsTokenManager#toJSON","StsTokenManager#_assign","StsTokenManager#_clone","StsTokenManager#_performRefresh","assertStringOrUndefined","UserImpl","UserImpl#constructor","UserImpl#getIdToken","UserImpl#getIdTokenResult","UserImpl#reload","UserImpl#_assign","user.providerData.map$argument_0","UserImpl#_clone","UserImpl#_onReload","UserImpl#_notifyReloadListener","UserImpl#_startProactiveRefresh","UserImpl#_stopProactiveRefresh","UserImpl#_updateTokensIfNecessary","UserImpl#_delete","UserImpl#toJSON","providerData.map$argument_0","UserImpl#get__refreshToken","UserImpl._fromJSON","UserImpl._fromIdTokenResponse","UserImpl._fromGetAccountInfoResponse","_getInstance","InMemoryPersistence","InMemoryPersistence#constructor","InMemoryPersistence#_isAvailable","InMemoryPersistence#_set","InMemoryPersistence#_get","InMemoryPersistence#_remove","InMemoryPersistence#_addListener","InMemoryPersistence#_removeListener","_persistenceKeyName","PersistenceUserManager","PersistenceUserManager#constructor","PersistenceUserManager#setCurrentUser","PersistenceUserManager#getCurrentUser","getAccountInfo._catch$argument_0","PersistenceUserManager#removeCurrentUser","PersistenceUserManager#savePersistenceForRedirect","PersistenceUserManager#setPersistence","PersistenceUserManager#_delete","PersistenceUserManager.create","persistenceHierarchy.map$argument_0","filter$argument_0","availablePersistences.filter$argument_0","_getBrowserName","_isFirefox","_isSafari","_isChromeIOS","_isIEMobile","_isAndroid","_isBlackBerry","_isWebOS","_isIOS","_isIOS7Or8","_isIOSStandalone","_isIE10","_isMobileBrowser","_getClientVersion","AuthMiddlewareQueue","AuthMiddlewareQueue#constructor","AuthMiddlewareQueue#pushCallback","wrappedCallback","<anonymous>","queue.index","AuthMiddlewareQueue#runMiddleware","_getPasswordPolicy","PasswordPolicyImpl","PasswordPolicyImpl#constructor","PasswordPolicyImpl#validatePassword","PasswordPolicyImpl#validatePasswordLengthOptions","PasswordPolicyImpl#validatePasswordCharacterOptions","PasswordPolicyImpl#updatePasswordCharacterOptionsStatuses","AuthImpl","AuthImpl#constructor","AuthImpl#_initializeWithPersistence","queue$argument_0","AuthImpl#_onStorageEvent","AuthImpl#initializeCurrentUserFromIdToken","AuthImpl#initializeCurrentUser","_popupRedirectResolver._overrideRedirectResult$argument_1","AuthImpl#tryRedirectSignIn","AuthImpl#reloadAndSetCurrentUserOrClear","AuthImpl#useDeviceLanguage","AuthImpl#_delete","AuthImpl#updateCurrentUser","AuthImpl#_updateCurrentUser","AuthImpl#signOut","AuthImpl#setPersistence","AuthImpl#_getRecaptchaConfig","AuthImpl#validatePassword","AuthImpl#_getPasswordPolicyInternal","AuthImpl#_updatePasswordPolicy","AuthImpl#_getPersistenceType","AuthImpl#_getPersistence","AuthImpl#_updateErrorMap","AuthImpl#onAuthStateChanged","AuthImpl#beforeAuthStateChanged","AuthImpl#onIdTokenChanged","AuthImpl#authStateReady","onAuthStateChanged$argument_0","AuthImpl#revokeAccessToken","AuthImpl#toJSON","AuthImpl#_setRedirectUser","AuthImpl#getOrInitRedirectPersistenceManager","AuthImpl#_redirectUserForId","AuthImpl#_persistUserIfCurrent","AuthImpl#_notifyListenersIfCurrent","AuthImpl#_key","AuthImpl#_startProactiveRefresh","AuthImpl#_stopProactiveRefresh","AuthImpl#get___currentUser","AuthImpl#notifyAuthListeners","AuthImpl#registerStateListener","promise.then$argument_0","AuthImpl#directlySetCurrentUser","AuthImpl#queue","AuthImpl#get__assertedPersistence","AuthImpl#_logFramework","AuthImpl#_getFrameworks","AuthImpl#_getAdditionalHeaders","AuthImpl#_getAppCheckToken","_castAuth","Subscription","Subscription#constructor","util.createSubscribe$argument_0","Subscription#get__next","externalJSProvider.loadJS","_setExternalJSProvider","_loadJS","_recaptchaV2ScriptUrl","_recaptchaEnterpriseScriptUrl","_gapiScriptUrl","_generateCallbackName","MockReCaptcha","MockReCaptcha#constructor","MockReCaptcha#render","MockReCaptcha#reset","MockReCaptcha#getResponse","MockReCaptcha#execute","MockGreCAPTCHATopLevel","MockGreCAPTCHATopLevel#constructor","MockGreCAPTCHATopLevel#ready","MockGreCAPTCHATopLevel#execute","MockGreCAPTCHATopLevel#render","MockGreCAPTCHA","MockGreCAPTCHA#ready","MockGreCAPTCHA#execute","MockGreCAPTCHA#render","MockWidget","MockWidget#constructor","clickHandler","MockWidget#getResponse","MockWidget#_delete","MockWidget#execute","window.setTimeout$argument_0","MockWidget#checkIfDeleted","generateRandomAlphaNumericString","RecaptchaEnterpriseVerifier","RecaptchaEnterpriseVerifier#constructor","RecaptchaEnterpriseVerifier#verify","retrieveSiteKey","getRecaptchaConfig.then$argument_0","getRecaptchaConfig.then._catch$argument_0","retrieveRecaptchaToken","grecaptcha.enterprise.ready$argument_0","grecaptcha.enterprise.execute.then$argument_0","grecaptcha.enterprise.execute.then._catch$argument_0","retrieveSiteKey.then$argument_0","_loadJS.then$argument_0","_loadJS.then._catch$argument_0","retrieveSiteKey.then._catch$argument_0","injectRecaptchaFields","handleRecaptchaFlow","actionMethod._catch$argument_0","_initializeRecaptchaConfig","initializeAuth","_initializeAuthInstance","connectAuthEmulator","extractProtocol","extractHostAndPort","parsePort","emitEmulatorWarning","attachBanner","AuthCredential","AuthCredential#constructor","AuthCredential#toJSON","AuthCredential#_getIdTokenResponse","AuthCredential#_linkToIdToken","AuthCredential#_getReauthenticationResolver","resetPassword","updateEmailPassword","linkEmailPassword","applyActionCode$1","signInWithPassword","sendOobCode","sendEmailVerification$1","sendPasswordResetEmail$1","sendSignInLinkToEmail$1","verifyAndChangeEmail","signInWithEmailLink$1","signInWithEmailLinkForLinking","EmailAuthCredential","EmailAuthCredential#constructor","EmailAuthCredential._fromEmailAndPassword","EmailAuthCredential._fromEmailAndCode","EmailAuthCredential#toJSON","EmailAuthCredential.fromJSON","EmailAuthCredential#_getIdTokenResponse","EmailAuthCredential#_linkToIdToken","EmailAuthCredential#_getReauthenticationResolver","signInWithIdp","OAuthCredential","OAuthCredential#constructor","OAuthCredential._fromParams","OAuthCredential#toJSON","OAuthCredential.fromJSON","OAuthCredential#_getIdTokenResponse","OAuthCredential#_linkToIdToken","OAuthCredential#_getReauthenticationResolver","OAuthCredential#buildRequest","sendPhoneVerificationCode","signInWithPhoneNumber$1","linkWithPhoneNumber$1","verifyPhoneNumberForExisting","PhoneAuthCredential","PhoneAuthCredential#constructor","PhoneAuthCredential._fromVerification","PhoneAuthCredential._fromTokenResponse","PhoneAuthCredential#_getIdTokenResponse","PhoneAuthCredential#_linkToIdToken","PhoneAuthCredential#_getReauthenticationResolver","PhoneAuthCredential#_makeVerificationRequest","PhoneAuthCredential#toJSON","PhoneAuthCredential.fromJSON","parseMode","parseDeepLink","ActionCodeURL","ActionCodeURL#constructor","ActionCodeURL.parseLink","parseActionCodeURL","EmailAuthProvider","EmailAuthProvider#constructor","EmailAuthProvider.credential","EmailAuthProvider.credentialWithLink","FederatedAuthProvider","FederatedAuthProvider#constructor","FederatedAuthProvider#setDefaultLanguage","FederatedAuthProvider#setCustomParameters","FederatedAuthProvider#getCustomParameters","BaseOAuthProvider","BaseOAuthProvider#constructor","BaseOAuthProvider#addScope","BaseOAuthProvider#getScopes","OAuthProvider","OAuthProvider.credentialFromJSON","OAuthProvider#credential","OAuthProvider#_credential","OAuthProvider.credentialFromResult","OAuthProvider.credentialFromError","OAuthProvider.oauthCredentialFromTaggedObject","FacebookAuthProvider","FacebookAuthProvider#constructor","FacebookAuthProvider.credential","FacebookAuthProvider.credentialFromResult","FacebookAuthProvider.credentialFromError","FacebookAuthProvider.credentialFromTaggedObject","GoogleAuthProvider","GoogleAuthProvider#constructor","GoogleAuthProvider.credential","GoogleAuthProvider.credentialFromResult","GoogleAuthProvider.credentialFromError","GoogleAuthProvider.credentialFromTaggedObject","GithubAuthProvider","GithubAuthProvider#constructor","GithubAuthProvider.credential","GithubAuthProvider.credentialFromResult","GithubAuthProvider.credentialFromError","GithubAuthProvider.credentialFromTaggedObject","SAMLAuthCredential","SAMLAuthCredential#constructor","SAMLAuthCredential#_getIdTokenResponse","SAMLAuthCredential#_linkToIdToken","SAMLAuthCredential#_getReauthenticationResolver","SAMLAuthCredential#toJSON","SAMLAuthCredential.fromJSON","SAMLAuthCredential._create","SAMLAuthCredential#buildRequest","SAMLAuthProvider","SAMLAuthProvider#constructor","SAMLAuthProvider.credentialFromResult","SAMLAuthProvider.credentialFromError","SAMLAuthProvider.credentialFromJSON","SAMLAuthProvider.samlCredentialFromTaggedObject","TwitterAuthProvider","TwitterAuthProvider#constructor","TwitterAuthProvider.credential","TwitterAuthProvider.credentialFromResult","TwitterAuthProvider.credentialFromError","TwitterAuthProvider.credentialFromTaggedObject","signUp","UserCredentialImpl","UserCredentialImpl#constructor","UserCredentialImpl._fromIdTokenResponse","UserCredentialImpl._forOperation","providerIdForResponse","signInAnonymously","MultiFactorError","MultiFactorError#constructor","MultiFactorError._fromErrorAndOperation","_processCredentialSavingMfaContextIfNecessary","idTokenProvider._catch$argument_0","providerDataAsNames","providerData.map.filter$argument_0","unlink","userInternal.providerData.filter$argument_0","_link","_assertLinkedStatus","_reauthenticate","_signInWithCredential","signInWithCredential","linkWithCredential","reauthenticateWithCredential","signInWithCustomToken$1","signInWithCustomToken","MultiFactorInfoImpl","MultiFactorInfoImpl#constructor","MultiFactorInfoImpl._fromServerResponse","PhoneMultiFactorInfoImpl","PhoneMultiFactorInfoImpl#constructor","PhoneMultiFactorInfoImpl._fromServerResponse","TotpMultiFactorInfoImpl","TotpMultiFactorInfoImpl#constructor","TotpMultiFactorInfoImpl._fromServerResponse","_setActionCodeSettingsOnRequest","recachePasswordPolicy","sendPasswordResetEmail","confirmPasswordReset","resetPassword._catch$argument_0","applyActionCode","checkActionCode","verifyPasswordResetCode","createUserWithEmailAndPassword","signUpResponse._catch$argument_0","signInWithEmailAndPassword","signInWithCredential._catch$argument_0","sendSignInLinkToEmail","setActionCodeSettings","isSignInWithEmailLink","signInWithEmailLink","createAuthUri","fetchSignInMethodsForEmail","sendEmailVerification","verifyBeforeUpdateEmail","updateProfile$1","updateProfile","userInternal.providerData.find$argument_0","updateEmail","updatePassword","updateEmailOrPassword","_fromIdTokenResponse","GenericAdditionalUserInfo","GenericAdditionalUserInfo#constructor","FederatedAdditionalUserInfoWithUsername","FederatedAdditionalUserInfoWithUsername#constructor","FacebookAdditionalUserInfo","FacebookAdditionalUserInfo#constructor","GithubAdditionalUserInfo","GithubAdditionalUserInfo#constructor","GoogleAdditionalUserInfo","GoogleAdditionalUserInfo#constructor","TwitterAdditionalUserInfo","TwitterAdditionalUserInfo#constructor","getAdditionalUserInfo","setPersistence","initializeRecaptchaConfig","validatePassword","onIdTokenChanged","beforeAuthStateChanged","onAuthStateChanged","useDeviceLanguage","updateCurrentUser","signOut","revokeAccessToken","deleteUser","MultiFactorSessionImpl","MultiFactorSessionImpl#constructor","MultiFactorSessionImpl._fromIdtoken","MultiFactorSessionImpl._fromMfaPendingCredential","MultiFactorSessionImpl#toJSON","MultiFactorSessionImpl.fromJSON","MultiFactorResolverImpl","MultiFactorResolverImpl#constructor","MultiFactorResolverImpl._fromError","map$argument_0","MultiFactorResolverImpl$argument_2","MultiFactorResolverImpl#resolveSignIn","getMultiFactorResolver","startEnrollPhoneMfa","finalizeEnrollPhoneMfa","startEnrollTotpMfa","finalizeEnrollTotpMfa","withdrawMfa","MultiFactorUserImpl","MultiFactorUserImpl#constructor","user._onReload$argument_0","userInfo.mfaInfo.map$argument_0","MultiFactorUserImpl._fromUser","MultiFactorUserImpl#getSession","MultiFactorUserImpl#enroll","MultiFactorUserImpl#unenroll","enrolledFactors.filter$argument_0","multiFactor","AuthInterop","AuthInterop#constructor","AuthInterop#getUid","AuthInterop#getToken","AuthInterop#addAuthTokenListener","auth.onIdTokenChanged$argument_0","AuthInterop#removeAuthTokenListener","AuthInterop#assertAuthConfigured","AuthInterop#updateProactiveRefresh","getVersionForPlatform","registerAuth","component.Component$argument_1","component.Component.setInstantiationMode.setInstanceCreatedCallback$argument_0","startSignInPhoneMfa","finalizeSignInPhoneMfa","finalizeSignInTotpMfa","_window","_setWindowLocation","_isWorker","_getActiveServiceWorker","_getServiceWorkerController","_getWorkerGlobalScope","ReCaptchaLoaderImpl","ReCaptchaLoaderImpl#constructor","ReCaptchaLoaderImpl#load","_window.setTimeout$argument_0","_window._JSLOAD_CALLBACK","recaptcha.render","_loadJS._catch$argument_0","ReCaptchaLoaderImpl#clearedOneInstance","ReCaptchaLoaderImpl#shouldResolveImmediately","isHostLanguageValid","MockReCaptchaLoaderImpl","MockReCaptchaLoaderImpl#load","MockReCaptchaLoaderImpl#clearedOneInstance","RecaptchaVerifier","RecaptchaVerifier#constructor","RecaptchaVerifier#verify","tokenChange","RecaptchaVerifier#render","makeRenderPromise._catch$argument_0","RecaptchaVerifier#_reset","RecaptchaVerifier#clear","container.childNodes.forEach$argument_0","RecaptchaVerifier#validateStartingState","RecaptchaVerifier#makeTokenCallback","tokenChangeListeners.forEach$argument_0","RecaptchaVerifier#assertNotDestroyed","RecaptchaVerifier#makeRenderPromise","RecaptchaVerifier#init","RecaptchaVerifier#getAssertedRecaptcha","domReady","resolver","Promise._catch$argument_0","ConfirmationResultImpl","ConfirmationResultImpl#constructor","ConfirmationResultImpl#confirm","signInWithPhoneNumber","ConfirmationResultImpl$argument_1","linkWithPhoneNumber","reauthenticateWithPhoneNumber","_verifyPhoneNumber","startEnrollPhoneMfaActionCallback","startPhoneMfaEnrollmentResponse._catch$argument_0","startSignInPhoneMfaActionCallback","startPhoneMfaSignInResponse._catch$argument_0","sendPhoneVerificationCodeActionCallback","sendPhoneVerificationCodeResponse._catch$argument_0","updatePhoneNumber","injectRecaptchaV2Token","PhoneAuthProvider","PhoneAuthProvider#constructor","PhoneAuthProvider#verifyPhoneNumber","PhoneAuthProvider.credential","PhoneAuthProvider.credentialFromResult","PhoneAuthProvider.credentialFromError","PhoneAuthProvider.credentialFromTaggedObject","MultiFactorAssertionImpl","MultiFactorAssertionImpl#constructor","MultiFactorAssertionImpl#_process","PhoneMultiFactorAssertionImpl","PhoneMultiFactorAssertionImpl#constructor","PhoneMultiFactorAssertionImpl._fromCredential","PhoneMultiFactorAssertionImpl#_finalizeEnroll","PhoneMultiFactorAssertionImpl#_finalizeSignIn","PhoneMultiFactorGenerator","PhoneMultiFactorGenerator#constructor","PhoneMultiFactorGenerator.assertion","TotpMultiFactorGenerator","TotpMultiFactorGenerator.assertionForEnrollment","TotpMultiFactorGenerator.assertionForSignIn","TotpMultiFactorGenerator.generateSecret","TotpMultiFactorAssertionImpl","TotpMultiFactorAssertionImpl#constructor","TotpMultiFactorAssertionImpl._fromSecret","TotpMultiFactorAssertionImpl._fromEnrollmentId","TotpMultiFactorAssertionImpl#_finalizeEnroll","TotpMultiFactorAssertionImpl#_finalizeSignIn","TotpSecret","TotpSecret#constructor","TotpSecret._fromStartTotpMfaEnrollmentResponse","TotpSecret#_makeTotpVerificationInfo","TotpSecret#generateQrCodeUrl","_isEmptyString"],"mappings":"AAA;ACuB;CDgK;AEC;CFS;AG0J;CHI;AIC;CJI;AKkB;CLE;AMC;CNE;AOC;CPS;AQC;CRE;ASC;CTS;AUC;CVU;AWC;CXI;AYO;CZS;AaQ;CbI;AckB;CdE;AeC;CfE;AgBC;ChBE;AiBqB;CjBe;AkBC;ClBa;AmBuB;ICC;KDM;IEC;KFU;CnBC;AsBkB;CtBO;AuBkB;ICC;KDQ;IEC;KFc;IGC;KHc;IIC;KJc;CvBC;A4ByH;C5BQ;A6BC;gECC;KDsC;C7BC;A+BC;C/BoD;AgCC;ChCQ;AiCC;CjCmB;AkCC;ClCW;AmCC;ICC;KDE;IEC;mCCM;oCCC;aDE;SDC;KFC;CnCC;AwCC;CxCc;AyCkB;CzCG;A0CC;C1CG;A2CC;ICC;KDe;IEO;KFY;IGO;KHI;IIO;KJG;C3CC;AgDkB;ChDE;AiDC;CjDE;AkDkB;ClDE;AmDC;CnDE;AoDC;CpDE;AqDkB;CrDiB;AsD8B;CtDE;AuDa;CvDgB;AwDC;CxDE;AyDC;CzDoB;A0DI;C1DM;A2DkB;C3De;A4DC;C5DG;A6DkB;ICC;KDS;IEC;KFM;IGC;KHQ;IIC;KJa;IKC;kC3BM;S2BE;KLC;IMC;KNa;C7DC;AoEkB;ICC;KDI;IEC;KFG;IGC;KHI;IIC;KJK;CpEC;AyEkB;CzEgC;A0EQ;C1EQ;A2EC;oCCC,mBC,kCD,CD;C3EE;A8EC;yBCC;KDS;C9EC;AgFkB;oElDC;KkDmB;ChFO;AiFC;CjFE;AkFwB;ICC;KDI;IEC;KFG;IGC;KHQ;IIC;KJI;IKC;KLU;IMC;KNE;IOC;KPG;IQC;KRI;ISC;KTsB;IUC;KVM;IWC;KXI;IYC;KZE;IaC;KbE;ClFC;AgGkB;ChGE;AiGC;ICC;KDmB;IEC;KFS;IGC;KHE;IIC;KJE;IKC;kDCY,6BD;KLG;IOC;KPQ;IQC;KRQ;ISC;KTQ;IUC;KVE;IWC;KXE;IYC;KZc;IaC;KbU;IcC;gDCU,6BD;KdY;IgBC;KhBE;IiBC;iDFsC,6BE;KjBM;IkBM;KlBa;ImBM;KnBgC;CjGC;AqHmB;CrHU;AsHkB;ICC;KDG;IEC;KFE;IGC;KHE;IIC;KJG;IKC;KLE;IMC;KNG;IOC;KPG;CtHC;A8HyB;C9HE;A+HC;ICC;KDS;IEC;KFE;IGC;sFCM,eD;KHO;IKC;KLE;IMC;KNE;IOC;KPU;IQC;KRE;ISC;kFCK;SDK,WE,0BF;iCLmB,eK;gEGoB,4BH;mDCc;SDO;KTE;C/HC;A4IqB;C5IiD;A6IC;C7IE;A8IC;C9IM;A+IC;C/IE;AgJC;ChJE;AiJC;CjJE;AkJC;ClJE;AmJC;CnJE;AoJC;CpJG;AqJC;CrJG;AsJC;CtJE;AuJC;CvJE;AwJC;CxJQ;AyJqB;CzJoB;A0JkB;ICC;KDG;IEC;gCCG,sBvH;SuHW,CD;eEK;gCCG,uBD;SFC;KFC;IMC;KNgC;C1JC;AiKyB;CjKE;AkKyB;ICC;KDoC;IEC;KFgB;IGO;KHS;IIO;KJmB;IKY;KLa;ClKC;AwKkB;ICC;wDnIuC,+DmI;KDC;IEC;iDCM;SD0B;KFE;III;KJqB;IKC;KLU;IMC;mCxIM;+BCC,2ED;iBwIC;8ECwC,uBD;KNoB;IQC;KR4B;ISC;KTa;IUC;KVE;IWC;KXE;IYC;KZa;IaC;0BVU;SUG;KbC;IcC;Kda;IeC;0BZI;SYE;KfC;IgBC;KhBO;IiBC;KjBa;IkBC;KlBO;ImBC;KnBS;IoBC;KpBE;IqBC;KrBE;IsBC;KtBE;IuBC;KvBE;IwBC;KxBE;IyBC;KzBE;I0BC;2B5JC;4D6JK;iB7JG;S4JE;K1BC;I4BI;K5Be;I6BC;K7BO;I8BC;K9BK;I+BC;K/BU;IgCC;6B7BI,e6B;KhCS;IiCC;8B9BE,6C8B;KjCE;IkCE;KlCI;ImCC;KnCE;IoCC;KpCK;IqCC;KrCK;IsCE;KtCE;IuCC;KvCU;IwCC;mBlDE,SkD;qBCY;SDK;mBlDG;akDG;mBlDI;akDG;KxCE;I0CM;K1Cc;I2CC;K3CK;I4CC;K5CG;I6CC;K7CS;I8CC;K9CE;I+CC;K/CuB;IgDC;KhDe;CxKC;AyNO;CzNE;A0NE;ICC;gDCG,sCD;KDC;IGC;KHG;C1NC;I8NmB;K9NE;A+NK;C/NE;AgOC;ChOE;AiOC;CjOE;AkOC;ClOE;AmOC;CnOE;AoOC;CpOE;AqOqB;ICC;KDI;IEC;KFK;IGC;KHI;IIC;KJG;IKC;KLI;CrOC;A2OC;ICC;KDE;IEC;KFE;IGC;KHI;IIC;KJI;C3OC;AgPC;ICC;KDE;IEC;KFI;IGC;KHI;ChPC;AoPC;ICC;4BCK;SDE;KDa;IGC;KHG;IIC;KJQ;IKC;yCCK;SDsB;KLC;IOC;KPI;CpPC;A4PC;C5PO;A6PK;ICM;KDM;IEM;QCC;+B1NU;0B2NK;iB3Nc;2B4NC;iB5NE;a0NC;SDC;QIC;4CCG;8BCG;qBDE;+BEC;qBFE;iBDC;SJK;2BzNM;sBiOE;8BCc;qBDE;+BEC;qBFE;ajOE;uBoOC;apOE;SyNC;KFC;C7PC;A2QC;C3QsD;A4QC;6DCS;aDS;0ECQ;aDoB;C5Qc;A8QC;C9QiB;A+Q2C;C/Qc;AgRC;ChRU;AiRwB;CjRuC;AkRC;ClRG;AmRC;CnRgB;AoRC;CpRS;AqRC;ICC;KDiB;CrRc;AuR0B;ICE;KDmB;IEM;KFE;IGE;KHE;IIE;KJE;IKE;KLE;CvRC;A6RkB;C7RE;A8RC;C9RE;A+RG;C/RE;AgSC;ChSE;AiSkB;CjSE;AkSC;ClSE;AmSC;CnSE;AoSC;CpSE;AqSC;CrSE;AsSC;CtSE;AuSkB;CvSE;AwSC;CxSE;AyS4B;ICE;KDW;IEE;KFE;IGE;KHE;IIE;KJO;IKS;KLW;IME;KNkB;IOE;KPoB;IQE;KRE;CzSC;AkTkB;ClTE;AmT2B;ICC;KDG;IEE;KF2B;IGE;KHU;IIU;KJa;IKE;KLG;IME;KNI;IOE;KPI;IQC;KR0B;CnTC;A4TkB;C5TE;A6TC;C7TE;A8TC;C9TM;A+TI;C/TM;AgUuB;ICC;KDG;IEE;KFE;IGE;KHE;IIE;KJE;IKE;KLK;IME;KNE;IOE;KPS;IQE;KRiB;ISE;KTiB;ChUC;A0UuB;C1UiB;A2UM;C3UY;A4UO;ICO;KDa;IEU;KFQ;C5UC;A+UO;C/UE;AgVuB;ICC;KDK;IEmB;KFE;IGuB;KHI;ChVC;AoVqC;ICM;KDM;IEM;KFE;IGW;KHG;III;KJE;CpVC;AyVwB;ICC;KDI;IEM;KFM;IGI;KHE;CzVC;A6VyC;ICK;KDI;IEsB;KFE;IGE;KHQ;IIM;KJE;IKO;KLE;IMC;KNyB;C7VC;AoWyD;ICC;KDE;IEa;KFM;IGM;KHE;IIO;KJE;IKC;KLa;CpWC;A0W+D;ICC;KDG;IEc;KFO;IGM;KHE;IIO;KJE;IKC;KLe;C1WC;AgXgE;ICC;KDE;IEM;KFM;IGM;KHE;IIO;KJE;IKC;KLa;ChXC;AsX0B;ICE;KDG;IEE;KFG;IGE;KHI;IIE;KJI;IKE;KLM;IMU;KNU;IOM;KPE;IQC;KRM;CtXC;A+XwB;ICK;KDG;IEiB;KFE;IGO;KHE;IIK;KJI;IKC;KLc;C/XC;AqYyD;ICC;KDE;IEO;KFO;IGM;KHE;IIO;KJE;IKC;KLc;CrYC;A2YsB;C3YE;A4YkB;ICC;KDK;IEC;KFU;IGC;KHS;C5YC;AgZC;ChZQ;AiZgC;CjZoB;AkZkB;ICC;KDY;IEC;KFE;ClZC;AqZC;iCCI;KDK;CrZC;AuZqB;avSE,8BuS;gBCC,YD;CvZC;AyZ0B;iECQ,sCD;CzZM;A2ZC;C3ZG;A4ZC;C5ZO;A6ZkB;C7ZsB;A8ZkB;C9ZW;A+Ze;C/ZE;AgaY;ChaI;AiaiB;CjaE;AkakB;ClaE;AmaqC;CnaY;AoakB;ICC;KDK;IEC;KFQ;CpaC;AuaC;ICC;KDG;IEC;KFE;CvaC;A0aC;ICC;KDE;IEC;KFE;C1aC;A6akB;C7aqB;A8a+B;C9aK;A+aoC;C/aW;AgbU;eCK;KDM;ChbE;AkbS;ClbE;AmbW;CnbwC;AobW;CpbI;AqbqB;gDCY;KDK;CrbI;AubwB;oHCI;KDK;CvbC;AybwD;ICO;KDK;CzbG;A2bS;C3bG;A4b0C;C5bU;A6bkB;C7bE;A8bsC;C9bW;A+b+B;C/bc;AgcmC;ChciB;AickB;CjcE;Akc0B;4DCgB,6CD;ClcM;AocyB;CpcM;Aqcc;CrcE;AscC;Ctce;AucsB;CvcuC;AwcC;ICC;KDI;CxcC;A0cC;ICC;KDG;C1cC;A4cC;ICC;KDE;C5cC;A8cC;ICC;KDE;C9cC;AgdC;ICC;KDE;ChdC;AkdC;ICC;KDE;CldC;AodQ;CpdY;Aqd2C;CrdE;Asd4B;CtdE;AudwB;CvdG;AwdiB;CxdE;AydW;CzdE;A0dgB;C1dE;A2dQ;C3dE;A4dsB;C5dE;A6dY;C7dE;A8dS;C9dG;A+da;C/dE;AgekB;ICC;KDI;IEC;KFE;IGC;KHE;IIC;KJS;IKC;KLU;CheC;AsekB;ICC;KDI;IEE;yDCG,uED;2DEG;SFuB;KFC;IKC;KLG;CteC;A4eW;C5eM;A6ekB;C7eE;A8eC;C9eE;A+eC;C/eE;AgfC;ChfE;AifC;CjfE;AkfE;ICC;uBCG;4DCE,4ED;SDE;KDC;IIC;KJE;IKC;KLE;IMC;KNW;IOC;+DCS,oCD;KPW;ClfC;A2fY;C3fM;A4fqB;ICC;KDG;IEC;KFG;IGC;KHQ;IIC;uDCK;SDE;KJG;IMC;KNS;IOC;KPE;IQC;KRO;C5fC;AqgBkB;CrgBe;AsgBE;qFCC;KDkB;oCEU;KFG;uGCC;gBzWE,6ByW;KDC;CtgBI;AygBqH;CzgBE;A0gBC;C1gBE;A2gBC;C3gBE;A4gBsB;C5gBE;A6gBC;C7gBE;A8gBkB;C9gBG;A+gBC;C/gBW;AghBC;ChhBE;AihBC;CjhBE;AkhByB;ICC;KDS;IEC;2B9eK;wD+eC;a/eE;0CgfC;mCCW;iBDI;ahfG;+BkfM;alfG;S8eC;KFC;IOC;KPE;IQC;KRY;ClhBC;A2hBC;C3hBE;A4hBC;ICC;KDE;IEC,wBF;C5hBC;A+hB+B;ICoB;KD8B;IEM;2B3fQ;gC4fC;a5fM;S2fK;KFC;IIM;4DCa;SDG;KJE;IME;KNK;IOI;8CCK;aDE;KPE;ISC;KTI;IUC;e3YC;8C4YC,2B5Y;S2YU;KVC;IYC;KZE;IaC;KbY;IcC;KdO;IeC;KfG;C/hBC;A+iBC;uBzgBE;mB0gBQ,e1gB;KygBE,QE;KFK;C/iBC;AkjBkB;ICC;KDG;IEC;KFG;CljBC;AqjBqC;sDCM,gDD;CrjBC;AujBa;sDDI,8CC;CvjBC;AwjBgB;sDFM,wDE;CxjBC;AyjBK;0DCkC;iBDQ;6EEE;iBFE;0DGe;iBHQ;yEIE;iBJE;4DKS;aLQ;2EME;aNE;CzjBO;AgkBwB;ChkBM;AikBE;CjkByC;AkkBqC;ICK;KDI;IEkC;KFE;IG4B;KHE;IIK;KJG;IKiC;KLE;IMC;KNS;ClkBC;AykBM;ICC;KDE;IEC;KFS;CzkBC;A4kBO;ICC;KDG;IEE;KFE;IGE;KHM;IIE;KJK;C5kBC;AilBM;ICC,iBD;IEW;KFE;CjlBC;AolBW;ICW;KDE;IEU;KFE;IGU;KHQ;CplBC;AwlBK;ICC;KDK;IEE;KFE;IGE;KHE;IIE;KJO;IKE;KLQ;CxlBC;A8lBQ;ICE;KDQ;IEE;KFE;IGE;KHE;IIW;KJc;C9lBC;AmmBE;CnmBE"}},"type":"js/module"}]}