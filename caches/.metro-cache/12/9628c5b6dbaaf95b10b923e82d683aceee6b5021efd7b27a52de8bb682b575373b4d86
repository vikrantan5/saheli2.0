{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.createNotifyManager = createNotifyManager;\n  exports.notifyManager = exports.defaultScheduler = void 0;\n  // src/notifyManager.ts\n  var defaultScheduler = cb => setTimeout(cb, 0);\n  exports.defaultScheduler = defaultScheduler;\n  function createNotifyManager() {\n    let queue = [];\n    let transactions = 0;\n    let notifyFn = callback => {\n      callback();\n    };\n    let batchNotifyFn = callback => {\n      callback();\n    };\n    let scheduleFn = defaultScheduler;\n    const schedule = callback => {\n      if (transactions) {\n        queue.push(callback);\n      } else {\n        scheduleFn(() => {\n          notifyFn(callback);\n        });\n      }\n    };\n    const flush = () => {\n      const originalQueue = queue;\n      queue = [];\n      if (originalQueue.length) {\n        scheduleFn(() => {\n          batchNotifyFn(() => {\n            originalQueue.forEach(callback => {\n              notifyFn(callback);\n            });\n          });\n        });\n      }\n    };\n    return {\n      batch: callback => {\n        let result;\n        transactions++;\n        try {\n          result = callback();\n        } finally {\n          transactions--;\n          if (!transactions) {\n            flush();\n          }\n        }\n        return result;\n      },\n      /**\n       * All calls to the wrapped function will be batched.\n       */\n      batchCalls: callback => {\n        return (...args) => {\n          schedule(() => {\n            callback(...args);\n          });\n        };\n      },\n      schedule,\n      /**\n       * Use this method to set a custom notify function.\n       * This can be used to for example wrap notifications with `React.act` while running tests.\n       */\n      setNotifyFunction: fn => {\n        notifyFn = fn;\n      },\n      /**\n       * Use this method to set a custom function to batch notifications together into a single tick.\n       * By default React Query will use the batch function provided by ReactDOM or React Native.\n       */\n      setBatchNotifyFunction: fn => {\n        batchNotifyFn = fn;\n      },\n      setScheduler: fn => {\n        scheduleFn = fn;\n      }\n    };\n  }\n  var notifyManager = exports.notifyManager = createNotifyManager();\n});","lineCount":87,"map":[[7,2,1,0],[8,2,2,0],[8,6,2,4,"defaultScheduler"],[8,22,2,20],[8,25,2,24,"cb"],[8,27,2,26],[8,31,2,31,"setTimeout"],[8,41,2,41],[8,42,2,42,"cb"],[8,44,2,44],[8,46,2,46],[8,47,2,47],[8,48,2,48],[9,2,2,49,"exports"],[9,9,2,49],[9,10,2,49,"defaultScheduler"],[9,26,2,49],[9,29,2,49,"defaultScheduler"],[9,45,2,49],[10,2,3,0],[10,11,3,9,"createNotifyManager"],[10,30,3,28,"createNotifyManager"],[10,31,3,28],[10,33,3,31],[11,4,4,2],[11,8,4,6,"queue"],[11,13,4,11],[11,16,4,14],[11,18,4,16],[12,4,5,2],[12,8,5,6,"transactions"],[12,20,5,18],[12,23,5,21],[12,24,5,22],[13,4,6,2],[13,8,6,6,"notifyFn"],[13,16,6,14],[13,19,6,18,"callback"],[13,27,6,26],[13,31,6,31],[14,6,7,4,"callback"],[14,14,7,12],[14,15,7,13],[14,16,7,14],[15,4,8,2],[15,5,8,3],[16,4,9,2],[16,8,9,6,"batchNotifyFn"],[16,21,9,19],[16,24,9,23,"callback"],[16,32,9,31],[16,36,9,36],[17,6,10,4,"callback"],[17,14,10,12],[17,15,10,13],[17,16,10,14],[18,4,11,2],[18,5,11,3],[19,4,12,2],[19,8,12,6,"scheduleFn"],[19,18,12,16],[19,21,12,19,"defaultScheduler"],[19,37,12,35],[20,4,13,2],[20,10,13,8,"schedule"],[20,18,13,16],[20,21,13,20,"callback"],[20,29,13,28],[20,33,13,33],[21,6,14,4],[21,10,14,8,"transactions"],[21,22,14,20],[21,24,14,22],[22,8,15,6,"queue"],[22,13,15,11],[22,14,15,12,"push"],[22,18,15,16],[22,19,15,17,"callback"],[22,27,15,25],[22,28,15,26],[23,6,16,4],[23,7,16,5],[23,13,16,11],[24,8,17,6,"scheduleFn"],[24,18,17,16],[24,19,17,17],[24,25,17,23],[25,10,18,8,"notifyFn"],[25,18,18,16],[25,19,18,17,"callback"],[25,27,18,25],[25,28,18,26],[26,8,19,6],[26,9,19,7],[26,10,19,8],[27,6,20,4],[28,4,21,2],[28,5,21,3],[29,4,22,2],[29,10,22,8,"flush"],[29,15,22,13],[29,18,22,16,"flush"],[29,19,22,16],[29,24,22,22],[30,6,23,4],[30,12,23,10,"originalQueue"],[30,25,23,23],[30,28,23,26,"queue"],[30,33,23,31],[31,6,24,4,"queue"],[31,11,24,9],[31,14,24,12],[31,16,24,14],[32,6,25,4],[32,10,25,8,"originalQueue"],[32,23,25,21],[32,24,25,22,"length"],[32,30,25,28],[32,32,25,30],[33,8,26,6,"scheduleFn"],[33,18,26,16],[33,19,26,17],[33,25,26,23],[34,10,27,8,"batchNotifyFn"],[34,23,27,21],[34,24,27,22],[34,30,27,28],[35,12,28,10,"originalQueue"],[35,25,28,23],[35,26,28,24,"forEach"],[35,33,28,31],[35,34,28,33,"callback"],[35,42,28,41],[35,46,28,46],[36,14,29,12,"notifyFn"],[36,22,29,20],[36,23,29,21,"callback"],[36,31,29,29],[36,32,29,30],[37,12,30,10],[37,13,30,11],[37,14,30,12],[38,10,31,8],[38,11,31,9],[38,12,31,10],[39,8,32,6],[39,9,32,7],[39,10,32,8],[40,6,33,4],[41,4,34,2],[41,5,34,3],[42,4,35,2],[42,11,35,9],[43,6,36,4,"batch"],[43,11,36,9],[43,13,36,12,"callback"],[43,21,36,20],[43,25,36,25],[44,8,37,6],[44,12,37,10,"result"],[44,18,37,16],[45,8,38,6,"transactions"],[45,20,38,18],[45,22,38,20],[46,8,39,6],[46,12,39,10],[47,10,40,8,"result"],[47,16,40,14],[47,19,40,17,"callback"],[47,27,40,25],[47,28,40,26],[47,29,40,27],[48,8,41,6],[48,9,41,7],[48,18,41,16],[49,10,42,8,"transactions"],[49,22,42,20],[49,24,42,22],[50,10,43,8],[50,14,43,12],[50,15,43,13,"transactions"],[50,27,43,25],[50,29,43,27],[51,12,44,10,"flush"],[51,17,44,15],[51,18,44,16],[51,19,44,17],[52,10,45,8],[53,8,46,6],[54,8,47,6],[54,15,47,13,"result"],[54,21,47,19],[55,6,48,4],[55,7,48,5],[56,6,49,4],[57,0,50,0],[58,0,51,0],[59,6,52,4,"batchCalls"],[59,16,52,14],[59,18,52,17,"callback"],[59,26,52,25],[59,30,52,30],[60,8,53,6],[60,15,53,13],[60,16,53,14],[60,19,53,17,"args"],[60,23,53,21],[60,28,53,26],[61,10,54,8,"schedule"],[61,18,54,16],[61,19,54,17],[61,25,54,23],[62,12,55,10,"callback"],[62,20,55,18],[62,21,55,19],[62,24,55,22,"args"],[62,28,55,26],[62,29,55,27],[63,10,56,8],[63,11,56,9],[63,12,56,10],[64,8,57,6],[64,9,57,7],[65,6,58,4],[65,7,58,5],[66,6,59,4,"schedule"],[66,14,59,12],[67,6,60,4],[68,0,61,0],[69,0,62,0],[70,0,63,0],[71,6,64,4,"setNotifyFunction"],[71,23,64,21],[71,25,64,24,"fn"],[71,27,64,26],[71,31,64,31],[72,8,65,6,"notifyFn"],[72,16,65,14],[72,19,65,17,"fn"],[72,21,65,19],[73,6,66,4],[73,7,66,5],[74,6,67,4],[75,0,68,0],[76,0,69,0],[77,0,70,0],[78,6,71,4,"setBatchNotifyFunction"],[78,28,71,26],[78,30,71,29,"fn"],[78,32,71,31],[78,36,71,36],[79,8,72,6,"batchNotifyFn"],[79,21,72,19],[79,24,72,22,"fn"],[79,26,72,24],[80,6,73,4],[80,7,73,5],[81,6,74,4,"setScheduler"],[81,18,74,16],[81,20,74,19,"fn"],[81,22,74,21],[81,26,74,26],[82,8,75,6,"scheduleFn"],[82,18,75,16],[82,21,75,19,"fn"],[82,23,75,21],[83,6,76,4],[84,4,77,2],[84,5,77,3],[85,2,78,0],[86,2,79,0],[86,6,79,4,"notifyManager"],[86,19,79,17],[86,22,79,17,"exports"],[86,29,79,17],[86,30,79,17,"notifyManager"],[86,43,79,17],[86,46,79,20,"createNotifyManager"],[86,65,79,39],[86,66,79,40],[86,67,79,41],[87,0,79,42],[87,3]],"functionMap":{"names":["<global>","defaultScheduler","createNotifyManager","notifyFn","batchNotifyFn","schedule","scheduleFn$argument_0","flush","batchNotifyFn$argument_0","originalQueue.forEach$argument_0","batch","batchCalls","<anonymous>","schedule$argument_0","setNotifyFunction","setBatchNotifyFunction","setScheduler"],"mappings":"AAA;uBCC,yBD;AEC;iBCG;GDE;sBEC;GFE;mBGE;iBCI;ODE;GHE;gBKC;iBDI;sBEC;gCCC;WDE;SFC;OCC;GLE;WQE;KRY;gBSI;aCC;iBCC;SDE;ODC;KTC;uBYM;KZE;4BaK;KbE;kBcC;KdE;CFE"}},"type":"js/module"}]}