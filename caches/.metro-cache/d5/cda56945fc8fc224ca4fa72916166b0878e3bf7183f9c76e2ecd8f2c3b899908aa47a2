{"dependencies":[{"name":"tslib","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":16,"index":93},"end":{"line":3,"column":32,"index":109}}],"key":"vm88vOsSPZItrLOmMEyUuGkd1y4=","exportNames":["*"]}},{"name":"./PostgrestBuilder","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":51,"index":162},"end":{"line":4,"column":80,"index":191}}],"key":"v25p5H95xQ2bcPoR7FGoD/7jboE=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  const tslib_1 = require(_dependencyMap[0], \"tslib\");\n  const PostgrestBuilder_1 = tslib_1.__importDefault(require(_dependencyMap[1], \"./PostgrestBuilder\"));\n  class PostgrestTransformBuilder extends PostgrestBuilder_1.default {\n    /**\n     * Perform a SELECT on the query result.\n     *\n     * By default, `.insert()`, `.update()`, `.upsert()`, and `.delete()` do not\n     * return modified rows. By calling this method, modified rows are returned in\n     * `data`.\n     *\n     * @param columns - The columns to retrieve, separated by commas\n     */\n    select(columns) {\n      // Remove whitespaces except when quoted\n      let quoted = false;\n      const cleanedColumns = (columns !== null && columns !== void 0 ? columns : '*').split('').map(c => {\n        if (/\\s/.test(c) && !quoted) {\n          return '';\n        }\n        if (c === '\"') {\n          quoted = !quoted;\n        }\n        return c;\n      }).join('');\n      this.url.searchParams.set('select', cleanedColumns);\n      this.headers.append('Prefer', 'return=representation');\n      return this;\n    }\n    /**\n     * Order the query result by `column`.\n     *\n     * You can call this method multiple times to order by multiple columns.\n     *\n     * You can order referenced tables, but it only affects the ordering of the\n     * parent table if you use `!inner` in the query.\n     *\n     * @param column - The column to order by\n     * @param options - Named parameters\n     * @param options.ascending - If `true`, the result will be in ascending order\n     * @param options.nullsFirst - If `true`, `null`s appear first. If `false`,\n     * `null`s appear last.\n     * @param options.referencedTable - Set this to order a referenced table by\n     * its columns\n     * @param options.foreignTable - Deprecated, use `options.referencedTable`\n     * instead\n     */\n    order(column, {\n      ascending = true,\n      nullsFirst,\n      foreignTable,\n      referencedTable = foreignTable\n    } = {}) {\n      const key = referencedTable ? `${referencedTable}.order` : 'order';\n      const existingOrder = this.url.searchParams.get(key);\n      this.url.searchParams.set(key, `${existingOrder ? `${existingOrder},` : ''}${column}.${ascending ? 'asc' : 'desc'}${nullsFirst === undefined ? '' : nullsFirst ? '.nullsfirst' : '.nullslast'}`);\n      return this;\n    }\n    /**\n     * Limit the query result by `count`.\n     *\n     * @param count - The maximum number of rows to return\n     * @param options - Named parameters\n     * @param options.referencedTable - Set this to limit rows of referenced\n     * tables instead of the parent table\n     * @param options.foreignTable - Deprecated, use `options.referencedTable`\n     * instead\n     */\n    limit(count, {\n      foreignTable,\n      referencedTable = foreignTable\n    } = {}) {\n      const key = typeof referencedTable === 'undefined' ? 'limit' : `${referencedTable}.limit`;\n      this.url.searchParams.set(key, `${count}`);\n      return this;\n    }\n    /**\n     * Limit the query result by starting at an offset `from` and ending at the offset `to`.\n     * Only records within this range are returned.\n     * This respects the query order and if there is no order clause the range could behave unexpectedly.\n     * The `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third\n     * and fourth rows of the query.\n     *\n     * @param from - The starting index from which to limit the result\n     * @param to - The last index to which to limit the result\n     * @param options - Named parameters\n     * @param options.referencedTable - Set this to limit rows of referenced\n     * tables instead of the parent table\n     * @param options.foreignTable - Deprecated, use `options.referencedTable`\n     * instead\n     */\n    range(from, to, {\n      foreignTable,\n      referencedTable = foreignTable\n    } = {}) {\n      const keyOffset = typeof referencedTable === 'undefined' ? 'offset' : `${referencedTable}.offset`;\n      const keyLimit = typeof referencedTable === 'undefined' ? 'limit' : `${referencedTable}.limit`;\n      this.url.searchParams.set(keyOffset, `${from}`);\n      // Range is inclusive, so add 1\n      this.url.searchParams.set(keyLimit, `${to - from + 1}`);\n      return this;\n    }\n    /**\n     * Set the AbortSignal for the fetch request.\n     *\n     * @param signal - The AbortSignal to use for the fetch request\n     */\n    abortSignal(signal) {\n      this.signal = signal;\n      return this;\n    }\n    /**\n     * Return `data` as a single object instead of an array of objects.\n     *\n     * Query result must be one row (e.g. using `.limit(1)`), otherwise this\n     * returns an error.\n     */\n    single() {\n      this.headers.set('Accept', 'application/vnd.pgrst.object+json');\n      return this;\n    }\n    /**\n     * Return `data` as a single object instead of an array of objects.\n     *\n     * Query result must be zero or one row (e.g. using `.limit(1)`), otherwise\n     * this returns an error.\n     */\n    maybeSingle() {\n      // Temporary partial fix for https://github.com/supabase/postgrest-js/issues/361\n      // Issue persists e.g. for `.insert([...]).select().maybeSingle()`\n      if (this.method === 'GET') {\n        this.headers.set('Accept', 'application/json');\n      } else {\n        this.headers.set('Accept', 'application/vnd.pgrst.object+json');\n      }\n      this.isMaybeSingle = true;\n      return this;\n    }\n    /**\n     * Return `data` as a string in CSV format.\n     */\n    csv() {\n      this.headers.set('Accept', 'text/csv');\n      return this;\n    }\n    /**\n     * Return `data` as an object in [GeoJSON](https://geojson.org) format.\n     */\n    geojson() {\n      this.headers.set('Accept', 'application/geo+json');\n      return this;\n    }\n    /**\n     * Return `data` as the EXPLAIN plan for the query.\n     *\n     * You need to enable the\n     * [db_plan_enabled](https://supabase.com/docs/guides/database/debugging-performance#enabling-explain)\n     * setting before using this method.\n     *\n     * @param options - Named parameters\n     *\n     * @param options.analyze - If `true`, the query will be executed and the\n     * actual run time will be returned\n     *\n     * @param options.verbose - If `true`, the query identifier will be returned\n     * and `data` will include the output columns of the query\n     *\n     * @param options.settings - If `true`, include information on configuration\n     * parameters that affect query planning\n     *\n     * @param options.buffers - If `true`, include information on buffer usage\n     *\n     * @param options.wal - If `true`, include information on WAL record generation\n     *\n     * @param options.format - The format of the output, can be `\"text\"` (default)\n     * or `\"json\"`\n     */\n    explain({\n      analyze = false,\n      verbose = false,\n      settings = false,\n      buffers = false,\n      wal = false,\n      format = 'text'\n    } = {}) {\n      var _a;\n      const options = [analyze ? 'analyze' : null, verbose ? 'verbose' : null, settings ? 'settings' : null, buffers ? 'buffers' : null, wal ? 'wal' : null].filter(Boolean).join('|');\n      // An Accept header can carry multiple media types but postgrest-js always sends one\n      const forMediatype = (_a = this.headers.get('Accept')) !== null && _a !== void 0 ? _a : 'application/json';\n      this.headers.set('Accept', `application/vnd.pgrst.plan+${format}; for=\"${forMediatype}\"; options=${options};`);\n      if (format === 'json') {\n        return this;\n      } else {\n        return this;\n      }\n    }\n    /**\n     * Rollback the query.\n     *\n     * `data` will still be returned, but the query is not committed.\n     */\n    rollback() {\n      this.headers.append('Prefer', 'tx=rollback');\n      return this;\n    }\n    /**\n     * Override the type of the returned `data`.\n     *\n     * @typeParam NewResult - The new result type to override with\n     * @deprecated Use overrideTypes<yourType, { merge: false }>() method at the end of your call chain instead\n     */\n    returns() {\n      return this;\n    }\n    /**\n     * Set the maximum number of rows that can be affected by the query.\n     * Only available in PostgREST v13+ and only works with PATCH and DELETE methods.\n     *\n     * @param value - The maximum number of rows that can be affected\n     */\n    maxAffected(value) {\n      this.headers.append('Prefer', 'handling=strict');\n      this.headers.append('Prefer', `max-affected=${value}`);\n      return this;\n    }\n  }\n  exports.default = PostgrestTransformBuilder;\n});","lineCount":233,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0],[7,8,3,6,"tslib_1"],[7,15,3,13],[7,18,3,16,"require"],[7,25,3,23],[7,26,3,23,"_dependencyMap"],[7,40,3,23],[7,52,3,31],[7,53,3,32],[8,2,4,0],[8,8,4,6,"PostgrestBuilder_1"],[8,26,4,24],[8,29,4,27,"tslib_1"],[8,36,4,34],[8,37,4,35,"__importDefault"],[8,52,4,50],[8,53,4,51,"require"],[8,60,4,58],[8,61,4,58,"_dependencyMap"],[8,75,4,58],[8,100,4,79],[8,101,4,80],[8,102,4,81],[9,2,5,0],[9,8,5,6,"PostgrestTransformBuilder"],[9,33,5,31],[9,42,5,40,"PostgrestBuilder_1"],[9,60,5,58],[9,61,5,59,"default"],[9,68,5,66],[9,69,5,67],[10,4,6,4],[11,0,7,0],[12,0,8,0],[13,0,9,0],[14,0,10,0],[15,0,11,0],[16,0,12,0],[17,0,13,0],[18,0,14,0],[19,4,15,4,"select"],[19,10,15,10,"select"],[19,11,15,11,"columns"],[19,18,15,18],[19,20,15,20],[20,6,16,8],[21,6,17,8],[21,10,17,12,"quoted"],[21,16,17,18],[21,19,17,21],[21,24,17,26],[22,6,18,8],[22,12,18,14,"cleanedColumns"],[22,26,18,28],[22,29,18,31],[22,30,18,32,"columns"],[22,37,18,39],[22,42,18,44],[22,46,18,48],[22,50,18,52,"columns"],[22,57,18,59],[22,62,18,64],[22,67,18,69],[22,68,18,70],[22,71,18,73,"columns"],[22,78,18,80],[22,81,18,83],[22,84,18,86],[22,86,19,13,"split"],[22,91,19,18],[22,92,19,19],[22,94,19,21],[22,95,19,22],[22,96,20,13,"map"],[22,99,20,16],[22,100,20,18,"c"],[22,101,20,19],[22,105,20,24],[23,8,21,12],[23,12,21,16],[23,16,21,20],[23,17,21,21,"test"],[23,21,21,25],[23,22,21,26,"c"],[23,23,21,27],[23,24,21,28],[23,28,21,32],[23,29,21,33,"quoted"],[23,35,21,39],[23,37,21,41],[24,10,22,16],[24,17,22,23],[24,19,22,25],[25,8,23,12],[26,8,24,12],[26,12,24,16,"c"],[26,13,24,17],[26,18,24,22],[26,21,24,25],[26,23,24,27],[27,10,25,16,"quoted"],[27,16,25,22],[27,19,25,25],[27,20,25,26,"quoted"],[27,26,25,32],[28,8,26,12],[29,8,27,12],[29,15,27,19,"c"],[29,16,27,20],[30,6,28,8],[30,7,28,9],[30,8,28,10],[30,9,29,13,"join"],[30,13,29,17],[30,14,29,18],[30,16,29,20],[30,17,29,21],[31,6,30,8],[31,10,30,12],[31,11,30,13,"url"],[31,14,30,16],[31,15,30,17,"searchParams"],[31,27,30,29],[31,28,30,30,"set"],[31,31,30,33],[31,32,30,34],[31,40,30,42],[31,42,30,44,"cleanedColumns"],[31,56,30,58],[31,57,30,59],[32,6,31,8],[32,10,31,12],[32,11,31,13,"headers"],[32,18,31,20],[32,19,31,21,"append"],[32,25,31,27],[32,26,31,28],[32,34,31,36],[32,36,31,38],[32,59,31,61],[32,60,31,62],[33,6,32,8],[33,13,32,15],[33,17,32,19],[34,4,33,4],[35,4,34,4],[36,0,35,0],[37,0,36,0],[38,0,37,0],[39,0,38,0],[40,0,39,0],[41,0,40,0],[42,0,41,0],[43,0,42,0],[44,0,43,0],[45,0,44,0],[46,0,45,0],[47,0,46,0],[48,0,47,0],[49,0,48,0],[50,0,49,0],[51,0,50,0],[52,0,51,0],[53,4,52,4,"order"],[53,9,52,9,"order"],[53,10,52,10,"column"],[53,16,52,16],[53,18,52,18],[54,6,52,20,"ascending"],[54,15,52,29],[54,18,52,32],[54,22,52,36],[55,6,52,38,"nullsFirst"],[55,16,52,48],[56,6,52,50,"foreignTable"],[56,18,52,62],[57,6,52,64,"referencedTable"],[57,21,52,79],[57,24,52,82,"foreignTable"],[58,4,52,96],[58,5,52,97],[58,8,52,100],[58,9,52,101],[58,10,52,102],[58,12,52,104],[59,6,53,8],[59,12,53,14,"key"],[59,15,53,17],[59,18,53,20,"referencedTable"],[59,33,53,35],[59,36,53,38],[59,39,53,41,"referencedTable"],[59,54,53,56],[59,62,53,64],[59,65,53,67],[59,72,53,74],[60,6,54,8],[60,12,54,14,"existingOrder"],[60,25,54,27],[60,28,54,30],[60,32,54,34],[60,33,54,35,"url"],[60,36,54,38],[60,37,54,39,"searchParams"],[60,49,54,51],[60,50,54,52,"get"],[60,53,54,55],[60,54,54,56,"key"],[60,57,54,59],[60,58,54,60],[61,6,55,8],[61,10,55,12],[61,11,55,13,"url"],[61,14,55,16],[61,15,55,17,"searchParams"],[61,27,55,29],[61,28,55,30,"set"],[61,31,55,33],[61,32,55,34,"key"],[61,35,55,37],[61,37,55,39],[61,40,55,42,"existingOrder"],[61,53,55,55],[61,56,55,58],[61,59,55,61,"existingOrder"],[61,72,55,74],[61,75,55,77],[61,78,55,80],[61,80,55,82],[61,83,55,85,"column"],[61,89,55,91],[61,93,55,95,"ascending"],[61,102,55,104],[61,105,55,107],[61,110,55,112],[61,113,55,115],[61,119,55,121],[61,122,55,124,"nullsFirst"],[61,132,55,134],[61,137,55,139,"undefined"],[61,146,55,148],[61,149,55,151],[61,151,55,153],[61,154,55,156,"nullsFirst"],[61,164,55,166],[61,167,55,169],[61,180,55,182],[61,183,55,185],[61,195,55,197],[61,197,55,199],[61,198,55,200],[62,6,56,8],[62,13,56,15],[62,17,56,19],[63,4,57,4],[64,4,58,4],[65,0,59,0],[66,0,60,0],[67,0,61,0],[68,0,62,0],[69,0,63,0],[70,0,64,0],[71,0,65,0],[72,0,66,0],[73,0,67,0],[74,4,68,4,"limit"],[74,9,68,9,"limit"],[74,10,68,10,"count"],[74,15,68,15],[74,17,68,17],[75,6,68,19,"foreignTable"],[75,18,68,31],[76,6,68,33,"referencedTable"],[76,21,68,48],[76,24,68,51,"foreignTable"],[77,4,68,65],[77,5,68,66],[77,8,68,69],[77,9,68,70],[77,10,68,71],[77,12,68,73],[78,6,69,8],[78,12,69,14,"key"],[78,15,69,17],[78,18,69,20],[78,25,69,27,"referencedTable"],[78,40,69,42],[78,45,69,47],[78,56,69,58],[78,59,69,61],[78,66,69,68],[78,69,69,71],[78,72,69,74,"referencedTable"],[78,87,69,89],[78,95,69,97],[79,6,70,8],[79,10,70,12],[79,11,70,13,"url"],[79,14,70,16],[79,15,70,17,"searchParams"],[79,27,70,29],[79,28,70,30,"set"],[79,31,70,33],[79,32,70,34,"key"],[79,35,70,37],[79,37,70,39],[79,40,70,42,"count"],[79,45,70,47],[79,47,70,49],[79,48,70,50],[80,6,71,8],[80,13,71,15],[80,17,71,19],[81,4,72,4],[82,4,73,4],[83,0,74,0],[84,0,75,0],[85,0,76,0],[86,0,77,0],[87,0,78,0],[88,0,79,0],[89,0,80,0],[90,0,81,0],[91,0,82,0],[92,0,83,0],[93,0,84,0],[94,0,85,0],[95,0,86,0],[96,0,87,0],[97,4,88,4,"range"],[97,9,88,9,"range"],[97,10,88,10,"from"],[97,14,88,14],[97,16,88,16,"to"],[97,18,88,18],[97,20,88,20],[98,6,88,22,"foreignTable"],[98,18,88,34],[99,6,88,36,"referencedTable"],[99,21,88,51],[99,24,88,54,"foreignTable"],[100,4,88,68],[100,5,88,69],[100,8,88,72],[100,9,88,73],[100,10,88,74],[100,12,88,76],[101,6,89,8],[101,12,89,14,"keyOffset"],[101,21,89,23],[101,24,89,26],[101,31,89,33,"referencedTable"],[101,46,89,48],[101,51,89,53],[101,62,89,64],[101,65,89,67],[101,73,89,75],[101,76,89,78],[101,79,89,81,"referencedTable"],[101,94,89,96],[101,103,89,105],[102,6,90,8],[102,12,90,14,"keyLimit"],[102,20,90,22],[102,23,90,25],[102,30,90,32,"referencedTable"],[102,45,90,47],[102,50,90,52],[102,61,90,63],[102,64,90,66],[102,71,90,73],[102,74,90,76],[102,77,90,79,"referencedTable"],[102,92,90,94],[102,100,90,102],[103,6,91,8],[103,10,91,12],[103,11,91,13,"url"],[103,14,91,16],[103,15,91,17,"searchParams"],[103,27,91,29],[103,28,91,30,"set"],[103,31,91,33],[103,32,91,34,"keyOffset"],[103,41,91,43],[103,43,91,45],[103,46,91,48,"from"],[103,50,91,52],[103,52,91,54],[103,53,91,55],[104,6,92,8],[105,6,93,8],[105,10,93,12],[105,11,93,13,"url"],[105,14,93,16],[105,15,93,17,"searchParams"],[105,27,93,29],[105,28,93,30,"set"],[105,31,93,33],[105,32,93,34,"keyLimit"],[105,40,93,42],[105,42,93,44],[105,45,93,47,"to"],[105,47,93,49],[105,50,93,52,"from"],[105,54,93,56],[105,57,93,59],[105,58,93,60],[105,60,93,62],[105,61,93,63],[106,6,94,8],[106,13,94,15],[106,17,94,19],[107,4,95,4],[108,4,96,4],[109,0,97,0],[110,0,98,0],[111,0,99,0],[112,0,100,0],[113,4,101,4,"abortSignal"],[113,15,101,15,"abortSignal"],[113,16,101,16,"signal"],[113,22,101,22],[113,24,101,24],[114,6,102,8],[114,10,102,12],[114,11,102,13,"signal"],[114,17,102,19],[114,20,102,22,"signal"],[114,26,102,28],[115,6,103,8],[115,13,103,15],[115,17,103,19],[116,4,104,4],[117,4,105,4],[118,0,106,0],[119,0,107,0],[120,0,108,0],[121,0,109,0],[122,0,110,0],[123,4,111,4,"single"],[123,10,111,10,"single"],[123,11,111,10],[123,13,111,13],[124,6,112,8],[124,10,112,12],[124,11,112,13,"headers"],[124,18,112,20],[124,19,112,21,"set"],[124,22,112,24],[124,23,112,25],[124,31,112,33],[124,33,112,35],[124,68,112,70],[124,69,112,71],[125,6,113,8],[125,13,113,15],[125,17,113,19],[126,4,114,4],[127,4,115,4],[128,0,116,0],[129,0,117,0],[130,0,118,0],[131,0,119,0],[132,0,120,0],[133,4,121,4,"maybeSingle"],[133,15,121,15,"maybeSingle"],[133,16,121,15],[133,18,121,18],[134,6,122,8],[135,6,123,8],[136,6,124,8],[136,10,124,12],[136,14,124,16],[136,15,124,17,"method"],[136,21,124,23],[136,26,124,28],[136,31,124,33],[136,33,124,35],[137,8,125,12],[137,12,125,16],[137,13,125,17,"headers"],[137,20,125,24],[137,21,125,25,"set"],[137,24,125,28],[137,25,125,29],[137,33,125,37],[137,35,125,39],[137,53,125,57],[137,54,125,58],[138,6,126,8],[138,7,126,9],[138,13,127,13],[139,8,128,12],[139,12,128,16],[139,13,128,17,"headers"],[139,20,128,24],[139,21,128,25,"set"],[139,24,128,28],[139,25,128,29],[139,33,128,37],[139,35,128,39],[139,70,128,74],[139,71,128,75],[140,6,129,8],[141,6,130,8],[141,10,130,12],[141,11,130,13,"isMaybeSingle"],[141,24,130,26],[141,27,130,29],[141,31,130,33],[142,6,131,8],[142,13,131,15],[142,17,131,19],[143,4,132,4],[144,4,133,4],[145,0,134,0],[146,0,135,0],[147,4,136,4,"csv"],[147,7,136,7,"csv"],[147,8,136,7],[147,10,136,10],[148,6,137,8],[148,10,137,12],[148,11,137,13,"headers"],[148,18,137,20],[148,19,137,21,"set"],[148,22,137,24],[148,23,137,25],[148,31,137,33],[148,33,137,35],[148,43,137,45],[148,44,137,46],[149,6,138,8],[149,13,138,15],[149,17,138,19],[150,4,139,4],[151,4,140,4],[152,0,141,0],[153,0,142,0],[154,4,143,4,"geojson"],[154,11,143,11,"geojson"],[154,12,143,11],[154,14,143,14],[155,6,144,8],[155,10,144,12],[155,11,144,13,"headers"],[155,18,144,20],[155,19,144,21,"set"],[155,22,144,24],[155,23,144,25],[155,31,144,33],[155,33,144,35],[155,55,144,57],[155,56,144,58],[156,6,145,8],[156,13,145,15],[156,17,145,19],[157,4,146,4],[158,4,147,4],[159,0,148,0],[160,0,149,0],[161,0,150,0],[162,0,151,0],[163,0,152,0],[164,0,153,0],[165,0,154,0],[166,0,155,0],[167,0,156,0],[168,0,157,0],[169,0,158,0],[170,0,159,0],[171,0,160,0],[172,0,161,0],[173,0,162,0],[174,0,163,0],[175,0,164,0],[176,0,165,0],[177,0,166,0],[178,0,167,0],[179,0,168,0],[180,0,169,0],[181,0,170,0],[182,0,171,0],[183,4,172,4,"explain"],[183,11,172,11,"explain"],[183,12,172,12],[184,6,172,14,"analyze"],[184,13,172,21],[184,16,172,24],[184,21,172,29],[185,6,172,31,"verbose"],[185,13,172,38],[185,16,172,41],[185,21,172,46],[186,6,172,48,"settings"],[186,14,172,56],[186,17,172,59],[186,22,172,64],[187,6,172,66,"buffers"],[187,13,172,73],[187,16,172,76],[187,21,172,81],[188,6,172,83,"wal"],[188,9,172,86],[188,12,172,89],[188,17,172,94],[189,6,172,96,"format"],[189,12,172,102],[189,15,172,105],[190,4,172,113],[190,5,172,114],[190,8,172,117],[190,9,172,118],[190,10,172,119],[190,12,172,121],[191,6,173,8],[191,10,173,12,"_a"],[191,12,173,14],[192,6,174,8],[192,12,174,14,"options"],[192,19,174,21],[192,22,174,24],[192,23,175,12,"analyze"],[192,30,175,19],[192,33,175,22],[192,42,175,31],[192,45,175,34],[192,49,175,38],[192,51,176,12,"verbose"],[192,58,176,19],[192,61,176,22],[192,70,176,31],[192,73,176,34],[192,77,176,38],[192,79,177,12,"settings"],[192,87,177,20],[192,90,177,23],[192,100,177,33],[192,103,177,36],[192,107,177,40],[192,109,178,12,"buffers"],[192,116,178,19],[192,119,178,22],[192,128,178,31],[192,131,178,34],[192,135,178,38],[192,137,179,12,"wal"],[192,140,179,15],[192,143,179,18],[192,148,179,23],[192,151,179,26],[192,155,179,30],[192,156,180,9],[192,157,181,13,"filter"],[192,163,181,19],[192,164,181,20,"Boolean"],[192,171,181,27],[192,172,181,28],[192,173,182,13,"join"],[192,177,182,17],[192,178,182,18],[192,181,182,21],[192,182,182,22],[193,6,183,8],[194,6,184,8],[194,12,184,14,"forMediatype"],[194,24,184,26],[194,27,184,29],[194,28,184,30,"_a"],[194,30,184,32],[194,33,184,35],[194,37,184,39],[194,38,184,40,"headers"],[194,45,184,47],[194,46,184,48,"get"],[194,49,184,51],[194,50,184,52],[194,58,184,60],[194,59,184,61],[194,65,184,67],[194,69,184,71],[194,73,184,75,"_a"],[194,75,184,77],[194,80,184,82],[194,85,184,87],[194,86,184,88],[194,89,184,91,"_a"],[194,91,184,93],[194,94,184,96],[194,112,184,114],[195,6,185,8],[195,10,185,12],[195,11,185,13,"headers"],[195,18,185,20],[195,19,185,21,"set"],[195,22,185,24],[195,23,185,25],[195,31,185,33],[195,33,185,35],[195,63,185,65,"format"],[195,69,185,71],[195,79,185,81,"forMediatype"],[195,91,185,93],[195,105,185,107,"options"],[195,112,185,114],[195,115,185,117],[195,116,185,118],[196,6,186,8],[196,10,186,12,"format"],[196,16,186,18],[196,21,186,23],[196,27,186,29],[196,29,186,31],[197,8,187,12],[197,15,187,19],[197,19,187,23],[198,6,188,8],[198,7,188,9],[198,13,189,13],[199,8,190,12],[199,15,190,19],[199,19,190,23],[200,6,191,8],[201,4,192,4],[202,4,193,4],[203,0,194,0],[204,0,195,0],[205,0,196,0],[206,0,197,0],[207,4,198,4,"rollback"],[207,12,198,12,"rollback"],[207,13,198,12],[207,15,198,15],[208,6,199,8],[208,10,199,12],[208,11,199,13,"headers"],[208,18,199,20],[208,19,199,21,"append"],[208,25,199,27],[208,26,199,28],[208,34,199,36],[208,36,199,38],[208,49,199,51],[208,50,199,52],[209,6,200,8],[209,13,200,15],[209,17,200,19],[210,4,201,4],[211,4,202,4],[212,0,203,0],[213,0,204,0],[214,0,205,0],[215,0,206,0],[216,0,207,0],[217,4,208,4,"returns"],[217,11,208,11,"returns"],[217,12,208,11],[217,14,208,14],[218,6,209,8],[218,13,209,15],[218,17,209,19],[219,4,210,4],[220,4,211,4],[221,0,212,0],[222,0,213,0],[223,0,214,0],[224,0,215,0],[225,0,216,0],[226,4,217,4,"maxAffected"],[226,15,217,15,"maxAffected"],[226,16,217,16,"value"],[226,21,217,21],[226,23,217,23],[227,6,218,8],[227,10,218,12],[227,11,218,13,"headers"],[227,18,218,20],[227,19,218,21,"append"],[227,25,218,27],[227,26,218,28],[227,34,218,36],[227,36,218,38],[227,53,218,55],[227,54,218,56],[228,6,219,8],[228,10,219,12],[228,11,219,13,"headers"],[228,18,219,20],[228,19,219,21,"append"],[228,25,219,27],[228,26,219,28],[228,34,219,36],[228,36,219,38],[228,52,219,54,"value"],[228,57,219,59],[228,59,219,61],[228,60,219,62],[229,6,220,8],[229,13,220,15],[229,17,220,19],[230,4,221,4],[231,2,222,0],[232,2,223,0,"exports"],[232,9,223,7],[232,10,223,8,"default"],[232,17,223,15],[232,20,223,18,"PostgrestTransformBuilder"],[232,45,223,43],[233,0,223,44],[233,3]],"functionMap":{"names":["<global>","PostgrestTransformBuilder","select","split.map$argument_0","order","limit","range","abortSignal","single","maybeSingle","csv","geojson","explain","rollback","returns","maxAffected"],"mappings":"AAA;ACI;ICU;iBCK;SDQ;KDK;IGmB;KHK;IIW;KJI;IKgB;KLO;IMM;KNG;IOO;KPG;IQO;KRW;ISI;KTG;IUI;KVG;IW0B;KXoB;IYM;KZG;IaO;KbE;IcO;KdI;CDC"}},"type":"js/module"}]}