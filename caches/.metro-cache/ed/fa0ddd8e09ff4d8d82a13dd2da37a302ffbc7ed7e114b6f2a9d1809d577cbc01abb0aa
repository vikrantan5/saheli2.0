{"dependencies":[{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"yg7e6laZwmpbIvId5jovq9ugXp8=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30=","exportNames":["*"]}},{"name":"tslib","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":16,"index":93},"end":{"line":3,"column":32,"index":109}}],"key":"vm88vOsSPZItrLOmMEyUuGkd1y4=","exportNames":["*"]}},{"name":"../lib/errors","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":17,"index":128},"end":{"line":4,"column":41,"index":152}}],"key":"+GSAvg/CWfG2ifOQrWLkai/D9hY=","exportNames":["*"]}},{"name":"../lib/fetch","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":16,"index":170},"end":{"line":5,"column":39,"index":193}}],"key":"m5IduDkD0DmXIm44QxetlLAeo0E=","exportNames":["*"]}},{"name":"../lib/helpers","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":18,"index":213},"end":{"line":6,"column":43,"index":238}}],"key":"g7hF4pHwnWO84hRO36vjqsLwW80=","exportNames":["*"]}},{"name":"./BlobDownloadBuilder","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":54,"index":294},"end":{"line":7,"column":86,"index":326}}],"key":"ZOxbRXUyfDEL0iRFTQ4ys3MNGAs=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _classCallCheck = require(_dependencyMap[0], \"@babel/runtime/helpers/classCallCheck\");\n  var _createClass = require(_dependencyMap[1], \"@babel/runtime/helpers/createClass\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  var tslib_1 = require(_dependencyMap[2], \"tslib\");\n  var errors_1 = require(_dependencyMap[3], \"../lib/errors\");\n  var fetch_1 = require(_dependencyMap[4], \"../lib/fetch\");\n  var helpers_1 = require(_dependencyMap[5], \"../lib/helpers\");\n  var BlobDownloadBuilder_1 = tslib_1.__importDefault(require(_dependencyMap[6], \"./BlobDownloadBuilder\"));\n  var DEFAULT_SEARCH_OPTIONS = {\n    limit: 100,\n    offset: 0,\n    sortBy: {\n      column: 'name',\n      order: 'asc'\n    }\n  };\n  var DEFAULT_FILE_OPTIONS = {\n    cacheControl: '3600',\n    contentType: 'text/plain;charset=UTF-8',\n    upsert: false\n  };\n  var StorageFileApi = /*#__PURE__*/function () {\n    function StorageFileApi(url) {\n      var headers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var bucketId = arguments.length > 2 ? arguments[2] : undefined;\n      var fetch = arguments.length > 3 ? arguments[3] : undefined;\n      _classCallCheck(this, StorageFileApi);\n      this.shouldThrowOnError = false;\n      this.url = url;\n      this.headers = headers;\n      this.bucketId = bucketId;\n      this.fetch = (0, helpers_1.resolveFetch)(fetch);\n    }\n    /**\n     * Enable throwing errors instead of returning them.\n     */\n    return _createClass(StorageFileApi, [{\n      key: \"throwOnError\",\n      value: function throwOnError() {\n        this.shouldThrowOnError = true;\n        return this;\n      }\n      /**\n       * Uploads a file to an existing bucket or replaces an existing file at the specified path with a new one.\n       *\n       * @param method HTTP method.\n       * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n       * @param fileBody The body of the file to be stored in the bucket.\n       */\n    }, {\n      key: \"uploadOrUpdate\",\n      value: function uploadOrUpdate(method, path, fileBody, fileOptions) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n          try {\n            var body;\n            var options = Object.assign(Object.assign({}, DEFAULT_FILE_OPTIONS), fileOptions);\n            var headers = Object.assign(Object.assign({}, this.headers), method === 'POST' && {\n              'x-upsert': String(options.upsert)\n            });\n            var metadata = options.metadata;\n            if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n              body = new FormData();\n              body.append('cacheControl', options.cacheControl);\n              if (metadata) {\n                body.append('metadata', this.encodeMetadata(metadata));\n              }\n              body.append('', fileBody);\n            } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n              body = fileBody;\n              body.append('cacheControl', options.cacheControl);\n              if (metadata) {\n                body.append('metadata', this.encodeMetadata(metadata));\n              }\n            } else {\n              body = fileBody;\n              headers['cache-control'] = `max-age=${options.cacheControl}`;\n              headers['content-type'] = options.contentType;\n              if (metadata) {\n                headers['x-metadata'] = this.toBase64(this.encodeMetadata(metadata));\n              }\n            }\n            if (fileOptions === null || fileOptions === void 0 ? void 0 : fileOptions.headers) {\n              headers = Object.assign(Object.assign({}, headers), fileOptions.headers);\n            }\n            var cleanPath = this._removeEmptyFolders(path);\n            var _path = this._getFinalPath(cleanPath);\n            var data = yield (method == 'PUT' ? fetch_1.put : fetch_1.post)(this.fetch, `${this.url}/object/${_path}`, body, Object.assign({\n              headers\n            }, (options === null || options === void 0 ? void 0 : options.duplex) ? {\n              duplex: options.duplex\n            } : {}));\n            return {\n              data: {\n                path: cleanPath,\n                id: data.Id,\n                fullPath: data.Key\n              },\n              error: null\n            };\n          } catch (error) {\n            if (this.shouldThrowOnError) {\n              throw error;\n            }\n            if ((0, errors_1.isStorageError)(error)) {\n              return {\n                data: null,\n                error\n              };\n            }\n            throw error;\n          }\n        });\n      }\n      /**\n       * Uploads a file to an existing bucket.\n       *\n       * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n       * @param fileBody The body of the file to be stored in the bucket.\n       */\n    }, {\n      key: \"upload\",\n      value: function upload(path, fileBody, fileOptions) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n          return this.uploadOrUpdate('POST', path, fileBody, fileOptions);\n        });\n      }\n      /**\n       * Upload a file with a token generated from `createSignedUploadUrl`.\n       * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n       * @param token The token generated from `createSignedUploadUrl`\n       * @param fileBody The body of the file to be stored in the bucket.\n       */\n    }, {\n      key: \"uploadToSignedUrl\",\n      value: function uploadToSignedUrl(path, token, fileBody, fileOptions) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n          var cleanPath = this._removeEmptyFolders(path);\n          var _path = this._getFinalPath(cleanPath);\n          var url = new URL(this.url + `/object/upload/sign/${_path}`);\n          url.searchParams.set('token', token);\n          try {\n            var body;\n            var options = Object.assign({\n              upsert: DEFAULT_FILE_OPTIONS.upsert\n            }, fileOptions);\n            var headers = Object.assign(Object.assign({}, this.headers), {\n              'x-upsert': String(options.upsert)\n            });\n            if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n              body = new FormData();\n              body.append('cacheControl', options.cacheControl);\n              body.append('', fileBody);\n            } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n              body = fileBody;\n              body.append('cacheControl', options.cacheControl);\n            } else {\n              body = fileBody;\n              headers['cache-control'] = `max-age=${options.cacheControl}`;\n              headers['content-type'] = options.contentType;\n            }\n            var data = yield (0, fetch_1.put)(this.fetch, url.toString(), body, {\n              headers\n            });\n            return {\n              data: {\n                path: cleanPath,\n                fullPath: data.Key\n              },\n              error: null\n            };\n          } catch (error) {\n            if (this.shouldThrowOnError) {\n              throw error;\n            }\n            if ((0, errors_1.isStorageError)(error)) {\n              return {\n                data: null,\n                error\n              };\n            }\n            throw error;\n          }\n        });\n      }\n      /**\n       * Creates a signed upload URL.\n       * Signed upload URLs can be used to upload files to the bucket without further authentication.\n       * They are valid for 2 hours.\n       * @param path The file path, including the current file name. For example `folder/image.png`.\n       * @param options.upsert If set to true, allows the file to be overwritten if it already exists.\n       */\n    }, {\n      key: \"createSignedUploadUrl\",\n      value: function createSignedUploadUrl(path, options) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n          try {\n            var _path = this._getFinalPath(path);\n            var headers = Object.assign({}, this.headers);\n            if (options === null || options === void 0 ? void 0 : options.upsert) {\n              headers['x-upsert'] = 'true';\n            }\n            var data = yield (0, fetch_1.post)(this.fetch, `${this.url}/object/upload/sign/${_path}`, {}, {\n              headers\n            });\n            var url = new URL(this.url + data.url);\n            var token = url.searchParams.get('token');\n            if (!token) {\n              throw new errors_1.StorageError('No token returned by API');\n            }\n            return {\n              data: {\n                signedUrl: url.toString(),\n                path,\n                token\n              },\n              error: null\n            };\n          } catch (error) {\n            if (this.shouldThrowOnError) {\n              throw error;\n            }\n            if ((0, errors_1.isStorageError)(error)) {\n              return {\n                data: null,\n                error\n              };\n            }\n            throw error;\n          }\n        });\n      }\n      /**\n       * Replaces an existing file at the specified path with a new one.\n       *\n       * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to update.\n       * @param fileBody The body of the file to be stored in the bucket.\n       */\n    }, {\n      key: \"update\",\n      value: function update(path, fileBody, fileOptions) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n          return this.uploadOrUpdate('PUT', path, fileBody, fileOptions);\n        });\n      }\n      /**\n       * Moves an existing file to a new path in the same bucket.\n       *\n       * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n       * @param toPath The new file path, including the new file name. For example `folder/image-new.png`.\n       * @param options The destination options.\n       */\n    }, {\n      key: \"move\",\n      value: function move(fromPath, toPath, options) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n          try {\n            var data = yield (0, fetch_1.post)(this.fetch, `${this.url}/object/move`, {\n              bucketId: this.bucketId,\n              sourceKey: fromPath,\n              destinationKey: toPath,\n              destinationBucket: options === null || options === void 0 ? void 0 : options.destinationBucket\n            }, {\n              headers: this.headers\n            });\n            return {\n              data,\n              error: null\n            };\n          } catch (error) {\n            if (this.shouldThrowOnError) {\n              throw error;\n            }\n            if ((0, errors_1.isStorageError)(error)) {\n              return {\n                data: null,\n                error\n              };\n            }\n            throw error;\n          }\n        });\n      }\n      /**\n       * Copies an existing file to a new path in the same bucket.\n       *\n       * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n       * @param toPath The new file path, including the new file name. For example `folder/image-copy.png`.\n       * @param options The destination options.\n       */\n    }, {\n      key: \"copy\",\n      value: function copy(fromPath, toPath, options) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n          try {\n            var data = yield (0, fetch_1.post)(this.fetch, `${this.url}/object/copy`, {\n              bucketId: this.bucketId,\n              sourceKey: fromPath,\n              destinationKey: toPath,\n              destinationBucket: options === null || options === void 0 ? void 0 : options.destinationBucket\n            }, {\n              headers: this.headers\n            });\n            return {\n              data: {\n                path: data.Key\n              },\n              error: null\n            };\n          } catch (error) {\n            if (this.shouldThrowOnError) {\n              throw error;\n            }\n            if ((0, errors_1.isStorageError)(error)) {\n              return {\n                data: null,\n                error\n              };\n            }\n            throw error;\n          }\n        });\n      }\n      /**\n       * Creates a signed URL. Use a signed URL to share a file for a fixed amount of time.\n       *\n       * @param path The file path, including the current file name. For example `folder/image.png`.\n       * @param expiresIn The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.\n       * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n       * @param options.transform Transform the asset before serving it to the client.\n       */\n    }, {\n      key: \"createSignedUrl\",\n      value: function createSignedUrl(path, expiresIn, options) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n          try {\n            var _path = this._getFinalPath(path);\n            var data = yield (0, fetch_1.post)(this.fetch, `${this.url}/object/sign/${_path}`, Object.assign({\n              expiresIn\n            }, (options === null || options === void 0 ? void 0 : options.transform) ? {\n              transform: options.transform\n            } : {}), {\n              headers: this.headers\n            });\n            var downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? `&download=${options.download === true ? '' : options.download}` : '';\n            var signedUrl = encodeURI(`${this.url}${data.signedURL}${downloadQueryParam}`);\n            data = {\n              signedUrl\n            };\n            return {\n              data,\n              error: null\n            };\n          } catch (error) {\n            if (this.shouldThrowOnError) {\n              throw error;\n            }\n            if ((0, errors_1.isStorageError)(error)) {\n              return {\n                data: null,\n                error\n              };\n            }\n            throw error;\n          }\n        });\n      }\n      /**\n       * Creates multiple signed URLs. Use a signed URL to share a file for a fixed amount of time.\n       *\n       * @param paths The file paths to be downloaded, including the current file names. For example `['folder/image.png', 'folder2/image2.png']`.\n       * @param expiresIn The number of seconds until the signed URLs expire. For example, `60` for URLs which are valid for one minute.\n       * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n       */\n    }, {\n      key: \"createSignedUrls\",\n      value: function createSignedUrls(paths, expiresIn, options) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n          try {\n            var data = yield (0, fetch_1.post)(this.fetch, `${this.url}/object/sign/${this.bucketId}`, {\n              expiresIn,\n              paths\n            }, {\n              headers: this.headers\n            });\n            var downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? `&download=${options.download === true ? '' : options.download}` : '';\n            return {\n              data: data.map(datum => Object.assign(Object.assign({}, datum), {\n                signedUrl: datum.signedURL ? encodeURI(`${this.url}${datum.signedURL}${downloadQueryParam}`) : null\n              })),\n              error: null\n            };\n          } catch (error) {\n            if (this.shouldThrowOnError) {\n              throw error;\n            }\n            if ((0, errors_1.isStorageError)(error)) {\n              return {\n                data: null,\n                error\n              };\n            }\n            throw error;\n          }\n        });\n      }\n      /**\n       * Downloads a file from a private bucket. For public buckets, make a request to the URL returned from `getPublicUrl` instead.\n       *\n       * @param path The full path and file name of the file to be downloaded. For example `folder/image.png`.\n       * @param options.transform Transform the asset before serving it to the client.\n       */\n    }, {\n      key: \"download\",\n      value: function download(path, options) {\n        var wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== 'undefined';\n        var renderPath = wantsTransformation ? 'render/image/authenticated' : 'object';\n        var transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});\n        var queryString = transformationQuery ? `?${transformationQuery}` : '';\n        var _path = this._getFinalPath(path);\n        var downloadFn = () => (0, fetch_1.get)(this.fetch, `${this.url}/${renderPath}/${_path}${queryString}`, {\n          headers: this.headers,\n          noResolveJson: true\n        });\n        return new BlobDownloadBuilder_1.default(downloadFn, this.shouldThrowOnError);\n      }\n      /**\n       * Retrieves the details of an existing file.\n       * @param path\n       */\n    }, {\n      key: \"info\",\n      value: function info(path) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n          var _path = this._getFinalPath(path);\n          try {\n            var data = yield (0, fetch_1.get)(this.fetch, `${this.url}/object/info/${_path}`, {\n              headers: this.headers\n            });\n            return {\n              data: (0, helpers_1.recursiveToCamel)(data),\n              error: null\n            };\n          } catch (error) {\n            if (this.shouldThrowOnError) {\n              throw error;\n            }\n            if ((0, errors_1.isStorageError)(error)) {\n              return {\n                data: null,\n                error\n              };\n            }\n            throw error;\n          }\n        });\n      }\n      /**\n       * Checks the existence of a file.\n       * @param path\n       */\n    }, {\n      key: \"exists\",\n      value: function exists(path) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n          var _path = this._getFinalPath(path);\n          try {\n            yield (0, fetch_1.head)(this.fetch, `${this.url}/object/${_path}`, {\n              headers: this.headers\n            });\n            return {\n              data: true,\n              error: null\n            };\n          } catch (error) {\n            if (this.shouldThrowOnError) {\n              throw error;\n            }\n            if ((0, errors_1.isStorageError)(error) && error instanceof errors_1.StorageUnknownError) {\n              var originalError = error.originalError;\n              if ([400, 404].includes(originalError === null || originalError === void 0 ? void 0 : originalError.status)) {\n                return {\n                  data: false,\n                  error\n                };\n              }\n            }\n            throw error;\n          }\n        });\n      }\n      /**\n       * A simple convenience function to get the URL for an asset in a public bucket. If you do not want to use this function, you can construct the public URL by concatenating the bucket URL with the path to the asset.\n       * This function does not verify if the bucket is public. If a public URL is created for a bucket which is not public, you will not be able to download the asset.\n       *\n       * @param path The path and name of the file to generate the public URL for. For example `folder/image.png`.\n       * @param options.download Triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n       * @param options.transform Transform the asset before serving it to the client.\n       */\n    }, {\n      key: \"getPublicUrl\",\n      value: function getPublicUrl(path, options) {\n        var _path = this._getFinalPath(path);\n        var _queryString = [];\n        var downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? `download=${options.download === true ? '' : options.download}` : '';\n        if (downloadQueryParam !== '') {\n          _queryString.push(downloadQueryParam);\n        }\n        var wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== 'undefined';\n        var renderPath = wantsTransformation ? 'render/image' : 'object';\n        var transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});\n        if (transformationQuery !== '') {\n          _queryString.push(transformationQuery);\n        }\n        var queryString = _queryString.join('&');\n        if (queryString !== '') {\n          queryString = `?${queryString}`;\n        }\n        return {\n          data: {\n            publicUrl: encodeURI(`${this.url}/${renderPath}/public/${_path}${queryString}`)\n          }\n        };\n      }\n      /**\n       * Deletes files within the same bucket\n       *\n       * @param paths An array of files to delete, including the path and file name. For example [`'folder/image.png'`].\n       */\n    }, {\n      key: \"remove\",\n      value: function remove(paths) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n          try {\n            var data = yield (0, fetch_1.remove)(this.fetch, `${this.url}/object/${this.bucketId}`, {\n              prefixes: paths\n            }, {\n              headers: this.headers\n            });\n            return {\n              data,\n              error: null\n            };\n          } catch (error) {\n            if (this.shouldThrowOnError) {\n              throw error;\n            }\n            if ((0, errors_1.isStorageError)(error)) {\n              return {\n                data: null,\n                error\n              };\n            }\n            throw error;\n          }\n        });\n      }\n      /**\n       * Get file metadata\n       * @param id the file id to retrieve metadata\n       */\n      // async getMetadata(\n      //   id: string\n      // ): Promise<\n      //   | {\n      //       data: Metadata\n      //       error: null\n      //     }\n      //   | {\n      //       data: null\n      //       error: StorageError\n      //     }\n      // > {\n      //   try {\n      //     const data = await get(this.fetch, `${this.url}/metadata/${id}`, { headers: this.headers })\n      //     return { data, error: null }\n      //   } catch (error) {\n      //     if (isStorageError(error)) {\n      //       return { data: null, error }\n      //     }\n      //     throw error\n      //   }\n      // }\n      /**\n       * Update file metadata\n       * @param id the file id to update metadata\n       * @param meta the new file metadata\n       */\n      // async updateMetadata(\n      //   id: string,\n      //   meta: Metadata\n      // ): Promise<\n      //   | {\n      //       data: Metadata\n      //       error: null\n      //     }\n      //   | {\n      //       data: null\n      //       error: StorageError\n      //     }\n      // > {\n      //   try {\n      //     const data = await post(\n      //       this.fetch,\n      //       `${this.url}/metadata/${id}`,\n      //       { ...meta },\n      //       { headers: this.headers }\n      //     )\n      //     return { data, error: null }\n      //   } catch (error) {\n      //     if (isStorageError(error)) {\n      //       return { data: null, error }\n      //     }\n      //     throw error\n      //   }\n      // }\n      /**\n       * Lists all the files and folders within a path of the bucket.\n       * @param path The folder path.\n       * @param options Search options including limit (defaults to 100), offset, sortBy, and search\n       */\n    }, {\n      key: \"list\",\n      value: function list(path, options, parameters) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n          try {\n            var body = Object.assign(Object.assign(Object.assign({}, DEFAULT_SEARCH_OPTIONS), options), {\n              prefix: path || ''\n            });\n            var data = yield (0, fetch_1.post)(this.fetch, `${this.url}/object/list/${this.bucketId}`, body, {\n              headers: this.headers\n            }, parameters);\n            return {\n              data,\n              error: null\n            };\n          } catch (error) {\n            if (this.shouldThrowOnError) {\n              throw error;\n            }\n            if ((0, errors_1.isStorageError)(error)) {\n              return {\n                data: null,\n                error\n              };\n            }\n            throw error;\n          }\n        });\n      }\n      /**\n       * @experimental this method signature might change in the future\n       * @param options search options\n       * @param parameters\n       */\n    }, {\n      key: \"listV2\",\n      value: function listV2(options, parameters) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n          try {\n            var body = Object.assign({}, options);\n            var data = yield (0, fetch_1.post)(this.fetch, `${this.url}/object/list-v2/${this.bucketId}`, body, {\n              headers: this.headers\n            }, parameters);\n            return {\n              data,\n              error: null\n            };\n          } catch (error) {\n            if (this.shouldThrowOnError) {\n              throw error;\n            }\n            if ((0, errors_1.isStorageError)(error)) {\n              return {\n                data: null,\n                error\n              };\n            }\n            throw error;\n          }\n        });\n      }\n    }, {\n      key: \"encodeMetadata\",\n      value: function encodeMetadata(metadata) {\n        return JSON.stringify(metadata);\n      }\n    }, {\n      key: \"toBase64\",\n      value: function toBase64(data) {\n        if (typeof Buffer !== 'undefined') {\n          return Buffer.from(data).toString('base64');\n        }\n        return btoa(data);\n      }\n    }, {\n      key: \"_getFinalPath\",\n      value: function _getFinalPath(path) {\n        return `${this.bucketId}/${path.replace(/^\\/+/, '')}`;\n      }\n    }, {\n      key: \"_removeEmptyFolders\",\n      value: function _removeEmptyFolders(path) {\n        return path.replace(/^\\/|\\/$/g, '').replace(/\\/+/g, '/');\n      }\n    }, {\n      key: \"transformOptsToQueryString\",\n      value: function transformOptsToQueryString(transform) {\n        var params = [];\n        if (transform.width) {\n          params.push(`width=${transform.width}`);\n        }\n        if (transform.height) {\n          params.push(`height=${transform.height}`);\n        }\n        if (transform.resize) {\n          params.push(`resize=${transform.resize}`);\n        }\n        if (transform.format) {\n          params.push(`format=${transform.format}`);\n        }\n        if (transform.quality) {\n          params.push(`quality=${transform.quality}`);\n        }\n        return params.join('&');\n      }\n    }]);\n  }();\n  exports.default = StorageFileApi;\n});","lineCount":734,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_classCallCheck"],[4,21,1,13],[4,24,1,13,"require"],[4,31,1,13],[4,32,1,13,"_dependencyMap"],[4,46,1,13],[5,2,1,13],[5,6,1,13,"_createClass"],[5,18,1,13],[5,21,1,13,"require"],[5,28,1,13],[5,29,1,13,"_dependencyMap"],[5,43,1,13],[6,2,2,0,"Object"],[6,8,2,6],[6,9,2,7,"defineProperty"],[6,23,2,21],[6,24,2,22,"exports"],[6,31,2,29],[6,33,2,31],[6,45,2,43],[6,47,2,45],[7,4,2,47,"value"],[7,9,2,52],[7,11,2,54],[8,2,2,59],[8,3,2,60],[8,4,2,61],[9,2,3,0],[9,6,3,6,"tslib_1"],[9,13,3,13],[9,16,3,16,"require"],[9,23,3,23],[9,24,3,23,"_dependencyMap"],[9,38,3,23],[9,50,3,31],[9,51,3,32],[10,2,4,0],[10,6,4,6,"errors_1"],[10,14,4,14],[10,17,4,17,"require"],[10,24,4,24],[10,25,4,24,"_dependencyMap"],[10,39,4,24],[10,59,4,40],[10,60,4,41],[11,2,5,0],[11,6,5,6,"fetch_1"],[11,13,5,13],[11,16,5,16,"require"],[11,23,5,23],[11,24,5,23,"_dependencyMap"],[11,38,5,23],[11,57,5,38],[11,58,5,39],[12,2,6,0],[12,6,6,6,"helpers_1"],[12,15,6,15],[12,18,6,18,"require"],[12,25,6,25],[12,26,6,25,"_dependencyMap"],[12,40,6,25],[12,61,6,42],[12,62,6,43],[13,2,7,0],[13,6,7,6,"BlobDownloadBuilder_1"],[13,27,7,27],[13,30,7,30,"tslib_1"],[13,37,7,37],[13,38,7,38,"__importDefault"],[13,53,7,53],[13,54,7,54,"require"],[13,61,7,61],[13,62,7,61,"_dependencyMap"],[13,76,7,61],[13,104,7,85],[13,105,7,86],[13,106,7,87],[14,2,8,0],[14,6,8,6,"DEFAULT_SEARCH_OPTIONS"],[14,28,8,28],[14,31,8,31],[15,4,9,4,"limit"],[15,9,9,9],[15,11,9,11],[15,14,9,14],[16,4,10,4,"offset"],[16,10,10,10],[16,12,10,12],[16,13,10,13],[17,4,11,4,"sortBy"],[17,10,11,10],[17,12,11,12],[18,6,12,8,"column"],[18,12,12,14],[18,14,12,16],[18,20,12,22],[19,6,13,8,"order"],[19,11,13,13],[19,13,13,15],[20,4,14,4],[21,2,15,0],[21,3,15,1],[22,2,16,0],[22,6,16,6,"DEFAULT_FILE_OPTIONS"],[22,26,16,26],[22,29,16,29],[23,4,17,4,"cacheControl"],[23,16,17,16],[23,18,17,18],[23,24,17,24],[24,4,18,4,"contentType"],[24,15,18,15],[24,17,18,17],[24,43,18,43],[25,4,19,4,"upsert"],[25,10,19,10],[25,12,19,12],[26,2,20,0],[26,3,20,1],[27,2,20,2],[27,6,21,6,"StorageFileApi"],[27,20,21,20],[28,4,22,4],[28,13,22,4,"StorageFileApi"],[28,28,22,16,"url"],[28,31,22,19],[28,33,22,52],[29,6,22,52],[29,10,22,21,"headers"],[29,17,22,28],[29,20,22,28,"arguments"],[29,29,22,28],[29,30,22,28,"length"],[29,36,22,28],[29,44,22,28,"arguments"],[29,53,22,28],[29,61,22,28,"undefined"],[29,70,22,28],[29,73,22,28,"arguments"],[29,82,22,28],[29,88,22,31],[29,89,22,32],[29,90,22,33],[30,6,22,33],[30,10,22,35,"bucketId"],[30,18,22,43],[30,21,22,43,"arguments"],[30,30,22,43],[30,31,22,43,"length"],[30,37,22,43],[30,44,22,43,"arguments"],[30,53,22,43],[30,59,22,43,"undefined"],[30,68,22,43],[31,6,22,43],[31,10,22,45,"fetch"],[31,15,22,50],[31,18,22,50,"arguments"],[31,27,22,50],[31,28,22,50,"length"],[31,34,22,50],[31,41,22,50,"arguments"],[31,50,22,50],[31,56,22,50,"undefined"],[31,65,22,50],[32,6,22,50,"_classCallCheck"],[32,21,22,50],[32,28,22,50,"StorageFileApi"],[32,42,22,50],[33,6,23,8],[33,10,23,12],[33,11,23,13,"shouldThrowOnError"],[33,29,23,31],[33,32,23,34],[33,37,23,39],[34,6,24,8],[34,10,24,12],[34,11,24,13,"url"],[34,14,24,16],[34,17,24,19,"url"],[34,20,24,22],[35,6,25,8],[35,10,25,12],[35,11,25,13,"headers"],[35,18,25,20],[35,21,25,23,"headers"],[35,28,25,30],[36,6,26,8],[36,10,26,12],[36,11,26,13,"bucketId"],[36,19,26,21],[36,22,26,24,"bucketId"],[36,30,26,32],[37,6,27,8],[37,10,27,12],[37,11,27,13,"fetch"],[37,16,27,18],[37,19,27,21],[37,20,27,22],[37,21,27,23],[37,23,27,25,"helpers_1"],[37,32,27,34],[37,33,27,35,"resolveFetch"],[37,45,27,47],[37,47,27,49,"fetch"],[37,52,27,54],[37,53,27,55],[38,4,28,4],[39,4,29,4],[40,0,30,0],[41,0,31,0],[42,4,29,4],[42,11,29,4,"_createClass"],[42,23,29,4],[42,24,29,4,"StorageFileApi"],[42,38,29,4],[43,6,29,4,"key"],[43,9,29,4],[44,6,29,4,"value"],[44,11,29,4],[44,13,32,4],[44,22,32,4,"throwOnError"],[44,34,32,16,"throwOnError"],[44,35,32,16],[44,37,32,19],[45,8,33,8],[45,12,33,12],[45,13,33,13,"shouldThrowOnError"],[45,31,33,31],[45,34,33,34],[45,38,33,38],[46,8,34,8],[46,15,34,15],[46,19,34,19],[47,6,35,4],[48,6,36,4],[49,0,37,0],[50,0,38,0],[51,0,39,0],[52,0,40,0],[53,0,41,0],[54,0,42,0],[55,4,36,4],[56,6,36,4,"key"],[56,9,36,4],[57,6,36,4,"value"],[57,11,36,4],[57,13,43,4],[57,22,43,4,"uploadOrUpdate"],[57,36,43,18,"uploadOrUpdate"],[57,37,43,19,"method"],[57,43,43,25],[57,45,43,27,"path"],[57,49,43,31],[57,51,43,33,"fileBody"],[57,59,43,41],[57,61,43,43,"fileOptions"],[57,72,43,54],[57,74,43,56],[58,8,44,8],[58,15,44,15,"tslib_1"],[58,22,44,22],[58,23,44,23,"__awaiter"],[58,32,44,32],[58,33,44,33],[58,37,44,37],[58,39,44,39],[58,44,44,44],[58,45,44,45],[58,47,44,47],[58,52,44,52],[58,53,44,53],[58,55,44,55],[58,68,44,68],[59,10,45,12],[59,14,45,16],[60,12,46,16],[60,16,46,20,"body"],[60,20,46,24],[61,12,47,16],[61,16,47,22,"options"],[61,23,47,29],[61,26,47,32,"Object"],[61,32,47,38],[61,33,47,39,"assign"],[61,39,47,45],[61,40,47,46,"Object"],[61,46,47,52],[61,47,47,53,"assign"],[61,53,47,59],[61,54,47,60],[61,55,47,61],[61,56,47,62],[61,58,47,64,"DEFAULT_FILE_OPTIONS"],[61,78,47,84],[61,79,47,85],[61,81,47,87,"fileOptions"],[61,92,47,98],[61,93,47,99],[62,12,48,16],[62,16,48,20,"headers"],[62,23,48,27],[62,26,48,30,"Object"],[62,32,48,36],[62,33,48,37,"assign"],[62,39,48,43],[62,40,48,44,"Object"],[62,46,48,50],[62,47,48,51,"assign"],[62,53,48,57],[62,54,48,58],[62,55,48,59],[62,56,48,60],[62,58,48,62],[62,62,48,66],[62,63,48,67,"headers"],[62,70,48,74],[62,71,48,75],[62,73,48,78,"method"],[62,79,48,84],[62,84,48,89],[62,90,48,95],[62,94,48,99],[63,14,48,101],[63,24,48,111],[63,26,48,113,"String"],[63,32,48,119],[63,33,48,120,"options"],[63,40,48,127],[63,41,48,128,"upsert"],[63,47,48,134],[64,12,48,136],[64,13,48,138],[64,14,48,139],[65,12,49,16],[65,16,49,22,"metadata"],[65,24,49,30],[65,27,49,33,"options"],[65,34,49,40],[65,35,49,41,"metadata"],[65,43,49,49],[66,12,50,16],[66,16,50,20],[66,23,50,27,"Blob"],[66,27,50,31],[66,32,50,36],[66,43,50,47],[66,47,50,51,"fileBody"],[66,55,50,59],[66,67,50,71,"Blob"],[66,71,50,75],[66,73,50,77],[67,14,51,20,"body"],[67,18,51,24],[67,21,51,27],[67,25,51,31,"FormData"],[67,33,51,39],[67,34,51,40],[67,35,51,41],[68,14,52,20,"body"],[68,18,52,24],[68,19,52,25,"append"],[68,25,52,31],[68,26,52,32],[68,40,52,46],[68,42,52,48,"options"],[68,49,52,55],[68,50,52,56,"cacheControl"],[68,62,52,68],[68,63,52,69],[69,14,53,20],[69,18,53,24,"metadata"],[69,26,53,32],[69,28,53,34],[70,16,54,24,"body"],[70,20,54,28],[70,21,54,29,"append"],[70,27,54,35],[70,28,54,36],[70,38,54,46],[70,40,54,48],[70,44,54,52],[70,45,54,53,"encodeMetadata"],[70,59,54,67],[70,60,54,68,"metadata"],[70,68,54,76],[70,69,54,77],[70,70,54,78],[71,14,55,20],[72,14,56,20,"body"],[72,18,56,24],[72,19,56,25,"append"],[72,25,56,31],[72,26,56,32],[72,28,56,34],[72,30,56,36,"fileBody"],[72,38,56,44],[72,39,56,45],[73,12,57,16],[73,13,57,17],[73,19,58,21],[73,23,58,25],[73,30,58,32,"FormData"],[73,38,58,40],[73,43,58,45],[73,54,58,56],[73,58,58,60,"fileBody"],[73,66,58,68],[73,78,58,80,"FormData"],[73,86,58,88],[73,88,58,90],[74,14,59,20,"body"],[74,18,59,24],[74,21,59,27,"fileBody"],[74,29,59,35],[75,14,60,20,"body"],[75,18,60,24],[75,19,60,25,"append"],[75,25,60,31],[75,26,60,32],[75,40,60,46],[75,42,60,48,"options"],[75,49,60,55],[75,50,60,56,"cacheControl"],[75,62,60,68],[75,63,60,69],[76,14,61,20],[76,18,61,24,"metadata"],[76,26,61,32],[76,28,61,34],[77,16,62,24,"body"],[77,20,62,28],[77,21,62,29,"append"],[77,27,62,35],[77,28,62,36],[77,38,62,46],[77,40,62,48],[77,44,62,52],[77,45,62,53,"encodeMetadata"],[77,59,62,67],[77,60,62,68,"metadata"],[77,68,62,76],[77,69,62,77],[77,70,62,78],[78,14,63,20],[79,12,64,16],[79,13,64,17],[79,19,65,21],[80,14,66,20,"body"],[80,18,66,24],[80,21,66,27,"fileBody"],[80,29,66,35],[81,14,67,20,"headers"],[81,21,67,27],[81,22,67,28],[81,37,67,43],[81,38,67,44],[81,41,67,47],[81,52,67,58,"options"],[81,59,67,65],[81,60,67,66,"cacheControl"],[81,72,67,78],[81,74,67,80],[82,14,68,20,"headers"],[82,21,68,27],[82,22,68,28],[82,36,68,42],[82,37,68,43],[82,40,68,46,"options"],[82,47,68,53],[82,48,68,54,"contentType"],[82,59,68,65],[83,14,69,20],[83,18,69,24,"metadata"],[83,26,69,32],[83,28,69,34],[84,16,70,24,"headers"],[84,23,70,31],[84,24,70,32],[84,36,70,44],[84,37,70,45],[84,40,70,48],[84,44,70,52],[84,45,70,53,"toBase64"],[84,53,70,61],[84,54,70,62],[84,58,70,66],[84,59,70,67,"encodeMetadata"],[84,73,70,81],[84,74,70,82,"metadata"],[84,82,70,90],[84,83,70,91],[84,84,70,92],[85,14,71,20],[86,12,72,16],[87,12,73,16],[87,16,73,20,"fileOptions"],[87,27,73,31],[87,32,73,36],[87,36,73,40],[87,40,73,44,"fileOptions"],[87,51,73,55],[87,56,73,60],[87,61,73,65],[87,62,73,66],[87,65,73,69],[87,70,73,74],[87,71,73,75],[87,74,73,78,"fileOptions"],[87,85,73,89],[87,86,73,90,"headers"],[87,93,73,97],[87,95,73,99],[88,14,74,20,"headers"],[88,21,74,27],[88,24,74,30,"Object"],[88,30,74,36],[88,31,74,37,"assign"],[88,37,74,43],[88,38,74,44,"Object"],[88,44,74,50],[88,45,74,51,"assign"],[88,51,74,57],[88,52,74,58],[88,53,74,59],[88,54,74,60],[88,56,74,62,"headers"],[88,63,74,69],[88,64,74,70],[88,66,74,72,"fileOptions"],[88,77,74,83],[88,78,74,84,"headers"],[88,85,74,91],[88,86,74,92],[89,12,75,16],[90,12,76,16],[90,16,76,22,"cleanPath"],[90,25,76,31],[90,28,76,34],[90,32,76,38],[90,33,76,39,"_removeEmptyFolders"],[90,52,76,58],[90,53,76,59,"path"],[90,57,76,63],[90,58,76,64],[91,12,77,16],[91,16,77,22,"_path"],[91,21,77,27],[91,24,77,30],[91,28,77,34],[91,29,77,35,"_getFinalPath"],[91,42,77,48],[91,43,77,49,"cleanPath"],[91,52,77,58],[91,53,77,59],[92,12,78,16],[92,16,78,22,"data"],[92,20,78,26],[92,23,78,29],[92,29,78,35],[92,30,78,36,"method"],[92,36,78,42],[92,40,78,46],[92,45,78,51],[92,48,78,54,"fetch_1"],[92,55,78,61],[92,56,78,62,"put"],[92,59,78,65],[92,62,78,68,"fetch_1"],[92,69,78,75],[92,70,78,76,"post"],[92,74,78,80],[92,76,78,82],[92,80,78,86],[92,81,78,87,"fetch"],[92,86,78,92],[92,88,78,94],[92,91,78,97],[92,95,78,101],[92,96,78,102,"url"],[92,99,78,105],[92,110,78,116,"_path"],[92,115,78,121],[92,117,78,123],[92,119,78,125,"body"],[92,123,78,129],[92,125,78,131,"Object"],[92,131,78,137],[92,132,78,138,"assign"],[92,138,78,144],[92,139,78,145],[93,14,78,147,"headers"],[94,12,78,155],[94,13,78,156],[94,15,78,159],[94,16,78,160,"options"],[94,23,78,167],[94,28,78,172],[94,32,78,176],[94,36,78,180,"options"],[94,43,78,187],[94,48,78,192],[94,53,78,197],[94,54,78,198],[94,57,78,201],[94,62,78,206],[94,63,78,207],[94,66,78,210,"options"],[94,73,78,217],[94,74,78,218,"duplex"],[94,80,78,224],[94,84,78,228],[95,14,78,230,"duplex"],[95,20,78,236],[95,22,78,238,"options"],[95,29,78,245],[95,30,78,246,"duplex"],[96,12,78,253],[96,13,78,254],[96,16,78,257],[96,17,78,258],[96,18,78,260],[96,19,78,261],[96,20,78,262],[97,12,79,16],[97,19,79,23],[98,14,80,20,"data"],[98,18,80,24],[98,20,80,26],[99,16,80,28,"path"],[99,20,80,32],[99,22,80,34,"cleanPath"],[99,31,80,43],[100,16,80,45,"id"],[100,18,80,47],[100,20,80,49,"data"],[100,24,80,53],[100,25,80,54,"Id"],[100,27,80,56],[101,16,80,58,"fullPath"],[101,24,80,66],[101,26,80,68,"data"],[101,30,80,72],[101,31,80,73,"Key"],[102,14,80,77],[102,15,80,78],[103,14,81,20,"error"],[103,19,81,25],[103,21,81,27],[104,12,82,16],[104,13,82,17],[105,10,83,12],[105,11,83,13],[105,12,84,12],[105,19,84,19,"error"],[105,24,84,24],[105,26,84,26],[106,12,85,16],[106,16,85,20],[106,20,85,24],[106,21,85,25,"shouldThrowOnError"],[106,39,85,43],[106,41,85,45],[107,14,86,20],[107,20,86,26,"error"],[107,25,86,31],[108,12,87,16],[109,12,88,16],[109,16,88,20],[109,17,88,21],[109,18,88,22],[109,20,88,24,"errors_1"],[109,28,88,32],[109,29,88,33,"isStorageError"],[109,43,88,47],[109,45,88,49,"error"],[109,50,88,54],[109,51,88,55],[109,53,88,57],[110,14,89,20],[110,21,89,27],[111,16,89,29,"data"],[111,20,89,33],[111,22,89,35],[111,26,89,39],[112,16,89,41,"error"],[113,14,89,47],[113,15,89,48],[114,12,90,16],[115,12,91,16],[115,18,91,22,"error"],[115,23,91,27],[116,10,92,12],[117,8,93,8],[117,9,93,9],[117,10,93,10],[118,6,94,4],[119,6,95,4],[120,0,96,0],[121,0,97,0],[122,0,98,0],[123,0,99,0],[124,0,100,0],[125,4,95,4],[126,6,95,4,"key"],[126,9,95,4],[127,6,95,4,"value"],[127,11,95,4],[127,13,101,4],[127,22,101,4,"upload"],[127,28,101,10,"upload"],[127,29,101,11,"path"],[127,33,101,15],[127,35,101,17,"fileBody"],[127,43,101,25],[127,45,101,27,"fileOptions"],[127,56,101,38],[127,58,101,40],[128,8,102,8],[128,15,102,15,"tslib_1"],[128,22,102,22],[128,23,102,23,"__awaiter"],[128,32,102,32],[128,33,102,33],[128,37,102,37],[128,39,102,39],[128,44,102,44],[128,45,102,45],[128,47,102,47],[128,52,102,52],[128,53,102,53],[128,55,102,55],[128,68,102,68],[129,10,103,12],[129,17,103,19],[129,21,103,23],[129,22,103,24,"uploadOrUpdate"],[129,36,103,38],[129,37,103,39],[129,43,103,45],[129,45,103,47,"path"],[129,49,103,51],[129,51,103,53,"fileBody"],[129,59,103,61],[129,61,103,63,"fileOptions"],[129,72,103,74],[129,73,103,75],[130,8,104,8],[130,9,104,9],[130,10,104,10],[131,6,105,4],[132,6,106,4],[133,0,107,0],[134,0,108,0],[135,0,109,0],[136,0,110,0],[137,0,111,0],[138,4,106,4],[139,6,106,4,"key"],[139,9,106,4],[140,6,106,4,"value"],[140,11,106,4],[140,13,112,4],[140,22,112,4,"uploadToSignedUrl"],[140,39,112,21,"uploadToSignedUrl"],[140,40,112,22,"path"],[140,44,112,26],[140,46,112,28,"token"],[140,51,112,33],[140,53,112,35,"fileBody"],[140,61,112,43],[140,63,112,45,"fileOptions"],[140,74,112,56],[140,76,112,58],[141,8,113,8],[141,15,113,15,"tslib_1"],[141,22,113,22],[141,23,113,23,"__awaiter"],[141,32,113,32],[141,33,113,33],[141,37,113,37],[141,39,113,39],[141,44,113,44],[141,45,113,45],[141,47,113,47],[141,52,113,52],[141,53,113,53],[141,55,113,55],[141,68,113,68],[142,10,114,12],[142,14,114,18,"cleanPath"],[142,23,114,27],[142,26,114,30],[142,30,114,34],[142,31,114,35,"_removeEmptyFolders"],[142,50,114,54],[142,51,114,55,"path"],[142,55,114,59],[142,56,114,60],[143,10,115,12],[143,14,115,18,"_path"],[143,19,115,23],[143,22,115,26],[143,26,115,30],[143,27,115,31,"_getFinalPath"],[143,40,115,44],[143,41,115,45,"cleanPath"],[143,50,115,54],[143,51,115,55],[144,10,116,12],[144,14,116,18,"url"],[144,17,116,21],[144,20,116,24],[144,24,116,28,"URL"],[144,27,116,31],[144,28,116,32],[144,32,116,36],[144,33,116,37,"url"],[144,36,116,40],[144,39,116,43],[144,62,116,66,"_path"],[144,67,116,71],[144,69,116,73],[144,70,116,74],[145,10,117,12,"url"],[145,13,117,15],[145,14,117,16,"searchParams"],[145,26,117,28],[145,27,117,29,"set"],[145,30,117,32],[145,31,117,33],[145,38,117,40],[145,40,117,42,"token"],[145,45,117,47],[145,46,117,48],[146,10,118,12],[146,14,118,16],[147,12,119,16],[147,16,119,20,"body"],[147,20,119,24],[148,12,120,16],[148,16,120,22,"options"],[148,23,120,29],[148,26,120,32,"Object"],[148,32,120,38],[148,33,120,39,"assign"],[148,39,120,45],[148,40,120,46],[149,14,120,48,"upsert"],[149,20,120,54],[149,22,120,56,"DEFAULT_FILE_OPTIONS"],[149,42,120,76],[149,43,120,77,"upsert"],[150,12,120,84],[150,13,120,85],[150,15,120,87,"fileOptions"],[150,26,120,98],[150,27,120,99],[151,12,121,16],[151,16,121,22,"headers"],[151,23,121,29],[151,26,121,32,"Object"],[151,32,121,38],[151,33,121,39,"assign"],[151,39,121,45],[151,40,121,46,"Object"],[151,46,121,52],[151,47,121,53,"assign"],[151,53,121,59],[151,54,121,60],[151,55,121,61],[151,56,121,62],[151,58,121,64],[151,62,121,68],[151,63,121,69,"headers"],[151,70,121,76],[151,71,121,77],[151,73,121,79],[152,14,121,81],[152,24,121,91],[152,26,121,93,"String"],[152,32,121,99],[152,33,121,100,"options"],[152,40,121,107],[152,41,121,108,"upsert"],[152,47,121,114],[153,12,121,116],[153,13,121,117],[153,14,121,118],[154,12,122,16],[154,16,122,20],[154,23,122,27,"Blob"],[154,27,122,31],[154,32,122,36],[154,43,122,47],[154,47,122,51,"fileBody"],[154,55,122,59],[154,67,122,71,"Blob"],[154,71,122,75],[154,73,122,77],[155,14,123,20,"body"],[155,18,123,24],[155,21,123,27],[155,25,123,31,"FormData"],[155,33,123,39],[155,34,123,40],[155,35,123,41],[156,14,124,20,"body"],[156,18,124,24],[156,19,124,25,"append"],[156,25,124,31],[156,26,124,32],[156,40,124,46],[156,42,124,48,"options"],[156,49,124,55],[156,50,124,56,"cacheControl"],[156,62,124,68],[156,63,124,69],[157,14,125,20,"body"],[157,18,125,24],[157,19,125,25,"append"],[157,25,125,31],[157,26,125,32],[157,28,125,34],[157,30,125,36,"fileBody"],[157,38,125,44],[157,39,125,45],[158,12,126,16],[158,13,126,17],[158,19,127,21],[158,23,127,25],[158,30,127,32,"FormData"],[158,38,127,40],[158,43,127,45],[158,54,127,56],[158,58,127,60,"fileBody"],[158,66,127,68],[158,78,127,80,"FormData"],[158,86,127,88],[158,88,127,90],[159,14,128,20,"body"],[159,18,128,24],[159,21,128,27,"fileBody"],[159,29,128,35],[160,14,129,20,"body"],[160,18,129,24],[160,19,129,25,"append"],[160,25,129,31],[160,26,129,32],[160,40,129,46],[160,42,129,48,"options"],[160,49,129,55],[160,50,129,56,"cacheControl"],[160,62,129,68],[160,63,129,69],[161,12,130,16],[161,13,130,17],[161,19,131,21],[162,14,132,20,"body"],[162,18,132,24],[162,21,132,27,"fileBody"],[162,29,132,35],[163,14,133,20,"headers"],[163,21,133,27],[163,22,133,28],[163,37,133,43],[163,38,133,44],[163,41,133,47],[163,52,133,58,"options"],[163,59,133,65],[163,60,133,66,"cacheControl"],[163,72,133,78],[163,74,133,80],[164,14,134,20,"headers"],[164,21,134,27],[164,22,134,28],[164,36,134,42],[164,37,134,43],[164,40,134,46,"options"],[164,47,134,53],[164,48,134,54,"contentType"],[164,59,134,65],[165,12,135,16],[166,12,136,16],[166,16,136,22,"data"],[166,20,136,26],[166,23,136,29],[166,29,136,35],[166,30,136,36],[166,31,136,37],[166,33,136,39,"fetch_1"],[166,40,136,46],[166,41,136,47,"put"],[166,44,136,50],[166,46,136,52],[166,50,136,56],[166,51,136,57,"fetch"],[166,56,136,62],[166,58,136,64,"url"],[166,61,136,67],[166,62,136,68,"toString"],[166,70,136,76],[166,71,136,77],[166,72,136,78],[166,74,136,80,"body"],[166,78,136,84],[166,80,136,86],[167,14,136,88,"headers"],[168,12,136,96],[168,13,136,97],[168,14,136,98],[169,12,137,16],[169,19,137,23],[170,14,138,20,"data"],[170,18,138,24],[170,20,138,26],[171,16,138,28,"path"],[171,20,138,32],[171,22,138,34,"cleanPath"],[171,31,138,43],[172,16,138,45,"fullPath"],[172,24,138,53],[172,26,138,55,"data"],[172,30,138,59],[172,31,138,60,"Key"],[173,14,138,64],[173,15,138,65],[174,14,139,20,"error"],[174,19,139,25],[174,21,139,27],[175,12,140,16],[175,13,140,17],[176,10,141,12],[176,11,141,13],[176,12,142,12],[176,19,142,19,"error"],[176,24,142,24],[176,26,142,26],[177,12,143,16],[177,16,143,20],[177,20,143,24],[177,21,143,25,"shouldThrowOnError"],[177,39,143,43],[177,41,143,45],[178,14,144,20],[178,20,144,26,"error"],[178,25,144,31],[179,12,145,16],[180,12,146,16],[180,16,146,20],[180,17,146,21],[180,18,146,22],[180,20,146,24,"errors_1"],[180,28,146,32],[180,29,146,33,"isStorageError"],[180,43,146,47],[180,45,146,49,"error"],[180,50,146,54],[180,51,146,55],[180,53,146,57],[181,14,147,20],[181,21,147,27],[182,16,147,29,"data"],[182,20,147,33],[182,22,147,35],[182,26,147,39],[183,16,147,41,"error"],[184,14,147,47],[184,15,147,48],[185,12,148,16],[186,12,149,16],[186,18,149,22,"error"],[186,23,149,27],[187,10,150,12],[188,8,151,8],[188,9,151,9],[188,10,151,10],[189,6,152,4],[190,6,153,4],[191,0,154,0],[192,0,155,0],[193,0,156,0],[194,0,157,0],[195,0,158,0],[196,0,159,0],[197,4,153,4],[198,6,153,4,"key"],[198,9,153,4],[199,6,153,4,"value"],[199,11,153,4],[199,13,160,4],[199,22,160,4,"createSignedUploadUrl"],[199,43,160,25,"createSignedUploadUrl"],[199,44,160,26,"path"],[199,48,160,30],[199,50,160,32,"options"],[199,57,160,39],[199,59,160,41],[200,8,161,8],[200,15,161,15,"tslib_1"],[200,22,161,22],[200,23,161,23,"__awaiter"],[200,32,161,32],[200,33,161,33],[200,37,161,37],[200,39,161,39],[200,44,161,44],[200,45,161,45],[200,47,161,47],[200,52,161,52],[200,53,161,53],[200,55,161,55],[200,68,161,68],[201,10,162,12],[201,14,162,16],[202,12,163,16],[202,16,163,20,"_path"],[202,21,163,25],[202,24,163,28],[202,28,163,32],[202,29,163,33,"_getFinalPath"],[202,42,163,46],[202,43,163,47,"path"],[202,47,163,51],[202,48,163,52],[203,12,164,16],[203,16,164,22,"headers"],[203,23,164,29],[203,26,164,32,"Object"],[203,32,164,38],[203,33,164,39,"assign"],[203,39,164,45],[203,40,164,46],[203,41,164,47],[203,42,164,48],[203,44,164,50],[203,48,164,54],[203,49,164,55,"headers"],[203,56,164,62],[203,57,164,63],[204,12,165,16],[204,16,165,20,"options"],[204,23,165,27],[204,28,165,32],[204,32,165,36],[204,36,165,40,"options"],[204,43,165,47],[204,48,165,52],[204,53,165,57],[204,54,165,58],[204,57,165,61],[204,62,165,66],[204,63,165,67],[204,66,165,70,"options"],[204,73,165,77],[204,74,165,78,"upsert"],[204,80,165,84],[204,82,165,86],[205,14,166,20,"headers"],[205,21,166,27],[205,22,166,28],[205,32,166,38],[205,33,166,39],[205,36,166,42],[205,42,166,48],[206,12,167,16],[207,12,168,16],[207,16,168,22,"data"],[207,20,168,26],[207,23,168,29],[207,29,168,35],[207,30,168,36],[207,31,168,37],[207,33,168,39,"fetch_1"],[207,40,168,46],[207,41,168,47,"post"],[207,45,168,51],[207,47,168,53],[207,51,168,57],[207,52,168,58,"fetch"],[207,57,168,63],[207,59,168,65],[207,62,168,68],[207,66,168,72],[207,67,168,73,"url"],[207,70,168,76],[207,93,168,99,"_path"],[207,98,168,104],[207,100,168,106],[207,102,168,108],[207,103,168,109],[207,104,168,110],[207,106,168,112],[208,14,168,114,"headers"],[209,12,168,122],[209,13,168,123],[209,14,168,124],[210,12,169,16],[210,16,169,22,"url"],[210,19,169,25],[210,22,169,28],[210,26,169,32,"URL"],[210,29,169,35],[210,30,169,36],[210,34,169,40],[210,35,169,41,"url"],[210,38,169,44],[210,41,169,47,"data"],[210,45,169,51],[210,46,169,52,"url"],[210,49,169,55],[210,50,169,56],[211,12,170,16],[211,16,170,22,"token"],[211,21,170,27],[211,24,170,30,"url"],[211,27,170,33],[211,28,170,34,"searchParams"],[211,40,170,46],[211,41,170,47,"get"],[211,44,170,50],[211,45,170,51],[211,52,170,58],[211,53,170,59],[212,12,171,16],[212,16,171,20],[212,17,171,21,"token"],[212,22,171,26],[212,24,171,28],[213,14,172,20],[213,20,172,26],[213,24,172,30,"errors_1"],[213,32,172,38],[213,33,172,39,"StorageError"],[213,45,172,51],[213,46,172,52],[213,72,172,78],[213,73,172,79],[214,12,173,16],[215,12,174,16],[215,19,174,23],[216,14,174,25,"data"],[216,18,174,29],[216,20,174,31],[217,16,174,33,"signedUrl"],[217,25,174,42],[217,27,174,44,"url"],[217,30,174,47],[217,31,174,48,"toString"],[217,39,174,56],[217,40,174,57],[217,41,174,58],[218,16,174,60,"path"],[218,20,174,64],[219,16,174,66,"token"],[220,14,174,72],[220,15,174,73],[221,14,174,75,"error"],[221,19,174,80],[221,21,174,82],[222,12,174,87],[222,13,174,88],[223,10,175,12],[223,11,175,13],[223,12,176,12],[223,19,176,19,"error"],[223,24,176,24],[223,26,176,26],[224,12,177,16],[224,16,177,20],[224,20,177,24],[224,21,177,25,"shouldThrowOnError"],[224,39,177,43],[224,41,177,45],[225,14,178,20],[225,20,178,26,"error"],[225,25,178,31],[226,12,179,16],[227,12,180,16],[227,16,180,20],[227,17,180,21],[227,18,180,22],[227,20,180,24,"errors_1"],[227,28,180,32],[227,29,180,33,"isStorageError"],[227,43,180,47],[227,45,180,49,"error"],[227,50,180,54],[227,51,180,55],[227,53,180,57],[228,14,181,20],[228,21,181,27],[229,16,181,29,"data"],[229,20,181,33],[229,22,181,35],[229,26,181,39],[230,16,181,41,"error"],[231,14,181,47],[231,15,181,48],[232,12,182,16],[233,12,183,16],[233,18,183,22,"error"],[233,23,183,27],[234,10,184,12],[235,8,185,8],[235,9,185,9],[235,10,185,10],[236,6,186,4],[237,6,187,4],[238,0,188,0],[239,0,189,0],[240,0,190,0],[241,0,191,0],[242,0,192,0],[243,4,187,4],[244,6,187,4,"key"],[244,9,187,4],[245,6,187,4,"value"],[245,11,187,4],[245,13,193,4],[245,22,193,4,"update"],[245,28,193,10,"update"],[245,29,193,11,"path"],[245,33,193,15],[245,35,193,17,"fileBody"],[245,43,193,25],[245,45,193,27,"fileOptions"],[245,56,193,38],[245,58,193,40],[246,8,194,8],[246,15,194,15,"tslib_1"],[246,22,194,22],[246,23,194,23,"__awaiter"],[246,32,194,32],[246,33,194,33],[246,37,194,37],[246,39,194,39],[246,44,194,44],[246,45,194,45],[246,47,194,47],[246,52,194,52],[246,53,194,53],[246,55,194,55],[246,68,194,68],[247,10,195,12],[247,17,195,19],[247,21,195,23],[247,22,195,24,"uploadOrUpdate"],[247,36,195,38],[247,37,195,39],[247,42,195,44],[247,44,195,46,"path"],[247,48,195,50],[247,50,195,52,"fileBody"],[247,58,195,60],[247,60,195,62,"fileOptions"],[247,71,195,73],[247,72,195,74],[248,8,196,8],[248,9,196,9],[248,10,196,10],[249,6,197,4],[250,6,198,4],[251,0,199,0],[252,0,200,0],[253,0,201,0],[254,0,202,0],[255,0,203,0],[256,0,204,0],[257,4,198,4],[258,6,198,4,"key"],[258,9,198,4],[259,6,198,4,"value"],[259,11,198,4],[259,13,205,4],[259,22,205,4,"move"],[259,26,205,8,"move"],[259,27,205,9,"fromPath"],[259,35,205,17],[259,37,205,19,"toPath"],[259,43,205,25],[259,45,205,27,"options"],[259,52,205,34],[259,54,205,36],[260,8,206,8],[260,15,206,15,"tslib_1"],[260,22,206,22],[260,23,206,23,"__awaiter"],[260,32,206,32],[260,33,206,33],[260,37,206,37],[260,39,206,39],[260,44,206,44],[260,45,206,45],[260,47,206,47],[260,52,206,52],[260,53,206,53],[260,55,206,55],[260,68,206,68],[261,10,207,12],[261,14,207,16],[262,12,208,16],[262,16,208,22,"data"],[262,20,208,26],[262,23,208,29],[262,29,208,35],[262,30,208,36],[262,31,208,37],[262,33,208,39,"fetch_1"],[262,40,208,46],[262,41,208,47,"post"],[262,45,208,51],[262,47,208,53],[262,51,208,57],[262,52,208,58,"fetch"],[262,57,208,63],[262,59,208,65],[262,62,208,68],[262,66,208,72],[262,67,208,73,"url"],[262,70,208,76],[262,84,208,90],[262,86,208,92],[263,14,209,20,"bucketId"],[263,22,209,28],[263,24,209,30],[263,28,209,34],[263,29,209,35,"bucketId"],[263,37,209,43],[264,14,210,20,"sourceKey"],[264,23,210,29],[264,25,210,31,"fromPath"],[264,33,210,39],[265,14,211,20,"destinationKey"],[265,28,211,34],[265,30,211,36,"toPath"],[265,36,211,42],[266,14,212,20,"destinationBucket"],[266,31,212,37],[266,33,212,39,"options"],[266,40,212,46],[266,45,212,51],[266,49,212,55],[266,53,212,59,"options"],[266,60,212,66],[266,65,212,71],[266,70,212,76],[266,71,212,77],[266,74,212,80],[266,79,212,85],[266,80,212,86],[266,83,212,89,"options"],[266,90,212,96],[266,91,212,97,"destinationBucket"],[267,12,213,16],[267,13,213,17],[267,15,213,19],[268,14,213,21,"headers"],[268,21,213,28],[268,23,213,30],[268,27,213,34],[268,28,213,35,"headers"],[269,12,213,43],[269,13,213,44],[269,14,213,45],[270,12,214,16],[270,19,214,23],[271,14,214,25,"data"],[271,18,214,29],[272,14,214,31,"error"],[272,19,214,36],[272,21,214,38],[273,12,214,43],[273,13,214,44],[274,10,215,12],[274,11,215,13],[274,12,216,12],[274,19,216,19,"error"],[274,24,216,24],[274,26,216,26],[275,12,217,16],[275,16,217,20],[275,20,217,24],[275,21,217,25,"shouldThrowOnError"],[275,39,217,43],[275,41,217,45],[276,14,218,20],[276,20,218,26,"error"],[276,25,218,31],[277,12,219,16],[278,12,220,16],[278,16,220,20],[278,17,220,21],[278,18,220,22],[278,20,220,24,"errors_1"],[278,28,220,32],[278,29,220,33,"isStorageError"],[278,43,220,47],[278,45,220,49,"error"],[278,50,220,54],[278,51,220,55],[278,53,220,57],[279,14,221,20],[279,21,221,27],[280,16,221,29,"data"],[280,20,221,33],[280,22,221,35],[280,26,221,39],[281,16,221,41,"error"],[282,14,221,47],[282,15,221,48],[283,12,222,16],[284,12,223,16],[284,18,223,22,"error"],[284,23,223,27],[285,10,224,12],[286,8,225,8],[286,9,225,9],[286,10,225,10],[287,6,226,4],[288,6,227,4],[289,0,228,0],[290,0,229,0],[291,0,230,0],[292,0,231,0],[293,0,232,0],[294,0,233,0],[295,4,227,4],[296,6,227,4,"key"],[296,9,227,4],[297,6,227,4,"value"],[297,11,227,4],[297,13,234,4],[297,22,234,4,"copy"],[297,26,234,8,"copy"],[297,27,234,9,"fromPath"],[297,35,234,17],[297,37,234,19,"toPath"],[297,43,234,25],[297,45,234,27,"options"],[297,52,234,34],[297,54,234,36],[298,8,235,8],[298,15,235,15,"tslib_1"],[298,22,235,22],[298,23,235,23,"__awaiter"],[298,32,235,32],[298,33,235,33],[298,37,235,37],[298,39,235,39],[298,44,235,44],[298,45,235,45],[298,47,235,47],[298,52,235,52],[298,53,235,53],[298,55,235,55],[298,68,235,68],[299,10,236,12],[299,14,236,16],[300,12,237,16],[300,16,237,22,"data"],[300,20,237,26],[300,23,237,29],[300,29,237,35],[300,30,237,36],[300,31,237,37],[300,33,237,39,"fetch_1"],[300,40,237,46],[300,41,237,47,"post"],[300,45,237,51],[300,47,237,53],[300,51,237,57],[300,52,237,58,"fetch"],[300,57,237,63],[300,59,237,65],[300,62,237,68],[300,66,237,72],[300,67,237,73,"url"],[300,70,237,76],[300,84,237,90],[300,86,237,92],[301,14,238,20,"bucketId"],[301,22,238,28],[301,24,238,30],[301,28,238,34],[301,29,238,35,"bucketId"],[301,37,238,43],[302,14,239,20,"sourceKey"],[302,23,239,29],[302,25,239,31,"fromPath"],[302,33,239,39],[303,14,240,20,"destinationKey"],[303,28,240,34],[303,30,240,36,"toPath"],[303,36,240,42],[304,14,241,20,"destinationBucket"],[304,31,241,37],[304,33,241,39,"options"],[304,40,241,46],[304,45,241,51],[304,49,241,55],[304,53,241,59,"options"],[304,60,241,66],[304,65,241,71],[304,70,241,76],[304,71,241,77],[304,74,241,80],[304,79,241,85],[304,80,241,86],[304,83,241,89,"options"],[304,90,241,96],[304,91,241,97,"destinationBucket"],[305,12,242,16],[305,13,242,17],[305,15,242,19],[306,14,242,21,"headers"],[306,21,242,28],[306,23,242,30],[306,27,242,34],[306,28,242,35,"headers"],[307,12,242,43],[307,13,242,44],[307,14,242,45],[308,12,243,16],[308,19,243,23],[309,14,243,25,"data"],[309,18,243,29],[309,20,243,31],[310,16,243,33,"path"],[310,20,243,37],[310,22,243,39,"data"],[310,26,243,43],[310,27,243,44,"Key"],[311,14,243,48],[311,15,243,49],[312,14,243,51,"error"],[312,19,243,56],[312,21,243,58],[313,12,243,63],[313,13,243,64],[314,10,244,12],[314,11,244,13],[314,12,245,12],[314,19,245,19,"error"],[314,24,245,24],[314,26,245,26],[315,12,246,16],[315,16,246,20],[315,20,246,24],[315,21,246,25,"shouldThrowOnError"],[315,39,246,43],[315,41,246,45],[316,14,247,20],[316,20,247,26,"error"],[316,25,247,31],[317,12,248,16],[318,12,249,16],[318,16,249,20],[318,17,249,21],[318,18,249,22],[318,20,249,24,"errors_1"],[318,28,249,32],[318,29,249,33,"isStorageError"],[318,43,249,47],[318,45,249,49,"error"],[318,50,249,54],[318,51,249,55],[318,53,249,57],[319,14,250,20],[319,21,250,27],[320,16,250,29,"data"],[320,20,250,33],[320,22,250,35],[320,26,250,39],[321,16,250,41,"error"],[322,14,250,47],[322,15,250,48],[323,12,251,16],[324,12,252,16],[324,18,252,22,"error"],[324,23,252,27],[325,10,253,12],[326,8,254,8],[326,9,254,9],[326,10,254,10],[327,6,255,4],[328,6,256,4],[329,0,257,0],[330,0,258,0],[331,0,259,0],[332,0,260,0],[333,0,261,0],[334,0,262,0],[335,0,263,0],[336,4,256,4],[337,6,256,4,"key"],[337,9,256,4],[338,6,256,4,"value"],[338,11,256,4],[338,13,264,4],[338,22,264,4,"createSignedUrl"],[338,37,264,19,"createSignedUrl"],[338,38,264,20,"path"],[338,42,264,24],[338,44,264,26,"expiresIn"],[338,53,264,35],[338,55,264,37,"options"],[338,62,264,44],[338,64,264,46],[339,8,265,8],[339,15,265,15,"tslib_1"],[339,22,265,22],[339,23,265,23,"__awaiter"],[339,32,265,32],[339,33,265,33],[339,37,265,37],[339,39,265,39],[339,44,265,44],[339,45,265,45],[339,47,265,47],[339,52,265,52],[339,53,265,53],[339,55,265,55],[339,68,265,68],[340,10,266,12],[340,14,266,16],[341,12,267,16],[341,16,267,20,"_path"],[341,21,267,25],[341,24,267,28],[341,28,267,32],[341,29,267,33,"_getFinalPath"],[341,42,267,46],[341,43,267,47,"path"],[341,47,267,51],[341,48,267,52],[342,12,268,16],[342,16,268,20,"data"],[342,20,268,24],[342,23,268,27],[342,29,268,33],[342,30,268,34],[342,31,268,35],[342,33,268,37,"fetch_1"],[342,40,268,44],[342,41,268,45,"post"],[342,45,268,49],[342,47,268,51],[342,51,268,55],[342,52,268,56,"fetch"],[342,57,268,61],[342,59,268,63],[342,62,268,66],[342,66,268,70],[342,67,268,71,"url"],[342,70,268,74],[342,86,268,90,"_path"],[342,91,268,95],[342,93,268,97],[342,95,268,99,"Object"],[342,101,268,105],[342,102,268,106,"assign"],[342,108,268,112],[342,109,268,113],[343,14,268,115,"expiresIn"],[344,12,268,125],[344,13,268,126],[344,15,268,129],[344,16,268,130,"options"],[344,23,268,137],[344,28,268,142],[344,32,268,146],[344,36,268,150,"options"],[344,43,268,157],[344,48,268,162],[344,53,268,167],[344,54,268,168],[344,57,268,171],[344,62,268,176],[344,63,268,177],[344,66,268,180,"options"],[344,73,268,187],[344,74,268,188,"transform"],[344,83,268,197],[344,87,268,201],[345,14,268,203,"transform"],[345,23,268,212],[345,25,268,214,"options"],[345,32,268,221],[345,33,268,222,"transform"],[346,12,268,232],[346,13,268,233],[346,16,268,236],[346,17,268,237],[346,18,268,239],[346,19,268,240],[346,21,268,242],[347,14,268,244,"headers"],[347,21,268,251],[347,23,268,253],[347,27,268,257],[347,28,268,258,"headers"],[348,12,268,266],[348,13,268,267],[348,14,268,268],[349,12,269,16],[349,16,269,22,"downloadQueryParam"],[349,34,269,40],[349,37,269,43],[349,38,269,44,"options"],[349,45,269,51],[349,50,269,56],[349,54,269,60],[349,58,269,64,"options"],[349,65,269,71],[349,70,269,76],[349,75,269,81],[349,76,269,82],[349,79,269,85],[349,84,269,90],[349,85,269,91],[349,88,269,94,"options"],[349,95,269,101],[349,96,269,102,"download"],[349,104,269,110],[349,108,270,22],[349,121,270,35,"options"],[349,128,270,42],[349,129,270,43,"download"],[349,137,270,51],[349,142,270,56],[349,146,270,60],[349,149,270,63],[349,151,270,65],[349,154,270,68,"options"],[349,161,270,75],[349,162,270,76,"download"],[349,170,270,84],[349,172,270,86],[349,175,271,22],[349,177,271,24],[350,12,272,16],[350,16,272,22,"signedUrl"],[350,25,272,31],[350,28,272,34,"encodeURI"],[350,37,272,43],[350,38,272,44],[350,41,272,47],[350,45,272,51],[350,46,272,52,"url"],[350,49,272,55],[350,52,272,58,"data"],[350,56,272,62],[350,57,272,63,"signedURL"],[350,66,272,72],[350,69,272,75,"downloadQueryParam"],[350,87,272,93],[350,89,272,95],[350,90,272,96],[351,12,273,16,"data"],[351,16,273,20],[351,19,273,23],[352,14,273,25,"signedUrl"],[353,12,273,35],[353,13,273,36],[354,12,274,16],[354,19,274,23],[355,14,274,25,"data"],[355,18,274,29],[356,14,274,31,"error"],[356,19,274,36],[356,21,274,38],[357,12,274,43],[357,13,274,44],[358,10,275,12],[358,11,275,13],[358,12,276,12],[358,19,276,19,"error"],[358,24,276,24],[358,26,276,26],[359,12,277,16],[359,16,277,20],[359,20,277,24],[359,21,277,25,"shouldThrowOnError"],[359,39,277,43],[359,41,277,45],[360,14,278,20],[360,20,278,26,"error"],[360,25,278,31],[361,12,279,16],[362,12,280,16],[362,16,280,20],[362,17,280,21],[362,18,280,22],[362,20,280,24,"errors_1"],[362,28,280,32],[362,29,280,33,"isStorageError"],[362,43,280,47],[362,45,280,49,"error"],[362,50,280,54],[362,51,280,55],[362,53,280,57],[363,14,281,20],[363,21,281,27],[364,16,281,29,"data"],[364,20,281,33],[364,22,281,35],[364,26,281,39],[365,16,281,41,"error"],[366,14,281,47],[366,15,281,48],[367,12,282,16],[368,12,283,16],[368,18,283,22,"error"],[368,23,283,27],[369,10,284,12],[370,8,285,8],[370,9,285,9],[370,10,285,10],[371,6,286,4],[372,6,287,4],[373,0,288,0],[374,0,289,0],[375,0,290,0],[376,0,291,0],[377,0,292,0],[378,0,293,0],[379,4,287,4],[380,6,287,4,"key"],[380,9,287,4],[381,6,287,4,"value"],[381,11,287,4],[381,13,294,4],[381,22,294,4,"createSignedUrls"],[381,38,294,20,"createSignedUrls"],[381,39,294,21,"paths"],[381,44,294,26],[381,46,294,28,"expiresIn"],[381,55,294,37],[381,57,294,39,"options"],[381,64,294,46],[381,66,294,48],[382,8,295,8],[382,15,295,15,"tslib_1"],[382,22,295,22],[382,23,295,23,"__awaiter"],[382,32,295,32],[382,33,295,33],[382,37,295,37],[382,39,295,39],[382,44,295,44],[382,45,295,45],[382,47,295,47],[382,52,295,52],[382,53,295,53],[382,55,295,55],[382,68,295,68],[383,10,296,12],[383,14,296,16],[384,12,297,16],[384,16,297,22,"data"],[384,20,297,26],[384,23,297,29],[384,29,297,35],[384,30,297,36],[384,31,297,37],[384,33,297,39,"fetch_1"],[384,40,297,46],[384,41,297,47,"post"],[384,45,297,51],[384,47,297,53],[384,51,297,57],[384,52,297,58,"fetch"],[384,57,297,63],[384,59,297,65],[384,62,297,68],[384,66,297,72],[384,67,297,73,"url"],[384,70,297,76],[384,86,297,92],[384,90,297,96],[384,91,297,97,"bucketId"],[384,99,297,105],[384,101,297,107],[384,103,297,109],[385,14,297,111,"expiresIn"],[385,23,297,120],[386,14,297,122,"paths"],[387,12,297,128],[387,13,297,129],[387,15,297,131],[388,14,297,133,"headers"],[388,21,297,140],[388,23,297,142],[388,27,297,146],[388,28,297,147,"headers"],[389,12,297,155],[389,13,297,156],[389,14,297,157],[390,12,298,16],[390,16,298,22,"downloadQueryParam"],[390,34,298,40],[390,37,298,43],[390,38,298,44,"options"],[390,45,298,51],[390,50,298,56],[390,54,298,60],[390,58,298,64,"options"],[390,65,298,71],[390,70,298,76],[390,75,298,81],[390,76,298,82],[390,79,298,85],[390,84,298,90],[390,85,298,91],[390,88,298,94,"options"],[390,95,298,101],[390,96,298,102,"download"],[390,104,298,110],[390,108,299,22],[390,121,299,35,"options"],[390,128,299,42],[390,129,299,43,"download"],[390,137,299,51],[390,142,299,56],[390,146,299,60],[390,149,299,63],[390,151,299,65],[390,154,299,68,"options"],[390,161,299,75],[390,162,299,76,"download"],[390,170,299,84],[390,172,299,86],[390,175,300,22],[390,177,300,24],[391,12,301,16],[391,19,301,23],[392,14,302,20,"data"],[392,18,302,24],[392,20,302,26,"data"],[392,24,302,30],[392,25,302,31,"map"],[392,28,302,34],[392,29,302,36,"datum"],[392,34,302,41],[392,38,302,47,"Object"],[392,44,302,53],[392,45,302,54,"assign"],[392,51,302,60],[392,52,302,61,"Object"],[392,58,302,67],[392,59,302,68,"assign"],[392,65,302,74],[392,66,302,75],[392,67,302,76],[392,68,302,77],[392,70,302,79,"datum"],[392,75,302,84],[392,76,302,85],[392,78,302,87],[393,16,302,89,"signedUrl"],[393,25,302,98],[393,27,302,100,"datum"],[393,32,302,105],[393,33,302,106,"signedURL"],[393,42,302,115],[393,45,303,30,"encodeURI"],[393,54,303,39],[393,55,303,40],[393,58,303,43],[393,62,303,47],[393,63,303,48,"url"],[393,66,303,51],[393,69,303,54,"datum"],[393,74,303,59],[393,75,303,60,"signedURL"],[393,84,303,69],[393,87,303,72,"downloadQueryParam"],[393,105,303,90],[393,107,303,92],[393,108,303,93],[393,111,304,30],[394,14,304,35],[394,15,304,36],[394,16,304,38],[394,17,304,39],[395,14,305,20,"error"],[395,19,305,25],[395,21,305,27],[396,12,306,16],[396,13,306,17],[397,10,307,12],[397,11,307,13],[397,12,308,12],[397,19,308,19,"error"],[397,24,308,24],[397,26,308,26],[398,12,309,16],[398,16,309,20],[398,20,309,24],[398,21,309,25,"shouldThrowOnError"],[398,39,309,43],[398,41,309,45],[399,14,310,20],[399,20,310,26,"error"],[399,25,310,31],[400,12,311,16],[401,12,312,16],[401,16,312,20],[401,17,312,21],[401,18,312,22],[401,20,312,24,"errors_1"],[401,28,312,32],[401,29,312,33,"isStorageError"],[401,43,312,47],[401,45,312,49,"error"],[401,50,312,54],[401,51,312,55],[401,53,312,57],[402,14,313,20],[402,21,313,27],[403,16,313,29,"data"],[403,20,313,33],[403,22,313,35],[403,26,313,39],[404,16,313,41,"error"],[405,14,313,47],[405,15,313,48],[406,12,314,16],[407,12,315,16],[407,18,315,22,"error"],[407,23,315,27],[408,10,316,12],[409,8,317,8],[409,9,317,9],[409,10,317,10],[410,6,318,4],[411,6,319,4],[412,0,320,0],[413,0,321,0],[414,0,322,0],[415,0,323,0],[416,0,324,0],[417,4,319,4],[418,6,319,4,"key"],[418,9,319,4],[419,6,319,4,"value"],[419,11,319,4],[419,13,325,4],[419,22,325,4,"download"],[419,30,325,12,"download"],[419,31,325,13,"path"],[419,35,325,17],[419,37,325,19,"options"],[419,44,325,26],[419,46,325,28],[420,8,326,8],[420,12,326,14,"wantsTransformation"],[420,31,326,33],[420,34,326,36],[420,42,326,44,"options"],[420,49,326,51],[420,54,326,56],[420,58,326,60],[420,62,326,64,"options"],[420,69,326,71],[420,74,326,76],[420,79,326,81],[420,80,326,82],[420,83,326,85],[420,88,326,90],[420,89,326,91],[420,92,326,94,"options"],[420,99,326,101],[420,100,326,102,"transform"],[420,109,326,111],[420,110,326,112],[420,115,326,117],[420,126,326,128],[421,8,327,8],[421,12,327,14,"renderPath"],[421,22,327,24],[421,25,327,27,"wantsTransformation"],[421,44,327,46],[421,47,327,49],[421,75,327,77],[421,78,327,80],[421,86,327,88],[422,8,328,8],[422,12,328,14,"transformationQuery"],[422,31,328,33],[422,34,328,36],[422,38,328,40],[422,39,328,41,"transformOptsToQueryString"],[422,65,328,67],[422,66,328,68],[422,67,328,69,"options"],[422,74,328,76],[422,79,328,81],[422,83,328,85],[422,87,328,89,"options"],[422,94,328,96],[422,99,328,101],[422,104,328,106],[422,105,328,107],[422,108,328,110],[422,113,328,115],[422,114,328,116],[422,117,328,119,"options"],[422,124,328,126],[422,125,328,127,"transform"],[422,134,328,136],[422,139,328,141],[422,140,328,142],[422,141,328,143],[422,142,328,144],[423,8,329,8],[423,12,329,14,"queryString"],[423,23,329,25],[423,26,329,28,"transformationQuery"],[423,45,329,47],[423,48,329,50],[423,52,329,54,"transformationQuery"],[423,71,329,73],[423,73,329,75],[423,76,329,78],[423,78,329,80],[424,8,330,8],[424,12,330,14,"_path"],[424,17,330,19],[424,20,330,22],[424,24,330,26],[424,25,330,27,"_getFinalPath"],[424,38,330,40],[424,39,330,41,"path"],[424,43,330,45],[424,44,330,46],[425,8,331,8],[425,12,331,14,"downloadFn"],[425,22,331,24],[425,25,331,27,"downloadFn"],[425,26,331,27],[425,31,331,33],[425,32,331,34],[425,33,331,35],[425,35,331,37,"fetch_1"],[425,42,331,44],[425,43,331,45,"get"],[425,46,331,48],[425,48,331,50],[425,52,331,54],[425,53,331,55,"fetch"],[425,58,331,60],[425,60,331,62],[425,63,331,65],[425,67,331,69],[425,68,331,70,"url"],[425,71,331,73],[425,75,331,77,"renderPath"],[425,85,331,87],[425,89,331,91,"_path"],[425,94,331,96],[425,97,331,99,"queryString"],[425,108,331,110],[425,110,331,112],[425,112,331,114],[426,10,332,12,"headers"],[426,17,332,19],[426,19,332,21],[426,23,332,25],[426,24,332,26,"headers"],[426,31,332,33],[427,10,333,12,"noResolveJson"],[427,23,333,25],[427,25,333,27],[428,8,334,8],[428,9,334,9],[428,10,334,10],[429,8,335,8],[429,15,335,15],[429,19,335,19,"BlobDownloadBuilder_1"],[429,40,335,40],[429,41,335,41,"default"],[429,48,335,48],[429,49,335,49,"downloadFn"],[429,59,335,59],[429,61,335,61],[429,65,335,65],[429,66,335,66,"shouldThrowOnError"],[429,84,335,84],[429,85,335,85],[430,6,336,4],[431,6,337,4],[432,0,338,0],[433,0,339,0],[434,0,340,0],[435,4,337,4],[436,6,337,4,"key"],[436,9,337,4],[437,6,337,4,"value"],[437,11,337,4],[437,13,341,4],[437,22,341,4,"info"],[437,26,341,8,"info"],[437,27,341,9,"path"],[437,31,341,13],[437,33,341,15],[438,8,342,8],[438,15,342,15,"tslib_1"],[438,22,342,22],[438,23,342,23,"__awaiter"],[438,32,342,32],[438,33,342,33],[438,37,342,37],[438,39,342,39],[438,44,342,44],[438,45,342,45],[438,47,342,47],[438,52,342,52],[438,53,342,53],[438,55,342,55],[438,68,342,68],[439,10,343,12],[439,14,343,18,"_path"],[439,19,343,23],[439,22,343,26],[439,26,343,30],[439,27,343,31,"_getFinalPath"],[439,40,343,44],[439,41,343,45,"path"],[439,45,343,49],[439,46,343,50],[440,10,344,12],[440,14,344,16],[441,12,345,16],[441,16,345,22,"data"],[441,20,345,26],[441,23,345,29],[441,29,345,35],[441,30,345,36],[441,31,345,37],[441,33,345,39,"fetch_1"],[441,40,345,46],[441,41,345,47,"get"],[441,44,345,50],[441,46,345,52],[441,50,345,56],[441,51,345,57,"fetch"],[441,56,345,62],[441,58,345,64],[441,61,345,67],[441,65,345,71],[441,66,345,72,"url"],[441,69,345,75],[441,85,345,91,"_path"],[441,90,345,96],[441,92,345,98],[441,94,345,100],[442,14,346,20,"headers"],[442,21,346,27],[442,23,346,29],[442,27,346,33],[442,28,346,34,"headers"],[443,12,347,16],[443,13,347,17],[443,14,347,18],[444,12,348,16],[444,19,348,23],[445,14,348,25,"data"],[445,18,348,29],[445,20,348,31],[445,21,348,32],[445,22,348,33],[445,24,348,35,"helpers_1"],[445,33,348,44],[445,34,348,45,"recursiveToCamel"],[445,50,348,61],[445,52,348,63,"data"],[445,56,348,67],[445,57,348,68],[446,14,348,70,"error"],[446,19,348,75],[446,21,348,77],[447,12,348,82],[447,13,348,83],[448,10,349,12],[448,11,349,13],[448,12,350,12],[448,19,350,19,"error"],[448,24,350,24],[448,26,350,26],[449,12,351,16],[449,16,351,20],[449,20,351,24],[449,21,351,25,"shouldThrowOnError"],[449,39,351,43],[449,41,351,45],[450,14,352,20],[450,20,352,26,"error"],[450,25,352,31],[451,12,353,16],[452,12,354,16],[452,16,354,20],[452,17,354,21],[452,18,354,22],[452,20,354,24,"errors_1"],[452,28,354,32],[452,29,354,33,"isStorageError"],[452,43,354,47],[452,45,354,49,"error"],[452,50,354,54],[452,51,354,55],[452,53,354,57],[453,14,355,20],[453,21,355,27],[454,16,355,29,"data"],[454,20,355,33],[454,22,355,35],[454,26,355,39],[455,16,355,41,"error"],[456,14,355,47],[456,15,355,48],[457,12,356,16],[458,12,357,16],[458,18,357,22,"error"],[458,23,357,27],[459,10,358,12],[460,8,359,8],[460,9,359,9],[460,10,359,10],[461,6,360,4],[462,6,361,4],[463,0,362,0],[464,0,363,0],[465,0,364,0],[466,4,361,4],[467,6,361,4,"key"],[467,9,361,4],[468,6,361,4,"value"],[468,11,361,4],[468,13,365,4],[468,22,365,4,"exists"],[468,28,365,10,"exists"],[468,29,365,11,"path"],[468,33,365,15],[468,35,365,17],[469,8,366,8],[469,15,366,15,"tslib_1"],[469,22,366,22],[469,23,366,23,"__awaiter"],[469,32,366,32],[469,33,366,33],[469,37,366,37],[469,39,366,39],[469,44,366,44],[469,45,366,45],[469,47,366,47],[469,52,366,52],[469,53,366,53],[469,55,366,55],[469,68,366,68],[470,10,367,12],[470,14,367,18,"_path"],[470,19,367,23],[470,22,367,26],[470,26,367,30],[470,27,367,31,"_getFinalPath"],[470,40,367,44],[470,41,367,45,"path"],[470,45,367,49],[470,46,367,50],[471,10,368,12],[471,14,368,16],[472,12,369,16],[472,18,369,22],[472,19,369,23],[472,20,369,24],[472,22,369,26,"fetch_1"],[472,29,369,33],[472,30,369,34,"head"],[472,34,369,38],[472,36,369,40],[472,40,369,44],[472,41,369,45,"fetch"],[472,46,369,50],[472,48,369,52],[472,51,369,55],[472,55,369,59],[472,56,369,60,"url"],[472,59,369,63],[472,70,369,74,"_path"],[472,75,369,79],[472,77,369,81],[472,79,369,83],[473,14,370,20,"headers"],[473,21,370,27],[473,23,370,29],[473,27,370,33],[473,28,370,34,"headers"],[474,12,371,16],[474,13,371,17],[474,14,371,18],[475,12,372,16],[475,19,372,23],[476,14,372,25,"data"],[476,18,372,29],[476,20,372,31],[476,24,372,35],[477,14,372,37,"error"],[477,19,372,42],[477,21,372,44],[478,12,372,49],[478,13,372,50],[479,10,373,12],[479,11,373,13],[479,12,374,12],[479,19,374,19,"error"],[479,24,374,24],[479,26,374,26],[480,12,375,16],[480,16,375,20],[480,20,375,24],[480,21,375,25,"shouldThrowOnError"],[480,39,375,43],[480,41,375,45],[481,14,376,20],[481,20,376,26,"error"],[481,25,376,31],[482,12,377,16],[483,12,378,16],[483,16,378,20],[483,17,378,21],[483,18,378,22],[483,20,378,24,"errors_1"],[483,28,378,32],[483,29,378,33,"isStorageError"],[483,43,378,47],[483,45,378,49,"error"],[483,50,378,54],[483,51,378,55],[483,55,378,59,"error"],[483,60,378,64],[483,72,378,76,"errors_1"],[483,80,378,84],[483,81,378,85,"StorageUnknownError"],[483,100,378,104],[483,102,378,106],[484,14,379,20],[484,18,379,26,"originalError"],[484,31,379,39],[484,34,379,42,"error"],[484,39,379,47],[484,40,379,48,"originalError"],[484,53,379,61],[485,14,380,20],[485,18,380,24],[485,19,380,25],[485,22,380,28],[485,24,380,30],[485,27,380,33],[485,28,380,34],[485,29,380,35,"includes"],[485,37,380,43],[485,38,380,44,"originalError"],[485,51,380,57],[485,56,380,62],[485,60,380,66],[485,64,380,70,"originalError"],[485,77,380,83],[485,82,380,88],[485,87,380,93],[485,88,380,94],[485,91,380,97],[485,96,380,102],[485,97,380,103],[485,100,380,106,"originalError"],[485,113,380,119],[485,114,380,120,"status"],[485,120,380,126],[485,121,380,127],[485,123,380,129],[486,16,381,24],[486,23,381,31],[487,18,381,33,"data"],[487,22,381,37],[487,24,381,39],[487,29,381,44],[488,18,381,46,"error"],[489,16,381,52],[489,17,381,53],[490,14,382,20],[491,12,383,16],[492,12,384,16],[492,18,384,22,"error"],[492,23,384,27],[493,10,385,12],[494,8,386,8],[494,9,386,9],[494,10,386,10],[495,6,387,4],[496,6,388,4],[497,0,389,0],[498,0,390,0],[499,0,391,0],[500,0,392,0],[501,0,393,0],[502,0,394,0],[503,0,395,0],[504,4,388,4],[505,6,388,4,"key"],[505,9,388,4],[506,6,388,4,"value"],[506,11,388,4],[506,13,396,4],[506,22,396,4,"getPublicUrl"],[506,34,396,16,"getPublicUrl"],[506,35,396,17,"path"],[506,39,396,21],[506,41,396,23,"options"],[506,48,396,30],[506,50,396,32],[507,8,397,8],[507,12,397,14,"_path"],[507,17,397,19],[507,20,397,22],[507,24,397,26],[507,25,397,27,"_getFinalPath"],[507,38,397,40],[507,39,397,41,"path"],[507,43,397,45],[507,44,397,46],[508,8,398,8],[508,12,398,14,"_queryString"],[508,24,398,26],[508,27,398,29],[508,29,398,31],[509,8,399,8],[509,12,399,14,"downloadQueryParam"],[509,30,399,32],[509,33,399,35],[509,34,399,36,"options"],[509,41,399,43],[509,46,399,48],[509,50,399,52],[509,54,399,56,"options"],[509,61,399,63],[509,66,399,68],[509,71,399,73],[509,72,399,74],[509,75,399,77],[509,80,399,82],[509,81,399,83],[509,84,399,86,"options"],[509,91,399,93],[509,92,399,94,"download"],[509,100,399,102],[509,104,400,14],[509,116,400,26,"options"],[509,123,400,33],[509,124,400,34,"download"],[509,132,400,42],[509,137,400,47],[509,141,400,51],[509,144,400,54],[509,146,400,56],[509,149,400,59,"options"],[509,156,400,66],[509,157,400,67,"download"],[509,165,400,75],[509,167,400,77],[509,170,401,14],[509,172,401,16],[510,8,402,8],[510,12,402,12,"downloadQueryParam"],[510,30,402,30],[510,35,402,35],[510,37,402,37],[510,39,402,39],[511,10,403,12,"_queryString"],[511,22,403,24],[511,23,403,25,"push"],[511,27,403,29],[511,28,403,30,"downloadQueryParam"],[511,46,403,48],[511,47,403,49],[512,8,404,8],[513,8,405,8],[513,12,405,14,"wantsTransformation"],[513,31,405,33],[513,34,405,36],[513,42,405,44,"options"],[513,49,405,51],[513,54,405,56],[513,58,405,60],[513,62,405,64,"options"],[513,69,405,71],[513,74,405,76],[513,79,405,81],[513,80,405,82],[513,83,405,85],[513,88,405,90],[513,89,405,91],[513,92,405,94,"options"],[513,99,405,101],[513,100,405,102,"transform"],[513,109,405,111],[513,110,405,112],[513,115,405,117],[513,126,405,128],[514,8,406,8],[514,12,406,14,"renderPath"],[514,22,406,24],[514,25,406,27,"wantsTransformation"],[514,44,406,46],[514,47,406,49],[514,61,406,63],[514,64,406,66],[514,72,406,74],[515,8,407,8],[515,12,407,14,"transformationQuery"],[515,31,407,33],[515,34,407,36],[515,38,407,40],[515,39,407,41,"transformOptsToQueryString"],[515,65,407,67],[515,66,407,68],[515,67,407,69,"options"],[515,74,407,76],[515,79,407,81],[515,83,407,85],[515,87,407,89,"options"],[515,94,407,96],[515,99,407,101],[515,104,407,106],[515,105,407,107],[515,108,407,110],[515,113,407,115],[515,114,407,116],[515,117,407,119,"options"],[515,124,407,126],[515,125,407,127,"transform"],[515,134,407,136],[515,139,407,141],[515,140,407,142],[515,141,407,143],[515,142,407,144],[516,8,408,8],[516,12,408,12,"transformationQuery"],[516,31,408,31],[516,36,408,36],[516,38,408,38],[516,40,408,40],[517,10,409,12,"_queryString"],[517,22,409,24],[517,23,409,25,"push"],[517,27,409,29],[517,28,409,30,"transformationQuery"],[517,47,409,49],[517,48,409,50],[518,8,410,8],[519,8,411,8],[519,12,411,12,"queryString"],[519,23,411,23],[519,26,411,26,"_queryString"],[519,38,411,38],[519,39,411,39,"join"],[519,43,411,43],[519,44,411,44],[519,47,411,47],[519,48,411,48],[520,8,412,8],[520,12,412,12,"queryString"],[520,23,412,23],[520,28,412,28],[520,30,412,30],[520,32,412,32],[521,10,413,12,"queryString"],[521,21,413,23],[521,24,413,26],[521,28,413,30,"queryString"],[521,39,413,41],[521,41,413,43],[522,8,414,8],[523,8,415,8],[523,15,415,15],[524,10,416,12,"data"],[524,14,416,16],[524,16,416,18],[525,12,416,20,"publicUrl"],[525,21,416,29],[525,23,416,31,"encodeURI"],[525,32,416,40],[525,33,416,41],[525,36,416,44],[525,40,416,48],[525,41,416,49,"url"],[525,44,416,52],[525,48,416,56,"renderPath"],[525,58,416,66],[525,69,416,77,"_path"],[525,74,416,82],[525,77,416,85,"queryString"],[525,88,416,96],[525,90,416,98],[526,10,416,100],[527,8,417,8],[527,9,417,9],[528,6,418,4],[529,6,419,4],[530,0,420,0],[531,0,421,0],[532,0,422,0],[533,0,423,0],[534,4,419,4],[535,6,419,4,"key"],[535,9,419,4],[536,6,419,4,"value"],[536,11,419,4],[536,13,424,4],[536,22,424,4,"remove"],[536,28,424,10,"remove"],[536,29,424,11,"paths"],[536,34,424,16],[536,36,424,18],[537,8,425,8],[537,15,425,15,"tslib_1"],[537,22,425,22],[537,23,425,23,"__awaiter"],[537,32,425,32],[537,33,425,33],[537,37,425,37],[537,39,425,39],[537,44,425,44],[537,45,425,45],[537,47,425,47],[537,52,425,52],[537,53,425,53],[537,55,425,55],[537,68,425,68],[538,10,426,12],[538,14,426,16],[539,12,427,16],[539,16,427,22,"data"],[539,20,427,26],[539,23,427,29],[539,29,427,35],[539,30,427,36],[539,31,427,37],[539,33,427,39,"fetch_1"],[539,40,427,46],[539,41,427,47,"remove"],[539,47,427,53],[539,49,427,55],[539,53,427,59],[539,54,427,60,"fetch"],[539,59,427,65],[539,61,427,67],[539,64,427,70],[539,68,427,74],[539,69,427,75,"url"],[539,72,427,78],[539,83,427,89],[539,87,427,93],[539,88,427,94,"bucketId"],[539,96,427,102],[539,98,427,104],[539,100,427,106],[540,14,427,108,"prefixes"],[540,22,427,116],[540,24,427,118,"paths"],[541,12,427,124],[541,13,427,125],[541,15,427,127],[542,14,427,129,"headers"],[542,21,427,136],[542,23,427,138],[542,27,427,142],[542,28,427,143,"headers"],[543,12,427,151],[543,13,427,152],[543,14,427,153],[544,12,428,16],[544,19,428,23],[545,14,428,25,"data"],[545,18,428,29],[546,14,428,31,"error"],[546,19,428,36],[546,21,428,38],[547,12,428,43],[547,13,428,44],[548,10,429,12],[548,11,429,13],[548,12,430,12],[548,19,430,19,"error"],[548,24,430,24],[548,26,430,26],[549,12,431,16],[549,16,431,20],[549,20,431,24],[549,21,431,25,"shouldThrowOnError"],[549,39,431,43],[549,41,431,45],[550,14,432,20],[550,20,432,26,"error"],[550,25,432,31],[551,12,433,16],[552,12,434,16],[552,16,434,20],[552,17,434,21],[552,18,434,22],[552,20,434,24,"errors_1"],[552,28,434,32],[552,29,434,33,"isStorageError"],[552,43,434,47],[552,45,434,49,"error"],[552,50,434,54],[552,51,434,55],[552,53,434,57],[553,14,435,20],[553,21,435,27],[554,16,435,29,"data"],[554,20,435,33],[554,22,435,35],[554,26,435,39],[555,16,435,41,"error"],[556,14,435,47],[556,15,435,48],[557,12,436,16],[558,12,437,16],[558,18,437,22,"error"],[558,23,437,27],[559,10,438,12],[560,8,439,8],[560,9,439,9],[560,10,439,10],[561,6,440,4],[562,6,441,4],[563,0,442,0],[564,0,443,0],[565,0,444,0],[566,6,445,4],[567,6,446,4],[568,6,447,4],[569,6,448,4],[570,6,449,4],[571,6,450,4],[572,6,451,4],[573,6,452,4],[574,6,453,4],[575,6,454,4],[576,6,455,4],[577,6,456,4],[578,6,457,4],[579,6,458,4],[580,6,459,4],[581,6,460,4],[582,6,461,4],[583,6,462,4],[584,6,463,4],[585,6,464,4],[586,6,465,4],[587,6,466,4],[588,6,467,4],[589,0,468,0],[590,0,469,0],[591,0,470,0],[592,0,471,0],[593,6,472,4],[594,6,473,4],[595,6,474,4],[596,6,475,4],[597,6,476,4],[598,6,477,4],[599,6,478,4],[600,6,479,4],[601,6,480,4],[602,6,481,4],[603,6,482,4],[604,6,483,4],[605,6,484,4],[606,6,485,4],[607,6,486,4],[608,6,487,4],[609,6,488,4],[610,6,489,4],[611,6,490,4],[612,6,491,4],[613,6,492,4],[614,6,493,4],[615,6,494,4],[616,6,495,4],[617,6,496,4],[618,6,497,4],[619,6,498,4],[620,6,499,4],[621,6,500,4],[622,0,501,0],[623,0,502,0],[624,0,503,0],[625,0,504,0],[626,4,500,4],[627,6,500,4,"key"],[627,9,500,4],[628,6,500,4,"value"],[628,11,500,4],[628,13,505,4],[628,22,505,4,"list"],[628,26,505,8,"list"],[628,27,505,9,"path"],[628,31,505,13],[628,33,505,15,"options"],[628,40,505,22],[628,42,505,24,"parameters"],[628,52,505,34],[628,54,505,36],[629,8,506,8],[629,15,506,15,"tslib_1"],[629,22,506,22],[629,23,506,23,"__awaiter"],[629,32,506,32],[629,33,506,33],[629,37,506,37],[629,39,506,39],[629,44,506,44],[629,45,506,45],[629,47,506,47],[629,52,506,52],[629,53,506,53],[629,55,506,55],[629,68,506,68],[630,10,507,12],[630,14,507,16],[631,12,508,16],[631,16,508,22,"body"],[631,20,508,26],[631,23,508,29,"Object"],[631,29,508,35],[631,30,508,36,"assign"],[631,36,508,42],[631,37,508,43,"Object"],[631,43,508,49],[631,44,508,50,"assign"],[631,50,508,56],[631,51,508,57,"Object"],[631,57,508,63],[631,58,508,64,"assign"],[631,64,508,70],[631,65,508,71],[631,66,508,72],[631,67,508,73],[631,69,508,75,"DEFAULT_SEARCH_OPTIONS"],[631,91,508,97],[631,92,508,98],[631,94,508,100,"options"],[631,101,508,107],[631,102,508,108],[631,104,508,110],[632,14,508,112,"prefix"],[632,20,508,118],[632,22,508,120,"path"],[632,26,508,124],[632,30,508,128],[633,12,508,131],[633,13,508,132],[633,14,508,133],[634,12,509,16],[634,16,509,22,"data"],[634,20,509,26],[634,23,509,29],[634,29,509,35],[634,30,509,36],[634,31,509,37],[634,33,509,39,"fetch_1"],[634,40,509,46],[634,41,509,47,"post"],[634,45,509,51],[634,47,509,53],[634,51,509,57],[634,52,509,58,"fetch"],[634,57,509,63],[634,59,509,65],[634,62,509,68],[634,66,509,72],[634,67,509,73,"url"],[634,70,509,76],[634,86,509,92],[634,90,509,96],[634,91,509,97,"bucketId"],[634,99,509,105],[634,101,509,107],[634,103,509,109,"body"],[634,107,509,113],[634,109,509,115],[635,14,509,117,"headers"],[635,21,509,124],[635,23,509,126],[635,27,509,130],[635,28,509,131,"headers"],[636,12,509,139],[636,13,509,140],[636,15,509,142,"parameters"],[636,25,509,152],[636,26,509,153],[637,12,510,16],[637,19,510,23],[638,14,510,25,"data"],[638,18,510,29],[639,14,510,31,"error"],[639,19,510,36],[639,21,510,38],[640,12,510,43],[640,13,510,44],[641,10,511,12],[641,11,511,13],[641,12,512,12],[641,19,512,19,"error"],[641,24,512,24],[641,26,512,26],[642,12,513,16],[642,16,513,20],[642,20,513,24],[642,21,513,25,"shouldThrowOnError"],[642,39,513,43],[642,41,513,45],[643,14,514,20],[643,20,514,26,"error"],[643,25,514,31],[644,12,515,16],[645,12,516,16],[645,16,516,20],[645,17,516,21],[645,18,516,22],[645,20,516,24,"errors_1"],[645,28,516,32],[645,29,516,33,"isStorageError"],[645,43,516,47],[645,45,516,49,"error"],[645,50,516,54],[645,51,516,55],[645,53,516,57],[646,14,517,20],[646,21,517,27],[647,16,517,29,"data"],[647,20,517,33],[647,22,517,35],[647,26,517,39],[648,16,517,41,"error"],[649,14,517,47],[649,15,517,48],[650,12,518,16],[651,12,519,16],[651,18,519,22,"error"],[651,23,519,27],[652,10,520,12],[653,8,521,8],[653,9,521,9],[653,10,521,10],[654,6,522,4],[655,6,523,4],[656,0,524,0],[657,0,525,0],[658,0,526,0],[659,0,527,0],[660,4,523,4],[661,6,523,4,"key"],[661,9,523,4],[662,6,523,4,"value"],[662,11,523,4],[662,13,528,4],[662,22,528,4,"listV2"],[662,28,528,10,"listV2"],[662,29,528,11,"options"],[662,36,528,18],[662,38,528,20,"parameters"],[662,48,528,30],[662,50,528,32],[663,8,529,8],[663,15,529,15,"tslib_1"],[663,22,529,22],[663,23,529,23,"__awaiter"],[663,32,529,32],[663,33,529,33],[663,37,529,37],[663,39,529,39],[663,44,529,44],[663,45,529,45],[663,47,529,47],[663,52,529,52],[663,53,529,53],[663,55,529,55],[663,68,529,68],[664,10,530,12],[664,14,530,16],[665,12,531,16],[665,16,531,22,"body"],[665,20,531,26],[665,23,531,29,"Object"],[665,29,531,35],[665,30,531,36,"assign"],[665,36,531,42],[665,37,531,43],[665,38,531,44],[665,39,531,45],[665,41,531,47,"options"],[665,48,531,54],[665,49,531,55],[666,12,532,16],[666,16,532,22,"data"],[666,20,532,26],[666,23,532,29],[666,29,532,35],[666,30,532,36],[666,31,532,37],[666,33,532,39,"fetch_1"],[666,40,532,46],[666,41,532,47,"post"],[666,45,532,51],[666,47,532,53],[666,51,532,57],[666,52,532,58,"fetch"],[666,57,532,63],[666,59,532,65],[666,62,532,68],[666,66,532,72],[666,67,532,73,"url"],[666,70,532,76],[666,89,532,95],[666,93,532,99],[666,94,532,100,"bucketId"],[666,102,532,108],[666,104,532,110],[666,106,532,112,"body"],[666,110,532,116],[666,112,532,118],[667,14,532,120,"headers"],[667,21,532,127],[667,23,532,129],[667,27,532,133],[667,28,532,134,"headers"],[668,12,532,142],[668,13,532,143],[668,15,532,145,"parameters"],[668,25,532,155],[668,26,532,156],[669,12,533,16],[669,19,533,23],[670,14,533,25,"data"],[670,18,533,29],[671,14,533,31,"error"],[671,19,533,36],[671,21,533,38],[672,12,533,43],[672,13,533,44],[673,10,534,12],[673,11,534,13],[673,12,535,12],[673,19,535,19,"error"],[673,24,535,24],[673,26,535,26],[674,12,536,16],[674,16,536,20],[674,20,536,24],[674,21,536,25,"shouldThrowOnError"],[674,39,536,43],[674,41,536,45],[675,14,537,20],[675,20,537,26,"error"],[675,25,537,31],[676,12,538,16],[677,12,539,16],[677,16,539,20],[677,17,539,21],[677,18,539,22],[677,20,539,24,"errors_1"],[677,28,539,32],[677,29,539,33,"isStorageError"],[677,43,539,47],[677,45,539,49,"error"],[677,50,539,54],[677,51,539,55],[677,53,539,57],[678,14,540,20],[678,21,540,27],[679,16,540,29,"data"],[679,20,540,33],[679,22,540,35],[679,26,540,39],[680,16,540,41,"error"],[681,14,540,47],[681,15,540,48],[682,12,541,16],[683,12,542,16],[683,18,542,22,"error"],[683,23,542,27],[684,10,543,12],[685,8,544,8],[685,9,544,9],[685,10,544,10],[686,6,545,4],[687,4,545,5],[688,6,545,5,"key"],[688,9,545,5],[689,6,545,5,"value"],[689,11,545,5],[689,13,546,4],[689,22,546,4,"encodeMetadata"],[689,36,546,18,"encodeMetadata"],[689,37,546,19,"metadata"],[689,45,546,27],[689,47,546,29],[690,8,547,8],[690,15,547,15,"JSON"],[690,19,547,19],[690,20,547,20,"stringify"],[690,29,547,29],[690,30,547,30,"metadata"],[690,38,547,38],[690,39,547,39],[691,6,548,4],[692,4,548,5],[693,6,548,5,"key"],[693,9,548,5],[694,6,548,5,"value"],[694,11,548,5],[694,13,549,4],[694,22,549,4,"toBase64"],[694,30,549,12,"toBase64"],[694,31,549,13,"data"],[694,35,549,17],[694,37,549,19],[695,8,550,8],[695,12,550,12],[695,19,550,19,"Buffer"],[695,25,550,25],[695,30,550,30],[695,41,550,41],[695,43,550,43],[696,10,551,12],[696,17,551,19,"Buffer"],[696,23,551,25],[696,24,551,26,"from"],[696,28,551,30],[696,29,551,31,"data"],[696,33,551,35],[696,34,551,36],[696,35,551,37,"toString"],[696,43,551,45],[696,44,551,46],[696,52,551,54],[696,53,551,55],[697,8,552,8],[698,8,553,8],[698,15,553,15,"btoa"],[698,19,553,19],[698,20,553,20,"data"],[698,24,553,24],[698,25,553,25],[699,6,554,4],[700,4,554,5],[701,6,554,5,"key"],[701,9,554,5],[702,6,554,5,"value"],[702,11,554,5],[702,13,555,4],[702,22,555,4,"_getFinalPath"],[702,35,555,17,"_getFinalPath"],[702,36,555,18,"path"],[702,40,555,22],[702,42,555,24],[703,8,556,8],[703,15,556,15],[703,18,556,18],[703,22,556,22],[703,23,556,23,"bucketId"],[703,31,556,31],[703,35,556,35,"path"],[703,39,556,39],[703,40,556,40,"replace"],[703,47,556,47],[703,48,556,48],[703,54,556,54],[703,56,556,56],[703,58,556,58],[703,59,556,59],[703,61,556,61],[704,6,557,4],[705,4,557,5],[706,6,557,5,"key"],[706,9,557,5],[707,6,557,5,"value"],[707,11,557,5],[707,13,558,4],[707,22,558,4,"_removeEmptyFolders"],[707,41,558,23,"_removeEmptyFolders"],[707,42,558,24,"path"],[707,46,558,28],[707,48,558,30],[708,8,559,8],[708,15,559,15,"path"],[708,19,559,19],[708,20,559,20,"replace"],[708,27,559,27],[708,28,559,28],[708,38,559,38],[708,40,559,40],[708,42,559,42],[708,43,559,43],[708,44,559,44,"replace"],[708,51,559,51],[708,52,559,52],[708,58,559,58],[708,60,559,60],[708,63,559,63],[708,64,559,64],[709,6,560,4],[710,4,560,5],[711,6,560,5,"key"],[711,9,560,5],[712,6,560,5,"value"],[712,11,560,5],[712,13,561,4],[712,22,561,4,"transformOptsToQueryString"],[712,48,561,30,"transformOptsToQueryString"],[712,49,561,31,"transform"],[712,58,561,40],[712,60,561,42],[713,8,562,8],[713,12,562,14,"params"],[713,18,562,20],[713,21,562,23],[713,23,562,25],[714,8,563,8],[714,12,563,12,"transform"],[714,21,563,21],[714,22,563,22,"width"],[714,27,563,27],[714,29,563,29],[715,10,564,12,"params"],[715,16,564,18],[715,17,564,19,"push"],[715,21,564,23],[715,22,564,24],[715,31,564,33,"transform"],[715,40,564,42],[715,41,564,43,"width"],[715,46,564,48],[715,48,564,50],[715,49,564,51],[716,8,565,8],[717,8,566,8],[717,12,566,12,"transform"],[717,21,566,21],[717,22,566,22,"height"],[717,28,566,28],[717,30,566,30],[718,10,567,12,"params"],[718,16,567,18],[718,17,567,19,"push"],[718,21,567,23],[718,22,567,24],[718,32,567,34,"transform"],[718,41,567,43],[718,42,567,44,"height"],[718,48,567,50],[718,50,567,52],[718,51,567,53],[719,8,568,8],[720,8,569,8],[720,12,569,12,"transform"],[720,21,569,21],[720,22,569,22,"resize"],[720,28,569,28],[720,30,569,30],[721,10,570,12,"params"],[721,16,570,18],[721,17,570,19,"push"],[721,21,570,23],[721,22,570,24],[721,32,570,34,"transform"],[721,41,570,43],[721,42,570,44,"resize"],[721,48,570,50],[721,50,570,52],[721,51,570,53],[722,8,571,8],[723,8,572,8],[723,12,572,12,"transform"],[723,21,572,21],[723,22,572,22,"format"],[723,28,572,28],[723,30,572,30],[724,10,573,12,"params"],[724,16,573,18],[724,17,573,19,"push"],[724,21,573,23],[724,22,573,24],[724,32,573,34,"transform"],[724,41,573,43],[724,42,573,44,"format"],[724,48,573,50],[724,50,573,52],[724,51,573,53],[725,8,574,8],[726,8,575,8],[726,12,575,12,"transform"],[726,21,575,21],[726,22,575,22,"quality"],[726,29,575,29],[726,31,575,31],[727,10,576,12,"params"],[727,16,576,18],[727,17,576,19,"push"],[727,21,576,23],[727,22,576,24],[727,33,576,35,"transform"],[727,42,576,44],[727,43,576,45,"quality"],[727,50,576,52],[727,52,576,54],[727,53,576,55],[728,8,577,8],[729,8,578,8],[729,15,578,15,"params"],[729,21,578,21],[729,22,578,22,"join"],[729,26,578,26],[729,27,578,27],[729,30,578,30],[729,31,578,31],[730,6,579,4],[731,4,579,5],[732,2,579,5],[733,2,581,0,"exports"],[733,9,581,7],[733,10,581,8,"default"],[733,17,581,15],[733,20,581,18,"StorageFileApi"],[733,34,581,32],[734,0,581,33],[734,3]],"functionMap":{"names":["<global>","StorageFileApi","constructor","throwOnError","uploadOrUpdate","tslib_1.__awaiter$argument_3","upload","uploadToSignedUrl","createSignedUploadUrl","update","move","copy","createSignedUrl","createSignedUrls","data.map$argument_0","download","downloadFn","info","exists","getPublicUrl","remove","list","listV2","encodeMetadata","toBase64","_getFinalPath","_removeEmptyFolders","transformOptsToQueryString"],"mappings":"AAA;ACoB;ICC;KDM;IEI;KFG;IGQ;uDCC;SDiD;KHC;IKO;uDDC;SCE;KLC;IMO;uDFC;SEsC;KNC;IOQ;uDHC;SGwB;KPC;IQO;uDJC;SIE;KRC;ISQ;uDLC;SKmB;KTC;IUQ;uDNC;SMmB;KVC;IWS;uDPC;SOoB;KXC;IYQ;uDRC;mCSO;sCTE;SQa;KZC;IcO;2BCM;UDG;KdE;IgBK;uDZC;SYiB;KhBC;IiBK;uDbC;SaoB;KjBC;IkBS;KlBsB;ImBM;uDfC;Sec;KnBC;IoBiE;uDhBC;SgBe;KpBC;IqBM;uDjBC;SiBe;KrBC;IsBC;KtBE;IuBC;KvBK;IwBC;KxBE;IyBC;KzBE;I0BC;K1BkB;CDC"}},"type":"js/module"}]}