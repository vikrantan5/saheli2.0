{"dependencies":[{"name":"./utils.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":24},"end":{"line":2,"column":38,"index":62}}],"key":"NIaSEHO1E48gsZc7jH9Ex1xTHgE=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.streamedQuery = streamedQuery;\n  var _utils = require(_dependencyMap[0], \"./utils.js\");\n  // src/streamedQuery.ts\n\n  function streamedQuery({\n    queryFn,\n    refetchMode = \"reset\",\n    maxChunks\n  }) {\n    return async context => {\n      const query = context.client.getQueryCache().find({\n        queryKey: context.queryKey,\n        exact: true\n      });\n      const isRefetch = !!query && query.state.data !== void 0;\n      if (isRefetch && refetchMode === \"reset\") {\n        query.setState({\n          status: \"pending\",\n          data: void 0,\n          error: null,\n          fetchStatus: \"fetching\"\n        });\n      }\n      let result = [];\n      const stream = await queryFn(context);\n      for await (const chunk of stream) {\n        if (context.signal.aborted) {\n          break;\n        }\n        if (!isRefetch || refetchMode !== \"replace\") {\n          context.client.setQueryData(context.queryKey, (prev = []) => {\n            return (0, _utils.addToEnd)(prev, chunk, maxChunks);\n          });\n        }\n        result = (0, _utils.addToEnd)(result, chunk, maxChunks);\n      }\n      if (isRefetch && refetchMode === \"replace\" && !context.signal.aborted) {\n        context.client.setQueryData(context.queryKey, result);\n      }\n      return context.client.getQueryData(context.queryKey);\n    };\n  }\n});","lineCount":47,"map":[[6,2,2,0],[6,6,2,0,"_utils"],[6,12,2,0],[6,15,2,0,"require"],[6,22,2,0],[6,23,2,0,"_dependencyMap"],[6,37,2,0],[7,2,1,0],[9,2,3,0],[9,11,3,9,"streamedQuery"],[9,24,3,22,"streamedQuery"],[9,25,3,23],[10,4,4,2,"queryFn"],[10,11,4,9],[11,4,5,2,"refetchMode"],[11,15,5,13],[11,18,5,16],[11,25,5,23],[12,4,6,2,"maxChunks"],[13,2,7,0],[13,3,7,1],[13,5,7,3],[14,4,8,2],[14,11,8,9],[14,17,8,16,"context"],[14,24,8,23],[14,28,8,28],[15,6,9,4],[15,12,9,10,"query"],[15,17,9,15],[15,20,9,18,"context"],[15,27,9,25],[15,28,9,26,"client"],[15,34,9,32],[15,35,9,33,"getQueryCache"],[15,48,9,46],[15,49,9,47],[15,50,9,48],[15,51,9,49,"find"],[15,55,9,53],[15,56,9,54],[16,8,9,56,"queryKey"],[16,16,9,64],[16,18,9,66,"context"],[16,25,9,73],[16,26,9,74,"queryKey"],[16,34,9,82],[17,8,9,84,"exact"],[17,13,9,89],[17,15,9,91],[18,6,9,96],[18,7,9,97],[18,8,9,98],[19,6,10,4],[19,12,10,10,"isRefetch"],[19,21,10,19],[19,24,10,22],[19,25,10,23],[19,26,10,24,"query"],[19,31,10,29],[19,35,10,33,"query"],[19,40,10,38],[19,41,10,39,"state"],[19,46,10,44],[19,47,10,45,"data"],[19,51,10,49],[19,56,10,54],[19,61,10,59],[19,62,10,60],[20,6,11,4],[20,10,11,8,"isRefetch"],[20,19,11,17],[20,23,11,21,"refetchMode"],[20,34,11,32],[20,39,11,37],[20,46,11,44],[20,48,11,46],[21,8,12,6,"query"],[21,13,12,11],[21,14,12,12,"setState"],[21,22,12,20],[21,23,12,21],[22,10,13,8,"status"],[22,16,13,14],[22,18,13,16],[22,27,13,25],[23,10,14,8,"data"],[23,14,14,12],[23,16,14,14],[23,21,14,19],[23,22,14,20],[24,10,15,8,"error"],[24,15,15,13],[24,17,15,15],[24,21,15,19],[25,10,16,8,"fetchStatus"],[25,21,16,19],[25,23,16,21],[26,8,17,6],[26,9,17,7],[26,10,17,8],[27,6,18,4],[28,6,19,4],[28,10,19,8,"result"],[28,16,19,14],[28,19,19,17],[28,21,19,19],[29,6,20,4],[29,12,20,10,"stream"],[29,18,20,16],[29,21,20,19],[29,27,20,25,"queryFn"],[29,34,20,32],[29,35,20,33,"context"],[29,42,20,40],[29,43,20,41],[30,6,21,4],[30,17,21,15],[30,23,21,21,"chunk"],[30,28,21,26],[30,32,21,30,"stream"],[30,38,21,36],[30,40,21,38],[31,8,22,6],[31,12,22,10,"context"],[31,19,22,17],[31,20,22,18,"signal"],[31,26,22,24],[31,27,22,25,"aborted"],[31,34,22,32],[31,36,22,34],[32,10,23,8],[33,8,24,6],[34,8,25,6],[34,12,25,10],[34,13,25,11,"isRefetch"],[34,22,25,20],[34,26,25,24,"refetchMode"],[34,37,25,35],[34,42,25,40],[34,51,25,49],[34,53,25,51],[35,10,26,8,"context"],[35,17,26,15],[35,18,26,16,"client"],[35,24,26,22],[35,25,26,23,"setQueryData"],[35,37,26,35],[35,38,27,10,"context"],[35,45,27,17],[35,46,27,18,"queryKey"],[35,54,27,26],[35,56,28,10],[35,57,28,11,"prev"],[35,61,28,15],[35,64,28,18],[35,66,28,20],[35,71,28,25],[36,12,29,12],[36,19,29,19],[36,23,29,19,"addToEnd"],[36,38,29,27],[36,40,29,28,"prev"],[36,44,29,32],[36,46,29,34,"chunk"],[36,51,29,39],[36,53,29,41,"maxChunks"],[36,62,29,50],[36,63,29,51],[37,10,30,10],[37,11,31,8],[37,12,31,9],[38,8,32,6],[39,8,33,6,"result"],[39,14,33,12],[39,17,33,15],[39,21,33,15,"addToEnd"],[39,36,33,23],[39,38,33,24,"result"],[39,44,33,30],[39,46,33,32,"chunk"],[39,51,33,37],[39,53,33,39,"maxChunks"],[39,62,33,48],[39,63,33,49],[40,6,34,4],[41,6,35,4],[41,10,35,8,"isRefetch"],[41,19,35,17],[41,23,35,21,"refetchMode"],[41,34,35,32],[41,39,35,37],[41,48,35,46],[41,52,35,50],[41,53,35,51,"context"],[41,60,35,58],[41,61,35,59,"signal"],[41,67,35,65],[41,68,35,66,"aborted"],[41,75,35,73],[41,77,35,75],[42,8,36,6,"context"],[42,15,36,13],[42,16,36,14,"client"],[42,22,36,20],[42,23,36,21,"setQueryData"],[42,35,36,33],[42,36,36,34,"context"],[42,43,36,41],[42,44,36,42,"queryKey"],[42,52,36,50],[42,54,36,52,"result"],[42,60,36,58],[42,61,36,59],[43,6,37,4],[44,6,38,4],[44,13,38,11,"context"],[44,20,38,18],[44,21,38,19,"client"],[44,27,38,25],[44,28,38,26,"getQueryData"],[44,40,38,38],[44,41,38,39,"context"],[44,48,38,46],[44,49,38,47,"queryKey"],[44,57,38,55],[44,58,38,56],[45,4,39,2],[45,5,39,3],[46,2,40,0],[47,0,40,1],[47,3]],"functionMap":{"names":["<global>","streamedQuery","<anonymous>","context.client.setQueryData$argument_1"],"mappings":"AAA;ACE;SCK;UCoB;WDE;GDS;CDC"}},"type":"js/module"}]}