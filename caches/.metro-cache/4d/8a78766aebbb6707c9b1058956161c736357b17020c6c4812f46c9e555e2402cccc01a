{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/toArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"yxbT34yjmkVZuhOKwnPlwW2nTdA=","exportNames":["*"]}},{"name":"escape-string-regexp","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":15},"end":{"line":3,"column":54,"index":69}}],"key":"Opxn8Ttfh7QNGeF0y+BQ6rRbDGo=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.extractPathFromURL = extractPathFromURL;\n  var _toArray2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/toArray\"));\n  var _escapeStringRegexp = _interopRequireDefault(require(_dependencyMap[2], \"escape-string-regexp\"));\n  function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\n  function extractPathFromURL(prefixes, url) {\n    for (var prefix of prefixes) {\n      var protocol = prefix.match(/^[^:]+:/)?.[0] ?? '';\n      var host = prefix.replace(new RegExp(`^${(0, _escapeStringRegexp.default)(protocol)}`), '').replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n      .replace(/^\\//, ''); // Remove extra leading slash\n\n      var prefixRegex = new RegExp(`^${(0, _escapeStringRegexp.default)(protocol)}(/)*${host.split('.').map(it => it === '*' ? '[^/]+' : (0, _escapeStringRegexp.default)(it)).join('\\\\.')}`);\n      var _url$split = url.split('?'),\n        _url$split2 = (0, _toArray2.default)(_url$split),\n        originAndPath = _url$split2[0],\n        searchParams = _arrayLikeToArray(_url$split2).slice(1);\n      var normalizedURL = originAndPath.replace(/\\/+/g, '/').concat(searchParams.length ? `?${searchParams.join('?')}` : '');\n      if (prefixRegex.test(normalizedURL)) {\n        return normalizedURL.replace(prefixRegex, '');\n      }\n    }\n    return undefined;\n  }\n});","lineCount":30,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_interopRequireDefault"],[4,28,1,13],[4,31,1,13,"require"],[4,38,1,13],[4,39,1,13,"_dependencyMap"],[4,53,1,13],[5,2,1,13,"Object"],[5,8,1,13],[5,9,1,13,"defineProperty"],[5,23,1,13],[5,24,1,13,"exports"],[5,31,1,13],[6,4,1,13,"value"],[6,9,1,13],[7,2,1,13],[8,2,1,13,"exports"],[8,9,1,13],[8,10,1,13,"extractPathFromURL"],[8,28,1,13],[8,31,1,13,"extractPathFromURL"],[8,49,1,13],[9,2,1,13],[9,6,1,13,"_toArray2"],[9,15,1,13],[9,18,1,13,"_interopRequireDefault"],[9,40,1,13],[9,41,1,13,"require"],[9,48,1,13],[9,49,1,13,"_dependencyMap"],[9,63,1,13],[10,2,3,0],[10,6,3,0,"_escapeStringRegexp"],[10,25,3,0],[10,28,3,0,"_interopRequireDefault"],[10,50,3,0],[10,51,3,0,"require"],[10,58,3,0],[10,59,3,0,"_dependencyMap"],[10,73,3,0],[11,2,3,54],[11,11,3,54,"_arrayLikeToArray"],[11,29,3,54,"r"],[11,30,3,54],[11,32,3,54,"a"],[11,33,3,54],[11,46,3,54,"a"],[11,47,3,54],[11,51,3,54,"a"],[11,52,3,54],[11,55,3,54,"r"],[11,56,3,54],[11,57,3,54,"length"],[11,63,3,54],[11,69,3,54,"a"],[11,70,3,54],[11,73,3,54,"r"],[11,74,3,54],[11,75,3,54,"length"],[11,81,3,54],[11,93,3,54,"e"],[11,94,3,54],[11,100,3,54,"n"],[11,101,3,54],[11,104,3,54,"Array"],[11,109,3,54],[11,110,3,54,"a"],[11,111,3,54],[11,114,3,54,"e"],[11,115,3,54],[11,118,3,54,"a"],[11,119,3,54],[11,121,3,54,"e"],[11,122,3,54],[11,126,3,54,"n"],[11,127,3,54],[11,128,3,54,"e"],[11,129,3,54],[11,133,3,54,"r"],[11,134,3,54],[11,135,3,54,"e"],[11,136,3,54],[11,146,3,54,"n"],[11,147,3,54],[12,2,4,7],[12,11,4,16,"extractPathFromURL"],[12,29,4,34,"extractPathFromURL"],[12,30,4,35,"prefixes"],[12,38,4,43],[12,40,4,45,"url"],[12,43,4,48],[12,45,4,50],[13,4,5,2],[13,9,5,7],[13,13,5,13,"prefix"],[13,19,5,19],[13,23,5,23,"prefixes"],[13,31,5,31],[13,33,5,33],[14,6,6,4],[14,10,6,10,"protocol"],[14,18,6,18],[14,21,6,21,"prefix"],[14,27,6,27],[14,28,6,28,"match"],[14,33,6,33],[14,34,6,34],[14,43,6,43],[14,44,6,44],[14,47,6,47],[14,48,6,48],[14,49,6,49],[14,53,6,53],[14,55,6,55],[15,6,7,4],[15,10,7,10,"host"],[15,14,7,14],[15,17,7,17,"prefix"],[15,23,7,23],[15,24,7,24,"replace"],[15,31,7,31],[15,32,7,32],[15,36,7,36,"RegExp"],[15,42,7,42],[15,43,7,43],[15,47,7,47],[15,51,7,47,"escapeStringRegexp"],[15,78,7,65],[15,80,7,66,"protocol"],[15,88,7,74],[15,89,7,75],[15,91,7,77],[15,92,7,78],[15,94,7,80],[15,96,7,82],[15,97,7,83],[15,98,7,84,"replace"],[15,105,7,91],[15,106,7,92],[15,112,7,98],[15,114,7,100],[15,117,7,103],[15,118,7,104],[15,119,7,105],[16,6,7,105],[16,7,8,5,"replace"],[16,14,8,12],[16,15,8,13],[16,20,8,18],[16,22,8,20],[16,24,8,22],[16,25,8,23],[16,26,8,24],[16,27,8,25],[18,6,10,4],[18,10,10,10,"prefixRegex"],[18,21,10,21],[18,24,10,24],[18,28,10,28,"RegExp"],[18,34,10,34],[18,35,10,35],[18,39,10,39],[18,43,10,39,"escapeStringRegexp"],[18,70,10,57],[18,72,10,58,"protocol"],[18,80,10,66],[18,81,10,67],[18,88,10,74,"host"],[18,92,10,78],[18,93,10,79,"split"],[18,98,10,84],[18,99,10,85],[18,102,10,88],[18,103,10,89],[18,104,10,90,"map"],[18,107,10,93],[18,108,10,94,"it"],[18,110,10,96],[18,114,10,100,"it"],[18,116,10,102],[18,121,10,107],[18,124,10,110],[18,127,10,113],[18,134,10,120],[18,137,10,123],[18,141,10,123,"escapeStringRegexp"],[18,168,10,141],[18,170,10,142,"it"],[18,172,10,144],[18,173,10,145],[18,174,10,146],[18,175,10,147,"join"],[18,179,10,151],[18,180,10,152],[18,185,10,157],[18,186,10,158],[18,188,10,160],[18,189,10,161],[19,6,11,4],[19,10,11,4,"_url$split"],[19,20,11,4],[19,23,11,45,"url"],[19,26,11,48],[19,27,11,49,"split"],[19,32,11,54],[19,33,11,55],[19,36,11,58],[19,37,11,59],[20,8,11,59,"_url$split2"],[20,19,11,59],[20,26,11,59,"_toArray2"],[20,35,11,59],[20,36,11,59,"default"],[20,43,11,59],[20,45,11,59,"_url$split"],[20,55,11,59],[21,8,11,11,"originAndPath"],[21,21,11,24],[21,24,11,24,"_url$split2"],[21,35,11,24],[22,8,11,29,"searchParams"],[22,20,11,41],[22,23,11,41,"_arrayLikeToArray"],[22,40,11,41],[22,41,11,41,"_url$split2"],[22,52,11,41],[22,54,11,41,"slice"],[22,59,11,41],[23,6,12,4],[23,10,12,10,"normalizedURL"],[23,23,12,23],[23,26,12,26,"originAndPath"],[23,39,12,39],[23,40,12,40,"replace"],[23,47,12,47],[23,48,12,48],[23,54,12,54],[23,56,12,56],[23,59,12,59],[23,60,12,60],[23,61,12,61,"concat"],[23,67,12,67],[23,68,12,68,"searchParams"],[23,80,12,80],[23,81,12,81,"length"],[23,87,12,87],[23,90,12,90],[23,94,12,94,"searchParams"],[23,106,12,106],[23,107,12,107,"join"],[23,111,12,111],[23,112,12,112],[23,115,12,115],[23,116,12,116],[23,118,12,118],[23,121,12,121],[23,123,12,123],[23,124,12,124],[24,6,13,4],[24,10,13,8,"prefixRegex"],[24,21,13,19],[24,22,13,20,"test"],[24,26,13,24],[24,27,13,25,"normalizedURL"],[24,40,13,38],[24,41,13,39],[24,43,13,41],[25,8,14,6],[25,15,14,13,"normalizedURL"],[25,28,14,26],[25,29,14,27,"replace"],[25,36,14,34],[25,37,14,35,"prefixRegex"],[25,48,14,46],[25,50,14,48],[25,52,14,50],[25,53,14,51],[26,6,15,4],[27,4,16,2],[28,4,17,2],[28,11,17,9,"undefined"],[28,20,17,18],[29,2,18,0],[30,0,18,1],[30,3]],"functionMap":{"names":["<global>","extractPathFromURL","host.split.map$argument_0"],"mappings":"AAA;OCG;8FCM,mDD;CDQ"}},"type":"js/module"}]}