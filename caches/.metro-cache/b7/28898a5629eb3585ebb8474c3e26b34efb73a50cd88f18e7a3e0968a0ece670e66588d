{"dependencies":[{"name":"tslib","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":16,"index":93},"end":{"line":3,"column":32,"index":109}}],"key":"vm88vOsSPZItrLOmMEyUuGkd1y4=","exportNames":["*"]}},{"name":"@supabase/node-fetch","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":45,"index":170},"end":{"line":5,"column":76,"index":201}}],"key":"N2iHN7T/eRWsO1F+2LWpBs4eG0U=","exportNames":["*"]}},{"name":"./PostgrestError","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":49,"index":253},"end":{"line":6,"column":76,"index":280}}],"key":"Ek2QNNEtzKsk35jS8iyuZ6VFiDk=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  const tslib_1 = require(_dependencyMap[0], \"tslib\");\n  // @ts-ignore\n  const node_fetch_1 = tslib_1.__importDefault(require(_dependencyMap[1], \"@supabase/node-fetch\"));\n  const PostgrestError_1 = tslib_1.__importDefault(require(_dependencyMap[2], \"./PostgrestError\"));\n  class PostgrestBuilder {\n    constructor(builder) {\n      var _a, _b;\n      this.shouldThrowOnError = false;\n      this.method = builder.method;\n      this.url = builder.url;\n      this.headers = new Headers(builder.headers);\n      this.schema = builder.schema;\n      this.body = builder.body;\n      this.shouldThrowOnError = (_a = builder.shouldThrowOnError) !== null && _a !== void 0 ? _a : false;\n      this.signal = builder.signal;\n      this.isMaybeSingle = (_b = builder.isMaybeSingle) !== null && _b !== void 0 ? _b : false;\n      if (builder.fetch) {\n        this.fetch = builder.fetch;\n      } else if (typeof fetch === 'undefined') {\n        this.fetch = node_fetch_1.default;\n      } else {\n        this.fetch = fetch;\n      }\n    }\n    /**\n     * If there's an error with the query, throwOnError will reject the promise by\n     * throwing the error instead of returning it as part of a successful response.\n     *\n     * {@link https://github.com/supabase/supabase-js/issues/92}\n     */\n    throwOnError() {\n      this.shouldThrowOnError = true;\n      return this;\n    }\n    /**\n     * Set an HTTP header for the request.\n     */\n    setHeader(name, value) {\n      this.headers = new Headers(this.headers);\n      this.headers.set(name, value);\n      return this;\n    }\n    then(onfulfilled, onrejected) {\n      // https://postgrest.org/en/stable/api.html#switching-schemas\n      if (this.schema === undefined) {\n        // skip\n      } else if (['GET', 'HEAD'].includes(this.method)) {\n        this.headers.set('Accept-Profile', this.schema);\n      } else {\n        this.headers.set('Content-Profile', this.schema);\n      }\n      if (this.method !== 'GET' && this.method !== 'HEAD') {\n        this.headers.set('Content-Type', 'application/json');\n      }\n      // NOTE: Invoke w/o `this` to avoid illegal invocation error.\n      // https://github.com/supabase/postgrest-js/pull/247\n      const _fetch = this.fetch;\n      let res = _fetch(this.url.toString(), {\n        method: this.method,\n        headers: this.headers,\n        body: JSON.stringify(this.body),\n        signal: this.signal\n      }).then(async res => {\n        var _a, _b, _c, _d;\n        let error = null;\n        let data = null;\n        let count = null;\n        let status = res.status;\n        let statusText = res.statusText;\n        if (res.ok) {\n          if (this.method !== 'HEAD') {\n            const body = await res.text();\n            if (body === '') {\n              // Prefer: return=minimal\n            } else if (this.headers.get('Accept') === 'text/csv') {\n              data = body;\n            } else if (this.headers.get('Accept') && ((_a = this.headers.get('Accept')) === null || _a === void 0 ? void 0 : _a.includes('application/vnd.pgrst.plan+text'))) {\n              data = body;\n            } else {\n              data = JSON.parse(body);\n            }\n          }\n          const countHeader = (_b = this.headers.get('Prefer')) === null || _b === void 0 ? void 0 : _b.match(/count=(exact|planned|estimated)/);\n          const contentRange = (_c = res.headers.get('content-range')) === null || _c === void 0 ? void 0 : _c.split('/');\n          if (countHeader && contentRange && contentRange.length > 1) {\n            count = parseInt(contentRange[1]);\n          }\n          // Temporary partial fix for https://github.com/supabase/postgrest-js/issues/361\n          // Issue persists e.g. for `.insert([...]).select().maybeSingle()`\n          if (this.isMaybeSingle && this.method === 'GET' && Array.isArray(data)) {\n            if (data.length > 1) {\n              error = {\n                // https://github.com/PostgREST/postgrest/blob/a867d79c42419af16c18c3fb019eba8df992626f/src/PostgREST/Error.hs#L553\n                code: 'PGRST116',\n                details: `Results contain ${data.length} rows, application/vnd.pgrst.object+json requires 1 row`,\n                hint: null,\n                message: 'JSON object requested, multiple (or no) rows returned'\n              };\n              data = null;\n              count = null;\n              status = 406;\n              statusText = 'Not Acceptable';\n            } else if (data.length === 1) {\n              data = data[0];\n            } else {\n              data = null;\n            }\n          }\n        } else {\n          const body = await res.text();\n          try {\n            error = JSON.parse(body);\n            // Workaround for https://github.com/supabase/postgrest-js/issues/295\n            if (Array.isArray(error) && res.status === 404) {\n              data = [];\n              error = null;\n              status = 200;\n              statusText = 'OK';\n            }\n          } catch (_e) {\n            // Workaround for https://github.com/supabase/postgrest-js/issues/295\n            if (res.status === 404 && body === '') {\n              status = 204;\n              statusText = 'No Content';\n            } else {\n              error = {\n                message: body\n              };\n            }\n          }\n          if (error && this.isMaybeSingle && ((_d = error === null || error === void 0 ? void 0 : error.details) === null || _d === void 0 ? void 0 : _d.includes('0 rows'))) {\n            error = null;\n            status = 200;\n            statusText = 'OK';\n          }\n          if (error && this.shouldThrowOnError) {\n            throw new PostgrestError_1.default(error);\n          }\n        }\n        const postgrestResponse = {\n          error,\n          data,\n          count,\n          status,\n          statusText\n        };\n        return postgrestResponse;\n      });\n      if (!this.shouldThrowOnError) {\n        res = res.catch(fetchError => {\n          var _a, _b, _c;\n          return {\n            error: {\n              message: `${(_a = fetchError === null || fetchError === void 0 ? void 0 : fetchError.name) !== null && _a !== void 0 ? _a : 'FetchError'}: ${fetchError === null || fetchError === void 0 ? void 0 : fetchError.message}`,\n              details: `${(_b = fetchError === null || fetchError === void 0 ? void 0 : fetchError.stack) !== null && _b !== void 0 ? _b : ''}`,\n              hint: '',\n              code: `${(_c = fetchError === null || fetchError === void 0 ? void 0 : fetchError.code) !== null && _c !== void 0 ? _c : ''}`\n            },\n            data: null,\n            count: null,\n            status: 0,\n            statusText: ''\n          };\n        });\n      }\n      return res.then(onfulfilled, onrejected);\n    }\n    /**\n     * Override the type of the returned `data`.\n     *\n     * @typeParam NewResult - The new result type to override with\n     * @deprecated Use overrideTypes<yourType, { merge: false }>() method at the end of your call chain instead\n     */\n    returns() {\n      /* istanbul ignore next */\n      return this;\n    }\n    /**\n     * Override the type of the returned `data` field in the response.\n     *\n     * @typeParam NewResult - The new type to cast the response data to\n     * @typeParam Options - Optional type configuration (defaults to { merge: true })\n     * @typeParam Options.merge - When true, merges the new type with existing return type. When false, replaces the existing types entirely (defaults to true)\n     * @example\n     * ```typescript\n     * // Merge with existing types (default behavior)\n     * const query = supabase\n     *   .from('users')\n     *   .select()\n     *   .overrideTypes<{ custom_field: string }>()\n     *\n     * // Replace existing types completely\n     * const replaceQuery = supabase\n     *   .from('users')\n     *   .select()\n     *   .overrideTypes<{ id: number; name: string }, { merge: false }>()\n     * ```\n     * @returns A PostgrestBuilder instance with the new type\n     */\n    overrideTypes() {\n      return this;\n    }\n  }\n  exports.default = PostgrestBuilder;\n});","lineCount":211,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0],[7,8,3,6,"tslib_1"],[7,15,3,13],[7,18,3,16,"require"],[7,25,3,23],[7,26,3,23,"_dependencyMap"],[7,40,3,23],[7,52,3,31],[7,53,3,32],[8,2,4,0],[9,2,5,0],[9,8,5,6,"node_fetch_1"],[9,20,5,18],[9,23,5,21,"tslib_1"],[9,30,5,28],[9,31,5,29,"__importDefault"],[9,46,5,44],[9,47,5,45,"require"],[9,54,5,52],[9,55,5,52,"_dependencyMap"],[9,69,5,52],[9,96,5,75],[9,97,5,76],[9,98,5,77],[10,2,6,0],[10,8,6,6,"PostgrestError_1"],[10,24,6,22],[10,27,6,25,"tslib_1"],[10,34,6,32],[10,35,6,33,"__importDefault"],[10,50,6,48],[10,51,6,49,"require"],[10,58,6,56],[10,59,6,56,"_dependencyMap"],[10,73,6,56],[10,96,6,75],[10,97,6,76],[10,98,6,77],[11,2,7,0],[11,8,7,6,"PostgrestBuilder"],[11,24,7,22],[11,25,7,23],[12,4,8,4,"constructor"],[12,15,8,15,"constructor"],[12,16,8,16,"builder"],[12,23,8,23],[12,25,8,25],[13,6,9,8],[13,10,9,12,"_a"],[13,12,9,14],[13,14,9,16,"_b"],[13,16,9,18],[14,6,10,8],[14,10,10,12],[14,11,10,13,"shouldThrowOnError"],[14,29,10,31],[14,32,10,34],[14,37,10,39],[15,6,11,8],[15,10,11,12],[15,11,11,13,"method"],[15,17,11,19],[15,20,11,22,"builder"],[15,27,11,29],[15,28,11,30,"method"],[15,34,11,36],[16,6,12,8],[16,10,12,12],[16,11,12,13,"url"],[16,14,12,16],[16,17,12,19,"builder"],[16,24,12,26],[16,25,12,27,"url"],[16,28,12,30],[17,6,13,8],[17,10,13,12],[17,11,13,13,"headers"],[17,18,13,20],[17,21,13,23],[17,25,13,27,"Headers"],[17,32,13,34],[17,33,13,35,"builder"],[17,40,13,42],[17,41,13,43,"headers"],[17,48,13,50],[17,49,13,51],[18,6,14,8],[18,10,14,12],[18,11,14,13,"schema"],[18,17,14,19],[18,20,14,22,"builder"],[18,27,14,29],[18,28,14,30,"schema"],[18,34,14,36],[19,6,15,8],[19,10,15,12],[19,11,15,13,"body"],[19,15,15,17],[19,18,15,20,"builder"],[19,25,15,27],[19,26,15,28,"body"],[19,30,15,32],[20,6,16,8],[20,10,16,12],[20,11,16,13,"shouldThrowOnError"],[20,29,16,31],[20,32,16,34],[20,33,16,35,"_a"],[20,35,16,37],[20,38,16,40,"builder"],[20,45,16,47],[20,46,16,48,"shouldThrowOnError"],[20,64,16,66],[20,70,16,72],[20,74,16,76],[20,78,16,80,"_a"],[20,80,16,82],[20,85,16,87],[20,90,16,92],[20,91,16,93],[20,94,16,96,"_a"],[20,96,16,98],[20,99,16,101],[20,104,16,106],[21,6,17,8],[21,10,17,12],[21,11,17,13,"signal"],[21,17,17,19],[21,20,17,22,"builder"],[21,27,17,29],[21,28,17,30,"signal"],[21,34,17,36],[22,6,18,8],[22,10,18,12],[22,11,18,13,"isMaybeSingle"],[22,24,18,26],[22,27,18,29],[22,28,18,30,"_b"],[22,30,18,32],[22,33,18,35,"builder"],[22,40,18,42],[22,41,18,43,"isMaybeSingle"],[22,54,18,56],[22,60,18,62],[22,64,18,66],[22,68,18,70,"_b"],[22,70,18,72],[22,75,18,77],[22,80,18,82],[22,81,18,83],[22,84,18,86,"_b"],[22,86,18,88],[22,89,18,91],[22,94,18,96],[23,6,19,8],[23,10,19,12,"builder"],[23,17,19,19],[23,18,19,20,"fetch"],[23,23,19,25],[23,25,19,27],[24,8,20,12],[24,12,20,16],[24,13,20,17,"fetch"],[24,18,20,22],[24,21,20,25,"builder"],[24,28,20,32],[24,29,20,33,"fetch"],[24,34,20,38],[25,6,21,8],[25,7,21,9],[25,13,22,13],[25,17,22,17],[25,24,22,24,"fetch"],[25,29,22,29],[25,34,22,34],[25,45,22,45],[25,47,22,47],[26,8,23,12],[26,12,23,16],[26,13,23,17,"fetch"],[26,18,23,22],[26,21,23,25,"node_fetch_1"],[26,33,23,37],[26,34,23,38,"default"],[26,41,23,45],[27,6,24,8],[27,7,24,9],[27,13,25,13],[28,8,26,12],[28,12,26,16],[28,13,26,17,"fetch"],[28,18,26,22],[28,21,26,25,"fetch"],[28,26,26,30],[29,6,27,8],[30,4,28,4],[31,4,29,4],[32,0,30,0],[33,0,31,0],[34,0,32,0],[35,0,33,0],[36,0,34,0],[37,4,35,4,"throwOnError"],[37,16,35,16,"throwOnError"],[37,17,35,16],[37,19,35,19],[38,6,36,8],[38,10,36,12],[38,11,36,13,"shouldThrowOnError"],[38,29,36,31],[38,32,36,34],[38,36,36,38],[39,6,37,8],[39,13,37,15],[39,17,37,19],[40,4,38,4],[41,4,39,4],[42,0,40,0],[43,0,41,0],[44,4,42,4,"setHeader"],[44,13,42,13,"setHeader"],[44,14,42,14,"name"],[44,18,42,18],[44,20,42,20,"value"],[44,25,42,25],[44,27,42,27],[45,6,43,8],[45,10,43,12],[45,11,43,13,"headers"],[45,18,43,20],[45,21,43,23],[45,25,43,27,"Headers"],[45,32,43,34],[45,33,43,35],[45,37,43,39],[45,38,43,40,"headers"],[45,45,43,47],[45,46,43,48],[46,6,44,8],[46,10,44,12],[46,11,44,13,"headers"],[46,18,44,20],[46,19,44,21,"set"],[46,22,44,24],[46,23,44,25,"name"],[46,27,44,29],[46,29,44,31,"value"],[46,34,44,36],[46,35,44,37],[47,6,45,8],[47,13,45,15],[47,17,45,19],[48,4,46,4],[49,4,47,4,"then"],[49,8,47,8,"then"],[49,9,47,9,"onfulfilled"],[49,20,47,20],[49,22,47,22,"onrejected"],[49,32,47,32],[49,34,47,34],[50,6,48,8],[51,6,49,8],[51,10,49,12],[51,14,49,16],[51,15,49,17,"schema"],[51,21,49,23],[51,26,49,28,"undefined"],[51,35,49,37],[51,37,49,39],[52,8,50,12],[53,6,50,12],[53,7,51,9],[53,13,52,13],[53,17,52,17],[53,18,52,18],[53,23,52,23],[53,25,52,25],[53,31,52,31],[53,32,52,32],[53,33,52,33,"includes"],[53,41,52,41],[53,42,52,42],[53,46,52,46],[53,47,52,47,"method"],[53,53,52,53],[53,54,52,54],[53,56,52,56],[54,8,53,12],[54,12,53,16],[54,13,53,17,"headers"],[54,20,53,24],[54,21,53,25,"set"],[54,24,53,28],[54,25,53,29],[54,41,53,45],[54,43,53,47],[54,47,53,51],[54,48,53,52,"schema"],[54,54,53,58],[54,55,53,59],[55,6,54,8],[55,7,54,9],[55,13,55,13],[56,8,56,12],[56,12,56,16],[56,13,56,17,"headers"],[56,20,56,24],[56,21,56,25,"set"],[56,24,56,28],[56,25,56,29],[56,42,56,46],[56,44,56,48],[56,48,56,52],[56,49,56,53,"schema"],[56,55,56,59],[56,56,56,60],[57,6,57,8],[58,6,58,8],[58,10,58,12],[58,14,58,16],[58,15,58,17,"method"],[58,21,58,23],[58,26,58,28],[58,31,58,33],[58,35,58,37],[58,39,58,41],[58,40,58,42,"method"],[58,46,58,48],[58,51,58,53],[58,57,58,59],[58,59,58,61],[59,8,59,12],[59,12,59,16],[59,13,59,17,"headers"],[59,20,59,24],[59,21,59,25,"set"],[59,24,59,28],[59,25,59,29],[59,39,59,43],[59,41,59,45],[59,59,59,63],[59,60,59,64],[60,6,60,8],[61,6,61,8],[62,6,62,8],[63,6,63,8],[63,12,63,14,"_fetch"],[63,18,63,20],[63,21,63,23],[63,25,63,27],[63,26,63,28,"fetch"],[63,31,63,33],[64,6,64,8],[64,10,64,12,"res"],[64,13,64,15],[64,16,64,18,"_fetch"],[64,22,64,24],[64,23,64,25],[64,27,64,29],[64,28,64,30,"url"],[64,31,64,33],[64,32,64,34,"toString"],[64,40,64,42],[64,41,64,43],[64,42,64,44],[64,44,64,46],[65,8,65,12,"method"],[65,14,65,18],[65,16,65,20],[65,20,65,24],[65,21,65,25,"method"],[65,27,65,31],[66,8,66,12,"headers"],[66,15,66,19],[66,17,66,21],[66,21,66,25],[66,22,66,26,"headers"],[66,29,66,33],[67,8,67,12,"body"],[67,12,67,16],[67,14,67,18,"JSON"],[67,18,67,22],[67,19,67,23,"stringify"],[67,28,67,32],[67,29,67,33],[67,33,67,37],[67,34,67,38,"body"],[67,38,67,42],[67,39,67,43],[68,8,68,12,"signal"],[68,14,68,18],[68,16,68,20],[68,20,68,24],[68,21,68,25,"signal"],[69,6,69,8],[69,7,69,9],[69,8,69,10],[69,9,69,11,"then"],[69,13,69,15],[69,14,69,16],[69,20,69,23,"res"],[69,23,69,26],[69,27,69,31],[70,8,70,12],[70,12,70,16,"_a"],[70,14,70,18],[70,16,70,20,"_b"],[70,18,70,22],[70,20,70,24,"_c"],[70,22,70,26],[70,24,70,28,"_d"],[70,26,70,30],[71,8,71,12],[71,12,71,16,"error"],[71,17,71,21],[71,20,71,24],[71,24,71,28],[72,8,72,12],[72,12,72,16,"data"],[72,16,72,20],[72,19,72,23],[72,23,72,27],[73,8,73,12],[73,12,73,16,"count"],[73,17,73,21],[73,20,73,24],[73,24,73,28],[74,8,74,12],[74,12,74,16,"status"],[74,18,74,22],[74,21,74,25,"res"],[74,24,74,28],[74,25,74,29,"status"],[74,31,74,35],[75,8,75,12],[75,12,75,16,"statusText"],[75,22,75,26],[75,25,75,29,"res"],[75,28,75,32],[75,29,75,33,"statusText"],[75,39,75,43],[76,8,76,12],[76,12,76,16,"res"],[76,15,76,19],[76,16,76,20,"ok"],[76,18,76,22],[76,20,76,24],[77,10,77,16],[77,14,77,20],[77,18,77,24],[77,19,77,25,"method"],[77,25,77,31],[77,30,77,36],[77,36,77,42],[77,38,77,44],[78,12,78,20],[78,18,78,26,"body"],[78,22,78,30],[78,25,78,33],[78,31,78,39,"res"],[78,34,78,42],[78,35,78,43,"text"],[78,39,78,47],[78,40,78,48],[78,41,78,49],[79,12,79,20],[79,16,79,24,"body"],[79,20,79,28],[79,25,79,33],[79,27,79,35],[79,29,79,37],[80,14,80,24],[81,12,80,24],[81,13,81,21],[81,19,82,25],[81,23,82,29],[81,27,82,33],[81,28,82,34,"headers"],[81,35,82,41],[81,36,82,42,"get"],[81,39,82,45],[81,40,82,46],[81,48,82,54],[81,49,82,55],[81,54,82,60],[81,64,82,70],[81,66,82,72],[82,14,83,24,"data"],[82,18,83,28],[82,21,83,31,"body"],[82,25,83,35],[83,12,84,20],[83,13,84,21],[83,19,85,25],[83,23,85,29],[83,27,85,33],[83,28,85,34,"headers"],[83,35,85,41],[83,36,85,42,"get"],[83,39,85,45],[83,40,85,46],[83,48,85,54],[83,49,85,55],[83,54,86,25],[83,55,86,26,"_a"],[83,57,86,28],[83,60,86,31],[83,64,86,35],[83,65,86,36,"headers"],[83,72,86,43],[83,73,86,44,"get"],[83,76,86,47],[83,77,86,48],[83,85,86,56],[83,86,86,57],[83,92,86,63],[83,96,86,67],[83,100,86,71,"_a"],[83,102,86,73],[83,107,86,78],[83,112,86,83],[83,113,86,84],[83,116,86,87],[83,121,86,92],[83,122,86,93],[83,125,86,96,"_a"],[83,127,86,98],[83,128,86,99,"includes"],[83,136,86,107],[83,137,86,108],[83,170,86,141],[83,171,86,142],[83,172,86,143],[83,174,86,145],[84,14,87,24,"data"],[84,18,87,28],[84,21,87,31,"body"],[84,25,87,35],[85,12,88,20],[85,13,88,21],[85,19,89,25],[86,14,90,24,"data"],[86,18,90,28],[86,21,90,31,"JSON"],[86,25,90,35],[86,26,90,36,"parse"],[86,31,90,41],[86,32,90,42,"body"],[86,36,90,46],[86,37,90,47],[87,12,91,20],[88,10,92,16],[89,10,93,16],[89,16,93,22,"countHeader"],[89,27,93,33],[89,30,93,36],[89,31,93,37,"_b"],[89,33,93,39],[89,36,93,42],[89,40,93,46],[89,41,93,47,"headers"],[89,48,93,54],[89,49,93,55,"get"],[89,52,93,58],[89,53,93,59],[89,61,93,67],[89,62,93,68],[89,68,93,74],[89,72,93,78],[89,76,93,82,"_b"],[89,78,93,84],[89,83,93,89],[89,88,93,94],[89,89,93,95],[89,92,93,98],[89,97,93,103],[89,98,93,104],[89,101,93,107,"_b"],[89,103,93,109],[89,104,93,110,"match"],[89,109,93,115],[89,110,93,116],[89,143,93,149],[89,144,93,150],[90,10,94,16],[90,16,94,22,"contentRange"],[90,28,94,34],[90,31,94,37],[90,32,94,38,"_c"],[90,34,94,40],[90,37,94,43,"res"],[90,40,94,46],[90,41,94,47,"headers"],[90,48,94,54],[90,49,94,55,"get"],[90,52,94,58],[90,53,94,59],[90,68,94,74],[90,69,94,75],[90,75,94,81],[90,79,94,85],[90,83,94,89,"_c"],[90,85,94,91],[90,90,94,96],[90,95,94,101],[90,96,94,102],[90,99,94,105],[90,104,94,110],[90,105,94,111],[90,108,94,114,"_c"],[90,110,94,116],[90,111,94,117,"split"],[90,116,94,122],[90,117,94,123],[90,120,94,126],[90,121,94,127],[91,10,95,16],[91,14,95,20,"countHeader"],[91,25,95,31],[91,29,95,35,"contentRange"],[91,41,95,47],[91,45,95,51,"contentRange"],[91,57,95,63],[91,58,95,64,"length"],[91,64,95,70],[91,67,95,73],[91,68,95,74],[91,70,95,76],[92,12,96,20,"count"],[92,17,96,25],[92,20,96,28,"parseInt"],[92,28,96,36],[92,29,96,37,"contentRange"],[92,41,96,49],[92,42,96,50],[92,43,96,51],[92,44,96,52],[92,45,96,53],[93,10,97,16],[94,10,98,16],[95,10,99,16],[96,10,100,16],[96,14,100,20],[96,18,100,24],[96,19,100,25,"isMaybeSingle"],[96,32,100,38],[96,36,100,42],[96,40,100,46],[96,41,100,47,"method"],[96,47,100,53],[96,52,100,58],[96,57,100,63],[96,61,100,67,"Array"],[96,66,100,72],[96,67,100,73,"isArray"],[96,74,100,80],[96,75,100,81,"data"],[96,79,100,85],[96,80,100,86],[96,82,100,88],[97,12,101,20],[97,16,101,24,"data"],[97,20,101,28],[97,21,101,29,"length"],[97,27,101,35],[97,30,101,38],[97,31,101,39],[97,33,101,41],[98,14,102,24,"error"],[98,19,102,29],[98,22,102,32],[99,16,103,28],[100,16,104,28,"code"],[100,20,104,32],[100,22,104,34],[100,32,104,44],[101,16,105,28,"details"],[101,23,105,35],[101,25,105,37],[101,44,105,56,"data"],[101,48,105,60],[101,49,105,61,"length"],[101,55,105,67],[101,112,105,124],[102,16,106,28,"hint"],[102,20,106,32],[102,22,106,34],[102,26,106,38],[103,16,107,28,"message"],[103,23,107,35],[103,25,107,37],[104,14,108,24],[104,15,108,25],[105,14,109,24,"data"],[105,18,109,28],[105,21,109,31],[105,25,109,35],[106,14,110,24,"count"],[106,19,110,29],[106,22,110,32],[106,26,110,36],[107,14,111,24,"status"],[107,20,111,30],[107,23,111,33],[107,26,111,36],[108,14,112,24,"statusText"],[108,24,112,34],[108,27,112,37],[108,43,112,53],[109,12,113,20],[109,13,113,21],[109,19,114,25],[109,23,114,29,"data"],[109,27,114,33],[109,28,114,34,"length"],[109,34,114,40],[109,39,114,45],[109,40,114,46],[109,42,114,48],[110,14,115,24,"data"],[110,18,115,28],[110,21,115,31,"data"],[110,25,115,35],[110,26,115,36],[110,27,115,37],[110,28,115,38],[111,12,116,20],[111,13,116,21],[111,19,117,25],[112,14,118,24,"data"],[112,18,118,28],[112,21,118,31],[112,25,118,35],[113,12,119,20],[114,10,120,16],[115,8,121,12],[115,9,121,13],[115,15,122,17],[116,10,123,16],[116,16,123,22,"body"],[116,20,123,26],[116,23,123,29],[116,29,123,35,"res"],[116,32,123,38],[116,33,123,39,"text"],[116,37,123,43],[116,38,123,44],[116,39,123,45],[117,10,124,16],[117,14,124,20],[118,12,125,20,"error"],[118,17,125,25],[118,20,125,28,"JSON"],[118,24,125,32],[118,25,125,33,"parse"],[118,30,125,38],[118,31,125,39,"body"],[118,35,125,43],[118,36,125,44],[119,12,126,20],[120,12,127,20],[120,16,127,24,"Array"],[120,21,127,29],[120,22,127,30,"isArray"],[120,29,127,37],[120,30,127,38,"error"],[120,35,127,43],[120,36,127,44],[120,40,127,48,"res"],[120,43,127,51],[120,44,127,52,"status"],[120,50,127,58],[120,55,127,63],[120,58,127,66],[120,60,127,68],[121,14,128,24,"data"],[121,18,128,28],[121,21,128,31],[121,23,128,33],[122,14,129,24,"error"],[122,19,129,29],[122,22,129,32],[122,26,129,36],[123,14,130,24,"status"],[123,20,130,30],[123,23,130,33],[123,26,130,36],[124,14,131,24,"statusText"],[124,24,131,34],[124,27,131,37],[124,31,131,41],[125,12,132,20],[126,10,133,16],[126,11,133,17],[126,12,134,16],[126,19,134,23,"_e"],[126,21,134,25],[126,23,134,27],[127,12,135,20],[128,12,136,20],[128,16,136,24,"res"],[128,19,136,27],[128,20,136,28,"status"],[128,26,136,34],[128,31,136,39],[128,34,136,42],[128,38,136,46,"body"],[128,42,136,50],[128,47,136,55],[128,49,136,57],[128,51,136,59],[129,14,137,24,"status"],[129,20,137,30],[129,23,137,33],[129,26,137,36],[130,14,138,24,"statusText"],[130,24,138,34],[130,27,138,37],[130,39,138,49],[131,12,139,20],[131,13,139,21],[131,19,140,25],[132,14,141,24,"error"],[132,19,141,29],[132,22,141,32],[133,16,142,28,"message"],[133,23,142,35],[133,25,142,37,"body"],[134,14,143,24],[134,15,143,25],[135,12,144,20],[136,10,145,16],[137,10,146,16],[137,14,146,20,"error"],[137,19,146,25],[137,23,146,29],[137,27,146,33],[137,28,146,34,"isMaybeSingle"],[137,41,146,47],[137,46,146,52],[137,47,146,53,"_d"],[137,49,146,55],[137,52,146,58,"error"],[137,57,146,63],[137,62,146,68],[137,66,146,72],[137,70,146,76,"error"],[137,75,146,81],[137,80,146,86],[137,85,146,91],[137,86,146,92],[137,89,146,95],[137,94,146,100],[137,95,146,101],[137,98,146,104,"error"],[137,103,146,109],[137,104,146,110,"details"],[137,111,146,117],[137,117,146,123],[137,121,146,127],[137,125,146,131,"_d"],[137,127,146,133],[137,132,146,138],[137,137,146,143],[137,138,146,144],[137,141,146,147],[137,146,146,152],[137,147,146,153],[137,150,146,156,"_d"],[137,152,146,158],[137,153,146,159,"includes"],[137,161,146,167],[137,162,146,168],[137,170,146,176],[137,171,146,177],[137,172,146,178],[137,174,146,180],[138,12,147,20,"error"],[138,17,147,25],[138,20,147,28],[138,24,147,32],[139,12,148,20,"status"],[139,18,148,26],[139,21,148,29],[139,24,148,32],[140,12,149,20,"statusText"],[140,22,149,30],[140,25,149,33],[140,29,149,37],[141,10,150,16],[142,10,151,16],[142,14,151,20,"error"],[142,19,151,25],[142,23,151,29],[142,27,151,33],[142,28,151,34,"shouldThrowOnError"],[142,46,151,52],[142,48,151,54],[143,12,152,20],[143,18,152,26],[143,22,152,30,"PostgrestError_1"],[143,38,152,46],[143,39,152,47,"default"],[143,46,152,54],[143,47,152,55,"error"],[143,52,152,60],[143,53,152,61],[144,10,153,16],[145,8,154,12],[146,8,155,12],[146,14,155,18,"postgrestResponse"],[146,31,155,35],[146,34,155,38],[147,10,156,16,"error"],[147,15,156,21],[148,10,157,16,"data"],[148,14,157,20],[149,10,158,16,"count"],[149,15,158,21],[150,10,159,16,"status"],[150,16,159,22],[151,10,160,16,"statusText"],[152,8,161,12],[152,9,161,13],[153,8,162,12],[153,15,162,19,"postgrestResponse"],[153,32,162,36],[154,6,163,8],[154,7,163,9],[154,8,163,10],[155,6,164,8],[155,10,164,12],[155,11,164,13],[155,15,164,17],[155,16,164,18,"shouldThrowOnError"],[155,34,164,36],[155,36,164,38],[156,8,165,12,"res"],[156,11,165,15],[156,14,165,18,"res"],[156,17,165,21],[156,18,165,22,"catch"],[156,23,165,27],[156,24,165,29,"fetchError"],[156,34,165,39],[156,38,165,44],[157,10,166,16],[157,14,166,20,"_a"],[157,16,166,22],[157,18,166,24,"_b"],[157,20,166,26],[157,22,166,28,"_c"],[157,24,166,30],[158,10,167,16],[158,17,167,24],[159,12,168,20,"error"],[159,17,168,25],[159,19,168,27],[160,14,169,24,"message"],[160,21,169,31],[160,23,169,33],[160,26,169,36],[160,27,169,37,"_a"],[160,29,169,39],[160,32,169,42,"fetchError"],[160,42,169,52],[160,47,169,57],[160,51,169,61],[160,55,169,65,"fetchError"],[160,65,169,75],[160,70,169,80],[160,75,169,85],[160,76,169,86],[160,79,169,89],[160,84,169,94],[160,85,169,95],[160,88,169,98,"fetchError"],[160,98,169,108],[160,99,169,109,"name"],[160,103,169,113],[160,109,169,119],[160,113,169,123],[160,117,169,127,"_a"],[160,119,169,129],[160,124,169,134],[160,129,169,139],[160,130,169,140],[160,133,169,143,"_a"],[160,135,169,145],[160,138,169,148],[160,150,169,160],[160,155,169,165,"fetchError"],[160,165,169,175],[160,170,169,180],[160,174,169,184],[160,178,169,188,"fetchError"],[160,188,169,198],[160,193,169,203],[160,198,169,208],[160,199,169,209],[160,202,169,212],[160,207,169,217],[160,208,169,218],[160,211,169,221,"fetchError"],[160,221,169,231],[160,222,169,232,"message"],[160,229,169,239],[160,231,169,241],[161,14,170,24,"details"],[161,21,170,31],[161,23,170,33],[161,26,170,36],[161,27,170,37,"_b"],[161,29,170,39],[161,32,170,42,"fetchError"],[161,42,170,52],[161,47,170,57],[161,51,170,61],[161,55,170,65,"fetchError"],[161,65,170,75],[161,70,170,80],[161,75,170,85],[161,76,170,86],[161,79,170,89],[161,84,170,94],[161,85,170,95],[161,88,170,98,"fetchError"],[161,98,170,108],[161,99,170,109,"stack"],[161,104,170,114],[161,110,170,120],[161,114,170,124],[161,118,170,128,"_b"],[161,120,170,130],[161,125,170,135],[161,130,170,140],[161,131,170,141],[161,134,170,144,"_b"],[161,136,170,146],[161,139,170,149],[161,141,170,151],[161,143,170,153],[162,14,171,24,"hint"],[162,18,171,28],[162,20,171,30],[162,22,171,32],[163,14,172,24,"code"],[163,18,172,28],[163,20,172,30],[163,23,172,33],[163,24,172,34,"_c"],[163,26,172,36],[163,29,172,39,"fetchError"],[163,39,172,49],[163,44,172,54],[163,48,172,58],[163,52,172,62,"fetchError"],[163,62,172,72],[163,67,172,77],[163,72,172,82],[163,73,172,83],[163,76,172,86],[163,81,172,91],[163,82,172,92],[163,85,172,95,"fetchError"],[163,95,172,105],[163,96,172,106,"code"],[163,100,172,110],[163,106,172,116],[163,110,172,120],[163,114,172,124,"_c"],[163,116,172,126],[163,121,172,131],[163,126,172,136],[163,127,172,137],[163,130,172,140,"_c"],[163,132,172,142],[163,135,172,145],[163,137,172,147],[164,12,173,20],[164,13,173,21],[165,12,174,20,"data"],[165,16,174,24],[165,18,174,26],[165,22,174,30],[166,12,175,20,"count"],[166,17,175,25],[166,19,175,27],[166,23,175,31],[167,12,176,20,"status"],[167,18,176,26],[167,20,176,28],[167,21,176,29],[168,12,177,20,"statusText"],[168,22,177,30],[168,24,177,32],[169,10,178,16],[169,11,178,17],[170,8,179,12],[170,9,179,13],[170,10,179,14],[171,6,180,8],[172,6,181,8],[172,13,181,15,"res"],[172,16,181,18],[172,17,181,19,"then"],[172,21,181,23],[172,22,181,24,"onfulfilled"],[172,33,181,35],[172,35,181,37,"onrejected"],[172,45,181,47],[172,46,181,48],[173,4,182,4],[174,4,183,4],[175,0,184,0],[176,0,185,0],[177,0,186,0],[178,0,187,0],[179,0,188,0],[180,4,189,4,"returns"],[180,11,189,11,"returns"],[180,12,189,11],[180,14,189,14],[181,6,190,8],[182,6,191,8],[182,13,191,15],[182,17,191,19],[183,4,192,4],[184,4,193,4],[185,0,194,0],[186,0,195,0],[187,0,196,0],[188,0,197,0],[189,0,198,0],[190,0,199,0],[191,0,200,0],[192,0,201,0],[193,0,202,0],[194,0,203,0],[195,0,204,0],[196,0,205,0],[197,0,206,0],[198,0,207,0],[199,0,208,0],[200,0,209,0],[201,0,210,0],[202,0,211,0],[203,0,212,0],[204,0,213,0],[205,0,214,0],[206,4,215,4,"overrideTypes"],[206,17,215,17,"overrideTypes"],[206,18,215,17],[206,20,215,20],[207,6,216,8],[207,13,216,15],[207,17,216,19],[208,4,217,4],[209,2,218,0],[210,2,219,0,"exports"],[210,9,219,7],[210,10,219,8,"default"],[210,17,219,15],[210,20,219,18,"PostgrestBuilder"],[210,36,219,34],[211,0,219,35],[211,3]],"functionMap":{"names":["<global>","PostgrestBuilder","constructor","throwOnError","setHeader","then","_fetch.then$argument_0","res._catch$argument_0","returns","overrideTypes"],"mappings":"AAA;ACM;ICC;KDoB;IEO;KFG;IGI;KHI;IIC;gBCsB;SD8F;4BEE;aFc;KJG;IOO;KPG;IQuB;KRE;CDC"}},"type":"js/module"}]}