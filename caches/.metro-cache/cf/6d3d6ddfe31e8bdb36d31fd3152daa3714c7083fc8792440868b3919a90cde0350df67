{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"5y7e5+zC7teYEEC6niD9f5zII1M=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo=","exportNames":["*"]}},{"name":"./convertFormData","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":58},"end":{"line":2,"column":57,"index":115}}],"key":"4W1QhCCiTn/eHoy1p1BADeljIhw=","exportNames":["*"]}},{"name":"../../utils/blobUtils","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":116},"end":{"line":3,"column":63,"index":179}}],"key":"QDDF0FI6I4qL3Q9Vi7FH6zncBhU=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.convertReadableStreamToUint8ArrayAsync = convertReadableStreamToUint8ArrayAsync;\n  exports.normalizeBodyInitAsync = normalizeBodyInitAsync;\n  exports.normalizeHeadersInit = normalizeHeadersInit;\n  exports.overrideHeaders = overrideHeaders;\n  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/slicedToArray\"));\n  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[2], \"@babel/runtime/helpers/asyncToGenerator\"));\n  var _convertFormData = require(_dependencyMap[3], \"./convertFormData\");\n  var _blobUtils = require(_dependencyMap[4], \"../../utils/blobUtils\");\n  /**\n   * convert a ReadableStream to a Uint8Array\n   */\n  function convertReadableStreamToUint8ArrayAsync(_x) {\n    return _convertReadableStreamToUint8ArrayAsync.apply(this, arguments);\n  }\n  /**\n   * Normalize a BodyInit object to a Uint8Array for NativeRequest\n   */\n  function _convertReadableStreamToUint8ArrayAsync() {\n    _convertReadableStreamToUint8ArrayAsync = (0, _asyncToGenerator2.default)(function* (stream) {\n      var reader = stream.getReader();\n      var chunks = [];\n      var totalLength = 0;\n\n      // Read all chunks from the stream\n      while (true) {\n        var _yield$reader$read = yield reader.read(),\n          done = _yield$reader$read.done,\n          value = _yield$reader$read.value;\n        if (done) break;\n        chunks.push(value);\n        totalLength += value.length;\n      }\n\n      // Concatenate all chunks into a single Uint8Array\n      var result = new Uint8Array(totalLength);\n      var offset = 0;\n      for (var chunk of chunks) {\n        result.set(chunk, offset);\n        offset += chunk.length;\n      }\n      return result;\n    });\n    return _convertReadableStreamToUint8ArrayAsync.apply(this, arguments);\n  }\n  function normalizeBodyInitAsync(_x2) {\n    return _normalizeBodyInitAsync.apply(this, arguments);\n  }\n  /**\n   * Normalize a HeadersInit object to an array of key-value tuple for NativeRequest.\n   */\n  function _normalizeBodyInitAsync() {\n    _normalizeBodyInitAsync = (0, _asyncToGenerator2.default)(function* (body) {\n      if (body == null) {\n        return {\n          body: null\n        };\n      }\n      if (typeof body === 'string') {\n        var encoder = new TextEncoder();\n        return {\n          body: encoder.encode(body)\n        };\n      }\n      if (body instanceof ArrayBuffer) {\n        return {\n          body: new Uint8Array(body)\n        };\n      }\n      if (ArrayBuffer.isView(body)) {\n        return {\n          body: new Uint8Array(body.buffer, body.byteOffset, body.byteLength)\n        };\n      }\n      if (body instanceof Blob) {\n        return {\n          body: new Uint8Array(yield (0, _blobUtils.blobToArrayBufferAsync)(body)),\n          overriddenHeaders: [['Content-Type', body.type]]\n        };\n      }\n      if (body instanceof URLSearchParams) {\n        var _encoder = new TextEncoder();\n        return {\n          body: _encoder.encode(body.toString())\n        };\n      }\n      if (body instanceof ReadableStream) {\n        var result = yield convertReadableStreamToUint8ArrayAsync(body);\n        return {\n          body: result\n        };\n      }\n      if (body instanceof FormData) {\n        var _yield$convertFormDat = yield (0, _convertFormData.convertFormDataAsync)(body),\n          _result = _yield$convertFormDat.body,\n          boundary = _yield$convertFormDat.boundary;\n        return {\n          body: _result,\n          overriddenHeaders: [['Content-Type', `multipart/form-data; boundary=${boundary}`]]\n        };\n      }\n      throw new TypeError('Unsupported BodyInit type');\n    });\n    return _normalizeBodyInitAsync.apply(this, arguments);\n  }\n  function normalizeHeadersInit(headers) {\n    if (headers == null) {\n      return [];\n    }\n    if (Array.isArray(headers)) {\n      return headers;\n    }\n    if (headers instanceof Headers) {\n      var results = [];\n      headers.forEach((value, key) => {\n        results.push([key, value]);\n      });\n      return results;\n    }\n    return Object.entries(headers);\n  }\n\n  /**\n   * Create a new header array by overriding the existing headers with new headers (by header key).\n   */\n  function overrideHeaders(headers, newHeaders) {\n    var newKeySet = new Set(newHeaders.map(_ref => {\n      var _ref2 = (0, _slicedToArray2.default)(_ref, 1),\n        key = _ref2[0];\n      return key.toLocaleLowerCase();\n    }));\n    var result = [];\n    for (var _ref3 of headers) {\n      var _ref4 = (0, _slicedToArray2.default)(_ref3, 2);\n      var key = _ref4[0];\n      var value = _ref4[1];\n      if (!newKeySet.has(key.toLocaleLowerCase())) {\n        result.push([key, value]);\n      }\n    }\n    for (var _ref5 of newHeaders) {\n      var _ref6 = (0, _slicedToArray2.default)(_ref5, 2);\n      var _key = _ref6[0];\n      var _value = _ref6[1];\n      result.push([_key, _value]);\n    }\n    return result;\n  }\n});","lineCount":153,"map":[[12,2,2,0],[12,6,2,0,"_convertFormData"],[12,22,2,0],[12,25,2,0,"require"],[12,32,2,0],[12,33,2,0,"_dependencyMap"],[12,47,2,0],[13,2,3,0],[13,6,3,0,"_blobUtils"],[13,16,3,0],[13,19,3,0,"require"],[13,26,3,0],[13,27,3,0,"_dependencyMap"],[13,41,3,0],[14,2,5,0],[15,0,6,0],[16,0,7,0],[17,2,5,0],[17,11,8,22,"convertReadableStreamToUint8ArrayAsync"],[17,49,8,60,"convertReadableStreamToUint8ArrayAsync"],[17,50,8,60,"_x"],[17,52,8,60],[18,4,8,60],[18,11,8,60,"_convertReadableStreamToUint8ArrayAsync"],[18,50,8,60],[18,51,8,60,"apply"],[18,56,8,60],[18,63,8,60,"arguments"],[18,72,8,60],[19,2,8,60],[20,2,34,0],[21,0,35,0],[22,0,36,0],[23,2,34,0],[23,11,34,0,"_convertReadableStreamToUint8ArrayAsync"],[23,51,34,0],[24,4,34,0,"_convertReadableStreamToUint8ArrayAsync"],[24,43,34,0],[24,50,34,0,"_asyncToGenerator2"],[24,68,34,0],[24,69,34,0,"default"],[24,76,34,0],[24,78,8,7],[24,89,9,2,"stream"],[24,95,9,36],[24,97,10,23],[25,6,11,2],[25,10,11,8,"reader"],[25,16,11,14],[25,19,11,17,"stream"],[25,25,11,23],[25,26,11,24,"getReader"],[25,35,11,33],[25,36,11,34],[25,37,11,35],[26,6,12,2],[26,10,12,8,"chunks"],[26,16,12,28],[26,19,12,31],[26,21,12,33],[27,6,13,2],[27,10,13,6,"totalLength"],[27,21,13,17],[27,24,13,20],[27,25,13,21],[29,6,15,2],[30,6,16,2],[30,13,16,9],[30,17,16,13],[30,19,16,15],[31,8,17,4],[31,12,17,4,"_yield$reader$read"],[31,30,17,4],[31,39,17,34,"reader"],[31,45,17,40],[31,46,17,41,"read"],[31,50,17,45],[31,51,17,46],[31,52,17,47],[32,10,17,12,"done"],[32,14,17,16],[32,17,17,16,"_yield$reader$read"],[32,35,17,16],[32,36,17,12,"done"],[32,40,17,16],[33,10,17,18,"value"],[33,15,17,23],[33,18,17,23,"_yield$reader$read"],[33,36,17,23],[33,37,17,18,"value"],[33,42,17,23],[34,8,18,4],[34,12,18,8,"done"],[34,16,18,12],[34,18,18,14],[35,8,19,4,"chunks"],[35,14,19,10],[35,15,19,11,"push"],[35,19,19,15],[35,20,19,16,"value"],[35,25,19,21],[35,26,19,22],[36,8,20,4,"totalLength"],[36,19,20,15],[36,23,20,19,"value"],[36,28,20,24],[36,29,20,25,"length"],[36,35,20,31],[37,6,21,2],[39,6,23,2],[40,6,24,2],[40,10,24,8,"result"],[40,16,24,14],[40,19,24,17],[40,23,24,21,"Uint8Array"],[40,33,24,31],[40,34,24,32,"totalLength"],[40,45,24,43],[40,46,24,44],[41,6,25,2],[41,10,25,6,"offset"],[41,16,25,12],[41,19,25,15],[41,20,25,16],[42,6,26,2],[42,11,26,7],[42,15,26,13,"chunk"],[42,20,26,18],[42,24,26,22,"chunks"],[42,30,26,28],[42,32,26,30],[43,8,27,4,"result"],[43,14,27,10],[43,15,27,11,"set"],[43,18,27,14],[43,19,27,15,"chunk"],[43,24,27,20],[43,26,27,22,"offset"],[43,32,27,28],[43,33,27,29],[44,8,28,4,"offset"],[44,14,28,10],[44,18,28,14,"chunk"],[44,23,28,19],[44,24,28,20,"length"],[44,30,28,26],[45,6,29,2],[46,6,31,2],[46,13,31,9,"result"],[46,19,31,15],[47,4,32,0],[47,5,32,1],[48,4,32,1],[48,11,32,1,"_convertReadableStreamToUint8ArrayAsync"],[48,50,32,1],[48,51,32,1,"apply"],[48,56,32,1],[48,63,32,1,"arguments"],[48,72,32,1],[49,2,32,1],[50,2,32,1],[50,11,37,22,"normalizeBodyInitAsync"],[50,33,37,44,"normalizeBodyInitAsync"],[50,34,37,44,"_x2"],[50,37,37,44],[51,4,37,44],[51,11,37,44,"_normalizeBodyInitAsync"],[51,34,37,44],[51,35,37,44,"apply"],[51,40,37,44],[51,47,37,44,"arguments"],[51,56,37,44],[52,2,37,44],[53,2,86,0],[54,0,87,0],[55,0,88,0],[56,2,86,0],[56,11,86,0,"_normalizeBodyInitAsync"],[56,35,86,0],[57,4,86,0,"_normalizeBodyInitAsync"],[57,27,86,0],[57,34,86,0,"_asyncToGenerator2"],[57,52,86,0],[57,53,86,0,"default"],[57,60,86,0],[57,62,37,7],[57,73,38,2,"body"],[57,77,38,35],[57,79,39,79],[58,6,40,2],[58,10,40,6,"body"],[58,14,40,10],[58,18,40,14],[58,22,40,18],[58,24,40,20],[59,8,41,4],[59,15,41,11],[60,10,41,13,"body"],[60,14,41,17],[60,16,41,19],[61,8,41,24],[61,9,41,25],[62,6,42,2],[63,6,44,2],[63,10,44,6],[63,17,44,13,"body"],[63,21,44,17],[63,26,44,22],[63,34,44,30],[63,36,44,32],[64,8,45,4],[64,12,45,10,"encoder"],[64,19,45,17],[64,22,45,20],[64,26,45,24,"TextEncoder"],[64,37,45,35],[64,38,45,36],[64,39,45,37],[65,8,46,4],[65,15,46,11],[66,10,46,13,"body"],[66,14,46,17],[66,16,46,19,"encoder"],[66,23,46,26],[66,24,46,27,"encode"],[66,30,46,33],[66,31,46,34,"body"],[66,35,46,38],[67,8,46,40],[67,9,46,41],[68,6,47,2],[69,6,49,2],[69,10,49,6,"body"],[69,14,49,10],[69,26,49,22,"ArrayBuffer"],[69,37,49,33],[69,39,49,35],[70,8,50,4],[70,15,50,11],[71,10,50,13,"body"],[71,14,50,17],[71,16,50,19],[71,20,50,23,"Uint8Array"],[71,30,50,33],[71,31,50,34,"body"],[71,35,50,38],[72,8,50,40],[72,9,50,41],[73,6,51,2],[74,6,53,2],[74,10,53,6,"ArrayBuffer"],[74,21,53,17],[74,22,53,18,"isView"],[74,28,53,24],[74,29,53,25,"body"],[74,33,53,29],[74,34,53,30],[74,36,53,32],[75,8,54,4],[75,15,54,11],[76,10,54,13,"body"],[76,14,54,17],[76,16,54,19],[76,20,54,23,"Uint8Array"],[76,30,54,33],[76,31,54,34,"body"],[76,35,54,38],[76,36,54,39,"buffer"],[76,42,54,45],[76,44,54,47,"body"],[76,48,54,51],[76,49,54,52,"byteOffset"],[76,59,54,62],[76,61,54,64,"body"],[76,65,54,68],[76,66,54,69,"byteLength"],[76,76,54,79],[77,8,54,81],[77,9,54,82],[78,6,55,2],[79,6,57,2],[79,10,57,6,"body"],[79,14,57,10],[79,26,57,22,"Blob"],[79,30,57,26],[79,32,57,28],[80,8,58,4],[80,15,58,11],[81,10,59,6,"body"],[81,14,59,10],[81,16,59,12],[81,20,59,16,"Uint8Array"],[81,30,59,26],[81,37,59,33],[81,41,59,33,"blobToArrayBufferAsync"],[81,74,59,55],[81,76,59,56,"body"],[81,80,59,60],[81,81,59,61],[81,82,59,62],[82,10,60,6,"overriddenHeaders"],[82,27,60,23],[82,29,60,25],[82,30,60,26],[82,31,60,27],[82,45,60,41],[82,47,60,43,"body"],[82,51,60,47],[82,52,60,48,"type"],[82,56,60,52],[82,57,60,53],[83,8,61,4],[83,9,61,5],[84,6,62,2],[85,6,64,2],[85,10,64,6,"body"],[85,14,64,10],[85,26,64,22,"URLSearchParams"],[85,41,64,37],[85,43,64,39],[86,8,65,4],[86,12,65,10,"encoder"],[86,20,65,17],[86,23,65,20],[86,27,65,24,"TextEncoder"],[86,38,65,35],[86,39,65,36],[86,40,65,37],[87,8,66,4],[87,15,66,11],[88,10,66,13,"body"],[88,14,66,17],[88,16,66,19,"encoder"],[88,24,66,26],[88,25,66,27,"encode"],[88,31,66,33],[88,32,66,34,"body"],[88,36,66,38],[88,37,66,39,"toString"],[88,45,66,47],[88,46,66,48],[88,47,66,49],[89,8,66,51],[89,9,66,52],[90,6,67,2],[91,6,69,2],[91,10,69,6,"body"],[91,14,69,10],[91,26,69,22,"ReadableStream"],[91,40,69,36],[91,42,69,38],[92,8,70,4],[92,12,70,10,"result"],[92,18,70,16],[92,27,70,25,"convertReadableStreamToUint8ArrayAsync"],[92,65,70,63],[92,66,70,64,"body"],[92,70,70,68],[92,71,70,69],[93,8,71,4],[93,15,71,11],[94,10,71,13,"body"],[94,14,71,17],[94,16,71,19,"result"],[95,8,71,26],[95,9,71,27],[96,6,72,2],[97,6,74,2],[97,10,74,6,"body"],[97,14,74,10],[97,26,74,22,"FormData"],[97,34,74,30],[97,36,74,32],[98,8,75,4],[98,12,75,4,"_yield$convertFormDat"],[98,33,75,4],[98,42,75,45],[98,46,75,45,"convertFormDataAsync"],[98,83,75,65],[98,85,75,66,"body"],[98,89,75,70],[98,90,75,71],[99,10,75,18,"result"],[99,17,75,24],[99,20,75,24,"_yield$convertFormDat"],[99,41,75,24],[99,42,75,12,"body"],[99,46,75,16],[100,10,75,26,"boundary"],[100,18,75,34],[100,21,75,34,"_yield$convertFormDat"],[100,42,75,34],[100,43,75,26,"boundary"],[100,51,75,34],[101,8,77,4],[101,15,77,11],[102,10,78,6,"body"],[102,14,78,10],[102,16,78,12,"result"],[102,23,78,18],[103,10,79,6,"overriddenHeaders"],[103,27,79,23],[103,29,79,25],[103,30,79,26],[103,31,79,27],[103,45,79,41],[103,47,79,43],[103,80,79,76,"boundary"],[103,88,79,84],[103,90,79,86],[103,91,79,87],[104,8,80,4],[104,9,80,5],[105,6,81,2],[106,6,83,2],[106,12,83,8],[106,16,83,12,"TypeError"],[106,25,83,21],[106,26,83,22],[106,53,83,49],[106,54,83,50],[107,4,84,0],[107,5,84,1],[108,4,84,1],[108,11,84,1,"_normalizeBodyInitAsync"],[108,34,84,1],[108,35,84,1,"apply"],[108,40,84,1],[108,47,84,1,"arguments"],[108,56,84,1],[109,2,84,1],[110,2,89,7],[110,11,89,16,"normalizeHeadersInit"],[110,31,89,36,"normalizeHeadersInit"],[110,32,89,37,"headers"],[110,39,89,76],[110,41,89,97],[111,4,90,2],[111,8,90,6,"headers"],[111,15,90,13],[111,19,90,17],[111,23,90,21],[111,25,90,23],[112,6,91,4],[112,13,91,11],[112,15,91,13],[113,4,92,2],[114,4,93,2],[114,8,93,6,"Array"],[114,13,93,11],[114,14,93,12,"isArray"],[114,21,93,19],[114,22,93,20,"headers"],[114,29,93,27],[114,30,93,28],[114,32,93,30],[115,6,94,4],[115,13,94,11,"headers"],[115,20,94,18],[116,4,95,2],[117,4,96,2],[117,8,96,6,"headers"],[117,15,96,13],[117,27,96,25,"Headers"],[117,34,96,32],[117,36,96,34],[118,6,97,4],[118,10,97,10,"results"],[118,17,97,37],[118,20,97,40],[118,22,97,42],[119,6,98,4,"headers"],[119,13,98,11],[119,14,98,12,"forEach"],[119,21,98,19],[119,22,98,20],[119,23,98,21,"value"],[119,28,98,31],[119,30,98,33,"key"],[119,33,98,41],[119,38,98,46],[120,8,99,6,"results"],[120,15,99,13],[120,16,99,14,"push"],[120,20,99,18],[120,21,99,19],[120,22,99,20,"key"],[120,25,99,23],[120,27,99,25,"value"],[120,32,99,30],[120,33,99,31],[120,34,99,32],[121,6,100,4],[121,7,100,5],[121,8,100,6],[122,6,101,4],[122,13,101,11,"results"],[122,20,101,18],[123,4,102,2],[124,4,103,2],[124,11,103,9,"Object"],[124,17,103,15],[124,18,103,16,"entries"],[124,25,103,23],[124,26,103,24,"headers"],[124,33,103,31],[124,34,103,32],[125,2,104,0],[127,2,106,0],[128,0,107,0],[129,0,108,0],[130,2,109,7],[130,11,109,16,"overrideHeaders"],[130,26,109,31,"overrideHeaders"],[130,27,110,2,"headers"],[130,34,110,28],[130,36,111,2,"newHeaders"],[130,46,111,31],[130,48,112,21],[131,4,113,2],[131,8,113,8,"newKeySet"],[131,17,113,17],[131,20,113,20],[131,24,113,24,"Set"],[131,27,113,27],[131,28,113,28,"newHeaders"],[131,38,113,38],[131,39,113,39,"map"],[131,42,113,42],[131,43,113,43,"_ref"],[131,47,113,43],[132,6,113,43],[132,10,113,43,"_ref2"],[132,15,113,43],[132,22,113,43,"_slicedToArray2"],[132,37,113,43],[132,38,113,43,"default"],[132,45,113,43],[132,47,113,43,"_ref"],[132,51,113,43],[133,8,113,45,"key"],[133,11,113,48],[133,14,113,48,"_ref2"],[133,19,113,48],[134,6,113,48],[134,13,113,54,"key"],[134,16,113,57],[134,17,113,58,"toLocaleLowerCase"],[134,34,113,75],[134,35,113,76],[134,36,113,77],[135,4,113,77],[135,6,113,78],[135,7,113,79],[136,4,114,2],[136,8,114,8,"result"],[136,14,114,33],[136,17,114,36],[136,19,114,38],[137,4,115,2],[137,13,115,2,"_ref3"],[137,18,115,2],[137,22,115,29,"headers"],[137,29,115,36],[137,31,115,38],[138,6,115,38],[138,10,115,38,"_ref4"],[138,15,115,38],[138,22,115,38,"_slicedToArray2"],[138,37,115,38],[138,38,115,38,"default"],[138,45,115,38],[138,47,115,38,"_ref3"],[138,52,115,38],[139,6,115,38],[139,10,115,14,"key"],[139,13,115,17],[139,16,115,17,"_ref4"],[139,21,115,17],[140,6,115,17],[140,10,115,19,"value"],[140,15,115,24],[140,18,115,24,"_ref4"],[140,23,115,24],[141,6,116,4],[141,10,116,8],[141,11,116,9,"newKeySet"],[141,20,116,18],[141,21,116,19,"has"],[141,24,116,22],[141,25,116,23,"key"],[141,28,116,26],[141,29,116,27,"toLocaleLowerCase"],[141,46,116,44],[141,47,116,45],[141,48,116,46],[141,49,116,47],[141,51,116,49],[142,8,117,6,"result"],[142,14,117,12],[142,15,117,13,"push"],[142,19,117,17],[142,20,117,18],[142,21,117,19,"key"],[142,24,117,22],[142,26,117,24,"value"],[142,31,117,29],[142,32,117,30],[142,33,117,31],[143,6,118,4],[144,4,119,2],[145,4,120,2],[145,13,120,2,"_ref5"],[145,18,120,2],[145,22,120,29,"newHeaders"],[145,32,120,39],[145,34,120,41],[146,6,120,41],[146,10,120,41,"_ref6"],[146,15,120,41],[146,22,120,41,"_slicedToArray2"],[146,37,120,41],[146,38,120,41,"default"],[146,45,120,41],[146,47,120,41,"_ref5"],[146,52,120,41],[147,6,120,41],[147,10,120,14,"key"],[147,14,120,17],[147,17,120,17,"_ref6"],[147,22,120,17],[148,6,120,17],[148,10,120,19,"value"],[148,16,120,24],[148,19,120,24,"_ref6"],[148,24,120,24],[149,6,121,4,"result"],[149,12,121,10],[149,13,121,11,"push"],[149,17,121,15],[149,18,121,16],[149,19,121,17,"key"],[149,23,121,20],[149,25,121,22,"value"],[149,31,121,27],[149,32,121,28],[149,33,121,29],[150,4,122,2],[151,4,123,2],[151,11,123,9,"result"],[151,17,123,15],[152,2,124,0],[153,0,124,1],[153,3]],"functionMap":{"names":["<global>","convertReadableStreamToUint8ArrayAsync","normalizeBodyInitAsync","normalizeHeadersInit","headers.forEach$argument_0","overrideHeaders","newHeaders.map$argument_0"],"mappings":"AAA;OCO;CDwB;OEK;CF+C;OGK;oBCS;KDE;CHI;OKK;2CCI,kCD;CLW"}},"type":"js/module"}]}