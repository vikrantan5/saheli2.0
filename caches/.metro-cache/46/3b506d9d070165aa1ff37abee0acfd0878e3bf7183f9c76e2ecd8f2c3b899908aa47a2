{"dependencies":[{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"yg7e6laZwmpbIvId5jovq9ugXp8=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/possibleConstructorReturn","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"aU3Lrys8xTVpYSDJal2nhppojC8=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/getPrototypeOf","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"4DwyfFXBA53CJWVTVj5w3kH1PUg=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/inherits","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"y0uNg4LxF1CLscQChxzgo5dfjvA=","exportNames":["*"]}},{"name":"tslib","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":16,"index":93},"end":{"line":3,"column":32,"index":109}}],"key":"vm88vOsSPZItrLOmMEyUuGkd1y4=","exportNames":["*"]}},{"name":"./PostgrestBuilder","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":51,"index":162},"end":{"line":4,"column":80,"index":191}}],"key":"v25p5H95xQ2bcPoR7FGoD/7jboE=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _classCallCheck = require(_dependencyMap[0], \"@babel/runtime/helpers/classCallCheck\");\n  var _createClass = require(_dependencyMap[1], \"@babel/runtime/helpers/createClass\");\n  var _possibleConstructorReturn = require(_dependencyMap[2], \"@babel/runtime/helpers/possibleConstructorReturn\");\n  var _getPrototypeOf = require(_dependencyMap[3], \"@babel/runtime/helpers/getPrototypeOf\");\n  var _inherits = require(_dependencyMap[4], \"@babel/runtime/helpers/inherits\");\n  function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\n  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  var tslib_1 = require(_dependencyMap[5], \"tslib\");\n  var PostgrestBuilder_1 = tslib_1.__importDefault(require(_dependencyMap[6], \"./PostgrestBuilder\"));\n  var PostgrestTransformBuilder = /*#__PURE__*/function (_PostgrestBuilder_1$d) {\n    function PostgrestTransformBuilder() {\n      _classCallCheck(this, PostgrestTransformBuilder);\n      return _callSuper(this, PostgrestTransformBuilder, arguments);\n    }\n    _inherits(PostgrestTransformBuilder, _PostgrestBuilder_1$d);\n    return _createClass(PostgrestTransformBuilder, [{\n      key: \"select\",\n      value:\n      /**\n       * Perform a SELECT on the query result.\n       *\n       * By default, `.insert()`, `.update()`, `.upsert()`, and `.delete()` do not\n       * return modified rows. By calling this method, modified rows are returned in\n       * `data`.\n       *\n       * @param columns - The columns to retrieve, separated by commas\n       */\n      function select(columns) {\n        // Remove whitespaces except when quoted\n        var quoted = false;\n        var cleanedColumns = (columns !== null && columns !== void 0 ? columns : '*').split('').map(c => {\n          if (/\\s/.test(c) && !quoted) {\n            return '';\n          }\n          if (c === '\"') {\n            quoted = !quoted;\n          }\n          return c;\n        }).join('');\n        this.url.searchParams.set('select', cleanedColumns);\n        this.headers.append('Prefer', 'return=representation');\n        return this;\n      }\n      /**\n       * Order the query result by `column`.\n       *\n       * You can call this method multiple times to order by multiple columns.\n       *\n       * You can order referenced tables, but it only affects the ordering of the\n       * parent table if you use `!inner` in the query.\n       *\n       * @param column - The column to order by\n       * @param options - Named parameters\n       * @param options.ascending - If `true`, the result will be in ascending order\n       * @param options.nullsFirst - If `true`, `null`s appear first. If `false`,\n       * `null`s appear last.\n       * @param options.referencedTable - Set this to order a referenced table by\n       * its columns\n       * @param options.foreignTable - Deprecated, use `options.referencedTable`\n       * instead\n       */\n    }, {\n      key: \"order\",\n      value: function order(column) {\n        var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref$ascending = _ref.ascending,\n          ascending = _ref$ascending === void 0 ? true : _ref$ascending,\n          nullsFirst = _ref.nullsFirst,\n          foreignTable = _ref.foreignTable,\n          _ref$referencedTable = _ref.referencedTable,\n          referencedTable = _ref$referencedTable === void 0 ? foreignTable : _ref$referencedTable;\n        var key = referencedTable ? `${referencedTable}.order` : 'order';\n        var existingOrder = this.url.searchParams.get(key);\n        this.url.searchParams.set(key, `${existingOrder ? `${existingOrder},` : ''}${column}.${ascending ? 'asc' : 'desc'}${nullsFirst === undefined ? '' : nullsFirst ? '.nullsfirst' : '.nullslast'}`);\n        return this;\n      }\n      /**\n       * Limit the query result by `count`.\n       *\n       * @param count - The maximum number of rows to return\n       * @param options - Named parameters\n       * @param options.referencedTable - Set this to limit rows of referenced\n       * tables instead of the parent table\n       * @param options.foreignTable - Deprecated, use `options.referencedTable`\n       * instead\n       */\n    }, {\n      key: \"limit\",\n      value: function limit(count) {\n        var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          foreignTable = _ref2.foreignTable,\n          _ref2$referencedTable = _ref2.referencedTable,\n          referencedTable = _ref2$referencedTable === void 0 ? foreignTable : _ref2$referencedTable;\n        var key = typeof referencedTable === 'undefined' ? 'limit' : `${referencedTable}.limit`;\n        this.url.searchParams.set(key, `${count}`);\n        return this;\n      }\n      /**\n       * Limit the query result by starting at an offset `from` and ending at the offset `to`.\n       * Only records within this range are returned.\n       * This respects the query order and if there is no order clause the range could behave unexpectedly.\n       * The `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third\n       * and fourth rows of the query.\n       *\n       * @param from - The starting index from which to limit the result\n       * @param to - The last index to which to limit the result\n       * @param options - Named parameters\n       * @param options.referencedTable - Set this to limit rows of referenced\n       * tables instead of the parent table\n       * @param options.foreignTable - Deprecated, use `options.referencedTable`\n       * instead\n       */\n    }, {\n      key: \"range\",\n      value: function range(from, to) {\n        var _ref3 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n          foreignTable = _ref3.foreignTable,\n          _ref3$referencedTable = _ref3.referencedTable,\n          referencedTable = _ref3$referencedTable === void 0 ? foreignTable : _ref3$referencedTable;\n        var keyOffset = typeof referencedTable === 'undefined' ? 'offset' : `${referencedTable}.offset`;\n        var keyLimit = typeof referencedTable === 'undefined' ? 'limit' : `${referencedTable}.limit`;\n        this.url.searchParams.set(keyOffset, `${from}`);\n        // Range is inclusive, so add 1\n        this.url.searchParams.set(keyLimit, `${to - from + 1}`);\n        return this;\n      }\n      /**\n       * Set the AbortSignal for the fetch request.\n       *\n       * @param signal - The AbortSignal to use for the fetch request\n       */\n    }, {\n      key: \"abortSignal\",\n      value: function abortSignal(signal) {\n        this.signal = signal;\n        return this;\n      }\n      /**\n       * Return `data` as a single object instead of an array of objects.\n       *\n       * Query result must be one row (e.g. using `.limit(1)`), otherwise this\n       * returns an error.\n       */\n    }, {\n      key: \"single\",\n      value: function single() {\n        this.headers.set('Accept', 'application/vnd.pgrst.object+json');\n        return this;\n      }\n      /**\n       * Return `data` as a single object instead of an array of objects.\n       *\n       * Query result must be zero or one row (e.g. using `.limit(1)`), otherwise\n       * this returns an error.\n       */\n    }, {\n      key: \"maybeSingle\",\n      value: function maybeSingle() {\n        // Temporary partial fix for https://github.com/supabase/postgrest-js/issues/361\n        // Issue persists e.g. for `.insert([...]).select().maybeSingle()`\n        if (this.method === 'GET') {\n          this.headers.set('Accept', 'application/json');\n        } else {\n          this.headers.set('Accept', 'application/vnd.pgrst.object+json');\n        }\n        this.isMaybeSingle = true;\n        return this;\n      }\n      /**\n       * Return `data` as a string in CSV format.\n       */\n    }, {\n      key: \"csv\",\n      value: function csv() {\n        this.headers.set('Accept', 'text/csv');\n        return this;\n      }\n      /**\n       * Return `data` as an object in [GeoJSON](https://geojson.org) format.\n       */\n    }, {\n      key: \"geojson\",\n      value: function geojson() {\n        this.headers.set('Accept', 'application/geo+json');\n        return this;\n      }\n      /**\n       * Return `data` as the EXPLAIN plan for the query.\n       *\n       * You need to enable the\n       * [db_plan_enabled](https://supabase.com/docs/guides/database/debugging-performance#enabling-explain)\n       * setting before using this method.\n       *\n       * @param options - Named parameters\n       *\n       * @param options.analyze - If `true`, the query will be executed and the\n       * actual run time will be returned\n       *\n       * @param options.verbose - If `true`, the query identifier will be returned\n       * and `data` will include the output columns of the query\n       *\n       * @param options.settings - If `true`, include information on configuration\n       * parameters that affect query planning\n       *\n       * @param options.buffers - If `true`, include information on buffer usage\n       *\n       * @param options.wal - If `true`, include information on WAL record generation\n       *\n       * @param options.format - The format of the output, can be `\"text\"` (default)\n       * or `\"json\"`\n       */\n    }, {\n      key: \"explain\",\n      value: function explain() {\n        var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref4$analyze = _ref4.analyze,\n          analyze = _ref4$analyze === void 0 ? false : _ref4$analyze,\n          _ref4$verbose = _ref4.verbose,\n          verbose = _ref4$verbose === void 0 ? false : _ref4$verbose,\n          _ref4$settings = _ref4.settings,\n          settings = _ref4$settings === void 0 ? false : _ref4$settings,\n          _ref4$buffers = _ref4.buffers,\n          buffers = _ref4$buffers === void 0 ? false : _ref4$buffers,\n          _ref4$wal = _ref4.wal,\n          wal = _ref4$wal === void 0 ? false : _ref4$wal,\n          _ref4$format = _ref4.format,\n          format = _ref4$format === void 0 ? 'text' : _ref4$format;\n        var _a;\n        var options = [analyze ? 'analyze' : null, verbose ? 'verbose' : null, settings ? 'settings' : null, buffers ? 'buffers' : null, wal ? 'wal' : null].filter(Boolean).join('|');\n        // An Accept header can carry multiple media types but postgrest-js always sends one\n        var forMediatype = (_a = this.headers.get('Accept')) !== null && _a !== void 0 ? _a : 'application/json';\n        this.headers.set('Accept', `application/vnd.pgrst.plan+${format}; for=\"${forMediatype}\"; options=${options};`);\n        if (format === 'json') {\n          return this;\n        } else {\n          return this;\n        }\n      }\n      /**\n       * Rollback the query.\n       *\n       * `data` will still be returned, but the query is not committed.\n       */\n    }, {\n      key: \"rollback\",\n      value: function rollback() {\n        this.headers.append('Prefer', 'tx=rollback');\n        return this;\n      }\n      /**\n       * Override the type of the returned `data`.\n       *\n       * @typeParam NewResult - The new result type to override with\n       * @deprecated Use overrideTypes<yourType, { merge: false }>() method at the end of your call chain instead\n       */\n    }, {\n      key: \"returns\",\n      value: function returns() {\n        return this;\n      }\n      /**\n       * Set the maximum number of rows that can be affected by the query.\n       * Only available in PostgREST v13+ and only works with PATCH and DELETE methods.\n       *\n       * @param value - The maximum number of rows that can be affected\n       */\n    }, {\n      key: \"maxAffected\",\n      value: function maxAffected(value) {\n        this.headers.append('Prefer', 'handling=strict');\n        this.headers.append('Prefer', `max-affected=${value}`);\n        return this;\n      }\n    }]);\n  }(PostgrestBuilder_1.default);\n  exports.default = PostgrestTransformBuilder;\n});","lineCount":283,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_classCallCheck"],[4,21,1,13],[4,24,1,13,"require"],[4,31,1,13],[4,32,1,13,"_dependencyMap"],[4,46,1,13],[5,2,1,13],[5,6,1,13,"_createClass"],[5,18,1,13],[5,21,1,13,"require"],[5,28,1,13],[5,29,1,13,"_dependencyMap"],[5,43,1,13],[6,2,1,13],[6,6,1,13,"_possibleConstructorReturn"],[6,32,1,13],[6,35,1,13,"require"],[6,42,1,13],[6,43,1,13,"_dependencyMap"],[6,57,1,13],[7,2,1,13],[7,6,1,13,"_getPrototypeOf"],[7,21,1,13],[7,24,1,13,"require"],[7,31,1,13],[7,32,1,13,"_dependencyMap"],[7,46,1,13],[8,2,1,13],[8,6,1,13,"_inherits"],[8,15,1,13],[8,18,1,13,"require"],[8,25,1,13],[8,26,1,13,"_dependencyMap"],[8,40,1,13],[9,2,1,13],[9,11,1,13,"_callSuper"],[9,22,1,13,"t"],[9,23,1,13],[9,25,1,13,"o"],[9,26,1,13],[9,28,1,13,"e"],[9,29,1,13],[9,40,1,13,"o"],[9,41,1,13],[9,44,1,13,"_getPrototypeOf"],[9,59,1,13],[9,60,1,13,"o"],[9,61,1,13],[9,64,1,13,"_possibleConstructorReturn"],[9,90,1,13],[9,91,1,13,"t"],[9,92,1,13],[9,94,1,13,"_isNativeReflectConstruct"],[9,119,1,13],[9,124,1,13,"Reflect"],[9,131,1,13],[9,132,1,13,"construct"],[9,141,1,13],[9,142,1,13,"o"],[9,143,1,13],[9,145,1,13,"e"],[9,146,1,13],[9,154,1,13,"_getPrototypeOf"],[9,169,1,13],[9,170,1,13,"t"],[9,171,1,13],[9,173,1,13,"constructor"],[9,184,1,13],[9,188,1,13,"o"],[9,189,1,13],[9,190,1,13,"apply"],[9,195,1,13],[9,196,1,13,"t"],[9,197,1,13],[9,199,1,13,"e"],[9,200,1,13],[10,2,1,13],[10,11,1,13,"_isNativeReflectConstruct"],[10,37,1,13],[10,51,1,13,"t"],[10,52,1,13],[10,56,1,13,"Boolean"],[10,63,1,13],[10,64,1,13,"prototype"],[10,73,1,13],[10,74,1,13,"valueOf"],[10,81,1,13],[10,82,1,13,"call"],[10,86,1,13],[10,87,1,13,"Reflect"],[10,94,1,13],[10,95,1,13,"construct"],[10,104,1,13],[10,105,1,13,"Boolean"],[10,112,1,13],[10,145,1,13,"t"],[10,146,1,13],[10,159,1,13,"_isNativeReflectConstruct"],[10,184,1,13],[10,196,1,13,"_isNativeReflectConstruct"],[10,197,1,13],[10,210,1,13,"t"],[10,211,1,13],[11,2,2,0,"Object"],[11,8,2,6],[11,9,2,7,"defineProperty"],[11,23,2,21],[11,24,2,22,"exports"],[11,31,2,29],[11,33,2,31],[11,45,2,43],[11,47,2,45],[12,4,2,47,"value"],[12,9,2,52],[12,11,2,54],[13,2,2,59],[13,3,2,60],[13,4,2,61],[14,2,3,0],[14,6,3,6,"tslib_1"],[14,13,3,13],[14,16,3,16,"require"],[14,23,3,23],[14,24,3,23,"_dependencyMap"],[14,38,3,23],[14,50,3,31],[14,51,3,32],[15,2,4,0],[15,6,4,6,"PostgrestBuilder_1"],[15,24,4,24],[15,27,4,27,"tslib_1"],[15,34,4,34],[15,35,4,35,"__importDefault"],[15,50,4,50],[15,51,4,51,"require"],[15,58,4,58],[15,59,4,58,"_dependencyMap"],[15,73,4,58],[15,98,4,79],[15,99,4,80],[15,100,4,81],[16,2,4,82],[16,6,5,6,"PostgrestTransformBuilder"],[16,31,5,31],[16,57,5,31,"_PostgrestBuilder_1$d"],[16,78,5,31],[17,4,5,31],[17,13,5,31,"PostgrestTransformBuilder"],[17,39,5,31],[18,6,5,31,"_classCallCheck"],[18,21,5,31],[18,28,5,31,"PostgrestTransformBuilder"],[18,53,5,31],[19,6,5,31],[19,13,5,31,"_callSuper"],[19,23,5,31],[19,30,5,31,"PostgrestTransformBuilder"],[19,55,5,31],[19,57,5,31,"arguments"],[19,66,5,31],[20,4,5,31],[21,4,5,31,"_inherits"],[21,13,5,31],[21,14,5,31,"PostgrestTransformBuilder"],[21,39,5,31],[21,41,5,31,"_PostgrestBuilder_1$d"],[21,62,5,31],[22,4,5,31],[22,11,5,31,"_createClass"],[22,23,5,31],[22,24,5,31,"PostgrestTransformBuilder"],[22,49,5,31],[23,6,5,31,"key"],[23,9,5,31],[24,6,5,31,"value"],[24,11,5,31],[25,6,6,4],[26,0,7,0],[27,0,8,0],[28,0,9,0],[29,0,10,0],[30,0,11,0],[31,0,12,0],[32,0,13,0],[33,0,14,0],[34,6,15,4],[34,15,15,4,"select"],[34,21,15,10,"select"],[34,22,15,11,"columns"],[34,29,15,18],[34,31,15,20],[35,8,16,8],[36,8,17,8],[36,12,17,12,"quoted"],[36,18,17,18],[36,21,17,21],[36,26,17,26],[37,8,18,8],[37,12,18,14,"cleanedColumns"],[37,26,18,28],[37,29,18,31],[37,30,18,32,"columns"],[37,37,18,39],[37,42,18,44],[37,46,18,48],[37,50,18,52,"columns"],[37,57,18,59],[37,62,18,64],[37,67,18,69],[37,68,18,70],[37,71,18,73,"columns"],[37,78,18,80],[37,81,18,83],[37,84,18,86],[37,86,19,13,"split"],[37,91,19,18],[37,92,19,19],[37,94,19,21],[37,95,19,22],[37,96,20,13,"map"],[37,99,20,16],[37,100,20,18,"c"],[37,101,20,19],[37,105,20,24],[38,10,21,12],[38,14,21,16],[38,18,21,20],[38,19,21,21,"test"],[38,23,21,25],[38,24,21,26,"c"],[38,25,21,27],[38,26,21,28],[38,30,21,32],[38,31,21,33,"quoted"],[38,37,21,39],[38,39,21,41],[39,12,22,16],[39,19,22,23],[39,21,22,25],[40,10,23,12],[41,10,24,12],[41,14,24,16,"c"],[41,15,24,17],[41,20,24,22],[41,23,24,25],[41,25,24,27],[42,12,25,16,"quoted"],[42,18,25,22],[42,21,25,25],[42,22,25,26,"quoted"],[42,28,25,32],[43,10,26,12],[44,10,27,12],[44,17,27,19,"c"],[44,18,27,20],[45,8,28,8],[45,9,28,9],[45,10,28,10],[45,11,29,13,"join"],[45,15,29,17],[45,16,29,18],[45,18,29,20],[45,19,29,21],[46,8,30,8],[46,12,30,12],[46,13,30,13,"url"],[46,16,30,16],[46,17,30,17,"searchParams"],[46,29,30,29],[46,30,30,30,"set"],[46,33,30,33],[46,34,30,34],[46,42,30,42],[46,44,30,44,"cleanedColumns"],[46,58,30,58],[46,59,30,59],[47,8,31,8],[47,12,31,12],[47,13,31,13,"headers"],[47,20,31,20],[47,21,31,21,"append"],[47,27,31,27],[47,28,31,28],[47,36,31,36],[47,38,31,38],[47,61,31,61],[47,62,31,62],[48,8,32,8],[48,15,32,15],[48,19,32,19],[49,6,33,4],[50,6,34,4],[51,0,35,0],[52,0,36,0],[53,0,37,0],[54,0,38,0],[55,0,39,0],[56,0,40,0],[57,0,41,0],[58,0,42,0],[59,0,43,0],[60,0,44,0],[61,0,45,0],[62,0,46,0],[63,0,47,0],[64,0,48,0],[65,0,49,0],[66,0,50,0],[67,0,51,0],[68,4,34,4],[69,6,34,4,"key"],[69,9,34,4],[70,6,34,4,"value"],[70,11,34,4],[70,13,52,4],[70,22,52,4,"order"],[70,27,52,9,"order"],[70,28,52,10,"column"],[70,34,52,16],[70,36,52,104],[71,8,52,104],[71,12,52,104,"_ref"],[71,16,52,104],[71,19,52,104,"arguments"],[71,28,52,104],[71,29,52,104,"length"],[71,35,52,104],[71,43,52,104,"arguments"],[71,52,52,104],[71,60,52,104,"undefined"],[71,69,52,104],[71,72,52,104,"arguments"],[71,81,52,104],[71,87,52,100],[71,88,52,101],[71,89,52,102],[72,10,52,102,"_ref$ascending"],[72,24,52,102],[72,27,52,102,"_ref"],[72,31,52,102],[72,32,52,20,"ascending"],[72,41,52,29],[73,10,52,20,"ascending"],[73,19,52,29],[73,22,52,29,"_ref$ascending"],[73,36,52,29],[73,50,52,32],[73,54,52,36],[73,57,52,36,"_ref$ascending"],[73,71,52,36],[74,10,52,38,"nullsFirst"],[74,20,52,48],[74,23,52,48,"_ref"],[74,27,52,48],[74,28,52,38,"nullsFirst"],[74,38,52,48],[75,10,52,50,"foreignTable"],[75,22,52,62],[75,25,52,62,"_ref"],[75,29,52,62],[75,30,52,50,"foreignTable"],[75,42,52,62],[76,10,52,62,"_ref$referencedTable"],[76,30,52,62],[76,33,52,62,"_ref"],[76,37,52,62],[76,38,52,64,"referencedTable"],[76,53,52,79],[77,10,52,64,"referencedTable"],[77,25,52,79],[77,28,52,79,"_ref$referencedTable"],[77,48,52,79],[77,62,52,82,"foreignTable"],[77,74,52,94],[77,77,52,94,"_ref$referencedTable"],[77,97,52,94],[78,8,53,8],[78,12,53,14,"key"],[78,15,53,17],[78,18,53,20,"referencedTable"],[78,33,53,35],[78,36,53,38],[78,39,53,41,"referencedTable"],[78,54,53,56],[78,62,53,64],[78,65,53,67],[78,72,53,74],[79,8,54,8],[79,12,54,14,"existingOrder"],[79,25,54,27],[79,28,54,30],[79,32,54,34],[79,33,54,35,"url"],[79,36,54,38],[79,37,54,39,"searchParams"],[79,49,54,51],[79,50,54,52,"get"],[79,53,54,55],[79,54,54,56,"key"],[79,57,54,59],[79,58,54,60],[80,8,55,8],[80,12,55,12],[80,13,55,13,"url"],[80,16,55,16],[80,17,55,17,"searchParams"],[80,29,55,29],[80,30,55,30,"set"],[80,33,55,33],[80,34,55,34,"key"],[80,37,55,37],[80,39,55,39],[80,42,55,42,"existingOrder"],[80,55,55,55],[80,58,55,58],[80,61,55,61,"existingOrder"],[80,74,55,74],[80,77,55,77],[80,80,55,80],[80,82,55,82],[80,85,55,85,"column"],[80,91,55,91],[80,95,55,95,"ascending"],[80,104,55,104],[80,107,55,107],[80,112,55,112],[80,115,55,115],[80,121,55,121],[80,124,55,124,"nullsFirst"],[80,134,55,134],[80,139,55,139,"undefined"],[80,148,55,148],[80,151,55,151],[80,153,55,153],[80,156,55,156,"nullsFirst"],[80,166,55,166],[80,169,55,169],[80,182,55,182],[80,185,55,185],[80,197,55,197],[80,199,55,199],[80,200,55,200],[81,8,56,8],[81,15,56,15],[81,19,56,19],[82,6,57,4],[83,6,58,4],[84,0,59,0],[85,0,60,0],[86,0,61,0],[87,0,62,0],[88,0,63,0],[89,0,64,0],[90,0,65,0],[91,0,66,0],[92,0,67,0],[93,4,58,4],[94,6,58,4,"key"],[94,9,58,4],[95,6,58,4,"value"],[95,11,58,4],[95,13,68,4],[95,22,68,4,"limit"],[95,27,68,9,"limit"],[95,28,68,10,"count"],[95,33,68,15],[95,35,68,73],[96,8,68,73],[96,12,68,73,"_ref2"],[96,17,68,73],[96,20,68,73,"arguments"],[96,29,68,73],[96,30,68,73,"length"],[96,36,68,73],[96,44,68,73,"arguments"],[96,53,68,73],[96,61,68,73,"undefined"],[96,70,68,73],[96,73,68,73,"arguments"],[96,82,68,73],[96,88,68,69],[96,89,68,70],[96,90,68,71],[97,10,68,19,"foreignTable"],[97,22,68,31],[97,25,68,31,"_ref2"],[97,30,68,31],[97,31,68,19,"foreignTable"],[97,43,68,31],[98,10,68,31,"_ref2$referencedTable"],[98,31,68,31],[98,34,68,31,"_ref2"],[98,39,68,31],[98,40,68,33,"referencedTable"],[98,55,68,48],[99,10,68,33,"referencedTable"],[99,25,68,48],[99,28,68,48,"_ref2$referencedTable"],[99,49,68,48],[99,63,68,51,"foreignTable"],[99,75,68,63],[99,78,68,63,"_ref2$referencedTable"],[99,99,68,63],[100,8,69,8],[100,12,69,14,"key"],[100,15,69,17],[100,18,69,20],[100,25,69,27,"referencedTable"],[100,40,69,42],[100,45,69,47],[100,56,69,58],[100,59,69,61],[100,66,69,68],[100,69,69,71],[100,72,69,74,"referencedTable"],[100,87,69,89],[100,95,69,97],[101,8,70,8],[101,12,70,12],[101,13,70,13,"url"],[101,16,70,16],[101,17,70,17,"searchParams"],[101,29,70,29],[101,30,70,30,"set"],[101,33,70,33],[101,34,70,34,"key"],[101,37,70,37],[101,39,70,39],[101,42,70,42,"count"],[101,47,70,47],[101,49,70,49],[101,50,70,50],[102,8,71,8],[102,15,71,15],[102,19,71,19],[103,6,72,4],[104,6,73,4],[105,0,74,0],[106,0,75,0],[107,0,76,0],[108,0,77,0],[109,0,78,0],[110,0,79,0],[111,0,80,0],[112,0,81,0],[113,0,82,0],[114,0,83,0],[115,0,84,0],[116,0,85,0],[117,0,86,0],[118,0,87,0],[119,4,73,4],[120,6,73,4,"key"],[120,9,73,4],[121,6,73,4,"value"],[121,11,73,4],[121,13,88,4],[121,22,88,4,"range"],[121,27,88,9,"range"],[121,28,88,10,"from"],[121,32,88,14],[121,34,88,16,"to"],[121,36,88,18],[121,38,88,76],[122,8,88,76],[122,12,88,76,"_ref3"],[122,17,88,76],[122,20,88,76,"arguments"],[122,29,88,76],[122,30,88,76,"length"],[122,36,88,76],[122,44,88,76,"arguments"],[122,53,88,76],[122,61,88,76,"undefined"],[122,70,88,76],[122,73,88,76,"arguments"],[122,82,88,76],[122,88,88,72],[122,89,88,73],[122,90,88,74],[123,10,88,22,"foreignTable"],[123,22,88,34],[123,25,88,34,"_ref3"],[123,30,88,34],[123,31,88,22,"foreignTable"],[123,43,88,34],[124,10,88,34,"_ref3$referencedTable"],[124,31,88,34],[124,34,88,34,"_ref3"],[124,39,88,34],[124,40,88,36,"referencedTable"],[124,55,88,51],[125,10,88,36,"referencedTable"],[125,25,88,51],[125,28,88,51,"_ref3$referencedTable"],[125,49,88,51],[125,63,88,54,"foreignTable"],[125,75,88,66],[125,78,88,66,"_ref3$referencedTable"],[125,99,88,66],[126,8,89,8],[126,12,89,14,"keyOffset"],[126,21,89,23],[126,24,89,26],[126,31,89,33,"referencedTable"],[126,46,89,48],[126,51,89,53],[126,62,89,64],[126,65,89,67],[126,73,89,75],[126,76,89,78],[126,79,89,81,"referencedTable"],[126,94,89,96],[126,103,89,105],[127,8,90,8],[127,12,90,14,"keyLimit"],[127,20,90,22],[127,23,90,25],[127,30,90,32,"referencedTable"],[127,45,90,47],[127,50,90,52],[127,61,90,63],[127,64,90,66],[127,71,90,73],[127,74,90,76],[127,77,90,79,"referencedTable"],[127,92,90,94],[127,100,90,102],[128,8,91,8],[128,12,91,12],[128,13,91,13,"url"],[128,16,91,16],[128,17,91,17,"searchParams"],[128,29,91,29],[128,30,91,30,"set"],[128,33,91,33],[128,34,91,34,"keyOffset"],[128,43,91,43],[128,45,91,45],[128,48,91,48,"from"],[128,52,91,52],[128,54,91,54],[128,55,91,55],[129,8,92,8],[130,8,93,8],[130,12,93,12],[130,13,93,13,"url"],[130,16,93,16],[130,17,93,17,"searchParams"],[130,29,93,29],[130,30,93,30,"set"],[130,33,93,33],[130,34,93,34,"keyLimit"],[130,42,93,42],[130,44,93,44],[130,47,93,47,"to"],[130,49,93,49],[130,52,93,52,"from"],[130,56,93,56],[130,59,93,59],[130,60,93,60],[130,62,93,62],[130,63,93,63],[131,8,94,8],[131,15,94,15],[131,19,94,19],[132,6,95,4],[133,6,96,4],[134,0,97,0],[135,0,98,0],[136,0,99,0],[137,0,100,0],[138,4,96,4],[139,6,96,4,"key"],[139,9,96,4],[140,6,96,4,"value"],[140,11,96,4],[140,13,101,4],[140,22,101,4,"abortSignal"],[140,33,101,15,"abortSignal"],[140,34,101,16,"signal"],[140,40,101,22],[140,42,101,24],[141,8,102,8],[141,12,102,12],[141,13,102,13,"signal"],[141,19,102,19],[141,22,102,22,"signal"],[141,28,102,28],[142,8,103,8],[142,15,103,15],[142,19,103,19],[143,6,104,4],[144,6,105,4],[145,0,106,0],[146,0,107,0],[147,0,108,0],[148,0,109,0],[149,0,110,0],[150,4,105,4],[151,6,105,4,"key"],[151,9,105,4],[152,6,105,4,"value"],[152,11,105,4],[152,13,111,4],[152,22,111,4,"single"],[152,28,111,10,"single"],[152,29,111,10],[152,31,111,13],[153,8,112,8],[153,12,112,12],[153,13,112,13,"headers"],[153,20,112,20],[153,21,112,21,"set"],[153,24,112,24],[153,25,112,25],[153,33,112,33],[153,35,112,35],[153,70,112,70],[153,71,112,71],[154,8,113,8],[154,15,113,15],[154,19,113,19],[155,6,114,4],[156,6,115,4],[157,0,116,0],[158,0,117,0],[159,0,118,0],[160,0,119,0],[161,0,120,0],[162,4,115,4],[163,6,115,4,"key"],[163,9,115,4],[164,6,115,4,"value"],[164,11,115,4],[164,13,121,4],[164,22,121,4,"maybeSingle"],[164,33,121,15,"maybeSingle"],[164,34,121,15],[164,36,121,18],[165,8,122,8],[166,8,123,8],[167,8,124,8],[167,12,124,12],[167,16,124,16],[167,17,124,17,"method"],[167,23,124,23],[167,28,124,28],[167,33,124,33],[167,35,124,35],[168,10,125,12],[168,14,125,16],[168,15,125,17,"headers"],[168,22,125,24],[168,23,125,25,"set"],[168,26,125,28],[168,27,125,29],[168,35,125,37],[168,37,125,39],[168,55,125,57],[168,56,125,58],[169,8,126,8],[169,9,126,9],[169,15,127,13],[170,10,128,12],[170,14,128,16],[170,15,128,17,"headers"],[170,22,128,24],[170,23,128,25,"set"],[170,26,128,28],[170,27,128,29],[170,35,128,37],[170,37,128,39],[170,72,128,74],[170,73,128,75],[171,8,129,8],[172,8,130,8],[172,12,130,12],[172,13,130,13,"isMaybeSingle"],[172,26,130,26],[172,29,130,29],[172,33,130,33],[173,8,131,8],[173,15,131,15],[173,19,131,19],[174,6,132,4],[175,6,133,4],[176,0,134,0],[177,0,135,0],[178,4,133,4],[179,6,133,4,"key"],[179,9,133,4],[180,6,133,4,"value"],[180,11,133,4],[180,13,136,4],[180,22,136,4,"csv"],[180,25,136,7,"csv"],[180,26,136,7],[180,28,136,10],[181,8,137,8],[181,12,137,12],[181,13,137,13,"headers"],[181,20,137,20],[181,21,137,21,"set"],[181,24,137,24],[181,25,137,25],[181,33,137,33],[181,35,137,35],[181,45,137,45],[181,46,137,46],[182,8,138,8],[182,15,138,15],[182,19,138,19],[183,6,139,4],[184,6,140,4],[185,0,141,0],[186,0,142,0],[187,4,140,4],[188,6,140,4,"key"],[188,9,140,4],[189,6,140,4,"value"],[189,11,140,4],[189,13,143,4],[189,22,143,4,"geojson"],[189,29,143,11,"geojson"],[189,30,143,11],[189,32,143,14],[190,8,144,8],[190,12,144,12],[190,13,144,13,"headers"],[190,20,144,20],[190,21,144,21,"set"],[190,24,144,24],[190,25,144,25],[190,33,144,33],[190,35,144,35],[190,57,144,57],[190,58,144,58],[191,8,145,8],[191,15,145,15],[191,19,145,19],[192,6,146,4],[193,6,147,4],[194,0,148,0],[195,0,149,0],[196,0,150,0],[197,0,151,0],[198,0,152,0],[199,0,153,0],[200,0,154,0],[201,0,155,0],[202,0,156,0],[203,0,157,0],[204,0,158,0],[205,0,159,0],[206,0,160,0],[207,0,161,0],[208,0,162,0],[209,0,163,0],[210,0,164,0],[211,0,165,0],[212,0,166,0],[213,0,167,0],[214,0,168,0],[215,0,169,0],[216,0,170,0],[217,0,171,0],[218,4,147,4],[219,6,147,4,"key"],[219,9,147,4],[220,6,147,4,"value"],[220,11,147,4],[220,13,172,4],[220,22,172,4,"explain"],[220,29,172,11,"explain"],[220,30,172,11],[220,32,172,121],[221,8,172,121],[221,12,172,121,"_ref4"],[221,17,172,121],[221,20,172,121,"arguments"],[221,29,172,121],[221,30,172,121,"length"],[221,36,172,121],[221,44,172,121,"arguments"],[221,53,172,121],[221,61,172,121,"undefined"],[221,70,172,121],[221,73,172,121,"arguments"],[221,82,172,121],[221,88,172,117],[221,89,172,118],[221,90,172,119],[222,10,172,119,"_ref4$analyze"],[222,23,172,119],[222,26,172,119,"_ref4"],[222,31,172,119],[222,32,172,14,"analyze"],[222,39,172,21],[223,10,172,14,"analyze"],[223,17,172,21],[223,20,172,21,"_ref4$analyze"],[223,33,172,21],[223,47,172,24],[223,52,172,29],[223,55,172,29,"_ref4$analyze"],[223,68,172,29],[224,10,172,29,"_ref4$verbose"],[224,23,172,29],[224,26,172,29,"_ref4"],[224,31,172,29],[224,32,172,31,"verbose"],[224,39,172,38],[225,10,172,31,"verbose"],[225,17,172,38],[225,20,172,38,"_ref4$verbose"],[225,33,172,38],[225,47,172,41],[225,52,172,46],[225,55,172,46,"_ref4$verbose"],[225,68,172,46],[226,10,172,46,"_ref4$settings"],[226,24,172,46],[226,27,172,46,"_ref4"],[226,32,172,46],[226,33,172,48,"settings"],[226,41,172,56],[227,10,172,48,"settings"],[227,18,172,56],[227,21,172,56,"_ref4$settings"],[227,35,172,56],[227,49,172,59],[227,54,172,64],[227,57,172,64,"_ref4$settings"],[227,71,172,64],[228,10,172,64,"_ref4$buffers"],[228,23,172,64],[228,26,172,64,"_ref4"],[228,31,172,64],[228,32,172,66,"buffers"],[228,39,172,73],[229,10,172,66,"buffers"],[229,17,172,73],[229,20,172,73,"_ref4$buffers"],[229,33,172,73],[229,47,172,76],[229,52,172,81],[229,55,172,81,"_ref4$buffers"],[229,68,172,81],[230,10,172,81,"_ref4$wal"],[230,19,172,81],[230,22,172,81,"_ref4"],[230,27,172,81],[230,28,172,83,"wal"],[230,31,172,86],[231,10,172,83,"wal"],[231,13,172,86],[231,16,172,86,"_ref4$wal"],[231,25,172,86],[231,39,172,89],[231,44,172,94],[231,47,172,94,"_ref4$wal"],[231,56,172,94],[232,10,172,94,"_ref4$format"],[232,22,172,94],[232,25,172,94,"_ref4"],[232,30,172,94],[232,31,172,96,"format"],[232,37,172,102],[233,10,172,96,"format"],[233,16,172,102],[233,19,172,102,"_ref4$format"],[233,31,172,102],[233,45,172,105],[233,51,172,111],[233,54,172,111,"_ref4$format"],[233,66,172,111],[234,8,173,8],[234,12,173,12,"_a"],[234,14,173,14],[235,8,174,8],[235,12,174,14,"options"],[235,19,174,21],[235,22,174,24],[235,23,175,12,"analyze"],[235,30,175,19],[235,33,175,22],[235,42,175,31],[235,45,175,34],[235,49,175,38],[235,51,176,12,"verbose"],[235,58,176,19],[235,61,176,22],[235,70,176,31],[235,73,176,34],[235,77,176,38],[235,79,177,12,"settings"],[235,87,177,20],[235,90,177,23],[235,100,177,33],[235,103,177,36],[235,107,177,40],[235,109,178,12,"buffers"],[235,116,178,19],[235,119,178,22],[235,128,178,31],[235,131,178,34],[235,135,178,38],[235,137,179,12,"wal"],[235,140,179,15],[235,143,179,18],[235,148,179,23],[235,151,179,26],[235,155,179,30],[235,156,180,9],[235,157,181,13,"filter"],[235,163,181,19],[235,164,181,20,"Boolean"],[235,171,181,27],[235,172,181,28],[235,173,182,13,"join"],[235,177,182,17],[235,178,182,18],[235,181,182,21],[235,182,182,22],[236,8,183,8],[237,8,184,8],[237,12,184,14,"forMediatype"],[237,24,184,26],[237,27,184,29],[237,28,184,30,"_a"],[237,30,184,32],[237,33,184,35],[237,37,184,39],[237,38,184,40,"headers"],[237,45,184,47],[237,46,184,48,"get"],[237,49,184,51],[237,50,184,52],[237,58,184,60],[237,59,184,61],[237,65,184,67],[237,69,184,71],[237,73,184,75,"_a"],[237,75,184,77],[237,80,184,82],[237,85,184,87],[237,86,184,88],[237,89,184,91,"_a"],[237,91,184,93],[237,94,184,96],[237,112,184,114],[238,8,185,8],[238,12,185,12],[238,13,185,13,"headers"],[238,20,185,20],[238,21,185,21,"set"],[238,24,185,24],[238,25,185,25],[238,33,185,33],[238,35,185,35],[238,65,185,65,"format"],[238,71,185,71],[238,81,185,81,"forMediatype"],[238,93,185,93],[238,107,185,107,"options"],[238,114,185,114],[238,117,185,117],[238,118,185,118],[239,8,186,8],[239,12,186,12,"format"],[239,18,186,18],[239,23,186,23],[239,29,186,29],[239,31,186,31],[240,10,187,12],[240,17,187,19],[240,21,187,23],[241,8,188,8],[241,9,188,9],[241,15,189,13],[242,10,190,12],[242,17,190,19],[242,21,190,23],[243,8,191,8],[244,6,192,4],[245,6,193,4],[246,0,194,0],[247,0,195,0],[248,0,196,0],[249,0,197,0],[250,4,193,4],[251,6,193,4,"key"],[251,9,193,4],[252,6,193,4,"value"],[252,11,193,4],[252,13,198,4],[252,22,198,4,"rollback"],[252,30,198,12,"rollback"],[252,31,198,12],[252,33,198,15],[253,8,199,8],[253,12,199,12],[253,13,199,13,"headers"],[253,20,199,20],[253,21,199,21,"append"],[253,27,199,27],[253,28,199,28],[253,36,199,36],[253,38,199,38],[253,51,199,51],[253,52,199,52],[254,8,200,8],[254,15,200,15],[254,19,200,19],[255,6,201,4],[256,6,202,4],[257,0,203,0],[258,0,204,0],[259,0,205,0],[260,0,206,0],[261,0,207,0],[262,4,202,4],[263,6,202,4,"key"],[263,9,202,4],[264,6,202,4,"value"],[264,11,202,4],[264,13,208,4],[264,22,208,4,"returns"],[264,29,208,11,"returns"],[264,30,208,11],[264,32,208,14],[265,8,209,8],[265,15,209,15],[265,19,209,19],[266,6,210,4],[267,6,211,4],[268,0,212,0],[269,0,213,0],[270,0,214,0],[271,0,215,0],[272,0,216,0],[273,4,211,4],[274,6,211,4,"key"],[274,9,211,4],[275,6,211,4,"value"],[275,11,211,4],[275,13,217,4],[275,22,217,4,"maxAffected"],[275,33,217,15,"maxAffected"],[275,34,217,16,"value"],[275,39,217,21],[275,41,217,23],[276,8,218,8],[276,12,218,12],[276,13,218,13,"headers"],[276,20,218,20],[276,21,218,21,"append"],[276,27,218,27],[276,28,218,28],[276,36,218,36],[276,38,218,38],[276,55,218,55],[276,56,218,56],[277,8,219,8],[277,12,219,12],[277,13,219,13,"headers"],[277,20,219,20],[277,21,219,21,"append"],[277,27,219,27],[277,28,219,28],[277,36,219,36],[277,38,219,38],[277,54,219,54,"value"],[277,59,219,59],[277,61,219,61],[277,62,219,62],[278,8,220,8],[278,15,220,15],[278,19,220,19],[279,6,221,4],[280,4,221,5],[281,2,221,5],[281,4,5,40,"PostgrestBuilder_1"],[281,22,5,58],[281,23,5,59,"default"],[281,30,5,66],[282,2,223,0,"exports"],[282,9,223,7],[282,10,223,8,"default"],[282,17,223,15],[282,20,223,18,"PostgrestTransformBuilder"],[282,45,223,43],[283,0,223,44],[283,3]],"functionMap":{"names":["<global>","PostgrestTransformBuilder","select","split.map$argument_0","order","limit","range","abortSignal","single","maybeSingle","csv","geojson","explain","rollback","returns","maxAffected"],"mappings":"AAA;ACI;ICU;iBCK;SDQ;KDK;IGmB;KHK;IIW;KJI;IKgB;KLO;IMM;KNG;IOO;KPG;IQO;KRW;ISI;KTG;IUI;KVG;IW0B;KXoB;IYM;KZG;IaO;KbE;IcO;KdI;CDC"}},"type":"js/module"}]}