{"dependencies":[{"name":"expo-font","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":38,"index":38}}],"key":"2pRvmGok3jynt0eNgZSF3SdmQzk=","exportNames":["*"]}},{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":39},"end":{"line":2,"column":44,"index":83}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.useFonts = useFonts;\n  var _expoFont = require(_dependencyMap[0], \"expo-font\");\n  var _react = require(_dependencyMap[1], \"react\");\n  /**\n   * Load a map of custom fonts to use in textual elements.\n   * The map keys are used as font names, and can be used with `fontFamily: <name>;`.\n   * It returns a boolean describing if all fonts are loaded.\n   *\n   * Note, the fonts are not \"reloaded\" when you dynamically change the font map.\n   *\n   * @see https://docs.expo.io/versions/latest/sdk/font/\n   * @example const [loaded, error] = useFonts(...);\n   */\n  function useFonts(map) {\n    const [loaded, setLoaded] = (0, _react.useState)(false);\n    const [error, setError] = (0, _react.useState)(null);\n    (0, _react.useEffect)(() => {\n      (0, _expoFont.loadAsync)(map).then(() => setLoaded(true)).catch(setError);\n    }, []);\n    return [loaded, error];\n  }\n});","lineCount":26,"map":[[6,2,1,0],[6,6,1,0,"_expoFont"],[6,15,1,0],[6,18,1,0,"require"],[6,25,1,0],[6,26,1,0,"_dependencyMap"],[6,40,1,0],[7,2,2,0],[7,6,2,0,"_react"],[7,12,2,0],[7,15,2,0,"require"],[7,22,2,0],[7,23,2,0,"_dependencyMap"],[7,37,2,0],[8,2,4,0],[9,0,5,0],[10,0,6,0],[11,0,7,0],[12,0,8,0],[13,0,9,0],[14,0,10,0],[15,0,11,0],[16,0,12,0],[17,0,13,0],[18,2,14,7],[18,11,14,16,"useFonts"],[18,19,14,24,"useFonts"],[18,20,14,25,"map"],[18,23,14,28],[18,25,14,30],[19,4,15,2],[19,10,15,8],[19,11,15,9,"loaded"],[19,17,15,15],[19,19,15,17,"setLoaded"],[19,28,15,26],[19,29,15,27],[19,32,15,30],[19,36,15,30,"useState"],[19,51,15,38],[19,53,15,39],[19,58,15,44],[19,59,15,45],[20,4,16,2],[20,10,16,8],[20,11,16,9,"error"],[20,16,16,14],[20,18,16,16,"setError"],[20,26,16,24],[20,27,16,25],[20,30,16,28],[20,34,16,28,"useState"],[20,49,16,36],[20,51,16,37],[20,55,16,41],[20,56,16,42],[21,4,18,2],[21,8,18,2,"useEffect"],[21,24,18,11],[21,26,18,12],[21,32,18,18],[22,6,19,4],[22,10,19,4,"loadAsync"],[22,29,19,13],[22,31,19,14,"map"],[22,34,19,17],[22,35,19,18],[22,36,20,7,"then"],[22,40,20,11],[22,41,20,12],[22,47,20,18,"setLoaded"],[22,56,20,27],[22,57,20,28],[22,61,20,32],[22,62,20,33],[22,63,20,34],[22,64,21,7,"catch"],[22,69,21,12],[22,70,21,13,"setError"],[22,78,21,21],[22,79,21,22],[23,4,22,2],[23,5,22,3],[23,7,22,5],[23,9,22,7],[23,10,22,8],[24,4,24,2],[24,11,24,9],[24,12,24,10,"loaded"],[24,18,24,16],[24,20,24,18,"error"],[24,25,24,23],[24,26,24,24],[25,2,25,0],[26,0,25,1],[26,3]],"functionMap":{"names":["<global>","useFonts","useEffect$argument_0","loadAsync.then$argument_0"],"mappings":"AAA;OCa;YCI;YCE,qBD;GDE;CDG"}},"type":"js/module"}]}