{"dependencies":[{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"yg7e6laZwmpbIvId5jovq9ugXp8=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30=","exportNames":["*"]}},{"name":"tslib","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":16,"index":93},"end":{"line":3,"column":32,"index":109}}],"key":"vm88vOsSPZItrLOmMEyUuGkd1y4=","exportNames":["*"]}},{"name":"./constants","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":20,"index":131},"end":{"line":4,"column":42,"index":153}}],"key":"3z43bJyk/UB4EKjDCOXTFak09do=","exportNames":["*"]}},{"name":"./errors","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":17,"index":172},"end":{"line":5,"column":36,"index":191}}],"key":"GlkDztMSsNRYmp31iO+V/Albin8=","exportNames":["*"]}},{"name":"./fetch","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":16,"index":209},"end":{"line":6,"column":34,"index":227}}],"key":"UJFbF+6y+lyz6VIB1bRQXGi9Ndw=","exportNames":["*"]}},{"name":"./helpers","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":18,"index":247},"end":{"line":7,"column":38,"index":267}}],"key":"f1qS3jT0PALHpwfgOy1Ia0GaJzk=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _classCallCheck = require(_dependencyMap[0], \"@babel/runtime/helpers/classCallCheck\");\n  var _createClass = require(_dependencyMap[1], \"@babel/runtime/helpers/createClass\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  var tslib_1 = require(_dependencyMap[2], \"tslib\");\n  var constants_1 = require(_dependencyMap[3], \"./constants\");\n  var errors_1 = require(_dependencyMap[4], \"./errors\");\n  var fetch_1 = require(_dependencyMap[5], \"./fetch\");\n  var helpers_1 = require(_dependencyMap[6], \"./helpers\");\n  /**\n   * API class for managing Vector Data within Vector Indexes\n   * Provides methods for inserting, querying, listing, and deleting vector embeddings\n   */\n  var VectorDataApi = /*#__PURE__*/function () {\n    function VectorDataApi(url) {\n      var headers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var fetch = arguments.length > 2 ? arguments[2] : undefined;\n      _classCallCheck(this, VectorDataApi);\n      this.shouldThrowOnError = false;\n      this.url = url.replace(/\\/$/, '');\n      this.headers = Object.assign(Object.assign({}, constants_1.DEFAULT_HEADERS), headers);\n      this.fetch = (0, helpers_1.resolveFetch)(fetch);\n    }\n    /**\n     * Enable throwing errors instead of returning them in the response\n     * When enabled, failed operations will throw instead of returning { data: null, error }\n     *\n     * @returns This instance for method chaining\n     * @example\n     * ```typescript\n     * const client = new VectorDataApi(url, headers)\n     * client.throwOnError()\n     * const { data } = await client.putVectors(options) // throws on error\n     * ```\n     */\n    return _createClass(VectorDataApi, [{\n      key: \"throwOnError\",\n      value: function throwOnError() {\n        this.shouldThrowOnError = true;\n        return this;\n      }\n      /**\n       * Inserts or updates vectors in batch (upsert operation)\n       * Accepts 1-500 vectors per request. Larger batches should be split\n       *\n       * @param options - Vector insertion options\n       * @param options.vectorBucketName - Name of the parent vector bucket\n       * @param options.indexName - Name of the target index\n       * @param options.vectors - Array of vectors to insert/update (1-500 items)\n       * @returns Promise with empty response on success or error\n       *\n       * @throws {StorageVectorsApiError} With code:\n       * - `S3VectorConflictException` if duplicate key conflict occurs (HTTP 409)\n       * - `S3VectorNotFoundException` if bucket or index doesn't exist (HTTP 404)\n       * - `InternalError` for server errors (HTTP 500)\n       *\n       * @example\n       * ```typescript\n       * const { data, error } = await client.putVectors({\n       *   vectorBucketName: 'embeddings-prod',\n       *   indexName: 'documents-openai-small',\n       *   vectors: [\n       *     {\n       *       key: 'doc-1',\n       *       data: { float32: [0.1, 0.2, 0.3, ...] }, // 1536 dimensions\n       *       metadata: { title: 'Introduction', page: 1 }\n       *     },\n       *     {\n       *       key: 'doc-2',\n       *       data: { float32: [0.4, 0.5, 0.6, ...] },\n       *       metadata: { title: 'Conclusion', page: 42 }\n       *     }\n       *   ]\n       * })\n       * ```\n       */\n    }, {\n      key: \"putVectors\",\n      value: function putVectors(options) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n          try {\n            // Validate batch size\n            if (options.vectors.length < 1 || options.vectors.length > 500) {\n              throw new Error('Vector batch size must be between 1 and 500 items');\n            }\n            var data = yield (0, fetch_1.post)(this.fetch, `${this.url}/PutVectors`, options, {\n              headers: this.headers\n            });\n            return {\n              data: data || {},\n              error: null\n            };\n          } catch (error) {\n            if (this.shouldThrowOnError) {\n              throw error;\n            }\n            if ((0, errors_1.isStorageVectorsError)(error)) {\n              return {\n                data: null,\n                error\n              };\n            }\n            throw error;\n          }\n        });\n      }\n      /**\n       * Retrieves vectors by their keys in batch\n       * Optionally includes vector data and/or metadata in response\n       * Additional permissions required when returning data or metadata\n       *\n       * @param options - Vector retrieval options\n       * @param options.vectorBucketName - Name of the parent vector bucket\n       * @param options.indexName - Name of the index\n       * @param options.keys - Array of vector keys to retrieve\n       * @param options.returnData - Whether to include vector embeddings (requires permission)\n       * @param options.returnMetadata - Whether to include metadata (requires permission)\n       * @returns Promise with array of vectors or error\n       *\n       * @throws {StorageVectorsApiError} With code:\n       * - `S3VectorNotFoundException` if bucket or index doesn't exist (HTTP 404)\n       * - `InternalError` for server errors (HTTP 500)\n       *\n       * @example\n       * ```typescript\n       * const { data, error } = await client.getVectors({\n       *   vectorBucketName: 'embeddings-prod',\n       *   indexName: 'documents-openai-small',\n       *   keys: ['doc-1', 'doc-2', 'doc-3'],\n       *   returnData: false,     // Don't return embeddings\n       *   returnMetadata: true   // Return metadata only\n       * })\n       * if (data) {\n       *   data.vectors.forEach(v => console.log(v.key, v.metadata))\n       * }\n       * ```\n       */\n    }, {\n      key: \"getVectors\",\n      value: function getVectors(options) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n          try {\n            var data = yield (0, fetch_1.post)(this.fetch, `${this.url}/GetVectors`, options, {\n              headers: this.headers\n            });\n            return {\n              data,\n              error: null\n            };\n          } catch (error) {\n            if (this.shouldThrowOnError) {\n              throw error;\n            }\n            if ((0, errors_1.isStorageVectorsError)(error)) {\n              return {\n                data: null,\n                error\n              };\n            }\n            throw error;\n          }\n        });\n      }\n      /**\n       * Lists/scans vectors in an index with pagination\n       * Supports parallel scanning via segment configuration for high-throughput scenarios\n       * Additional permissions required when returning data or metadata\n       *\n       * @param options - Vector listing options\n       * @param options.vectorBucketName - Name of the parent vector bucket\n       * @param options.indexName - Name of the index\n       * @param options.maxResults - Maximum results per page (default: 500, max: 1000)\n       * @param options.nextToken - Pagination token from previous response\n       * @param options.returnData - Whether to include vector embeddings (requires permission)\n       * @param options.returnMetadata - Whether to include metadata (requires permission)\n       * @param options.segmentCount - Total parallel segments (1-16) for distributed scanning\n       * @param options.segmentIndex - Zero-based segment index (0 to segmentCount-1)\n       * @returns Promise with array of vectors, pagination token, or error\n       *\n       * @throws {StorageVectorsApiError} With code:\n       * - `S3VectorNotFoundException` if bucket or index doesn't exist (HTTP 404)\n       * - `InternalError` for server errors (HTTP 500)\n       *\n       * @example\n       * ```typescript\n       * // Simple pagination\n       * let nextToken: string | undefined\n       * do {\n       *   const { data, error } = await client.listVectors({\n       *     vectorBucketName: 'embeddings-prod',\n       *     indexName: 'documents-openai-small',\n       *     maxResults: 500,\n       *     nextToken,\n       *     returnMetadata: true\n       *   })\n       *   if (error) break\n       *   console.log('Batch:', data.vectors.length)\n       *   nextToken = data.nextToken\n       * } while (nextToken)\n       *\n       * // Parallel scanning (4 concurrent workers)\n       * const workers = [0, 1, 2, 3].map(async (segmentIndex) => {\n       *   const { data } = await client.listVectors({\n       *     vectorBucketName: 'embeddings-prod',\n       *     indexName: 'documents-openai-small',\n       *     segmentCount: 4,\n       *     segmentIndex,\n       *     returnMetadata: true\n       *   })\n       *   return data?.vectors || []\n       * })\n       * const results = await Promise.all(workers)\n       * ```\n       */\n    }, {\n      key: \"listVectors\",\n      value: function listVectors(options) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n          try {\n            // Validate segment configuration\n            if (options.segmentCount !== undefined) {\n              if (options.segmentCount < 1 || options.segmentCount > 16) {\n                throw new Error('segmentCount must be between 1 and 16');\n              }\n              if (options.segmentIndex !== undefined) {\n                if (options.segmentIndex < 0 || options.segmentIndex >= options.segmentCount) {\n                  throw new Error(`segmentIndex must be between 0 and ${options.segmentCount - 1}`);\n                }\n              }\n            }\n            var data = yield (0, fetch_1.post)(this.fetch, `${this.url}/ListVectors`, options, {\n              headers: this.headers\n            });\n            return {\n              data,\n              error: null\n            };\n          } catch (error) {\n            if (this.shouldThrowOnError) {\n              throw error;\n            }\n            if ((0, errors_1.isStorageVectorsError)(error)) {\n              return {\n                data: null,\n                error\n              };\n            }\n            throw error;\n          }\n        });\n      }\n      /**\n       * Queries for similar vectors using approximate nearest neighbor (ANN) search\n       * Returns top-K most similar vectors based on the configured distance metric\n       * Supports optional metadata filtering (requires GetVectors permission)\n       *\n       * @param options - Query options\n       * @param options.vectorBucketName - Name of the parent vector bucket\n       * @param options.indexName - Name of the index\n       * @param options.queryVector - Query embedding to find similar vectors\n       * @param options.topK - Number of nearest neighbors to return (default: 10)\n       * @param options.filter - Optional JSON filter for metadata (requires GetVectors permission)\n       * @param options.returnDistance - Whether to include similarity distances\n       * @param options.returnMetadata - Whether to include metadata (requires GetVectors permission)\n       * @returns Promise with array of similar vectors ordered by distance\n       *\n       * @throws {StorageVectorsApiError} With code:\n       * - `S3VectorNotFoundException` if bucket or index doesn't exist (HTTP 404)\n       * - `InternalError` for server errors (HTTP 500)\n       *\n       * @example\n       * ```typescript\n       * // Semantic search with filtering\n       * const { data, error } = await client.queryVectors({\n       *   vectorBucketName: 'embeddings-prod',\n       *   indexName: 'documents-openai-small',\n       *   queryVector: { float32: [0.1, 0.2, 0.3, ...] }, // 1536 dimensions\n       *   topK: 5,\n       *   filter: {\n       *     category: 'technical',\n       *     published: true\n       *   },\n       *   returnDistance: true,\n       *   returnMetadata: true\n       * })\n       * if (data) {\n       *   data.matches.forEach(match => {\n       *     console.log(`${match.key}: distance=${match.distance}`)\n       *     console.log('Metadata:', match.metadata)\n       *   })\n       * }\n       * ```\n       */\n    }, {\n      key: \"queryVectors\",\n      value: function queryVectors(options) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n          try {\n            var data = yield (0, fetch_1.post)(this.fetch, `${this.url}/QueryVectors`, options, {\n              headers: this.headers\n            });\n            return {\n              data,\n              error: null\n            };\n          } catch (error) {\n            if (this.shouldThrowOnError) {\n              throw error;\n            }\n            if ((0, errors_1.isStorageVectorsError)(error)) {\n              return {\n                data: null,\n                error\n              };\n            }\n            throw error;\n          }\n        });\n      }\n      /**\n       * Deletes vectors by their keys in batch\n       * Accepts 1-500 keys per request\n       *\n       * @param options - Vector deletion options\n       * @param options.vectorBucketName - Name of the parent vector bucket\n       * @param options.indexName - Name of the index\n       * @param options.keys - Array of vector keys to delete (1-500 items)\n       * @returns Promise with empty response on success or error\n       *\n       * @throws {StorageVectorsApiError} With code:\n       * - `S3VectorNotFoundException` if bucket or index doesn't exist (HTTP 404)\n       * - `InternalError` for server errors (HTTP 500)\n       *\n       * @example\n       * ```typescript\n       * const { error } = await client.deleteVectors({\n       *   vectorBucketName: 'embeddings-prod',\n       *   indexName: 'documents-openai-small',\n       *   keys: ['doc-1', 'doc-2', 'doc-3']\n       * })\n       * if (!error) {\n       *   console.log('Vectors deleted successfully')\n       * }\n       * ```\n       */\n    }, {\n      key: \"deleteVectors\",\n      value: function deleteVectors(options) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n          try {\n            // Validate batch size\n            if (options.keys.length < 1 || options.keys.length > 500) {\n              throw new Error('Keys batch size must be between 1 and 500 items');\n            }\n            var data = yield (0, fetch_1.post)(this.fetch, `${this.url}/DeleteVectors`, options, {\n              headers: this.headers\n            });\n            return {\n              data: data || {},\n              error: null\n            };\n          } catch (error) {\n            if (this.shouldThrowOnError) {\n              throw error;\n            }\n            if ((0, errors_1.isStorageVectorsError)(error)) {\n              return {\n                data: null,\n                error\n              };\n            }\n            throw error;\n          }\n        });\n      }\n    }]);\n  }();\n  exports.default = VectorDataApi;\n});","lineCount":383,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_classCallCheck"],[4,21,1,13],[4,24,1,13,"require"],[4,31,1,13],[4,32,1,13,"_dependencyMap"],[4,46,1,13],[5,2,1,13],[5,6,1,13,"_createClass"],[5,18,1,13],[5,21,1,13,"require"],[5,28,1,13],[5,29,1,13,"_dependencyMap"],[5,43,1,13],[6,2,2,0,"Object"],[6,8,2,6],[6,9,2,7,"defineProperty"],[6,23,2,21],[6,24,2,22,"exports"],[6,31,2,29],[6,33,2,31],[6,45,2,43],[6,47,2,45],[7,4,2,47,"value"],[7,9,2,52],[7,11,2,54],[8,2,2,59],[8,3,2,60],[8,4,2,61],[9,2,3,0],[9,6,3,6,"tslib_1"],[9,13,3,13],[9,16,3,16,"require"],[9,23,3,23],[9,24,3,23,"_dependencyMap"],[9,38,3,23],[9,50,3,31],[9,51,3,32],[10,2,4,0],[10,6,4,6,"constants_1"],[10,17,4,17],[10,20,4,20,"require"],[10,27,4,27],[10,28,4,27,"_dependencyMap"],[10,42,4,27],[10,60,4,41],[10,61,4,42],[11,2,5,0],[11,6,5,6,"errors_1"],[11,14,5,14],[11,17,5,17,"require"],[11,24,5,24],[11,25,5,24,"_dependencyMap"],[11,39,5,24],[11,54,5,35],[11,55,5,36],[12,2,6,0],[12,6,6,6,"fetch_1"],[12,13,6,13],[12,16,6,16,"require"],[12,23,6,23],[12,24,6,23,"_dependencyMap"],[12,38,6,23],[12,52,6,33],[12,53,6,34],[13,2,7,0],[13,6,7,6,"helpers_1"],[13,15,7,15],[13,18,7,18,"require"],[13,25,7,25],[13,26,7,25,"_dependencyMap"],[13,40,7,25],[13,56,7,37],[13,57,7,38],[14,2,8,0],[15,0,9,0],[16,0,10,0],[17,0,11,0],[18,2,8,0],[18,6,12,6,"VectorDataApi"],[18,19,12,19],[19,4,13,4],[19,13,13,4,"VectorDataApi"],[19,27,13,16,"url"],[19,30,13,19],[19,32,13,42],[20,6,13,42],[20,10,13,21,"headers"],[20,17,13,28],[20,20,13,28,"arguments"],[20,29,13,28],[20,30,13,28,"length"],[20,36,13,28],[20,44,13,28,"arguments"],[20,53,13,28],[20,61,13,28,"undefined"],[20,70,13,28],[20,73,13,28,"arguments"],[20,82,13,28],[20,88,13,31],[20,89,13,32],[20,90,13,33],[21,6,13,33],[21,10,13,35,"fetch"],[21,15,13,40],[21,18,13,40,"arguments"],[21,27,13,40],[21,28,13,40,"length"],[21,34,13,40],[21,41,13,40,"arguments"],[21,50,13,40],[21,56,13,40,"undefined"],[21,65,13,40],[22,6,13,40,"_classCallCheck"],[22,21,13,40],[22,28,13,40,"VectorDataApi"],[22,41,13,40],[23,6,14,8],[23,10,14,12],[23,11,14,13,"shouldThrowOnError"],[23,29,14,31],[23,32,14,34],[23,37,14,39],[24,6,15,8],[24,10,15,12],[24,11,15,13,"url"],[24,14,15,16],[24,17,15,19,"url"],[24,20,15,22],[24,21,15,23,"replace"],[24,28,15,30],[24,29,15,31],[24,34,15,36],[24,36,15,38],[24,38,15,40],[24,39,15,41],[25,6,16,8],[25,10,16,12],[25,11,16,13,"headers"],[25,18,16,20],[25,21,16,23,"Object"],[25,27,16,29],[25,28,16,30,"assign"],[25,34,16,36],[25,35,16,37,"Object"],[25,41,16,43],[25,42,16,44,"assign"],[25,48,16,50],[25,49,16,51],[25,50,16,52],[25,51,16,53],[25,53,16,55,"constants_1"],[25,64,16,66],[25,65,16,67,"DEFAULT_HEADERS"],[25,80,16,82],[25,81,16,83],[25,83,16,85,"headers"],[25,90,16,92],[25,91,16,93],[26,6,17,8],[26,10,17,12],[26,11,17,13,"fetch"],[26,16,17,18],[26,19,17,21],[26,20,17,22],[26,21,17,23],[26,23,17,25,"helpers_1"],[26,32,17,34],[26,33,17,35,"resolveFetch"],[26,45,17,47],[26,47,17,49,"fetch"],[26,52,17,54],[26,53,17,55],[27,4,18,4],[28,4,19,4],[29,0,20,0],[30,0,21,0],[31,0,22,0],[32,0,23,0],[33,0,24,0],[34,0,25,0],[35,0,26,0],[36,0,27,0],[37,0,28,0],[38,0,29,0],[39,0,30,0],[40,4,19,4],[40,11,19,4,"_createClass"],[40,23,19,4],[40,24,19,4,"VectorDataApi"],[40,37,19,4],[41,6,19,4,"key"],[41,9,19,4],[42,6,19,4,"value"],[42,11,19,4],[42,13,31,4],[42,22,31,4,"throwOnError"],[42,34,31,16,"throwOnError"],[42,35,31,16],[42,37,31,19],[43,8,32,8],[43,12,32,12],[43,13,32,13,"shouldThrowOnError"],[43,31,32,31],[43,34,32,34],[43,38,32,38],[44,8,33,8],[44,15,33,15],[44,19,33,19],[45,6,34,4],[46,6,35,4],[47,0,36,0],[48,0,37,0],[49,0,38,0],[50,0,39,0],[51,0,40,0],[52,0,41,0],[53,0,42,0],[54,0,43,0],[55,0,44,0],[56,0,45,0],[57,0,46,0],[58,0,47,0],[59,0,48,0],[60,0,49,0],[61,0,50,0],[62,0,51,0],[63,0,52,0],[64,0,53,0],[65,0,54,0],[66,0,55,0],[67,0,56,0],[68,0,57,0],[69,0,58,0],[70,0,59,0],[71,0,60,0],[72,0,61,0],[73,0,62,0],[74,0,63,0],[75,0,64,0],[76,0,65,0],[77,0,66,0],[78,0,67,0],[79,0,68,0],[80,0,69,0],[81,4,35,4],[82,6,35,4,"key"],[82,9,35,4],[83,6,35,4,"value"],[83,11,35,4],[83,13,70,4],[83,22,70,4,"putVectors"],[83,32,70,14,"putVectors"],[83,33,70,15,"options"],[83,40,70,22],[83,42,70,24],[84,8,71,8],[84,15,71,15,"tslib_1"],[84,22,71,22],[84,23,71,23,"__awaiter"],[84,32,71,32],[84,33,71,33],[84,37,71,37],[84,39,71,39],[84,44,71,44],[84,45,71,45],[84,47,71,47],[84,52,71,52],[84,53,71,53],[84,55,71,55],[84,68,71,68],[85,10,72,12],[85,14,72,16],[86,12,73,16],[87,12,74,16],[87,16,74,20,"options"],[87,23,74,27],[87,24,74,28,"vectors"],[87,31,74,35],[87,32,74,36,"length"],[87,38,74,42],[87,41,74,45],[87,42,74,46],[87,46,74,50,"options"],[87,53,74,57],[87,54,74,58,"vectors"],[87,61,74,65],[87,62,74,66,"length"],[87,68,74,72],[87,71,74,75],[87,74,74,78],[87,76,74,80],[88,14,75,20],[88,20,75,26],[88,24,75,30,"Error"],[88,29,75,35],[88,30,75,36],[88,81,75,87],[88,82,75,88],[89,12,76,16],[90,12,77,16],[90,16,77,22,"data"],[90,20,77,26],[90,23,77,29],[90,29,77,35],[90,30,77,36],[90,31,77,37],[90,33,77,39,"fetch_1"],[90,40,77,46],[90,41,77,47,"post"],[90,45,77,51],[90,47,77,53],[90,51,77,57],[90,52,77,58,"fetch"],[90,57,77,63],[90,59,77,65],[90,62,77,68],[90,66,77,72],[90,67,77,73,"url"],[90,70,77,76],[90,83,77,89],[90,85,77,91,"options"],[90,92,77,98],[90,94,77,100],[91,14,78,20,"headers"],[91,21,78,27],[91,23,78,29],[91,27,78,33],[91,28,78,34,"headers"],[92,12,79,16],[92,13,79,17],[92,14,79,18],[93,12,80,16],[93,19,80,23],[94,14,80,25,"data"],[94,18,80,29],[94,20,80,31,"data"],[94,24,80,35],[94,28,80,39],[94,29,80,40],[94,30,80,41],[95,14,80,43,"error"],[95,19,80,48],[95,21,80,50],[96,12,80,55],[96,13,80,56],[97,10,81,12],[97,11,81,13],[97,12,82,12],[97,19,82,19,"error"],[97,24,82,24],[97,26,82,26],[98,12,83,16],[98,16,83,20],[98,20,83,24],[98,21,83,25,"shouldThrowOnError"],[98,39,83,43],[98,41,83,45],[99,14,84,20],[99,20,84,26,"error"],[99,25,84,31],[100,12,85,16],[101,12,86,16],[101,16,86,20],[101,17,86,21],[101,18,86,22],[101,20,86,24,"errors_1"],[101,28,86,32],[101,29,86,33,"isStorageVectorsError"],[101,50,86,54],[101,52,86,56,"error"],[101,57,86,61],[101,58,86,62],[101,60,86,64],[102,14,87,20],[102,21,87,27],[103,16,87,29,"data"],[103,20,87,33],[103,22,87,35],[103,26,87,39],[104,16,87,41,"error"],[105,14,87,47],[105,15,87,48],[106,12,88,16],[107,12,89,16],[107,18,89,22,"error"],[107,23,89,27],[108,10,90,12],[109,8,91,8],[109,9,91,9],[109,10,91,10],[110,6,92,4],[111,6,93,4],[112,0,94,0],[113,0,95,0],[114,0,96,0],[115,0,97,0],[116,0,98,0],[117,0,99,0],[118,0,100,0],[119,0,101,0],[120,0,102,0],[121,0,103,0],[122,0,104,0],[123,0,105,0],[124,0,106,0],[125,0,107,0],[126,0,108,0],[127,0,109,0],[128,0,110,0],[129,0,111,0],[130,0,112,0],[131,0,113,0],[132,0,114,0],[133,0,115,0],[134,0,116,0],[135,0,117,0],[136,0,118,0],[137,0,119,0],[138,0,120,0],[139,0,121,0],[140,0,122,0],[141,0,123,0],[142,4,93,4],[143,6,93,4,"key"],[143,9,93,4],[144,6,93,4,"value"],[144,11,93,4],[144,13,124,4],[144,22,124,4,"getVectors"],[144,32,124,14,"getVectors"],[144,33,124,15,"options"],[144,40,124,22],[144,42,124,24],[145,8,125,8],[145,15,125,15,"tslib_1"],[145,22,125,22],[145,23,125,23,"__awaiter"],[145,32,125,32],[145,33,125,33],[145,37,125,37],[145,39,125,39],[145,44,125,44],[145,45,125,45],[145,47,125,47],[145,52,125,52],[145,53,125,53],[145,55,125,55],[145,68,125,68],[146,10,126,12],[146,14,126,16],[147,12,127,16],[147,16,127,22,"data"],[147,20,127,26],[147,23,127,29],[147,29,127,35],[147,30,127,36],[147,31,127,37],[147,33,127,39,"fetch_1"],[147,40,127,46],[147,41,127,47,"post"],[147,45,127,51],[147,47,127,53],[147,51,127,57],[147,52,127,58,"fetch"],[147,57,127,63],[147,59,127,65],[147,62,127,68],[147,66,127,72],[147,67,127,73,"url"],[147,70,127,76],[147,83,127,89],[147,85,127,91,"options"],[147,92,127,98],[147,94,127,100],[148,14,128,20,"headers"],[148,21,128,27],[148,23,128,29],[148,27,128,33],[148,28,128,34,"headers"],[149,12,129,16],[149,13,129,17],[149,14,129,18],[150,12,130,16],[150,19,130,23],[151,14,130,25,"data"],[151,18,130,29],[152,14,130,31,"error"],[152,19,130,36],[152,21,130,38],[153,12,130,43],[153,13,130,44],[154,10,131,12],[154,11,131,13],[154,12,132,12],[154,19,132,19,"error"],[154,24,132,24],[154,26,132,26],[155,12,133,16],[155,16,133,20],[155,20,133,24],[155,21,133,25,"shouldThrowOnError"],[155,39,133,43],[155,41,133,45],[156,14,134,20],[156,20,134,26,"error"],[156,25,134,31],[157,12,135,16],[158,12,136,16],[158,16,136,20],[158,17,136,21],[158,18,136,22],[158,20,136,24,"errors_1"],[158,28,136,32],[158,29,136,33,"isStorageVectorsError"],[158,50,136,54],[158,52,136,56,"error"],[158,57,136,61],[158,58,136,62],[158,60,136,64],[159,14,137,20],[159,21,137,27],[160,16,137,29,"data"],[160,20,137,33],[160,22,137,35],[160,26,137,39],[161,16,137,41,"error"],[162,14,137,47],[162,15,137,48],[163,12,138,16],[164,12,139,16],[164,18,139,22,"error"],[164,23,139,27],[165,10,140,12],[166,8,141,8],[166,9,141,9],[166,10,141,10],[167,6,142,4],[168,6,143,4],[169,0,144,0],[170,0,145,0],[171,0,146,0],[172,0,147,0],[173,0,148,0],[174,0,149,0],[175,0,150,0],[176,0,151,0],[177,0,152,0],[178,0,153,0],[179,0,154,0],[180,0,155,0],[181,0,156,0],[182,0,157,0],[183,0,158,0],[184,0,159,0],[185,0,160,0],[186,0,161,0],[187,0,162,0],[188,0,163,0],[189,0,164,0],[190,0,165,0],[191,0,166,0],[192,0,167,0],[193,0,168,0],[194,0,169,0],[195,0,170,0],[196,0,171,0],[197,0,172,0],[198,0,173,0],[199,0,174,0],[200,0,175,0],[201,0,176,0],[202,0,177,0],[203,0,178,0],[204,0,179,0],[205,0,180,0],[206,0,181,0],[207,0,182,0],[208,0,183,0],[209,0,184,0],[210,0,185,0],[211,0,186,0],[212,0,187,0],[213,0,188,0],[214,0,189,0],[215,0,190,0],[216,0,191,0],[217,0,192,0],[218,0,193,0],[219,4,143,4],[220,6,143,4,"key"],[220,9,143,4],[221,6,143,4,"value"],[221,11,143,4],[221,13,194,4],[221,22,194,4,"listVectors"],[221,33,194,15,"listVectors"],[221,34,194,16,"options"],[221,41,194,23],[221,43,194,25],[222,8,195,8],[222,15,195,15,"tslib_1"],[222,22,195,22],[222,23,195,23,"__awaiter"],[222,32,195,32],[222,33,195,33],[222,37,195,37],[222,39,195,39],[222,44,195,44],[222,45,195,45],[222,47,195,47],[222,52,195,52],[222,53,195,53],[222,55,195,55],[222,68,195,68],[223,10,196,12],[223,14,196,16],[224,12,197,16],[225,12,198,16],[225,16,198,20,"options"],[225,23,198,27],[225,24,198,28,"segmentCount"],[225,36,198,40],[225,41,198,45,"undefined"],[225,50,198,54],[225,52,198,56],[226,14,199,20],[226,18,199,24,"options"],[226,25,199,31],[226,26,199,32,"segmentCount"],[226,38,199,44],[226,41,199,47],[226,42,199,48],[226,46,199,52,"options"],[226,53,199,59],[226,54,199,60,"segmentCount"],[226,66,199,72],[226,69,199,75],[226,71,199,77],[226,73,199,79],[227,16,200,24],[227,22,200,30],[227,26,200,34,"Error"],[227,31,200,39],[227,32,200,40],[227,71,200,79],[227,72,200,80],[228,14,201,20],[229,14,202,20],[229,18,202,24,"options"],[229,25,202,31],[229,26,202,32,"segmentIndex"],[229,38,202,44],[229,43,202,49,"undefined"],[229,52,202,58],[229,54,202,60],[230,16,203,24],[230,20,203,28,"options"],[230,27,203,35],[230,28,203,36,"segmentIndex"],[230,40,203,48],[230,43,203,51],[230,44,203,52],[230,48,203,56,"options"],[230,55,203,63],[230,56,203,64,"segmentIndex"],[230,68,203,76],[230,72,203,80,"options"],[230,79,203,87],[230,80,203,88,"segmentCount"],[230,92,203,100],[230,94,203,102],[231,18,204,28],[231,24,204,34],[231,28,204,38,"Error"],[231,33,204,43],[231,34,204,44],[231,72,204,82,"options"],[231,79,204,89],[231,80,204,90,"segmentCount"],[231,92,204,102],[231,95,204,105],[231,96,204,106],[231,98,204,108],[231,99,204,109],[232,16,205,24],[233,14,206,20],[234,12,207,16],[235,12,208,16],[235,16,208,22,"data"],[235,20,208,26],[235,23,208,29],[235,29,208,35],[235,30,208,36],[235,31,208,37],[235,33,208,39,"fetch_1"],[235,40,208,46],[235,41,208,47,"post"],[235,45,208,51],[235,47,208,53],[235,51,208,57],[235,52,208,58,"fetch"],[235,57,208,63],[235,59,208,65],[235,62,208,68],[235,66,208,72],[235,67,208,73,"url"],[235,70,208,76],[235,84,208,90],[235,86,208,92,"options"],[235,93,208,99],[235,95,208,101],[236,14,209,20,"headers"],[236,21,209,27],[236,23,209,29],[236,27,209,33],[236,28,209,34,"headers"],[237,12,210,16],[237,13,210,17],[237,14,210,18],[238,12,211,16],[238,19,211,23],[239,14,211,25,"data"],[239,18,211,29],[240,14,211,31,"error"],[240,19,211,36],[240,21,211,38],[241,12,211,43],[241,13,211,44],[242,10,212,12],[242,11,212,13],[242,12,213,12],[242,19,213,19,"error"],[242,24,213,24],[242,26,213,26],[243,12,214,16],[243,16,214,20],[243,20,214,24],[243,21,214,25,"shouldThrowOnError"],[243,39,214,43],[243,41,214,45],[244,14,215,20],[244,20,215,26,"error"],[244,25,215,31],[245,12,216,16],[246,12,217,16],[246,16,217,20],[246,17,217,21],[246,18,217,22],[246,20,217,24,"errors_1"],[246,28,217,32],[246,29,217,33,"isStorageVectorsError"],[246,50,217,54],[246,52,217,56,"error"],[246,57,217,61],[246,58,217,62],[246,60,217,64],[247,14,218,20],[247,21,218,27],[248,16,218,29,"data"],[248,20,218,33],[248,22,218,35],[248,26,218,39],[249,16,218,41,"error"],[250,14,218,47],[250,15,218,48],[251,12,219,16],[252,12,220,16],[252,18,220,22,"error"],[252,23,220,27],[253,10,221,12],[254,8,222,8],[254,9,222,9],[254,10,222,10],[255,6,223,4],[256,6,224,4],[257,0,225,0],[258,0,226,0],[259,0,227,0],[260,0,228,0],[261,0,229,0],[262,0,230,0],[263,0,231,0],[264,0,232,0],[265,0,233,0],[266,0,234,0],[267,0,235,0],[268,0,236,0],[269,0,237,0],[270,0,238,0],[271,0,239,0],[272,0,240,0],[273,0,241,0],[274,0,242,0],[275,0,243,0],[276,0,244,0],[277,0,245,0],[278,0,246,0],[279,0,247,0],[280,0,248,0],[281,0,249,0],[282,0,250,0],[283,0,251,0],[284,0,252,0],[285,0,253,0],[286,0,254,0],[287,0,255,0],[288,0,256,0],[289,0,257,0],[290,0,258,0],[291,0,259,0],[292,0,260,0],[293,0,261,0],[294,0,262,0],[295,0,263,0],[296,0,264,0],[297,0,265,0],[298,4,224,4],[299,6,224,4,"key"],[299,9,224,4],[300,6,224,4,"value"],[300,11,224,4],[300,13,266,4],[300,22,266,4,"queryVectors"],[300,34,266,16,"queryVectors"],[300,35,266,17,"options"],[300,42,266,24],[300,44,266,26],[301,8,267,8],[301,15,267,15,"tslib_1"],[301,22,267,22],[301,23,267,23,"__awaiter"],[301,32,267,32],[301,33,267,33],[301,37,267,37],[301,39,267,39],[301,44,267,44],[301,45,267,45],[301,47,267,47],[301,52,267,52],[301,53,267,53],[301,55,267,55],[301,68,267,68],[302,10,268,12],[302,14,268,16],[303,12,269,16],[303,16,269,22,"data"],[303,20,269,26],[303,23,269,29],[303,29,269,35],[303,30,269,36],[303,31,269,37],[303,33,269,39,"fetch_1"],[303,40,269,46],[303,41,269,47,"post"],[303,45,269,51],[303,47,269,53],[303,51,269,57],[303,52,269,58,"fetch"],[303,57,269,63],[303,59,269,65],[303,62,269,68],[303,66,269,72],[303,67,269,73,"url"],[303,70,269,76],[303,85,269,91],[303,87,269,93,"options"],[303,94,269,100],[303,96,269,102],[304,14,270,20,"headers"],[304,21,270,27],[304,23,270,29],[304,27,270,33],[304,28,270,34,"headers"],[305,12,271,16],[305,13,271,17],[305,14,271,18],[306,12,272,16],[306,19,272,23],[307,14,272,25,"data"],[307,18,272,29],[308,14,272,31,"error"],[308,19,272,36],[308,21,272,38],[309,12,272,43],[309,13,272,44],[310,10,273,12],[310,11,273,13],[310,12,274,12],[310,19,274,19,"error"],[310,24,274,24],[310,26,274,26],[311,12,275,16],[311,16,275,20],[311,20,275,24],[311,21,275,25,"shouldThrowOnError"],[311,39,275,43],[311,41,275,45],[312,14,276,20],[312,20,276,26,"error"],[312,25,276,31],[313,12,277,16],[314,12,278,16],[314,16,278,20],[314,17,278,21],[314,18,278,22],[314,20,278,24,"errors_1"],[314,28,278,32],[314,29,278,33,"isStorageVectorsError"],[314,50,278,54],[314,52,278,56,"error"],[314,57,278,61],[314,58,278,62],[314,60,278,64],[315,14,279,20],[315,21,279,27],[316,16,279,29,"data"],[316,20,279,33],[316,22,279,35],[316,26,279,39],[317,16,279,41,"error"],[318,14,279,47],[318,15,279,48],[319,12,280,16],[320,12,281,16],[320,18,281,22,"error"],[320,23,281,27],[321,10,282,12],[322,8,283,8],[322,9,283,9],[322,10,283,10],[323,6,284,4],[324,6,285,4],[325,0,286,0],[326,0,287,0],[327,0,288,0],[328,0,289,0],[329,0,290,0],[330,0,291,0],[331,0,292,0],[332,0,293,0],[333,0,294,0],[334,0,295,0],[335,0,296,0],[336,0,297,0],[337,0,298,0],[338,0,299,0],[339,0,300,0],[340,0,301,0],[341,0,302,0],[342,0,303,0],[343,0,304,0],[344,0,305,0],[345,0,306,0],[346,0,307,0],[347,0,308,0],[348,0,309,0],[349,0,310,0],[350,4,285,4],[351,6,285,4,"key"],[351,9,285,4],[352,6,285,4,"value"],[352,11,285,4],[352,13,311,4],[352,22,311,4,"deleteVectors"],[352,35,311,17,"deleteVectors"],[352,36,311,18,"options"],[352,43,311,25],[352,45,311,27],[353,8,312,8],[353,15,312,15,"tslib_1"],[353,22,312,22],[353,23,312,23,"__awaiter"],[353,32,312,32],[353,33,312,33],[353,37,312,37],[353,39,312,39],[353,44,312,44],[353,45,312,45],[353,47,312,47],[353,52,312,52],[353,53,312,53],[353,55,312,55],[353,68,312,68],[354,10,313,12],[354,14,313,16],[355,12,314,16],[356,12,315,16],[356,16,315,20,"options"],[356,23,315,27],[356,24,315,28,"keys"],[356,28,315,32],[356,29,315,33,"length"],[356,35,315,39],[356,38,315,42],[356,39,315,43],[356,43,315,47,"options"],[356,50,315,54],[356,51,315,55,"keys"],[356,55,315,59],[356,56,315,60,"length"],[356,62,315,66],[356,65,315,69],[356,68,315,72],[356,70,315,74],[357,14,316,20],[357,20,316,26],[357,24,316,30,"Error"],[357,29,316,35],[357,30,316,36],[357,79,316,85],[357,80,316,86],[358,12,317,16],[359,12,318,16],[359,16,318,22,"data"],[359,20,318,26],[359,23,318,29],[359,29,318,35],[359,30,318,36],[359,31,318,37],[359,33,318,39,"fetch_1"],[359,40,318,46],[359,41,318,47,"post"],[359,45,318,51],[359,47,318,53],[359,51,318,57],[359,52,318,58,"fetch"],[359,57,318,63],[359,59,318,65],[359,62,318,68],[359,66,318,72],[359,67,318,73,"url"],[359,70,318,76],[359,86,318,92],[359,88,318,94,"options"],[359,95,318,101],[359,97,318,103],[360,14,319,20,"headers"],[360,21,319,27],[360,23,319,29],[360,27,319,33],[360,28,319,34,"headers"],[361,12,320,16],[361,13,320,17],[361,14,320,18],[362,12,321,16],[362,19,321,23],[363,14,321,25,"data"],[363,18,321,29],[363,20,321,31,"data"],[363,24,321,35],[363,28,321,39],[363,29,321,40],[363,30,321,41],[364,14,321,43,"error"],[364,19,321,48],[364,21,321,50],[365,12,321,55],[365,13,321,56],[366,10,322,12],[366,11,322,13],[366,12,323,12],[366,19,323,19,"error"],[366,24,323,24],[366,26,323,26],[367,12,324,16],[367,16,324,20],[367,20,324,24],[367,21,324,25,"shouldThrowOnError"],[367,39,324,43],[367,41,324,45],[368,14,325,20],[368,20,325,26,"error"],[368,25,325,31],[369,12,326,16],[370,12,327,16],[370,16,327,20],[370,17,327,21],[370,18,327,22],[370,20,327,24,"errors_1"],[370,28,327,32],[370,29,327,33,"isStorageVectorsError"],[370,50,327,54],[370,52,327,56,"error"],[370,57,327,61],[370,58,327,62],[370,60,327,64],[371,14,328,20],[371,21,328,27],[372,16,328,29,"data"],[372,20,328,33],[372,22,328,35],[372,26,328,39],[373,16,328,41,"error"],[374,14,328,47],[374,15,328,48],[375,12,329,16],[376,12,330,16],[376,18,330,22,"error"],[376,23,330,27],[377,10,331,12],[378,8,332,8],[378,9,332,9],[378,10,332,10],[379,6,333,4],[380,4,333,5],[381,2,333,5],[382,2,335,0,"exports"],[382,9,335,7],[382,10,335,8,"default"],[382,17,335,15],[382,20,335,18,"VectorDataApi"],[382,33,335,31],[383,0,335,32],[383,3]],"functionMap":{"names":["<global>","VectorDataApi","constructor","throwOnError","putVectors","tslib_1.__awaiter$argument_3","getVectors","listVectors","queryVectors","deleteVectors"],"mappings":"AAA;ACW;ICC;KDK;IEa;KFG;IGoC;uDCC;SDoB;KHC;IKgC;uDDC;SCgB;KLC;IMoD;uDFC;SE2B;KNC;IO2C;uDHC;SGgB;KPC;IQ2B;uDJC;SIoB;KRC;CDC"}},"type":"js/module"}]}