{"dependencies":[{"name":"./thenable.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":20},"end":{"line":2,"column":47,"index":67}}],"key":"kKA5IQ5mf6XoWFagMsmQasyMyhE=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.defaultShouldDehydrateMutation = defaultShouldDehydrateMutation;\n  exports.defaultShouldDehydrateQuery = defaultShouldDehydrateQuery;\n  exports.dehydrate = dehydrate;\n  exports.hydrate = hydrate;\n  var _thenable = require(_dependencyMap[0], \"./thenable.js\");\n  // src/hydration.ts\n\n  function defaultTransformerFn(data) {\n    return data;\n  }\n  function dehydrateMutation(mutation) {\n    return {\n      mutationKey: mutation.options.mutationKey,\n      state: mutation.state,\n      ...(mutation.options.scope && {\n        scope: mutation.options.scope\n      }),\n      ...(mutation.meta && {\n        meta: mutation.meta\n      })\n    };\n  }\n  function dehydrateQuery(query, serializeData, shouldRedactErrors) {\n    return {\n      dehydratedAt: Date.now(),\n      state: {\n        ...query.state,\n        ...(query.state.data !== void 0 && {\n          data: serializeData(query.state.data)\n        })\n      },\n      queryKey: query.queryKey,\n      queryHash: query.queryHash,\n      ...(query.state.status === \"pending\" && {\n        promise: query.promise?.then(serializeData).catch(error => {\n          if (!shouldRedactErrors(error)) {\n            return Promise.reject(error);\n          }\n          if (process.env.NODE_ENV !== \"production\") {\n            console.error(`A query that was dehydrated as pending ended up rejecting. [${query.queryHash}]: ${error}; The error will be redacted in production builds`);\n          }\n          return Promise.reject(new Error(\"redacted\"));\n        })\n      }),\n      ...(query.meta && {\n        meta: query.meta\n      })\n    };\n  }\n  function defaultShouldDehydrateMutation(mutation) {\n    return mutation.state.isPaused;\n  }\n  function defaultShouldDehydrateQuery(query) {\n    return query.state.status === \"success\";\n  }\n  function defaultShouldRedactErrors(_) {\n    return true;\n  }\n  function dehydrate(client, options = {}) {\n    const filterMutation = options.shouldDehydrateMutation ?? client.getDefaultOptions().dehydrate?.shouldDehydrateMutation ?? defaultShouldDehydrateMutation;\n    const mutations = client.getMutationCache().getAll().flatMap(mutation => filterMutation(mutation) ? [dehydrateMutation(mutation)] : []);\n    const filterQuery = options.shouldDehydrateQuery ?? client.getDefaultOptions().dehydrate?.shouldDehydrateQuery ?? defaultShouldDehydrateQuery;\n    const shouldRedactErrors = options.shouldRedactErrors ?? client.getDefaultOptions().dehydrate?.shouldRedactErrors ?? defaultShouldRedactErrors;\n    const serializeData = options.serializeData ?? client.getDefaultOptions().dehydrate?.serializeData ?? defaultTransformerFn;\n    const queries = client.getQueryCache().getAll().flatMap(query => filterQuery(query) ? [dehydrateQuery(query, serializeData, shouldRedactErrors)] : []);\n    return {\n      mutations,\n      queries\n    };\n  }\n  function hydrate(client, dehydratedState, options) {\n    if (typeof dehydratedState !== \"object\" || dehydratedState === null) {\n      return;\n    }\n    const mutationCache = client.getMutationCache();\n    const queryCache = client.getQueryCache();\n    const deserializeData = options?.defaultOptions?.deserializeData ?? client.getDefaultOptions().hydrate?.deserializeData ?? defaultTransformerFn;\n    const mutations = dehydratedState.mutations || [];\n    const queries = dehydratedState.queries || [];\n    mutations.forEach(({\n      state,\n      ...mutationOptions\n    }) => {\n      mutationCache.build(client, {\n        ...client.getDefaultOptions().hydrate?.mutations,\n        ...options?.defaultOptions?.mutations,\n        ...mutationOptions\n      }, state);\n    });\n    queries.forEach(({\n      queryKey,\n      state,\n      queryHash,\n      meta,\n      promise,\n      dehydratedAt\n    }) => {\n      const syncData = promise ? (0, _thenable.tryResolveSync)(promise) : void 0;\n      const rawData = state.data === void 0 ? syncData?.data : state.data;\n      const data = rawData === void 0 ? rawData : deserializeData(rawData);\n      let query = queryCache.get(queryHash);\n      const existingQueryIsPending = query?.state.status === \"pending\";\n      const existingQueryIsFetching = query?.state.fetchStatus === \"fetching\";\n      if (query) {\n        const hasNewerSyncData = syncData &&\n        // We only need this undefined check to handle older dehydration\n        // payloads that might not have dehydratedAt\n        dehydratedAt !== void 0 && dehydratedAt > query.state.dataUpdatedAt;\n        if (state.dataUpdatedAt > query.state.dataUpdatedAt || hasNewerSyncData) {\n          const {\n            fetchStatus: _ignored,\n            ...serializedState\n          } = state;\n          query.setState({\n            ...serializedState,\n            data\n          });\n        }\n      } else {\n        query = queryCache.build(client, {\n          ...client.getDefaultOptions().hydrate?.queries,\n          ...options?.defaultOptions?.queries,\n          queryKey,\n          queryHash,\n          meta\n        },\n        // Reset fetch status to idle to avoid\n        // query being stuck in fetching state upon hydration\n        {\n          ...state,\n          data,\n          fetchStatus: \"idle\",\n          status: data !== void 0 ? \"success\" : state.status\n        });\n      }\n      if (promise && !existingQueryIsPending && !existingQueryIsFetching && (\n      // Only hydrate if dehydration is newer than any existing data,\n      // this is always true for new queries\n      dehydratedAt === void 0 || dehydratedAt > query.state.dataUpdatedAt)) {\n        void query.fetch(void 0, {\n          // RSC transformed promises are not thenable\n          initialPromise: Promise.resolve(promise).then(deserializeData)\n        });\n      }\n    });\n  }\n});","lineCount":151,"map":[[9,2,2,0],[9,6,2,0,"_thenable"],[9,15,2,0],[9,18,2,0,"require"],[9,25,2,0],[9,26,2,0,"_dependencyMap"],[9,40,2,0],[10,2,1,0],[12,2,3,0],[12,11,3,9,"defaultTransformerFn"],[12,31,3,29,"defaultTransformerFn"],[12,32,3,30,"data"],[12,36,3,34],[12,38,3,36],[13,4,4,2],[13,11,4,9,"data"],[13,15,4,13],[14,2,5,0],[15,2,6,0],[15,11,6,9,"dehydrateMutation"],[15,28,6,26,"dehydrateMutation"],[15,29,6,27,"mutation"],[15,37,6,35],[15,39,6,37],[16,4,7,2],[16,11,7,9],[17,6,8,4,"mutationKey"],[17,17,8,15],[17,19,8,17,"mutation"],[17,27,8,25],[17,28,8,26,"options"],[17,35,8,33],[17,36,8,34,"mutationKey"],[17,47,8,45],[18,6,9,4,"state"],[18,11,9,9],[18,13,9,11,"mutation"],[18,21,9,19],[18,22,9,20,"state"],[18,27,9,25],[19,6,10,4],[19,10,10,7,"mutation"],[19,18,10,15],[19,19,10,16,"options"],[19,26,10,23],[19,27,10,24,"scope"],[19,32,10,29],[19,36,10,33],[20,8,10,35,"scope"],[20,13,10,40],[20,15,10,42,"mutation"],[20,23,10,50],[20,24,10,51,"options"],[20,31,10,58],[20,32,10,59,"scope"],[21,6,10,65],[21,7,10,66],[22,6,11,4],[22,10,11,7,"mutation"],[22,18,11,15],[22,19,11,16,"meta"],[22,23,11,20],[22,27,11,24],[23,8,11,26,"meta"],[23,12,11,30],[23,14,11,32,"mutation"],[23,22,11,40],[23,23,11,41,"meta"],[24,6,11,46],[24,7,11,47],[25,4,12,2],[25,5,12,3],[26,2,13,0],[27,2,14,0],[27,11,14,9,"dehydrateQuery"],[27,25,14,23,"dehydrateQuery"],[27,26,14,24,"query"],[27,31,14,29],[27,33,14,31,"serializeData"],[27,46,14,44],[27,48,14,46,"shouldRedactErrors"],[27,66,14,64],[27,68,14,66],[28,4,15,2],[28,11,15,9],[29,6,16,4,"dehydratedAt"],[29,18,16,16],[29,20,16,18,"Date"],[29,24,16,22],[29,25,16,23,"now"],[29,28,16,26],[29,29,16,27],[29,30,16,28],[30,6,17,4,"state"],[30,11,17,9],[30,13,17,11],[31,8,18,6],[31,11,18,9,"query"],[31,16,18,14],[31,17,18,15,"state"],[31,22,18,20],[32,8,19,6],[32,12,19,9,"query"],[32,17,19,14],[32,18,19,15,"state"],[32,23,19,20],[32,24,19,21,"data"],[32,28,19,25],[32,33,19,30],[32,38,19,35],[32,39,19,36],[32,43,19,40],[33,10,20,8,"data"],[33,14,20,12],[33,16,20,14,"serializeData"],[33,29,20,27],[33,30,20,28,"query"],[33,35,20,33],[33,36,20,34,"state"],[33,41,20,39],[33,42,20,40,"data"],[33,46,20,44],[34,8,21,6],[34,9,21,7],[35,6,22,4],[35,7,22,5],[36,6,23,4,"queryKey"],[36,14,23,12],[36,16,23,14,"query"],[36,21,23,19],[36,22,23,20,"queryKey"],[36,30,23,28],[37,6,24,4,"queryHash"],[37,15,24,13],[37,17,24,15,"query"],[37,22,24,20],[37,23,24,21,"queryHash"],[37,32,24,30],[38,6,25,4],[38,10,25,7,"query"],[38,15,25,12],[38,16,25,13,"state"],[38,21,25,18],[38,22,25,19,"status"],[38,28,25,25],[38,33,25,30],[38,42,25,39],[38,46,25,43],[39,8,26,6,"promise"],[39,15,26,13],[39,17,26,15,"query"],[39,22,26,20],[39,23,26,21,"promise"],[39,30,26,28],[39,32,26,30,"then"],[39,36,26,34],[39,37,26,35,"serializeData"],[39,50,26,48],[39,51,26,49],[39,52,26,50,"catch"],[39,57,26,55],[39,58,26,57,"error"],[39,63,26,62],[39,67,26,67],[40,10,27,8],[40,14,27,12],[40,15,27,13,"shouldRedactErrors"],[40,33,27,31],[40,34,27,32,"error"],[40,39,27,37],[40,40,27,38],[40,42,27,40],[41,12,28,10],[41,19,28,17,"Promise"],[41,26,28,24],[41,27,28,25,"reject"],[41,33,28,31],[41,34,28,32,"error"],[41,39,28,37],[41,40,28,38],[42,10,29,8],[43,10,30,8],[43,14,30,12,"process"],[43,21,30,19],[43,22,30,20,"env"],[43,25,30,23],[43,26,30,24,"NODE_ENV"],[43,34,30,32],[43,39,30,37],[43,51,30,49],[43,53,30,51],[44,12,31,10,"console"],[44,19,31,17],[44,20,31,18,"error"],[44,25,31,23],[44,26,32,12],[44,89,32,75,"query"],[44,94,32,80],[44,95,32,81,"queryHash"],[44,104,32,90],[44,110,32,96,"error"],[44,115,32,101],[44,166,33,10],[44,167,33,11],[45,10,34,8],[46,10,35,8],[46,17,35,15,"Promise"],[46,24,35,22],[46,25,35,23,"reject"],[46,31,35,29],[46,32,35,30],[46,36,35,34,"Error"],[46,41,35,39],[46,42,35,40],[46,52,35,50],[46,53,35,51],[46,54,35,52],[47,8,36,6],[47,9,36,7],[48,6,37,4],[48,7,37,5],[49,6,38,4],[49,10,38,7,"query"],[49,15,38,12],[49,16,38,13,"meta"],[49,20,38,17],[49,24,38,21],[50,8,38,23,"meta"],[50,12,38,27],[50,14,38,29,"query"],[50,19,38,34],[50,20,38,35,"meta"],[51,6,38,40],[51,7,38,41],[52,4,39,2],[52,5,39,3],[53,2,40,0],[54,2,41,0],[54,11,41,9,"defaultShouldDehydrateMutation"],[54,41,41,39,"defaultShouldDehydrateMutation"],[54,42,41,40,"mutation"],[54,50,41,48],[54,52,41,50],[55,4,42,2],[55,11,42,9,"mutation"],[55,19,42,17],[55,20,42,18,"state"],[55,25,42,23],[55,26,42,24,"isPaused"],[55,34,42,32],[56,2,43,0],[57,2,44,0],[57,11,44,9,"defaultShouldDehydrateQuery"],[57,38,44,36,"defaultShouldDehydrateQuery"],[57,39,44,37,"query"],[57,44,44,42],[57,46,44,44],[58,4,45,2],[58,11,45,9,"query"],[58,16,45,14],[58,17,45,15,"state"],[58,22,45,20],[58,23,45,21,"status"],[58,29,45,27],[58,34,45,32],[58,43,45,41],[59,2,46,0],[60,2,47,0],[60,11,47,9,"defaultShouldRedactErrors"],[60,36,47,34,"defaultShouldRedactErrors"],[60,37,47,35,"_"],[60,38,47,36],[60,40,47,38],[61,4,48,2],[61,11,48,9],[61,15,48,13],[62,2,49,0],[63,2,50,0],[63,11,50,9,"dehydrate"],[63,20,50,18,"dehydrate"],[63,21,50,19,"client"],[63,27,50,25],[63,29,50,27,"options"],[63,36,50,34],[63,39,50,37],[63,40,50,38],[63,41,50,39],[63,43,50,41],[64,4,51,2],[64,10,51,8,"filterMutation"],[64,24,51,22],[64,27,51,25,"options"],[64,34,51,32],[64,35,51,33,"shouldDehydrateMutation"],[64,58,51,56],[64,62,51,60,"client"],[64,68,51,66],[64,69,51,67,"getDefaultOptions"],[64,86,51,84],[64,87,51,85],[64,88,51,86],[64,89,51,87,"dehydrate"],[64,98,51,96],[64,100,51,98,"shouldDehydrateMutation"],[64,123,51,121],[64,127,51,125,"defaultShouldDehydrateMutation"],[64,157,51,155],[65,4,52,2],[65,10,52,8,"mutations"],[65,19,52,17],[65,22,52,20,"client"],[65,28,52,26],[65,29,52,27,"getMutationCache"],[65,45,52,43],[65,46,52,44],[65,47,52,45],[65,48,52,46,"getAll"],[65,54,52,52],[65,55,52,53],[65,56,52,54],[65,57,52,55,"flatMap"],[65,64,52,62],[65,65,53,5,"mutation"],[65,73,53,13],[65,77,53,18,"filterMutation"],[65,91,53,32],[65,92,53,33,"mutation"],[65,100,53,41],[65,101,53,42],[65,104,53,45],[65,105,53,46,"dehydrateMutation"],[65,122,53,63],[65,123,53,64,"mutation"],[65,131,53,72],[65,132,53,73],[65,133,53,74],[65,136,53,77],[65,138,54,2],[65,139,54,3],[66,4,55,2],[66,10,55,8,"filterQuery"],[66,21,55,19],[66,24,55,22,"options"],[66,31,55,29],[66,32,55,30,"shouldDehydrateQuery"],[66,52,55,50],[66,56,55,54,"client"],[66,62,55,60],[66,63,55,61,"getDefaultOptions"],[66,80,55,78],[66,81,55,79],[66,82,55,80],[66,83,55,81,"dehydrate"],[66,92,55,90],[66,94,55,92,"shouldDehydrateQuery"],[66,114,55,112],[66,118,55,116,"defaultShouldDehydrateQuery"],[66,145,55,143],[67,4,56,2],[67,10,56,8,"shouldRedactErrors"],[67,28,56,26],[67,31,56,29,"options"],[67,38,56,36],[67,39,56,37,"shouldRedactErrors"],[67,57,56,55],[67,61,56,59,"client"],[67,67,56,65],[67,68,56,66,"getDefaultOptions"],[67,85,56,83],[67,86,56,84],[67,87,56,85],[67,88,56,86,"dehydrate"],[67,97,56,95],[67,99,56,97,"shouldRedactErrors"],[67,117,56,115],[67,121,56,119,"defaultShouldRedactErrors"],[67,146,56,144],[68,4,57,2],[68,10,57,8,"serializeData"],[68,23,57,21],[68,26,57,24,"options"],[68,33,57,31],[68,34,57,32,"serializeData"],[68,47,57,45],[68,51,57,49,"client"],[68,57,57,55],[68,58,57,56,"getDefaultOptions"],[68,75,57,73],[68,76,57,74],[68,77,57,75],[68,78,57,76,"dehydrate"],[68,87,57,85],[68,89,57,87,"serializeData"],[68,102,57,100],[68,106,57,104,"defaultTransformerFn"],[68,126,57,124],[69,4,58,2],[69,10,58,8,"queries"],[69,17,58,15],[69,20,58,18,"client"],[69,26,58,24],[69,27,58,25,"getQueryCache"],[69,40,58,38],[69,41,58,39],[69,42,58,40],[69,43,58,41,"getAll"],[69,49,58,47],[69,50,58,48],[69,51,58,49],[69,52,58,50,"flatMap"],[69,59,58,57],[69,60,59,5,"query"],[69,65,59,10],[69,69,59,15,"filterQuery"],[69,80,59,26],[69,81,59,27,"query"],[69,86,59,32],[69,87,59,33],[69,90,59,36],[69,91,59,37,"dehydrateQuery"],[69,105,59,51],[69,106,59,52,"query"],[69,111,59,57],[69,113,59,59,"serializeData"],[69,126,59,72],[69,128,59,74,"shouldRedactErrors"],[69,146,59,92],[69,147,59,93],[69,148,59,94],[69,151,59,97],[69,153,60,2],[69,154,60,3],[70,4,61,2],[70,11,61,9],[71,6,61,11,"mutations"],[71,15,61,20],[72,6,61,22,"queries"],[73,4,61,30],[73,5,61,31],[74,2,62,0],[75,2,63,0],[75,11,63,9,"hydrate"],[75,18,63,16,"hydrate"],[75,19,63,17,"client"],[75,25,63,23],[75,27,63,25,"dehydratedState"],[75,42,63,40],[75,44,63,42,"options"],[75,51,63,49],[75,53,63,51],[76,4,64,2],[76,8,64,6],[76,15,64,13,"dehydratedState"],[76,30,64,28],[76,35,64,33],[76,43,64,41],[76,47,64,45,"dehydratedState"],[76,62,64,60],[76,67,64,65],[76,71,64,69],[76,73,64,71],[77,6,65,4],[78,4,66,2],[79,4,67,2],[79,10,67,8,"mutationCache"],[79,23,67,21],[79,26,67,24,"client"],[79,32,67,30],[79,33,67,31,"getMutationCache"],[79,49,67,47],[79,50,67,48],[79,51,67,49],[80,4,68,2],[80,10,68,8,"queryCache"],[80,20,68,18],[80,23,68,21,"client"],[80,29,68,27],[80,30,68,28,"getQueryCache"],[80,43,68,41],[80,44,68,42],[80,45,68,43],[81,4,69,2],[81,10,69,8,"deserializeData"],[81,25,69,23],[81,28,69,26,"options"],[81,35,69,33],[81,37,69,35,"defaultOptions"],[81,51,69,49],[81,53,69,51,"deserializeData"],[81,68,69,66],[81,72,69,70,"client"],[81,78,69,76],[81,79,69,77,"getDefaultOptions"],[81,96,69,94],[81,97,69,95],[81,98,69,96],[81,99,69,97,"hydrate"],[81,106,69,104],[81,108,69,106,"deserializeData"],[81,123,69,121],[81,127,69,125,"defaultTransformerFn"],[81,147,69,145],[82,4,70,2],[82,10,70,8,"mutations"],[82,19,70,17],[82,22,70,20,"dehydratedState"],[82,37,70,35],[82,38,70,36,"mutations"],[82,47,70,45],[82,51,70,49],[82,53,70,51],[83,4,71,2],[83,10,71,8,"queries"],[83,17,71,15],[83,20,71,18,"dehydratedState"],[83,35,71,33],[83,36,71,34,"queries"],[83,43,71,41],[83,47,71,45],[83,49,71,47],[84,4,72,2,"mutations"],[84,13,72,11],[84,14,72,12,"forEach"],[84,21,72,19],[84,22,72,20],[84,23,72,21],[85,6,72,23,"state"],[85,11,72,28],[86,6,72,30],[86,9,72,33,"mutationOptions"],[87,4,72,49],[87,5,72,50],[87,10,72,55],[88,6,73,4,"mutationCache"],[88,19,73,17],[88,20,73,18,"build"],[88,25,73,23],[88,26,74,6,"client"],[88,32,74,12],[88,34,75,6],[89,8,76,8],[89,11,76,11,"client"],[89,17,76,17],[89,18,76,18,"getDefaultOptions"],[89,35,76,35],[89,36,76,36],[89,37,76,37],[89,38,76,38,"hydrate"],[89,45,76,45],[89,47,76,47,"mutations"],[89,56,76,56],[90,8,77,8],[90,11,77,11,"options"],[90,18,77,18],[90,20,77,20,"defaultOptions"],[90,34,77,34],[90,36,77,36,"mutations"],[90,45,77,45],[91,8,78,8],[91,11,78,11,"mutationOptions"],[92,6,79,6],[92,7,79,7],[92,9,80,6,"state"],[92,14,81,4],[92,15,81,5],[93,4,82,2],[93,5,82,3],[93,6,82,4],[94,4,83,2,"queries"],[94,11,83,9],[94,12,83,10,"forEach"],[94,19,83,17],[94,20,84,4],[94,21,84,5],[95,6,84,7,"queryKey"],[95,14,84,15],[96,6,84,17,"state"],[96,11,84,22],[97,6,84,24,"queryHash"],[97,15,84,33],[98,6,84,35,"meta"],[98,10,84,39],[99,6,84,41,"promise"],[99,13,84,48],[100,6,84,50,"dehydratedAt"],[101,4,84,63],[101,5,84,64],[101,10,84,69],[102,6,85,6],[102,12,85,12,"syncData"],[102,20,85,20],[102,23,85,23,"promise"],[102,30,85,30],[102,33,85,33],[102,37,85,33,"tryResolveSync"],[102,61,85,47],[102,63,85,48,"promise"],[102,70,85,55],[102,71,85,56],[102,74,85,59],[102,79,85,64],[102,80,85,65],[103,6,86,6],[103,12,86,12,"rawData"],[103,19,86,19],[103,22,86,22,"state"],[103,27,86,27],[103,28,86,28,"data"],[103,32,86,32],[103,37,86,37],[103,42,86,42],[103,43,86,43],[103,46,86,46,"syncData"],[103,54,86,54],[103,56,86,56,"data"],[103,60,86,60],[103,63,86,63,"state"],[103,68,86,68],[103,69,86,69,"data"],[103,73,86,73],[104,6,87,6],[104,12,87,12,"data"],[104,16,87,16],[104,19,87,19,"rawData"],[104,26,87,26],[104,31,87,31],[104,36,87,36],[104,37,87,37],[104,40,87,40,"rawData"],[104,47,87,47],[104,50,87,50,"deserializeData"],[104,65,87,65],[104,66,87,66,"rawData"],[104,73,87,73],[104,74,87,74],[105,6,88,6],[105,10,88,10,"query"],[105,15,88,15],[105,18,88,18,"queryCache"],[105,28,88,28],[105,29,88,29,"get"],[105,32,88,32],[105,33,88,33,"queryHash"],[105,42,88,42],[105,43,88,43],[106,6,89,6],[106,12,89,12,"existingQueryIsPending"],[106,34,89,34],[106,37,89,37,"query"],[106,42,89,42],[106,44,89,44,"state"],[106,49,89,49],[106,50,89,50,"status"],[106,56,89,56],[106,61,89,61],[106,70,89,70],[107,6,90,6],[107,12,90,12,"existingQueryIsFetching"],[107,35,90,35],[107,38,90,38,"query"],[107,43,90,43],[107,45,90,45,"state"],[107,50,90,50],[107,51,90,51,"fetchStatus"],[107,62,90,62],[107,67,90,67],[107,77,90,77],[108,6,91,6],[108,10,91,10,"query"],[108,15,91,15],[108,17,91,17],[109,8,92,8],[109,14,92,14,"hasNewerSyncData"],[109,30,92,30],[109,33,92,33,"syncData"],[109,41,92,41],[110,8,92,45],[111,8,93,8],[112,8,94,8,"dehydratedAt"],[112,20,94,20],[112,25,94,25],[112,30,94,30],[112,31,94,31],[112,35,94,35,"dehydratedAt"],[112,47,94,47],[112,50,94,50,"query"],[112,55,94,55],[112,56,94,56,"state"],[112,61,94,61],[112,62,94,62,"dataUpdatedAt"],[112,75,94,75],[113,8,95,8],[113,12,95,12,"state"],[113,17,95,17],[113,18,95,18,"dataUpdatedAt"],[113,31,95,31],[113,34,95,34,"query"],[113,39,95,39],[113,40,95,40,"state"],[113,45,95,45],[113,46,95,46,"dataUpdatedAt"],[113,59,95,59],[113,63,95,63,"hasNewerSyncData"],[113,79,95,79],[113,81,95,81],[114,10,96,10],[114,16,96,16],[115,12,96,18,"fetchStatus"],[115,23,96,29],[115,25,96,31,"_ignored"],[115,33,96,39],[116,12,96,41],[116,15,96,44,"serializedState"],[117,10,96,60],[117,11,96,61],[117,14,96,64,"state"],[117,19,96,69],[118,10,97,10,"query"],[118,15,97,15],[118,16,97,16,"setState"],[118,24,97,24],[118,25,97,25],[119,12,98,12],[119,15,98,15,"serializedState"],[119,30,98,30],[120,12,99,12,"data"],[121,10,100,10],[121,11,100,11],[121,12,100,12],[122,8,101,8],[123,6,102,6],[123,7,102,7],[123,13,102,13],[124,8,103,8,"query"],[124,13,103,13],[124,16,103,16,"queryCache"],[124,26,103,26],[124,27,103,27,"build"],[124,32,103,32],[124,33,104,10,"client"],[124,39,104,16],[124,41,105,10],[125,10,106,12],[125,13,106,15,"client"],[125,19,106,21],[125,20,106,22,"getDefaultOptions"],[125,37,106,39],[125,38,106,40],[125,39,106,41],[125,40,106,42,"hydrate"],[125,47,106,49],[125,49,106,51,"queries"],[125,56,106,58],[126,10,107,12],[126,13,107,15,"options"],[126,20,107,22],[126,22,107,24,"defaultOptions"],[126,36,107,38],[126,38,107,40,"queries"],[126,45,107,47],[127,10,108,12,"queryKey"],[127,18,108,20],[128,10,109,12,"queryHash"],[128,19,109,21],[129,10,110,12,"meta"],[130,8,111,10],[130,9,111,11],[131,8,112,10],[132,8,113,10],[133,8,114,10],[134,10,115,12],[134,13,115,15,"state"],[134,18,115,20],[135,10,116,12,"data"],[135,14,116,16],[136,10,117,12,"fetchStatus"],[136,21,117,23],[136,23,117,25],[136,29,117,31],[137,10,118,12,"status"],[137,16,118,18],[137,18,118,20,"data"],[137,22,118,24],[137,27,118,29],[137,32,118,34],[137,33,118,35],[137,36,118,38],[137,45,118,47],[137,48,118,50,"state"],[137,53,118,55],[137,54,118,56,"status"],[138,8,119,10],[138,9,120,8],[138,10,120,9],[139,6,121,6],[140,6,122,6],[140,10,122,10,"promise"],[140,17,122,17],[140,21,122,21],[140,22,122,22,"existingQueryIsPending"],[140,44,122,44],[140,48,122,48],[140,49,122,49,"existingQueryIsFetching"],[140,72,122,72],[141,6,122,76],[142,6,123,6],[143,6,124,7,"dehydratedAt"],[143,18,124,19],[143,23,124,24],[143,28,124,29],[143,29,124,30],[143,33,124,34,"dehydratedAt"],[143,45,124,46],[143,48,124,49,"query"],[143,53,124,54],[143,54,124,55,"state"],[143,59,124,60],[143,60,124,61,"dataUpdatedAt"],[143,73,124,74],[143,74,124,75],[143,76,124,77],[144,8,125,8],[144,13,125,13,"query"],[144,18,125,18],[144,19,125,19,"fetch"],[144,24,125,24],[144,25,125,25],[144,30,125,30],[144,31,125,31],[144,33,125,33],[145,10,126,10],[146,10,127,10,"initialPromise"],[146,24,127,24],[146,26,127,26,"Promise"],[146,33,127,33],[146,34,127,34,"resolve"],[146,41,127,41],[146,42,127,42,"promise"],[146,49,127,49],[146,50,127,50],[146,51,127,51,"then"],[146,55,127,55],[146,56,127,56,"deserializeData"],[146,71,127,71],[147,8,128,8],[147,9,128,9],[147,10,128,10],[148,6,129,6],[149,4,130,4],[149,5,131,2],[149,6,131,3],[150,2,132,0],[151,0,132,1],[151,3]],"functionMap":{"names":["<global>","defaultTransformerFn","dehydrateMutation","dehydrateQuery","query.promise.then._catch$argument_0","defaultShouldDehydrateMutation","defaultShouldDehydrateQuery","defaultShouldRedactErrors","dehydrate","client.getMutationCache.getAll.flatMap$argument_0","client.getQueryCache.getAll.flatMap$argument_0","hydrate","mutations.forEach$argument_0","queries.forEach$argument_0"],"mappings":"AAA;ACE;CDE;AEC;CFO;AGC;wDCY;ODU;CHI;AKC;CLE;AMC;CNE;AOC;CPE;AQC;ICG,2ED;IEM,+FF;CRG;AWC;oBCS;GDU;IEE;KF8C;CXE"}},"type":"js/module"}]}