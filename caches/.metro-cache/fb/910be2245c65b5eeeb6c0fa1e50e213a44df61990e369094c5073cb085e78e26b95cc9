{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo=","exportNames":["*"]}},{"name":"expo-modules-core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":66,"index":66}}],"key":"fU8WLIPqoAGygnPbZ/QJiQQfXEY=","exportNames":["*"]}},{"name":"./ExpoHaptics","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":68},"end":{"line":3,"column":40,"index":108}}],"key":"3WqQQRS5WG7zFWoPm3OZ82Alno4=","exportNames":["*"]}},{"name":"./Haptics.types","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":109},"end":{"line":4,"column":96,"index":205}}],"key":"4K2GreqvhWei0+qUJVORf63x8ww=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  Object.defineProperty(exports, \"AndroidHaptics\", {\n    enumerable: true,\n    get: function () {\n      return _Haptics.AndroidHaptics;\n    }\n  });\n  Object.defineProperty(exports, \"ImpactFeedbackStyle\", {\n    enumerable: true,\n    get: function () {\n      return _Haptics.ImpactFeedbackStyle;\n    }\n  });\n  Object.defineProperty(exports, \"NotificationFeedbackType\", {\n    enumerable: true,\n    get: function () {\n      return _Haptics.NotificationFeedbackType;\n    }\n  });\n  exports.impactAsync = impactAsync;\n  exports.notificationAsync = notificationAsync;\n  exports.performAndroidHapticsAsync = performAndroidHapticsAsync;\n  exports.selectionAsync = selectionAsync;\n  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/asyncToGenerator\"));\n  var _expoModulesCore = require(_dependencyMap[2], \"expo-modules-core\");\n  var _ExpoHaptics = _interopRequireDefault(require(_dependencyMap[3], \"./ExpoHaptics\"));\n  var _Haptics = require(_dependencyMap[4], \"./Haptics.types\");\n  // @needsAudit\n  /**\n   * The kind of notification response used in the feedback.\n   * @param type A notification feedback type that on Android is simulated using [`Vibrator`](https://developer.android.com/reference/android/os/Vibrator)\n   * and iOS is directly mapped to [`UINotificationFeedbackType`](https://developer.apple.com/documentation/uikit/uinotificationfeedbacktype).\n   * You can use one of `Haptics.NotificationFeedbackType.{Success, Warning, Error}`.\n   * @return A `Promise` which fulfils once native size haptics functionality is triggered.\n   */\n  function notificationAsync() {\n    return _notificationAsync.apply(this, arguments);\n  } // @needsAudit\n  /**\n   * @param style A collision indicator that on Android is simulated using [`Vibrator`](https://developer.android.com/reference/android/os/Vibrator)\n   * and on iOS, it is directly mapped to [`UIImpactFeedbackStyle`](https://developer.apple.com/documentation/uikit/uiimpactfeedbackgenerator/feedbackstyle).\n   * You can use one of `Haptics.ImpactFeedbackStyle.{Light, Medium, Heavy, Rigid, Soft}`.\n   * @return A `Promise` which fulfils once native size haptics functionality is triggered.\n   */\n  function _notificationAsync() {\n    _notificationAsync = (0, _asyncToGenerator2.default)(function* () {\n      var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _Haptics.NotificationFeedbackType.Success;\n      if (!_ExpoHaptics.default?.notificationAsync) {\n        throw new _expoModulesCore.UnavailabilityError('Haptics', 'notificationAsync');\n      }\n      yield _ExpoHaptics.default.notificationAsync(type);\n    });\n    return _notificationAsync.apply(this, arguments);\n  }\n  function impactAsync() {\n    return _impactAsync.apply(this, arguments);\n  } // @needsAudit\n  /**\n   * Used to let a user know when a selection change has been registered.\n   * @return A `Promise` which fulfils once native size haptics functionality is triggered.\n   */\n  function _impactAsync() {\n    _impactAsync = (0, _asyncToGenerator2.default)(function* () {\n      var style = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _Haptics.ImpactFeedbackStyle.Medium;\n      if (!_ExpoHaptics.default?.impactAsync) {\n        throw new _expoModulesCore.UnavailabilityError('Haptic', 'impactAsync');\n      }\n      yield _ExpoHaptics.default.impactAsync(style);\n    });\n    return _impactAsync.apply(this, arguments);\n  }\n  function selectionAsync() {\n    return _selectionAsync.apply(this, arguments);\n  }\n  /**\n   * Use the device haptics engine to provide physical feedback to the user.\n   *\n   * @platform android\n   */\n  function _selectionAsync() {\n    _selectionAsync = (0, _asyncToGenerator2.default)(function* () {\n      if (!_ExpoHaptics.default?.selectionAsync) {\n        throw new _expoModulesCore.UnavailabilityError('Haptic', 'selectionAsync');\n      }\n      yield _ExpoHaptics.default.selectionAsync();\n    });\n    return _selectionAsync.apply(this, arguments);\n  }\n  function performAndroidHapticsAsync(_x) {\n    return _performAndroidHapticsAsync.apply(this, arguments);\n  }\n  function _performAndroidHapticsAsync() {\n    _performAndroidHapticsAsync = (0, _asyncToGenerator2.default)(function* (type) {\n      if (_expoModulesCore.Platform.OS !== 'android') {\n        return;\n      }\n      _ExpoHaptics.default.performHapticsAsync(type);\n    });\n    return _performAndroidHapticsAsync.apply(this, arguments);\n  }\n});","lineCount":105,"map":[[29,2,1,0],[29,6,1,0,"_expoModulesCore"],[29,22,1,0],[29,25,1,0,"require"],[29,32,1,0],[29,33,1,0,"_dependencyMap"],[29,47,1,0],[30,2,3,0],[30,6,3,0,"_ExpoHaptics"],[30,18,3,0],[30,21,3,0,"_interopRequireDefault"],[30,43,3,0],[30,44,3,0,"require"],[30,51,3,0],[30,52,3,0,"_dependencyMap"],[30,66,3,0],[31,2,4,0],[31,6,4,0,"_Haptics"],[31,14,4,0],[31,17,4,0,"require"],[31,24,4,0],[31,25,4,0,"_dependencyMap"],[31,39,4,0],[32,2,6,0],[33,2,7,0],[34,0,8,0],[35,0,9,0],[36,0,10,0],[37,0,11,0],[38,0,12,0],[39,0,13,0],[40,2,7,0],[40,11,14,22,"notificationAsync"],[40,28,14,39,"notificationAsync"],[40,29,14,39],[41,4,14,39],[41,11,14,39,"_notificationAsync"],[41,29,14,39],[41,30,14,39,"apply"],[41,35,14,39],[41,42,14,39,"arguments"],[41,51,14,39],[42,2,14,39],[42,4,23,0],[43,2,24,0],[44,0,25,0],[45,0,26,0],[46,0,27,0],[47,0,28,0],[48,0,29,0],[49,2,24,0],[49,11,24,0,"_notificationAsync"],[49,30,24,0],[50,4,24,0,"_notificationAsync"],[50,22,24,0],[50,29,24,0,"_asyncToGenerator2"],[50,47,24,0],[50,48,24,0,"default"],[50,55,24,0],[50,57,14,7],[50,70,16,17],[51,6,16,17],[51,10,15,2,"type"],[51,14,15,32],[51,17,15,32,"arguments"],[51,26,15,32],[51,27,15,32,"length"],[51,33,15,32],[51,41,15,32,"arguments"],[51,50,15,32],[51,58,15,32,"undefined"],[51,67,15,32],[51,70,15,32,"arguments"],[51,79,15,32],[51,85,15,35,"NotificationFeedbackType"],[51,118,15,59],[51,119,15,60,"Success"],[51,126,15,67],[52,6,17,2],[52,10,17,6],[52,11,17,7,"ExpoHaptics"],[52,31,17,18],[52,33,17,20,"notificationAsync"],[52,50,17,37],[52,52,17,39],[53,8,18,4],[53,14,18,10],[53,18,18,14,"UnavailabilityError"],[53,54,18,33],[53,55,18,34],[53,64,18,43],[53,66,18,45],[53,85,18,64],[53,86,18,65],[54,6,19,2],[55,6,20,2],[55,12,20,8,"ExpoHaptics"],[55,32,20,19],[55,33,20,20,"notificationAsync"],[55,50,20,37],[55,51,20,38,"type"],[55,55,20,42],[55,56,20,43],[56,4,21,0],[56,5,21,1],[57,4,21,1],[57,11,21,1,"_notificationAsync"],[57,29,21,1],[57,30,21,1,"apply"],[57,35,21,1],[57,42,21,1,"arguments"],[57,51,21,1],[58,2,21,1],[59,2,21,1],[59,11,30,22,"impactAsync"],[59,22,30,33,"impactAsync"],[59,23,30,33],[60,4,30,33],[60,11,30,33,"_impactAsync"],[60,23,30,33],[60,24,30,33,"apply"],[60,29,30,33],[60,36,30,33,"arguments"],[60,45,30,33],[61,2,30,33],[61,4,39,0],[62,2,40,0],[63,0,41,0],[64,0,42,0],[65,0,43,0],[66,2,40,0],[66,11,40,0,"_impactAsync"],[66,24,40,0],[67,4,40,0,"_impactAsync"],[67,16,40,0],[67,23,40,0,"_asyncToGenerator2"],[67,41,40,0],[67,42,40,0,"default"],[67,49,40,0],[67,51,30,7],[67,64,32,17],[68,6,32,17],[68,10,31,2,"style"],[68,15,31,28],[68,18,31,28,"arguments"],[68,27,31,28],[68,28,31,28,"length"],[68,34,31,28],[68,42,31,28,"arguments"],[68,51,31,28],[68,59,31,28,"undefined"],[68,68,31,28],[68,71,31,28,"arguments"],[68,80,31,28],[68,86,31,31,"ImpactFeedbackStyle"],[68,114,31,50],[68,115,31,51,"Medium"],[68,121,31,57],[69,6,33,2],[69,10,33,6],[69,11,33,7,"ExpoHaptics"],[69,31,33,18],[69,33,33,20,"impactAsync"],[69,44,33,31],[69,46,33,33],[70,8,34,4],[70,14,34,10],[70,18,34,14,"UnavailabilityError"],[70,54,34,33],[70,55,34,34],[70,63,34,42],[70,65,34,44],[70,78,34,57],[70,79,34,58],[71,6,35,2],[72,6,36,2],[72,12,36,8,"ExpoHaptics"],[72,32,36,19],[72,33,36,20,"impactAsync"],[72,44,36,31],[72,45,36,32,"style"],[72,50,36,37],[72,51,36,38],[73,4,37,0],[73,5,37,1],[74,4,37,1],[74,11,37,1,"_impactAsync"],[74,23,37,1],[74,24,37,1,"apply"],[74,29,37,1],[74,36,37,1,"arguments"],[74,45,37,1],[75,2,37,1],[76,2,37,1],[76,11,44,22,"selectionAsync"],[76,25,44,36,"selectionAsync"],[76,26,44,36],[77,4,44,36],[77,11,44,36,"_selectionAsync"],[77,26,44,36],[77,27,44,36,"apply"],[77,32,44,36],[77,39,44,36,"arguments"],[77,48,44,36],[78,2,44,36],[79,2,51,0],[80,0,52,0],[81,0,53,0],[82,0,54,0],[83,0,55,0],[84,2,51,0],[84,11,51,0,"_selectionAsync"],[84,27,51,0],[85,4,51,0,"_selectionAsync"],[85,19,51,0],[85,26,51,0,"_asyncToGenerator2"],[85,44,51,0],[85,45,51,0,"default"],[85,52,51,0],[85,54,44,7],[85,67,44,54],[86,6,45,2],[86,10,45,6],[86,11,45,7,"ExpoHaptics"],[86,31,45,18],[86,33,45,20,"selectionAsync"],[86,47,45,34],[86,49,45,36],[87,8,46,4],[87,14,46,10],[87,18,46,14,"UnavailabilityError"],[87,54,46,33],[87,55,46,34],[87,63,46,42],[87,65,46,44],[87,81,46,60],[87,82,46,61],[88,6,47,2],[89,6,48,2],[89,12,48,8,"ExpoHaptics"],[89,32,48,19],[89,33,48,20,"selectionAsync"],[89,47,48,34],[89,48,48,35],[89,49,48,36],[90,4,49,0],[90,5,49,1],[91,4,49,1],[91,11,49,1,"_selectionAsync"],[91,26,49,1],[91,27,49,1,"apply"],[91,32,49,1],[91,39,49,1,"arguments"],[91,48,49,1],[92,2,49,1],[93,2,49,1],[93,11,56,22,"performAndroidHapticsAsync"],[93,37,56,48,"performAndroidHapticsAsync"],[93,38,56,48,"_x"],[93,40,56,48],[94,4,56,48],[94,11,56,48,"_performAndroidHapticsAsync"],[94,38,56,48],[94,39,56,48,"apply"],[94,44,56,48],[94,51,56,48,"arguments"],[94,60,56,48],[95,2,56,48],[96,2,56,48],[96,11,56,48,"_performAndroidHapticsAsync"],[96,39,56,48],[97,4,56,48,"_performAndroidHapticsAsync"],[97,31,56,48],[97,38,56,48,"_asyncToGenerator2"],[97,56,56,48],[97,57,56,48,"default"],[97,64,56,48],[97,66,56,7],[97,77,56,49,"type"],[97,81,56,69],[97,83,56,71],[98,6,57,2],[98,10,57,6,"Platform"],[98,35,57,14],[98,36,57,15,"OS"],[98,38,57,17],[98,43,57,22],[98,52,57,31],[98,54,57,33],[99,8,58,4],[100,6,59,2],[101,6,60,2,"ExpoHaptics"],[101,26,60,13],[101,27,60,14,"performHapticsAsync"],[101,46,60,33],[101,47,60,34,"type"],[101,51,60,38],[101,52,60,39],[102,4,61,0],[102,5,61,1],[103,4,61,1],[103,11,61,1,"_performAndroidHapticsAsync"],[103,38,61,1],[103,39,61,1,"apply"],[103,44,61,1],[103,51,61,1,"arguments"],[103,60,61,1],[104,2,61,1],[105,0,61,1],[105,3]],"functionMap":{"names":["<global>","notificationAsync","impactAsync","selectionAsync","performAndroidHapticsAsync"],"mappings":"AAA;OCa;CDO;OES;CFO;OGO;CHK;OIO;CJK"}},"type":"js/module"}]}