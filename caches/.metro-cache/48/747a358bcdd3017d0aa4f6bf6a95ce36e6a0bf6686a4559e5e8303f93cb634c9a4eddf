{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  /**\n   * Avoid modifying this file. It's part of\n   * https://github.com/supabase-community/base64url-js.  Submit all fixes on\n   * that repo!\n   */\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.byteToBase64URL = byteToBase64URL;\n  exports.byteFromBase64URL = byteFromBase64URL;\n  exports.stringToBase64URL = stringToBase64URL;\n  exports.stringFromBase64URL = stringFromBase64URL;\n  exports.codepointToUTF8 = codepointToUTF8;\n  exports.stringToUTF8 = stringToUTF8;\n  exports.stringFromUTF8 = stringFromUTF8;\n  exports.base64UrlToUint8Array = base64UrlToUint8Array;\n  exports.stringToUint8Array = stringToUint8Array;\n  exports.bytesToBase64URL = bytesToBase64URL;\n  /**\n   * An array of characters that encode 6 bits into a Base64-URL alphabet\n   * character.\n   */\n  var TO_BASE64URL = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'.split('');\n  /**\n   * An array of characters that can appear in a Base64-URL encoded string but\n   * should be ignored.\n   */\n  var IGNORE_BASE64URL = ' \\t\\n\\r='.split('');\n  /**\n   * An array of 128 numbers that map a Base64-URL character to 6 bits, or if -2\n   * used to skip the character, or if -1 used to error out.\n   */\n  var FROM_BASE64URL = (() => {\n    var charMap = new Array(128);\n    for (var i = 0; i < charMap.length; i += 1) {\n      charMap[i] = -1;\n    }\n    for (var _i = 0; _i < IGNORE_BASE64URL.length; _i += 1) {\n      charMap[IGNORE_BASE64URL[_i].charCodeAt(0)] = -2;\n    }\n    for (var _i2 = 0; _i2 < TO_BASE64URL.length; _i2 += 1) {\n      charMap[TO_BASE64URL[_i2].charCodeAt(0)] = _i2;\n    }\n    return charMap;\n  })();\n  /**\n   * Converts a byte to a Base64-URL string.\n   *\n   * @param byte The byte to convert, or null to flush at the end of the byte sequence.\n   * @param state The Base64 conversion state. Pass an initial value of `{ queue: 0, queuedBits: 0 }`.\n   * @param emit A function called with the next Base64 character when ready.\n   */\n  function byteToBase64URL(byte, state, emit) {\n    if (byte !== null) {\n      state.queue = state.queue << 8 | byte;\n      state.queuedBits += 8;\n      while (state.queuedBits >= 6) {\n        var pos = state.queue >> state.queuedBits - 6 & 63;\n        emit(TO_BASE64URL[pos]);\n        state.queuedBits -= 6;\n      }\n    } else if (state.queuedBits > 0) {\n      state.queue = state.queue << 6 - state.queuedBits;\n      state.queuedBits = 6;\n      while (state.queuedBits >= 6) {\n        var _pos = state.queue >> state.queuedBits - 6 & 63;\n        emit(TO_BASE64URL[_pos]);\n        state.queuedBits -= 6;\n      }\n    }\n  }\n  /**\n   * Converts a String char code (extracted using `string.charCodeAt(position)`) to a sequence of Base64-URL characters.\n   *\n   * @param charCode The char code of the JavaScript string.\n   * @param state The Base64 state. Pass an initial value of `{ queue: 0, queuedBits: 0 }`.\n   * @param emit A function called with the next byte.\n   */\n  function byteFromBase64URL(charCode, state, emit) {\n    var bits = FROM_BASE64URL[charCode];\n    if (bits > -1) {\n      // valid Base64-URL character\n      state.queue = state.queue << 6 | bits;\n      state.queuedBits += 6;\n      while (state.queuedBits >= 8) {\n        emit(state.queue >> state.queuedBits - 8 & 0xff);\n        state.queuedBits -= 8;\n      }\n    } else if (bits === -2) {\n      // ignore spaces, tabs, newlines, =\n      return;\n    } else {\n      throw new Error(`Invalid Base64-URL character \"${String.fromCharCode(charCode)}\"`);\n    }\n  }\n  /**\n   * Converts a JavaScript string (which may include any valid character) into a\n   * Base64-URL encoded string. The string is first encoded in UTF-8 which is\n   * then encoded as Base64-URL.\n   *\n   * @param str The string to convert.\n   */\n  function stringToBase64URL(str) {\n    var base64 = [];\n    var emitter = char => {\n      base64.push(char);\n    };\n    var state = {\n      queue: 0,\n      queuedBits: 0\n    };\n    stringToUTF8(str, byte => {\n      byteToBase64URL(byte, state, emitter);\n    });\n    byteToBase64URL(null, state, emitter);\n    return base64.join('');\n  }\n  /**\n   * Converts a Base64-URL encoded string into a JavaScript string. It is assumed\n   * that the underlying string has been encoded as UTF-8.\n   *\n   * @param str The Base64-URL encoded string.\n   */\n  function stringFromBase64URL(str) {\n    var conv = [];\n    var utf8Emit = codepoint => {\n      conv.push(String.fromCodePoint(codepoint));\n    };\n    var utf8State = {\n      utf8seq: 0,\n      codepoint: 0\n    };\n    var b64State = {\n      queue: 0,\n      queuedBits: 0\n    };\n    var byteEmit = byte => {\n      stringFromUTF8(byte, utf8State, utf8Emit);\n    };\n    for (var i = 0; i < str.length; i += 1) {\n      byteFromBase64URL(str.charCodeAt(i), b64State, byteEmit);\n    }\n    return conv.join('');\n  }\n  /**\n   * Converts a Unicode codepoint to a multi-byte UTF-8 sequence.\n   *\n   * @param codepoint The Unicode codepoint.\n   * @param emit      Function which will be called for each UTF-8 byte that represents the codepoint.\n   */\n  function codepointToUTF8(codepoint, emit) {\n    if (codepoint <= 0x7f) {\n      emit(codepoint);\n      return;\n    } else if (codepoint <= 0x7ff) {\n      emit(0xc0 | codepoint >> 6);\n      emit(0x80 | codepoint & 0x3f);\n      return;\n    } else if (codepoint <= 0xffff) {\n      emit(0xe0 | codepoint >> 12);\n      emit(0x80 | codepoint >> 6 & 0x3f);\n      emit(0x80 | codepoint & 0x3f);\n      return;\n    } else if (codepoint <= 0x10ffff) {\n      emit(0xf0 | codepoint >> 18);\n      emit(0x80 | codepoint >> 12 & 0x3f);\n      emit(0x80 | codepoint >> 6 & 0x3f);\n      emit(0x80 | codepoint & 0x3f);\n      return;\n    }\n    throw new Error(`Unrecognized Unicode codepoint: ${codepoint.toString(16)}`);\n  }\n  /**\n   * Converts a JavaScript string to a sequence of UTF-8 bytes.\n   *\n   * @param str  The string to convert to UTF-8.\n   * @param emit Function which will be called for each UTF-8 byte of the string.\n   */\n  function stringToUTF8(str, emit) {\n    for (var i = 0; i < str.length; i += 1) {\n      var codepoint = str.charCodeAt(i);\n      if (codepoint > 0xd7ff && codepoint <= 0xdbff) {\n        // most UTF-16 codepoints are Unicode codepoints, except values in this\n        // range where the next UTF-16 codepoint needs to be combined with the\n        // current one to get the Unicode codepoint\n        var highSurrogate = (codepoint - 0xd800) * 0x400 & 0xffff;\n        var lowSurrogate = str.charCodeAt(i + 1) - 0xdc00 & 0xffff;\n        codepoint = (lowSurrogate | highSurrogate) + 0x10000;\n        i += 1;\n      }\n      codepointToUTF8(codepoint, emit);\n    }\n  }\n  /**\n   * Converts a UTF-8 byte to a Unicode codepoint.\n   *\n   * @param byte  The UTF-8 byte next in the sequence.\n   * @param state The shared state between consecutive UTF-8 bytes in the\n   *              sequence, an object with the shape `{ utf8seq: 0, codepoint: 0 }`.\n   * @param emit  Function which will be called for each codepoint.\n   */\n  function stringFromUTF8(byte, state, emit) {\n    if (state.utf8seq === 0) {\n      if (byte <= 0x7f) {\n        emit(byte);\n        return;\n      }\n      // count the number of 1 leading bits until you reach 0\n      for (var leadingBit = 1; leadingBit < 6; leadingBit += 1) {\n        if ((byte >> 7 - leadingBit & 1) === 0) {\n          state.utf8seq = leadingBit;\n          break;\n        }\n      }\n      if (state.utf8seq === 2) {\n        state.codepoint = byte & 31;\n      } else if (state.utf8seq === 3) {\n        state.codepoint = byte & 15;\n      } else if (state.utf8seq === 4) {\n        state.codepoint = byte & 7;\n      } else {\n        throw new Error('Invalid UTF-8 sequence');\n      }\n      state.utf8seq -= 1;\n    } else if (state.utf8seq > 0) {\n      if (byte <= 0x7f) {\n        throw new Error('Invalid UTF-8 sequence');\n      }\n      state.codepoint = state.codepoint << 6 | byte & 63;\n      state.utf8seq -= 1;\n      if (state.utf8seq === 0) {\n        emit(state.codepoint);\n      }\n    }\n  }\n  /**\n   * Helper functions to convert different types of strings to Uint8Array\n   */\n  function base64UrlToUint8Array(str) {\n    var result = [];\n    var state = {\n      queue: 0,\n      queuedBits: 0\n    };\n    var onByte = byte => {\n      result.push(byte);\n    };\n    for (var i = 0; i < str.length; i += 1) {\n      byteFromBase64URL(str.charCodeAt(i), state, onByte);\n    }\n    return new Uint8Array(result);\n  }\n  function stringToUint8Array(str) {\n    var result = [];\n    stringToUTF8(str, byte => result.push(byte));\n    return new Uint8Array(result);\n  }\n  function bytesToBase64URL(bytes) {\n    var result = [];\n    var state = {\n      queue: 0,\n      queuedBits: 0\n    };\n    var onChar = char => {\n      result.push(char);\n    };\n    bytes.forEach(byte => byteToBase64URL(byte, state, onChar));\n    // always call with `null` after processing all bytes\n    byteToBase64URL(null, state, onChar);\n    return result.join('');\n  }\n});","lineCount":275,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0],[5,0,3,0],[6,0,4,0],[7,0,5,0],[8,0,6,0],[9,2,7,0,"Object"],[9,8,7,6],[9,9,7,7,"defineProperty"],[9,23,7,21],[9,24,7,22,"exports"],[9,31,7,29],[9,33,7,31],[9,45,7,43],[9,47,7,45],[10,4,7,47,"value"],[10,9,7,52],[10,11,7,54],[11,2,7,59],[11,3,7,60],[11,4,7,61],[12,2,8,0,"exports"],[12,9,8,7],[12,10,8,8,"byteToBase64URL"],[12,25,8,23],[12,28,8,26,"byteToBase64URL"],[12,43,8,41],[13,2,9,0,"exports"],[13,9,9,7],[13,10,9,8,"byteFromBase64URL"],[13,27,9,25],[13,30,9,28,"byteFromBase64URL"],[13,47,9,45],[14,2,10,0,"exports"],[14,9,10,7],[14,10,10,8,"stringToBase64URL"],[14,27,10,25],[14,30,10,28,"stringToBase64URL"],[14,47,10,45],[15,2,11,0,"exports"],[15,9,11,7],[15,10,11,8,"stringFromBase64URL"],[15,29,11,27],[15,32,11,30,"stringFromBase64URL"],[15,51,11,49],[16,2,12,0,"exports"],[16,9,12,7],[16,10,12,8,"codepointToUTF8"],[16,25,12,23],[16,28,12,26,"codepointToUTF8"],[16,43,12,41],[17,2,13,0,"exports"],[17,9,13,7],[17,10,13,8,"stringToUTF8"],[17,22,13,20],[17,25,13,23,"stringToUTF8"],[17,37,13,35],[18,2,14,0,"exports"],[18,9,14,7],[18,10,14,8,"stringFromUTF8"],[18,24,14,22],[18,27,14,25,"stringFromUTF8"],[18,41,14,39],[19,2,15,0,"exports"],[19,9,15,7],[19,10,15,8,"base64UrlToUint8Array"],[19,31,15,29],[19,34,15,32,"base64UrlToUint8Array"],[19,55,15,53],[20,2,16,0,"exports"],[20,9,16,7],[20,10,16,8,"stringToUint8Array"],[20,28,16,26],[20,31,16,29,"stringToUint8Array"],[20,49,16,47],[21,2,17,0,"exports"],[21,9,17,7],[21,10,17,8,"bytesToBase64URL"],[21,26,17,24],[21,29,17,27,"bytesToBase64URL"],[21,45,17,43],[22,2,18,0],[23,0,19,0],[24,0,20,0],[25,0,21,0],[26,2,22,0],[26,6,22,6,"TO_BASE64URL"],[26,18,22,18],[26,21,22,21],[26,87,22,87],[26,88,22,88,"split"],[26,93,22,93],[26,94,22,94],[26,96,22,96],[26,97,22,97],[27,2,23,0],[28,0,24,0],[29,0,25,0],[30,0,26,0],[31,2,27,0],[31,6,27,6,"IGNORE_BASE64URL"],[31,22,27,22],[31,25,27,25],[31,35,27,35],[31,36,27,36,"split"],[31,41,27,41],[31,42,27,42],[31,44,27,44],[31,45,27,45],[32,2,28,0],[33,0,29,0],[34,0,30,0],[35,0,31,0],[36,2,32,0],[36,6,32,6,"FROM_BASE64URL"],[36,20,32,20],[36,23,32,23],[36,24,32,24],[36,30,32,30],[37,4,33,4],[37,8,33,10,"charMap"],[37,15,33,17],[37,18,33,20],[37,22,33,24,"Array"],[37,27,33,29],[37,28,33,30],[37,31,33,33],[37,32,33,34],[38,4,34,4],[38,9,34,9],[38,13,34,13,"i"],[38,14,34,14],[38,17,34,17],[38,18,34,18],[38,20,34,20,"i"],[38,21,34,21],[38,24,34,24,"charMap"],[38,31,34,31],[38,32,34,32,"length"],[38,38,34,38],[38,40,34,40,"i"],[38,41,34,41],[38,45,34,45],[38,46,34,46],[38,48,34,48],[39,6,35,8,"charMap"],[39,13,35,15],[39,14,35,16,"i"],[39,15,35,17],[39,16,35,18],[39,19,35,21],[39,20,35,22],[39,21,35,23],[40,4,36,4],[41,4,37,4],[41,9,37,9],[41,13,37,13,"i"],[41,15,37,14],[41,18,37,17],[41,19,37,18],[41,21,37,20,"i"],[41,23,37,21],[41,26,37,24,"IGNORE_BASE64URL"],[41,42,37,40],[41,43,37,41,"length"],[41,49,37,47],[41,51,37,49,"i"],[41,53,37,50],[41,57,37,54],[41,58,37,55],[41,60,37,57],[42,6,38,8,"charMap"],[42,13,38,15],[42,14,38,16,"IGNORE_BASE64URL"],[42,30,38,32],[42,31,38,33,"i"],[42,33,38,34],[42,34,38,35],[42,35,38,36,"charCodeAt"],[42,45,38,46],[42,46,38,47],[42,47,38,48],[42,48,38,49],[42,49,38,50],[42,52,38,53],[42,53,38,54],[42,54,38,55],[43,4,39,4],[44,4,40,4],[44,9,40,9],[44,13,40,13,"i"],[44,16,40,14],[44,19,40,17],[44,20,40,18],[44,22,40,20,"i"],[44,25,40,21],[44,28,40,24,"TO_BASE64URL"],[44,40,40,36],[44,41,40,37,"length"],[44,47,40,43],[44,49,40,45,"i"],[44,52,40,46],[44,56,40,50],[44,57,40,51],[44,59,40,53],[45,6,41,8,"charMap"],[45,13,41,15],[45,14,41,16,"TO_BASE64URL"],[45,26,41,28],[45,27,41,29,"i"],[45,30,41,30],[45,31,41,31],[45,32,41,32,"charCodeAt"],[45,42,41,42],[45,43,41,43],[45,44,41,44],[45,45,41,45],[45,46,41,46],[45,49,41,49,"i"],[45,52,41,50],[46,4,42,4],[47,4,43,4],[47,11,43,11,"charMap"],[47,18,43,18],[48,2,44,0],[48,3,44,1],[48,5,44,3],[48,6,44,4],[49,2,45,0],[50,0,46,0],[51,0,47,0],[52,0,48,0],[53,0,49,0],[54,0,50,0],[55,0,51,0],[56,2,52,0],[56,11,52,9,"byteToBase64URL"],[56,26,52,24,"byteToBase64URL"],[56,27,52,25,"byte"],[56,31,52,29],[56,33,52,31,"state"],[56,38,52,36],[56,40,52,38,"emit"],[56,44,52,42],[56,46,52,44],[57,4,53,4],[57,8,53,8,"byte"],[57,12,53,12],[57,17,53,17],[57,21,53,21],[57,23,53,23],[58,6,54,8,"state"],[58,11,54,13],[58,12,54,14,"queue"],[58,17,54,19],[58,20,54,23,"state"],[58,25,54,28],[58,26,54,29,"queue"],[58,31,54,34],[58,35,54,38],[58,36,54,39],[58,39,54,43,"byte"],[58,43,54,47],[59,6,55,8,"state"],[59,11,55,13],[59,12,55,14,"queuedBits"],[59,22,55,24],[59,26,55,28],[59,27,55,29],[60,6,56,8],[60,13,56,15,"state"],[60,18,56,20],[60,19,56,21,"queuedBits"],[60,29,56,31],[60,33,56,35],[60,34,56,36],[60,36,56,38],[61,8,57,12],[61,12,57,18,"pos"],[61,15,57,21],[61,18,57,25,"state"],[61,23,57,30],[61,24,57,31,"queue"],[61,29,57,36],[61,33,57,41,"state"],[61,38,57,46],[61,39,57,47,"queuedBits"],[61,49,57,57],[61,52,57,60],[61,53,57,62],[61,56,57,66],[61,58,57,68],[62,8,58,12,"emit"],[62,12,58,16],[62,13,58,17,"TO_BASE64URL"],[62,25,58,29],[62,26,58,30,"pos"],[62,29,58,33],[62,30,58,34],[62,31,58,35],[63,8,59,12,"state"],[63,13,59,17],[63,14,59,18,"queuedBits"],[63,24,59,28],[63,28,59,32],[63,29,59,33],[64,6,60,8],[65,4,61,4],[65,5,61,5],[65,11,62,9],[65,15,62,13,"state"],[65,20,62,18],[65,21,62,19,"queuedBits"],[65,31,62,29],[65,34,62,32],[65,35,62,33],[65,37,62,35],[66,6,63,8,"state"],[66,11,63,13],[66,12,63,14,"queue"],[66,17,63,19],[66,20,63,22,"state"],[66,25,63,27],[66,26,63,28,"queue"],[66,31,63,33],[66,35,63,38],[66,36,63,39],[66,39,63,42,"state"],[66,44,63,47],[66,45,63,48,"queuedBits"],[66,55,63,59],[67,6,64,8,"state"],[67,11,64,13],[67,12,64,14,"queuedBits"],[67,22,64,24],[67,25,64,27],[67,26,64,28],[68,6,65,8],[68,13,65,15,"state"],[68,18,65,20],[68,19,65,21,"queuedBits"],[68,29,65,31],[68,33,65,35],[68,34,65,36],[68,36,65,38],[69,8,66,12],[69,12,66,18,"pos"],[69,16,66,21],[69,19,66,25,"state"],[69,24,66,30],[69,25,66,31,"queue"],[69,30,66,36],[69,34,66,41,"state"],[69,39,66,46],[69,40,66,47,"queuedBits"],[69,50,66,57],[69,53,66,60],[69,54,66,62],[69,57,66,66],[69,59,66,68],[70,8,67,12,"emit"],[70,12,67,16],[70,13,67,17,"TO_BASE64URL"],[70,25,67,29],[70,26,67,30,"pos"],[70,30,67,33],[70,31,67,34],[70,32,67,35],[71,8,68,12,"state"],[71,13,68,17],[71,14,68,18,"queuedBits"],[71,24,68,28],[71,28,68,32],[71,29,68,33],[72,6,69,8],[73,4,70,4],[74,2,71,0],[75,2,72,0],[76,0,73,0],[77,0,74,0],[78,0,75,0],[79,0,76,0],[80,0,77,0],[81,0,78,0],[82,2,79,0],[82,11,79,9,"byteFromBase64URL"],[82,28,79,26,"byteFromBase64URL"],[82,29,79,27,"charCode"],[82,37,79,35],[82,39,79,37,"state"],[82,44,79,42],[82,46,79,44,"emit"],[82,50,79,48],[82,52,79,50],[83,4,80,4],[83,8,80,10,"bits"],[83,12,80,14],[83,15,80,17,"FROM_BASE64URL"],[83,29,80,31],[83,30,80,32,"charCode"],[83,38,80,40],[83,39,80,41],[84,4,81,4],[84,8,81,8,"bits"],[84,12,81,12],[84,15,81,15],[84,16,81,16],[84,17,81,17],[84,19,81,19],[85,6,82,8],[86,6,83,8,"state"],[86,11,83,13],[86,12,83,14,"queue"],[86,17,83,19],[86,20,83,23,"state"],[86,25,83,28],[86,26,83,29,"queue"],[86,31,83,34],[86,35,83,38],[86,36,83,39],[86,39,83,43,"bits"],[86,43,83,47],[87,6,84,8,"state"],[87,11,84,13],[87,12,84,14,"queuedBits"],[87,22,84,24],[87,26,84,28],[87,27,84,29],[88,6,85,8],[88,13,85,15,"state"],[88,18,85,20],[88,19,85,21,"queuedBits"],[88,29,85,31],[88,33,85,35],[88,34,85,36],[88,36,85,38],[89,8,86,12,"emit"],[89,12,86,16],[89,13,86,18,"state"],[89,18,86,23],[89,19,86,24,"queue"],[89,24,86,29],[89,28,86,34,"state"],[89,33,86,39],[89,34,86,40,"queuedBits"],[89,44,86,50],[89,47,86,53],[89,48,86,55],[89,51,86,59],[89,55,86,63],[89,56,86,64],[90,8,87,12,"state"],[90,13,87,17],[90,14,87,18,"queuedBits"],[90,24,87,28],[90,28,87,32],[90,29,87,33],[91,6,88,8],[92,4,89,4],[92,5,89,5],[92,11,90,9],[92,15,90,13,"bits"],[92,19,90,17],[92,24,90,22],[92,25,90,23],[92,26,90,24],[92,28,90,26],[93,6,91,8],[94,6,92,8],[95,4,93,4],[95,5,93,5],[95,11,94,9],[96,6,95,8],[96,12,95,14],[96,16,95,18,"Error"],[96,21,95,23],[96,22,95,24],[96,55,95,57,"String"],[96,61,95,63],[96,62,95,64,"fromCharCode"],[96,74,95,76],[96,75,95,77,"charCode"],[96,83,95,85],[96,84,95,86],[96,87,95,89],[96,88,95,90],[97,4,96,4],[98,2,97,0],[99,2,98,0],[100,0,99,0],[101,0,100,0],[102,0,101,0],[103,0,102,0],[104,0,103,0],[105,0,104,0],[106,2,105,0],[106,11,105,9,"stringToBase64URL"],[106,28,105,26,"stringToBase64URL"],[106,29,105,27,"str"],[106,32,105,30],[106,34,105,32],[107,4,106,4],[107,8,106,10,"base64"],[107,14,106,16],[107,17,106,19],[107,19,106,21],[108,4,107,4],[108,8,107,10,"emitter"],[108,15,107,17],[108,18,107,21,"char"],[108,22,107,25],[108,26,107,30],[109,6,108,8,"base64"],[109,12,108,14],[109,13,108,15,"push"],[109,17,108,19],[109,18,108,20,"char"],[109,22,108,24],[109,23,108,25],[110,4,109,4],[110,5,109,5],[111,4,110,4],[111,8,110,10,"state"],[111,13,110,15],[111,16,110,18],[112,6,110,20,"queue"],[112,11,110,25],[112,13,110,27],[112,14,110,28],[113,6,110,30,"queuedBits"],[113,16,110,40],[113,18,110,42],[114,4,110,44],[114,5,110,45],[115,4,111,4,"stringToUTF8"],[115,16,111,16],[115,17,111,17,"str"],[115,20,111,20],[115,22,111,23,"byte"],[115,26,111,27],[115,30,111,32],[116,6,112,8,"byteToBase64URL"],[116,21,112,23],[116,22,112,24,"byte"],[116,26,112,28],[116,28,112,30,"state"],[116,33,112,35],[116,35,112,37,"emitter"],[116,42,112,44],[116,43,112,45],[117,4,113,4],[117,5,113,5],[117,6,113,6],[118,4,114,4,"byteToBase64URL"],[118,19,114,19],[118,20,114,20],[118,24,114,24],[118,26,114,26,"state"],[118,31,114,31],[118,33,114,33,"emitter"],[118,40,114,40],[118,41,114,41],[119,4,115,4],[119,11,115,11,"base64"],[119,17,115,17],[119,18,115,18,"join"],[119,22,115,22],[119,23,115,23],[119,25,115,25],[119,26,115,26],[120,2,116,0],[121,2,117,0],[122,0,118,0],[123,0,119,0],[124,0,120,0],[125,0,121,0],[126,0,122,0],[127,2,123,0],[127,11,123,9,"stringFromBase64URL"],[127,30,123,28,"stringFromBase64URL"],[127,31,123,29,"str"],[127,34,123,32],[127,36,123,34],[128,4,124,4],[128,8,124,10,"conv"],[128,12,124,14],[128,15,124,17],[128,17,124,19],[129,4,125,4],[129,8,125,10,"utf8Emit"],[129,16,125,18],[129,19,125,22,"codepoint"],[129,28,125,31],[129,32,125,36],[130,6,126,8,"conv"],[130,10,126,12],[130,11,126,13,"push"],[130,15,126,17],[130,16,126,18,"String"],[130,22,126,24],[130,23,126,25,"fromCodePoint"],[130,36,126,38],[130,37,126,39,"codepoint"],[130,46,126,48],[130,47,126,49],[130,48,126,50],[131,4,127,4],[131,5,127,5],[132,4,128,4],[132,8,128,10,"utf8State"],[132,17,128,19],[132,20,128,22],[133,6,129,8,"utf8seq"],[133,13,129,15],[133,15,129,17],[133,16,129,18],[134,6,130,8,"codepoint"],[134,15,130,17],[134,17,130,19],[135,4,131,4],[135,5,131,5],[136,4,132,4],[136,8,132,10,"b64State"],[136,16,132,18],[136,19,132,21],[137,6,132,23,"queue"],[137,11,132,28],[137,13,132,30],[137,14,132,31],[138,6,132,33,"queuedBits"],[138,16,132,43],[138,18,132,45],[139,4,132,47],[139,5,132,48],[140,4,133,4],[140,8,133,10,"byteEmit"],[140,16,133,18],[140,19,133,22,"byte"],[140,23,133,26],[140,27,133,31],[141,6,134,8,"stringFromUTF8"],[141,20,134,22],[141,21,134,23,"byte"],[141,25,134,27],[141,27,134,29,"utf8State"],[141,36,134,38],[141,38,134,40,"utf8Emit"],[141,46,134,48],[141,47,134,49],[142,4,135,4],[142,5,135,5],[143,4,136,4],[143,9,136,9],[143,13,136,13,"i"],[143,14,136,14],[143,17,136,17],[143,18,136,18],[143,20,136,20,"i"],[143,21,136,21],[143,24,136,24,"str"],[143,27,136,27],[143,28,136,28,"length"],[143,34,136,34],[143,36,136,36,"i"],[143,37,136,37],[143,41,136,41],[143,42,136,42],[143,44,136,44],[144,6,137,8,"byteFromBase64URL"],[144,23,137,25],[144,24,137,26,"str"],[144,27,137,29],[144,28,137,30,"charCodeAt"],[144,38,137,40],[144,39,137,41,"i"],[144,40,137,42],[144,41,137,43],[144,43,137,45,"b64State"],[144,51,137,53],[144,53,137,55,"byteEmit"],[144,61,137,63],[144,62,137,64],[145,4,138,4],[146,4,139,4],[146,11,139,11,"conv"],[146,15,139,15],[146,16,139,16,"join"],[146,20,139,20],[146,21,139,21],[146,23,139,23],[146,24,139,24],[147,2,140,0],[148,2,141,0],[149,0,142,0],[150,0,143,0],[151,0,144,0],[152,0,145,0],[153,0,146,0],[154,2,147,0],[154,11,147,9,"codepointToUTF8"],[154,26,147,24,"codepointToUTF8"],[154,27,147,25,"codepoint"],[154,36,147,34],[154,38,147,36,"emit"],[154,42,147,40],[154,44,147,42],[155,4,148,4],[155,8,148,8,"codepoint"],[155,17,148,17],[155,21,148,21],[155,25,148,25],[155,27,148,27],[156,6,149,8,"emit"],[156,10,149,12],[156,11,149,13,"codepoint"],[156,20,149,22],[156,21,149,23],[157,6,150,8],[158,4,151,4],[158,5,151,5],[158,11,152,9],[158,15,152,13,"codepoint"],[158,24,152,22],[158,28,152,26],[158,33,152,31],[158,35,152,33],[159,6,153,8,"emit"],[159,10,153,12],[159,11,153,13],[159,15,153,17],[159,18,153,21,"codepoint"],[159,27,153,30],[159,31,153,34],[159,32,153,36],[159,33,153,37],[160,6,154,8,"emit"],[160,10,154,12],[160,11,154,13],[160,15,154,17],[160,18,154,21,"codepoint"],[160,27,154,30],[160,30,154,33],[160,34,154,38],[160,35,154,39],[161,6,155,8],[162,4,156,4],[162,5,156,5],[162,11,157,9],[162,15,157,13,"codepoint"],[162,24,157,22],[162,28,157,26],[162,34,157,32],[162,36,157,34],[163,6,158,8,"emit"],[163,10,158,12],[163,11,158,13],[163,15,158,17],[163,18,158,21,"codepoint"],[163,27,158,30],[163,31,158,34],[163,33,158,37],[163,34,158,38],[164,6,159,8,"emit"],[164,10,159,12],[164,11,159,13],[164,15,159,17],[164,18,159,22,"codepoint"],[164,27,159,31],[164,31,159,35],[164,32,159,36],[164,35,159,40],[164,39,159,45],[164,40,159,46],[165,6,160,8,"emit"],[165,10,160,12],[165,11,160,13],[165,15,160,17],[165,18,160,21,"codepoint"],[165,27,160,30],[165,30,160,33],[165,34,160,38],[165,35,160,39],[166,6,161,8],[167,4,162,4],[167,5,162,5],[167,11,163,9],[167,15,163,13,"codepoint"],[167,24,163,22],[167,28,163,26],[167,36,163,34],[167,38,163,36],[168,6,164,8,"emit"],[168,10,164,12],[168,11,164,13],[168,15,164,17],[168,18,164,21,"codepoint"],[168,27,164,30],[168,31,164,34],[168,33,164,37],[168,34,164,38],[169,6,165,8,"emit"],[169,10,165,12],[169,11,165,13],[169,15,165,17],[169,18,165,22,"codepoint"],[169,27,165,31],[169,31,165,35],[169,33,165,37],[169,36,165,41],[169,40,165,46],[169,41,165,47],[170,6,166,8,"emit"],[170,10,166,12],[170,11,166,13],[170,15,166,17],[170,18,166,22,"codepoint"],[170,27,166,31],[170,31,166,35],[170,32,166,36],[170,35,166,40],[170,39,166,45],[170,40,166,46],[171,6,167,8,"emit"],[171,10,167,12],[171,11,167,13],[171,15,167,17],[171,18,167,21,"codepoint"],[171,27,167,30],[171,30,167,33],[171,34,167,38],[171,35,167,39],[172,6,168,8],[173,4,169,4],[174,4,170,4],[174,10,170,10],[174,14,170,14,"Error"],[174,19,170,19],[174,20,170,20],[174,55,170,55,"codepoint"],[174,64,170,64],[174,65,170,65,"toString"],[174,73,170,73],[174,74,170,74],[174,76,170,76],[174,77,170,77],[174,79,170,79],[174,80,170,80],[175,2,171,0],[176,2,172,0],[177,0,173,0],[178,0,174,0],[179,0,175,0],[180,0,176,0],[181,0,177,0],[182,2,178,0],[182,11,178,9,"stringToUTF8"],[182,23,178,21,"stringToUTF8"],[182,24,178,22,"str"],[182,27,178,25],[182,29,178,27,"emit"],[182,33,178,31],[182,35,178,33],[183,4,179,4],[183,9,179,9],[183,13,179,13,"i"],[183,14,179,14],[183,17,179,17],[183,18,179,18],[183,20,179,20,"i"],[183,21,179,21],[183,24,179,24,"str"],[183,27,179,27],[183,28,179,28,"length"],[183,34,179,34],[183,36,179,36,"i"],[183,37,179,37],[183,41,179,41],[183,42,179,42],[183,44,179,44],[184,6,180,8],[184,10,180,12,"codepoint"],[184,19,180,21],[184,22,180,24,"str"],[184,25,180,27],[184,26,180,28,"charCodeAt"],[184,36,180,38],[184,37,180,39,"i"],[184,38,180,40],[184,39,180,41],[185,6,181,8],[185,10,181,12,"codepoint"],[185,19,181,21],[185,22,181,24],[185,28,181,30],[185,32,181,34,"codepoint"],[185,41,181,43],[185,45,181,47],[185,51,181,53],[185,53,181,55],[186,8,182,12],[187,8,183,12],[188,8,184,12],[189,8,185,12],[189,12,185,18,"highSurrogate"],[189,25,185,31],[189,28,185,35],[189,29,185,36,"codepoint"],[189,38,185,45],[189,41,185,48],[189,47,185,54],[189,51,185,58],[189,56,185,63],[189,59,185,67],[189,65,185,73],[190,8,186,12],[190,12,186,18,"lowSurrogate"],[190,24,186,30],[190,27,186,34,"str"],[190,30,186,37],[190,31,186,38,"charCodeAt"],[190,41,186,48],[190,42,186,49,"i"],[190,43,186,50],[190,46,186,53],[190,47,186,54],[190,48,186,55],[190,51,186,58],[190,57,186,64],[190,60,186,68],[190,66,186,74],[191,8,187,12,"codepoint"],[191,17,187,21],[191,20,187,24],[191,21,187,25,"lowSurrogate"],[191,33,187,37],[191,36,187,40,"highSurrogate"],[191,49,187,53],[191,53,187,57],[191,60,187,64],[192,8,188,12,"i"],[192,9,188,13],[192,13,188,17],[192,14,188,18],[193,6,189,8],[194,6,190,8,"codepointToUTF8"],[194,21,190,23],[194,22,190,24,"codepoint"],[194,31,190,33],[194,33,190,35,"emit"],[194,37,190,39],[194,38,190,40],[195,4,191,4],[196,2,192,0],[197,2,193,0],[198,0,194,0],[199,0,195,0],[200,0,196,0],[201,0,197,0],[202,0,198,0],[203,0,199,0],[204,0,200,0],[205,2,201,0],[205,11,201,9,"stringFromUTF8"],[205,25,201,23,"stringFromUTF8"],[205,26,201,24,"byte"],[205,30,201,28],[205,32,201,30,"state"],[205,37,201,35],[205,39,201,37,"emit"],[205,43,201,41],[205,45,201,43],[206,4,202,4],[206,8,202,8,"state"],[206,13,202,13],[206,14,202,14,"utf8seq"],[206,21,202,21],[206,26,202,26],[206,27,202,27],[206,29,202,29],[207,6,203,8],[207,10,203,12,"byte"],[207,14,203,16],[207,18,203,20],[207,22,203,24],[207,24,203,26],[208,8,204,12,"emit"],[208,12,204,16],[208,13,204,17,"byte"],[208,17,204,21],[208,18,204,22],[209,8,205,12],[210,6,206,8],[211,6,207,8],[212,6,208,8],[212,11,208,13],[212,15,208,17,"leadingBit"],[212,25,208,27],[212,28,208,30],[212,29,208,31],[212,31,208,33,"leadingBit"],[212,41,208,43],[212,44,208,46],[212,45,208,47],[212,47,208,49,"leadingBit"],[212,57,208,59],[212,61,208,63],[212,62,208,64],[212,64,208,66],[213,8,209,12],[213,12,209,16],[213,13,209,18,"byte"],[213,17,209,22],[213,21,209,27],[213,22,209,28],[213,25,209,31,"leadingBit"],[213,35,209,42],[213,38,209,46],[213,39,209,47],[213,45,209,53],[213,46,209,54],[213,48,209,56],[214,10,210,16,"state"],[214,15,210,21],[214,16,210,22,"utf8seq"],[214,23,210,29],[214,26,210,32,"leadingBit"],[214,36,210,42],[215,10,211,16],[216,8,212,12],[217,6,213,8],[218,6,214,8],[218,10,214,12,"state"],[218,15,214,17],[218,16,214,18,"utf8seq"],[218,23,214,25],[218,28,214,30],[218,29,214,31],[218,31,214,33],[219,8,215,12,"state"],[219,13,215,17],[219,14,215,18,"codepoint"],[219,23,215,27],[219,26,215,30,"byte"],[219,30,215,34],[219,33,215,37],[219,35,215,39],[220,6,216,8],[220,7,216,9],[220,13,217,13],[220,17,217,17,"state"],[220,22,217,22],[220,23,217,23,"utf8seq"],[220,30,217,30],[220,35,217,35],[220,36,217,36],[220,38,217,38],[221,8,218,12,"state"],[221,13,218,17],[221,14,218,18,"codepoint"],[221,23,218,27],[221,26,218,30,"byte"],[221,30,218,34],[221,33,218,37],[221,35,218,39],[222,6,219,8],[222,7,219,9],[222,13,220,13],[222,17,220,17,"state"],[222,22,220,22],[222,23,220,23,"utf8seq"],[222,30,220,30],[222,35,220,35],[222,36,220,36],[222,38,220,38],[223,8,221,12,"state"],[223,13,221,17],[223,14,221,18,"codepoint"],[223,23,221,27],[223,26,221,30,"byte"],[223,30,221,34],[223,33,221,37],[223,34,221,38],[224,6,222,8],[224,7,222,9],[224,13,223,13],[225,8,224,12],[225,14,224,18],[225,18,224,22,"Error"],[225,23,224,27],[225,24,224,28],[225,48,224,52],[225,49,224,53],[226,6,225,8],[227,6,226,8,"state"],[227,11,226,13],[227,12,226,14,"utf8seq"],[227,19,226,21],[227,23,226,25],[227,24,226,26],[228,4,227,4],[228,5,227,5],[228,11,228,9],[228,15,228,13,"state"],[228,20,228,18],[228,21,228,19,"utf8seq"],[228,28,228,26],[228,31,228,29],[228,32,228,30],[228,34,228,32],[229,6,229,8],[229,10,229,12,"byte"],[229,14,229,16],[229,18,229,20],[229,22,229,24],[229,24,229,26],[230,8,230,12],[230,14,230,18],[230,18,230,22,"Error"],[230,23,230,27],[230,24,230,28],[230,48,230,52],[230,49,230,53],[231,6,231,8],[232,6,232,8,"state"],[232,11,232,13],[232,12,232,14,"codepoint"],[232,21,232,23],[232,24,232,27,"state"],[232,29,232,32],[232,30,232,33,"codepoint"],[232,39,232,42],[232,43,232,46],[232,44,232,47],[232,47,232,52,"byte"],[232,51,232,56],[232,54,232,59],[232,56,232,62],[233,6,233,8,"state"],[233,11,233,13],[233,12,233,14,"utf8seq"],[233,19,233,21],[233,23,233,25],[233,24,233,26],[234,6,234,8],[234,10,234,12,"state"],[234,15,234,17],[234,16,234,18,"utf8seq"],[234,23,234,25],[234,28,234,30],[234,29,234,31],[234,31,234,33],[235,8,235,12,"emit"],[235,12,235,16],[235,13,235,17,"state"],[235,18,235,22],[235,19,235,23,"codepoint"],[235,28,235,32],[235,29,235,33],[236,6,236,8],[237,4,237,4],[238,2,238,0],[239,2,239,0],[240,0,240,0],[241,0,241,0],[242,2,242,0],[242,11,242,9,"base64UrlToUint8Array"],[242,32,242,30,"base64UrlToUint8Array"],[242,33,242,31,"str"],[242,36,242,34],[242,38,242,36],[243,4,243,4],[243,8,243,10,"result"],[243,14,243,16],[243,17,243,19],[243,19,243,21],[244,4,244,4],[244,8,244,10,"state"],[244,13,244,15],[244,16,244,18],[245,6,244,20,"queue"],[245,11,244,25],[245,13,244,27],[245,14,244,28],[246,6,244,30,"queuedBits"],[246,16,244,40],[246,18,244,42],[247,4,244,44],[247,5,244,45],[248,4,245,4],[248,8,245,10,"onByte"],[248,14,245,16],[248,17,245,20,"byte"],[248,21,245,24],[248,25,245,29],[249,6,246,8,"result"],[249,12,246,14],[249,13,246,15,"push"],[249,17,246,19],[249,18,246,20,"byte"],[249,22,246,24],[249,23,246,25],[250,4,247,4],[250,5,247,5],[251,4,248,4],[251,9,248,9],[251,13,248,13,"i"],[251,14,248,14],[251,17,248,17],[251,18,248,18],[251,20,248,20,"i"],[251,21,248,21],[251,24,248,24,"str"],[251,27,248,27],[251,28,248,28,"length"],[251,34,248,34],[251,36,248,36,"i"],[251,37,248,37],[251,41,248,41],[251,42,248,42],[251,44,248,44],[252,6,249,8,"byteFromBase64URL"],[252,23,249,25],[252,24,249,26,"str"],[252,27,249,29],[252,28,249,30,"charCodeAt"],[252,38,249,40],[252,39,249,41,"i"],[252,40,249,42],[252,41,249,43],[252,43,249,45,"state"],[252,48,249,50],[252,50,249,52,"onByte"],[252,56,249,58],[252,57,249,59],[253,4,250,4],[254,4,251,4],[254,11,251,11],[254,15,251,15,"Uint8Array"],[254,25,251,25],[254,26,251,26,"result"],[254,32,251,32],[254,33,251,33],[255,2,252,0],[256,2,253,0],[256,11,253,9,"stringToUint8Array"],[256,29,253,27,"stringToUint8Array"],[256,30,253,28,"str"],[256,33,253,31],[256,35,253,33],[257,4,254,4],[257,8,254,10,"result"],[257,14,254,16],[257,17,254,19],[257,19,254,21],[258,4,255,4,"stringToUTF8"],[258,16,255,16],[258,17,255,17,"str"],[258,20,255,20],[258,22,255,23,"byte"],[258,26,255,27],[258,30,255,32,"result"],[258,36,255,38],[258,37,255,39,"push"],[258,41,255,43],[258,42,255,44,"byte"],[258,46,255,48],[258,47,255,49],[258,48,255,50],[259,4,256,4],[259,11,256,11],[259,15,256,15,"Uint8Array"],[259,25,256,25],[259,26,256,26,"result"],[259,32,256,32],[259,33,256,33],[260,2,257,0],[261,2,258,0],[261,11,258,9,"bytesToBase64URL"],[261,27,258,25,"bytesToBase64URL"],[261,28,258,26,"bytes"],[261,33,258,31],[261,35,258,33],[262,4,259,4],[262,8,259,10,"result"],[262,14,259,16],[262,17,259,19],[262,19,259,21],[263,4,260,4],[263,8,260,10,"state"],[263,13,260,15],[263,16,260,18],[264,6,260,20,"queue"],[264,11,260,25],[264,13,260,27],[264,14,260,28],[265,6,260,30,"queuedBits"],[265,16,260,40],[265,18,260,42],[266,4,260,44],[266,5,260,45],[267,4,261,4],[267,8,261,10,"onChar"],[267,14,261,16],[267,17,261,20,"char"],[267,21,261,24],[267,25,261,29],[268,6,262,8,"result"],[268,12,262,14],[268,13,262,15,"push"],[268,17,262,19],[268,18,262,20,"char"],[268,22,262,24],[268,23,262,25],[269,4,263,4],[269,5,263,5],[270,4,264,4,"bytes"],[270,9,264,9],[270,10,264,10,"forEach"],[270,17,264,17],[270,18,264,19,"byte"],[270,22,264,23],[270,26,264,28,"byteToBase64URL"],[270,41,264,43],[270,42,264,44,"byte"],[270,46,264,48],[270,48,264,50,"state"],[270,53,264,55],[270,55,264,57,"onChar"],[270,61,264,63],[270,62,264,64],[270,63,264,65],[271,4,265,4],[272,4,266,4,"byteToBase64URL"],[272,19,266,19],[272,20,266,20],[272,24,266,24],[272,26,266,26,"state"],[272,31,266,31],[272,33,266,33,"onChar"],[272,39,266,39],[272,40,266,40],[273,4,267,4],[273,11,267,11,"result"],[273,17,267,17],[273,18,267,18,"join"],[273,22,267,22],[273,23,267,23],[273,25,267,25],[273,26,267,26],[274,2,268,0],[275,0,268,1],[275,3]],"functionMap":{"names":["<global>","<anonymous>","byteToBase64URL","byteFromBase64URL","stringToBase64URL","emitter","stringToUTF8$argument_1","stringFromBase64URL","utf8Emit","byteEmit","codepointToUTF8","stringToUTF8","stringFromUTF8","base64UrlToUint8Array","onByte","stringToUint8Array","bytesToBase64URL","onChar","bytes.forEach$argument_0"],"mappings":"AAA;wBC+B;CDY;AEQ;CFmB;AGQ;CHkB;AIQ;oBCE;KDE;sBEE;KFE;CJG;AOO;qBCE;KDE;qBEM;KFE;CPK;AUO;CVwB;AWO;CXc;AYS;CZqC;AaI;mBCG;KDE;CbK;AeC;sBTE,2BS;CfE;AgBC;mBCG;KDE;kBEC,8CF;ChBI"}},"type":"js/module"}]}