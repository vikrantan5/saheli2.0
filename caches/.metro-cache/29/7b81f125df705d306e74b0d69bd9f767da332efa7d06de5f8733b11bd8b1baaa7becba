{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"5y7e5+zC7teYEEC6niD9f5zII1M=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"yg7e6laZwmpbIvId5jovq9ugXp8=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30=","exportNames":["*"]}},{"name":"expo-modules-core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":86,"index":86}}],"key":"fU8WLIPqoAGygnPbZ/QJiQQfXEY=","exportNames":["*"]}},{"name":"./AudioAvailability","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":87},"end":{"line":2,"column":61,"index":148}}],"key":"bSBjZOQMb5YC9PXMSfyUskC29qA=","exportNames":["*"]}},{"name":"../AV","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":149},"end":{"line":3,"column":135,"index":284}}],"key":"CKKx7GRKZ+dPvq8Nb7FmQZUl2kI=","exportNames":["*"]}},{"name":"../ExponentAV","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":285},"end":{"line":4,"column":39,"index":324}}],"key":"EFxOD5hqmWNncIOpuO+BTl9k+bk=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.Sound = void 0;\n  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/slicedToArray\"));\n  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[2], \"@babel/runtime/helpers/asyncToGenerator\"));\n  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[3], \"@babel/runtime/helpers/classCallCheck\"));\n  var _createClass2 = _interopRequireDefault(require(_dependencyMap[4], \"@babel/runtime/helpers/createClass\"));\n  var _expoModulesCore = require(_dependencyMap[5], \"expo-modules-core\");\n  var _AudioAvailability = require(_dependencyMap[6], \"./AudioAvailability\");\n  var _AV = require(_dependencyMap[7], \"../AV\");\n  var _ExponentAV = _interopRequireDefault(require(_dependencyMap[8], \"../ExponentAV\"));\n  var _Sound;\n  // @needsAudit\n  /**\n   * This class represents a sound corresponding to an Asset or URL.\n   * @return A newly constructed instance of `Audio.Sound`.\n   *\n   * @example\n   * ```ts\n   * const sound = new Audio.Sound();\n   * try {\n   *   await sound.loadAsync(require('./assets/sounds/hello.mp3'));\n   *   await sound.playAsync();\n   *   // Your sound is playing!\n   *\n   *   // Don't forget to unload the sound from memory\n   *   // when you are done using the Sound object\n   *   await sound.unloadAsync();\n   * } catch (error) {\n   *   // An error occurred!\n   * }\n   * ```\n   *\n   * > Method not described below and the rest of the API for `Audio.Sound` is the same as the imperative playback API for `Video`.\n   * > See the [AV documentation](/versions/latest/sdk/av) for further information.\n   */\n  var Sound = exports.Sound = /*#__PURE__*/function () {\n    function Sound() {\n      var _this = this;\n      (0, _classCallCheck2.default)(this, Sound);\n      this._loaded = false;\n      this._loading = false;\n      this._key = null;\n      this._lastStatusUpdate = null;\n      this._lastStatusUpdateTime = null;\n      this._subscriptions = [];\n      this._eventEmitter = new _expoModulesCore.LegacyEventEmitter(_ExponentAV.default);\n      this._coalesceStatusUpdatesInMillis = 100;\n      this._onPlaybackStatusUpdate = null;\n      this._onMetadataUpdate = null;\n      this._onAudioSampleReceived = null;\n      this._internalStatusUpdateCallback = _ref => {\n        var key = _ref.key,\n          status = _ref.status;\n        if (this._key === key) {\n          this._callOnPlaybackStatusUpdateForNewStatus(status);\n        }\n      };\n      this._internalMetadataUpdateCallback = _ref2 => {\n        var key = _ref2.key,\n          metadata = _ref2.metadata;\n        if (this._key === key) {\n          this._onMetadataUpdate?.(metadata);\n        }\n      };\n      this._internalErrorCallback = _ref3 => {\n        var key = _ref3.key,\n          error = _ref3.error;\n        if (this._key === key) {\n          this._errorCallback(error);\n        }\n      };\n      this._errorCallback = error => {\n        this._clearSubscriptions();\n        this._loaded = false;\n        this._key = null;\n        this._callOnPlaybackStatusUpdateForNewStatus((0, _AV.getUnloadedStatus)(error));\n      };\n      // ### Unified playback API ### (consistent with Video.js)\n      // All calls automatically call onPlaybackStatusUpdate as a side effect.\n      // Get status API\n      this.getStatusAsync = /*#__PURE__*/(0, _asyncToGenerator2.default)(function* () {\n        if (_this._loaded) {\n          return _this._performOperationAndHandleStatusAsync(() => _ExponentAV.default.getStatusForSound(_this._key));\n        }\n        var status = (0, _AV.getUnloadedStatus)();\n        _this._callOnPlaybackStatusUpdateForNewStatus(status);\n        return status;\n      });\n    }\n    return (0, _createClass2.default)(Sound, [{\n      key: \"_callOnPlaybackStatusUpdateForNewStatus\",\n      value:\n      // Internal methods\n      function _callOnPlaybackStatusUpdateForNewStatus(status) {\n        var shouldDismissBasedOnCoalescing = this._lastStatusUpdateTime && JSON.stringify(status) === this._lastStatusUpdate && Date.now() - this._lastStatusUpdateTime.getTime() < this._coalesceStatusUpdatesInMillis;\n        if (this._onPlaybackStatusUpdate != null && !shouldDismissBasedOnCoalescing) {\n          this._onPlaybackStatusUpdate(status);\n          this._lastStatusUpdateTime = new Date();\n          this._lastStatusUpdate = JSON.stringify(status);\n        }\n      }\n    }, {\n      key: \"_performOperationAndHandleStatusAsync\",\n      value: function () {\n        var _performOperationAndHandleStatusAsync2 = (0, _asyncToGenerator2.default)(function* (operation) {\n          (0, _AudioAvailability.throwIfAudioIsDisabled)();\n          if (this._loaded) {\n            var status = yield operation();\n            this._callOnPlaybackStatusUpdateForNewStatus(status);\n            return status;\n          } else {\n            throw new Error('Cannot complete operation because sound is not loaded.');\n          }\n        });\n        function _performOperationAndHandleStatusAsync(_x) {\n          return _performOperationAndHandleStatusAsync2.apply(this, arguments);\n        }\n        return _performOperationAndHandleStatusAsync;\n      }()\n    }, {\n      key: \"_updateAudioSampleReceivedCallback\",\n      value: function _updateAudioSampleReceivedCallback() {\n        if (globalThis.__EXAV_setOnAudioSampleReceivedCallback == null) {\n          if (_expoModulesCore.Platform.OS === 'ios' || _expoModulesCore.Platform.OS === 'android') {\n            console.warn('expo-av: Failed to set up Audio Sample Buffer callback. ' + \"Do you have 'Remote Debugging' enabled in your app's Developer Menu (https://docs.expo.dev/workflow/debugging)? \" + 'Audio Sample Buffer callbacks are not supported while using Remote Debugging, you will need to disable it to use them.');\n            return;\n          } else {\n            throw new _expoModulesCore.UnavailabilityError('expo-av', 'setOnAudioSampleReceived');\n          }\n        }\n        if (this._key == null) {\n          throw new Error('Cannot set Audio Sample Buffer callback when the Sound instance has not been successfully loaded/initialized!');\n        }\n        if (typeof this._key !== 'number') {\n          throw new Error(`Cannot set Audio Sample Buffer callback when Sound instance key is of type ${typeof this._key}! (expected: number)`);\n        }\n        globalThis.__EXAV_setOnAudioSampleReceivedCallback(this._key, this._onAudioSampleReceived);\n      }\n    }, {\n      key: \"_subscribeToNativeEvents\",\n      value:\n      // TODO: We can optimize by only using time observer on native if (this._onPlaybackStatusUpdate).\n      function _subscribeToNativeEvents() {\n        if (this._loaded) {\n          this._subscriptions.push(this._eventEmitter.addListener('didUpdatePlaybackStatus', this._internalStatusUpdateCallback), this._eventEmitter.addListener('didUpdateMetadata', this._internalMetadataUpdateCallback));\n          this._subscriptions.push(this._eventEmitter.addListener('ExponentAV.onError', this._internalErrorCallback));\n        }\n      }\n    }, {\n      key: \"_clearSubscriptions\",\n      value: function _clearSubscriptions() {\n        this._subscriptions.forEach(e => e.remove());\n        this._subscriptions = [];\n      }\n    }, {\n      key: \"setOnPlaybackStatusUpdate\",\n      value:\n      /**\n       * Sets a function to be called regularly with the `AVPlaybackStatus` of the playback object.\n       *\n       * `onPlaybackStatusUpdate` will be called whenever a call to the API for this playback object completes\n       * (such as `setStatusAsync()`, `getStatusAsync()`, or `unloadAsync()`), nd will also be called at regular intervals\n       * while the media is in the loaded state.\n       *\n       * Set `progressUpdateIntervalMillis` via `setStatusAsync()` or `setProgressUpdateIntervalAsync()` to modify\n       * the interval with which `onPlaybackStatusUpdate` is called while loaded.\n       *\n       * @param onPlaybackStatusUpdate A function taking a single parameter `AVPlaybackStatus`.\n       */\n      function setOnPlaybackStatusUpdate(onPlaybackStatusUpdate) {\n        this._onPlaybackStatusUpdate = onPlaybackStatusUpdate;\n        this.getStatusAsync();\n      }\n      /**\n       * Sets a function to be called whenever the metadata of the sound object changes, if one is set.\n       * @param onMetadataUpdate A function taking a single object of type `AVMetadata` as a parameter.\n       * @platform ios\n       */\n    }, {\n      key: \"setOnMetadataUpdate\",\n      value: function setOnMetadataUpdate(onMetadataUpdate) {\n        this._onMetadataUpdate = onMetadataUpdate;\n      }\n      /**\n       * Sets a function to be called during playback, receiving the audio sample as parameter.\n       * @param callback A function taking the `AudioSampleCallback` as parameter.\n       */\n    }, {\n      key: \"setOnAudioSampleReceived\",\n      value: function setOnAudioSampleReceived(callback) {\n        this._onAudioSampleReceived = callback;\n        if (this._key != null) {\n          this._updateAudioSampleReceivedCallback();\n        }\n      }\n      // Loading / unloading API\n    }, {\n      key: \"loadAsync\",\n      value: function () {\n        var _loadAsync = (0, _asyncToGenerator2.default)(function* (source) {\n          var initialStatus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n          var downloadFirst = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n          (0, _AudioAvailability.throwIfAudioIsDisabled)();\n          if (this._loading) {\n            throw new Error('The Sound is already loading.');\n          }\n          if (!this._loaded) {\n            this._loading = true;\n            var _yield$getNativeSourc = yield (0, _AV.getNativeSourceAndFullInitialStatusForLoadAsync)(source, initialStatus, downloadFirst),\n              nativeSource = _yield$getNativeSourc.nativeSource,\n              fullInitialStatus = _yield$getNativeSourc.fullInitialStatus;\n            // This is a workaround, since using load with resolve / reject seems to not work.\n            return new Promise((resolve, reject) => {\n              var loadSuccess = result => {\n                var _result = (0, _slicedToArray2.default)(result, 2),\n                  key = _result[0],\n                  status = _result[1];\n                this._key = key;\n                this._loaded = true;\n                this._loading = false;\n                this._subscribeToNativeEvents();\n                this._callOnPlaybackStatusUpdateForNewStatus(status);\n                resolve(status);\n              };\n              var loadError = error => {\n                this._loading = false;\n                reject(error);\n              };\n              _ExponentAV.default.loadForSound(nativeSource, fullInitialStatus).then(loadSuccess).catch(loadError);\n            });\n          } else {\n            throw new Error('The Sound is already loaded.');\n          }\n        });\n        function loadAsync(_x2) {\n          return _loadAsync.apply(this, arguments);\n        }\n        return loadAsync;\n      }()\n    }, {\n      key: \"unloadAsync\",\n      value: function () {\n        var _unloadAsync = (0, _asyncToGenerator2.default)(function* () {\n          if (this._loaded) {\n            this._loaded = false;\n            var key = this._key;\n            this._key = null;\n            var status = yield _ExponentAV.default.unloadForSound(key);\n            this._callOnPlaybackStatusUpdateForNewStatus(status);\n            this._clearSubscriptions();\n            return status;\n          } else {\n            return this.getStatusAsync(); // Automatically calls onPlaybackStatusUpdate.\n          }\n        });\n        function unloadAsync() {\n          return _unloadAsync.apply(this, arguments);\n        }\n        return unloadAsync;\n      }() // Set status API (only available while isLoaded = true)\n    }, {\n      key: \"setStatusAsync\",\n      value: function () {\n        var _setStatusAsync = (0, _asyncToGenerator2.default)(function* (status) {\n          (0, _AV.assertStatusValuesInBounds)(status);\n          return this._performOperationAndHandleStatusAsync(() => _ExponentAV.default.setStatusForSound(this._key, status));\n        });\n        function setStatusAsync(_x3) {\n          return _setStatusAsync.apply(this, arguments);\n        }\n        return setStatusAsync;\n      }()\n    }, {\n      key: \"replayAsync\",\n      value: function () {\n        var _replayAsync = (0, _asyncToGenerator2.default)(function* () {\n          var status = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          if (status.positionMillis && status.positionMillis !== 0) {\n            throw new Error('Requested position after replay has to be 0.');\n          }\n          return this._performOperationAndHandleStatusAsync(() => _ExponentAV.default.replaySound(this._key, {\n            ...status,\n            positionMillis: 0,\n            shouldPlay: true\n          }));\n        });\n        function replayAsync() {\n          return _replayAsync.apply(this, arguments);\n        }\n        return replayAsync;\n      }() // Methods of the Playback interface that are set via PlaybackMixin\n    }]);\n  }();\n  _Sound = Sound;\n  /** @deprecated Use `Sound.createAsync()` instead */\n  Sound.create = /*#__PURE__*/function () {\n    var _ref5 = (0, _asyncToGenerator2.default)(function* (source) {\n      var initialStatus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var onPlaybackStatusUpdate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var downloadFirst = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n      console.warn(`Sound.create is deprecated in favor of Sound.createAsync with the same API except for the new method name`);\n      return _Sound.createAsync(source, initialStatus, onPlaybackStatusUpdate, downloadFirst);\n    });\n    return function (_x4) {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n  /**\n   * Creates and loads a sound from source.\n   *\n   * ```ts\n   * const { sound } = await Audio.Sound.createAsync(\n   *   source,\n   *   initialStatus,\n   *   onPlaybackStatusUpdate,\n   *   downloadFirst\n   * );\n   *\n   * // Which is equivalent to the following:\n   * const sound = new Audio.Sound();\n   * sound.setOnPlaybackStatusUpdate(onPlaybackStatusUpdate);\n   * await sound.loadAsync(source, initialStatus, downloadFirst);\n   * ```\n   *\n   * @param source The source of the sound. See the [AV documentation](/versions/latest/sdk/av/#playback-api) for details on the possible `source` values.\n   *\n   * @param initialStatus The initial intended `PlaybackStatusToSet` of the sound, whose values will override the default initial playback status.\n   * This value defaults to `{}` if no parameter is passed. See the [AV documentation](/versions/latest/sdk/av) for details on `PlaybackStatusToSet` and the default\n   * initial playback status.\n   *\n   * @param onPlaybackStatusUpdate A function taking a single parameter `PlaybackStatus`. This value defaults to `null` if no parameter is passed.\n   * See the [AV documentation](/versions/latest/sdk/av) for details on the functionality provided by `onPlaybackStatusUpdate`\n   *\n   * @param downloadFirst If set to true, the system will attempt to download the resource to the device before loading. This value defaults to `true`.\n   * Note that at the moment, this will only work for `source`s of the form `require('path/to/file')` or `Asset` objects.\n   *\n   * @example\n   * ```ts\n   * try {\n   *   const { sound: soundObject, status } = await Audio.Sound.createAsync(\n   *     require('./assets/sounds/hello.mp3'),\n   *     { shouldPlay: true }\n   *   );\n   *   // Your sound is playing!\n   * } catch (error) {\n   *   // An error occurred!\n   * }\n   * ```\n   *\n   * @return A `Promise` that is rejected if creation failed, or fulfilled with the `SoundObject` if creation succeeded.\n   */\n  Sound.createAsync = /*#__PURE__*/function () {\n    var _ref6 = (0, _asyncToGenerator2.default)(function* (source) {\n      var initialStatus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var onPlaybackStatusUpdate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var downloadFirst = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n      var sound = new _Sound();\n      sound.setOnPlaybackStatusUpdate(onPlaybackStatusUpdate);\n      var status = yield sound.loadAsync(source, initialStatus, downloadFirst);\n      return {\n        sound,\n        status\n      };\n    });\n    return function (_x5) {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n  Object.assign(Sound.prototype, _AV.PlaybackMixin);\n});","lineCount":374,"map":[[11,2,1,0],[11,6,1,0,"_expoModulesCore"],[11,22,1,0],[11,25,1,0,"require"],[11,32,1,0],[11,33,1,0,"_dependencyMap"],[11,47,1,0],[12,2,2,0],[12,6,2,0,"_AudioAvailability"],[12,24,2,0],[12,27,2,0,"require"],[12,34,2,0],[12,35,2,0,"_dependencyMap"],[12,49,2,0],[13,2,3,0],[13,6,3,0,"_AV"],[13,9,3,0],[13,12,3,0,"require"],[13,19,3,0],[13,20,3,0,"_dependencyMap"],[13,34,3,0],[14,2,4,0],[14,6,4,0,"_ExponentAV"],[14,17,4,0],[14,20,4,0,"_interopRequireDefault"],[14,42,4,0],[14,43,4,0,"require"],[14,50,4,0],[14,51,4,0,"_dependencyMap"],[14,65,4,0],[15,2,4,39],[15,6,4,39,"_Sound"],[15,12,4,39],[16,2,5,0],[17,2,6,0],[18,0,7,0],[19,0,8,0],[20,0,9,0],[21,0,10,0],[22,0,11,0],[23,0,12,0],[24,0,13,0],[25,0,14,0],[26,0,15,0],[27,0,16,0],[28,0,17,0],[29,0,18,0],[30,0,19,0],[31,0,20,0],[32,0,21,0],[33,0,22,0],[34,0,23,0],[35,0,24,0],[36,0,25,0],[37,0,26,0],[38,0,27,0],[39,0,28,0],[40,2,6,0],[40,6,29,13,"Sound"],[40,11,29,18],[40,14,29,18,"exports"],[40,21,29,18],[40,22,29,18,"Sound"],[40,27,29,18],[41,4,29,18],[41,13,29,18,"Sound"],[41,19,29,18],[42,6,29,18],[42,10,29,18,"_this"],[42,15,29,18],[43,6,29,18],[43,10,29,18,"_classCallCheck2"],[43,26,29,18],[43,27,29,18,"default"],[43,34,29,18],[43,42,29,18,"Sound"],[43,47,29,18],[44,6,29,18],[44,11,30,4,"_loaded"],[44,18,30,11],[44,21,30,14],[44,26,30,19],[45,6,30,19],[45,11,31,4,"_loading"],[45,19,31,12],[45,22,31,15],[45,27,31,20],[46,6,31,20],[46,11,32,4,"_key"],[46,15,32,8],[46,18,32,11],[46,22,32,15],[47,6,32,15],[47,11,33,4,"_lastStatusUpdate"],[47,28,33,21],[47,31,33,24],[47,35,33,28],[48,6,33,28],[48,11,34,4,"_lastStatusUpdateTime"],[48,32,34,25],[48,35,34,28],[48,39,34,32],[49,6,34,32],[49,11,35,4,"_subscriptions"],[49,25,35,18],[49,28,35,21],[49,30,35,23],[50,6,35,23],[50,11,36,4,"_eventEmitter"],[50,24,36,17],[50,27,36,20],[50,31,36,24,"LegacyEventEmitter"],[50,66,36,42],[50,67,36,43,"ExponentAV"],[50,86,36,53],[50,87,36,54],[51,6,36,54],[51,11,37,4,"_coalesceStatusUpdatesInMillis"],[51,41,37,34],[51,44,37,37],[51,47,37,40],[52,6,37,40],[52,11,38,4,"_onPlaybackStatusUpdate"],[52,34,38,27],[52,37,38,30],[52,41,38,34],[53,6,38,34],[53,11,39,4,"_onMetadataUpdate"],[53,28,39,21],[53,31,39,24],[53,35,39,28],[54,6,39,28],[54,11,40,4,"_onAudioSampleReceived"],[54,33,40,26],[54,36,40,29],[54,40,40,33],[55,6,40,33],[55,11,139,4,"_internalStatusUpdateCallback"],[55,40,139,33],[55,43,139,36,"_ref"],[55,47,139,36],[55,51,139,58],[56,8,139,58],[56,12,139,39,"key"],[56,15,139,42],[56,18,139,42,"_ref"],[56,22,139,42],[56,23,139,39,"key"],[56,26,139,42],[57,10,139,44,"status"],[57,16,139,50],[57,19,139,50,"_ref"],[57,23,139,50],[57,24,139,44,"status"],[57,30,139,50],[58,8,140,8],[58,12,140,12],[58,16,140,16],[58,17,140,17,"_key"],[58,21,140,21],[58,26,140,26,"key"],[58,29,140,29],[58,31,140,31],[59,10,141,12],[59,14,141,16],[59,15,141,17,"_callOnPlaybackStatusUpdateForNewStatus"],[59,54,141,56],[59,55,141,57,"status"],[59,61,141,63],[59,62,141,64],[60,8,142,8],[61,6,143,4],[61,7,143,5],[62,6,143,5],[62,11,144,4,"_internalMetadataUpdateCallback"],[62,42,144,35],[62,45,144,38,"_ref2"],[62,50,144,38],[62,54,144,62],[63,8,144,62],[63,12,144,41,"key"],[63,15,144,44],[63,18,144,44,"_ref2"],[63,23,144,44],[63,24,144,41,"key"],[63,27,144,44],[64,10,144,46,"metadata"],[64,18,144,54],[64,21,144,54,"_ref2"],[64,26,144,54],[64,27,144,46,"metadata"],[64,35,144,54],[65,8,145,8],[65,12,145,12],[65,16,145,16],[65,17,145,17,"_key"],[65,21,145,21],[65,26,145,26,"key"],[65,29,145,29],[65,31,145,31],[66,10,146,12],[66,14,146,16],[66,15,146,17,"_onMetadataUpdate"],[66,32,146,34],[66,35,146,37,"metadata"],[66,43,146,45],[66,44,146,46],[67,8,147,8],[68,6,148,4],[68,7,148,5],[69,6,148,5],[69,11,149,4,"_internalErrorCallback"],[69,33,149,26],[69,36,149,29,"_ref3"],[69,41,149,29],[69,45,149,49],[70,8,149,49],[70,12,149,32,"key"],[70,15,149,35],[70,18,149,35,"_ref3"],[70,23,149,35],[70,24,149,32,"key"],[70,27,149,35],[71,10,149,37,"error"],[71,15,149,42],[71,18,149,42,"_ref3"],[71,23,149,42],[71,24,149,37,"error"],[71,29,149,42],[72,8,150,8],[72,12,150,12],[72,16,150,16],[72,17,150,17,"_key"],[72,21,150,21],[72,26,150,26,"key"],[72,29,150,29],[72,31,150,31],[73,10,151,12],[73,14,151,16],[73,15,151,17,"_errorCallback"],[73,29,151,31],[73,30,151,32,"error"],[73,35,151,37],[73,36,151,38],[74,8,152,8],[75,6,153,4],[75,7,153,5],[76,6,153,5],[76,11,165,4,"_errorCallback"],[76,25,165,18],[76,28,165,22,"error"],[76,33,165,27],[76,37,165,32],[77,8,166,8],[77,12,166,12],[77,13,166,13,"_clearSubscriptions"],[77,32,166,32],[77,33,166,33],[77,34,166,34],[78,8,167,8],[78,12,167,12],[78,13,167,13,"_loaded"],[78,20,167,20],[78,23,167,23],[78,28,167,28],[79,8,168,8],[79,12,168,12],[79,13,168,13,"_key"],[79,17,168,17],[79,20,168,20],[79,24,168,24],[80,8,169,8],[80,12,169,12],[80,13,169,13,"_callOnPlaybackStatusUpdateForNewStatus"],[80,52,169,52],[80,53,169,53],[80,57,169,53,"getUnloadedStatus"],[80,78,169,70],[80,80,169,71,"error"],[80,85,169,76],[80,86,169,77],[80,87,169,78],[81,6,170,4],[81,7,170,5],[82,6,171,4],[83,6,172,4],[84,6,173,4],[85,6,173,4],[85,11,174,4,"getStatusAsync"],[85,25,174,18],[85,45,174,18,"_asyncToGenerator2"],[85,63,174,18],[85,64,174,18,"default"],[85,71,174,18],[85,73,174,21],[85,86,174,33],[86,8,175,8],[86,12,175,12,"_this"],[86,17,175,16],[86,18,175,17,"_loaded"],[86,25,175,24],[86,27,175,26],[87,10,176,12],[87,17,176,19,"_this"],[87,22,176,23],[87,23,176,24,"_performOperationAndHandleStatusAsync"],[87,60,176,61],[87,61,176,62],[87,67,176,68,"ExponentAV"],[87,86,176,78],[87,87,176,79,"getStatusForSound"],[87,104,176,96],[87,105,176,97,"_this"],[87,110,176,101],[87,111,176,102,"_key"],[87,115,176,106],[87,116,176,107],[87,117,176,108],[88,8,177,8],[89,8,178,8],[89,12,178,14,"status"],[89,18,178,20],[89,21,178,23],[89,25,178,23,"getUnloadedStatus"],[89,46,178,40],[89,48,178,41],[89,49,178,42],[90,8,179,8,"_this"],[90,13,179,12],[90,14,179,13,"_callOnPlaybackStatusUpdateForNewStatus"],[90,53,179,52],[90,54,179,53,"status"],[90,60,179,59],[90,61,179,60],[91,8,180,8],[91,15,180,15,"status"],[91,21,180,21],[92,6,181,4],[92,7,181,5],[93,4,181,5],[94,4,181,5],[94,15,181,5,"_createClass2"],[94,28,181,5],[94,29,181,5,"default"],[94,36,181,5],[94,38,181,5,"Sound"],[94,43,181,5],[95,6,181,5,"key"],[95,9,181,5],[96,6,181,5,"value"],[96,11,181,5],[97,6,96,4],[98,6,97,4],[98,15,97,4,"_callOnPlaybackStatusUpdateForNewStatus"],[98,54,97,43,"_callOnPlaybackStatusUpdateForNewStatus"],[98,55,97,44,"status"],[98,61,97,50],[98,63,97,52],[99,8,98,8],[99,12,98,14,"shouldDismissBasedOnCoalescing"],[99,42,98,44],[99,45,98,47],[99,49,98,51],[99,50,98,52,"_lastStatusUpdateTime"],[99,71,98,73],[99,75,99,12,"JSON"],[99,79,99,16],[99,80,99,17,"stringify"],[99,89,99,26],[99,90,99,27,"status"],[99,96,99,33],[99,97,99,34],[99,102,99,39],[99,106,99,43],[99,107,99,44,"_lastStatusUpdate"],[99,124,99,61],[99,128,100,12,"Date"],[99,132,100,16],[99,133,100,17,"now"],[99,136,100,20],[99,137,100,21],[99,138,100,22],[99,141,100,25],[99,145,100,29],[99,146,100,30,"_lastStatusUpdateTime"],[99,167,100,51],[99,168,100,52,"getTime"],[99,175,100,59],[99,176,100,60],[99,177,100,61],[99,180,100,64],[99,184,100,68],[99,185,100,69,"_coalesceStatusUpdatesInMillis"],[99,215,100,99],[100,8,101,8],[100,12,101,12],[100,16,101,16],[100,17,101,17,"_onPlaybackStatusUpdate"],[100,40,101,40],[100,44,101,44],[100,48,101,48],[100,52,101,52],[100,53,101,53,"shouldDismissBasedOnCoalescing"],[100,83,101,83],[100,85,101,85],[101,10,102,12],[101,14,102,16],[101,15,102,17,"_onPlaybackStatusUpdate"],[101,38,102,40],[101,39,102,41,"status"],[101,45,102,47],[101,46,102,48],[102,10,103,12],[102,14,103,16],[102,15,103,17,"_lastStatusUpdateTime"],[102,36,103,38],[102,39,103,41],[102,43,103,45,"Date"],[102,47,103,49],[102,48,103,50],[102,49,103,51],[103,10,104,12],[103,14,104,16],[103,15,104,17,"_lastStatusUpdate"],[103,32,104,34],[103,35,104,37,"JSON"],[103,39,104,41],[103,40,104,42,"stringify"],[103,49,104,51],[103,50,104,52,"status"],[103,56,104,58],[103,57,104,59],[104,8,105,8],[105,6,106,4],[106,4,106,5],[107,6,106,5,"key"],[107,9,106,5],[108,6,106,5,"value"],[108,11,106,5],[109,8,106,5],[109,12,106,5,"_performOperationAndHandleStatusAsync2"],[109,50,106,5],[109,57,106,5,"_asyncToGenerator2"],[109,75,106,5],[109,76,106,5,"default"],[109,83,106,5],[109,85,107,4],[109,96,107,48,"operation"],[109,105,107,57],[109,107,107,59],[110,10,108,8],[110,14,108,8,"throwIfAudioIsDisabled"],[110,55,108,30],[110,57,108,31],[110,58,108,32],[111,10,109,8],[111,14,109,12],[111,18,109,16],[111,19,109,17,"_loaded"],[111,26,109,24],[111,28,109,26],[112,12,110,12],[112,16,110,18,"status"],[112,22,110,24],[112,31,110,33,"operation"],[112,40,110,42],[112,41,110,43],[112,42,110,44],[113,12,111,12],[113,16,111,16],[113,17,111,17,"_callOnPlaybackStatusUpdateForNewStatus"],[113,56,111,56],[113,57,111,57,"status"],[113,63,111,63],[113,64,111,64],[114,12,112,12],[114,19,112,19,"status"],[114,25,112,25],[115,10,113,8],[115,11,113,9],[115,17,114,13],[116,12,115,12],[116,18,115,18],[116,22,115,22,"Error"],[116,27,115,27],[116,28,115,28],[116,84,115,84],[116,85,115,85],[117,10,116,8],[118,8,117,4],[118,9,117,5],[119,8,117,5],[119,17,107,10,"_performOperationAndHandleStatusAsync"],[119,54,107,47,"_performOperationAndHandleStatusAsync"],[119,55,107,47,"_x"],[119,57,107,47],[120,10,107,47],[120,17,107,47,"_performOperationAndHandleStatusAsync2"],[120,55,107,47],[120,56,107,47,"apply"],[120,61,107,47],[120,68,107,47,"arguments"],[120,77,107,47],[121,8,107,47],[122,8,107,47],[122,15,107,10,"_performOperationAndHandleStatusAsync"],[122,52,107,47],[123,6,107,47],[124,4,107,47],[125,6,107,47,"key"],[125,9,107,47],[126,6,107,47,"value"],[126,11,107,47],[126,13,118,4],[126,22,118,4,"_updateAudioSampleReceivedCallback"],[126,56,118,38,"_updateAudioSampleReceivedCallback"],[126,57,118,38],[126,59,118,41],[127,8,119,8],[127,12,119,12,"globalThis"],[127,22,119,22],[127,23,119,23,"__EXAV_setOnAudioSampleReceivedCallback"],[127,62,119,62],[127,66,119,66],[127,70,119,70],[127,72,119,72],[128,10,120,12],[128,14,120,16,"Platform"],[128,39,120,24],[128,40,120,25,"OS"],[128,42,120,27],[128,47,120,32],[128,52,120,37],[128,56,120,41,"Platform"],[128,81,120,49],[128,82,120,50,"OS"],[128,84,120,52],[128,89,120,57],[128,98,120,66],[128,100,120,68],[129,12,121,16,"console"],[129,19,121,23],[129,20,121,24,"warn"],[129,24,121,28],[129,25,121,29],[129,83,121,87],[129,86,122,20],[129,200,122,134],[129,203,123,20],[129,323,123,140],[129,324,123,141],[130,12,124,16],[131,10,125,12],[131,11,125,13],[131,17,126,17],[132,12,127,16],[132,18,127,22],[132,22,127,26,"UnavailabilityError"],[132,58,127,45],[132,59,127,46],[132,68,127,55],[132,70,127,57],[132,96,127,83],[132,97,127,84],[133,10,128,12],[134,8,129,8],[135,8,130,8],[135,12,130,12],[135,16,130,16],[135,17,130,17,"_key"],[135,21,130,21],[135,25,130,25],[135,29,130,29],[135,31,130,31],[136,10,131,12],[136,16,131,18],[136,20,131,22,"Error"],[136,25,131,27],[136,26,131,28],[136,137,131,139],[136,138,131,140],[137,8,132,8],[138,8,133,8],[138,12,133,12],[138,19,133,19],[138,23,133,23],[138,24,133,24,"_key"],[138,28,133,28],[138,33,133,33],[138,41,133,41],[138,43,133,43],[139,10,134,12],[139,16,134,18],[139,20,134,22,"Error"],[139,25,134,27],[139,26,134,28],[139,104,134,106],[139,111,134,113],[139,115,134,117],[139,116,135,17,"_key"],[139,120,135,21],[139,142,135,43],[139,143,135,44],[140,8,136,8],[141,8,137,8,"globalThis"],[141,18,137,18],[141,19,137,19,"__EXAV_setOnAudioSampleReceivedCallback"],[141,58,137,58],[141,59,137,59],[141,63,137,63],[141,64,137,64,"_key"],[141,68,137,68],[141,70,137,70],[141,74,137,74],[141,75,137,75,"_onAudioSampleReceived"],[141,97,137,97],[141,98,137,98],[142,6,138,4],[143,4,138,5],[144,6,138,5,"key"],[144,9,138,5],[145,6,138,5,"value"],[145,11,138,5],[146,6,154,4],[147,6,155,4],[147,15,155,4,"_subscribeToNativeEvents"],[147,39,155,28,"_subscribeToNativeEvents"],[147,40,155,28],[147,42,155,31],[148,8,156,8],[148,12,156,12],[148,16,156,16],[148,17,156,17,"_loaded"],[148,24,156,24],[148,26,156,26],[149,10,157,12],[149,14,157,16],[149,15,157,17,"_subscriptions"],[149,29,157,31],[149,30,157,32,"push"],[149,34,157,36],[149,35,157,37],[149,39,157,41],[149,40,157,42,"_eventEmitter"],[149,53,157,55],[149,54,157,56,"addListener"],[149,65,157,67],[149,66,157,68],[149,91,157,93],[149,93,157,95],[149,97,157,99],[149,98,157,100,"_internalStatusUpdateCallback"],[149,127,157,129],[149,128,157,130],[149,130,157,132],[149,134,157,136],[149,135,157,137,"_eventEmitter"],[149,148,157,150],[149,149,157,151,"addListener"],[149,160,157,162],[149,161,157,163],[149,180,157,182],[149,182,157,184],[149,186,157,188],[149,187,157,189,"_internalMetadataUpdateCallback"],[149,218,157,220],[149,219,157,221],[149,220,157,222],[150,10,158,12],[150,14,158,16],[150,15,158,17,"_subscriptions"],[150,29,158,31],[150,30,158,32,"push"],[150,34,158,36],[150,35,158,37],[150,39,158,41],[150,40,158,42,"_eventEmitter"],[150,53,158,55],[150,54,158,56,"addListener"],[150,65,158,67],[150,66,158,68],[150,86,158,88],[150,88,158,90],[150,92,158,94],[150,93,158,95,"_internalErrorCallback"],[150,115,158,117],[150,116,158,118],[150,117,158,119],[151,8,159,8],[152,6,160,4],[153,4,160,5],[154,6,160,5,"key"],[154,9,160,5],[155,6,160,5,"value"],[155,11,160,5],[155,13,161,4],[155,22,161,4,"_clearSubscriptions"],[155,41,161,23,"_clearSubscriptions"],[155,42,161,23],[155,44,161,26],[156,8,162,8],[156,12,162,12],[156,13,162,13,"_subscriptions"],[156,27,162,27],[156,28,162,28,"forEach"],[156,35,162,35],[156,36,162,37,"e"],[156,37,162,38],[156,41,162,43,"e"],[156,42,162,44],[156,43,162,45,"remove"],[156,49,162,51],[156,50,162,52],[156,51,162,53],[156,52,162,54],[157,8,163,8],[157,12,163,12],[157,13,163,13,"_subscriptions"],[157,27,163,27],[157,30,163,30],[157,32,163,32],[158,6,164,4],[159,4,164,5],[160,6,164,5,"key"],[160,9,164,5],[161,6,164,5,"value"],[161,11,164,5],[162,6,182,4],[163,0,183,0],[164,0,184,0],[165,0,185,0],[166,0,186,0],[167,0,187,0],[168,0,188,0],[169,0,189,0],[170,0,190,0],[171,0,191,0],[172,0,192,0],[173,0,193,0],[174,6,194,4],[174,15,194,4,"setOnPlaybackStatusUpdate"],[174,40,194,29,"setOnPlaybackStatusUpdate"],[174,41,194,30,"onPlaybackStatusUpdate"],[174,63,194,52],[174,65,194,54],[175,8,195,8],[175,12,195,12],[175,13,195,13,"_onPlaybackStatusUpdate"],[175,36,195,36],[175,39,195,39,"onPlaybackStatusUpdate"],[175,61,195,61],[176,8,196,8],[176,12,196,12],[176,13,196,13,"getStatusAsync"],[176,27,196,27],[176,28,196,28],[176,29,196,29],[177,6,197,4],[178,6,198,4],[179,0,199,0],[180,0,200,0],[181,0,201,0],[182,0,202,0],[183,4,198,4],[184,6,198,4,"key"],[184,9,198,4],[185,6,198,4,"value"],[185,11,198,4],[185,13,203,4],[185,22,203,4,"setOnMetadataUpdate"],[185,41,203,23,"setOnMetadataUpdate"],[185,42,203,24,"onMetadataUpdate"],[185,58,203,40],[185,60,203,42],[186,8,204,8],[186,12,204,12],[186,13,204,13,"_onMetadataUpdate"],[186,30,204,30],[186,33,204,33,"onMetadataUpdate"],[186,49,204,49],[187,6,205,4],[188,6,206,4],[189,0,207,0],[190,0,208,0],[191,0,209,0],[192,4,206,4],[193,6,206,4,"key"],[193,9,206,4],[194,6,206,4,"value"],[194,11,206,4],[194,13,210,4],[194,22,210,4,"setOnAudioSampleReceived"],[194,46,210,28,"setOnAudioSampleReceived"],[194,47,210,29,"callback"],[194,55,210,37],[194,57,210,39],[195,8,211,8],[195,12,211,12],[195,13,211,13,"_onAudioSampleReceived"],[195,35,211,35],[195,38,211,38,"callback"],[195,46,211,46],[196,8,212,8],[196,12,212,12],[196,16,212,16],[196,17,212,17,"_key"],[196,21,212,21],[196,25,212,25],[196,29,212,29],[196,31,212,31],[197,10,213,12],[197,14,213,16],[197,15,213,17,"_updateAudioSampleReceivedCallback"],[197,49,213,51],[197,50,213,52],[197,51,213,53],[198,8,214,8],[199,6,215,4],[200,6,216,4],[201,4,216,4],[202,6,216,4,"key"],[202,9,216,4],[203,6,216,4,"value"],[203,11,216,4],[204,8,216,4],[204,12,216,4,"_loadAsync"],[204,22,216,4],[204,29,216,4,"_asyncToGenerator2"],[204,47,216,4],[204,48,216,4,"default"],[204,55,216,4],[204,57,217,4],[204,68,217,20,"source"],[204,74,217,26],[204,76,217,70],[205,10,217,70],[205,14,217,28,"initialStatus"],[205,27,217,41],[205,30,217,41,"arguments"],[205,39,217,41],[205,40,217,41,"length"],[205,46,217,41],[205,54,217,41,"arguments"],[205,63,217,41],[205,71,217,41,"undefined"],[205,80,217,41],[205,83,217,41,"arguments"],[205,92,217,41],[205,98,217,44],[205,99,217,45],[205,100,217,46],[206,10,217,46],[206,14,217,48,"downloadFirst"],[206,27,217,61],[206,30,217,61,"arguments"],[206,39,217,61],[206,40,217,61,"length"],[206,46,217,61],[206,54,217,61,"arguments"],[206,63,217,61],[206,71,217,61,"undefined"],[206,80,217,61],[206,83,217,61,"arguments"],[206,92,217,61],[206,98,217,64],[206,102,217,68],[207,10,218,8],[207,14,218,8,"throwIfAudioIsDisabled"],[207,55,218,30],[207,57,218,31],[207,58,218,32],[208,10,219,8],[208,14,219,12],[208,18,219,16],[208,19,219,17,"_loading"],[208,27,219,25],[208,29,219,27],[209,12,220,12],[209,18,220,18],[209,22,220,22,"Error"],[209,27,220,27],[209,28,220,28],[209,59,220,59],[209,60,220,60],[210,10,221,8],[211,10,222,8],[211,14,222,12],[211,15,222,13],[211,19,222,17],[211,20,222,18,"_loaded"],[211,27,222,25],[211,29,222,27],[212,12,223,12],[212,16,223,16],[212,17,223,17,"_loading"],[212,25,223,25],[212,28,223,28],[212,32,223,32],[213,12,224,12],[213,16,224,12,"_yield$getNativeSourc"],[213,37,224,12],[213,46,224,62],[213,50,224,62,"getNativeSourceAndFullInitialStatusForLoadAsync"],[213,101,224,109],[213,103,224,110,"source"],[213,109,224,116],[213,111,224,118,"initialStatus"],[213,124,224,131],[213,126,224,133,"downloadFirst"],[213,139,224,146],[213,140,224,147],[214,14,224,20,"nativeSource"],[214,26,224,32],[214,29,224,32,"_yield$getNativeSourc"],[214,50,224,32],[214,51,224,20,"nativeSource"],[214,63,224,32],[215,14,224,34,"fullInitialStatus"],[215,31,224,51],[215,34,224,51,"_yield$getNativeSourc"],[215,55,224,51],[215,56,224,34,"fullInitialStatus"],[215,73,224,51],[216,12,225,12],[217,12,226,12],[217,19,226,19],[217,23,226,23,"Promise"],[217,30,226,30],[217,31,226,31],[217,32,226,32,"resolve"],[217,39,226,39],[217,41,226,41,"reject"],[217,47,226,47],[217,52,226,52],[218,14,227,16],[218,18,227,22,"loadSuccess"],[218,29,227,33],[218,32,227,37,"result"],[218,38,227,43],[218,42,227,48],[219,16,228,20],[219,20,228,20,"_result"],[219,27,228,20],[219,34,228,20,"_slicedToArray2"],[219,49,228,20],[219,50,228,20,"default"],[219,57,228,20],[219,59,228,42,"result"],[219,65,228,48],[220,18,228,27,"key"],[220,21,228,30],[220,24,228,30,"_result"],[220,31,228,30],[221,18,228,32,"status"],[221,24,228,38],[221,27,228,38,"_result"],[221,34,228,38],[222,16,229,20],[222,20,229,24],[222,21,229,25,"_key"],[222,25,229,29],[222,28,229,32,"key"],[222,31,229,35],[223,16,230,20],[223,20,230,24],[223,21,230,25,"_loaded"],[223,28,230,32],[223,31,230,35],[223,35,230,39],[224,16,231,20],[224,20,231,24],[224,21,231,25,"_loading"],[224,29,231,33],[224,32,231,36],[224,37,231,41],[225,16,232,20],[225,20,232,24],[225,21,232,25,"_subscribeToNativeEvents"],[225,45,232,49],[225,46,232,50],[225,47,232,51],[226,16,233,20],[226,20,233,24],[226,21,233,25,"_callOnPlaybackStatusUpdateForNewStatus"],[226,60,233,64],[226,61,233,65,"status"],[226,67,233,71],[226,68,233,72],[227,16,234,20,"resolve"],[227,23,234,27],[227,24,234,28,"status"],[227,30,234,34],[227,31,234,35],[228,14,235,16],[228,15,235,17],[229,14,236,16],[229,18,236,22,"loadError"],[229,27,236,31],[229,30,236,35,"error"],[229,35,236,40],[229,39,236,45],[230,16,237,20],[230,20,237,24],[230,21,237,25,"_loading"],[230,29,237,33],[230,32,237,36],[230,37,237,41],[231,16,238,20,"reject"],[231,22,238,26],[231,23,238,27,"error"],[231,28,238,32],[231,29,238,33],[232,14,239,16],[232,15,239,17],[233,14,240,16,"ExponentAV"],[233,33,240,26],[233,34,240,27,"loadForSound"],[233,46,240,39],[233,47,240,40,"nativeSource"],[233,59,240,52],[233,61,240,54,"fullInitialStatus"],[233,78,240,71],[233,79,240,72],[233,80,240,73,"then"],[233,84,240,77],[233,85,240,78,"loadSuccess"],[233,96,240,89],[233,97,240,90],[233,98,240,91,"catch"],[233,103,240,96],[233,104,240,97,"loadError"],[233,113,240,106],[233,114,240,107],[234,12,241,12],[234,13,241,13],[234,14,241,14],[235,10,242,8],[235,11,242,9],[235,17,243,13],[236,12,244,12],[236,18,244,18],[236,22,244,22,"Error"],[236,27,244,27],[236,28,244,28],[236,58,244,58],[236,59,244,59],[237,10,245,8],[238,8,246,4],[238,9,246,5],[239,8,246,5],[239,17,217,10,"loadAsync"],[239,26,217,19,"loadAsync"],[239,27,217,19,"_x2"],[239,30,217,19],[240,10,217,19],[240,17,217,19,"_loadAsync"],[240,27,217,19],[240,28,217,19,"apply"],[240,33,217,19],[240,40,217,19,"arguments"],[240,49,217,19],[241,8,217,19],[242,8,217,19],[242,15,217,10,"loadAsync"],[242,24,217,19],[243,6,217,19],[244,4,217,19],[245,6,217,19,"key"],[245,9,217,19],[246,6,217,19,"value"],[246,11,217,19],[247,8,217,19],[247,12,217,19,"_unloadAsync"],[247,24,217,19],[247,31,217,19,"_asyncToGenerator2"],[247,49,217,19],[247,50,217,19,"default"],[247,57,217,19],[247,59,247,4],[247,72,247,24],[248,10,248,8],[248,14,248,12],[248,18,248,16],[248,19,248,17,"_loaded"],[248,26,248,24],[248,28,248,26],[249,12,249,12],[249,16,249,16],[249,17,249,17,"_loaded"],[249,24,249,24],[249,27,249,27],[249,32,249,32],[250,12,250,12],[250,16,250,18,"key"],[250,19,250,21],[250,22,250,24],[250,26,250,28],[250,27,250,29,"_key"],[250,31,250,33],[251,12,251,12],[251,16,251,16],[251,17,251,17,"_key"],[251,21,251,21],[251,24,251,24],[251,28,251,28],[252,12,252,12],[252,16,252,18,"status"],[252,22,252,24],[252,31,252,33,"ExponentAV"],[252,50,252,43],[252,51,252,44,"unloadForSound"],[252,65,252,58],[252,66,252,59,"key"],[252,69,252,62],[252,70,252,63],[253,12,253,12],[253,16,253,16],[253,17,253,17,"_callOnPlaybackStatusUpdateForNewStatus"],[253,56,253,56],[253,57,253,57,"status"],[253,63,253,63],[253,64,253,64],[254,12,254,12],[254,16,254,16],[254,17,254,17,"_clearSubscriptions"],[254,36,254,36],[254,37,254,37],[254,38,254,38],[255,12,255,12],[255,19,255,19,"status"],[255,25,255,25],[256,10,256,8],[256,11,256,9],[256,17,257,13],[257,12,258,12],[257,19,258,19],[257,23,258,23],[257,24,258,24,"getStatusAsync"],[257,38,258,38],[257,39,258,39],[257,40,258,40],[257,41,258,41],[257,42,258,42],[258,10,259,8],[259,8,260,4],[259,9,260,5],[260,8,260,5],[260,17,247,10,"unloadAsync"],[260,28,247,21,"unloadAsync"],[260,29,247,21],[261,10,247,21],[261,17,247,21,"_unloadAsync"],[261,29,247,21],[261,30,247,21,"apply"],[261,35,247,21],[261,42,247,21,"arguments"],[261,51,247,21],[262,8,247,21],[263,8,247,21],[263,15,247,10,"unloadAsync"],[263,26,247,21],[264,6,247,21],[264,10,261,4],[265,4,261,4],[266,6,261,4,"key"],[266,9,261,4],[267,6,261,4,"value"],[267,11,261,4],[268,8,261,4],[268,12,261,4,"_setStatusAsync"],[268,27,261,4],[268,34,261,4,"_asyncToGenerator2"],[268,52,261,4],[268,53,261,4,"default"],[268,60,261,4],[268,62,262,4],[268,73,262,25,"status"],[268,79,262,31],[268,81,262,33],[269,10,263,8],[269,14,263,8,"assertStatusValuesInBounds"],[269,44,263,34],[269,46,263,35,"status"],[269,52,263,41],[269,53,263,42],[270,10,264,8],[270,17,264,15],[270,21,264,19],[270,22,264,20,"_performOperationAndHandleStatusAsync"],[270,59,264,57],[270,60,264,58],[270,66,264,64,"ExponentAV"],[270,85,264,74],[270,86,264,75,"setStatusForSound"],[270,103,264,92],[270,104,264,93],[270,108,264,97],[270,109,264,98,"_key"],[270,113,264,102],[270,115,264,104,"status"],[270,121,264,110],[270,122,264,111],[270,123,264,112],[271,8,265,4],[271,9,265,5],[272,8,265,5],[272,17,262,10,"setStatusAsync"],[272,31,262,24,"setStatusAsync"],[272,32,262,24,"_x3"],[272,35,262,24],[273,10,262,24],[273,17,262,24,"_setStatusAsync"],[273,32,262,24],[273,33,262,24,"apply"],[273,38,262,24],[273,45,262,24,"arguments"],[273,54,262,24],[274,8,262,24],[275,8,262,24],[275,15,262,10,"setStatusAsync"],[275,29,262,24],[276,6,262,24],[277,4,262,24],[278,6,262,24,"key"],[278,9,262,24],[279,6,262,24,"value"],[279,11,262,24],[280,8,262,24],[280,12,262,24,"_replayAsync"],[280,24,262,24],[280,31,262,24,"_asyncToGenerator2"],[280,49,262,24],[280,50,262,24,"default"],[280,57,262,24],[280,59,266,4],[280,72,266,35],[281,10,266,35],[281,14,266,22,"status"],[281,20,266,28],[281,23,266,28,"arguments"],[281,32,266,28],[281,33,266,28,"length"],[281,39,266,28],[281,47,266,28,"arguments"],[281,56,266,28],[281,64,266,28,"undefined"],[281,73,266,28],[281,76,266,28,"arguments"],[281,85,266,28],[281,91,266,31],[281,92,266,32],[281,93,266,33],[282,10,267,8],[282,14,267,12,"status"],[282,20,267,18],[282,21,267,19,"positionMillis"],[282,35,267,33],[282,39,267,37,"status"],[282,45,267,43],[282,46,267,44,"positionMillis"],[282,60,267,58],[282,65,267,63],[282,66,267,64],[282,68,267,66],[283,12,268,12],[283,18,268,18],[283,22,268,22,"Error"],[283,27,268,27],[283,28,268,28],[283,74,268,74],[283,75,268,75],[284,10,269,8],[285,10,270,8],[285,17,270,15],[285,21,270,19],[285,22,270,20,"_performOperationAndHandleStatusAsync"],[285,59,270,57],[285,60,270,58],[285,66,270,64,"ExponentAV"],[285,85,270,74],[285,86,270,75,"replaySound"],[285,97,270,86],[285,98,270,87],[285,102,270,91],[285,103,270,92,"_key"],[285,107,270,96],[285,109,270,98],[286,12,271,12],[286,15,271,15,"status"],[286,21,271,21],[287,12,272,12,"positionMillis"],[287,26,272,26],[287,28,272,28],[287,29,272,29],[288,12,273,12,"shouldPlay"],[288,22,273,22],[288,24,273,24],[289,10,274,8],[289,11,274,9],[289,12,274,10],[289,13,274,11],[290,8,275,4],[290,9,275,5],[291,8,275,5],[291,17,266,10,"replayAsync"],[291,28,266,21,"replayAsync"],[291,29,266,21],[292,10,266,21],[292,17,266,21,"_replayAsync"],[292,29,266,21],[292,30,266,21,"apply"],[292,35,266,21],[292,42,266,21,"arguments"],[292,51,266,21],[293,8,266,21],[294,8,266,21],[294,15,266,10,"replayAsync"],[294,26,266,21],[295,6,266,21],[295,10,276,4],[296,4,276,4],[297,2,276,4],[298,2,276,4,"_Sound"],[298,8,276,4],[298,11,29,13,"Sound"],[298,16,29,18],[299,2,41,4],[300,2,29,13,"Sound"],[300,7,29,18],[300,8,42,11,"create"],[300,14,42,17],[301,4,42,17],[301,8,42,17,"_ref5"],[301,13,42,17],[301,20,42,17,"_asyncToGenerator2"],[301,38,42,17],[301,39,42,17,"default"],[301,46,42,17],[301,48,42,20],[301,59,42,27,"source"],[301,65,42,33],[301,67,42,111],[302,6,42,111],[302,10,42,35,"initialStatus"],[302,23,42,48],[302,26,42,48,"arguments"],[302,35,42,48],[302,36,42,48,"length"],[302,42,42,48],[302,50,42,48,"arguments"],[302,59,42,48],[302,67,42,48,"undefined"],[302,76,42,48],[302,79,42,48,"arguments"],[302,88,42,48],[302,94,42,51],[302,95,42,52],[302,96,42,53],[303,6,42,53],[303,10,42,55,"onPlaybackStatusUpdate"],[303,32,42,77],[303,35,42,77,"arguments"],[303,44,42,77],[303,45,42,77,"length"],[303,51,42,77],[303,59,42,77,"arguments"],[303,68,42,77],[303,76,42,77,"undefined"],[303,85,42,77],[303,88,42,77,"arguments"],[303,97,42,77],[303,103,42,80],[303,107,42,84],[304,6,42,84],[304,10,42,86,"downloadFirst"],[304,23,42,99],[304,26,42,99,"arguments"],[304,35,42,99],[304,36,42,99,"length"],[304,42,42,99],[304,50,42,99,"arguments"],[304,59,42,99],[304,67,42,99,"undefined"],[304,76,42,99],[304,79,42,99,"arguments"],[304,88,42,99],[304,94,42,102],[304,98,42,106],[305,6,43,8,"console"],[305,13,43,15],[305,14,43,16,"warn"],[305,18,43,20],[305,19,43,21],[305,126,43,128],[305,127,43,129],[306,6,44,8],[306,13,44,15,"Sound"],[306,19,44,20],[306,20,44,21,"createAsync"],[306,31,44,32],[306,32,44,33,"source"],[306,38,44,39],[306,40,44,41,"initialStatus"],[306,53,44,54],[306,55,44,56,"onPlaybackStatusUpdate"],[306,77,44,78],[306,79,44,80,"downloadFirst"],[306,92,44,93],[306,93,44,94],[307,4,45,4],[307,5,45,5],[308,4,45,5],[308,21,45,5,"_x4"],[308,24,45,5],[309,6,45,5],[309,13,45,5,"_ref5"],[309,18,45,5],[309,19,45,5,"apply"],[309,24,45,5],[309,31,45,5,"arguments"],[309,40,45,5],[310,4,45,5],[311,2,45,5],[312,2,46,4],[313,0,47,0],[314,0,48,0],[315,0,49,0],[316,0,50,0],[317,0,51,0],[318,0,52,0],[319,0,53,0],[320,0,54,0],[321,0,55,0],[322,0,56,0],[323,0,57,0],[324,0,58,0],[325,0,59,0],[326,0,60,0],[327,0,61,0],[328,0,62,0],[329,0,63,0],[330,0,64,0],[331,0,65,0],[332,0,66,0],[333,0,67,0],[334,0,68,0],[335,0,69,0],[336,0,70,0],[337,0,71,0],[338,0,72,0],[339,0,73,0],[340,0,74,0],[341,0,75,0],[342,0,76,0],[343,0,77,0],[344,0,78,0],[345,0,79,0],[346,0,80,0],[347,0,81,0],[348,0,82,0],[349,0,83,0],[350,0,84,0],[351,0,85,0],[352,0,86,0],[353,0,87,0],[354,0,88,0],[355,0,89,0],[356,2,29,13,"Sound"],[356,7,29,18],[356,8,90,11,"createAsync"],[356,19,90,22],[357,4,90,22],[357,8,90,22,"_ref6"],[357,13,90,22],[357,20,90,22,"_asyncToGenerator2"],[357,38,90,22],[357,39,90,22,"default"],[357,46,90,22],[357,48,90,25],[357,59,90,32,"source"],[357,65,90,38],[357,67,90,116],[358,6,90,116],[358,10,90,40,"initialStatus"],[358,23,90,53],[358,26,90,53,"arguments"],[358,35,90,53],[358,36,90,53,"length"],[358,42,90,53],[358,50,90,53,"arguments"],[358,59,90,53],[358,67,90,53,"undefined"],[358,76,90,53],[358,79,90,53,"arguments"],[358,88,90,53],[358,94,90,56],[358,95,90,57],[358,96,90,58],[359,6,90,58],[359,10,90,60,"onPlaybackStatusUpdate"],[359,32,90,82],[359,35,90,82,"arguments"],[359,44,90,82],[359,45,90,82,"length"],[359,51,90,82],[359,59,90,82,"arguments"],[359,68,90,82],[359,76,90,82,"undefined"],[359,85,90,82],[359,88,90,82,"arguments"],[359,97,90,82],[359,103,90,85],[359,107,90,89],[360,6,90,89],[360,10,90,91,"downloadFirst"],[360,23,90,104],[360,26,90,104,"arguments"],[360,35,90,104],[360,36,90,104,"length"],[360,42,90,104],[360,50,90,104,"arguments"],[360,59,90,104],[360,67,90,104,"undefined"],[360,76,90,104],[360,79,90,104,"arguments"],[360,88,90,104],[360,94,90,107],[360,98,90,111],[361,6,91,8],[361,10,91,14,"sound"],[361,15,91,19],[361,18,91,22],[361,22,91,26,"Sound"],[361,28,91,31],[361,29,91,32],[361,30,91,33],[362,6,92,8,"sound"],[362,11,92,13],[362,12,92,14,"setOnPlaybackStatusUpdate"],[362,37,92,39],[362,38,92,40,"onPlaybackStatusUpdate"],[362,60,92,62],[362,61,92,63],[363,6,93,8],[363,10,93,14,"status"],[363,16,93,20],[363,25,93,29,"sound"],[363,30,93,34],[363,31,93,35,"loadAsync"],[363,40,93,44],[363,41,93,45,"source"],[363,47,93,51],[363,49,93,53,"initialStatus"],[363,62,93,66],[363,64,93,68,"downloadFirst"],[363,77,93,81],[363,78,93,82],[364,6,94,8],[364,13,94,15],[365,8,94,17,"sound"],[365,13,94,22],[366,8,94,24,"status"],[367,6,94,31],[367,7,94,32],[368,4,95,4],[368,5,95,5],[369,4,95,5],[369,21,95,5,"_x5"],[369,24,95,5],[370,6,95,5],[370,13,95,5,"_ref6"],[370,18,95,5],[370,19,95,5,"apply"],[370,24,95,5],[370,31,95,5,"arguments"],[370,40,95,5],[371,4,95,5],[372,2,95,5],[373,2,288,0,"Object"],[373,8,288,6],[373,9,288,7,"assign"],[373,15,288,13],[373,16,288,14,"Sound"],[373,21,288,19],[373,22,288,20,"prototype"],[373,31,288,29],[373,33,288,31,"PlaybackMixin"],[373,50,288,44],[373,51,288,45],[374,0,288,46],[374,3]],"functionMap":{"names":["<global>","Sound","create","createAsync","_callOnPlaybackStatusUpdateForNewStatus","_performOperationAndHandleStatusAsync","_updateAudioSampleReceivedCallback","_internalStatusUpdateCallback","_internalMetadataUpdateCallback","_internalErrorCallback","_subscribeToNativeEvents","_clearSubscriptions","_subscriptions.forEach$argument_0","_errorCallback","getStatusAsync","_performOperationAndHandleStatusAsync$argument_0","setOnPlaybackStatusUpdate","setOnMetadataUpdate","setOnAudioSampleReceived","loadAsync","Promise$argument_0","loadSuccess","loadError","unloadAsync","setStatusAsync","replayAsync"],"mappings":"AAA;OC4B;oBCa;KDG;yBE6C;KFK;IGE;KHS;IIC;KJU;IKC;KLoB;oCMC;KNI;sCOC;KPI;6BQC;KRI;ISE;KTK;IUC;oCCC,iBD;KVE;qBYC;KZK;qBaI;8DCE,6CD;KbK;Iea;KfG;IgBM;KhBE;IiBK;KjBK;IkBE;+BCS;oCCC;iBDQ;kCEC;iBFG;aDE;KlBK;IsBC;KtBa;IuBE;0DTE,qDS;KvBC;IwBC;0DVI;UUI;KxBC;CDY"}},"type":"js/module"}]}