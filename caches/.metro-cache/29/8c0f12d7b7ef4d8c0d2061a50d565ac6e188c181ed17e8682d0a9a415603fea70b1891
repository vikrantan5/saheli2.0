{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"tslib","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":34,"index":34}}],"key":"8R25577gwLd3n1hFG9VYnRLV9eE=","exportNames":["*"]}},{"name":"../lib/errors","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":35},"end":{"line":2,"column":82,"index":117}}],"key":"tudpaQjH3OjVUtpmjZhVLT9U2eg=","exportNames":["*"]}},{"name":"../lib/fetch","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":118},"end":{"line":3,"column":60,"index":178}}],"key":"/wMuRavEihVn+ROyUD1wSDV6K9s=","exportNames":["*"]}},{"name":"../lib/helpers","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":179},"end":{"line":4,"column":64,"index":243}}],"key":"MBha6f1BCecZ/poT97RGOQKH7kw=","exportNames":["*"]}},{"name":"./BlobDownloadBuilder","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":244},"end":{"line":5,"column":56,"index":300}}],"key":"FL3uovgOrEodM/aGLqdgupLXHQ4=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  var _tslib = require(_dependencyMap[1], \"tslib\");\n  var _errors = require(_dependencyMap[2], \"../lib/errors\");\n  var _fetch = require(_dependencyMap[3], \"../lib/fetch\");\n  var _helpers = require(_dependencyMap[4], \"../lib/helpers\");\n  var _BlobDownloadBuilder = _interopRequireDefault(require(_dependencyMap[5], \"./BlobDownloadBuilder\"));\n  const DEFAULT_SEARCH_OPTIONS = {\n    limit: 100,\n    offset: 0,\n    sortBy: {\n      column: 'name',\n      order: 'asc'\n    }\n  };\n  const DEFAULT_FILE_OPTIONS = {\n    cacheControl: '3600',\n    contentType: 'text/plain;charset=UTF-8',\n    upsert: false\n  };\n  class StorageFileApi {\n    constructor(url, headers = {}, bucketId, fetch) {\n      this.shouldThrowOnError = false;\n      this.url = url;\n      this.headers = headers;\n      this.bucketId = bucketId;\n      this.fetch = (0, _helpers.resolveFetch)(fetch);\n    }\n    /**\n     * Enable throwing errors instead of returning them.\n     */\n    throwOnError() {\n      this.shouldThrowOnError = true;\n      return this;\n    }\n    /**\n     * Uploads a file to an existing bucket or replaces an existing file at the specified path with a new one.\n     *\n     * @param method HTTP method.\n     * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n     * @param fileBody The body of the file to be stored in the bucket.\n     */\n    uploadOrUpdate(method, path, fileBody, fileOptions) {\n      return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {\n        try {\n          let body;\n          const options = Object.assign(Object.assign({}, DEFAULT_FILE_OPTIONS), fileOptions);\n          let headers = Object.assign(Object.assign({}, this.headers), method === 'POST' && {\n            'x-upsert': String(options.upsert)\n          });\n          const metadata = options.metadata;\n          if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n            body = new FormData();\n            body.append('cacheControl', options.cacheControl);\n            if (metadata) {\n              body.append('metadata', this.encodeMetadata(metadata));\n            }\n            body.append('', fileBody);\n          } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n            body = fileBody;\n            body.append('cacheControl', options.cacheControl);\n            if (metadata) {\n              body.append('metadata', this.encodeMetadata(metadata));\n            }\n          } else {\n            body = fileBody;\n            headers['cache-control'] = `max-age=${options.cacheControl}`;\n            headers['content-type'] = options.contentType;\n            if (metadata) {\n              headers['x-metadata'] = this.toBase64(this.encodeMetadata(metadata));\n            }\n          }\n          if (fileOptions === null || fileOptions === void 0 ? void 0 : fileOptions.headers) {\n            headers = Object.assign(Object.assign({}, headers), fileOptions.headers);\n          }\n          const cleanPath = this._removeEmptyFolders(path);\n          const _path = this._getFinalPath(cleanPath);\n          const data = yield (method == 'PUT' ? _fetch.put : _fetch.post)(this.fetch, `${this.url}/object/${_path}`, body, Object.assign({\n            headers\n          }, (options === null || options === void 0 ? void 0 : options.duplex) ? {\n            duplex: options.duplex\n          } : {}));\n          return {\n            data: {\n              path: cleanPath,\n              id: data.Id,\n              fullPath: data.Key\n            },\n            error: null\n          };\n        } catch (error) {\n          if (this.shouldThrowOnError) {\n            throw error;\n          }\n          if ((0, _errors.isStorageError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * Uploads a file to an existing bucket.\n     *\n     * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n     * @param fileBody The body of the file to be stored in the bucket.\n     */\n    upload(path, fileBody, fileOptions) {\n      return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {\n        return this.uploadOrUpdate('POST', path, fileBody, fileOptions);\n      });\n    }\n    /**\n     * Upload a file with a token generated from `createSignedUploadUrl`.\n     * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n     * @param token The token generated from `createSignedUploadUrl`\n     * @param fileBody The body of the file to be stored in the bucket.\n     */\n    uploadToSignedUrl(path, token, fileBody, fileOptions) {\n      return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {\n        const cleanPath = this._removeEmptyFolders(path);\n        const _path = this._getFinalPath(cleanPath);\n        const url = new URL(this.url + `/object/upload/sign/${_path}`);\n        url.searchParams.set('token', token);\n        try {\n          let body;\n          const options = Object.assign({\n            upsert: DEFAULT_FILE_OPTIONS.upsert\n          }, fileOptions);\n          const headers = Object.assign(Object.assign({}, this.headers), {\n            'x-upsert': String(options.upsert)\n          });\n          if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n            body = new FormData();\n            body.append('cacheControl', options.cacheControl);\n            body.append('', fileBody);\n          } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n            body = fileBody;\n            body.append('cacheControl', options.cacheControl);\n          } else {\n            body = fileBody;\n            headers['cache-control'] = `max-age=${options.cacheControl}`;\n            headers['content-type'] = options.contentType;\n          }\n          const data = yield (0, _fetch.put)(this.fetch, url.toString(), body, {\n            headers\n          });\n          return {\n            data: {\n              path: cleanPath,\n              fullPath: data.Key\n            },\n            error: null\n          };\n        } catch (error) {\n          if (this.shouldThrowOnError) {\n            throw error;\n          }\n          if ((0, _errors.isStorageError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * Creates a signed upload URL.\n     * Signed upload URLs can be used to upload files to the bucket without further authentication.\n     * They are valid for 2 hours.\n     * @param path The file path, including the current file name. For example `folder/image.png`.\n     * @param options.upsert If set to true, allows the file to be overwritten if it already exists.\n     */\n    createSignedUploadUrl(path, options) {\n      return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {\n        try {\n          let _path = this._getFinalPath(path);\n          const headers = Object.assign({}, this.headers);\n          if (options === null || options === void 0 ? void 0 : options.upsert) {\n            headers['x-upsert'] = 'true';\n          }\n          const data = yield (0, _fetch.post)(this.fetch, `${this.url}/object/upload/sign/${_path}`, {}, {\n            headers\n          });\n          const url = new URL(this.url + data.url);\n          const token = url.searchParams.get('token');\n          if (!token) {\n            throw new _errors.StorageError('No token returned by API');\n          }\n          return {\n            data: {\n              signedUrl: url.toString(),\n              path,\n              token\n            },\n            error: null\n          };\n        } catch (error) {\n          if (this.shouldThrowOnError) {\n            throw error;\n          }\n          if ((0, _errors.isStorageError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * Replaces an existing file at the specified path with a new one.\n     *\n     * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to update.\n     * @param fileBody The body of the file to be stored in the bucket.\n     */\n    update(path, fileBody, fileOptions) {\n      return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {\n        return this.uploadOrUpdate('PUT', path, fileBody, fileOptions);\n      });\n    }\n    /**\n     * Moves an existing file to a new path in the same bucket.\n     *\n     * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n     * @param toPath The new file path, including the new file name. For example `folder/image-new.png`.\n     * @param options The destination options.\n     */\n    move(fromPath, toPath, options) {\n      return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {\n        try {\n          const data = yield (0, _fetch.post)(this.fetch, `${this.url}/object/move`, {\n            bucketId: this.bucketId,\n            sourceKey: fromPath,\n            destinationKey: toPath,\n            destinationBucket: options === null || options === void 0 ? void 0 : options.destinationBucket\n          }, {\n            headers: this.headers\n          });\n          return {\n            data,\n            error: null\n          };\n        } catch (error) {\n          if (this.shouldThrowOnError) {\n            throw error;\n          }\n          if ((0, _errors.isStorageError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * Copies an existing file to a new path in the same bucket.\n     *\n     * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n     * @param toPath The new file path, including the new file name. For example `folder/image-copy.png`.\n     * @param options The destination options.\n     */\n    copy(fromPath, toPath, options) {\n      return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {\n        try {\n          const data = yield (0, _fetch.post)(this.fetch, `${this.url}/object/copy`, {\n            bucketId: this.bucketId,\n            sourceKey: fromPath,\n            destinationKey: toPath,\n            destinationBucket: options === null || options === void 0 ? void 0 : options.destinationBucket\n          }, {\n            headers: this.headers\n          });\n          return {\n            data: {\n              path: data.Key\n            },\n            error: null\n          };\n        } catch (error) {\n          if (this.shouldThrowOnError) {\n            throw error;\n          }\n          if ((0, _errors.isStorageError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * Creates a signed URL. Use a signed URL to share a file for a fixed amount of time.\n     *\n     * @param path The file path, including the current file name. For example `folder/image.png`.\n     * @param expiresIn The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.\n     * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n     * @param options.transform Transform the asset before serving it to the client.\n     */\n    createSignedUrl(path, expiresIn, options) {\n      return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {\n        try {\n          let _path = this._getFinalPath(path);\n          let data = yield (0, _fetch.post)(this.fetch, `${this.url}/object/sign/${_path}`, Object.assign({\n            expiresIn\n          }, (options === null || options === void 0 ? void 0 : options.transform) ? {\n            transform: options.transform\n          } : {}), {\n            headers: this.headers\n          });\n          const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? `&download=${options.download === true ? '' : options.download}` : '';\n          const signedUrl = encodeURI(`${this.url}${data.signedURL}${downloadQueryParam}`);\n          data = {\n            signedUrl\n          };\n          return {\n            data,\n            error: null\n          };\n        } catch (error) {\n          if (this.shouldThrowOnError) {\n            throw error;\n          }\n          if ((0, _errors.isStorageError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * Creates multiple signed URLs. Use a signed URL to share a file for a fixed amount of time.\n     *\n     * @param paths The file paths to be downloaded, including the current file names. For example `['folder/image.png', 'folder2/image2.png']`.\n     * @param expiresIn The number of seconds until the signed URLs expire. For example, `60` for URLs which are valid for one minute.\n     * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n     */\n    createSignedUrls(paths, expiresIn, options) {\n      return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {\n        try {\n          const data = yield (0, _fetch.post)(this.fetch, `${this.url}/object/sign/${this.bucketId}`, {\n            expiresIn,\n            paths\n          }, {\n            headers: this.headers\n          });\n          const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? `&download=${options.download === true ? '' : options.download}` : '';\n          return {\n            data: data.map(datum => Object.assign(Object.assign({}, datum), {\n              signedUrl: datum.signedURL ? encodeURI(`${this.url}${datum.signedURL}${downloadQueryParam}`) : null\n            })),\n            error: null\n          };\n        } catch (error) {\n          if (this.shouldThrowOnError) {\n            throw error;\n          }\n          if ((0, _errors.isStorageError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * Downloads a file from a private bucket. For public buckets, make a request to the URL returned from `getPublicUrl` instead.\n     *\n     * @param path The full path and file name of the file to be downloaded. For example `folder/image.png`.\n     * @param options.transform Transform the asset before serving it to the client.\n     */\n    download(path, options) {\n      const wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== 'undefined';\n      const renderPath = wantsTransformation ? 'render/image/authenticated' : 'object';\n      const transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});\n      const queryString = transformationQuery ? `?${transformationQuery}` : '';\n      const _path = this._getFinalPath(path);\n      const downloadFn = () => (0, _fetch.get)(this.fetch, `${this.url}/${renderPath}/${_path}${queryString}`, {\n        headers: this.headers,\n        noResolveJson: true\n      });\n      return new _BlobDownloadBuilder.default(downloadFn, this.shouldThrowOnError);\n    }\n    /**\n     * Retrieves the details of an existing file.\n     * @param path\n     */\n    info(path) {\n      return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {\n        const _path = this._getFinalPath(path);\n        try {\n          const data = yield (0, _fetch.get)(this.fetch, `${this.url}/object/info/${_path}`, {\n            headers: this.headers\n          });\n          return {\n            data: (0, _helpers.recursiveToCamel)(data),\n            error: null\n          };\n        } catch (error) {\n          if (this.shouldThrowOnError) {\n            throw error;\n          }\n          if ((0, _errors.isStorageError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * Checks the existence of a file.\n     * @param path\n     */\n    exists(path) {\n      return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {\n        const _path = this._getFinalPath(path);\n        try {\n          yield (0, _fetch.head)(this.fetch, `${this.url}/object/${_path}`, {\n            headers: this.headers\n          });\n          return {\n            data: true,\n            error: null\n          };\n        } catch (error) {\n          if (this.shouldThrowOnError) {\n            throw error;\n          }\n          if ((0, _errors.isStorageError)(error) && error instanceof _errors.StorageUnknownError) {\n            const originalError = error.originalError;\n            if ([400, 404].includes(originalError === null || originalError === void 0 ? void 0 : originalError.status)) {\n              return {\n                data: false,\n                error\n              };\n            }\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * A simple convenience function to get the URL for an asset in a public bucket. If you do not want to use this function, you can construct the public URL by concatenating the bucket URL with the path to the asset.\n     * This function does not verify if the bucket is public. If a public URL is created for a bucket which is not public, you will not be able to download the asset.\n     *\n     * @param path The path and name of the file to generate the public URL for. For example `folder/image.png`.\n     * @param options.download Triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n     * @param options.transform Transform the asset before serving it to the client.\n     */\n    getPublicUrl(path, options) {\n      const _path = this._getFinalPath(path);\n      const _queryString = [];\n      const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? `download=${options.download === true ? '' : options.download}` : '';\n      if (downloadQueryParam !== '') {\n        _queryString.push(downloadQueryParam);\n      }\n      const wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== 'undefined';\n      const renderPath = wantsTransformation ? 'render/image' : 'object';\n      const transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});\n      if (transformationQuery !== '') {\n        _queryString.push(transformationQuery);\n      }\n      let queryString = _queryString.join('&');\n      if (queryString !== '') {\n        queryString = `?${queryString}`;\n      }\n      return {\n        data: {\n          publicUrl: encodeURI(`${this.url}/${renderPath}/public/${_path}${queryString}`)\n        }\n      };\n    }\n    /**\n     * Deletes files within the same bucket\n     *\n     * @param paths An array of files to delete, including the path and file name. For example [`'folder/image.png'`].\n     */\n    remove(paths) {\n      return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {\n        try {\n          const data = yield (0, _fetch.remove)(this.fetch, `${this.url}/object/${this.bucketId}`, {\n            prefixes: paths\n          }, {\n            headers: this.headers\n          });\n          return {\n            data,\n            error: null\n          };\n        } catch (error) {\n          if (this.shouldThrowOnError) {\n            throw error;\n          }\n          if ((0, _errors.isStorageError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * Get file metadata\n     * @param id the file id to retrieve metadata\n     */\n    // async getMetadata(\n    //   id: string\n    // ): Promise<\n    //   | {\n    //       data: Metadata\n    //       error: null\n    //     }\n    //   | {\n    //       data: null\n    //       error: StorageError\n    //     }\n    // > {\n    //   try {\n    //     const data = await get(this.fetch, `${this.url}/metadata/${id}`, { headers: this.headers })\n    //     return { data, error: null }\n    //   } catch (error) {\n    //     if (isStorageError(error)) {\n    //       return { data: null, error }\n    //     }\n    //     throw error\n    //   }\n    // }\n    /**\n     * Update file metadata\n     * @param id the file id to update metadata\n     * @param meta the new file metadata\n     */\n    // async updateMetadata(\n    //   id: string,\n    //   meta: Metadata\n    // ): Promise<\n    //   | {\n    //       data: Metadata\n    //       error: null\n    //     }\n    //   | {\n    //       data: null\n    //       error: StorageError\n    //     }\n    // > {\n    //   try {\n    //     const data = await post(\n    //       this.fetch,\n    //       `${this.url}/metadata/${id}`,\n    //       { ...meta },\n    //       { headers: this.headers }\n    //     )\n    //     return { data, error: null }\n    //   } catch (error) {\n    //     if (isStorageError(error)) {\n    //       return { data: null, error }\n    //     }\n    //     throw error\n    //   }\n    // }\n    /**\n     * Lists all the files and folders within a path of the bucket.\n     * @param path The folder path.\n     * @param options Search options including limit (defaults to 100), offset, sortBy, and search\n     */\n    list(path, options, parameters) {\n      return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {\n        try {\n          const body = Object.assign(Object.assign(Object.assign({}, DEFAULT_SEARCH_OPTIONS), options), {\n            prefix: path || ''\n          });\n          const data = yield (0, _fetch.post)(this.fetch, `${this.url}/object/list/${this.bucketId}`, body, {\n            headers: this.headers\n          }, parameters);\n          return {\n            data,\n            error: null\n          };\n        } catch (error) {\n          if (this.shouldThrowOnError) {\n            throw error;\n          }\n          if ((0, _errors.isStorageError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * @experimental this method signature might change in the future\n     * @param options search options\n     * @param parameters\n     */\n    listV2(options, parameters) {\n      return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {\n        try {\n          const body = Object.assign({}, options);\n          const data = yield (0, _fetch.post)(this.fetch, `${this.url}/object/list-v2/${this.bucketId}`, body, {\n            headers: this.headers\n          }, parameters);\n          return {\n            data,\n            error: null\n          };\n        } catch (error) {\n          if (this.shouldThrowOnError) {\n            throw error;\n          }\n          if ((0, _errors.isStorageError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    encodeMetadata(metadata) {\n      return JSON.stringify(metadata);\n    }\n    toBase64(data) {\n      if (typeof Buffer !== 'undefined') {\n        return Buffer.from(data).toString('base64');\n      }\n      return btoa(data);\n    }\n    _getFinalPath(path) {\n      return `${this.bucketId}/${path.replace(/^\\/+/, '')}`;\n    }\n    _removeEmptyFolders(path) {\n      return path.replace(/^\\/|\\/$/g, '').replace(/\\/+/g, '/');\n    }\n    transformOptsToQueryString(transform) {\n      const params = [];\n      if (transform.width) {\n        params.push(`width=${transform.width}`);\n      }\n      if (transform.height) {\n        params.push(`height=${transform.height}`);\n      }\n      if (transform.resize) {\n        params.push(`resize=${transform.resize}`);\n      }\n      if (transform.format) {\n        params.push(`format=${transform.format}`);\n      }\n      if (transform.quality) {\n        params.push(`quality=${transform.quality}`);\n      }\n      return params.join('&');\n    }\n  }\n  exports.default = StorageFileApi;\n});","lineCount":683,"map":[[7,2,1,0],[7,6,1,0,"_tslib"],[7,12,1,0],[7,15,1,0,"require"],[7,22,1,0],[7,23,1,0,"_dependencyMap"],[7,37,1,0],[8,2,2,0],[8,6,2,0,"_errors"],[8,13,2,0],[8,16,2,0,"require"],[8,23,2,0],[8,24,2,0,"_dependencyMap"],[8,38,2,0],[9,2,3,0],[9,6,3,0,"_fetch"],[9,12,3,0],[9,15,3,0,"require"],[9,22,3,0],[9,23,3,0,"_dependencyMap"],[9,37,3,0],[10,2,4,0],[10,6,4,0,"_helpers"],[10,14,4,0],[10,17,4,0,"require"],[10,24,4,0],[10,25,4,0,"_dependencyMap"],[10,39,4,0],[11,2,5,0],[11,6,5,0,"_BlobDownloadBuilder"],[11,26,5,0],[11,29,5,0,"_interopRequireDefault"],[11,51,5,0],[11,52,5,0,"require"],[11,59,5,0],[11,60,5,0,"_dependencyMap"],[11,74,5,0],[12,2,6,0],[12,8,6,6,"DEFAULT_SEARCH_OPTIONS"],[12,30,6,28],[12,33,6,31],[13,4,7,4,"limit"],[13,9,7,9],[13,11,7,11],[13,14,7,14],[14,4,8,4,"offset"],[14,10,8,10],[14,12,8,12],[14,13,8,13],[15,4,9,4,"sortBy"],[15,10,9,10],[15,12,9,12],[16,6,10,8,"column"],[16,12,10,14],[16,14,10,16],[16,20,10,22],[17,6,11,8,"order"],[17,11,11,13],[17,13,11,15],[18,4,12,4],[19,2,13,0],[19,3,13,1],[20,2,14,0],[20,8,14,6,"DEFAULT_FILE_OPTIONS"],[20,28,14,26],[20,31,14,29],[21,4,15,4,"cacheControl"],[21,16,15,16],[21,18,15,18],[21,24,15,24],[22,4,16,4,"contentType"],[22,15,16,15],[22,17,16,17],[22,43,16,43],[23,4,17,4,"upsert"],[23,10,17,10],[23,12,17,12],[24,2,18,0],[24,3,18,1],[25,2,19,15],[25,8,19,21,"StorageFileApi"],[25,22,19,35],[25,23,19,36],[26,4,20,4,"constructor"],[26,15,20,15,"constructor"],[26,16,20,16,"url"],[26,19,20,19],[26,21,20,21,"headers"],[26,28,20,28],[26,31,20,31],[26,32,20,32],[26,33,20,33],[26,35,20,35,"bucketId"],[26,43,20,43],[26,45,20,45,"fetch"],[26,50,20,50],[26,52,20,52],[27,6,21,8],[27,10,21,12],[27,11,21,13,"shouldThrowOnError"],[27,29,21,31],[27,32,21,34],[27,37,21,39],[28,6,22,8],[28,10,22,12],[28,11,22,13,"url"],[28,14,22,16],[28,17,22,19,"url"],[28,20,22,22],[29,6,23,8],[29,10,23,12],[29,11,23,13,"headers"],[29,18,23,20],[29,21,23,23,"headers"],[29,28,23,30],[30,6,24,8],[30,10,24,12],[30,11,24,13,"bucketId"],[30,19,24,21],[30,22,24,24,"bucketId"],[30,30,24,32],[31,6,25,8],[31,10,25,12],[31,11,25,13,"fetch"],[31,16,25,18],[31,19,25,21],[31,23,25,21,"resolveFetch"],[31,44,25,33],[31,46,25,34,"fetch"],[31,51,25,39],[31,52,25,40],[32,4,26,4],[33,4,27,4],[34,0,28,0],[35,0,29,0],[36,4,30,4,"throwOnError"],[36,16,30,16,"throwOnError"],[36,17,30,16],[36,19,30,19],[37,6,31,8],[37,10,31,12],[37,11,31,13,"shouldThrowOnError"],[37,29,31,31],[37,32,31,34],[37,36,31,38],[38,6,32,8],[38,13,32,15],[38,17,32,19],[39,4,33,4],[40,4,34,4],[41,0,35,0],[42,0,36,0],[43,0,37,0],[44,0,38,0],[45,0,39,0],[46,0,40,0],[47,4,41,4,"uploadOrUpdate"],[47,18,41,18,"uploadOrUpdate"],[47,19,41,19,"method"],[47,25,41,25],[47,27,41,27,"path"],[47,31,41,31],[47,33,41,33,"fileBody"],[47,41,41,41],[47,43,41,43,"fileOptions"],[47,54,41,54],[47,56,41,56],[48,6,42,8],[48,13,42,15],[48,17,42,15,"__awaiter"],[48,33,42,24],[48,35,42,25],[48,39,42,29],[48,41,42,31],[48,46,42,36],[48,47,42,37],[48,49,42,39],[48,54,42,44],[48,55,42,45],[48,57,42,47],[48,70,42,60],[49,8,43,12],[49,12,43,16],[50,10,44,16],[50,14,44,20,"body"],[50,18,44,24],[51,10,45,16],[51,16,45,22,"options"],[51,23,45,29],[51,26,45,32,"Object"],[51,32,45,38],[51,33,45,39,"assign"],[51,39,45,45],[51,40,45,46,"Object"],[51,46,45,52],[51,47,45,53,"assign"],[51,53,45,59],[51,54,45,60],[51,55,45,61],[51,56,45,62],[51,58,45,64,"DEFAULT_FILE_OPTIONS"],[51,78,45,84],[51,79,45,85],[51,81,45,87,"fileOptions"],[51,92,45,98],[51,93,45,99],[52,10,46,16],[52,14,46,20,"headers"],[52,21,46,27],[52,24,46,30,"Object"],[52,30,46,36],[52,31,46,37,"assign"],[52,37,46,43],[52,38,46,44,"Object"],[52,44,46,50],[52,45,46,51,"assign"],[52,51,46,57],[52,52,46,58],[52,53,46,59],[52,54,46,60],[52,56,46,62],[52,60,46,66],[52,61,46,67,"headers"],[52,68,46,74],[52,69,46,75],[52,71,46,78,"method"],[52,77,46,84],[52,82,46,89],[52,88,46,95],[52,92,46,99],[53,12,46,101],[53,22,46,111],[53,24,46,113,"String"],[53,30,46,119],[53,31,46,120,"options"],[53,38,46,127],[53,39,46,128,"upsert"],[53,45,46,134],[54,10,46,136],[54,11,46,138],[54,12,46,139],[55,10,47,16],[55,16,47,22,"metadata"],[55,24,47,30],[55,27,47,33,"options"],[55,34,47,40],[55,35,47,41,"metadata"],[55,43,47,49],[56,10,48,16],[56,14,48,20],[56,21,48,27,"Blob"],[56,25,48,31],[56,30,48,36],[56,41,48,47],[56,45,48,51,"fileBody"],[56,53,48,59],[56,65,48,71,"Blob"],[56,69,48,75],[56,71,48,77],[57,12,49,20,"body"],[57,16,49,24],[57,19,49,27],[57,23,49,31,"FormData"],[57,31,49,39],[57,32,49,40],[57,33,49,41],[58,12,50,20,"body"],[58,16,50,24],[58,17,50,25,"append"],[58,23,50,31],[58,24,50,32],[58,38,50,46],[58,40,50,48,"options"],[58,47,50,55],[58,48,50,56,"cacheControl"],[58,60,50,68],[58,61,50,69],[59,12,51,20],[59,16,51,24,"metadata"],[59,24,51,32],[59,26,51,34],[60,14,52,24,"body"],[60,18,52,28],[60,19,52,29,"append"],[60,25,52,35],[60,26,52,36],[60,36,52,46],[60,38,52,48],[60,42,52,52],[60,43,52,53,"encodeMetadata"],[60,57,52,67],[60,58,52,68,"metadata"],[60,66,52,76],[60,67,52,77],[60,68,52,78],[61,12,53,20],[62,12,54,20,"body"],[62,16,54,24],[62,17,54,25,"append"],[62,23,54,31],[62,24,54,32],[62,26,54,34],[62,28,54,36,"fileBody"],[62,36,54,44],[62,37,54,45],[63,10,55,16],[63,11,55,17],[63,17,56,21],[63,21,56,25],[63,28,56,32,"FormData"],[63,36,56,40],[63,41,56,45],[63,52,56,56],[63,56,56,60,"fileBody"],[63,64,56,68],[63,76,56,80,"FormData"],[63,84,56,88],[63,86,56,90],[64,12,57,20,"body"],[64,16,57,24],[64,19,57,27,"fileBody"],[64,27,57,35],[65,12,58,20,"body"],[65,16,58,24],[65,17,58,25,"append"],[65,23,58,31],[65,24,58,32],[65,38,58,46],[65,40,58,48,"options"],[65,47,58,55],[65,48,58,56,"cacheControl"],[65,60,58,68],[65,61,58,69],[66,12,59,20],[66,16,59,24,"metadata"],[66,24,59,32],[66,26,59,34],[67,14,60,24,"body"],[67,18,60,28],[67,19,60,29,"append"],[67,25,60,35],[67,26,60,36],[67,36,60,46],[67,38,60,48],[67,42,60,52],[67,43,60,53,"encodeMetadata"],[67,57,60,67],[67,58,60,68,"metadata"],[67,66,60,76],[67,67,60,77],[67,68,60,78],[68,12,61,20],[69,10,62,16],[69,11,62,17],[69,17,63,21],[70,12,64,20,"body"],[70,16,64,24],[70,19,64,27,"fileBody"],[70,27,64,35],[71,12,65,20,"headers"],[71,19,65,27],[71,20,65,28],[71,35,65,43],[71,36,65,44],[71,39,65,47],[71,50,65,58,"options"],[71,57,65,65],[71,58,65,66,"cacheControl"],[71,70,65,78],[71,72,65,80],[72,12,66,20,"headers"],[72,19,66,27],[72,20,66,28],[72,34,66,42],[72,35,66,43],[72,38,66,46,"options"],[72,45,66,53],[72,46,66,54,"contentType"],[72,57,66,65],[73,12,67,20],[73,16,67,24,"metadata"],[73,24,67,32],[73,26,67,34],[74,14,68,24,"headers"],[74,21,68,31],[74,22,68,32],[74,34,68,44],[74,35,68,45],[74,38,68,48],[74,42,68,52],[74,43,68,53,"toBase64"],[74,51,68,61],[74,52,68,62],[74,56,68,66],[74,57,68,67,"encodeMetadata"],[74,71,68,81],[74,72,68,82,"metadata"],[74,80,68,90],[74,81,68,91],[74,82,68,92],[75,12,69,20],[76,10,70,16],[77,10,71,16],[77,14,71,20,"fileOptions"],[77,25,71,31],[77,30,71,36],[77,34,71,40],[77,38,71,44,"fileOptions"],[77,49,71,55],[77,54,71,60],[77,59,71,65],[77,60,71,66],[77,63,71,69],[77,68,71,74],[77,69,71,75],[77,72,71,78,"fileOptions"],[77,83,71,89],[77,84,71,90,"headers"],[77,91,71,97],[77,93,71,99],[78,12,72,20,"headers"],[78,19,72,27],[78,22,72,30,"Object"],[78,28,72,36],[78,29,72,37,"assign"],[78,35,72,43],[78,36,72,44,"Object"],[78,42,72,50],[78,43,72,51,"assign"],[78,49,72,57],[78,50,72,58],[78,51,72,59],[78,52,72,60],[78,54,72,62,"headers"],[78,61,72,69],[78,62,72,70],[78,64,72,72,"fileOptions"],[78,75,72,83],[78,76,72,84,"headers"],[78,83,72,91],[78,84,72,92],[79,10,73,16],[80,10,74,16],[80,16,74,22,"cleanPath"],[80,25,74,31],[80,28,74,34],[80,32,74,38],[80,33,74,39,"_removeEmptyFolders"],[80,52,74,58],[80,53,74,59,"path"],[80,57,74,63],[80,58,74,64],[81,10,75,16],[81,16,75,22,"_path"],[81,21,75,27],[81,24,75,30],[81,28,75,34],[81,29,75,35,"_getFinalPath"],[81,42,75,48],[81,43,75,49,"cleanPath"],[81,52,75,58],[81,53,75,59],[82,10,76,16],[82,16,76,22,"data"],[82,20,76,26],[82,23,76,29],[82,29,76,35],[82,30,76,36,"method"],[82,36,76,42],[82,40,76,46],[82,45,76,51],[82,48,76,54,"put"],[82,58,76,57],[82,61,76,60,"post"],[82,72,76,64],[82,74,76,66],[82,78,76,70],[82,79,76,71,"fetch"],[82,84,76,76],[82,86,76,78],[82,89,76,81],[82,93,76,85],[82,94,76,86,"url"],[82,97,76,89],[82,108,76,100,"_path"],[82,113,76,105],[82,115,76,107],[82,117,76,109,"body"],[82,121,76,113],[82,123,76,115,"Object"],[82,129,76,121],[82,130,76,122,"assign"],[82,136,76,128],[82,137,76,129],[83,12,76,131,"headers"],[84,10,76,139],[84,11,76,140],[84,13,76,143],[84,14,76,144,"options"],[84,21,76,151],[84,26,76,156],[84,30,76,160],[84,34,76,164,"options"],[84,41,76,171],[84,46,76,176],[84,51,76,181],[84,52,76,182],[84,55,76,185],[84,60,76,190],[84,61,76,191],[84,64,76,194,"options"],[84,71,76,201],[84,72,76,202,"duplex"],[84,78,76,208],[84,82,76,212],[85,12,76,214,"duplex"],[85,18,76,220],[85,20,76,222,"options"],[85,27,76,229],[85,28,76,230,"duplex"],[86,10,76,237],[86,11,76,238],[86,14,76,241],[86,15,76,242],[86,16,76,244],[86,17,76,245],[86,18,76,246],[87,10,77,16],[87,17,77,23],[88,12,78,20,"data"],[88,16,78,24],[88,18,78,26],[89,14,78,28,"path"],[89,18,78,32],[89,20,78,34,"cleanPath"],[89,29,78,43],[90,14,78,45,"id"],[90,16,78,47],[90,18,78,49,"data"],[90,22,78,53],[90,23,78,54,"Id"],[90,25,78,56],[91,14,78,58,"fullPath"],[91,22,78,66],[91,24,78,68,"data"],[91,28,78,72],[91,29,78,73,"Key"],[92,12,78,77],[92,13,78,78],[93,12,79,20,"error"],[93,17,79,25],[93,19,79,27],[94,10,80,16],[94,11,80,17],[95,8,81,12],[95,9,81,13],[95,10,82,12],[95,17,82,19,"error"],[95,22,82,24],[95,24,82,26],[96,10,83,16],[96,14,83,20],[96,18,83,24],[96,19,83,25,"shouldThrowOnError"],[96,37,83,43],[96,39,83,45],[97,12,84,20],[97,18,84,26,"error"],[97,23,84,31],[98,10,85,16],[99,10,86,16],[99,14,86,20],[99,18,86,20,"isStorageError"],[99,40,86,34],[99,42,86,35,"error"],[99,47,86,40],[99,48,86,41],[99,50,86,43],[100,12,87,20],[100,19,87,27],[101,14,87,29,"data"],[101,18,87,33],[101,20,87,35],[101,24,87,39],[102,14,87,41,"error"],[103,12,87,47],[103,13,87,48],[104,10,88,16],[105,10,89,16],[105,16,89,22,"error"],[105,21,89,27],[106,8,90,12],[107,6,91,8],[107,7,91,9],[107,8,91,10],[108,4,92,4],[109,4,93,4],[110,0,94,0],[111,0,95,0],[112,0,96,0],[113,0,97,0],[114,0,98,0],[115,4,99,4,"upload"],[115,10,99,10,"upload"],[115,11,99,11,"path"],[115,15,99,15],[115,17,99,17,"fileBody"],[115,25,99,25],[115,27,99,27,"fileOptions"],[115,38,99,38],[115,40,99,40],[116,6,100,8],[116,13,100,15],[116,17,100,15,"__awaiter"],[116,33,100,24],[116,35,100,25],[116,39,100,29],[116,41,100,31],[116,46,100,36],[116,47,100,37],[116,49,100,39],[116,54,100,44],[116,55,100,45],[116,57,100,47],[116,70,100,60],[117,8,101,12],[117,15,101,19],[117,19,101,23],[117,20,101,24,"uploadOrUpdate"],[117,34,101,38],[117,35,101,39],[117,41,101,45],[117,43,101,47,"path"],[117,47,101,51],[117,49,101,53,"fileBody"],[117,57,101,61],[117,59,101,63,"fileOptions"],[117,70,101,74],[117,71,101,75],[118,6,102,8],[118,7,102,9],[118,8,102,10],[119,4,103,4],[120,4,104,4],[121,0,105,0],[122,0,106,0],[123,0,107,0],[124,0,108,0],[125,0,109,0],[126,4,110,4,"uploadToSignedUrl"],[126,21,110,21,"uploadToSignedUrl"],[126,22,110,22,"path"],[126,26,110,26],[126,28,110,28,"token"],[126,33,110,33],[126,35,110,35,"fileBody"],[126,43,110,43],[126,45,110,45,"fileOptions"],[126,56,110,56],[126,58,110,58],[127,6,111,8],[127,13,111,15],[127,17,111,15,"__awaiter"],[127,33,111,24],[127,35,111,25],[127,39,111,29],[127,41,111,31],[127,46,111,36],[127,47,111,37],[127,49,111,39],[127,54,111,44],[127,55,111,45],[127,57,111,47],[127,70,111,60],[128,8,112,12],[128,14,112,18,"cleanPath"],[128,23,112,27],[128,26,112,30],[128,30,112,34],[128,31,112,35,"_removeEmptyFolders"],[128,50,112,54],[128,51,112,55,"path"],[128,55,112,59],[128,56,112,60],[129,8,113,12],[129,14,113,18,"_path"],[129,19,113,23],[129,22,113,26],[129,26,113,30],[129,27,113,31,"_getFinalPath"],[129,40,113,44],[129,41,113,45,"cleanPath"],[129,50,113,54],[129,51,113,55],[130,8,114,12],[130,14,114,18,"url"],[130,17,114,21],[130,20,114,24],[130,24,114,28,"URL"],[130,27,114,31],[130,28,114,32],[130,32,114,36],[130,33,114,37,"url"],[130,36,114,40],[130,39,114,43],[130,62,114,66,"_path"],[130,67,114,71],[130,69,114,73],[130,70,114,74],[131,8,115,12,"url"],[131,11,115,15],[131,12,115,16,"searchParams"],[131,24,115,28],[131,25,115,29,"set"],[131,28,115,32],[131,29,115,33],[131,36,115,40],[131,38,115,42,"token"],[131,43,115,47],[131,44,115,48],[132,8,116,12],[132,12,116,16],[133,10,117,16],[133,14,117,20,"body"],[133,18,117,24],[134,10,118,16],[134,16,118,22,"options"],[134,23,118,29],[134,26,118,32,"Object"],[134,32,118,38],[134,33,118,39,"assign"],[134,39,118,45],[134,40,118,46],[135,12,118,48,"upsert"],[135,18,118,54],[135,20,118,56,"DEFAULT_FILE_OPTIONS"],[135,40,118,76],[135,41,118,77,"upsert"],[136,10,118,84],[136,11,118,85],[136,13,118,87,"fileOptions"],[136,24,118,98],[136,25,118,99],[137,10,119,16],[137,16,119,22,"headers"],[137,23,119,29],[137,26,119,32,"Object"],[137,32,119,38],[137,33,119,39,"assign"],[137,39,119,45],[137,40,119,46,"Object"],[137,46,119,52],[137,47,119,53,"assign"],[137,53,119,59],[137,54,119,60],[137,55,119,61],[137,56,119,62],[137,58,119,64],[137,62,119,68],[137,63,119,69,"headers"],[137,70,119,76],[137,71,119,77],[137,73,119,79],[138,12,119,81],[138,22,119,91],[138,24,119,93,"String"],[138,30,119,99],[138,31,119,100,"options"],[138,38,119,107],[138,39,119,108,"upsert"],[138,45,119,114],[139,10,119,116],[139,11,119,117],[139,12,119,118],[140,10,120,16],[140,14,120,20],[140,21,120,27,"Blob"],[140,25,120,31],[140,30,120,36],[140,41,120,47],[140,45,120,51,"fileBody"],[140,53,120,59],[140,65,120,71,"Blob"],[140,69,120,75],[140,71,120,77],[141,12,121,20,"body"],[141,16,121,24],[141,19,121,27],[141,23,121,31,"FormData"],[141,31,121,39],[141,32,121,40],[141,33,121,41],[142,12,122,20,"body"],[142,16,122,24],[142,17,122,25,"append"],[142,23,122,31],[142,24,122,32],[142,38,122,46],[142,40,122,48,"options"],[142,47,122,55],[142,48,122,56,"cacheControl"],[142,60,122,68],[142,61,122,69],[143,12,123,20,"body"],[143,16,123,24],[143,17,123,25,"append"],[143,23,123,31],[143,24,123,32],[143,26,123,34],[143,28,123,36,"fileBody"],[143,36,123,44],[143,37,123,45],[144,10,124,16],[144,11,124,17],[144,17,125,21],[144,21,125,25],[144,28,125,32,"FormData"],[144,36,125,40],[144,41,125,45],[144,52,125,56],[144,56,125,60,"fileBody"],[144,64,125,68],[144,76,125,80,"FormData"],[144,84,125,88],[144,86,125,90],[145,12,126,20,"body"],[145,16,126,24],[145,19,126,27,"fileBody"],[145,27,126,35],[146,12,127,20,"body"],[146,16,127,24],[146,17,127,25,"append"],[146,23,127,31],[146,24,127,32],[146,38,127,46],[146,40,127,48,"options"],[146,47,127,55],[146,48,127,56,"cacheControl"],[146,60,127,68],[146,61,127,69],[147,10,128,16],[147,11,128,17],[147,17,129,21],[148,12,130,20,"body"],[148,16,130,24],[148,19,130,27,"fileBody"],[148,27,130,35],[149,12,131,20,"headers"],[149,19,131,27],[149,20,131,28],[149,35,131,43],[149,36,131,44],[149,39,131,47],[149,50,131,58,"options"],[149,57,131,65],[149,58,131,66,"cacheControl"],[149,70,131,78],[149,72,131,80],[150,12,132,20,"headers"],[150,19,132,27],[150,20,132,28],[150,34,132,42],[150,35,132,43],[150,38,132,46,"options"],[150,45,132,53],[150,46,132,54,"contentType"],[150,57,132,65],[151,10,133,16],[152,10,134,16],[152,16,134,22,"data"],[152,20,134,26],[152,23,134,29],[152,29,134,35],[152,33,134,35,"put"],[152,43,134,38],[152,45,134,39],[152,49,134,43],[152,50,134,44,"fetch"],[152,55,134,49],[152,57,134,51,"url"],[152,60,134,54],[152,61,134,55,"toString"],[152,69,134,63],[152,70,134,64],[152,71,134,65],[152,73,134,67,"body"],[152,77,134,71],[152,79,134,73],[153,12,134,75,"headers"],[154,10,134,83],[154,11,134,84],[154,12,134,85],[155,10,135,16],[155,17,135,23],[156,12,136,20,"data"],[156,16,136,24],[156,18,136,26],[157,14,136,28,"path"],[157,18,136,32],[157,20,136,34,"cleanPath"],[157,29,136,43],[158,14,136,45,"fullPath"],[158,22,136,53],[158,24,136,55,"data"],[158,28,136,59],[158,29,136,60,"Key"],[159,12,136,64],[159,13,136,65],[160,12,137,20,"error"],[160,17,137,25],[160,19,137,27],[161,10,138,16],[161,11,138,17],[162,8,139,12],[162,9,139,13],[162,10,140,12],[162,17,140,19,"error"],[162,22,140,24],[162,24,140,26],[163,10,141,16],[163,14,141,20],[163,18,141,24],[163,19,141,25,"shouldThrowOnError"],[163,37,141,43],[163,39,141,45],[164,12,142,20],[164,18,142,26,"error"],[164,23,142,31],[165,10,143,16],[166,10,144,16],[166,14,144,20],[166,18,144,20,"isStorageError"],[166,40,144,34],[166,42,144,35,"error"],[166,47,144,40],[166,48,144,41],[166,50,144,43],[167,12,145,20],[167,19,145,27],[168,14,145,29,"data"],[168,18,145,33],[168,20,145,35],[168,24,145,39],[169,14,145,41,"error"],[170,12,145,47],[170,13,145,48],[171,10,146,16],[172,10,147,16],[172,16,147,22,"error"],[172,21,147,27],[173,8,148,12],[174,6,149,8],[174,7,149,9],[174,8,149,10],[175,4,150,4],[176,4,151,4],[177,0,152,0],[178,0,153,0],[179,0,154,0],[180,0,155,0],[181,0,156,0],[182,0,157,0],[183,4,158,4,"createSignedUploadUrl"],[183,25,158,25,"createSignedUploadUrl"],[183,26,158,26,"path"],[183,30,158,30],[183,32,158,32,"options"],[183,39,158,39],[183,41,158,41],[184,6,159,8],[184,13,159,15],[184,17,159,15,"__awaiter"],[184,33,159,24],[184,35,159,25],[184,39,159,29],[184,41,159,31],[184,46,159,36],[184,47,159,37],[184,49,159,39],[184,54,159,44],[184,55,159,45],[184,57,159,47],[184,70,159,60],[185,8,160,12],[185,12,160,16],[186,10,161,16],[186,14,161,20,"_path"],[186,19,161,25],[186,22,161,28],[186,26,161,32],[186,27,161,33,"_getFinalPath"],[186,40,161,46],[186,41,161,47,"path"],[186,45,161,51],[186,46,161,52],[187,10,162,16],[187,16,162,22,"headers"],[187,23,162,29],[187,26,162,32,"Object"],[187,32,162,38],[187,33,162,39,"assign"],[187,39,162,45],[187,40,162,46],[187,41,162,47],[187,42,162,48],[187,44,162,50],[187,48,162,54],[187,49,162,55,"headers"],[187,56,162,62],[187,57,162,63],[188,10,163,16],[188,14,163,20,"options"],[188,21,163,27],[188,26,163,32],[188,30,163,36],[188,34,163,40,"options"],[188,41,163,47],[188,46,163,52],[188,51,163,57],[188,52,163,58],[188,55,163,61],[188,60,163,66],[188,61,163,67],[188,64,163,70,"options"],[188,71,163,77],[188,72,163,78,"upsert"],[188,78,163,84],[188,80,163,86],[189,12,164,20,"headers"],[189,19,164,27],[189,20,164,28],[189,30,164,38],[189,31,164,39],[189,34,164,42],[189,40,164,48],[190,10,165,16],[191,10,166,16],[191,16,166,22,"data"],[191,20,166,26],[191,23,166,29],[191,29,166,35],[191,33,166,35,"post"],[191,44,166,39],[191,46,166,40],[191,50,166,44],[191,51,166,45,"fetch"],[191,56,166,50],[191,58,166,52],[191,61,166,55],[191,65,166,59],[191,66,166,60,"url"],[191,69,166,63],[191,92,166,86,"_path"],[191,97,166,91],[191,99,166,93],[191,101,166,95],[191,102,166,96],[191,103,166,97],[191,105,166,99],[192,12,166,101,"headers"],[193,10,166,109],[193,11,166,110],[193,12,166,111],[194,10,167,16],[194,16,167,22,"url"],[194,19,167,25],[194,22,167,28],[194,26,167,32,"URL"],[194,29,167,35],[194,30,167,36],[194,34,167,40],[194,35,167,41,"url"],[194,38,167,44],[194,41,167,47,"data"],[194,45,167,51],[194,46,167,52,"url"],[194,49,167,55],[194,50,167,56],[195,10,168,16],[195,16,168,22,"token"],[195,21,168,27],[195,24,168,30,"url"],[195,27,168,33],[195,28,168,34,"searchParams"],[195,40,168,46],[195,41,168,47,"get"],[195,44,168,50],[195,45,168,51],[195,52,168,58],[195,53,168,59],[196,10,169,16],[196,14,169,20],[196,15,169,21,"token"],[196,20,169,26],[196,22,169,28],[197,12,170,20],[197,18,170,26],[197,22,170,30,"StorageError"],[197,42,170,42],[197,43,170,43],[197,69,170,69],[197,70,170,70],[198,10,171,16],[199,10,172,16],[199,17,172,23],[200,12,172,25,"data"],[200,16,172,29],[200,18,172,31],[201,14,172,33,"signedUrl"],[201,23,172,42],[201,25,172,44,"url"],[201,28,172,47],[201,29,172,48,"toString"],[201,37,172,56],[201,38,172,57],[201,39,172,58],[202,14,172,60,"path"],[202,18,172,64],[203,14,172,66,"token"],[204,12,172,72],[204,13,172,73],[205,12,172,75,"error"],[205,17,172,80],[205,19,172,82],[206,10,172,87],[206,11,172,88],[207,8,173,12],[207,9,173,13],[207,10,174,12],[207,17,174,19,"error"],[207,22,174,24],[207,24,174,26],[208,10,175,16],[208,14,175,20],[208,18,175,24],[208,19,175,25,"shouldThrowOnError"],[208,37,175,43],[208,39,175,45],[209,12,176,20],[209,18,176,26,"error"],[209,23,176,31],[210,10,177,16],[211,10,178,16],[211,14,178,20],[211,18,178,20,"isStorageError"],[211,40,178,34],[211,42,178,35,"error"],[211,47,178,40],[211,48,178,41],[211,50,178,43],[212,12,179,20],[212,19,179,27],[213,14,179,29,"data"],[213,18,179,33],[213,20,179,35],[213,24,179,39],[214,14,179,41,"error"],[215,12,179,47],[215,13,179,48],[216,10,180,16],[217,10,181,16],[217,16,181,22,"error"],[217,21,181,27],[218,8,182,12],[219,6,183,8],[219,7,183,9],[219,8,183,10],[220,4,184,4],[221,4,185,4],[222,0,186,0],[223,0,187,0],[224,0,188,0],[225,0,189,0],[226,0,190,0],[227,4,191,4,"update"],[227,10,191,10,"update"],[227,11,191,11,"path"],[227,15,191,15],[227,17,191,17,"fileBody"],[227,25,191,25],[227,27,191,27,"fileOptions"],[227,38,191,38],[227,40,191,40],[228,6,192,8],[228,13,192,15],[228,17,192,15,"__awaiter"],[228,33,192,24],[228,35,192,25],[228,39,192,29],[228,41,192,31],[228,46,192,36],[228,47,192,37],[228,49,192,39],[228,54,192,44],[228,55,192,45],[228,57,192,47],[228,70,192,60],[229,8,193,12],[229,15,193,19],[229,19,193,23],[229,20,193,24,"uploadOrUpdate"],[229,34,193,38],[229,35,193,39],[229,40,193,44],[229,42,193,46,"path"],[229,46,193,50],[229,48,193,52,"fileBody"],[229,56,193,60],[229,58,193,62,"fileOptions"],[229,69,193,73],[229,70,193,74],[230,6,194,8],[230,7,194,9],[230,8,194,10],[231,4,195,4],[232,4,196,4],[233,0,197,0],[234,0,198,0],[235,0,199,0],[236,0,200,0],[237,0,201,0],[238,0,202,0],[239,4,203,4,"move"],[239,8,203,8,"move"],[239,9,203,9,"fromPath"],[239,17,203,17],[239,19,203,19,"toPath"],[239,25,203,25],[239,27,203,27,"options"],[239,34,203,34],[239,36,203,36],[240,6,204,8],[240,13,204,15],[240,17,204,15,"__awaiter"],[240,33,204,24],[240,35,204,25],[240,39,204,29],[240,41,204,31],[240,46,204,36],[240,47,204,37],[240,49,204,39],[240,54,204,44],[240,55,204,45],[240,57,204,47],[240,70,204,60],[241,8,205,12],[241,12,205,16],[242,10,206,16],[242,16,206,22,"data"],[242,20,206,26],[242,23,206,29],[242,29,206,35],[242,33,206,35,"post"],[242,44,206,39],[242,46,206,40],[242,50,206,44],[242,51,206,45,"fetch"],[242,56,206,50],[242,58,206,52],[242,61,206,55],[242,65,206,59],[242,66,206,60,"url"],[242,69,206,63],[242,83,206,77],[242,85,206,79],[243,12,207,20,"bucketId"],[243,20,207,28],[243,22,207,30],[243,26,207,34],[243,27,207,35,"bucketId"],[243,35,207,43],[244,12,208,20,"sourceKey"],[244,21,208,29],[244,23,208,31,"fromPath"],[244,31,208,39],[245,12,209,20,"destinationKey"],[245,26,209,34],[245,28,209,36,"toPath"],[245,34,209,42],[246,12,210,20,"destinationBucket"],[246,29,210,37],[246,31,210,39,"options"],[246,38,210,46],[246,43,210,51],[246,47,210,55],[246,51,210,59,"options"],[246,58,210,66],[246,63,210,71],[246,68,210,76],[246,69,210,77],[246,72,210,80],[246,77,210,85],[246,78,210,86],[246,81,210,89,"options"],[246,88,210,96],[246,89,210,97,"destinationBucket"],[247,10,211,16],[247,11,211,17],[247,13,211,19],[248,12,211,21,"headers"],[248,19,211,28],[248,21,211,30],[248,25,211,34],[248,26,211,35,"headers"],[249,10,211,43],[249,11,211,44],[249,12,211,45],[250,10,212,16],[250,17,212,23],[251,12,212,25,"data"],[251,16,212,29],[252,12,212,31,"error"],[252,17,212,36],[252,19,212,38],[253,10,212,43],[253,11,212,44],[254,8,213,12],[254,9,213,13],[254,10,214,12],[254,17,214,19,"error"],[254,22,214,24],[254,24,214,26],[255,10,215,16],[255,14,215,20],[255,18,215,24],[255,19,215,25,"shouldThrowOnError"],[255,37,215,43],[255,39,215,45],[256,12,216,20],[256,18,216,26,"error"],[256,23,216,31],[257,10,217,16],[258,10,218,16],[258,14,218,20],[258,18,218,20,"isStorageError"],[258,40,218,34],[258,42,218,35,"error"],[258,47,218,40],[258,48,218,41],[258,50,218,43],[259,12,219,20],[259,19,219,27],[260,14,219,29,"data"],[260,18,219,33],[260,20,219,35],[260,24,219,39],[261,14,219,41,"error"],[262,12,219,47],[262,13,219,48],[263,10,220,16],[264,10,221,16],[264,16,221,22,"error"],[264,21,221,27],[265,8,222,12],[266,6,223,8],[266,7,223,9],[266,8,223,10],[267,4,224,4],[268,4,225,4],[269,0,226,0],[270,0,227,0],[271,0,228,0],[272,0,229,0],[273,0,230,0],[274,0,231,0],[275,4,232,4,"copy"],[275,8,232,8,"copy"],[275,9,232,9,"fromPath"],[275,17,232,17],[275,19,232,19,"toPath"],[275,25,232,25],[275,27,232,27,"options"],[275,34,232,34],[275,36,232,36],[276,6,233,8],[276,13,233,15],[276,17,233,15,"__awaiter"],[276,33,233,24],[276,35,233,25],[276,39,233,29],[276,41,233,31],[276,46,233,36],[276,47,233,37],[276,49,233,39],[276,54,233,44],[276,55,233,45],[276,57,233,47],[276,70,233,60],[277,8,234,12],[277,12,234,16],[278,10,235,16],[278,16,235,22,"data"],[278,20,235,26],[278,23,235,29],[278,29,235,35],[278,33,235,35,"post"],[278,44,235,39],[278,46,235,40],[278,50,235,44],[278,51,235,45,"fetch"],[278,56,235,50],[278,58,235,52],[278,61,235,55],[278,65,235,59],[278,66,235,60,"url"],[278,69,235,63],[278,83,235,77],[278,85,235,79],[279,12,236,20,"bucketId"],[279,20,236,28],[279,22,236,30],[279,26,236,34],[279,27,236,35,"bucketId"],[279,35,236,43],[280,12,237,20,"sourceKey"],[280,21,237,29],[280,23,237,31,"fromPath"],[280,31,237,39],[281,12,238,20,"destinationKey"],[281,26,238,34],[281,28,238,36,"toPath"],[281,34,238,42],[282,12,239,20,"destinationBucket"],[282,29,239,37],[282,31,239,39,"options"],[282,38,239,46],[282,43,239,51],[282,47,239,55],[282,51,239,59,"options"],[282,58,239,66],[282,63,239,71],[282,68,239,76],[282,69,239,77],[282,72,239,80],[282,77,239,85],[282,78,239,86],[282,81,239,89,"options"],[282,88,239,96],[282,89,239,97,"destinationBucket"],[283,10,240,16],[283,11,240,17],[283,13,240,19],[284,12,240,21,"headers"],[284,19,240,28],[284,21,240,30],[284,25,240,34],[284,26,240,35,"headers"],[285,10,240,43],[285,11,240,44],[285,12,240,45],[286,10,241,16],[286,17,241,23],[287,12,241,25,"data"],[287,16,241,29],[287,18,241,31],[288,14,241,33,"path"],[288,18,241,37],[288,20,241,39,"data"],[288,24,241,43],[288,25,241,44,"Key"],[289,12,241,48],[289,13,241,49],[290,12,241,51,"error"],[290,17,241,56],[290,19,241,58],[291,10,241,63],[291,11,241,64],[292,8,242,12],[292,9,242,13],[292,10,243,12],[292,17,243,19,"error"],[292,22,243,24],[292,24,243,26],[293,10,244,16],[293,14,244,20],[293,18,244,24],[293,19,244,25,"shouldThrowOnError"],[293,37,244,43],[293,39,244,45],[294,12,245,20],[294,18,245,26,"error"],[294,23,245,31],[295,10,246,16],[296,10,247,16],[296,14,247,20],[296,18,247,20,"isStorageError"],[296,40,247,34],[296,42,247,35,"error"],[296,47,247,40],[296,48,247,41],[296,50,247,43],[297,12,248,20],[297,19,248,27],[298,14,248,29,"data"],[298,18,248,33],[298,20,248,35],[298,24,248,39],[299,14,248,41,"error"],[300,12,248,47],[300,13,248,48],[301,10,249,16],[302,10,250,16],[302,16,250,22,"error"],[302,21,250,27],[303,8,251,12],[304,6,252,8],[304,7,252,9],[304,8,252,10],[305,4,253,4],[306,4,254,4],[307,0,255,0],[308,0,256,0],[309,0,257,0],[310,0,258,0],[311,0,259,0],[312,0,260,0],[313,0,261,0],[314,4,262,4,"createSignedUrl"],[314,19,262,19,"createSignedUrl"],[314,20,262,20,"path"],[314,24,262,24],[314,26,262,26,"expiresIn"],[314,35,262,35],[314,37,262,37,"options"],[314,44,262,44],[314,46,262,46],[315,6,263,8],[315,13,263,15],[315,17,263,15,"__awaiter"],[315,33,263,24],[315,35,263,25],[315,39,263,29],[315,41,263,31],[315,46,263,36],[315,47,263,37],[315,49,263,39],[315,54,263,44],[315,55,263,45],[315,57,263,47],[315,70,263,60],[316,8,264,12],[316,12,264,16],[317,10,265,16],[317,14,265,20,"_path"],[317,19,265,25],[317,22,265,28],[317,26,265,32],[317,27,265,33,"_getFinalPath"],[317,40,265,46],[317,41,265,47,"path"],[317,45,265,51],[317,46,265,52],[318,10,266,16],[318,14,266,20,"data"],[318,18,266,24],[318,21,266,27],[318,27,266,33],[318,31,266,33,"post"],[318,42,266,37],[318,44,266,38],[318,48,266,42],[318,49,266,43,"fetch"],[318,54,266,48],[318,56,266,50],[318,59,266,53],[318,63,266,57],[318,64,266,58,"url"],[318,67,266,61],[318,83,266,77,"_path"],[318,88,266,82],[318,90,266,84],[318,92,266,86,"Object"],[318,98,266,92],[318,99,266,93,"assign"],[318,105,266,99],[318,106,266,100],[319,12,266,102,"expiresIn"],[320,10,266,112],[320,11,266,113],[320,13,266,116],[320,14,266,117,"options"],[320,21,266,124],[320,26,266,129],[320,30,266,133],[320,34,266,137,"options"],[320,41,266,144],[320,46,266,149],[320,51,266,154],[320,52,266,155],[320,55,266,158],[320,60,266,163],[320,61,266,164],[320,64,266,167,"options"],[320,71,266,174],[320,72,266,175,"transform"],[320,81,266,184],[320,85,266,188],[321,12,266,190,"transform"],[321,21,266,199],[321,23,266,201,"options"],[321,30,266,208],[321,31,266,209,"transform"],[322,10,266,219],[322,11,266,220],[322,14,266,223],[322,15,266,224],[322,16,266,226],[322,17,266,227],[322,19,266,229],[323,12,266,231,"headers"],[323,19,266,238],[323,21,266,240],[323,25,266,244],[323,26,266,245,"headers"],[324,10,266,253],[324,11,266,254],[324,12,266,255],[325,10,267,16],[325,16,267,22,"downloadQueryParam"],[325,34,267,40],[325,37,267,43],[325,38,267,44,"options"],[325,45,267,51],[325,50,267,56],[325,54,267,60],[325,58,267,64,"options"],[325,65,267,71],[325,70,267,76],[325,75,267,81],[325,76,267,82],[325,79,267,85],[325,84,267,90],[325,85,267,91],[325,88,267,94,"options"],[325,95,267,101],[325,96,267,102,"download"],[325,104,267,110],[325,108,268,22],[325,121,268,35,"options"],[325,128,268,42],[325,129,268,43,"download"],[325,137,268,51],[325,142,268,56],[325,146,268,60],[325,149,268,63],[325,151,268,65],[325,154,268,68,"options"],[325,161,268,75],[325,162,268,76,"download"],[325,170,268,84],[325,172,268,86],[325,175,269,22],[325,177,269,24],[326,10,270,16],[326,16,270,22,"signedUrl"],[326,25,270,31],[326,28,270,34,"encodeURI"],[326,37,270,43],[326,38,270,44],[326,41,270,47],[326,45,270,51],[326,46,270,52,"url"],[326,49,270,55],[326,52,270,58,"data"],[326,56,270,62],[326,57,270,63,"signedURL"],[326,66,270,72],[326,69,270,75,"downloadQueryParam"],[326,87,270,93],[326,89,270,95],[326,90,270,96],[327,10,271,16,"data"],[327,14,271,20],[327,17,271,23],[328,12,271,25,"signedUrl"],[329,10,271,35],[329,11,271,36],[330,10,272,16],[330,17,272,23],[331,12,272,25,"data"],[331,16,272,29],[332,12,272,31,"error"],[332,17,272,36],[332,19,272,38],[333,10,272,43],[333,11,272,44],[334,8,273,12],[334,9,273,13],[334,10,274,12],[334,17,274,19,"error"],[334,22,274,24],[334,24,274,26],[335,10,275,16],[335,14,275,20],[335,18,275,24],[335,19,275,25,"shouldThrowOnError"],[335,37,275,43],[335,39,275,45],[336,12,276,20],[336,18,276,26,"error"],[336,23,276,31],[337,10,277,16],[338,10,278,16],[338,14,278,20],[338,18,278,20,"isStorageError"],[338,40,278,34],[338,42,278,35,"error"],[338,47,278,40],[338,48,278,41],[338,50,278,43],[339,12,279,20],[339,19,279,27],[340,14,279,29,"data"],[340,18,279,33],[340,20,279,35],[340,24,279,39],[341,14,279,41,"error"],[342,12,279,47],[342,13,279,48],[343,10,280,16],[344,10,281,16],[344,16,281,22,"error"],[344,21,281,27],[345,8,282,12],[346,6,283,8],[346,7,283,9],[346,8,283,10],[347,4,284,4],[348,4,285,4],[349,0,286,0],[350,0,287,0],[351,0,288,0],[352,0,289,0],[353,0,290,0],[354,0,291,0],[355,4,292,4,"createSignedUrls"],[355,20,292,20,"createSignedUrls"],[355,21,292,21,"paths"],[355,26,292,26],[355,28,292,28,"expiresIn"],[355,37,292,37],[355,39,292,39,"options"],[355,46,292,46],[355,48,292,48],[356,6,293,8],[356,13,293,15],[356,17,293,15,"__awaiter"],[356,33,293,24],[356,35,293,25],[356,39,293,29],[356,41,293,31],[356,46,293,36],[356,47,293,37],[356,49,293,39],[356,54,293,44],[356,55,293,45],[356,57,293,47],[356,70,293,60],[357,8,294,12],[357,12,294,16],[358,10,295,16],[358,16,295,22,"data"],[358,20,295,26],[358,23,295,29],[358,29,295,35],[358,33,295,35,"post"],[358,44,295,39],[358,46,295,40],[358,50,295,44],[358,51,295,45,"fetch"],[358,56,295,50],[358,58,295,52],[358,61,295,55],[358,65,295,59],[358,66,295,60,"url"],[358,69,295,63],[358,85,295,79],[358,89,295,83],[358,90,295,84,"bucketId"],[358,98,295,92],[358,100,295,94],[358,102,295,96],[359,12,295,98,"expiresIn"],[359,21,295,107],[360,12,295,109,"paths"],[361,10,295,115],[361,11,295,116],[361,13,295,118],[362,12,295,120,"headers"],[362,19,295,127],[362,21,295,129],[362,25,295,133],[362,26,295,134,"headers"],[363,10,295,142],[363,11,295,143],[363,12,295,144],[364,10,296,16],[364,16,296,22,"downloadQueryParam"],[364,34,296,40],[364,37,296,43],[364,38,296,44,"options"],[364,45,296,51],[364,50,296,56],[364,54,296,60],[364,58,296,64,"options"],[364,65,296,71],[364,70,296,76],[364,75,296,81],[364,76,296,82],[364,79,296,85],[364,84,296,90],[364,85,296,91],[364,88,296,94,"options"],[364,95,296,101],[364,96,296,102,"download"],[364,104,296,110],[364,108,297,22],[364,121,297,35,"options"],[364,128,297,42],[364,129,297,43,"download"],[364,137,297,51],[364,142,297,56],[364,146,297,60],[364,149,297,63],[364,151,297,65],[364,154,297,68,"options"],[364,161,297,75],[364,162,297,76,"download"],[364,170,297,84],[364,172,297,86],[364,175,298,22],[364,177,298,24],[365,10,299,16],[365,17,299,23],[366,12,300,20,"data"],[366,16,300,24],[366,18,300,26,"data"],[366,22,300,30],[366,23,300,31,"map"],[366,26,300,34],[366,27,300,36,"datum"],[366,32,300,41],[366,36,300,47,"Object"],[366,42,300,53],[366,43,300,54,"assign"],[366,49,300,60],[366,50,300,61,"Object"],[366,56,300,67],[366,57,300,68,"assign"],[366,63,300,74],[366,64,300,75],[366,65,300,76],[366,66,300,77],[366,68,300,79,"datum"],[366,73,300,84],[366,74,300,85],[366,76,300,87],[367,14,300,89,"signedUrl"],[367,23,300,98],[367,25,300,100,"datum"],[367,30,300,105],[367,31,300,106,"signedURL"],[367,40,300,115],[367,43,301,30,"encodeURI"],[367,52,301,39],[367,53,301,40],[367,56,301,43],[367,60,301,47],[367,61,301,48,"url"],[367,64,301,51],[367,67,301,54,"datum"],[367,72,301,59],[367,73,301,60,"signedURL"],[367,82,301,69],[367,85,301,72,"downloadQueryParam"],[367,103,301,90],[367,105,301,92],[367,106,301,93],[367,109,302,30],[368,12,302,35],[368,13,302,36],[368,14,302,38],[368,15,302,39],[369,12,303,20,"error"],[369,17,303,25],[369,19,303,27],[370,10,304,16],[370,11,304,17],[371,8,305,12],[371,9,305,13],[371,10,306,12],[371,17,306,19,"error"],[371,22,306,24],[371,24,306,26],[372,10,307,16],[372,14,307,20],[372,18,307,24],[372,19,307,25,"shouldThrowOnError"],[372,37,307,43],[372,39,307,45],[373,12,308,20],[373,18,308,26,"error"],[373,23,308,31],[374,10,309,16],[375,10,310,16],[375,14,310,20],[375,18,310,20,"isStorageError"],[375,40,310,34],[375,42,310,35,"error"],[375,47,310,40],[375,48,310,41],[375,50,310,43],[376,12,311,20],[376,19,311,27],[377,14,311,29,"data"],[377,18,311,33],[377,20,311,35],[377,24,311,39],[378,14,311,41,"error"],[379,12,311,47],[379,13,311,48],[380,10,312,16],[381,10,313,16],[381,16,313,22,"error"],[381,21,313,27],[382,8,314,12],[383,6,315,8],[383,7,315,9],[383,8,315,10],[384,4,316,4],[385,4,317,4],[386,0,318,0],[387,0,319,0],[388,0,320,0],[389,0,321,0],[390,0,322,0],[391,4,323,4,"download"],[391,12,323,12,"download"],[391,13,323,13,"path"],[391,17,323,17],[391,19,323,19,"options"],[391,26,323,26],[391,28,323,28],[392,6,324,8],[392,12,324,14,"wantsTransformation"],[392,31,324,33],[392,34,324,36],[392,42,324,44,"options"],[392,49,324,51],[392,54,324,56],[392,58,324,60],[392,62,324,64,"options"],[392,69,324,71],[392,74,324,76],[392,79,324,81],[392,80,324,82],[392,83,324,85],[392,88,324,90],[392,89,324,91],[392,92,324,94,"options"],[392,99,324,101],[392,100,324,102,"transform"],[392,109,324,111],[392,110,324,112],[392,115,324,117],[392,126,324,128],[393,6,325,8],[393,12,325,14,"renderPath"],[393,22,325,24],[393,25,325,27,"wantsTransformation"],[393,44,325,46],[393,47,325,49],[393,75,325,77],[393,78,325,80],[393,86,325,88],[394,6,326,8],[394,12,326,14,"transformationQuery"],[394,31,326,33],[394,34,326,36],[394,38,326,40],[394,39,326,41,"transformOptsToQueryString"],[394,65,326,67],[394,66,326,68],[394,67,326,69,"options"],[394,74,326,76],[394,79,326,81],[394,83,326,85],[394,87,326,89,"options"],[394,94,326,96],[394,99,326,101],[394,104,326,106],[394,105,326,107],[394,108,326,110],[394,113,326,115],[394,114,326,116],[394,117,326,119,"options"],[394,124,326,126],[394,125,326,127,"transform"],[394,134,326,136],[394,139,326,141],[394,140,326,142],[394,141,326,143],[394,142,326,144],[395,6,327,8],[395,12,327,14,"queryString"],[395,23,327,25],[395,26,327,28,"transformationQuery"],[395,45,327,47],[395,48,327,50],[395,52,327,54,"transformationQuery"],[395,71,327,73],[395,73,327,75],[395,76,327,78],[395,78,327,80],[396,6,328,8],[396,12,328,14,"_path"],[396,17,328,19],[396,20,328,22],[396,24,328,26],[396,25,328,27,"_getFinalPath"],[396,38,328,40],[396,39,328,41,"path"],[396,43,328,45],[396,44,328,46],[397,6,329,8],[397,12,329,14,"downloadFn"],[397,22,329,24],[397,25,329,27,"downloadFn"],[397,26,329,27],[397,31,329,33],[397,35,329,33,"get"],[397,45,329,36],[397,47,329,37],[397,51,329,41],[397,52,329,42,"fetch"],[397,57,329,47],[397,59,329,49],[397,62,329,52],[397,66,329,56],[397,67,329,57,"url"],[397,70,329,60],[397,74,329,64,"renderPath"],[397,84,329,74],[397,88,329,78,"_path"],[397,93,329,83],[397,96,329,86,"queryString"],[397,107,329,97],[397,109,329,99],[397,111,329,101],[398,8,330,12,"headers"],[398,15,330,19],[398,17,330,21],[398,21,330,25],[398,22,330,26,"headers"],[398,29,330,33],[399,8,331,12,"noResolveJson"],[399,21,331,25],[399,23,331,27],[400,6,332,8],[400,7,332,9],[400,8,332,10],[401,6,333,8],[401,13,333,15],[401,17,333,19,"BlobDownloadBuilder"],[401,45,333,38],[401,46,333,39,"downloadFn"],[401,56,333,49],[401,58,333,51],[401,62,333,55],[401,63,333,56,"shouldThrowOnError"],[401,81,333,74],[401,82,333,75],[402,4,334,4],[403,4,335,4],[404,0,336,0],[405,0,337,0],[406,0,338,0],[407,4,339,4,"info"],[407,8,339,8,"info"],[407,9,339,9,"path"],[407,13,339,13],[407,15,339,15],[408,6,340,8],[408,13,340,15],[408,17,340,15,"__awaiter"],[408,33,340,24],[408,35,340,25],[408,39,340,29],[408,41,340,31],[408,46,340,36],[408,47,340,37],[408,49,340,39],[408,54,340,44],[408,55,340,45],[408,57,340,47],[408,70,340,60],[409,8,341,12],[409,14,341,18,"_path"],[409,19,341,23],[409,22,341,26],[409,26,341,30],[409,27,341,31,"_getFinalPath"],[409,40,341,44],[409,41,341,45,"path"],[409,45,341,49],[409,46,341,50],[410,8,342,12],[410,12,342,16],[411,10,343,16],[411,16,343,22,"data"],[411,20,343,26],[411,23,343,29],[411,29,343,35],[411,33,343,35,"get"],[411,43,343,38],[411,45,343,39],[411,49,343,43],[411,50,343,44,"fetch"],[411,55,343,49],[411,57,343,51],[411,60,343,54],[411,64,343,58],[411,65,343,59,"url"],[411,68,343,62],[411,84,343,78,"_path"],[411,89,343,83],[411,91,343,85],[411,93,343,87],[412,12,344,20,"headers"],[412,19,344,27],[412,21,344,29],[412,25,344,33],[412,26,344,34,"headers"],[413,10,345,16],[413,11,345,17],[413,12,345,18],[414,10,346,16],[414,17,346,23],[415,12,346,25,"data"],[415,16,346,29],[415,18,346,31],[415,22,346,31,"recursiveToCamel"],[415,47,346,47],[415,49,346,48,"data"],[415,53,346,52],[415,54,346,53],[416,12,346,55,"error"],[416,17,346,60],[416,19,346,62],[417,10,346,67],[417,11,346,68],[418,8,347,12],[418,9,347,13],[418,10,348,12],[418,17,348,19,"error"],[418,22,348,24],[418,24,348,26],[419,10,349,16],[419,14,349,20],[419,18,349,24],[419,19,349,25,"shouldThrowOnError"],[419,37,349,43],[419,39,349,45],[420,12,350,20],[420,18,350,26,"error"],[420,23,350,31],[421,10,351,16],[422,10,352,16],[422,14,352,20],[422,18,352,20,"isStorageError"],[422,40,352,34],[422,42,352,35,"error"],[422,47,352,40],[422,48,352,41],[422,50,352,43],[423,12,353,20],[423,19,353,27],[424,14,353,29,"data"],[424,18,353,33],[424,20,353,35],[424,24,353,39],[425,14,353,41,"error"],[426,12,353,47],[426,13,353,48],[427,10,354,16],[428,10,355,16],[428,16,355,22,"error"],[428,21,355,27],[429,8,356,12],[430,6,357,8],[430,7,357,9],[430,8,357,10],[431,4,358,4],[432,4,359,4],[433,0,360,0],[434,0,361,0],[435,0,362,0],[436,4,363,4,"exists"],[436,10,363,10,"exists"],[436,11,363,11,"path"],[436,15,363,15],[436,17,363,17],[437,6,364,8],[437,13,364,15],[437,17,364,15,"__awaiter"],[437,33,364,24],[437,35,364,25],[437,39,364,29],[437,41,364,31],[437,46,364,36],[437,47,364,37],[437,49,364,39],[437,54,364,44],[437,55,364,45],[437,57,364,47],[437,70,364,60],[438,8,365,12],[438,14,365,18,"_path"],[438,19,365,23],[438,22,365,26],[438,26,365,30],[438,27,365,31,"_getFinalPath"],[438,40,365,44],[438,41,365,45,"path"],[438,45,365,49],[438,46,365,50],[439,8,366,12],[439,12,366,16],[440,10,367,16],[440,16,367,22],[440,20,367,22,"head"],[440,31,367,26],[440,33,367,27],[440,37,367,31],[440,38,367,32,"fetch"],[440,43,367,37],[440,45,367,39],[440,48,367,42],[440,52,367,46],[440,53,367,47,"url"],[440,56,367,50],[440,67,367,61,"_path"],[440,72,367,66],[440,74,367,68],[440,76,367,70],[441,12,368,20,"headers"],[441,19,368,27],[441,21,368,29],[441,25,368,33],[441,26,368,34,"headers"],[442,10,369,16],[442,11,369,17],[442,12,369,18],[443,10,370,16],[443,17,370,23],[444,12,370,25,"data"],[444,16,370,29],[444,18,370,31],[444,22,370,35],[445,12,370,37,"error"],[445,17,370,42],[445,19,370,44],[446,10,370,49],[446,11,370,50],[447,8,371,12],[447,9,371,13],[447,10,372,12],[447,17,372,19,"error"],[447,22,372,24],[447,24,372,26],[448,10,373,16],[448,14,373,20],[448,18,373,24],[448,19,373,25,"shouldThrowOnError"],[448,37,373,43],[448,39,373,45],[449,12,374,20],[449,18,374,26,"error"],[449,23,374,31],[450,10,375,16],[451,10,376,16],[451,14,376,20],[451,18,376,20,"isStorageError"],[451,40,376,34],[451,42,376,35,"error"],[451,47,376,40],[451,48,376,41],[451,52,376,45,"error"],[451,57,376,50],[451,69,376,62,"StorageUnknownError"],[451,96,376,81],[451,98,376,83],[452,12,377,20],[452,18,377,26,"originalError"],[452,31,377,39],[452,34,377,42,"error"],[452,39,377,47],[452,40,377,48,"originalError"],[452,53,377,61],[453,12,378,20],[453,16,378,24],[453,17,378,25],[453,20,378,28],[453,22,378,30],[453,25,378,33],[453,26,378,34],[453,27,378,35,"includes"],[453,35,378,43],[453,36,378,44,"originalError"],[453,49,378,57],[453,54,378,62],[453,58,378,66],[453,62,378,70,"originalError"],[453,75,378,83],[453,80,378,88],[453,85,378,93],[453,86,378,94],[453,89,378,97],[453,94,378,102],[453,95,378,103],[453,98,378,106,"originalError"],[453,111,378,119],[453,112,378,120,"status"],[453,118,378,126],[453,119,378,127],[453,121,378,129],[454,14,379,24],[454,21,379,31],[455,16,379,33,"data"],[455,20,379,37],[455,22,379,39],[455,27,379,44],[456,16,379,46,"error"],[457,14,379,52],[457,15,379,53],[458,12,380,20],[459,10,381,16],[460,10,382,16],[460,16,382,22,"error"],[460,21,382,27],[461,8,383,12],[462,6,384,8],[462,7,384,9],[462,8,384,10],[463,4,385,4],[464,4,386,4],[465,0,387,0],[466,0,388,0],[467,0,389,0],[468,0,390,0],[469,0,391,0],[470,0,392,0],[471,0,393,0],[472,4,394,4,"getPublicUrl"],[472,16,394,16,"getPublicUrl"],[472,17,394,17,"path"],[472,21,394,21],[472,23,394,23,"options"],[472,30,394,30],[472,32,394,32],[473,6,395,8],[473,12,395,14,"_path"],[473,17,395,19],[473,20,395,22],[473,24,395,26],[473,25,395,27,"_getFinalPath"],[473,38,395,40],[473,39,395,41,"path"],[473,43,395,45],[473,44,395,46],[474,6,396,8],[474,12,396,14,"_queryString"],[474,24,396,26],[474,27,396,29],[474,29,396,31],[475,6,397,8],[475,12,397,14,"downloadQueryParam"],[475,30,397,32],[475,33,397,35],[475,34,397,36,"options"],[475,41,397,43],[475,46,397,48],[475,50,397,52],[475,54,397,56,"options"],[475,61,397,63],[475,66,397,68],[475,71,397,73],[475,72,397,74],[475,75,397,77],[475,80,397,82],[475,81,397,83],[475,84,397,86,"options"],[475,91,397,93],[475,92,397,94,"download"],[475,100,397,102],[475,104,398,14],[475,116,398,26,"options"],[475,123,398,33],[475,124,398,34,"download"],[475,132,398,42],[475,137,398,47],[475,141,398,51],[475,144,398,54],[475,146,398,56],[475,149,398,59,"options"],[475,156,398,66],[475,157,398,67,"download"],[475,165,398,75],[475,167,398,77],[475,170,399,14],[475,172,399,16],[476,6,400,8],[476,10,400,12,"downloadQueryParam"],[476,28,400,30],[476,33,400,35],[476,35,400,37],[476,37,400,39],[477,8,401,12,"_queryString"],[477,20,401,24],[477,21,401,25,"push"],[477,25,401,29],[477,26,401,30,"downloadQueryParam"],[477,44,401,48],[477,45,401,49],[478,6,402,8],[479,6,403,8],[479,12,403,14,"wantsTransformation"],[479,31,403,33],[479,34,403,36],[479,42,403,44,"options"],[479,49,403,51],[479,54,403,56],[479,58,403,60],[479,62,403,64,"options"],[479,69,403,71],[479,74,403,76],[479,79,403,81],[479,80,403,82],[479,83,403,85],[479,88,403,90],[479,89,403,91],[479,92,403,94,"options"],[479,99,403,101],[479,100,403,102,"transform"],[479,109,403,111],[479,110,403,112],[479,115,403,117],[479,126,403,128],[480,6,404,8],[480,12,404,14,"renderPath"],[480,22,404,24],[480,25,404,27,"wantsTransformation"],[480,44,404,46],[480,47,404,49],[480,61,404,63],[480,64,404,66],[480,72,404,74],[481,6,405,8],[481,12,405,14,"transformationQuery"],[481,31,405,33],[481,34,405,36],[481,38,405,40],[481,39,405,41,"transformOptsToQueryString"],[481,65,405,67],[481,66,405,68],[481,67,405,69,"options"],[481,74,405,76],[481,79,405,81],[481,83,405,85],[481,87,405,89,"options"],[481,94,405,96],[481,99,405,101],[481,104,405,106],[481,105,405,107],[481,108,405,110],[481,113,405,115],[481,114,405,116],[481,117,405,119,"options"],[481,124,405,126],[481,125,405,127,"transform"],[481,134,405,136],[481,139,405,141],[481,140,405,142],[481,141,405,143],[481,142,405,144],[482,6,406,8],[482,10,406,12,"transformationQuery"],[482,29,406,31],[482,34,406,36],[482,36,406,38],[482,38,406,40],[483,8,407,12,"_queryString"],[483,20,407,24],[483,21,407,25,"push"],[483,25,407,29],[483,26,407,30,"transformationQuery"],[483,45,407,49],[483,46,407,50],[484,6,408,8],[485,6,409,8],[485,10,409,12,"queryString"],[485,21,409,23],[485,24,409,26,"_queryString"],[485,36,409,38],[485,37,409,39,"join"],[485,41,409,43],[485,42,409,44],[485,45,409,47],[485,46,409,48],[486,6,410,8],[486,10,410,12,"queryString"],[486,21,410,23],[486,26,410,28],[486,28,410,30],[486,30,410,32],[487,8,411,12,"queryString"],[487,19,411,23],[487,22,411,26],[487,26,411,30,"queryString"],[487,37,411,41],[487,39,411,43],[488,6,412,8],[489,6,413,8],[489,13,413,15],[490,8,414,12,"data"],[490,12,414,16],[490,14,414,18],[491,10,414,20,"publicUrl"],[491,19,414,29],[491,21,414,31,"encodeURI"],[491,30,414,40],[491,31,414,41],[491,34,414,44],[491,38,414,48],[491,39,414,49,"url"],[491,42,414,52],[491,46,414,56,"renderPath"],[491,56,414,66],[491,67,414,77,"_path"],[491,72,414,82],[491,75,414,85,"queryString"],[491,86,414,96],[491,88,414,98],[492,8,414,100],[493,6,415,8],[493,7,415,9],[494,4,416,4],[495,4,417,4],[496,0,418,0],[497,0,419,0],[498,0,420,0],[499,0,421,0],[500,4,422,4,"remove"],[500,10,422,10,"remove"],[500,11,422,11,"paths"],[500,16,422,16],[500,18,422,18],[501,6,423,8],[501,13,423,15],[501,17,423,15,"__awaiter"],[501,33,423,24],[501,35,423,25],[501,39,423,29],[501,41,423,31],[501,46,423,36],[501,47,423,37],[501,49,423,39],[501,54,423,44],[501,55,423,45],[501,57,423,47],[501,70,423,60],[502,8,424,12],[502,12,424,16],[503,10,425,16],[503,16,425,22,"data"],[503,20,425,26],[503,23,425,29],[503,29,425,35],[503,33,425,35,"remove"],[503,46,425,41],[503,48,425,42],[503,52,425,46],[503,53,425,47,"fetch"],[503,58,425,52],[503,60,425,54],[503,63,425,57],[503,67,425,61],[503,68,425,62,"url"],[503,71,425,65],[503,82,425,76],[503,86,425,80],[503,87,425,81,"bucketId"],[503,95,425,89],[503,97,425,91],[503,99,425,93],[504,12,425,95,"prefixes"],[504,20,425,103],[504,22,425,105,"paths"],[505,10,425,111],[505,11,425,112],[505,13,425,114],[506,12,425,116,"headers"],[506,19,425,123],[506,21,425,125],[506,25,425,129],[506,26,425,130,"headers"],[507,10,425,138],[507,11,425,139],[507,12,425,140],[508,10,426,16],[508,17,426,23],[509,12,426,25,"data"],[509,16,426,29],[510,12,426,31,"error"],[510,17,426,36],[510,19,426,38],[511,10,426,43],[511,11,426,44],[512,8,427,12],[512,9,427,13],[512,10,428,12],[512,17,428,19,"error"],[512,22,428,24],[512,24,428,26],[513,10,429,16],[513,14,429,20],[513,18,429,24],[513,19,429,25,"shouldThrowOnError"],[513,37,429,43],[513,39,429,45],[514,12,430,20],[514,18,430,26,"error"],[514,23,430,31],[515,10,431,16],[516,10,432,16],[516,14,432,20],[516,18,432,20,"isStorageError"],[516,40,432,34],[516,42,432,35,"error"],[516,47,432,40],[516,48,432,41],[516,50,432,43],[517,12,433,20],[517,19,433,27],[518,14,433,29,"data"],[518,18,433,33],[518,20,433,35],[518,24,433,39],[519,14,433,41,"error"],[520,12,433,47],[520,13,433,48],[521,10,434,16],[522,10,435,16],[522,16,435,22,"error"],[522,21,435,27],[523,8,436,12],[524,6,437,8],[524,7,437,9],[524,8,437,10],[525,4,438,4],[526,4,439,4],[527,0,440,0],[528,0,441,0],[529,0,442,0],[530,4,443,4],[531,4,444,4],[532,4,445,4],[533,4,446,4],[534,4,447,4],[535,4,448,4],[536,4,449,4],[537,4,450,4],[538,4,451,4],[539,4,452,4],[540,4,453,4],[541,4,454,4],[542,4,455,4],[543,4,456,4],[544,4,457,4],[545,4,458,4],[546,4,459,4],[547,4,460,4],[548,4,461,4],[549,4,462,4],[550,4,463,4],[551,4,464,4],[552,4,465,4],[553,0,466,0],[554,0,467,0],[555,0,468,0],[556,0,469,0],[557,4,470,4],[558,4,471,4],[559,4,472,4],[560,4,473,4],[561,4,474,4],[562,4,475,4],[563,4,476,4],[564,4,477,4],[565,4,478,4],[566,4,479,4],[567,4,480,4],[568,4,481,4],[569,4,482,4],[570,4,483,4],[571,4,484,4],[572,4,485,4],[573,4,486,4],[574,4,487,4],[575,4,488,4],[576,4,489,4],[577,4,490,4],[578,4,491,4],[579,4,492,4],[580,4,493,4],[581,4,494,4],[582,4,495,4],[583,4,496,4],[584,4,497,4],[585,4,498,4],[586,0,499,0],[587,0,500,0],[588,0,501,0],[589,0,502,0],[590,4,503,4,"list"],[590,8,503,8,"list"],[590,9,503,9,"path"],[590,13,503,13],[590,15,503,15,"options"],[590,22,503,22],[590,24,503,24,"parameters"],[590,34,503,34],[590,36,503,36],[591,6,504,8],[591,13,504,15],[591,17,504,15,"__awaiter"],[591,33,504,24],[591,35,504,25],[591,39,504,29],[591,41,504,31],[591,46,504,36],[591,47,504,37],[591,49,504,39],[591,54,504,44],[591,55,504,45],[591,57,504,47],[591,70,504,60],[592,8,505,12],[592,12,505,16],[593,10,506,16],[593,16,506,22,"body"],[593,20,506,26],[593,23,506,29,"Object"],[593,29,506,35],[593,30,506,36,"assign"],[593,36,506,42],[593,37,506,43,"Object"],[593,43,506,49],[593,44,506,50,"assign"],[593,50,506,56],[593,51,506,57,"Object"],[593,57,506,63],[593,58,506,64,"assign"],[593,64,506,70],[593,65,506,71],[593,66,506,72],[593,67,506,73],[593,69,506,75,"DEFAULT_SEARCH_OPTIONS"],[593,91,506,97],[593,92,506,98],[593,94,506,100,"options"],[593,101,506,107],[593,102,506,108],[593,104,506,110],[594,12,506,112,"prefix"],[594,18,506,118],[594,20,506,120,"path"],[594,24,506,124],[594,28,506,128],[595,10,506,131],[595,11,506,132],[595,12,506,133],[596,10,507,16],[596,16,507,22,"data"],[596,20,507,26],[596,23,507,29],[596,29,507,35],[596,33,507,35,"post"],[596,44,507,39],[596,46,507,40],[596,50,507,44],[596,51,507,45,"fetch"],[596,56,507,50],[596,58,507,52],[596,61,507,55],[596,65,507,59],[596,66,507,60,"url"],[596,69,507,63],[596,85,507,79],[596,89,507,83],[596,90,507,84,"bucketId"],[596,98,507,92],[596,100,507,94],[596,102,507,96,"body"],[596,106,507,100],[596,108,507,102],[597,12,507,104,"headers"],[597,19,507,111],[597,21,507,113],[597,25,507,117],[597,26,507,118,"headers"],[598,10,507,126],[598,11,507,127],[598,13,507,129,"parameters"],[598,23,507,139],[598,24,507,140],[599,10,508,16],[599,17,508,23],[600,12,508,25,"data"],[600,16,508,29],[601,12,508,31,"error"],[601,17,508,36],[601,19,508,38],[602,10,508,43],[602,11,508,44],[603,8,509,12],[603,9,509,13],[603,10,510,12],[603,17,510,19,"error"],[603,22,510,24],[603,24,510,26],[604,10,511,16],[604,14,511,20],[604,18,511,24],[604,19,511,25,"shouldThrowOnError"],[604,37,511,43],[604,39,511,45],[605,12,512,20],[605,18,512,26,"error"],[605,23,512,31],[606,10,513,16],[607,10,514,16],[607,14,514,20],[607,18,514,20,"isStorageError"],[607,40,514,34],[607,42,514,35,"error"],[607,47,514,40],[607,48,514,41],[607,50,514,43],[608,12,515,20],[608,19,515,27],[609,14,515,29,"data"],[609,18,515,33],[609,20,515,35],[609,24,515,39],[610,14,515,41,"error"],[611,12,515,47],[611,13,515,48],[612,10,516,16],[613,10,517,16],[613,16,517,22,"error"],[613,21,517,27],[614,8,518,12],[615,6,519,8],[615,7,519,9],[615,8,519,10],[616,4,520,4],[617,4,521,4],[618,0,522,0],[619,0,523,0],[620,0,524,0],[621,0,525,0],[622,4,526,4,"listV2"],[622,10,526,10,"listV2"],[622,11,526,11,"options"],[622,18,526,18],[622,20,526,20,"parameters"],[622,30,526,30],[622,32,526,32],[623,6,527,8],[623,13,527,15],[623,17,527,15,"__awaiter"],[623,33,527,24],[623,35,527,25],[623,39,527,29],[623,41,527,31],[623,46,527,36],[623,47,527,37],[623,49,527,39],[623,54,527,44],[623,55,527,45],[623,57,527,47],[623,70,527,60],[624,8,528,12],[624,12,528,16],[625,10,529,16],[625,16,529,22,"body"],[625,20,529,26],[625,23,529,29,"Object"],[625,29,529,35],[625,30,529,36,"assign"],[625,36,529,42],[625,37,529,43],[625,38,529,44],[625,39,529,45],[625,41,529,47,"options"],[625,48,529,54],[625,49,529,55],[626,10,530,16],[626,16,530,22,"data"],[626,20,530,26],[626,23,530,29],[626,29,530,35],[626,33,530,35,"post"],[626,44,530,39],[626,46,530,40],[626,50,530,44],[626,51,530,45,"fetch"],[626,56,530,50],[626,58,530,52],[626,61,530,55],[626,65,530,59],[626,66,530,60,"url"],[626,69,530,63],[626,88,530,82],[626,92,530,86],[626,93,530,87,"bucketId"],[626,101,530,95],[626,103,530,97],[626,105,530,99,"body"],[626,109,530,103],[626,111,530,105],[627,12,530,107,"headers"],[627,19,530,114],[627,21,530,116],[627,25,530,120],[627,26,530,121,"headers"],[628,10,530,129],[628,11,530,130],[628,13,530,132,"parameters"],[628,23,530,142],[628,24,530,143],[629,10,531,16],[629,17,531,23],[630,12,531,25,"data"],[630,16,531,29],[631,12,531,31,"error"],[631,17,531,36],[631,19,531,38],[632,10,531,43],[632,11,531,44],[633,8,532,12],[633,9,532,13],[633,10,533,12],[633,17,533,19,"error"],[633,22,533,24],[633,24,533,26],[634,10,534,16],[634,14,534,20],[634,18,534,24],[634,19,534,25,"shouldThrowOnError"],[634,37,534,43],[634,39,534,45],[635,12,535,20],[635,18,535,26,"error"],[635,23,535,31],[636,10,536,16],[637,10,537,16],[637,14,537,20],[637,18,537,20,"isStorageError"],[637,40,537,34],[637,42,537,35,"error"],[637,47,537,40],[637,48,537,41],[637,50,537,43],[638,12,538,20],[638,19,538,27],[639,14,538,29,"data"],[639,18,538,33],[639,20,538,35],[639,24,538,39],[640,14,538,41,"error"],[641,12,538,47],[641,13,538,48],[642,10,539,16],[643,10,540,16],[643,16,540,22,"error"],[643,21,540,27],[644,8,541,12],[645,6,542,8],[645,7,542,9],[645,8,542,10],[646,4,543,4],[647,4,544,4,"encodeMetadata"],[647,18,544,18,"encodeMetadata"],[647,19,544,19,"metadata"],[647,27,544,27],[647,29,544,29],[648,6,545,8],[648,13,545,15,"JSON"],[648,17,545,19],[648,18,545,20,"stringify"],[648,27,545,29],[648,28,545,30,"metadata"],[648,36,545,38],[648,37,545,39],[649,4,546,4],[650,4,547,4,"toBase64"],[650,12,547,12,"toBase64"],[650,13,547,13,"data"],[650,17,547,17],[650,19,547,19],[651,6,548,8],[651,10,548,12],[651,17,548,19,"Buffer"],[651,23,548,25],[651,28,548,30],[651,39,548,41],[651,41,548,43],[652,8,549,12],[652,15,549,19,"Buffer"],[652,21,549,25],[652,22,549,26,"from"],[652,26,549,30],[652,27,549,31,"data"],[652,31,549,35],[652,32,549,36],[652,33,549,37,"toString"],[652,41,549,45],[652,42,549,46],[652,50,549,54],[652,51,549,55],[653,6,550,8],[654,6,551,8],[654,13,551,15,"btoa"],[654,17,551,19],[654,18,551,20,"data"],[654,22,551,24],[654,23,551,25],[655,4,552,4],[656,4,553,4,"_getFinalPath"],[656,17,553,17,"_getFinalPath"],[656,18,553,18,"path"],[656,22,553,22],[656,24,553,24],[657,6,554,8],[657,13,554,15],[657,16,554,18],[657,20,554,22],[657,21,554,23,"bucketId"],[657,29,554,31],[657,33,554,35,"path"],[657,37,554,39],[657,38,554,40,"replace"],[657,45,554,47],[657,46,554,48],[657,52,554,54],[657,54,554,56],[657,56,554,58],[657,57,554,59],[657,59,554,61],[658,4,555,4],[659,4,556,4,"_removeEmptyFolders"],[659,23,556,23,"_removeEmptyFolders"],[659,24,556,24,"path"],[659,28,556,28],[659,30,556,30],[660,6,557,8],[660,13,557,15,"path"],[660,17,557,19],[660,18,557,20,"replace"],[660,25,557,27],[660,26,557,28],[660,36,557,38],[660,38,557,40],[660,40,557,42],[660,41,557,43],[660,42,557,44,"replace"],[660,49,557,51],[660,50,557,52],[660,56,557,58],[660,58,557,60],[660,61,557,63],[660,62,557,64],[661,4,558,4],[662,4,559,4,"transformOptsToQueryString"],[662,30,559,30,"transformOptsToQueryString"],[662,31,559,31,"transform"],[662,40,559,40],[662,42,559,42],[663,6,560,8],[663,12,560,14,"params"],[663,18,560,20],[663,21,560,23],[663,23,560,25],[664,6,561,8],[664,10,561,12,"transform"],[664,19,561,21],[664,20,561,22,"width"],[664,25,561,27],[664,27,561,29],[665,8,562,12,"params"],[665,14,562,18],[665,15,562,19,"push"],[665,19,562,23],[665,20,562,24],[665,29,562,33,"transform"],[665,38,562,42],[665,39,562,43,"width"],[665,44,562,48],[665,46,562,50],[665,47,562,51],[666,6,563,8],[667,6,564,8],[667,10,564,12,"transform"],[667,19,564,21],[667,20,564,22,"height"],[667,26,564,28],[667,28,564,30],[668,8,565,12,"params"],[668,14,565,18],[668,15,565,19,"push"],[668,19,565,23],[668,20,565,24],[668,30,565,34,"transform"],[668,39,565,43],[668,40,565,44,"height"],[668,46,565,50],[668,48,565,52],[668,49,565,53],[669,6,566,8],[670,6,567,8],[670,10,567,12,"transform"],[670,19,567,21],[670,20,567,22,"resize"],[670,26,567,28],[670,28,567,30],[671,8,568,12,"params"],[671,14,568,18],[671,15,568,19,"push"],[671,19,568,23],[671,20,568,24],[671,30,568,34,"transform"],[671,39,568,43],[671,40,568,44,"resize"],[671,46,568,50],[671,48,568,52],[671,49,568,53],[672,6,569,8],[673,6,570,8],[673,10,570,12,"transform"],[673,19,570,21],[673,20,570,22,"format"],[673,26,570,28],[673,28,570,30],[674,8,571,12,"params"],[674,14,571,18],[674,15,571,19,"push"],[674,19,571,23],[674,20,571,24],[674,30,571,34,"transform"],[674,39,571,43],[674,40,571,44,"format"],[674,46,571,50],[674,48,571,52],[674,49,571,53],[675,6,572,8],[676,6,573,8],[676,10,573,12,"transform"],[676,19,573,21],[676,20,573,22,"quality"],[676,27,573,29],[676,29,573,31],[677,8,574,12,"params"],[677,14,574,18],[677,15,574,19,"push"],[677,19,574,23],[677,20,574,24],[677,31,574,35,"transform"],[677,40,574,44],[677,41,574,45,"quality"],[677,48,574,52],[677,50,574,54],[677,51,574,55],[678,6,575,8],[679,6,576,8],[679,13,576,15,"params"],[679,19,576,21],[679,20,576,22,"join"],[679,24,576,26],[679,25,576,27],[679,28,576,30],[679,29,576,31],[680,4,577,4],[681,2,578,0],[682,2,578,1,"exports"],[682,9,578,1],[682,10,578,1,"default"],[682,17,578,1],[682,20,578,1,"StorageFileApi"],[682,34,578,1],[683,0,578,1],[683,3]],"functionMap":{"names":["<global>","StorageFileApi","constructor","throwOnError","uploadOrUpdate","__awaiter$argument_3","upload","uploadToSignedUrl","createSignedUploadUrl","update","move","copy","createSignedUrl","createSignedUrls","data.map$argument_0","download","downloadFn","info","exists","getPublicUrl","remove","list","listV2","encodeMetadata","toBase64","_getFinalPath","_removeEmptyFolders","transformOptsToQueryString"],"mappings":"AAA;eCkB;ICC;KDM;IEI;KFG;IGQ;+CCC;SDiD;KHC;IKO;+CDC;SCE;KLC;IMO;+CFC;SEsC;KNC;IOQ;+CHC;SGwB;KPC;IQO;+CJC;SIE;KRC;ISQ;+CLC;SKmB;KTC;IUQ;+CNC;SMmB;KVC;IWS;+CPC;SOoB;KXC;IYQ;+CRC;mCSO;sCTE;SQa;KZC;IcO;2BCM;UDG;KdE;IgBK;+CZC;SYiB;KhBC;IiBK;+CbC;SaoB;KjBC;IkBS;KlBsB;ImBM;+CfC;Sec;KnBC;IoBiE;+ChBC;SgBe;KpBC;IqBM;+CjBC;SiBe;KrBC;IsBC;KtBE;IuBC;KvBK;IwBC;KxBE;IyBC;KzBE;I0BC;K1BkB;CDC"}},"type":"js/module"}]}