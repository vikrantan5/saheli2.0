{"dependencies":[{"name":"tslib","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":34,"index":34}}],"key":"8R25577gwLd3n1hFG9VYnRLV9eE=","exportNames":["*"]}},{"name":"./constants","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":35},"end":{"line":2,"column":46,"index":81}}],"key":"waDaw5D7vDr2hRFu0z1BqRCTzP4=","exportNames":["*"]}},{"name":"./errors","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":82},"end":{"line":3,"column":49,"index":131}}],"key":"rEld05quROH+iA6QLT6kkvqJ/qc=","exportNames":["*"]}},{"name":"./fetch","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":132},"end":{"line":4,"column":31,"index":163}}],"key":"530RtYCmKsE3te4bFHMv0Zip4Vc=","exportNames":["*"]}},{"name":"./helpers","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":164},"end":{"line":5,"column":41,"index":205}}],"key":"kg0rJsyHf+Iyf4Z1AFOYGhKLkW4=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  var _tslib = require(_dependencyMap[0], \"tslib\");\n  var _constants = require(_dependencyMap[1], \"./constants\");\n  var _errors = require(_dependencyMap[2], \"./errors\");\n  var _fetch = require(_dependencyMap[3], \"./fetch\");\n  var _helpers = require(_dependencyMap[4], \"./helpers\");\n  /**\n   * API class for managing Vector Buckets\n   * Provides methods for creating, reading, listing, and deleting vector buckets\n   */\n  class VectorBucketApi {\n    /**\n     * Creates a new VectorBucketApi instance\n     * @param url - The base URL for the storage vectors API\n     * @param headers - HTTP headers to include in requests\n     * @param fetch - Optional custom fetch implementation\n     */\n    constructor(url, headers = {}, fetch) {\n      this.shouldThrowOnError = false;\n      this.url = url.replace(/\\/$/, '');\n      this.headers = Object.assign(Object.assign({}, _constants.DEFAULT_HEADERS), headers);\n      this.fetch = (0, _helpers.resolveFetch)(fetch);\n    }\n    /**\n     * Enable throwing errors instead of returning them in the response\n     * When enabled, failed operations will throw instead of returning { data: null, error }\n     *\n     * @returns This instance for method chaining\n     * @example\n     * ```typescript\n     * const client = new VectorBucketApi(url, headers)\n     * client.throwOnError()\n     * const { data } = await client.createBucket('my-bucket') // throws on error\n     * ```\n     */\n    throwOnError() {\n      this.shouldThrowOnError = true;\n      return this;\n    }\n    /**\n     * Creates a new vector bucket\n     * Vector buckets are containers for vector indexes and their data\n     *\n     * @param vectorBucketName - Unique name for the vector bucket\n     * @returns Promise with empty response on success or error\n     *\n     * @throws {StorageVectorsApiError} With code:\n     * - `S3VectorConflictException` if bucket already exists (HTTP 409)\n     * - `S3VectorMaxBucketsExceeded` if quota exceeded (HTTP 400)\n     * - `InternalError` for server errors (HTTP 500)\n     *\n     * @example\n     * ```typescript\n     * const { data, error } = await client.createBucket('embeddings-prod')\n     * if (error) {\n     *   console.error('Failed to create bucket:', error.message)\n     * }\n     * ```\n     */\n    createBucket(vectorBucketName) {\n      return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {\n        try {\n          const data = yield (0, _fetch.post)(this.fetch, `${this.url}/CreateVectorBucket`, {\n            vectorBucketName\n          }, {\n            headers: this.headers\n          });\n          return {\n            data: data || {},\n            error: null\n          };\n        } catch (error) {\n          if (this.shouldThrowOnError) {\n            throw error;\n          }\n          if ((0, _errors.isStorageVectorsError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * Retrieves metadata for a specific vector bucket\n     * Returns bucket configuration including encryption settings and creation time\n     *\n     * @param vectorBucketName - Name of the vector bucket to retrieve\n     * @returns Promise with bucket metadata or error\n     *\n     * @throws {StorageVectorsApiError} With code:\n     * - `S3VectorNotFoundException` if bucket doesn't exist (HTTP 404)\n     * - `InternalError` for server errors (HTTP 500)\n     *\n     * @example\n     * ```typescript\n     * const { data, error } = await client.getBucket('embeddings-prod')\n     * if (data) {\n     *   console.log('Bucket created at:', new Date(data.vectorBucket.creationTime! * 1000))\n     * }\n     * ```\n     */\n    getBucket(vectorBucketName) {\n      return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {\n        try {\n          const data = yield (0, _fetch.post)(this.fetch, `${this.url}/GetVectorBucket`, {\n            vectorBucketName\n          }, {\n            headers: this.headers\n          });\n          return {\n            data,\n            error: null\n          };\n        } catch (error) {\n          if (this.shouldThrowOnError) {\n            throw error;\n          }\n          if ((0, _errors.isStorageVectorsError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * Lists vector buckets with optional filtering and pagination\n     * Supports prefix-based filtering and paginated results\n     *\n     * @param options - Listing options\n     * @param options.prefix - Filter buckets by name prefix\n     * @param options.maxResults - Maximum results per page (default: 100)\n     * @param options.nextToken - Pagination token from previous response\n     * @returns Promise with list of buckets and pagination token\n     *\n     * @throws {StorageVectorsApiError} With code:\n     * - `InternalError` for server errors (HTTP 500)\n     *\n     * @example\n     * ```typescript\n     * // List all buckets with prefix 'prod-'\n     * const { data, error } = await client.listBuckets({ prefix: 'prod-' })\n     * if (data) {\n     *   console.log('Found buckets:', data.buckets.length)\n     *   // Fetch next page if available\n     *   if (data.nextToken) {\n     *     const next = await client.listBuckets({ nextToken: data.nextToken })\n     *   }\n     * }\n     * ```\n     */\n    listBuckets() {\n      return (0, _tslib.__awaiter)(this, arguments, void 0, function* (options = {}) {\n        try {\n          const data = yield (0, _fetch.post)(this.fetch, `${this.url}/ListVectorBuckets`, options, {\n            headers: this.headers\n          });\n          return {\n            data,\n            error: null\n          };\n        } catch (error) {\n          if (this.shouldThrowOnError) {\n            throw error;\n          }\n          if ((0, _errors.isStorageVectorsError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * Deletes a vector bucket\n     * Bucket must be empty before deletion (all indexes must be removed first)\n     *\n     * @param vectorBucketName - Name of the vector bucket to delete\n     * @returns Promise with empty response on success or error\n     *\n     * @throws {StorageVectorsApiError} With code:\n     * - `S3VectorBucketNotEmpty` if bucket contains indexes (HTTP 400)\n     * - `S3VectorNotFoundException` if bucket doesn't exist (HTTP 404)\n     * - `InternalError` for server errors (HTTP 500)\n     *\n     * @example\n     * ```typescript\n     * // Delete all indexes first, then delete bucket\n     * const { error } = await client.deleteBucket('old-bucket')\n     * if (error?.statusCode === 'S3VectorBucketNotEmpty') {\n     *   console.error('Must delete all indexes first')\n     * }\n     * ```\n     */\n    deleteBucket(vectorBucketName) {\n      return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {\n        try {\n          const data = yield (0, _fetch.post)(this.fetch, `${this.url}/DeleteVectorBucket`, {\n            vectorBucketName\n          }, {\n            headers: this.headers\n          });\n          return {\n            data: data || {},\n            error: null\n          };\n        } catch (error) {\n          if (this.shouldThrowOnError) {\n            throw error;\n          }\n          if ((0, _errors.isStorageVectorsError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n  }\n  exports.default = VectorBucketApi;\n});","lineCount":234,"map":[[6,2,1,0],[6,6,1,0,"_tslib"],[6,12,1,0],[6,15,1,0,"require"],[6,22,1,0],[6,23,1,0,"_dependencyMap"],[6,37,1,0],[7,2,2,0],[7,6,2,0,"_constants"],[7,16,2,0],[7,19,2,0,"require"],[7,26,2,0],[7,27,2,0,"_dependencyMap"],[7,41,2,0],[8,2,3,0],[8,6,3,0,"_errors"],[8,13,3,0],[8,16,3,0,"require"],[8,23,3,0],[8,24,3,0,"_dependencyMap"],[8,38,3,0],[9,2,4,0],[9,6,4,0,"_fetch"],[9,12,4,0],[9,15,4,0,"require"],[9,22,4,0],[9,23,4,0,"_dependencyMap"],[9,37,4,0],[10,2,5,0],[10,6,5,0,"_helpers"],[10,14,5,0],[10,17,5,0,"require"],[10,24,5,0],[10,25,5,0,"_dependencyMap"],[10,39,5,0],[11,2,6,0],[12,0,7,0],[13,0,8,0],[14,0,9,0],[15,2,10,15],[15,8,10,21,"VectorBucketApi"],[15,23,10,36],[15,24,10,37],[16,4,11,4],[17,0,12,0],[18,0,13,0],[19,0,14,0],[20,0,15,0],[21,0,16,0],[22,4,17,4,"constructor"],[22,15,17,15,"constructor"],[22,16,17,16,"url"],[22,19,17,19],[22,21,17,21,"headers"],[22,28,17,28],[22,31,17,31],[22,32,17,32],[22,33,17,33],[22,35,17,35,"fetch"],[22,40,17,40],[22,42,17,42],[23,6,18,8],[23,10,18,12],[23,11,18,13,"shouldThrowOnError"],[23,29,18,31],[23,32,18,34],[23,37,18,39],[24,6,19,8],[24,10,19,12],[24,11,19,13,"url"],[24,14,19,16],[24,17,19,19,"url"],[24,20,19,22],[24,21,19,23,"replace"],[24,28,19,30],[24,29,19,31],[24,34,19,36],[24,36,19,38],[24,38,19,40],[24,39,19,41],[25,6,20,8],[25,10,20,12],[25,11,20,13,"headers"],[25,18,20,20],[25,21,20,23,"Object"],[25,27,20,29],[25,28,20,30,"assign"],[25,34,20,36],[25,35,20,37,"Object"],[25,41,20,43],[25,42,20,44,"assign"],[25,48,20,50],[25,49,20,51],[25,50,20,52],[25,51,20,53],[25,53,20,55,"DEFAULT_HEADERS"],[25,79,20,70],[25,80,20,71],[25,82,20,73,"headers"],[25,89,20,80],[25,90,20,81],[26,6,21,8],[26,10,21,12],[26,11,21,13,"fetch"],[26,16,21,18],[26,19,21,21],[26,23,21,21,"resolveFetch"],[26,44,21,33],[26,46,21,34,"fetch"],[26,51,21,39],[26,52,21,40],[27,4,22,4],[28,4,23,4],[29,0,24,0],[30,0,25,0],[31,0,26,0],[32,0,27,0],[33,0,28,0],[34,0,29,0],[35,0,30,0],[36,0,31,0],[37,0,32,0],[38,0,33,0],[39,0,34,0],[40,4,35,4,"throwOnError"],[40,16,35,16,"throwOnError"],[40,17,35,16],[40,19,35,19],[41,6,36,8],[41,10,36,12],[41,11,36,13,"shouldThrowOnError"],[41,29,36,31],[41,32,36,34],[41,36,36,38],[42,6,37,8],[42,13,37,15],[42,17,37,19],[43,4,38,4],[44,4,39,4],[45,0,40,0],[46,0,41,0],[47,0,42,0],[48,0,43,0],[49,0,44,0],[50,0,45,0],[51,0,46,0],[52,0,47,0],[53,0,48,0],[54,0,49,0],[55,0,50,0],[56,0,51,0],[57,0,52,0],[58,0,53,0],[59,0,54,0],[60,0,55,0],[61,0,56,0],[62,0,57,0],[63,0,58,0],[64,4,59,4,"createBucket"],[64,16,59,16,"createBucket"],[64,17,59,17,"vectorBucketName"],[64,33,59,33],[64,35,59,35],[65,6,60,8],[65,13,60,15],[65,17,60,15,"__awaiter"],[65,33,60,24],[65,35,60,25],[65,39,60,29],[65,41,60,31],[65,46,60,36],[65,47,60,37],[65,49,60,39],[65,54,60,44],[65,55,60,45],[65,57,60,47],[65,70,60,60],[66,8,61,12],[66,12,61,16],[67,10,62,16],[67,16,62,22,"data"],[67,20,62,26],[67,23,62,29],[67,29,62,35],[67,33,62,35,"post"],[67,44,62,39],[67,46,62,40],[67,50,62,44],[67,51,62,45,"fetch"],[67,56,62,50],[67,58,62,52],[67,61,62,55],[67,65,62,59],[67,66,62,60,"url"],[67,69,62,63],[67,90,62,84],[67,92,62,86],[68,12,62,88,"vectorBucketName"],[69,10,62,105],[69,11,62,106],[69,13,62,108],[70,12,62,110,"headers"],[70,19,62,117],[70,21,62,119],[70,25,62,123],[70,26,62,124,"headers"],[71,10,62,132],[71,11,62,133],[71,12,62,134],[72,10,63,16],[72,17,63,23],[73,12,63,25,"data"],[73,16,63,29],[73,18,63,31,"data"],[73,22,63,35],[73,26,63,39],[73,27,63,40],[73,28,63,41],[74,12,63,43,"error"],[74,17,63,48],[74,19,63,50],[75,10,63,55],[75,11,63,56],[76,8,64,12],[76,9,64,13],[76,10,65,12],[76,17,65,19,"error"],[76,22,65,24],[76,24,65,26],[77,10,66,16],[77,14,66,20],[77,18,66,24],[77,19,66,25,"shouldThrowOnError"],[77,37,66,43],[77,39,66,45],[78,12,67,20],[78,18,67,26,"error"],[78,23,67,31],[79,10,68,16],[80,10,69,16],[80,14,69,20],[80,18,69,20,"isStorageVectorsError"],[80,47,69,41],[80,49,69,42,"error"],[80,54,69,47],[80,55,69,48],[80,57,69,50],[81,12,70,20],[81,19,70,27],[82,14,70,29,"data"],[82,18,70,33],[82,20,70,35],[82,24,70,39],[83,14,70,41,"error"],[84,12,70,47],[84,13,70,48],[85,10,71,16],[86,10,72,16],[86,16,72,22,"error"],[86,21,72,27],[87,8,73,12],[88,6,74,8],[88,7,74,9],[88,8,74,10],[89,4,75,4],[90,4,76,4],[91,0,77,0],[92,0,78,0],[93,0,79,0],[94,0,80,0],[95,0,81,0],[96,0,82,0],[97,0,83,0],[98,0,84,0],[99,0,85,0],[100,0,86,0],[101,0,87,0],[102,0,88,0],[103,0,89,0],[104,0,90,0],[105,0,91,0],[106,0,92,0],[107,0,93,0],[108,0,94,0],[109,4,95,4,"getBucket"],[109,13,95,13,"getBucket"],[109,14,95,14,"vectorBucketName"],[109,30,95,30],[109,32,95,32],[110,6,96,8],[110,13,96,15],[110,17,96,15,"__awaiter"],[110,33,96,24],[110,35,96,25],[110,39,96,29],[110,41,96,31],[110,46,96,36],[110,47,96,37],[110,49,96,39],[110,54,96,44],[110,55,96,45],[110,57,96,47],[110,70,96,60],[111,8,97,12],[111,12,97,16],[112,10,98,16],[112,16,98,22,"data"],[112,20,98,26],[112,23,98,29],[112,29,98,35],[112,33,98,35,"post"],[112,44,98,39],[112,46,98,40],[112,50,98,44],[112,51,98,45,"fetch"],[112,56,98,50],[112,58,98,52],[112,61,98,55],[112,65,98,59],[112,66,98,60,"url"],[112,69,98,63],[112,87,98,81],[112,89,98,83],[113,12,98,85,"vectorBucketName"],[114,10,98,102],[114,11,98,103],[114,13,98,105],[115,12,98,107,"headers"],[115,19,98,114],[115,21,98,116],[115,25,98,120],[115,26,98,121,"headers"],[116,10,98,129],[116,11,98,130],[116,12,98,131],[117,10,99,16],[117,17,99,23],[118,12,99,25,"data"],[118,16,99,29],[119,12,99,31,"error"],[119,17,99,36],[119,19,99,38],[120,10,99,43],[120,11,99,44],[121,8,100,12],[121,9,100,13],[121,10,101,12],[121,17,101,19,"error"],[121,22,101,24],[121,24,101,26],[122,10,102,16],[122,14,102,20],[122,18,102,24],[122,19,102,25,"shouldThrowOnError"],[122,37,102,43],[122,39,102,45],[123,12,103,20],[123,18,103,26,"error"],[123,23,103,31],[124,10,104,16],[125,10,105,16],[125,14,105,20],[125,18,105,20,"isStorageVectorsError"],[125,47,105,41],[125,49,105,42,"error"],[125,54,105,47],[125,55,105,48],[125,57,105,50],[126,12,106,20],[126,19,106,27],[127,14,106,29,"data"],[127,18,106,33],[127,20,106,35],[127,24,106,39],[128,14,106,41,"error"],[129,12,106,47],[129,13,106,48],[130,10,107,16],[131,10,108,16],[131,16,108,22,"error"],[131,21,108,27],[132,8,109,12],[133,6,110,8],[133,7,110,9],[133,8,110,10],[134,4,111,4],[135,4,112,4],[136,0,113,0],[137,0,114,0],[138,0,115,0],[139,0,116,0],[140,0,117,0],[141,0,118,0],[142,0,119,0],[143,0,120,0],[144,0,121,0],[145,0,122,0],[146,0,123,0],[147,0,124,0],[148,0,125,0],[149,0,126,0],[150,0,127,0],[151,0,128,0],[152,0,129,0],[153,0,130,0],[154,0,131,0],[155,0,132,0],[156,0,133,0],[157,0,134,0],[158,0,135,0],[159,0,136,0],[160,0,137,0],[161,4,138,4,"listBuckets"],[161,15,138,15,"listBuckets"],[161,16,138,15],[161,18,138,18],[162,6,139,8],[162,13,139,15],[162,17,139,15,"__awaiter"],[162,33,139,24],[162,35,139,25],[162,39,139,29],[162,41,139,31,"arguments"],[162,50,139,40],[162,52,139,42],[162,57,139,47],[162,58,139,48],[162,60,139,50],[162,71,139,61,"options"],[162,78,139,68],[162,81,139,71],[162,82,139,72],[162,83,139,73],[162,85,139,75],[163,8,140,12],[163,12,140,16],[164,10,141,16],[164,16,141,22,"data"],[164,20,141,26],[164,23,141,29],[164,29,141,35],[164,33,141,35,"post"],[164,44,141,39],[164,46,141,40],[164,50,141,44],[164,51,141,45,"fetch"],[164,56,141,50],[164,58,141,52],[164,61,141,55],[164,65,141,59],[164,66,141,60,"url"],[164,69,141,63],[164,89,141,83],[164,91,141,85,"options"],[164,98,141,92],[164,100,141,94],[165,12,142,20,"headers"],[165,19,142,27],[165,21,142,29],[165,25,142,33],[165,26,142,34,"headers"],[166,10,143,16],[166,11,143,17],[166,12,143,18],[167,10,144,16],[167,17,144,23],[168,12,144,25,"data"],[168,16,144,29],[169,12,144,31,"error"],[169,17,144,36],[169,19,144,38],[170,10,144,43],[170,11,144,44],[171,8,145,12],[171,9,145,13],[171,10,146,12],[171,17,146,19,"error"],[171,22,146,24],[171,24,146,26],[172,10,147,16],[172,14,147,20],[172,18,147,24],[172,19,147,25,"shouldThrowOnError"],[172,37,147,43],[172,39,147,45],[173,12,148,20],[173,18,148,26,"error"],[173,23,148,31],[174,10,149,16],[175,10,150,16],[175,14,150,20],[175,18,150,20,"isStorageVectorsError"],[175,47,150,41],[175,49,150,42,"error"],[175,54,150,47],[175,55,150,48],[175,57,150,50],[176,12,151,20],[176,19,151,27],[177,14,151,29,"data"],[177,18,151,33],[177,20,151,35],[177,24,151,39],[178,14,151,41,"error"],[179,12,151,47],[179,13,151,48],[180,10,152,16],[181,10,153,16],[181,16,153,22,"error"],[181,21,153,27],[182,8,154,12],[183,6,155,8],[183,7,155,9],[183,8,155,10],[184,4,156,4],[185,4,157,4],[186,0,158,0],[187,0,159,0],[188,0,160,0],[189,0,161,0],[190,0,162,0],[191,0,163,0],[192,0,164,0],[193,0,165,0],[194,0,166,0],[195,0,167,0],[196,0,168,0],[197,0,169,0],[198,0,170,0],[199,0,171,0],[200,0,172,0],[201,0,173,0],[202,0,174,0],[203,0,175,0],[204,0,176,0],[205,0,177,0],[206,4,178,4,"deleteBucket"],[206,16,178,16,"deleteBucket"],[206,17,178,17,"vectorBucketName"],[206,33,178,33],[206,35,178,35],[207,6,179,8],[207,13,179,15],[207,17,179,15,"__awaiter"],[207,33,179,24],[207,35,179,25],[207,39,179,29],[207,41,179,31],[207,46,179,36],[207,47,179,37],[207,49,179,39],[207,54,179,44],[207,55,179,45],[207,57,179,47],[207,70,179,60],[208,8,180,12],[208,12,180,16],[209,10,181,16],[209,16,181,22,"data"],[209,20,181,26],[209,23,181,29],[209,29,181,35],[209,33,181,35,"post"],[209,44,181,39],[209,46,181,40],[209,50,181,44],[209,51,181,45,"fetch"],[209,56,181,50],[209,58,181,52],[209,61,181,55],[209,65,181,59],[209,66,181,60,"url"],[209,69,181,63],[209,90,181,84],[209,92,181,86],[210,12,181,88,"vectorBucketName"],[211,10,181,105],[211,11,181,106],[211,13,181,108],[212,12,181,110,"headers"],[212,19,181,117],[212,21,181,119],[212,25,181,123],[212,26,181,124,"headers"],[213,10,181,132],[213,11,181,133],[213,12,181,134],[214,10,182,16],[214,17,182,23],[215,12,182,25,"data"],[215,16,182,29],[215,18,182,31,"data"],[215,22,182,35],[215,26,182,39],[215,27,182,40],[215,28,182,41],[216,12,182,43,"error"],[216,17,182,48],[216,19,182,50],[217,10,182,55],[217,11,182,56],[218,8,183,12],[218,9,183,13],[218,10,184,12],[218,17,184,19,"error"],[218,22,184,24],[218,24,184,26],[219,10,185,16],[219,14,185,20],[219,18,185,24],[219,19,185,25,"shouldThrowOnError"],[219,37,185,43],[219,39,185,45],[220,12,186,20],[220,18,186,26,"error"],[220,23,186,31],[221,10,187,16],[222,10,188,16],[222,14,188,20],[222,18,188,20,"isStorageVectorsError"],[222,47,188,41],[222,49,188,42,"error"],[222,54,188,47],[222,55,188,48],[222,57,188,50],[223,12,189,20],[223,19,189,27],[224,14,189,29,"data"],[224,18,189,33],[224,20,189,35],[224,24,189,39],[225,14,189,41,"error"],[226,12,189,47],[226,13,189,48],[227,10,190,16],[228,10,191,16],[228,16,191,22,"error"],[228,21,191,27],[229,8,192,12],[230,6,193,8],[230,7,193,9],[230,8,193,10],[231,4,194,4],[232,2,195,0],[233,2,195,1,"exports"],[233,9,195,1],[233,10,195,1,"default"],[233,17,195,1],[233,20,195,1,"VectorBucketApi"],[233,35,195,1],[234,0,195,1],[234,3]],"functionMap":{"names":["<global>","VectorBucketApi","constructor","throwOnError","createBucket","__awaiter$argument_3","getBucket","listBuckets","deleteBucket"],"mappings":"AAA;eCS;ICO;KDK;IEa;KFG;IGqB;+CCC;SDc;KHC;IKoB;+CDC;SCc;KLC;IM2B;kDFC;SEgB;KNC;IOsB;+CHC;SGc;KPC;CDC"}},"type":"js/module"}]}