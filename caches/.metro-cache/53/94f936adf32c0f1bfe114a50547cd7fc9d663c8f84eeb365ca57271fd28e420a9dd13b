{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.base64UrlToUint8Array = base64UrlToUint8Array;\n  exports.byteFromBase64URL = byteFromBase64URL;\n  exports.byteToBase64URL = byteToBase64URL;\n  exports.bytesToBase64URL = bytesToBase64URL;\n  exports.codepointToUTF8 = codepointToUTF8;\n  exports.stringFromBase64URL = stringFromBase64URL;\n  exports.stringFromUTF8 = stringFromUTF8;\n  exports.stringToBase64URL = stringToBase64URL;\n  exports.stringToUTF8 = stringToUTF8;\n  exports.stringToUint8Array = stringToUint8Array;\n  /**\n   * Avoid modifying this file. It's part of\n   * https://github.com/supabase-community/base64url-js.  Submit all fixes on\n   * that repo!\n   */\n  /**\n   * An array of characters that encode 6 bits into a Base64-URL alphabet\n   * character.\n   */\n  const TO_BASE64URL = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'.split('');\n  /**\n   * An array of characters that can appear in a Base64-URL encoded string but\n   * should be ignored.\n   */\n  const IGNORE_BASE64URL = ' \\t\\n\\r='.split('');\n  /**\n   * An array of 128 numbers that map a Base64-URL character to 6 bits, or if -2\n   * used to skip the character, or if -1 used to error out.\n   */\n  const FROM_BASE64URL = (() => {\n    const charMap = new Array(128);\n    for (let i = 0; i < charMap.length; i += 1) {\n      charMap[i] = -1;\n    }\n    for (let i = 0; i < IGNORE_BASE64URL.length; i += 1) {\n      charMap[IGNORE_BASE64URL[i].charCodeAt(0)] = -2;\n    }\n    for (let i = 0; i < TO_BASE64URL.length; i += 1) {\n      charMap[TO_BASE64URL[i].charCodeAt(0)] = i;\n    }\n    return charMap;\n  })();\n  /**\n   * Converts a byte to a Base64-URL string.\n   *\n   * @param byte The byte to convert, or null to flush at the end of the byte sequence.\n   * @param state The Base64 conversion state. Pass an initial value of `{ queue: 0, queuedBits: 0 }`.\n   * @param emit A function called with the next Base64 character when ready.\n   */\n  function byteToBase64URL(byte, state, emit) {\n    if (byte !== null) {\n      state.queue = state.queue << 8 | byte;\n      state.queuedBits += 8;\n      while (state.queuedBits >= 6) {\n        const pos = state.queue >> state.queuedBits - 6 & 63;\n        emit(TO_BASE64URL[pos]);\n        state.queuedBits -= 6;\n      }\n    } else if (state.queuedBits > 0) {\n      state.queue = state.queue << 6 - state.queuedBits;\n      state.queuedBits = 6;\n      while (state.queuedBits >= 6) {\n        const pos = state.queue >> state.queuedBits - 6 & 63;\n        emit(TO_BASE64URL[pos]);\n        state.queuedBits -= 6;\n      }\n    }\n  }\n  /**\n   * Converts a String char code (extracted using `string.charCodeAt(position)`) to a sequence of Base64-URL characters.\n   *\n   * @param charCode The char code of the JavaScript string.\n   * @param state The Base64 state. Pass an initial value of `{ queue: 0, queuedBits: 0 }`.\n   * @param emit A function called with the next byte.\n   */\n  function byteFromBase64URL(charCode, state, emit) {\n    const bits = FROM_BASE64URL[charCode];\n    if (bits > -1) {\n      // valid Base64-URL character\n      state.queue = state.queue << 6 | bits;\n      state.queuedBits += 6;\n      while (state.queuedBits >= 8) {\n        emit(state.queue >> state.queuedBits - 8 & 0xff);\n        state.queuedBits -= 8;\n      }\n    } else if (bits === -2) {\n      // ignore spaces, tabs, newlines, =\n      return;\n    } else {\n      throw new Error(`Invalid Base64-URL character \"${String.fromCharCode(charCode)}\"`);\n    }\n  }\n  /**\n   * Converts a JavaScript string (which may include any valid character) into a\n   * Base64-URL encoded string. The string is first encoded in UTF-8 which is\n   * then encoded as Base64-URL.\n   *\n   * @param str The string to convert.\n   */\n  function stringToBase64URL(str) {\n    const base64 = [];\n    const emitter = char => {\n      base64.push(char);\n    };\n    const state = {\n      queue: 0,\n      queuedBits: 0\n    };\n    stringToUTF8(str, byte => {\n      byteToBase64URL(byte, state, emitter);\n    });\n    byteToBase64URL(null, state, emitter);\n    return base64.join('');\n  }\n  /**\n   * Converts a Base64-URL encoded string into a JavaScript string. It is assumed\n   * that the underlying string has been encoded as UTF-8.\n   *\n   * @param str The Base64-URL encoded string.\n   */\n  function stringFromBase64URL(str) {\n    const conv = [];\n    const utf8Emit = codepoint => {\n      conv.push(String.fromCodePoint(codepoint));\n    };\n    const utf8State = {\n      utf8seq: 0,\n      codepoint: 0\n    };\n    const b64State = {\n      queue: 0,\n      queuedBits: 0\n    };\n    const byteEmit = byte => {\n      stringFromUTF8(byte, utf8State, utf8Emit);\n    };\n    for (let i = 0; i < str.length; i += 1) {\n      byteFromBase64URL(str.charCodeAt(i), b64State, byteEmit);\n    }\n    return conv.join('');\n  }\n  /**\n   * Converts a Unicode codepoint to a multi-byte UTF-8 sequence.\n   *\n   * @param codepoint The Unicode codepoint.\n   * @param emit      Function which will be called for each UTF-8 byte that represents the codepoint.\n   */\n  function codepointToUTF8(codepoint, emit) {\n    if (codepoint <= 0x7f) {\n      emit(codepoint);\n      return;\n    } else if (codepoint <= 0x7ff) {\n      emit(0xc0 | codepoint >> 6);\n      emit(0x80 | codepoint & 0x3f);\n      return;\n    } else if (codepoint <= 0xffff) {\n      emit(0xe0 | codepoint >> 12);\n      emit(0x80 | codepoint >> 6 & 0x3f);\n      emit(0x80 | codepoint & 0x3f);\n      return;\n    } else if (codepoint <= 0x10ffff) {\n      emit(0xf0 | codepoint >> 18);\n      emit(0x80 | codepoint >> 12 & 0x3f);\n      emit(0x80 | codepoint >> 6 & 0x3f);\n      emit(0x80 | codepoint & 0x3f);\n      return;\n    }\n    throw new Error(`Unrecognized Unicode codepoint: ${codepoint.toString(16)}`);\n  }\n  /**\n   * Converts a JavaScript string to a sequence of UTF-8 bytes.\n   *\n   * @param str  The string to convert to UTF-8.\n   * @param emit Function which will be called for each UTF-8 byte of the string.\n   */\n  function stringToUTF8(str, emit) {\n    for (let i = 0; i < str.length; i += 1) {\n      let codepoint = str.charCodeAt(i);\n      if (codepoint > 0xd7ff && codepoint <= 0xdbff) {\n        // most UTF-16 codepoints are Unicode codepoints, except values in this\n        // range where the next UTF-16 codepoint needs to be combined with the\n        // current one to get the Unicode codepoint\n        const highSurrogate = (codepoint - 0xd800) * 0x400 & 0xffff;\n        const lowSurrogate = str.charCodeAt(i + 1) - 0xdc00 & 0xffff;\n        codepoint = (lowSurrogate | highSurrogate) + 0x10000;\n        i += 1;\n      }\n      codepointToUTF8(codepoint, emit);\n    }\n  }\n  /**\n   * Converts a UTF-8 byte to a Unicode codepoint.\n   *\n   * @param byte  The UTF-8 byte next in the sequence.\n   * @param state The shared state between consecutive UTF-8 bytes in the\n   *              sequence, an object with the shape `{ utf8seq: 0, codepoint: 0 }`.\n   * @param emit  Function which will be called for each codepoint.\n   */\n  function stringFromUTF8(byte, state, emit) {\n    if (state.utf8seq === 0) {\n      if (byte <= 0x7f) {\n        emit(byte);\n        return;\n      }\n      // count the number of 1 leading bits until you reach 0\n      for (let leadingBit = 1; leadingBit < 6; leadingBit += 1) {\n        if ((byte >> 7 - leadingBit & 1) === 0) {\n          state.utf8seq = leadingBit;\n          break;\n        }\n      }\n      if (state.utf8seq === 2) {\n        state.codepoint = byte & 31;\n      } else if (state.utf8seq === 3) {\n        state.codepoint = byte & 15;\n      } else if (state.utf8seq === 4) {\n        state.codepoint = byte & 7;\n      } else {\n        throw new Error('Invalid UTF-8 sequence');\n      }\n      state.utf8seq -= 1;\n    } else if (state.utf8seq > 0) {\n      if (byte <= 0x7f) {\n        throw new Error('Invalid UTF-8 sequence');\n      }\n      state.codepoint = state.codepoint << 6 | byte & 63;\n      state.utf8seq -= 1;\n      if (state.utf8seq === 0) {\n        emit(state.codepoint);\n      }\n    }\n  }\n  /**\n   * Helper functions to convert different types of strings to Uint8Array\n   */\n  function base64UrlToUint8Array(str) {\n    const result = [];\n    const state = {\n      queue: 0,\n      queuedBits: 0\n    };\n    const onByte = byte => {\n      result.push(byte);\n    };\n    for (let i = 0; i < str.length; i += 1) {\n      byteFromBase64URL(str.charCodeAt(i), state, onByte);\n    }\n    return new Uint8Array(result);\n  }\n  function stringToUint8Array(str) {\n    const result = [];\n    stringToUTF8(str, byte => result.push(byte));\n    return new Uint8Array(result);\n  }\n  function bytesToBase64URL(bytes) {\n    const result = [];\n    const state = {\n      queue: 0,\n      queuedBits: 0\n    };\n    const onChar = char => {\n      result.push(char);\n    };\n    bytes.forEach(byte => byteToBase64URL(byte, state, onChar));\n    // always call with `null` after processing all bytes\n    byteToBase64URL(null, state, onChar);\n    return result.join('');\n  }\n});","lineCount":273,"map":[[15,2,1,0],[16,0,2,0],[17,0,3,0],[18,0,4,0],[19,0,5,0],[20,2,6,0],[21,0,7,0],[22,0,8,0],[23,0,9,0],[24,2,10,0],[24,8,10,6,"TO_BASE64URL"],[24,20,10,18],[24,23,10,21],[24,89,10,87],[24,90,10,88,"split"],[24,95,10,93],[24,96,10,94],[24,98,10,96],[24,99,10,97],[25,2,11,0],[26,0,12,0],[27,0,13,0],[28,0,14,0],[29,2,15,0],[29,8,15,6,"IGNORE_BASE64URL"],[29,24,15,22],[29,27,15,25],[29,37,15,35],[29,38,15,36,"split"],[29,43,15,41],[29,44,15,42],[29,46,15,44],[29,47,15,45],[30,2,16,0],[31,0,17,0],[32,0,18,0],[33,0,19,0],[34,2,20,0],[34,8,20,6,"FROM_BASE64URL"],[34,22,20,20],[34,25,20,23],[34,26,20,24],[34,32,20,30],[35,4,21,4],[35,10,21,10,"charMap"],[35,17,21,17],[35,20,21,20],[35,24,21,24,"Array"],[35,29,21,29],[35,30,21,30],[35,33,21,33],[35,34,21,34],[36,4,22,4],[36,9,22,9],[36,13,22,13,"i"],[36,14,22,14],[36,17,22,17],[36,18,22,18],[36,20,22,20,"i"],[36,21,22,21],[36,24,22,24,"charMap"],[36,31,22,31],[36,32,22,32,"length"],[36,38,22,38],[36,40,22,40,"i"],[36,41,22,41],[36,45,22,45],[36,46,22,46],[36,48,22,48],[37,6,23,8,"charMap"],[37,13,23,15],[37,14,23,16,"i"],[37,15,23,17],[37,16,23,18],[37,19,23,21],[37,20,23,22],[37,21,23,23],[38,4,24,4],[39,4,25,4],[39,9,25,9],[39,13,25,13,"i"],[39,14,25,14],[39,17,25,17],[39,18,25,18],[39,20,25,20,"i"],[39,21,25,21],[39,24,25,24,"IGNORE_BASE64URL"],[39,40,25,40],[39,41,25,41,"length"],[39,47,25,47],[39,49,25,49,"i"],[39,50,25,50],[39,54,25,54],[39,55,25,55],[39,57,25,57],[40,6,26,8,"charMap"],[40,13,26,15],[40,14,26,16,"IGNORE_BASE64URL"],[40,30,26,32],[40,31,26,33,"i"],[40,32,26,34],[40,33,26,35],[40,34,26,36,"charCodeAt"],[40,44,26,46],[40,45,26,47],[40,46,26,48],[40,47,26,49],[40,48,26,50],[40,51,26,53],[40,52,26,54],[40,53,26,55],[41,4,27,4],[42,4,28,4],[42,9,28,9],[42,13,28,13,"i"],[42,14,28,14],[42,17,28,17],[42,18,28,18],[42,20,28,20,"i"],[42,21,28,21],[42,24,28,24,"TO_BASE64URL"],[42,36,28,36],[42,37,28,37,"length"],[42,43,28,43],[42,45,28,45,"i"],[42,46,28,46],[42,50,28,50],[42,51,28,51],[42,53,28,53],[43,6,29,8,"charMap"],[43,13,29,15],[43,14,29,16,"TO_BASE64URL"],[43,26,29,28],[43,27,29,29,"i"],[43,28,29,30],[43,29,29,31],[43,30,29,32,"charCodeAt"],[43,40,29,42],[43,41,29,43],[43,42,29,44],[43,43,29,45],[43,44,29,46],[43,47,29,49,"i"],[43,48,29,50],[44,4,30,4],[45,4,31,4],[45,11,31,11,"charMap"],[45,18,31,18],[46,2,32,0],[46,3,32,1],[46,5,32,3],[46,6,32,4],[47,2,33,0],[48,0,34,0],[49,0,35,0],[50,0,36,0],[51,0,37,0],[52,0,38,0],[53,0,39,0],[54,2,40,7],[54,11,40,16,"byteToBase64URL"],[54,26,40,31,"byteToBase64URL"],[54,27,40,32,"byte"],[54,31,40,36],[54,33,40,38,"state"],[54,38,40,43],[54,40,40,45,"emit"],[54,44,40,49],[54,46,40,51],[55,4,41,4],[55,8,41,8,"byte"],[55,12,41,12],[55,17,41,17],[55,21,41,21],[55,23,41,23],[56,6,42,8,"state"],[56,11,42,13],[56,12,42,14,"queue"],[56,17,42,19],[56,20,42,23,"state"],[56,25,42,28],[56,26,42,29,"queue"],[56,31,42,34],[56,35,42,38],[56,36,42,39],[56,39,42,43,"byte"],[56,43,42,47],[57,6,43,8,"state"],[57,11,43,13],[57,12,43,14,"queuedBits"],[57,22,43,24],[57,26,43,28],[57,27,43,29],[58,6,44,8],[58,13,44,15,"state"],[58,18,44,20],[58,19,44,21,"queuedBits"],[58,29,44,31],[58,33,44,35],[58,34,44,36],[58,36,44,38],[59,8,45,12],[59,14,45,18,"pos"],[59,17,45,21],[59,20,45,25,"state"],[59,25,45,30],[59,26,45,31,"queue"],[59,31,45,36],[59,35,45,41,"state"],[59,40,45,46],[59,41,45,47,"queuedBits"],[59,51,45,57],[59,54,45,60],[59,55,45,62],[59,58,45,66],[59,60,45,68],[60,8,46,12,"emit"],[60,12,46,16],[60,13,46,17,"TO_BASE64URL"],[60,25,46,29],[60,26,46,30,"pos"],[60,29,46,33],[60,30,46,34],[60,31,46,35],[61,8,47,12,"state"],[61,13,47,17],[61,14,47,18,"queuedBits"],[61,24,47,28],[61,28,47,32],[61,29,47,33],[62,6,48,8],[63,4,49,4],[63,5,49,5],[63,11,50,9],[63,15,50,13,"state"],[63,20,50,18],[63,21,50,19,"queuedBits"],[63,31,50,29],[63,34,50,32],[63,35,50,33],[63,37,50,35],[64,6,51,8,"state"],[64,11,51,13],[64,12,51,14,"queue"],[64,17,51,19],[64,20,51,22,"state"],[64,25,51,27],[64,26,51,28,"queue"],[64,31,51,33],[64,35,51,38],[64,36,51,39],[64,39,51,42,"state"],[64,44,51,47],[64,45,51,48,"queuedBits"],[64,55,51,59],[65,6,52,8,"state"],[65,11,52,13],[65,12,52,14,"queuedBits"],[65,22,52,24],[65,25,52,27],[65,26,52,28],[66,6,53,8],[66,13,53,15,"state"],[66,18,53,20],[66,19,53,21,"queuedBits"],[66,29,53,31],[66,33,53,35],[66,34,53,36],[66,36,53,38],[67,8,54,12],[67,14,54,18,"pos"],[67,17,54,21],[67,20,54,25,"state"],[67,25,54,30],[67,26,54,31,"queue"],[67,31,54,36],[67,35,54,41,"state"],[67,40,54,46],[67,41,54,47,"queuedBits"],[67,51,54,57],[67,54,54,60],[67,55,54,62],[67,58,54,66],[67,60,54,68],[68,8,55,12,"emit"],[68,12,55,16],[68,13,55,17,"TO_BASE64URL"],[68,25,55,29],[68,26,55,30,"pos"],[68,29,55,33],[68,30,55,34],[68,31,55,35],[69,8,56,12,"state"],[69,13,56,17],[69,14,56,18,"queuedBits"],[69,24,56,28],[69,28,56,32],[69,29,56,33],[70,6,57,8],[71,4,58,4],[72,2,59,0],[73,2,60,0],[74,0,61,0],[75,0,62,0],[76,0,63,0],[77,0,64,0],[78,0,65,0],[79,0,66,0],[80,2,67,7],[80,11,67,16,"byteFromBase64URL"],[80,28,67,33,"byteFromBase64URL"],[80,29,67,34,"charCode"],[80,37,67,42],[80,39,67,44,"state"],[80,44,67,49],[80,46,67,51,"emit"],[80,50,67,55],[80,52,67,57],[81,4,68,4],[81,10,68,10,"bits"],[81,14,68,14],[81,17,68,17,"FROM_BASE64URL"],[81,31,68,31],[81,32,68,32,"charCode"],[81,40,68,40],[81,41,68,41],[82,4,69,4],[82,8,69,8,"bits"],[82,12,69,12],[82,15,69,15],[82,16,69,16],[82,17,69,17],[82,19,69,19],[83,6,70,8],[84,6,71,8,"state"],[84,11,71,13],[84,12,71,14,"queue"],[84,17,71,19],[84,20,71,23,"state"],[84,25,71,28],[84,26,71,29,"queue"],[84,31,71,34],[84,35,71,38],[84,36,71,39],[84,39,71,43,"bits"],[84,43,71,47],[85,6,72,8,"state"],[85,11,72,13],[85,12,72,14,"queuedBits"],[85,22,72,24],[85,26,72,28],[85,27,72,29],[86,6,73,8],[86,13,73,15,"state"],[86,18,73,20],[86,19,73,21,"queuedBits"],[86,29,73,31],[86,33,73,35],[86,34,73,36],[86,36,73,38],[87,8,74,12,"emit"],[87,12,74,16],[87,13,74,18,"state"],[87,18,74,23],[87,19,74,24,"queue"],[87,24,74,29],[87,28,74,34,"state"],[87,33,74,39],[87,34,74,40,"queuedBits"],[87,44,74,50],[87,47,74,53],[87,48,74,55],[87,51,74,59],[87,55,74,63],[87,56,74,64],[88,8,75,12,"state"],[88,13,75,17],[88,14,75,18,"queuedBits"],[88,24,75,28],[88,28,75,32],[88,29,75,33],[89,6,76,8],[90,4,77,4],[90,5,77,5],[90,11,78,9],[90,15,78,13,"bits"],[90,19,78,17],[90,24,78,22],[90,25,78,23],[90,26,78,24],[90,28,78,26],[91,6,79,8],[92,6,80,8],[93,4,81,4],[93,5,81,5],[93,11,82,9],[94,6,83,8],[94,12,83,14],[94,16,83,18,"Error"],[94,21,83,23],[94,22,83,24],[94,55,83,57,"String"],[94,61,83,63],[94,62,83,64,"fromCharCode"],[94,74,83,76],[94,75,83,77,"charCode"],[94,83,83,85],[94,84,83,86],[94,87,83,89],[94,88,83,90],[95,4,84,4],[96,2,85,0],[97,2,86,0],[98,0,87,0],[99,0,88,0],[100,0,89,0],[101,0,90,0],[102,0,91,0],[103,0,92,0],[104,2,93,7],[104,11,93,16,"stringToBase64URL"],[104,28,93,33,"stringToBase64URL"],[104,29,93,34,"str"],[104,32,93,37],[104,34,93,39],[105,4,94,4],[105,10,94,10,"base64"],[105,16,94,16],[105,19,94,19],[105,21,94,21],[106,4,95,4],[106,10,95,10,"emitter"],[106,17,95,17],[106,20,95,21,"char"],[106,24,95,25],[106,28,95,30],[107,6,96,8,"base64"],[107,12,96,14],[107,13,96,15,"push"],[107,17,96,19],[107,18,96,20,"char"],[107,22,96,24],[107,23,96,25],[108,4,97,4],[108,5,97,5],[109,4,98,4],[109,10,98,10,"state"],[109,15,98,15],[109,18,98,18],[110,6,98,20,"queue"],[110,11,98,25],[110,13,98,27],[110,14,98,28],[111,6,98,30,"queuedBits"],[111,16,98,40],[111,18,98,42],[112,4,98,44],[112,5,98,45],[113,4,99,4,"stringToUTF8"],[113,16,99,16],[113,17,99,17,"str"],[113,20,99,20],[113,22,99,23,"byte"],[113,26,99,27],[113,30,99,32],[114,6,100,8,"byteToBase64URL"],[114,21,100,23],[114,22,100,24,"byte"],[114,26,100,28],[114,28,100,30,"state"],[114,33,100,35],[114,35,100,37,"emitter"],[114,42,100,44],[114,43,100,45],[115,4,101,4],[115,5,101,5],[115,6,101,6],[116,4,102,4,"byteToBase64URL"],[116,19,102,19],[116,20,102,20],[116,24,102,24],[116,26,102,26,"state"],[116,31,102,31],[116,33,102,33,"emitter"],[116,40,102,40],[116,41,102,41],[117,4,103,4],[117,11,103,11,"base64"],[117,17,103,17],[117,18,103,18,"join"],[117,22,103,22],[117,23,103,23],[117,25,103,25],[117,26,103,26],[118,2,104,0],[119,2,105,0],[120,0,106,0],[121,0,107,0],[122,0,108,0],[123,0,109,0],[124,0,110,0],[125,2,111,7],[125,11,111,16,"stringFromBase64URL"],[125,30,111,35,"stringFromBase64URL"],[125,31,111,36,"str"],[125,34,111,39],[125,36,111,41],[126,4,112,4],[126,10,112,10,"conv"],[126,14,112,14],[126,17,112,17],[126,19,112,19],[127,4,113,4],[127,10,113,10,"utf8Emit"],[127,18,113,18],[127,21,113,22,"codepoint"],[127,30,113,31],[127,34,113,36],[128,6,114,8,"conv"],[128,10,114,12],[128,11,114,13,"push"],[128,15,114,17],[128,16,114,18,"String"],[128,22,114,24],[128,23,114,25,"fromCodePoint"],[128,36,114,38],[128,37,114,39,"codepoint"],[128,46,114,48],[128,47,114,49],[128,48,114,50],[129,4,115,4],[129,5,115,5],[130,4,116,4],[130,10,116,10,"utf8State"],[130,19,116,19],[130,22,116,22],[131,6,117,8,"utf8seq"],[131,13,117,15],[131,15,117,17],[131,16,117,18],[132,6,118,8,"codepoint"],[132,15,118,17],[132,17,118,19],[133,4,119,4],[133,5,119,5],[134,4,120,4],[134,10,120,10,"b64State"],[134,18,120,18],[134,21,120,21],[135,6,120,23,"queue"],[135,11,120,28],[135,13,120,30],[135,14,120,31],[136,6,120,33,"queuedBits"],[136,16,120,43],[136,18,120,45],[137,4,120,47],[137,5,120,48],[138,4,121,4],[138,10,121,10,"byteEmit"],[138,18,121,18],[138,21,121,22,"byte"],[138,25,121,26],[138,29,121,31],[139,6,122,8,"stringFromUTF8"],[139,20,122,22],[139,21,122,23,"byte"],[139,25,122,27],[139,27,122,29,"utf8State"],[139,36,122,38],[139,38,122,40,"utf8Emit"],[139,46,122,48],[139,47,122,49],[140,4,123,4],[140,5,123,5],[141,4,124,4],[141,9,124,9],[141,13,124,13,"i"],[141,14,124,14],[141,17,124,17],[141,18,124,18],[141,20,124,20,"i"],[141,21,124,21],[141,24,124,24,"str"],[141,27,124,27],[141,28,124,28,"length"],[141,34,124,34],[141,36,124,36,"i"],[141,37,124,37],[141,41,124,41],[141,42,124,42],[141,44,124,44],[142,6,125,8,"byteFromBase64URL"],[142,23,125,25],[142,24,125,26,"str"],[142,27,125,29],[142,28,125,30,"charCodeAt"],[142,38,125,40],[142,39,125,41,"i"],[142,40,125,42],[142,41,125,43],[142,43,125,45,"b64State"],[142,51,125,53],[142,53,125,55,"byteEmit"],[142,61,125,63],[142,62,125,64],[143,4,126,4],[144,4,127,4],[144,11,127,11,"conv"],[144,15,127,15],[144,16,127,16,"join"],[144,20,127,20],[144,21,127,21],[144,23,127,23],[144,24,127,24],[145,2,128,0],[146,2,129,0],[147,0,130,0],[148,0,131,0],[149,0,132,0],[150,0,133,0],[151,0,134,0],[152,2,135,7],[152,11,135,16,"codepointToUTF8"],[152,26,135,31,"codepointToUTF8"],[152,27,135,32,"codepoint"],[152,36,135,41],[152,38,135,43,"emit"],[152,42,135,47],[152,44,135,49],[153,4,136,4],[153,8,136,8,"codepoint"],[153,17,136,17],[153,21,136,21],[153,25,136,25],[153,27,136,27],[154,6,137,8,"emit"],[154,10,137,12],[154,11,137,13,"codepoint"],[154,20,137,22],[154,21,137,23],[155,6,138,8],[156,4,139,4],[156,5,139,5],[156,11,140,9],[156,15,140,13,"codepoint"],[156,24,140,22],[156,28,140,26],[156,33,140,31],[156,35,140,33],[157,6,141,8,"emit"],[157,10,141,12],[157,11,141,13],[157,15,141,17],[157,18,141,21,"codepoint"],[157,27,141,30],[157,31,141,34],[157,32,141,36],[157,33,141,37],[158,6,142,8,"emit"],[158,10,142,12],[158,11,142,13],[158,15,142,17],[158,18,142,21,"codepoint"],[158,27,142,30],[158,30,142,33],[158,34,142,38],[158,35,142,39],[159,6,143,8],[160,4,144,4],[160,5,144,5],[160,11,145,9],[160,15,145,13,"codepoint"],[160,24,145,22],[160,28,145,26],[160,34,145,32],[160,36,145,34],[161,6,146,8,"emit"],[161,10,146,12],[161,11,146,13],[161,15,146,17],[161,18,146,21,"codepoint"],[161,27,146,30],[161,31,146,34],[161,33,146,37],[161,34,146,38],[162,6,147,8,"emit"],[162,10,147,12],[162,11,147,13],[162,15,147,17],[162,18,147,22,"codepoint"],[162,27,147,31],[162,31,147,35],[162,32,147,36],[162,35,147,40],[162,39,147,45],[162,40,147,46],[163,6,148,8,"emit"],[163,10,148,12],[163,11,148,13],[163,15,148,17],[163,18,148,21,"codepoint"],[163,27,148,30],[163,30,148,33],[163,34,148,38],[163,35,148,39],[164,6,149,8],[165,4,150,4],[165,5,150,5],[165,11,151,9],[165,15,151,13,"codepoint"],[165,24,151,22],[165,28,151,26],[165,36,151,34],[165,38,151,36],[166,6,152,8,"emit"],[166,10,152,12],[166,11,152,13],[166,15,152,17],[166,18,152,21,"codepoint"],[166,27,152,30],[166,31,152,34],[166,33,152,37],[166,34,152,38],[167,6,153,8,"emit"],[167,10,153,12],[167,11,153,13],[167,15,153,17],[167,18,153,22,"codepoint"],[167,27,153,31],[167,31,153,35],[167,33,153,37],[167,36,153,41],[167,40,153,46],[167,41,153,47],[168,6,154,8,"emit"],[168,10,154,12],[168,11,154,13],[168,15,154,17],[168,18,154,22,"codepoint"],[168,27,154,31],[168,31,154,35],[168,32,154,36],[168,35,154,40],[168,39,154,45],[168,40,154,46],[169,6,155,8,"emit"],[169,10,155,12],[169,11,155,13],[169,15,155,17],[169,18,155,21,"codepoint"],[169,27,155,30],[169,30,155,33],[169,34,155,38],[169,35,155,39],[170,6,156,8],[171,4,157,4],[172,4,158,4],[172,10,158,10],[172,14,158,14,"Error"],[172,19,158,19],[172,20,158,20],[172,55,158,55,"codepoint"],[172,64,158,64],[172,65,158,65,"toString"],[172,73,158,73],[172,74,158,74],[172,76,158,76],[172,77,158,77],[172,79,158,79],[172,80,158,80],[173,2,159,0],[174,2,160,0],[175,0,161,0],[176,0,162,0],[177,0,163,0],[178,0,164,0],[179,0,165,0],[180,2,166,7],[180,11,166,16,"stringToUTF8"],[180,23,166,28,"stringToUTF8"],[180,24,166,29,"str"],[180,27,166,32],[180,29,166,34,"emit"],[180,33,166,38],[180,35,166,40],[181,4,167,4],[181,9,167,9],[181,13,167,13,"i"],[181,14,167,14],[181,17,167,17],[181,18,167,18],[181,20,167,20,"i"],[181,21,167,21],[181,24,167,24,"str"],[181,27,167,27],[181,28,167,28,"length"],[181,34,167,34],[181,36,167,36,"i"],[181,37,167,37],[181,41,167,41],[181,42,167,42],[181,44,167,44],[182,6,168,8],[182,10,168,12,"codepoint"],[182,19,168,21],[182,22,168,24,"str"],[182,25,168,27],[182,26,168,28,"charCodeAt"],[182,36,168,38],[182,37,168,39,"i"],[182,38,168,40],[182,39,168,41],[183,6,169,8],[183,10,169,12,"codepoint"],[183,19,169,21],[183,22,169,24],[183,28,169,30],[183,32,169,34,"codepoint"],[183,41,169,43],[183,45,169,47],[183,51,169,53],[183,53,169,55],[184,8,170,12],[185,8,171,12],[186,8,172,12],[187,8,173,12],[187,14,173,18,"highSurrogate"],[187,27,173,31],[187,30,173,35],[187,31,173,36,"codepoint"],[187,40,173,45],[187,43,173,48],[187,49,173,54],[187,53,173,58],[187,58,173,63],[187,61,173,67],[187,67,173,73],[188,8,174,12],[188,14,174,18,"lowSurrogate"],[188,26,174,30],[188,29,174,34,"str"],[188,32,174,37],[188,33,174,38,"charCodeAt"],[188,43,174,48],[188,44,174,49,"i"],[188,45,174,50],[188,48,174,53],[188,49,174,54],[188,50,174,55],[188,53,174,58],[188,59,174,64],[188,62,174,68],[188,68,174,74],[189,8,175,12,"codepoint"],[189,17,175,21],[189,20,175,24],[189,21,175,25,"lowSurrogate"],[189,33,175,37],[189,36,175,40,"highSurrogate"],[189,49,175,53],[189,53,175,57],[189,60,175,64],[190,8,176,12,"i"],[190,9,176,13],[190,13,176,17],[190,14,176,18],[191,6,177,8],[192,6,178,8,"codepointToUTF8"],[192,21,178,23],[192,22,178,24,"codepoint"],[192,31,178,33],[192,33,178,35,"emit"],[192,37,178,39],[192,38,178,40],[193,4,179,4],[194,2,180,0],[195,2,181,0],[196,0,182,0],[197,0,183,0],[198,0,184,0],[199,0,185,0],[200,0,186,0],[201,0,187,0],[202,0,188,0],[203,2,189,7],[203,11,189,16,"stringFromUTF8"],[203,25,189,30,"stringFromUTF8"],[203,26,189,31,"byte"],[203,30,189,35],[203,32,189,37,"state"],[203,37,189,42],[203,39,189,44,"emit"],[203,43,189,48],[203,45,189,50],[204,4,190,4],[204,8,190,8,"state"],[204,13,190,13],[204,14,190,14,"utf8seq"],[204,21,190,21],[204,26,190,26],[204,27,190,27],[204,29,190,29],[205,6,191,8],[205,10,191,12,"byte"],[205,14,191,16],[205,18,191,20],[205,22,191,24],[205,24,191,26],[206,8,192,12,"emit"],[206,12,192,16],[206,13,192,17,"byte"],[206,17,192,21],[206,18,192,22],[207,8,193,12],[208,6,194,8],[209,6,195,8],[210,6,196,8],[210,11,196,13],[210,15,196,17,"leadingBit"],[210,25,196,27],[210,28,196,30],[210,29,196,31],[210,31,196,33,"leadingBit"],[210,41,196,43],[210,44,196,46],[210,45,196,47],[210,47,196,49,"leadingBit"],[210,57,196,59],[210,61,196,63],[210,62,196,64],[210,64,196,66],[211,8,197,12],[211,12,197,16],[211,13,197,18,"byte"],[211,17,197,22],[211,21,197,27],[211,22,197,28],[211,25,197,31,"leadingBit"],[211,35,197,42],[211,38,197,46],[211,39,197,47],[211,45,197,53],[211,46,197,54],[211,48,197,56],[212,10,198,16,"state"],[212,15,198,21],[212,16,198,22,"utf8seq"],[212,23,198,29],[212,26,198,32,"leadingBit"],[212,36,198,42],[213,10,199,16],[214,8,200,12],[215,6,201,8],[216,6,202,8],[216,10,202,12,"state"],[216,15,202,17],[216,16,202,18,"utf8seq"],[216,23,202,25],[216,28,202,30],[216,29,202,31],[216,31,202,33],[217,8,203,12,"state"],[217,13,203,17],[217,14,203,18,"codepoint"],[217,23,203,27],[217,26,203,30,"byte"],[217,30,203,34],[217,33,203,37],[217,35,203,39],[218,6,204,8],[218,7,204,9],[218,13,205,13],[218,17,205,17,"state"],[218,22,205,22],[218,23,205,23,"utf8seq"],[218,30,205,30],[218,35,205,35],[218,36,205,36],[218,38,205,38],[219,8,206,12,"state"],[219,13,206,17],[219,14,206,18,"codepoint"],[219,23,206,27],[219,26,206,30,"byte"],[219,30,206,34],[219,33,206,37],[219,35,206,39],[220,6,207,8],[220,7,207,9],[220,13,208,13],[220,17,208,17,"state"],[220,22,208,22],[220,23,208,23,"utf8seq"],[220,30,208,30],[220,35,208,35],[220,36,208,36],[220,38,208,38],[221,8,209,12,"state"],[221,13,209,17],[221,14,209,18,"codepoint"],[221,23,209,27],[221,26,209,30,"byte"],[221,30,209,34],[221,33,209,37],[221,34,209,38],[222,6,210,8],[222,7,210,9],[222,13,211,13],[223,8,212,12],[223,14,212,18],[223,18,212,22,"Error"],[223,23,212,27],[223,24,212,28],[223,48,212,52],[223,49,212,53],[224,6,213,8],[225,6,214,8,"state"],[225,11,214,13],[225,12,214,14,"utf8seq"],[225,19,214,21],[225,23,214,25],[225,24,214,26],[226,4,215,4],[226,5,215,5],[226,11,216,9],[226,15,216,13,"state"],[226,20,216,18],[226,21,216,19,"utf8seq"],[226,28,216,26],[226,31,216,29],[226,32,216,30],[226,34,216,32],[227,6,217,8],[227,10,217,12,"byte"],[227,14,217,16],[227,18,217,20],[227,22,217,24],[227,24,217,26],[228,8,218,12],[228,14,218,18],[228,18,218,22,"Error"],[228,23,218,27],[228,24,218,28],[228,48,218,52],[228,49,218,53],[229,6,219,8],[230,6,220,8,"state"],[230,11,220,13],[230,12,220,14,"codepoint"],[230,21,220,23],[230,24,220,27,"state"],[230,29,220,32],[230,30,220,33,"codepoint"],[230,39,220,42],[230,43,220,46],[230,44,220,47],[230,47,220,52,"byte"],[230,51,220,56],[230,54,220,59],[230,56,220,62],[231,6,221,8,"state"],[231,11,221,13],[231,12,221,14,"utf8seq"],[231,19,221,21],[231,23,221,25],[231,24,221,26],[232,6,222,8],[232,10,222,12,"state"],[232,15,222,17],[232,16,222,18,"utf8seq"],[232,23,222,25],[232,28,222,30],[232,29,222,31],[232,31,222,33],[233,8,223,12,"emit"],[233,12,223,16],[233,13,223,17,"state"],[233,18,223,22],[233,19,223,23,"codepoint"],[233,28,223,32],[233,29,223,33],[234,6,224,8],[235,4,225,4],[236,2,226,0],[237,2,227,0],[238,0,228,0],[239,0,229,0],[240,2,230,7],[240,11,230,16,"base64UrlToUint8Array"],[240,32,230,37,"base64UrlToUint8Array"],[240,33,230,38,"str"],[240,36,230,41],[240,38,230,43],[241,4,231,4],[241,10,231,10,"result"],[241,16,231,16],[241,19,231,19],[241,21,231,21],[242,4,232,4],[242,10,232,10,"state"],[242,15,232,15],[242,18,232,18],[243,6,232,20,"queue"],[243,11,232,25],[243,13,232,27],[243,14,232,28],[244,6,232,30,"queuedBits"],[244,16,232,40],[244,18,232,42],[245,4,232,44],[245,5,232,45],[246,4,233,4],[246,10,233,10,"onByte"],[246,16,233,16],[246,19,233,20,"byte"],[246,23,233,24],[246,27,233,29],[247,6,234,8,"result"],[247,12,234,14],[247,13,234,15,"push"],[247,17,234,19],[247,18,234,20,"byte"],[247,22,234,24],[247,23,234,25],[248,4,235,4],[248,5,235,5],[249,4,236,4],[249,9,236,9],[249,13,236,13,"i"],[249,14,236,14],[249,17,236,17],[249,18,236,18],[249,20,236,20,"i"],[249,21,236,21],[249,24,236,24,"str"],[249,27,236,27],[249,28,236,28,"length"],[249,34,236,34],[249,36,236,36,"i"],[249,37,236,37],[249,41,236,41],[249,42,236,42],[249,44,236,44],[250,6,237,8,"byteFromBase64URL"],[250,23,237,25],[250,24,237,26,"str"],[250,27,237,29],[250,28,237,30,"charCodeAt"],[250,38,237,40],[250,39,237,41,"i"],[250,40,237,42],[250,41,237,43],[250,43,237,45,"state"],[250,48,237,50],[250,50,237,52,"onByte"],[250,56,237,58],[250,57,237,59],[251,4,238,4],[252,4,239,4],[252,11,239,11],[252,15,239,15,"Uint8Array"],[252,25,239,25],[252,26,239,26,"result"],[252,32,239,32],[252,33,239,33],[253,2,240,0],[254,2,241,7],[254,11,241,16,"stringToUint8Array"],[254,29,241,34,"stringToUint8Array"],[254,30,241,35,"str"],[254,33,241,38],[254,35,241,40],[255,4,242,4],[255,10,242,10,"result"],[255,16,242,16],[255,19,242,19],[255,21,242,21],[256,4,243,4,"stringToUTF8"],[256,16,243,16],[256,17,243,17,"str"],[256,20,243,20],[256,22,243,23,"byte"],[256,26,243,27],[256,30,243,32,"result"],[256,36,243,38],[256,37,243,39,"push"],[256,41,243,43],[256,42,243,44,"byte"],[256,46,243,48],[256,47,243,49],[256,48,243,50],[257,4,244,4],[257,11,244,11],[257,15,244,15,"Uint8Array"],[257,25,244,25],[257,26,244,26,"result"],[257,32,244,32],[257,33,244,33],[258,2,245,0],[259,2,246,7],[259,11,246,16,"bytesToBase64URL"],[259,27,246,32,"bytesToBase64URL"],[259,28,246,33,"bytes"],[259,33,246,38],[259,35,246,40],[260,4,247,4],[260,10,247,10,"result"],[260,16,247,16],[260,19,247,19],[260,21,247,21],[261,4,248,4],[261,10,248,10,"state"],[261,15,248,15],[261,18,248,18],[262,6,248,20,"queue"],[262,11,248,25],[262,13,248,27],[262,14,248,28],[263,6,248,30,"queuedBits"],[263,16,248,40],[263,18,248,42],[264,4,248,44],[264,5,248,45],[265,4,249,4],[265,10,249,10,"onChar"],[265,16,249,16],[265,19,249,20,"char"],[265,23,249,24],[265,27,249,29],[266,6,250,8,"result"],[266,12,250,14],[266,13,250,15,"push"],[266,17,250,19],[266,18,250,20,"char"],[266,22,250,24],[266,23,250,25],[267,4,251,4],[267,5,251,5],[268,4,252,4,"bytes"],[268,9,252,9],[268,10,252,10,"forEach"],[268,17,252,17],[268,18,252,19,"byte"],[268,22,252,23],[268,26,252,28,"byteToBase64URL"],[268,41,252,43],[268,42,252,44,"byte"],[268,46,252,48],[268,48,252,50,"state"],[268,53,252,55],[268,55,252,57,"onChar"],[268,61,252,63],[268,62,252,64],[268,63,252,65],[269,4,253,4],[270,4,254,4,"byteToBase64URL"],[270,19,254,19],[270,20,254,20],[270,24,254,24],[270,26,254,26,"state"],[270,31,254,31],[270,33,254,33,"onChar"],[270,39,254,39],[270,40,254,40],[271,4,255,4],[271,11,255,11,"result"],[271,17,255,17],[271,18,255,18,"join"],[271,22,255,22],[271,23,255,23],[271,25,255,25],[271,26,255,26],[272,2,256,0],[273,0,256,1],[273,3]],"functionMap":{"names":["<global>","<anonymous>","byteToBase64URL","byteFromBase64URL","stringToBase64URL","emitter","stringToUTF8$argument_1","stringFromBase64URL","utf8Emit","byteEmit","codepointToUTF8","stringToUTF8","stringFromUTF8","base64UrlToUint8Array","onByte","stringToUint8Array","bytesToBase64URL","onChar","bytes.forEach$argument_0"],"mappings":"AAA;wBCmB;CDY;OEQ;CFmB;OGQ;CHkB;OIQ;oBCE;KDE;sBEE;KFE;CJG;OOO;qBCE;KDE;qBEM;KFE;CPK;OUO;CVwB;OWO;CXc;OYS;CZqC;OaI;mBCG;KDE;CbK;OeC;sBTE,2BS;CfE;OgBC;mBCG;KDE;kBEC,8CF;ChBI"}},"type":"js/module"}]}