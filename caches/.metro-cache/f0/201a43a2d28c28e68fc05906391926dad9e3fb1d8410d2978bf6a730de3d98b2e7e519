{"dependencies":[{"name":"tslib","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":34,"index":34}}],"key":"8R25577gwLd3n1hFG9VYnRLV9eE=","exportNames":["*"]}},{"name":"@supabase/node-fetch","data":{"asyncType":"async","isESMImport":true,"locs":[{"start":{"line":17,"column":30,"index":565},"end":{"line":17,"column":60,"index":595}},{"start":{"line":34,"column":22,"index":1120},"end":{"line":34,"column":52,"index":1150}}],"key":"7Fx+cnrTZuhuI1XE65tJyFLDBO8=","exportNames":["*"]}},{"name":"D:\\saheli\\node_modules\\@expo\\metro-config\\build\\async-require.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":17,"column":30,"index":565},"end":{"line":17,"column":65,"index":600}},{"start":{"line":34,"column":16,"index":1114},"end":{"line":34,"column":52,"index":1150}}],"key":"ceUA4bex0gIPOoI+n74Lh3S2Bb8=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.validateVectorDimension = exports.resolveResponse = exports.resolveFetch = exports.normalizeToFloat32 = exports.isPlainObject = void 0;\n  var _tslib = require(_dependencyMap[0], \"tslib\");\n  /**\n   * Resolves the fetch implementation to use\n   * Uses custom fetch if provided, otherwise falls back to:\n   * - Native fetch in browser/modern environments\n   * - @supabase/node-fetch polyfill in Node.js environments without fetch\n   *\n   * @param customFetch - Optional custom fetch implementation\n   * @returns Resolved fetch function\n   */\n  const resolveFetch = customFetch => {\n    let _fetch;\n    if (customFetch) {\n      _fetch = customFetch;\n    } else if (typeof fetch === 'undefined') {\n      _fetch = (...args) => require(_dependencyMap[2], \"D:\\\\saheli\\\\node_modules\\\\@expo\\\\metro-config\\\\build\\\\async-require.js\")(_dependencyMap[1], _dependencyMap.paths, \"@supabase/node-fetch\").then(({\n        default: fetch\n      }) => fetch(...args));\n    } else {\n      _fetch = fetch;\n    }\n    return (...args) => _fetch(...args);\n  };\n  /**\n   * Resolves the Response constructor to use\n   * Uses native Response in browser/modern environments\n   * Falls back to @supabase/node-fetch polyfill in Node.js environments\n   *\n   * @returns Response constructor\n   */\n  exports.resolveFetch = resolveFetch;\n  const resolveResponse = () => (0, _tslib.__awaiter)(void 0, void 0, void 0, function* () {\n    if (typeof Response === 'undefined') {\n      // @ts-ignore\n      return (yield require(_dependencyMap[2], \"D:\\\\saheli\\\\node_modules\\\\@expo\\\\metro-config\\\\build\\\\async-require.js\")(_dependencyMap[1], _dependencyMap.paths, \"@supabase/node-fetch\")).Response;\n    }\n    return Response;\n  });\n  /**\n   * Determine if input is a plain object\n   * An object is plain if it's created by either {}, new Object(), or Object.create(null)\n   *\n   * @param value - Value to check\n   * @returns True if value is a plain object\n   * @source https://github.com/sindresorhus/is-plain-obj\n   */\n  exports.resolveResponse = resolveResponse;\n  const isPlainObject = value => {\n    if (typeof value !== 'object' || value === null) {\n      return false;\n    }\n    const prototype = Object.getPrototypeOf(value);\n    return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n  };\n  /**\n   * Normalizes a number array to float32 format\n   * Ensures all vector values are valid 32-bit floats\n   *\n   * @param values - Array of numbers to normalize\n   * @returns Normalized float32 array\n   */\n  exports.isPlainObject = isPlainObject;\n  const normalizeToFloat32 = values => {\n    // Use Float32Array to ensure proper precision\n    return Array.from(new Float32Array(values));\n  };\n  /**\n   * Validates vector dimensions match expected dimension\n   * Throws error if dimensions don't match\n   *\n   * @param vector - Vector data to validate\n   * @param expectedDimension - Expected vector dimension\n   * @throws Error if dimensions don't match\n   */\n  exports.normalizeToFloat32 = normalizeToFloat32;\n  const validateVectorDimension = (vector, expectedDimension) => {\n    if (expectedDimension !== undefined && vector.float32.length !== expectedDimension) {\n      throw new Error(`Vector dimension mismatch: expected ${expectedDimension}, got ${vector.float32.length}`);\n    }\n  };\n  exports.validateVectorDimension = validateVectorDimension;\n});","lineCount":87,"map":[[6,2,1,0],[6,6,1,0,"_tslib"],[6,12,1,0],[6,15,1,0,"require"],[6,22,1,0],[6,23,1,0,"_dependencyMap"],[6,37,1,0],[7,2,2,0],[8,0,3,0],[9,0,4,0],[10,0,5,0],[11,0,6,0],[12,0,7,0],[13,0,8,0],[14,0,9,0],[15,0,10,0],[16,2,11,7],[16,8,11,13,"resolveFetch"],[16,20,11,25],[16,23,11,29,"customFetch"],[16,34,11,40],[16,38,11,45],[17,4,12,4],[17,8,12,8,"_fetch"],[17,14,12,14],[18,4,13,4],[18,8,13,8,"customFetch"],[18,19,13,19],[18,21,13,21],[19,6,14,8,"_fetch"],[19,12,14,14],[19,15,14,17,"customFetch"],[19,26,14,28],[20,4,15,4],[20,5,15,5],[20,11,16,9],[20,15,16,13],[20,22,16,20,"fetch"],[20,27,16,25],[20,32,16,30],[20,43,16,41],[20,45,16,43],[21,6,17,8,"_fetch"],[21,12,17,14],[21,15,17,17,"_fetch"],[21,16,17,18],[21,19,17,21,"args"],[21,23,17,25],[21,28,17,30,"require"],[21,35,17,30],[21,36,17,30,"_dependencyMap"],[21,50,17,30],[21,129,17,30,"_dependencyMap"],[21,143,17,30],[21,148,17,30,"_dependencyMap"],[21,162,17,30],[21,163,17,30,"paths"],[21,168,17,30],[21,194,17,61,"then"],[21,198,17,65],[21,199,17,66],[21,200,17,67],[22,8,17,69,"default"],[22,15,17,76],[22,17,17,78,"fetch"],[23,6,17,84],[23,7,17,85],[23,12,17,90,"fetch"],[23,17,17,95],[23,18,17,96],[23,21,17,99,"args"],[23,25,17,103],[23,26,17,104],[23,27,17,105],[24,4,18,4],[24,5,18,5],[24,11,19,9],[25,6,20,8,"_fetch"],[25,12,20,14],[25,15,20,17,"fetch"],[25,20,20,22],[26,4,21,4],[27,4,22,4],[27,11,22,11],[27,12,22,12],[27,15,22,15,"args"],[27,19,22,19],[27,24,22,24,"_fetch"],[27,30,22,30],[27,31,22,31],[27,34,22,34,"args"],[27,38,22,38],[27,39,22,39],[28,2,23,0],[28,3,23,1],[29,2,24,0],[30,0,25,0],[31,0,26,0],[32,0,27,0],[33,0,28,0],[34,0,29,0],[35,0,30,0],[36,2,24,0,"exports"],[36,9,24,0],[36,10,24,0,"resolveFetch"],[36,22,24,0],[36,25,24,0,"resolveFetch"],[36,37,24,0],[37,2,31,7],[37,8,31,13,"resolveResponse"],[37,23,31,28],[37,26,31,31,"resolveResponse"],[37,27,31,31],[37,32,31,37],[37,36,31,37,"__awaiter"],[37,52,31,46],[37,54,31,47],[37,59,31,52],[37,60,31,53],[37,62,31,55],[37,67,31,60],[37,68,31,61],[37,70,31,63],[37,75,31,68],[37,76,31,69],[37,78,31,71],[37,91,31,84],[38,4,32,4],[38,8,32,8],[38,15,32,15,"Response"],[38,23,32,23],[38,28,32,28],[38,39,32,39],[38,41,32,41],[39,6,33,8],[40,6,34,8],[40,13,34,15],[40,14,34,16],[40,20,34,16,"require"],[40,27,34,16],[40,28,34,16,"_dependencyMap"],[40,42,34,16],[40,121,34,16,"_dependencyMap"],[40,135,34,16],[40,140,34,16,"_dependencyMap"],[40,154,34,16],[40,155,34,16,"paths"],[40,160,34,16],[40,185,34,52],[40,187,34,54,"Response"],[40,195,34,62],[41,4,35,4],[42,4,36,4],[42,11,36,11,"Response"],[42,19,36,19],[43,2,37,0],[43,3,37,1],[43,4,37,2],[44,2,38,0],[45,0,39,0],[46,0,40,0],[47,0,41,0],[48,0,42,0],[49,0,43,0],[50,0,44,0],[51,0,45,0],[52,2,38,0,"exports"],[52,9,38,0],[52,10,38,0,"resolveResponse"],[52,25,38,0],[52,28,38,0,"resolveResponse"],[52,43,38,0],[53,2,46,7],[53,8,46,13,"isPlainObject"],[53,21,46,26],[53,24,46,30,"value"],[53,29,46,35],[53,33,46,40],[54,4,47,4],[54,8,47,8],[54,15,47,15,"value"],[54,20,47,20],[54,25,47,25],[54,33,47,33],[54,37,47,37,"value"],[54,42,47,42],[54,47,47,47],[54,51,47,51],[54,53,47,53],[55,6,48,8],[55,13,48,15],[55,18,48,20],[56,4,49,4],[57,4,50,4],[57,10,50,10,"prototype"],[57,19,50,19],[57,22,50,22,"Object"],[57,28,50,28],[57,29,50,29,"getPrototypeOf"],[57,43,50,43],[57,44,50,44,"value"],[57,49,50,49],[57,50,50,50],[58,4,51,4],[58,11,51,12],[58,12,51,13,"prototype"],[58,21,51,22],[58,26,51,27],[58,30,51,31],[58,34,52,8,"prototype"],[58,43,52,17],[58,48,52,22,"Object"],[58,54,52,28],[58,55,52,29,"prototype"],[58,64,52,38],[58,68,53,8,"Object"],[58,74,53,14],[58,75,53,15,"getPrototypeOf"],[58,89,53,29],[58,90,53,30,"prototype"],[58,99,53,39],[58,100,53,40],[58,105,53,45],[58,109,53,49],[58,114,54,8],[58,116,54,10,"Symbol"],[58,122,54,16],[58,123,54,17,"toStringTag"],[58,134,54,28],[58,138,54,32,"value"],[58,143,54,37],[58,144,54,38],[58,148,55,8],[58,150,55,10,"Symbol"],[58,156,55,16],[58,157,55,17,"iterator"],[58,165,55,25],[58,169,55,29,"value"],[58,174,55,34],[58,175,55,35],[59,2,56,0],[59,3,56,1],[60,2,57,0],[61,0,58,0],[62,0,59,0],[63,0,60,0],[64,0,61,0],[65,0,62,0],[66,0,63,0],[67,2,57,0,"exports"],[67,9,57,0],[67,10,57,0,"isPlainObject"],[67,23,57,0],[67,26,57,0,"isPlainObject"],[67,39,57,0],[68,2,64,7],[68,8,64,13,"normalizeToFloat32"],[68,26,64,31],[68,29,64,35,"values"],[68,35,64,41],[68,39,64,46],[69,4,65,4],[70,4,66,4],[70,11,66,11,"Array"],[70,16,66,16],[70,17,66,17,"from"],[70,21,66,21],[70,22,66,22],[70,26,66,26,"Float32Array"],[70,38,66,38],[70,39,66,39,"values"],[70,45,66,45],[70,46,66,46],[70,47,66,47],[71,2,67,0],[71,3,67,1],[72,2,68,0],[73,0,69,0],[74,0,70,0],[75,0,71,0],[76,0,72,0],[77,0,73,0],[78,0,74,0],[79,0,75,0],[80,2,68,0,"exports"],[80,9,68,0],[80,10,68,0,"normalizeToFloat32"],[80,28,68,0],[80,31,68,0,"normalizeToFloat32"],[80,49,68,0],[81,2,76,7],[81,8,76,13,"validateVectorDimension"],[81,31,76,36],[81,34,76,39,"validateVectorDimension"],[81,35,76,40,"vector"],[81,41,76,46],[81,43,76,48,"expectedDimension"],[81,60,76,65],[81,65,76,70],[82,4,77,4],[82,8,77,8,"expectedDimension"],[82,25,77,25],[82,30,77,30,"undefined"],[82,39,77,39],[82,43,77,43,"vector"],[82,49,77,49],[82,50,77,50,"float32"],[82,57,77,57],[82,58,77,58,"length"],[82,64,77,64],[82,69,77,69,"expectedDimension"],[82,86,77,86],[82,88,77,88],[83,6,78,8],[83,12,78,14],[83,16,78,18,"Error"],[83,21,78,23],[83,22,78,24],[83,61,78,63,"expectedDimension"],[83,78,78,80],[83,87,78,89,"vector"],[83,93,78,95],[83,94,78,96,"float32"],[83,101,78,103],[83,102,78,104,"length"],[83,108,78,110],[83,110,78,112],[83,111,78,113],[84,4,79,4],[85,2,80,0],[85,3,80,1],[86,2,80,2,"exports"],[86,9,80,2],[86,10,80,2,"validateVectorDimension"],[86,33,80,2],[86,36,80,2,"validateVectorDimension"],[86,59,80,2],[87,0,80,2],[87,3]],"functionMap":{"names":["<global>","resolveFetch","_fetch","import.then$argument_0","<anonymous>","resolveResponse","__awaiter$argument_3","isPlainObject","normalizeToFloat32","validateVectorDimension"],"mappings":"AAA;4BCU;iBCM,iDC,sCD,CD;WGK,4BH;CDC;+BKQ,wCC;CDM,CL;6BOS;CPU;kCQQ;CRG;uCSS;CTI"}},"type":"js/module"}]}