{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo=","exportNames":["*"]}},{"name":"./utils.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":24},"end":{"line":2,"column":38,"index":62}}],"key":"NIaSEHO1E48gsZc7jH9Ex1xTHgE=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.streamedQuery = streamedQuery;\n  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/asyncToGenerator\"));\n  var _utils = require(_dependencyMap[2], \"./utils.js\");\n  function _asyncIterator(r) { var n, t, o, e = 2; for (\"undefined\" != typeof Symbol && (t = Symbol.asyncIterator, o = Symbol.iterator); e--;) { if (t && null != (n = r[t])) return n.call(r); if (o && null != (n = r[o])) return new AsyncFromSyncIterator(n.call(r)); t = \"@@asyncIterator\", o = \"@@iterator\"; } throw new TypeError(\"Object is not async iterable\"); }\n  function AsyncFromSyncIterator(r) { function AsyncFromSyncIteratorContinuation(r) { if (Object(r) !== r) return Promise.reject(new TypeError(r + \" is not an object.\")); var n = r.done; return Promise.resolve(r.value).then(function (r) { return { value: r, done: n }; }); } return AsyncFromSyncIterator = function (r) { this.s = r, this.n = r.next; }, AsyncFromSyncIterator.prototype = { s: null, n: null, next: function () { return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments)); }, return: function (r) { var n = this.s.return; return void 0 === n ? Promise.resolve({ value: r, done: !0 }) : AsyncFromSyncIteratorContinuation(n.apply(this.s, arguments)); }, throw: function (r) { var n = this.s.return; return void 0 === n ? Promise.reject(r) : AsyncFromSyncIteratorContinuation(n.apply(this.s, arguments)); } }, new AsyncFromSyncIterator(r); } // src/streamedQuery.ts\n  function streamedQuery(_ref) {\n    var queryFn = _ref.queryFn,\n      _ref$refetchMode = _ref.refetchMode,\n      refetchMode = _ref$refetchMode === void 0 ? \"reset\" : _ref$refetchMode,\n      maxChunks = _ref.maxChunks;\n    return /*#__PURE__*/function () {\n      var _ref2 = (0, _asyncToGenerator2.default)(function* (context) {\n        var query = context.client.getQueryCache().find({\n          queryKey: context.queryKey,\n          exact: true\n        });\n        var isRefetch = !!query && query.state.data !== void 0;\n        if (isRefetch && refetchMode === \"reset\") {\n          query.setState({\n            status: \"pending\",\n            data: void 0,\n            error: null,\n            fetchStatus: \"fetching\"\n          });\n        }\n        var result = [];\n        var stream = yield queryFn(context);\n        var _iteratorAbruptCompletion = false;\n        var _didIteratorError = false;\n        var _iteratorError;\n        try {\n          var _loop = function* () {\n            var chunk = _step.value;\n            {\n              if (context.signal.aborted) {\n                return 1; // break\n              }\n              if (!isRefetch || refetchMode !== \"replace\") {\n                context.client.setQueryData(context.queryKey, function () {\n                  var prev = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n                  return (0, _utils.addToEnd)(prev, chunk, maxChunks);\n                });\n              }\n              result = (0, _utils.addToEnd)(result, chunk, maxChunks);\n            }\n          };\n          for (var _iterator = _asyncIterator(stream), _step; _iteratorAbruptCompletion = !(_step = yield _iterator.next()).done; _iteratorAbruptCompletion = false) {\n            if (yield* _loop()) break;\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion && _iterator.return != null) {\n              yield _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n        if (isRefetch && refetchMode === \"replace\" && !context.signal.aborted) {\n          context.client.setQueryData(context.queryKey, result);\n        }\n        return context.client.getQueryData(context.queryKey);\n      });\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n  }\n});","lineCount":79,"map":[[8,2,2,0],[8,6,2,0,"_utils"],[8,12,2,0],[8,15,2,0,"require"],[8,22,2,0],[8,23,2,0,"_dependencyMap"],[8,37,2,0],[9,2,2,38],[9,11,2,38,"_asyncIterator"],[9,26,2,38,"r"],[9,27,2,38],[9,35,2,38,"n"],[9,36,2,38],[9,38,2,38,"t"],[9,39,2,38],[9,41,2,38,"o"],[9,42,2,38],[9,44,2,38,"e"],[9,45,2,38],[9,78,2,38,"Symbol"],[9,84,2,38],[9,89,2,38,"t"],[9,90,2,38],[9,93,2,38,"Symbol"],[9,99,2,38],[9,100,2,38,"asyncIterator"],[9,113,2,38],[9,115,2,38,"o"],[9,116,2,38],[9,119,2,38,"Symbol"],[9,125,2,38],[9,126,2,38,"iterator"],[9,134,2,38],[9,137,2,38,"e"],[9,138,2,38],[9,149,2,38,"t"],[9,150,2,38],[9,163,2,38,"n"],[9,164,2,38],[9,167,2,38,"r"],[9,168,2,38],[9,169,2,38,"t"],[9,170,2,38],[9,181,2,38,"n"],[9,182,2,38],[9,183,2,38,"call"],[9,187,2,38],[9,188,2,38,"r"],[9,189,2,38],[9,196,2,38,"o"],[9,197,2,38],[9,210,2,38,"n"],[9,211,2,38],[9,214,2,38,"r"],[9,215,2,38],[9,216,2,38,"o"],[9,217,2,38],[9,232,2,38,"AsyncFromSyncIterator"],[9,253,2,38],[9,254,2,38,"n"],[9,255,2,38],[9,256,2,38,"call"],[9,260,2,38],[9,261,2,38,"r"],[9,262,2,38],[9,266,2,38,"t"],[9,267,2,38],[9,289,2,38,"o"],[9,290,2,38],[9,319,2,38,"TypeError"],[9,328,2,38],[10,2,2,38],[10,11,2,38,"AsyncFromSyncIterator"],[10,33,2,38,"r"],[10,34,2,38],[10,47,2,38,"AsyncFromSyncIteratorContinuation"],[10,81,2,38,"r"],[10,82,2,38],[10,90,2,38,"Object"],[10,96,2,38],[10,97,2,38,"r"],[10,98,2,38],[10,104,2,38,"r"],[10,105,2,38],[10,114,2,38,"Promise"],[10,121,2,38],[10,122,2,38,"reject"],[10,128,2,38],[10,133,2,38,"TypeError"],[10,142,2,38],[10,143,2,38,"r"],[10,144,2,38],[10,175,2,38,"n"],[10,176,2,38],[10,179,2,38,"r"],[10,180,2,38],[10,181,2,38,"done"],[10,185,2,38],[10,194,2,38,"Promise"],[10,201,2,38],[10,202,2,38,"resolve"],[10,209,2,38],[10,210,2,38,"r"],[10,211,2,38],[10,212,2,38,"value"],[10,217,2,38],[10,219,2,38,"then"],[10,223,2,38],[10,234,2,38,"r"],[10,235,2,38],[10,248,2,38,"value"],[10,253,2,38],[10,255,2,38,"r"],[10,256,2,38],[10,258,2,38,"done"],[10,262,2,38],[10,264,2,38,"n"],[10,265,2,38],[10,282,2,38,"AsyncFromSyncIterator"],[10,303,2,38],[10,315,2,38,"AsyncFromSyncIterator"],[10,316,2,38,"r"],[10,317,2,38],[10,326,2,38,"s"],[10,327,2,38],[10,330,2,38,"r"],[10,331,2,38],[10,338,2,38,"n"],[10,339,2,38],[10,342,2,38,"r"],[10,343,2,38],[10,344,2,38,"next"],[10,348,2,38],[10,353,2,38,"AsyncFromSyncIterator"],[10,374,2,38],[10,375,2,38,"prototype"],[10,384,2,38],[10,389,2,38,"s"],[10,390,2,38],[10,398,2,38,"n"],[10,399,2,38],[10,407,2,38,"next"],[10,411,2,38],[10,422,2,38,"next"],[10,423,2,38],[10,434,2,38,"AsyncFromSyncIteratorContinuation"],[10,467,2,38],[10,473,2,38,"n"],[10,474,2,38],[10,475,2,38,"apply"],[10,480,2,38],[10,486,2,38,"s"],[10,487,2,38],[10,489,2,38,"arguments"],[10,498,2,38],[10,505,2,38,"return"],[10,511,2,38],[10,522,2,38,"return"],[10,523,2,38,"r"],[10,524,2,38],[10,532,2,38,"n"],[10,533,2,38],[10,541,2,38,"s"],[10,542,2,38],[10,543,2,38,"return"],[10,549,2,38],[10,569,2,38,"n"],[10,570,2,38],[10,573,2,38,"Promise"],[10,580,2,38],[10,581,2,38,"resolve"],[10,588,2,38],[10,591,2,38,"value"],[10,596,2,38],[10,598,2,38,"r"],[10,599,2,38],[10,601,2,38,"done"],[10,605,2,38],[10,615,2,38,"AsyncFromSyncIteratorContinuation"],[10,648,2,38],[10,649,2,38,"n"],[10,650,2,38],[10,651,2,38,"apply"],[10,656,2,38],[10,662,2,38,"s"],[10,663,2,38],[10,665,2,38,"arguments"],[10,674,2,38],[10,681,2,38,"throw"],[10,686,2,38],[10,697,2,38,"throw"],[10,698,2,38,"r"],[10,699,2,38],[10,707,2,38,"n"],[10,708,2,38],[10,716,2,38,"s"],[10,717,2,38],[10,718,2,38,"return"],[10,724,2,38],[10,744,2,38,"n"],[10,745,2,38],[10,748,2,38,"Promise"],[10,755,2,38],[10,756,2,38,"reject"],[10,762,2,38],[10,763,2,38,"r"],[10,764,2,38],[10,768,2,38,"AsyncFromSyncIteratorContinuation"],[10,801,2,38],[10,802,2,38,"n"],[10,803,2,38],[10,804,2,38,"apply"],[10,809,2,38],[10,815,2,38,"s"],[10,816,2,38],[10,818,2,38,"arguments"],[10,827,2,38],[10,840,2,38,"AsyncFromSyncIterator"],[10,861,2,38],[10,862,2,38,"r"],[10,863,2,38],[10,868,1,0],[11,2,3,0],[11,11,3,9,"streamedQuery"],[11,24,3,22,"streamedQuery"],[11,25,3,22,"_ref"],[11,29,3,22],[11,31,7,3],[12,4,7,3],[12,8,4,2,"queryFn"],[12,15,4,9],[12,18,4,9,"_ref"],[12,22,4,9],[12,23,4,2,"queryFn"],[12,30,4,9],[13,6,4,9,"_ref$refetchMode"],[13,22,4,9],[13,25,4,9,"_ref"],[13,29,4,9],[13,30,5,2,"refetchMode"],[13,41,5,13],[14,6,5,2,"refetchMode"],[14,17,5,13],[14,20,5,13,"_ref$refetchMode"],[14,36,5,13],[14,50,5,16],[14,57,5,23],[14,60,5,23,"_ref$refetchMode"],[14,76,5,23],[15,6,6,2,"maxChunks"],[15,15,6,11],[15,18,6,11,"_ref"],[15,22,6,11],[15,23,6,2,"maxChunks"],[15,32,6,11],[16,4,8,2],[17,6,8,2],[17,10,8,2,"_ref2"],[17,15,8,2],[17,22,8,2,"_asyncToGenerator2"],[17,40,8,2],[17,41,8,2,"default"],[17,48,8,2],[17,50,8,9],[17,61,8,16,"context"],[17,68,8,23],[17,70,8,28],[18,8,9,4],[18,12,9,10,"query"],[18,17,9,15],[18,20,9,18,"context"],[18,27,9,25],[18,28,9,26,"client"],[18,34,9,32],[18,35,9,33,"getQueryCache"],[18,48,9,46],[18,49,9,47],[18,50,9,48],[18,51,9,49,"find"],[18,55,9,53],[18,56,9,54],[19,10,9,56,"queryKey"],[19,18,9,64],[19,20,9,66,"context"],[19,27,9,73],[19,28,9,74,"queryKey"],[19,36,9,82],[20,10,9,84,"exact"],[20,15,9,89],[20,17,9,91],[21,8,9,96],[21,9,9,97],[21,10,9,98],[22,8,10,4],[22,12,10,10,"isRefetch"],[22,21,10,19],[22,24,10,22],[22,25,10,23],[22,26,10,24,"query"],[22,31,10,29],[22,35,10,33,"query"],[22,40,10,38],[22,41,10,39,"state"],[22,46,10,44],[22,47,10,45,"data"],[22,51,10,49],[22,56,10,54],[22,61,10,59],[22,62,10,60],[23,8,11,4],[23,12,11,8,"isRefetch"],[23,21,11,17],[23,25,11,21,"refetchMode"],[23,36,11,32],[23,41,11,37],[23,48,11,44],[23,50,11,46],[24,10,12,6,"query"],[24,15,12,11],[24,16,12,12,"setState"],[24,24,12,20],[24,25,12,21],[25,12,13,8,"status"],[25,18,13,14],[25,20,13,16],[25,29,13,25],[26,12,14,8,"data"],[26,16,14,12],[26,18,14,14],[26,23,14,19],[26,24,14,20],[27,12,15,8,"error"],[27,17,15,13],[27,19,15,15],[27,23,15,19],[28,12,16,8,"fetchStatus"],[28,23,16,19],[28,25,16,21],[29,10,17,6],[29,11,17,7],[29,12,17,8],[30,8,18,4],[31,8,19,4],[31,12,19,8,"result"],[31,18,19,14],[31,21,19,17],[31,23,19,19],[32,8,20,4],[32,12,20,10,"stream"],[32,18,20,16],[32,27,20,25,"queryFn"],[32,34,20,32],[32,35,20,33,"context"],[32,42,20,40],[32,43,20,41],[33,8,20,42],[33,12,20,42,"_iteratorAbruptCompletion"],[33,37,20,42],[34,8,20,42],[34,12,20,42,"_didIteratorError"],[34,29,20,42],[35,8,20,42],[35,12,20,42,"_iteratorError"],[35,26,20,42],[36,8,20,42],[37,10,20,42],[37,14,20,42,"_loop"],[37,19,20,42],[37,32,20,42,"_loop"],[37,33,20,42],[37,35,21,38],[38,12,21,38],[38,16,21,21,"chunk"],[38,21,21,26],[38,24,21,26,"_step"],[38,29,21,26],[38,30,21,26,"value"],[38,35,21,26],[39,12,21,26],[40,14,22,6],[40,18,22,10,"context"],[40,25,22,17],[40,26,22,18,"signal"],[40,32,22,24],[40,33,22,25,"aborted"],[40,40,22,32],[40,42,22,34],[41,16,22,34],[42,14,24,6],[43,14,25,6],[43,18,25,10],[43,19,25,11,"isRefetch"],[43,28,25,20],[43,32,25,24,"refetchMode"],[43,43,25,35],[43,48,25,40],[43,57,25,49],[43,59,25,51],[44,16,26,8,"context"],[44,23,26,15],[44,24,26,16,"client"],[44,30,26,22],[44,31,26,23,"setQueryData"],[44,43,26,35],[44,44,27,10,"context"],[44,51,27,17],[44,52,27,18,"queryKey"],[44,60,27,26],[44,62,28,10],[44,74,28,25],[45,18,28,25],[45,22,28,11,"prev"],[45,26,28,15],[45,29,28,15,"arguments"],[45,38,28,15],[45,39,28,15,"length"],[45,45,28,15],[45,53,28,15,"arguments"],[45,62,28,15],[45,70,28,15,"undefined"],[45,79,28,15],[45,82,28,15,"arguments"],[45,91,28,15],[45,97,28,18],[45,99,28,20],[46,18,29,12],[46,25,29,19],[46,29,29,19,"addToEnd"],[46,44,29,27],[46,46,29,28,"prev"],[46,50,29,32],[46,52,29,34,"chunk"],[46,57,29,39],[46,59,29,41,"maxChunks"],[46,68,29,50],[46,69,29,51],[47,16,30,10],[47,17,31,8],[47,18,31,9],[48,14,32,6],[49,14,33,6,"result"],[49,20,33,12],[49,23,33,15],[49,27,33,15,"addToEnd"],[49,42,33,23],[49,44,33,24,"result"],[49,50,33,30],[49,52,33,32,"chunk"],[49,57,33,37],[49,59,33,39,"maxChunks"],[49,68,33,48],[49,69,33,49],[50,12,33,50],[51,10,34,4],[51,11,34,5],[52,10,21,4],[52,19,21,4,"_iterator"],[52,28,21,4],[52,31,21,4,"_asyncIterator"],[52,45,21,4],[52,46,21,30,"stream"],[52,52,21,36],[52,55,21,36,"_step"],[52,60,21,36],[52,62,21,36,"_iteratorAbruptCompletion"],[52,87,21,36],[52,92,21,36,"_step"],[52,97,21,36],[52,106,21,36,"_iterator"],[52,115,21,36],[52,116,21,36,"next"],[52,120,21,36],[52,124,21,36,"done"],[52,128,21,36],[52,130,21,36,"_iteratorAbruptCompletion"],[52,155,21,36],[53,12,21,36],[53,23,21,36,"_loop"],[53,28,21,36],[53,32,23,8],[54,10,23,14],[55,8,34,5],[55,17,34,5,"err"],[55,20,34,5],[56,10,34,5,"_didIteratorError"],[56,27,34,5],[57,10,34,5,"_iteratorError"],[57,24,34,5],[57,27,34,5,"err"],[57,30,34,5],[58,8,34,5],[59,10,34,5],[60,12,34,5],[60,16,34,5,"_iteratorAbruptCompletion"],[60,41,34,5],[60,45,34,5,"_iterator"],[60,54,34,5],[60,55,34,5,"return"],[60,61,34,5],[61,14,34,5],[61,20,34,5,"_iterator"],[61,29,34,5],[61,30,34,5,"return"],[61,36,34,5],[62,12,34,5],[63,10,34,5],[64,12,34,5],[64,16,34,5,"_didIteratorError"],[64,33,34,5],[65,14,34,5],[65,20,34,5,"_iteratorError"],[65,34,34,5],[66,12,34,5],[67,10,34,5],[68,8,34,5],[69,8,35,4],[69,12,35,8,"isRefetch"],[69,21,35,17],[69,25,35,21,"refetchMode"],[69,36,35,32],[69,41,35,37],[69,50,35,46],[69,54,35,50],[69,55,35,51,"context"],[69,62,35,58],[69,63,35,59,"signal"],[69,69,35,65],[69,70,35,66,"aborted"],[69,77,35,73],[69,79,35,75],[70,10,36,6,"context"],[70,17,36,13],[70,18,36,14,"client"],[70,24,36,20],[70,25,36,21,"setQueryData"],[70,37,36,33],[70,38,36,34,"context"],[70,45,36,41],[70,46,36,42,"queryKey"],[70,54,36,50],[70,56,36,52,"result"],[70,62,36,58],[70,63,36,59],[71,8,37,4],[72,8,38,4],[72,15,38,11,"context"],[72,22,38,18],[72,23,38,19,"client"],[72,29,38,25],[72,30,38,26,"getQueryData"],[72,42,38,38],[72,43,38,39,"context"],[72,50,38,46],[72,51,38,47,"queryKey"],[72,59,38,55],[72,60,38,56],[73,6,39,2],[73,7,39,3],[74,6,39,3],[74,23,39,3,"_x"],[74,25,39,3],[75,8,39,3],[75,15,39,3,"_ref2"],[75,20,39,3],[75,21,39,3,"apply"],[75,26,39,3],[75,33,39,3,"arguments"],[75,42,39,3],[76,6,39,3],[77,4,39,3],[78,2,40,0],[79,0,40,1],[79,3]],"functionMap":{"names":["<global>","streamedQuery","<anonymous>","context.client.setQueryData$argument_1"],"mappings":"AAA;ACE;SCK;UCoB;WDE;GDS;CDC"}},"type":"js/module"}]}