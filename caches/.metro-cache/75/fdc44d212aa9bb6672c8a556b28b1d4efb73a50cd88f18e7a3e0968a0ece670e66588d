{"dependencies":[{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"yg7e6laZwmpbIvId5jovq9ugXp8=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30=","exportNames":["*"]}},{"name":"tslib","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":16,"index":93},"end":{"line":3,"column":32,"index":109}}],"key":"vm88vOsSPZItrLOmMEyUuGkd1y4=","exportNames":["*"]}},{"name":"@supabase/node-fetch","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":45,"index":170},"end":{"line":5,"column":76,"index":201}}],"key":"N2iHN7T/eRWsO1F+2LWpBs4eG0U=","exportNames":["*"]}},{"name":"./PostgrestError","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":49,"index":253},"end":{"line":6,"column":76,"index":280}}],"key":"Ek2QNNEtzKsk35jS8iyuZ6VFiDk=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _asyncToGenerator = require(_dependencyMap[0], \"@babel/runtime/helpers/asyncToGenerator\");\n  var _classCallCheck = require(_dependencyMap[1], \"@babel/runtime/helpers/classCallCheck\");\n  var _createClass = require(_dependencyMap[2], \"@babel/runtime/helpers/createClass\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  var tslib_1 = require(_dependencyMap[3], \"tslib\");\n  // @ts-ignore\n  var node_fetch_1 = tslib_1.__importDefault(require(_dependencyMap[4], \"@supabase/node-fetch\"));\n  var PostgrestError_1 = tslib_1.__importDefault(require(_dependencyMap[5], \"./PostgrestError\"));\n  var PostgrestBuilder = /*#__PURE__*/function () {\n    function PostgrestBuilder(builder) {\n      _classCallCheck(this, PostgrestBuilder);\n      var _a, _b;\n      this.shouldThrowOnError = false;\n      this.method = builder.method;\n      this.url = builder.url;\n      this.headers = new Headers(builder.headers);\n      this.schema = builder.schema;\n      this.body = builder.body;\n      this.shouldThrowOnError = (_a = builder.shouldThrowOnError) !== null && _a !== void 0 ? _a : false;\n      this.signal = builder.signal;\n      this.isMaybeSingle = (_b = builder.isMaybeSingle) !== null && _b !== void 0 ? _b : false;\n      if (builder.fetch) {\n        this.fetch = builder.fetch;\n      } else if (typeof fetch === 'undefined') {\n        this.fetch = node_fetch_1.default;\n      } else {\n        this.fetch = fetch;\n      }\n    }\n    /**\n     * If there's an error with the query, throwOnError will reject the promise by\n     * throwing the error instead of returning it as part of a successful response.\n     *\n     * {@link https://github.com/supabase/supabase-js/issues/92}\n     */\n    return _createClass(PostgrestBuilder, [{\n      key: \"throwOnError\",\n      value: function throwOnError() {\n        this.shouldThrowOnError = true;\n        return this;\n      }\n      /**\n       * Set an HTTP header for the request.\n       */\n    }, {\n      key: \"setHeader\",\n      value: function setHeader(name, value) {\n        this.headers = new Headers(this.headers);\n        this.headers.set(name, value);\n        return this;\n      }\n    }, {\n      key: \"then\",\n      value: function then(onfulfilled, onrejected) {\n        var _this = this;\n        // https://postgrest.org/en/stable/api.html#switching-schemas\n        if (this.schema === undefined) {\n          // skip\n        } else if (['GET', 'HEAD'].includes(this.method)) {\n          this.headers.set('Accept-Profile', this.schema);\n        } else {\n          this.headers.set('Content-Profile', this.schema);\n        }\n        if (this.method !== 'GET' && this.method !== 'HEAD') {\n          this.headers.set('Content-Type', 'application/json');\n        }\n        // NOTE: Invoke w/o `this` to avoid illegal invocation error.\n        // https://github.com/supabase/postgrest-js/pull/247\n        var _fetch = this.fetch;\n        var res = _fetch(this.url.toString(), {\n          method: this.method,\n          headers: this.headers,\n          body: JSON.stringify(this.body),\n          signal: this.signal\n        }).then(/*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (res) {\n            var _a, _b, _c, _d;\n            var error = null;\n            var data = null;\n            var count = null;\n            var status = res.status;\n            var statusText = res.statusText;\n            if (res.ok) {\n              if (_this.method !== 'HEAD') {\n                var body = yield res.text();\n                if (body === '') {\n                  // Prefer: return=minimal\n                } else if (_this.headers.get('Accept') === 'text/csv') {\n                  data = body;\n                } else if (_this.headers.get('Accept') && ((_a = _this.headers.get('Accept')) === null || _a === void 0 ? void 0 : _a.includes('application/vnd.pgrst.plan+text'))) {\n                  data = body;\n                } else {\n                  data = JSON.parse(body);\n                }\n              }\n              var countHeader = (_b = _this.headers.get('Prefer')) === null || _b === void 0 ? void 0 : _b.match(/count=(exact|planned|estimated)/);\n              var contentRange = (_c = res.headers.get('content-range')) === null || _c === void 0 ? void 0 : _c.split('/');\n              if (countHeader && contentRange && contentRange.length > 1) {\n                count = parseInt(contentRange[1]);\n              }\n              // Temporary partial fix for https://github.com/supabase/postgrest-js/issues/361\n              // Issue persists e.g. for `.insert([...]).select().maybeSingle()`\n              if (_this.isMaybeSingle && _this.method === 'GET' && Array.isArray(data)) {\n                if (data.length > 1) {\n                  error = {\n                    // https://github.com/PostgREST/postgrest/blob/a867d79c42419af16c18c3fb019eba8df992626f/src/PostgREST/Error.hs#L553\n                    code: 'PGRST116',\n                    details: `Results contain ${data.length} rows, application/vnd.pgrst.object+json requires 1 row`,\n                    hint: null,\n                    message: 'JSON object requested, multiple (or no) rows returned'\n                  };\n                  data = null;\n                  count = null;\n                  status = 406;\n                  statusText = 'Not Acceptable';\n                } else if (data.length === 1) {\n                  data = data[0];\n                } else {\n                  data = null;\n                }\n              }\n            } else {\n              var _body = yield res.text();\n              try {\n                error = JSON.parse(_body);\n                // Workaround for https://github.com/supabase/postgrest-js/issues/295\n                if (Array.isArray(error) && res.status === 404) {\n                  data = [];\n                  error = null;\n                  status = 200;\n                  statusText = 'OK';\n                }\n              } catch (_e) {\n                // Workaround for https://github.com/supabase/postgrest-js/issues/295\n                if (res.status === 404 && _body === '') {\n                  status = 204;\n                  statusText = 'No Content';\n                } else {\n                  error = {\n                    message: _body\n                  };\n                }\n              }\n              if (error && _this.isMaybeSingle && ((_d = error === null || error === void 0 ? void 0 : error.details) === null || _d === void 0 ? void 0 : _d.includes('0 rows'))) {\n                error = null;\n                status = 200;\n                statusText = 'OK';\n              }\n              if (error && _this.shouldThrowOnError) {\n                throw new PostgrestError_1.default(error);\n              }\n            }\n            var postgrestResponse = {\n              error,\n              data,\n              count,\n              status,\n              statusText\n            };\n            return postgrestResponse;\n          });\n          return function (_x) {\n            return _ref.apply(this, arguments);\n          };\n        }());\n        if (!this.shouldThrowOnError) {\n          res = res.catch(fetchError => {\n            var _a, _b, _c;\n            return {\n              error: {\n                message: `${(_a = fetchError === null || fetchError === void 0 ? void 0 : fetchError.name) !== null && _a !== void 0 ? _a : 'FetchError'}: ${fetchError === null || fetchError === void 0 ? void 0 : fetchError.message}`,\n                details: `${(_b = fetchError === null || fetchError === void 0 ? void 0 : fetchError.stack) !== null && _b !== void 0 ? _b : ''}`,\n                hint: '',\n                code: `${(_c = fetchError === null || fetchError === void 0 ? void 0 : fetchError.code) !== null && _c !== void 0 ? _c : ''}`\n              },\n              data: null,\n              count: null,\n              status: 0,\n              statusText: ''\n            };\n          });\n        }\n        return res.then(onfulfilled, onrejected);\n      }\n      /**\n       * Override the type of the returned `data`.\n       *\n       * @typeParam NewResult - The new result type to override with\n       * @deprecated Use overrideTypes<yourType, { merge: false }>() method at the end of your call chain instead\n       */\n    }, {\n      key: \"returns\",\n      value: function returns() {\n        /* istanbul ignore next */\n        return this;\n      }\n      /**\n       * Override the type of the returned `data` field in the response.\n       *\n       * @typeParam NewResult - The new type to cast the response data to\n       * @typeParam Options - Optional type configuration (defaults to { merge: true })\n       * @typeParam Options.merge - When true, merges the new type with existing return type. When false, replaces the existing types entirely (defaults to true)\n       * @example\n       * ```typescript\n       * // Merge with existing types (default behavior)\n       * const query = supabase\n       *   .from('users')\n       *   .select()\n       *   .overrideTypes<{ custom_field: string }>()\n       *\n       * // Replace existing types completely\n       * const replaceQuery = supabase\n       *   .from('users')\n       *   .select()\n       *   .overrideTypes<{ id: number; name: string }, { merge: false }>()\n       * ```\n       * @returns A PostgrestBuilder instance with the new type\n       */\n    }, {\n      key: \"overrideTypes\",\n      value: function overrideTypes() {\n        return this;\n      }\n    }]);\n  }();\n  exports.default = PostgrestBuilder;\n});","lineCount":232,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_asyncToGenerator"],[4,23,1,13],[4,26,1,13,"require"],[4,33,1,13],[4,34,1,13,"_dependencyMap"],[4,48,1,13],[5,2,1,13],[5,6,1,13,"_classCallCheck"],[5,21,1,13],[5,24,1,13,"require"],[5,31,1,13],[5,32,1,13,"_dependencyMap"],[5,46,1,13],[6,2,1,13],[6,6,1,13,"_createClass"],[6,18,1,13],[6,21,1,13,"require"],[6,28,1,13],[6,29,1,13,"_dependencyMap"],[6,43,1,13],[7,2,2,0,"Object"],[7,8,2,6],[7,9,2,7,"defineProperty"],[7,23,2,21],[7,24,2,22,"exports"],[7,31,2,29],[7,33,2,31],[7,45,2,43],[7,47,2,45],[8,4,2,47,"value"],[8,9,2,52],[8,11,2,54],[9,2,2,59],[9,3,2,60],[9,4,2,61],[10,2,3,0],[10,6,3,6,"tslib_1"],[10,13,3,13],[10,16,3,16,"require"],[10,23,3,23],[10,24,3,23,"_dependencyMap"],[10,38,3,23],[10,50,3,31],[10,51,3,32],[11,2,4,0],[12,2,5,0],[12,6,5,6,"node_fetch_1"],[12,18,5,18],[12,21,5,21,"tslib_1"],[12,28,5,28],[12,29,5,29,"__importDefault"],[12,44,5,44],[12,45,5,45,"require"],[12,52,5,52],[12,53,5,52,"_dependencyMap"],[12,67,5,52],[12,94,5,75],[12,95,5,76],[12,96,5,77],[13,2,6,0],[13,6,6,6,"PostgrestError_1"],[13,22,6,22],[13,25,6,25,"tslib_1"],[13,32,6,32],[13,33,6,33,"__importDefault"],[13,48,6,48],[13,49,6,49,"require"],[13,56,6,56],[13,57,6,56,"_dependencyMap"],[13,71,6,56],[13,94,6,75],[13,95,6,76],[13,96,6,77],[14,2,6,78],[14,6,7,6,"PostgrestBuilder"],[14,22,7,22],[15,4,8,4],[15,13,8,4,"PostgrestBuilder"],[15,30,8,16,"builder"],[15,37,8,23],[15,39,8,25],[16,6,8,25,"_classCallCheck"],[16,21,8,25],[16,28,8,25,"PostgrestBuilder"],[16,44,8,25],[17,6,9,8],[17,10,9,12,"_a"],[17,12,9,14],[17,14,9,16,"_b"],[17,16,9,18],[18,6,10,8],[18,10,10,12],[18,11,10,13,"shouldThrowOnError"],[18,29,10,31],[18,32,10,34],[18,37,10,39],[19,6,11,8],[19,10,11,12],[19,11,11,13,"method"],[19,17,11,19],[19,20,11,22,"builder"],[19,27,11,29],[19,28,11,30,"method"],[19,34,11,36],[20,6,12,8],[20,10,12,12],[20,11,12,13,"url"],[20,14,12,16],[20,17,12,19,"builder"],[20,24,12,26],[20,25,12,27,"url"],[20,28,12,30],[21,6,13,8],[21,10,13,12],[21,11,13,13,"headers"],[21,18,13,20],[21,21,13,23],[21,25,13,27,"Headers"],[21,32,13,34],[21,33,13,35,"builder"],[21,40,13,42],[21,41,13,43,"headers"],[21,48,13,50],[21,49,13,51],[22,6,14,8],[22,10,14,12],[22,11,14,13,"schema"],[22,17,14,19],[22,20,14,22,"builder"],[22,27,14,29],[22,28,14,30,"schema"],[22,34,14,36],[23,6,15,8],[23,10,15,12],[23,11,15,13,"body"],[23,15,15,17],[23,18,15,20,"builder"],[23,25,15,27],[23,26,15,28,"body"],[23,30,15,32],[24,6,16,8],[24,10,16,12],[24,11,16,13,"shouldThrowOnError"],[24,29,16,31],[24,32,16,34],[24,33,16,35,"_a"],[24,35,16,37],[24,38,16,40,"builder"],[24,45,16,47],[24,46,16,48,"shouldThrowOnError"],[24,64,16,66],[24,70,16,72],[24,74,16,76],[24,78,16,80,"_a"],[24,80,16,82],[24,85,16,87],[24,90,16,92],[24,91,16,93],[24,94,16,96,"_a"],[24,96,16,98],[24,99,16,101],[24,104,16,106],[25,6,17,8],[25,10,17,12],[25,11,17,13,"signal"],[25,17,17,19],[25,20,17,22,"builder"],[25,27,17,29],[25,28,17,30,"signal"],[25,34,17,36],[26,6,18,8],[26,10,18,12],[26,11,18,13,"isMaybeSingle"],[26,24,18,26],[26,27,18,29],[26,28,18,30,"_b"],[26,30,18,32],[26,33,18,35,"builder"],[26,40,18,42],[26,41,18,43,"isMaybeSingle"],[26,54,18,56],[26,60,18,62],[26,64,18,66],[26,68,18,70,"_b"],[26,70,18,72],[26,75,18,77],[26,80,18,82],[26,81,18,83],[26,84,18,86,"_b"],[26,86,18,88],[26,89,18,91],[26,94,18,96],[27,6,19,8],[27,10,19,12,"builder"],[27,17,19,19],[27,18,19,20,"fetch"],[27,23,19,25],[27,25,19,27],[28,8,20,12],[28,12,20,16],[28,13,20,17,"fetch"],[28,18,20,22],[28,21,20,25,"builder"],[28,28,20,32],[28,29,20,33,"fetch"],[28,34,20,38],[29,6,21,8],[29,7,21,9],[29,13,22,13],[29,17,22,17],[29,24,22,24,"fetch"],[29,29,22,29],[29,34,22,34],[29,45,22,45],[29,47,22,47],[30,8,23,12],[30,12,23,16],[30,13,23,17,"fetch"],[30,18,23,22],[30,21,23,25,"node_fetch_1"],[30,33,23,37],[30,34,23,38,"default"],[30,41,23,45],[31,6,24,8],[31,7,24,9],[31,13,25,13],[32,8,26,12],[32,12,26,16],[32,13,26,17,"fetch"],[32,18,26,22],[32,21,26,25,"fetch"],[32,26,26,30],[33,6,27,8],[34,4,28,4],[35,4,29,4],[36,0,30,0],[37,0,31,0],[38,0,32,0],[39,0,33,0],[40,0,34,0],[41,4,29,4],[41,11,29,4,"_createClass"],[41,23,29,4],[41,24,29,4,"PostgrestBuilder"],[41,40,29,4],[42,6,29,4,"key"],[42,9,29,4],[43,6,29,4,"value"],[43,11,29,4],[43,13,35,4],[43,22,35,4,"throwOnError"],[43,34,35,16,"throwOnError"],[43,35,35,16],[43,37,35,19],[44,8,36,8],[44,12,36,12],[44,13,36,13,"shouldThrowOnError"],[44,31,36,31],[44,34,36,34],[44,38,36,38],[45,8,37,8],[45,15,37,15],[45,19,37,19],[46,6,38,4],[47,6,39,4],[48,0,40,0],[49,0,41,0],[50,4,39,4],[51,6,39,4,"key"],[51,9,39,4],[52,6,39,4,"value"],[52,11,39,4],[52,13,42,4],[52,22,42,4,"setHeader"],[52,31,42,13,"setHeader"],[52,32,42,14,"name"],[52,36,42,18],[52,38,42,20,"value"],[52,43,42,25],[52,45,42,27],[53,8,43,8],[53,12,43,12],[53,13,43,13,"headers"],[53,20,43,20],[53,23,43,23],[53,27,43,27,"Headers"],[53,34,43,34],[53,35,43,35],[53,39,43,39],[53,40,43,40,"headers"],[53,47,43,47],[53,48,43,48],[54,8,44,8],[54,12,44,12],[54,13,44,13,"headers"],[54,20,44,20],[54,21,44,21,"set"],[54,24,44,24],[54,25,44,25,"name"],[54,29,44,29],[54,31,44,31,"value"],[54,36,44,36],[54,37,44,37],[55,8,45,8],[55,15,45,15],[55,19,45,19],[56,6,46,4],[57,4,46,5],[58,6,46,5,"key"],[58,9,46,5],[59,6,46,5,"value"],[59,11,46,5],[59,13,47,4],[59,22,47,4,"then"],[59,26,47,8,"then"],[59,27,47,9,"onfulfilled"],[59,38,47,20],[59,40,47,22,"onrejected"],[59,50,47,32],[59,52,47,34],[60,8,47,34],[60,12,47,34,"_this"],[60,17,47,34],[61,8,48,8],[62,8,49,8],[62,12,49,12],[62,16,49,16],[62,17,49,17,"schema"],[62,23,49,23],[62,28,49,28,"undefined"],[62,37,49,37],[62,39,49,39],[63,10,50,12],[64,8,50,12],[64,9,51,9],[64,15,52,13],[64,19,52,17],[64,20,52,18],[64,25,52,23],[64,27,52,25],[64,33,52,31],[64,34,52,32],[64,35,52,33,"includes"],[64,43,52,41],[64,44,52,42],[64,48,52,46],[64,49,52,47,"method"],[64,55,52,53],[64,56,52,54],[64,58,52,56],[65,10,53,12],[65,14,53,16],[65,15,53,17,"headers"],[65,22,53,24],[65,23,53,25,"set"],[65,26,53,28],[65,27,53,29],[65,43,53,45],[65,45,53,47],[65,49,53,51],[65,50,53,52,"schema"],[65,56,53,58],[65,57,53,59],[66,8,54,8],[66,9,54,9],[66,15,55,13],[67,10,56,12],[67,14,56,16],[67,15,56,17,"headers"],[67,22,56,24],[67,23,56,25,"set"],[67,26,56,28],[67,27,56,29],[67,44,56,46],[67,46,56,48],[67,50,56,52],[67,51,56,53,"schema"],[67,57,56,59],[67,58,56,60],[68,8,57,8],[69,8,58,8],[69,12,58,12],[69,16,58,16],[69,17,58,17,"method"],[69,23,58,23],[69,28,58,28],[69,33,58,33],[69,37,58,37],[69,41,58,41],[69,42,58,42,"method"],[69,48,58,48],[69,53,58,53],[69,59,58,59],[69,61,58,61],[70,10,59,12],[70,14,59,16],[70,15,59,17,"headers"],[70,22,59,24],[70,23,59,25,"set"],[70,26,59,28],[70,27,59,29],[70,41,59,43],[70,43,59,45],[70,61,59,63],[70,62,59,64],[71,8,60,8],[72,8,61,8],[73,8,62,8],[74,8,63,8],[74,12,63,14,"_fetch"],[74,18,63,20],[74,21,63,23],[74,25,63,27],[74,26,63,28,"fetch"],[74,31,63,33],[75,8,64,8],[75,12,64,12,"res"],[75,15,64,15],[75,18,64,18,"_fetch"],[75,24,64,24],[75,25,64,25],[75,29,64,29],[75,30,64,30,"url"],[75,33,64,33],[75,34,64,34,"toString"],[75,42,64,42],[75,43,64,43],[75,44,64,44],[75,46,64,46],[76,10,65,12,"method"],[76,16,65,18],[76,18,65,20],[76,22,65,24],[76,23,65,25,"method"],[76,29,65,31],[77,10,66,12,"headers"],[77,17,66,19],[77,19,66,21],[77,23,66,25],[77,24,66,26,"headers"],[77,31,66,33],[78,10,67,12,"body"],[78,14,67,16],[78,16,67,18,"JSON"],[78,20,67,22],[78,21,67,23,"stringify"],[78,30,67,32],[78,31,67,33],[78,35,67,37],[78,36,67,38,"body"],[78,40,67,42],[78,41,67,43],[79,10,68,12,"signal"],[79,16,68,18],[79,18,68,20],[79,22,68,24],[79,23,68,25,"signal"],[80,8,69,8],[80,9,69,9],[80,10,69,10],[80,11,69,11,"then"],[80,15,69,15],[81,10,69,15],[81,14,69,15,"_ref"],[81,18,69,15],[81,21,69,15,"_asyncToGenerator"],[81,38,69,15],[81,39,69,16],[81,50,69,23,"res"],[81,53,69,26],[81,55,69,31],[82,12,70,12],[82,16,70,16,"_a"],[82,18,70,18],[82,20,70,20,"_b"],[82,22,70,22],[82,24,70,24,"_c"],[82,26,70,26],[82,28,70,28,"_d"],[82,30,70,30],[83,12,71,12],[83,16,71,16,"error"],[83,21,71,21],[83,24,71,24],[83,28,71,28],[84,12,72,12],[84,16,72,16,"data"],[84,20,72,20],[84,23,72,23],[84,27,72,27],[85,12,73,12],[85,16,73,16,"count"],[85,21,73,21],[85,24,73,24],[85,28,73,28],[86,12,74,12],[86,16,74,16,"status"],[86,22,74,22],[86,25,74,25,"res"],[86,28,74,28],[86,29,74,29,"status"],[86,35,74,35],[87,12,75,12],[87,16,75,16,"statusText"],[87,26,75,26],[87,29,75,29,"res"],[87,32,75,32],[87,33,75,33,"statusText"],[87,43,75,43],[88,12,76,12],[88,16,76,16,"res"],[88,19,76,19],[88,20,76,20,"ok"],[88,22,76,22],[88,24,76,24],[89,14,77,16],[89,18,77,20,"_this"],[89,23,77,24],[89,24,77,25,"method"],[89,30,77,31],[89,35,77,36],[89,41,77,42],[89,43,77,44],[90,16,78,20],[90,20,78,26,"body"],[90,24,78,30],[90,33,78,39,"res"],[90,36,78,42],[90,37,78,43,"text"],[90,41,78,47],[90,42,78,48],[90,43,78,49],[91,16,79,20],[91,20,79,24,"body"],[91,24,79,28],[91,29,79,33],[91,31,79,35],[91,33,79,37],[92,18,80,24],[93,16,80,24],[93,17,81,21],[93,23,82,25],[93,27,82,29,"_this"],[93,32,82,33],[93,33,82,34,"headers"],[93,40,82,41],[93,41,82,42,"get"],[93,44,82,45],[93,45,82,46],[93,53,82,54],[93,54,82,55],[93,59,82,60],[93,69,82,70],[93,71,82,72],[94,18,83,24,"data"],[94,22,83,28],[94,25,83,31,"body"],[94,29,83,35],[95,16,84,20],[95,17,84,21],[95,23,85,25],[95,27,85,29,"_this"],[95,32,85,33],[95,33,85,34,"headers"],[95,40,85,41],[95,41,85,42,"get"],[95,44,85,45],[95,45,85,46],[95,53,85,54],[95,54,85,55],[95,59,86,25],[95,60,86,26,"_a"],[95,62,86,28],[95,65,86,31,"_this"],[95,70,86,35],[95,71,86,36,"headers"],[95,78,86,43],[95,79,86,44,"get"],[95,82,86,47],[95,83,86,48],[95,91,86,56],[95,92,86,57],[95,98,86,63],[95,102,86,67],[95,106,86,71,"_a"],[95,108,86,73],[95,113,86,78],[95,118,86,83],[95,119,86,84],[95,122,86,87],[95,127,86,92],[95,128,86,93],[95,131,86,96,"_a"],[95,133,86,98],[95,134,86,99,"includes"],[95,142,86,107],[95,143,86,108],[95,176,86,141],[95,177,86,142],[95,178,86,143],[95,180,86,145],[96,18,87,24,"data"],[96,22,87,28],[96,25,87,31,"body"],[96,29,87,35],[97,16,88,20],[97,17,88,21],[97,23,89,25],[98,18,90,24,"data"],[98,22,90,28],[98,25,90,31,"JSON"],[98,29,90,35],[98,30,90,36,"parse"],[98,35,90,41],[98,36,90,42,"body"],[98,40,90,46],[98,41,90,47],[99,16,91,20],[100,14,92,16],[101,14,93,16],[101,18,93,22,"countHeader"],[101,29,93,33],[101,32,93,36],[101,33,93,37,"_b"],[101,35,93,39],[101,38,93,42,"_this"],[101,43,93,46],[101,44,93,47,"headers"],[101,51,93,54],[101,52,93,55,"get"],[101,55,93,58],[101,56,93,59],[101,64,93,67],[101,65,93,68],[101,71,93,74],[101,75,93,78],[101,79,93,82,"_b"],[101,81,93,84],[101,86,93,89],[101,91,93,94],[101,92,93,95],[101,95,93,98],[101,100,93,103],[101,101,93,104],[101,104,93,107,"_b"],[101,106,93,109],[101,107,93,110,"match"],[101,112,93,115],[101,113,93,116],[101,146,93,149],[101,147,93,150],[102,14,94,16],[102,18,94,22,"contentRange"],[102,30,94,34],[102,33,94,37],[102,34,94,38,"_c"],[102,36,94,40],[102,39,94,43,"res"],[102,42,94,46],[102,43,94,47,"headers"],[102,50,94,54],[102,51,94,55,"get"],[102,54,94,58],[102,55,94,59],[102,70,94,74],[102,71,94,75],[102,77,94,81],[102,81,94,85],[102,85,94,89,"_c"],[102,87,94,91],[102,92,94,96],[102,97,94,101],[102,98,94,102],[102,101,94,105],[102,106,94,110],[102,107,94,111],[102,110,94,114,"_c"],[102,112,94,116],[102,113,94,117,"split"],[102,118,94,122],[102,119,94,123],[102,122,94,126],[102,123,94,127],[103,14,95,16],[103,18,95,20,"countHeader"],[103,29,95,31],[103,33,95,35,"contentRange"],[103,45,95,47],[103,49,95,51,"contentRange"],[103,61,95,63],[103,62,95,64,"length"],[103,68,95,70],[103,71,95,73],[103,72,95,74],[103,74,95,76],[104,16,96,20,"count"],[104,21,96,25],[104,24,96,28,"parseInt"],[104,32,96,36],[104,33,96,37,"contentRange"],[104,45,96,49],[104,46,96,50],[104,47,96,51],[104,48,96,52],[104,49,96,53],[105,14,97,16],[106,14,98,16],[107,14,99,16],[108,14,100,16],[108,18,100,20,"_this"],[108,23,100,24],[108,24,100,25,"isMaybeSingle"],[108,37,100,38],[108,41,100,42,"_this"],[108,46,100,46],[108,47,100,47,"method"],[108,53,100,53],[108,58,100,58],[108,63,100,63],[108,67,100,67,"Array"],[108,72,100,72],[108,73,100,73,"isArray"],[108,80,100,80],[108,81,100,81,"data"],[108,85,100,85],[108,86,100,86],[108,88,100,88],[109,16,101,20],[109,20,101,24,"data"],[109,24,101,28],[109,25,101,29,"length"],[109,31,101,35],[109,34,101,38],[109,35,101,39],[109,37,101,41],[110,18,102,24,"error"],[110,23,102,29],[110,26,102,32],[111,20,103,28],[112,20,104,28,"code"],[112,24,104,32],[112,26,104,34],[112,36,104,44],[113,20,105,28,"details"],[113,27,105,35],[113,29,105,37],[113,48,105,56,"data"],[113,52,105,60],[113,53,105,61,"length"],[113,59,105,67],[113,116,105,124],[114,20,106,28,"hint"],[114,24,106,32],[114,26,106,34],[114,30,106,38],[115,20,107,28,"message"],[115,27,107,35],[115,29,107,37],[116,18,108,24],[116,19,108,25],[117,18,109,24,"data"],[117,22,109,28],[117,25,109,31],[117,29,109,35],[118,18,110,24,"count"],[118,23,110,29],[118,26,110,32],[118,30,110,36],[119,18,111,24,"status"],[119,24,111,30],[119,27,111,33],[119,30,111,36],[120,18,112,24,"statusText"],[120,28,112,34],[120,31,112,37],[120,47,112,53],[121,16,113,20],[121,17,113,21],[121,23,114,25],[121,27,114,29,"data"],[121,31,114,33],[121,32,114,34,"length"],[121,38,114,40],[121,43,114,45],[121,44,114,46],[121,46,114,48],[122,18,115,24,"data"],[122,22,115,28],[122,25,115,31,"data"],[122,29,115,35],[122,30,115,36],[122,31,115,37],[122,32,115,38],[123,16,116,20],[123,17,116,21],[123,23,117,25],[124,18,118,24,"data"],[124,22,118,28],[124,25,118,31],[124,29,118,35],[125,16,119,20],[126,14,120,16],[127,12,121,12],[127,13,121,13],[127,19,122,17],[128,14,123,16],[128,18,123,22,"body"],[128,23,123,26],[128,32,123,35,"res"],[128,35,123,38],[128,36,123,39,"text"],[128,40,123,43],[128,41,123,44],[128,42,123,45],[129,14,124,16],[129,18,124,20],[130,16,125,20,"error"],[130,21,125,25],[130,24,125,28,"JSON"],[130,28,125,32],[130,29,125,33,"parse"],[130,34,125,38],[130,35,125,39,"body"],[130,40,125,43],[130,41,125,44],[131,16,126,20],[132,16,127,20],[132,20,127,24,"Array"],[132,25,127,29],[132,26,127,30,"isArray"],[132,33,127,37],[132,34,127,38,"error"],[132,39,127,43],[132,40,127,44],[132,44,127,48,"res"],[132,47,127,51],[132,48,127,52,"status"],[132,54,127,58],[132,59,127,63],[132,62,127,66],[132,64,127,68],[133,18,128,24,"data"],[133,22,128,28],[133,25,128,31],[133,27,128,33],[134,18,129,24,"error"],[134,23,129,29],[134,26,129,32],[134,30,129,36],[135,18,130,24,"status"],[135,24,130,30],[135,27,130,33],[135,30,130,36],[136,18,131,24,"statusText"],[136,28,131,34],[136,31,131,37],[136,35,131,41],[137,16,132,20],[138,14,133,16],[138,15,133,17],[138,16,134,16],[138,23,134,23,"_e"],[138,25,134,25],[138,27,134,27],[139,16,135,20],[140,16,136,20],[140,20,136,24,"res"],[140,23,136,27],[140,24,136,28,"status"],[140,30,136,34],[140,35,136,39],[140,38,136,42],[140,42,136,46,"body"],[140,47,136,50],[140,52,136,55],[140,54,136,57],[140,56,136,59],[141,18,137,24,"status"],[141,24,137,30],[141,27,137,33],[141,30,137,36],[142,18,138,24,"statusText"],[142,28,138,34],[142,31,138,37],[142,43,138,49],[143,16,139,20],[143,17,139,21],[143,23,140,25],[144,18,141,24,"error"],[144,23,141,29],[144,26,141,32],[145,20,142,28,"message"],[145,27,142,35],[145,29,142,37,"body"],[146,18,143,24],[146,19,143,25],[147,16,144,20],[148,14,145,16],[149,14,146,16],[149,18,146,20,"error"],[149,23,146,25],[149,27,146,29,"_this"],[149,32,146,33],[149,33,146,34,"isMaybeSingle"],[149,46,146,47],[149,51,146,52],[149,52,146,53,"_d"],[149,54,146,55],[149,57,146,58,"error"],[149,62,146,63],[149,67,146,68],[149,71,146,72],[149,75,146,76,"error"],[149,80,146,81],[149,85,146,86],[149,90,146,91],[149,91,146,92],[149,94,146,95],[149,99,146,100],[149,100,146,101],[149,103,146,104,"error"],[149,108,146,109],[149,109,146,110,"details"],[149,116,146,117],[149,122,146,123],[149,126,146,127],[149,130,146,131,"_d"],[149,132,146,133],[149,137,146,138],[149,142,146,143],[149,143,146,144],[149,146,146,147],[149,151,146,152],[149,152,146,153],[149,155,146,156,"_d"],[149,157,146,158],[149,158,146,159,"includes"],[149,166,146,167],[149,167,146,168],[149,175,146,176],[149,176,146,177],[149,177,146,178],[149,179,146,180],[150,16,147,20,"error"],[150,21,147,25],[150,24,147,28],[150,28,147,32],[151,16,148,20,"status"],[151,22,148,26],[151,25,148,29],[151,28,148,32],[152,16,149,20,"statusText"],[152,26,149,30],[152,29,149,33],[152,33,149,37],[153,14,150,16],[154,14,151,16],[154,18,151,20,"error"],[154,23,151,25],[154,27,151,29,"_this"],[154,32,151,33],[154,33,151,34,"shouldThrowOnError"],[154,51,151,52],[154,53,151,54],[155,16,152,20],[155,22,152,26],[155,26,152,30,"PostgrestError_1"],[155,42,152,46],[155,43,152,47,"default"],[155,50,152,54],[155,51,152,55,"error"],[155,56,152,60],[155,57,152,61],[156,14,153,16],[157,12,154,12],[158,12,155,12],[158,16,155,18,"postgrestResponse"],[158,33,155,35],[158,36,155,38],[159,14,156,16,"error"],[159,19,156,21],[160,14,157,16,"data"],[160,18,157,20],[161,14,158,16,"count"],[161,19,158,21],[162,14,159,16,"status"],[162,20,159,22],[163,14,160,16,"statusText"],[164,12,161,12],[164,13,161,13],[165,12,162,12],[165,19,162,19,"postgrestResponse"],[165,36,162,36],[166,10,163,8],[166,11,163,9],[167,10,163,9],[167,27,163,9,"_x"],[167,29,163,9],[168,12,163,9],[168,19,163,9,"_ref"],[168,23,163,9],[168,24,163,9,"apply"],[168,29,163,9],[168,36,163,9,"arguments"],[168,45,163,9],[169,10,163,9],[170,8,163,9],[170,12,163,10],[171,8,164,8],[171,12,164,12],[171,13,164,13],[171,17,164,17],[171,18,164,18,"shouldThrowOnError"],[171,36,164,36],[171,38,164,38],[172,10,165,12,"res"],[172,13,165,15],[172,16,165,18,"res"],[172,19,165,21],[172,20,165,22,"catch"],[172,25,165,27],[172,26,165,29,"fetchError"],[172,36,165,39],[172,40,165,44],[173,12,166,16],[173,16,166,20,"_a"],[173,18,166,22],[173,20,166,24,"_b"],[173,22,166,26],[173,24,166,28,"_c"],[173,26,166,30],[174,12,167,16],[174,19,167,24],[175,14,168,20,"error"],[175,19,168,25],[175,21,168,27],[176,16,169,24,"message"],[176,23,169,31],[176,25,169,33],[176,28,169,36],[176,29,169,37,"_a"],[176,31,169,39],[176,34,169,42,"fetchError"],[176,44,169,52],[176,49,169,57],[176,53,169,61],[176,57,169,65,"fetchError"],[176,67,169,75],[176,72,169,80],[176,77,169,85],[176,78,169,86],[176,81,169,89],[176,86,169,94],[176,87,169,95],[176,90,169,98,"fetchError"],[176,100,169,108],[176,101,169,109,"name"],[176,105,169,113],[176,111,169,119],[176,115,169,123],[176,119,169,127,"_a"],[176,121,169,129],[176,126,169,134],[176,131,169,139],[176,132,169,140],[176,135,169,143,"_a"],[176,137,169,145],[176,140,169,148],[176,152,169,160],[176,157,169,165,"fetchError"],[176,167,169,175],[176,172,169,180],[176,176,169,184],[176,180,169,188,"fetchError"],[176,190,169,198],[176,195,169,203],[176,200,169,208],[176,201,169,209],[176,204,169,212],[176,209,169,217],[176,210,169,218],[176,213,169,221,"fetchError"],[176,223,169,231],[176,224,169,232,"message"],[176,231,169,239],[176,233,169,241],[177,16,170,24,"details"],[177,23,170,31],[177,25,170,33],[177,28,170,36],[177,29,170,37,"_b"],[177,31,170,39],[177,34,170,42,"fetchError"],[177,44,170,52],[177,49,170,57],[177,53,170,61],[177,57,170,65,"fetchError"],[177,67,170,75],[177,72,170,80],[177,77,170,85],[177,78,170,86],[177,81,170,89],[177,86,170,94],[177,87,170,95],[177,90,170,98,"fetchError"],[177,100,170,108],[177,101,170,109,"stack"],[177,106,170,114],[177,112,170,120],[177,116,170,124],[177,120,170,128,"_b"],[177,122,170,130],[177,127,170,135],[177,132,170,140],[177,133,170,141],[177,136,170,144,"_b"],[177,138,170,146],[177,141,170,149],[177,143,170,151],[177,145,170,153],[178,16,171,24,"hint"],[178,20,171,28],[178,22,171,30],[178,24,171,32],[179,16,172,24,"code"],[179,20,172,28],[179,22,172,30],[179,25,172,33],[179,26,172,34,"_c"],[179,28,172,36],[179,31,172,39,"fetchError"],[179,41,172,49],[179,46,172,54],[179,50,172,58],[179,54,172,62,"fetchError"],[179,64,172,72],[179,69,172,77],[179,74,172,82],[179,75,172,83],[179,78,172,86],[179,83,172,91],[179,84,172,92],[179,87,172,95,"fetchError"],[179,97,172,105],[179,98,172,106,"code"],[179,102,172,110],[179,108,172,116],[179,112,172,120],[179,116,172,124,"_c"],[179,118,172,126],[179,123,172,131],[179,128,172,136],[179,129,172,137],[179,132,172,140,"_c"],[179,134,172,142],[179,137,172,145],[179,139,172,147],[180,14,173,20],[180,15,173,21],[181,14,174,20,"data"],[181,18,174,24],[181,20,174,26],[181,24,174,30],[182,14,175,20,"count"],[182,19,175,25],[182,21,175,27],[182,25,175,31],[183,14,176,20,"status"],[183,20,176,26],[183,22,176,28],[183,23,176,29],[184,14,177,20,"statusText"],[184,24,177,30],[184,26,177,32],[185,12,178,16],[185,13,178,17],[186,10,179,12],[186,11,179,13],[186,12,179,14],[187,8,180,8],[188,8,181,8],[188,15,181,15,"res"],[188,18,181,18],[188,19,181,19,"then"],[188,23,181,23],[188,24,181,24,"onfulfilled"],[188,35,181,35],[188,37,181,37,"onrejected"],[188,47,181,47],[188,48,181,48],[189,6,182,4],[190,6,183,4],[191,0,184,0],[192,0,185,0],[193,0,186,0],[194,0,187,0],[195,0,188,0],[196,4,183,4],[197,6,183,4,"key"],[197,9,183,4],[198,6,183,4,"value"],[198,11,183,4],[198,13,189,4],[198,22,189,4,"returns"],[198,29,189,11,"returns"],[198,30,189,11],[198,32,189,14],[199,8,190,8],[200,8,191,8],[200,15,191,15],[200,19,191,19],[201,6,192,4],[202,6,193,4],[203,0,194,0],[204,0,195,0],[205,0,196,0],[206,0,197,0],[207,0,198,0],[208,0,199,0],[209,0,200,0],[210,0,201,0],[211,0,202,0],[212,0,203,0],[213,0,204,0],[214,0,205,0],[215,0,206,0],[216,0,207,0],[217,0,208,0],[218,0,209,0],[219,0,210,0],[220,0,211,0],[221,0,212,0],[222,0,213,0],[223,0,214,0],[224,4,193,4],[225,6,193,4,"key"],[225,9,193,4],[226,6,193,4,"value"],[226,11,193,4],[226,13,215,4],[226,22,215,4,"overrideTypes"],[226,35,215,17,"overrideTypes"],[226,36,215,17],[226,38,215,20],[227,8,216,8],[227,15,216,15],[227,19,216,19],[228,6,217,4],[229,4,217,5],[230,2,217,5],[231,2,219,0,"exports"],[231,9,219,7],[231,10,219,8,"default"],[231,17,219,15],[231,20,219,18,"PostgrestBuilder"],[231,36,219,34],[232,0,219,35],[232,3]],"functionMap":{"names":["<global>","PostgrestBuilder","constructor","throwOnError","setHeader","then","_fetch.then$argument_0","res._catch$argument_0","returns","overrideTypes"],"mappings":"AAA;ACM;ICC;KDoB;IEO;KFG;IGI;KHI;IIC;gBCsB;SD8F;4BEE;aFc;KJG;IOO;KPG;IQuB;KRE;CDC"}},"type":"js/module"}]}